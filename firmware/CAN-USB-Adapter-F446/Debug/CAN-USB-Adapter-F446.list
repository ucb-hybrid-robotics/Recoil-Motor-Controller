
CAN-USB-Adapter-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d8  080028d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028e0  080028e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  080028f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080028f4  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f80  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c05  00000000  00000000  00035fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000fbe3  00000000  00000000  00038bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  000487a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  000492b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f6c  00000000  00000000  0004a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f75  00000000  00000000  0006d62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d350d  00000000  00000000  000845a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157aae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000244c  00000000  00000000  00157b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080028a8 	.word	0x080028a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080028a8 	.word	0x080028a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t uart_tx_buffer[64];

/**
 * CAN receive interrupt routine.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000508:	b530      	push	{r4, r5, lr}
  CAN_Frame rx_frame;

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800050c:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800050e:	4819      	ldr	r0, [pc, #100]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
  CAN_getRxFrame(&hcan1, &rx_frame);

  uart_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 8000510:	4d19      	ldr	r5, [pc, #100]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000512:	2120      	movs	r1, #32
 8000514:	f001 f8b2 	bl	800167c <HAL_GPIO_WritePin>
  CAN_getRxFrame(&hcan1, &rx_frame);
 8000518:	4669      	mov	r1, sp
 800051a:	4818      	ldr	r0, [pc, #96]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800051c:	f000 f9b2 	bl	8000884 <CAN_getRxFrame>
  uart_tx_buffer[3] = 0x00U;
  uart_tx_buffer[4] = 0x00U;

  uart_tx_buffer[5] = rx_frame.size;  // DLC

  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 8000520:	9b00      	ldr	r3, [sp, #0]
  uart_tx_buffer[5] = rx_frame.size;  // DLC
 8000522:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 8000526:	f8bd 1000 	ldrh.w	r1, [sp]
  uart_tx_buffer[5] = rx_frame.size;  // DLC
 800052a:	716c      	strb	r4, [r5, #5]
  uart_tx_buffer[0] = PYTHONCAN_START_OF_FRAME;
 800052c:	22aa      	movs	r2, #170	; 0xaa
 800052e:	602a      	str	r2, [r5, #0]
  uart_tx_buffer[4] = 0x00U;
 8000530:	2200      	movs	r2, #0
 8000532:	712a      	strb	r2, [r5, #4]
  uart_tx_buffer[7] = READ_BITS(rx_frame.id >> 8U, 0xFFU);
  uart_tx_buffer[8] = READ_BITS(rx_frame.id >> 16U, 0xFFU);
 8000534:	0c1a      	lsrs	r2, r3, #16
  uart_tx_buffer[9] = READ_BITS(rx_frame.id >> 24U, 0xFFU);
 8000536:	0e1b      	lsrs	r3, r3, #24
  uart_tx_buffer[6] = READ_BITS(rx_frame.id, 0xFFU);  // ID
 8000538:	80e9      	strh	r1, [r5, #6]
  uart_tx_buffer[8] = READ_BITS(rx_frame.id >> 16U, 0xFFU);
 800053a:	722a      	strb	r2, [r5, #8]
  uart_tx_buffer[9] = READ_BITS(rx_frame.id >> 24U, 0xFFU);
 800053c:	726b      	strb	r3, [r5, #9]

  for (uint16_t i=0; i<rx_frame.size; i+=1) {
 800053e:	b12c      	cbz	r4, 800054c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
    uart_tx_buffer[10+i] = rx_frame.data[i];
 8000540:	4622      	mov	r2, r4
 8000542:	a902      	add	r1, sp, #8
 8000544:	f105 000a 	add.w	r0, r5, #10
 8000548:	f002 f9a0 	bl	800288c <memcpy>
  }

  uart_tx_buffer[10+rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 800054c:	340a      	adds	r4, #10
 800054e:	b2a4      	uxth	r4, r4
 8000550:	23bb      	movs	r3, #187	; 0xbb

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
  uart_tx_buffer[10+rx_frame.size] = PYTHONCAN_END_OF_FRAME;
 8000554:	552b      	strb	r3, [r5, r4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	f001 f88f 	bl	800167c <HAL_GPIO_WritePin>

  HAL_UART_Transmit_IT(&huart2, uart_tx_buffer, 11+rx_frame.size);
 800055e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000562:	4905      	ldr	r1, [pc, #20]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000564:	4806      	ldr	r0, [pc, #24]	; (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000566:	320b      	adds	r2, #11
 8000568:	b292      	uxth	r2, r2
 800056a:	f001 fef1 	bl	8002350 <HAL_UART_Transmit_IT>
}
 800056e:	b005      	add	sp, #20
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	40020000 	.word	0x40020000
 8000578:	2000007c 	.word	0x2000007c
 800057c:	200000bc 	.word	0x200000bc
 8000580:	2000012c 	.word	0x2000012c

08000584 <HAL_TIM_PeriodElapsedCallback>:
/**
 * When UART has not been transmitting for a while, we reset the receive interrupt handler.
 * This is to handle the case where UART is missing data, and we just drop that packet instead of
 * continue receiving the data forever.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000584:	b510      	push	{r4, lr}
  HAL_UART_AbortReceive(&huart2);
 8000586:	4c08      	ldr	r4, [pc, #32]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000588:	4620      	mov	r0, r4
 800058a:	f001 ff2f 	bl	80023ec <HAL_UART_AbortReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	f001 f872 	bl	800167c <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 8000598:	4620      	mov	r0, r4
 800059a:	4905      	ldr	r1, [pc, #20]	; (80005b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 800059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80005a0:	220b      	movs	r2, #11
 80005a2:	f001 bef7 	b.w	8002394 <HAL_UART_Receive_IT>
 80005a6:	bf00      	nop
 80005a8:	2000012c 	.word	0x2000012c
 80005ac:	40020000 	.word	0x40020000
 80005b0:	20000038 	.word	0x20000038

080005b4 <HAL_UART_RxCpltCallback>:

/**
 * UART receive interrupt routine.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <HAL_UART_RxCpltCallback+0x8c>)

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005b6:	4823      	ldr	r0, [pc, #140]	; (8000644 <HAL_UART_RxCpltCallback+0x90>)
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005b8:	681b      	ldr	r3, [r3, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005ba:	b510      	push	{r4, lr}
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005bc:	2200      	movs	r2, #0

  if (!uart_rx_data_pending) {
 80005be:	4c22      	ldr	r4, [pc, #136]	; (8000648 <HAL_UART_RxCpltCallback+0x94>)
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005c2:	2120      	movs	r1, #32
 80005c4:	2201      	movs	r2, #1
 80005c6:	f001 f859 	bl	800167c <HAL_GPIO_WritePin>
  if (!uart_rx_data_pending) {
 80005ca:	7823      	ldrb	r3, [r4, #0]
 80005cc:	bb33      	cbnz	r3, 800061c <HAL_UART_RxCpltCallback+0x68>
    // if we are receiving the header section

    // check if the first byte is the correct Start of Frame
    uint8_t is_valid_frame = uart_rx_buffer[0] == 0xAAU;
 80005ce:	491f      	ldr	r1, [pc, #124]	; (800064c <HAL_UART_RxCpltCallback+0x98>)
    if (!is_valid_frame) {
 80005d0:	780b      	ldrb	r3, [r1, #0]
 80005d2:	2baa      	cmp	r3, #170	; 0xaa
 80005d4:	d11c      	bne.n	8000610 <HAL_UART_RxCpltCallback+0x5c>
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
      return;
    }

    // decode the header section
    can_tx_frame.id_type = CAN_ID_STANDARD;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <HAL_UART_RxCpltCallback+0x9c>)
    can_tx_frame.frame_type = CAN_FRAME_DATA;
//    uint32_t timestamp = ((uart_rx_buffer[1])     // timestamp is not used
//        | (uart_rx_buffer[2] << 8U)
//        | (uart_rx_buffer[3] << 16U)
//        | (uart_rx_buffer[4] << 24U));
    can_tx_frame.size = uart_rx_buffer[5];
 80005d8:	794a      	ldrb	r2, [r1, #5]
    can_tx_frame.id = ((uart_rx_buffer[6])
 80005da:	f8d1 0006 	ldr.w	r0, [r1, #6]
    can_tx_frame.size = uart_rx_buffer[5];
 80005de:	80da      	strh	r2, [r3, #6]
    can_tx_frame.id_type = CAN_ID_STANDARD;
 80005e0:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80005e4:	f8a3 c004 	strh.w	ip, [r3, #4]
    can_tx_frame.id = ((uart_rx_buffer[6])
 80005e8:	6018      	str	r0, [r3, #0]
        | (uart_rx_buffer[7] << 8U)
        | (uart_rx_buffer[8] << 16U)
        | (uart_rx_buffer[9] << 24U));

    // if DLC > 0, we need to continue receive `DLC` number of data
    if (can_tx_frame.size) {
 80005ea:	b9fa      	cbnz	r2, 800062c <HAL_UART_RxCpltCallback+0x78>
  }
  else {
    memcpy(can_tx_frame.data+1, uart_rx_buffer, can_tx_frame.size-1);
  }

  CAN_putTxFrame(&hcan1, &can_tx_frame);
 80005ec:	4918      	ldr	r1, [pc, #96]	; (8000650 <HAL_UART_RxCpltCallback+0x9c>)
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <HAL_UART_RxCpltCallback+0xa0>)
 80005f0:	f000 f964 	bl	80008bc <CAN_putTxFrame>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <HAL_UART_RxCpltCallback+0x90>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	f001 f83f 	bl	800167c <HAL_GPIO_WritePin>

  uart_rx_data_pending = 0U;
 80005fe:	2300      	movs	r3, #0
 8000600:	7023      	strb	r3, [r4, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
}
 8000602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 8000606:	4911      	ldr	r1, [pc, #68]	; (800064c <HAL_UART_RxCpltCallback+0x98>)
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <HAL_UART_RxCpltCallback+0xa4>)
 800060a:	220b      	movs	r2, #11
 800060c:	f001 bec2 	b.w	8002394 <HAL_UART_Receive_IT>
}
 8000610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <HAL_UART_RxCpltCallback+0xa4>)
 8000616:	220b      	movs	r2, #11
 8000618:	f001 bebc 	b.w	8002394 <HAL_UART_Receive_IT>
    memcpy(can_tx_frame.data+1, uart_rx_buffer, can_tx_frame.size-1);
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <HAL_UART_RxCpltCallback+0x9c>)
 800061e:	490b      	ldr	r1, [pc, #44]	; (800064c <HAL_UART_RxCpltCallback+0x98>)
 8000620:	88c2      	ldrh	r2, [r0, #6]
 8000622:	3009      	adds	r0, #9
 8000624:	3a01      	subs	r2, #1
 8000626:	f002 f931 	bl	800288c <memcpy>
 800062a:	e7df      	b.n	80005ec <HAL_UART_RxCpltCallback+0x38>
      uart_rx_data_pending = 1U;
 800062c:	2001      	movs	r0, #1
 800062e:	7020      	strb	r0, [r4, #0]
      can_tx_frame.data[0] = uart_rx_buffer[10];
 8000630:	7a8c      	ldrb	r4, [r1, #10]
 8000632:	721c      	strb	r4, [r3, #8]
}
 8000634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, can_tx_frame.size);
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <HAL_UART_RxCpltCallback+0xa4>)
 800063a:	f001 beab 	b.w	8002394 <HAL_UART_Receive_IT>
 800063e:	bf00      	nop
 8000640:	200000e4 	.word	0x200000e4
 8000644:	40020000 	.word	0x40020000
 8000648:	20000078 	.word	0x20000078
 800064c:	20000038 	.word	0x20000038
 8000650:	20000028 	.word	0x20000028
 8000654:	200000bc 	.word	0x200000bc
 8000658:	2000012c 	.word	0x2000012c

0800065c <APP_init>:

void APP_init() {
 800065c:	b530      	push	{r4, r5, lr}
  filter_config.FilterMaskIdLow = 0;
  filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
  filter_config.FilterActivation = CAN_FILTER_ENABLE;
  filter_config.SlaveStartFilterBank = 14;

  HAL_CAN_ConfigFilter(&hcan1, &filter_config);
 800065e:	4d15      	ldr	r5, [pc, #84]	; (80006b4 <APP_init+0x58>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000660:	4815      	ldr	r0, [pc, #84]	; (80006b8 <APP_init+0x5c>)
void APP_init() {
 8000662:	b08b      	sub	sp, #44	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2120      	movs	r1, #32
 8000668:	f001 f808 	bl	800167c <HAL_GPIO_WritePin>
  filter_config.FilterBank = 0;
 800066c:	2400      	movs	r4, #0
  filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800066e:	2301      	movs	r3, #1
  filter_config.SlaveStartFilterBank = 14;
 8000670:	220e      	movs	r2, #14
  HAL_CAN_ConfigFilter(&hcan1, &filter_config);
 8000672:	4669      	mov	r1, sp
 8000674:	4628      	mov	r0, r5
  filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000676:	e9cd 3307 	strd	r3, r3, [sp, #28]
  filter_config.SlaveStartFilterBank = 14;
 800067a:	9209      	str	r2, [sp, #36]	; 0x24
  filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800067c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  filter_config.FilterIdLow = 0;
 8000680:	e9cd 4400 	strd	r4, r4, [sp]
  filter_config.FilterMaskIdLow = 0;
 8000684:	e9cd 4402 	strd	r4, r4, [sp, #8]
  filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000688:	9404      	str	r4, [sp, #16]
  HAL_CAN_ConfigFilter(&hcan1, &filter_config);
 800068a:	f000 fb1f 	bl	8000ccc <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800068e:	4628      	mov	r0, r5
 8000690:	f000 fbae 	bl	8000df0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000694:	2102      	movs	r1, #2
 8000696:	4628      	mov	r0, r5
 8000698:	f000 fcca 	bl	8001030 <HAL_CAN_ActivateNotification>

  uart_rx_data_pending = 0U;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <APP_init+0x60>)
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <APP_init+0x64>)
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <APP_init+0x68>)
  uart_rx_data_pending = 0U;
 80006a2:	701c      	strb	r4, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 11);
 80006a4:	220b      	movs	r2, #11
 80006a6:	f001 fe75 	bl	8002394 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <APP_init+0x6c>)
 80006ac:	f001 fb04 	bl	8001cb8 <HAL_TIM_Base_Start_IT>
}
 80006b0:	b00b      	add	sp, #44	; 0x2c
 80006b2:	bd30      	pop	{r4, r5, pc}
 80006b4:	200000bc 	.word	0x200000bc
 80006b8:	40020000 	.word	0x40020000
 80006bc:	20000078 	.word	0x20000078
 80006c0:	20000038 	.word	0x20000038
 80006c4:	2000012c 	.word	0x2000012c
 80006c8:	200000e4 	.word	0x200000e4

080006cc <APP_main>:

void APP_main() {
  // do nothing in main loop
}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	2300      	movs	r3, #0
{
 80006d4:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80006da:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80006e2:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4920      	ldr	r1, [pc, #128]	; (8000768 <SystemClock_Config+0x98>)
 80006e8:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80006f6:	6408      	str	r0, [r1, #64]	; 0x40
 80006f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006fa:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80006fe:	9100      	str	r1, [sp, #0]
 8000700:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	6811      	ldr	r1, [r2, #0]
 8000706:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800070a:	6011      	str	r1, [r2, #0]
 800070c:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070e:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000714:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2310      	movs	r3, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000722:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000726:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 160;
 800072a:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f001 f8b9 	bl	80018ac <HAL_RCC_OscConfig>
 800073a:	b108      	cbz	r0, 8000740 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073e:	e7fe      	b.n	800073e <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	220f      	movs	r2, #15
 8000742:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	e9cd 2402 	strd	r2, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	a802      	add	r0, sp, #8
 8000752:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000758:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075a:	f000 ff93 	bl	8001684 <HAL_RCC_ClockConfig>
 800075e:	b108      	cbz	r0, 8000764 <SystemClock_Config+0x94>
 8000760:	b672      	cpsid	i
  while (1)
 8000762:	e7fe      	b.n	8000762 <SystemClock_Config+0x92>
}
 8000764:	b015      	add	sp, #84	; 0x54
 8000766:	bd30      	pop	{r4, r5, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <main>:
{
 8000770:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	2400      	movs	r4, #0
{
 8000774:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000776:	f000 f9fd 	bl	8000b74 <HAL_Init>
  SystemClock_Config();
 800077a:	f7ff ffa9 	bl	80006d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000782:	e9cd 4405 	strd	r4, r4, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b37      	ldr	r3, [pc, #220]	; (8000864 <main+0xf4>)
 8000788:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	6b19      	ldr	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800078e:	4836      	ldr	r0, [pc, #216]	; (8000868 <main+0xf8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	f041 0101 	orr.w	r1, r1, #1
 8000794:	6319      	str	r1, [r3, #48]	; 0x30
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a4:	f000 ff6a 	bl	800167c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2220      	movs	r2, #32
 80007aa:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	482e      	ldr	r0, [pc, #184]	; (8000868 <main+0xf8>)
 80007ae:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f000 fe4e 	bl	8001458 <HAL_GPIO_Init>
  hcan1.Instance = CAN1;
 80007bc:	482b      	ldr	r0, [pc, #172]	; (800086c <main+0xfc>)
  hcan1.Init.Prescaler = 8;
 80007be:	4a2c      	ldr	r2, [pc, #176]	; (8000870 <main+0x100>)
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007c0:	6184      	str	r4, [r0, #24]
  hcan1.Init.Prescaler = 8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	e9c0 2300 	strd	r2, r3, [r0]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007c8:	8384      	strh	r4, [r0, #28]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80007ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007d2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007d6:	f000 f9f9 	bl	8000bcc <HAL_CAN_Init>
 80007da:	b108      	cbz	r0, 80007e0 <main+0x70>
 80007dc:	b672      	cpsid	i
  while (1)
 80007de:	e7fe      	b.n	80007de <main+0x6e>
  huart2.Instance = USART2;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0x104>)
  huart2.Init.BaudRate = 1000000;
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <main+0x108>)
 80007e4:	4d25      	ldr	r5, [pc, #148]	; (800087c <main+0x10c>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 1000000;
 80007e8:	e9c3 2500 	strd	r2, r5, [r3]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	f001 fd79 	bl	80022f0 <HAL_UART_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	b108      	cbz	r0, 8000806 <main+0x96>
 8000802:	b672      	cpsid	i
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0x94>
  htim2.Instance = TIM2;
 8000806:	4c1e      	ldr	r4, [pc, #120]	; (8000880 <main+0x110>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	9001      	str	r0, [sp, #4]
  htim2.Instance = TIM2;
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000812:	e9cd 0005 	strd	r0, r0, [sp, #20]
  htim2.Instance = TIM2;
 8000816:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 159;
 800081a:	229f      	movs	r2, #159	; 0x9f
  htim2.Init.Period = 1000000;
 800081c:	e9c4 3502 	strd	r3, r5, [r4, #8]
  htim2.Init.Prescaler = 159;
 8000820:	6062      	str	r2, [r4, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000826:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000828:	f001 fc50 	bl	80020cc <HAL_TIM_Base_Init>
 800082c:	b108      	cbz	r0, 8000832 <main+0xc2>
 800082e:	b672      	cpsid	i
  while (1)
 8000830:	e7fe      	b.n	8000830 <main+0xc0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000836:	a903      	add	r1, sp, #12
 8000838:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083c:	f001 fa78 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	b108      	cbz	r0, 8000848 <main+0xd8>
 8000844:	b672      	cpsid	i
  while (1)
 8000846:	e7fe      	b.n	8000846 <main+0xd6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000848:	a901      	add	r1, sp, #4
 800084a:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	f001 fc6a 	bl	8002128 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	b108      	cbz	r0, 800085a <main+0xea>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0xe8>
  APP_init();
 800085a:	f7ff feff 	bl	800065c <APP_init>
    APP_main();
 800085e:	f7ff ff35 	bl	80006cc <APP_main>
  while (1)
 8000862:	e7fc      	b.n	800085e <main+0xee>
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	200000bc 	.word	0x200000bc
 8000870:	40006400 	.word	0x40006400
 8000874:	2000012c 	.word	0x2000012c
 8000878:	40004400 	.word	0x40004400
 800087c:	000f4240 	.word	0x000f4240
 8000880:	200000e4 	.word	0x200000e4

08000884 <CAN_getRxFrame>:
 */

#include "rath_can.h"


void CAN_getRxFrame(CAN_HandleTypeDef *hcan, CAN_Frame *rx_frame) {
 8000884:	b510      	push	{r4, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	460c      	mov	r4, r1
  CAN_RxHeaderTypeDef rx_header;
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_frame->data);
 800088a:	f101 0308 	add.w	r3, r1, #8
 800088e:	aa01      	add	r2, sp, #4
 8000890:	2100      	movs	r1, #0
 8000892:	f000 fb43 	bl	8000f1c <HAL_CAN_GetRxMessage>

  rx_frame->id = rx_header.StdId;
  rx_frame->id_type = (rx_header.IDE == CAN_ID_STD) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
  rx_frame->frame_type = (rx_header.RTR == CAN_FRAME_DATA) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 8000896:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800089a:	f1a3 0301 	sub.w	r3, r3, #1
  rx_frame->id_type = (rx_header.IDE == CAN_ID_STD) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 800089e:	3a00      	subs	r2, #0
  rx_frame->id = rx_header.StdId;
 80008a0:	9801      	ldr	r0, [sp, #4]
  rx_frame->size = rx_header.DLC;
 80008a2:	9905      	ldr	r1, [sp, #20]
  rx_frame->id = rx_header.StdId;
 80008a4:	6020      	str	r0, [r4, #0]
  rx_frame->frame_type = (rx_header.RTR == CAN_FRAME_DATA) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80008a6:	fab3 f383 	clz	r3, r3
  rx_frame->id_type = (rx_header.IDE == CAN_ID_STD) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80008aa:	bf18      	it	ne
 80008ac:	2201      	movne	r2, #1
  rx_frame->frame_type = (rx_header.RTR == CAN_FRAME_DATA) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80008ae:	095b      	lsrs	r3, r3, #5
  rx_frame->id_type = (rx_header.IDE == CAN_ID_STD) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80008b0:	7122      	strb	r2, [r4, #4]
  rx_frame->frame_type = (rx_header.RTR == CAN_FRAME_DATA) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80008b2:	7163      	strb	r3, [r4, #5]
  rx_frame->size = rx_header.DLC;
 80008b4:	80e1      	strh	r1, [r4, #6]
}
 80008b6:	b008      	add	sp, #32
 80008b8:	bd10      	pop	{r4, pc}
 80008ba:	bf00      	nop

080008bc <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(CAN_HandleTypeDef *hcan, CAN_Frame *tx_frame) {
 80008bc:	b530      	push	{r4, r5, lr}
  CAN_TxHeaderTypeDef tx_header;

  tx_header.StdId = tx_frame->id;
  tx_header.IDE = CAN_ID_STD;
  tx_header.RTR = (tx_frame->frame_type == CAN_FRAME_DATA) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 80008be:	794b      	ldrb	r3, [r1, #5]
  tx_header.StdId = tx_frame->id;
 80008c0:	680a      	ldr	r2, [r1, #0]
  tx_header.DLC = tx_frame->size;
 80008c2:	88cd      	ldrh	r5, [r1, #6]
HAL_StatusTypeDef CAN_putTxFrame(CAN_HandleTypeDef *hcan, CAN_Frame *tx_frame) {
 80008c4:	b089      	sub	sp, #36	; 0x24
  tx_header.RTR = (tx_frame->frame_type == CAN_FRAME_DATA) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 80008c6:	2b01      	cmp	r3, #1
  tx_header.IDE = CAN_ID_STD;
 80008c8:	f04f 0400 	mov.w	r4, #0
  tx_header.RTR = (tx_frame->frame_type == CAN_FRAME_DATA) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 80008cc:	bf0c      	ite	eq
 80008ce:	4623      	moveq	r3, r4
 80008d0:	2302      	movne	r3, #2
 80008d2:	e9cd 4304 	strd	r4, r3, [sp, #16]
  tx_header.StdId = tx_frame->id;
 80008d6:	9202      	str	r2, [sp, #8]
  tx_header.TransmitGlobalTime = 0U;

  uint32_t tx_mailbox;
  return HAL_CAN_AddTxMessage(hcan, &tx_header, tx_frame->data, &tx_mailbox);
 80008d8:	ab01      	add	r3, sp, #4
 80008da:	f101 0208 	add.w	r2, r1, #8
 80008de:	a902      	add	r1, sp, #8
  tx_header.DLC = tx_frame->size;
 80008e0:	9506      	str	r5, [sp, #24]
  tx_header.TransmitGlobalTime = 0U;
 80008e2:	f88d 401c 	strb.w	r4, [sp, #28]
  return HAL_CAN_AddTxMessage(hcan, &tx_header, tx_frame->data, &tx_mailbox);
 80008e6:	f000 fab5 	bl	8000e54 <HAL_CAN_AddTxMessage>
}
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	bd30      	pop	{r4, r5, pc}
 80008ee:	bf00      	nop

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_MspInit+0x34>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	9100      	str	r1, [sp, #0]
 80008f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008fe:	645a      	str	r2, [r3, #68]	; 0x44
 8000900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000902:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	9101      	str	r1, [sp, #4]
 800090c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000912:	641a      	str	r2, [r3, #64]	; 0x40
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	9301      	str	r3, [sp, #4]
 800091c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	b002      	add	sp, #8
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000928:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <HAL_CAN_MspInit+0x88>)
 800092c:	6802      	ldr	r2, [r0, #0]
{
 800092e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	2400      	movs	r4, #0
  if(hcan->Instance==CAN1)
 8000932:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000938:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800093c:	9407      	str	r4, [sp, #28]
  if(hcan->Instance==CAN1)
 800093e:	d001      	beq.n	8000944 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000940:	b009      	add	sp, #36	; 0x24
 8000942:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000944:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000948:	9401      	str	r4, [sp, #4]
 800094a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800094e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
 8000954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000956:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800095a:	9201      	str	r2, [sp, #4]
 800095c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	9402      	str	r4, [sp, #8]
 8000960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000962:	f042 0201 	orr.w	r2, r2, #1
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000970:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800097c:	2309      	movs	r3, #9
 800097e:	2203      	movs	r2, #3
 8000980:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f000 fd67 	bl	8001458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800098a:	4622      	mov	r2, r4
 800098c:	4621      	mov	r1, r4
 800098e:	2014      	movs	r0, #20
 8000990:	f000 fca0 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000994:	2014      	movs	r0, #20
 8000996:	f000 fcdb 	bl	8001350 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800099a:	4622      	mov	r2, r4
 800099c:	4621      	mov	r1, r4
 800099e:	2015      	movs	r0, #21
 80009a0:	f000 fc98 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009a4:	2015      	movs	r0, #21
 80009a6:	f000 fcd3 	bl	8001350 <HAL_NVIC_EnableIRQ>
}
 80009aa:	b009      	add	sp, #36	; 0x24
 80009ac:	bd30      	pop	{r4, r5, pc}
 80009ae:	bf00      	nop
 80009b0:	40006400 	.word	0x40006400
 80009b4:	40020000 	.word	0x40020000

080009b8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80009b8:	6803      	ldr	r3, [r0, #0]
 80009ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009be:	d000      	beq.n	80009c2 <HAL_TIM_Base_MspInit+0xa>
 80009c0:	4770      	bx	lr
{
 80009c2:	b500      	push	{lr}
 80009c4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c6:	2200      	movs	r2, #0
 80009c8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80009cc:	9201      	str	r2, [sp, #4]
 80009ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80009d0:	f041 0101 	orr.w	r1, r1, #1
 80009d4:	6419      	str	r1, [r3, #64]	; 0x40
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009de:	201c      	movs	r0, #28
 80009e0:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009e4:	f000 fc76 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e8:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ea:	b003      	add	sp, #12
 80009ec:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f0:	f000 bcae 	b.w	8001350 <HAL_NVIC_EnableIRQ>

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x74>)
 80009f8:	6802      	ldr	r2, [r0, #0]
{
 80009fa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80009fe:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000a04:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000a08:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART2)
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0c:	b009      	add	sp, #36	; 0x24
 8000a0e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000a14:	9401      	str	r4, [sp, #4]
 8000a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	4814      	ldr	r0, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a22:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	9402      	str	r4, [sp, #8]
 8000a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2e:	f042 0201 	orr.w	r2, r2, #1
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3c:	220c      	movs	r2, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a46:	2307      	movs	r3, #7
 8000a48:	2203      	movs	r2, #3
 8000a4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f000 fd02 	bl	8001458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a54:	4622      	mov	r2, r4
 8000a56:	4621      	mov	r1, r4
 8000a58:	2026      	movs	r0, #38	; 0x26
 8000a5a:	f000 fc3b 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5e:	2026      	movs	r0, #38	; 0x26
 8000a60:	f000 fc76 	bl	8001350 <HAL_NVIC_EnableIRQ>
}
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	bd30      	pop	{r4, r5, pc}
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler>
 8000a72:	bf00      	nop

08000a74 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <HardFault_Handler>
 8000a76:	bf00      	nop

08000a78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler>
 8000a7a:	bf00      	nop

08000a7c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <BusFault_Handler>
 8000a7e:	bf00      	nop

08000a80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler>
 8000a82:	bf00      	nop

08000a84 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <DebugMon_Handler>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <PendSV_Handler>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 b88a 	b.w	8000ba8 <HAL_IncTick>

08000a94 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a94:	4801      	ldr	r0, [pc, #4]	; (8000a9c <CAN1_RX0_IRQHandler+0x8>)
 8000a96:	f000 baf5 	b.w	8001084 <HAL_CAN_IRQHandler>
 8000a9a:	bf00      	nop
 8000a9c:	200000bc 	.word	0x200000bc

08000aa0 <CAN1_RX1_IRQHandler>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	; (8000aa8 <CAN1_RX1_IRQHandler+0x8>)
 8000aa2:	f000 baef 	b.w	8001084 <HAL_CAN_IRQHandler>
 8000aa6:	bf00      	nop
 8000aa8:	200000bc 	.word	0x200000bc

08000aac <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aac:	4801      	ldr	r0, [pc, #4]	; (8000ab4 <TIM2_IRQHandler+0x8>)
 8000aae:	f001 b9f7 	b.w	8001ea0 <HAL_TIM_IRQHandler>
 8000ab2:	bf00      	nop
 8000ab4:	200000e4 	.word	0x200000e4

08000ab8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab8:	4801      	ldr	r0, [pc, #4]	; (8000ac0 <USART2_IRQHandler+0x8>)
 8000aba:	f001 bd5f 	b.w	800257c <HAL_UART_IRQHandler>
 8000abe:	bf00      	nop
 8000ac0:	2000012c 	.word	0x2000012c

08000ac4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <SystemInit+0x10>)
 8000ac6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffdf 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 fe9d 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fe31 	bl	8000770 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b1c:	080028e8 	.word	0x080028e8
  ldr r2, =_sbss
 8000b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b24:	20000174 	.word	0x20000174

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_InitTick+0x3c>)
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_InitTick+0x40>)
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
{
 8000b36:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000b40:	fbb3 f0f0 	udiv	r0, r3, r0
 8000b44:	f000 fc12 	bl	800136c <HAL_SYSTICK_Config>
 8000b48:	b908      	cbnz	r0, 8000b4e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	2d0f      	cmp	r5, #15
 8000b4c:	d901      	bls.n	8000b52 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	4602      	mov	r2, r0
 8000b56:	4629      	mov	r1, r5
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 fbba 	bl	80012d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_InitTick+0x44>)
 8000b62:	4620      	mov	r0, r4
 8000b64:	601d      	str	r5, [r3, #0]
}
 8000b66:	bd38      	pop	{r3, r4, r5, pc}
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008

08000b74 <HAL_Init>:
{
 8000b74:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_Init+0x30>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b8e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 fb8d 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f7ff ffc8 	bl	8000b2c <HAL_InitTick>
  HAL_MspInit();
 8000b9c:	f7ff fea8 	bl	80008f0 <HAL_MspInit>
}
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	bd08      	pop	{r3, pc}
 8000ba4:	40023c00 	.word	0x40023c00

08000ba8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_IncTick+0x10>)
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <HAL_IncTick+0x14>)
 8000bac:	6811      	ldr	r1, [r2, #0]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000170 	.word	0x20000170
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bc0:	4b01      	ldr	r3, [pc, #4]	; (8000bc8 <HAL_GetTick+0x8>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000170 	.word	0x20000170

08000bcc <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d07b      	beq.n	8000cc8 <HAL_CAN_Init+0xfc>
{
 8000bd0:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bd2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d072      	beq.n	8000cc2 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bdc:	6822      	ldr	r2, [r4, #0]
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000be6:	f7ff ffeb 	bl	8000bc0 <HAL_GetTick>
 8000bea:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bec:	e004      	b.n	8000bf8 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bee:	f7ff ffe7 	bl	8000bc0 <HAL_GetTick>
 8000bf2:	1b43      	subs	r3, r0, r5
 8000bf4:	2b0a      	cmp	r3, #10
 8000bf6:	d85b      	bhi.n	8000cb0 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	07d1      	lsls	r1, r2, #31
 8000bfe:	d5f6      	bpl.n	8000bee <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	f022 0202 	bic.w	r2, r2, #2
 8000c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff ffda 	bl	8000bc0 <HAL_GetTick>
 8000c0c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0e:	e004      	b.n	8000c1a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c10:	f7ff ffd6 	bl	8000bc0 <HAL_GetTick>
 8000c14:	1b40      	subs	r0, r0, r5
 8000c16:	280a      	cmp	r0, #10
 8000c18:	d84a      	bhi.n	8000cb0 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	0792      	lsls	r2, r2, #30
 8000c20:	d4f6      	bmi.n	8000c10 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c22:	7e22      	ldrb	r2, [r4, #24]
 8000c24:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	bf0c      	ite	eq
 8000c2a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c2e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c34:	7e62      	ldrb	r2, [r4, #25]
 8000c36:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	bf0c      	ite	eq
 8000c3c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c40:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c46:	7ea2      	ldrb	r2, [r4, #26]
 8000c48:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	bf0c      	ite	eq
 8000c4e:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c52:	f022 0220 	bicne.w	r2, r2, #32
 8000c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c58:	7ee2      	ldrb	r2, [r4, #27]
 8000c5a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	bf0c      	ite	eq
 8000c60:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c64:	f042 0210 	orrne.w	r2, r2, #16
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c6a:	7f22      	ldrb	r2, [r4, #28]
 8000c6c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	bf0c      	ite	eq
 8000c72:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c76:	f022 0208 	bicne.w	r2, r2, #8
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c7c:	7f62      	ldrb	r2, [r4, #29]
 8000c7e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	bf0c      	ite	eq
 8000c84:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c88:	f022 0204 	bicne.w	r2, r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c8e:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8000c92:	6921      	ldr	r1, [r4, #16]
 8000c94:	4302      	orrs	r2, r0
 8000c96:	430a      	orrs	r2, r1
 8000c98:	6960      	ldr	r0, [r4, #20]
 8000c9a:	6861      	ldr	r1, [r4, #4]
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	3901      	subs	r1, #1
 8000ca0:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca2:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ca4:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ca6:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000caa:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb2:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cba:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
}
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000cc2:	f7ff fe31 	bl	8000928 <HAL_CAN_MspInit>
 8000cc6:	e789      	b.n	8000bdc <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8000cc8:	2001      	movs	r0, #1
}
 8000cca:	4770      	bx	lr

08000ccc <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ccc:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	2a01      	cmp	r2, #1
 8000cd4:	d906      	bls.n	8000ce4 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cd6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8000ce2:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce4:	4b41      	ldr	r3, [pc, #260]	; (8000dec <HAL_CAN_ConfigFilter+0x120>)
 8000ce6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
{
 8000cea:	b430      	push	{r4, r5}
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cec:	2401      	movs	r4, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cee:	4322      	orrs	r2, r4
 8000cf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000cf4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cf8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000cfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d04:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000d06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000d0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d0e:	694a      	ldr	r2, [r1, #20]
 8000d10:	f002 001f 	and.w	r0, r2, #31
 8000d14:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d18:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8000d1c:	ea24 0400 	bic.w	r4, r4, r0
 8000d20:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d24:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d26:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d145      	bne.n	8000db8 <HAL_CAN_ConfigFilter+0xec>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d2c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000d30:	4025      	ands	r5, r4
 8000d32:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d36:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d38:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d3a:	888b      	ldrh	r3, [r1, #4]
 8000d3c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000d40:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d44:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d48:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4c:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d4e:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d50:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d54:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d58:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d5a:	4a24      	ldr	r2, [pc, #144]	; (8000dec <HAL_CAN_ConfigFilter+0x120>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d5c:	bb33      	cbnz	r3, 8000dac <HAL_CAN_ConfigFilter+0xe0>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d5e:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000d62:	4023      	ands	r3, r4
 8000d64:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d68:	690b      	ldr	r3, [r1, #16]
 8000d6a:	b9c3      	cbnz	r3, 8000d9e <HAL_CAN_ConfigFilter+0xd2>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_CAN_ConfigFilter+0x120>)
 8000d6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d72:	4014      	ands	r4, r2
 8000d74:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d78:	6a0b      	ldr	r3, [r1, #32]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d105      	bne.n	8000d8a <HAL_CAN_ConfigFilter+0xbe>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HAL_CAN_ConfigFilter+0x120>)
 8000d80:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 8000d84:	4318      	orrs	r0, r3
 8000d86:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_CAN_ConfigFilter+0x120>)
 8000d8c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000d90:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 8000d94:	2000      	movs	r0, #0
}
 8000d96:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000d9c:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_CAN_ConfigFilter+0x120>)
 8000da0:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8000da4:	4303      	orrs	r3, r0
 8000da6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8000daa:	e7e5      	b.n	8000d78 <HAL_CAN_ConfigFilter+0xac>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dac:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000db0:	4303      	orrs	r3, r0
 8000db2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000db6:	e7d7      	b.n	8000d68 <HAL_CAN_ConfigFilter+0x9c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000db8:	2d01      	cmp	r5, #1
 8000dba:	d1cd      	bne.n	8000d58 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dbc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000dc0:	4305      	orrs	r5, r0
 8000dc2:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc6:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dc8:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dca:	888b      	ldrh	r3, [r1, #4]
 8000dcc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000dd0:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dd4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd8:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ddc:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dde:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de4:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 8000de8:	e7b6      	b.n	8000d58 <HAL_CAN_ConfigFilter+0x8c>
 8000dea:	bf00      	nop
 8000dec:	40006400 	.word	0x40006400

08000df0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000df0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000df2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000df6:	2b01      	cmp	r3, #1
{
 8000df8:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000dfa:	d006      	beq.n	8000e0a <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dfc:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000dfe:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e04:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8000e06:	4630      	mov	r0, r6
 8000e08:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e0a:	6802      	ldr	r2, [r0, #0]
 8000e0c:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000e1c:	f7ff fed0 	bl	8000bc0 <HAL_GetTick>
 8000e20:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e22:	e004      	b.n	8000e2e <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e24:	f7ff fecc 	bl	8000bc0 <HAL_GetTick>
 8000e28:	1b43      	subs	r3, r0, r5
 8000e2a:	2b0a      	cmp	r3, #10
 8000e2c:	d808      	bhi.n	8000e40 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f013 0301 	ands.w	r3, r3, #1
 8000e36:	d1f5      	bne.n	8000e24 <HAL_CAN_Start+0x34>
    return HAL_OK;
 8000e38:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e3a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e4a:	f884 2020 	strb.w	r2, [r4, #32]
}
 8000e4e:	4630      	mov	r0, r6
 8000e50:	bd70      	pop	{r4, r5, r6, pc}
 8000e52:	bf00      	nop

08000e54 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e54:	b430      	push	{r4, r5}
 8000e56:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e58:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e5c:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e60:	3801      	subs	r0, #1
 8000e62:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e64:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000e66:	d835      	bhi.n	8000ed4 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e68:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000e6c:	d03b      	beq.n	8000ee6 <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e6e:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e72:	2c03      	cmp	r4, #3
 8000e74:	d049      	beq.n	8000f0a <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e76:	2001      	movs	r0, #1
 8000e78:	40a0      	lsls	r0, r4
 8000e7a:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e7c:	688b      	ldr	r3, [r1, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d03a      	beq.n	8000ef8 <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 8000e82:	68c8      	ldr	r0, [r1, #12]
 8000e84:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e86:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8000e88:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e8c:	f104 0018 	add.w	r0, r4, #24
 8000e90:	0100      	lsls	r0, r0, #4
 8000e92:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e94:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8000e98:	690b      	ldr	r3, [r1, #16]
 8000e9a:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e9e:	7d09      	ldrb	r1, [r1, #20]
 8000ea0:	2901      	cmp	r1, #1
 8000ea2:	ea4f 1304 	mov.w	r3, r4, lsl #4
 8000ea6:	d105      	bne.n	8000eb4 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ea8:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 8000eac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000eb0:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000eb4:	442b      	add	r3, r5
 8000eb6:	6851      	ldr	r1, [r2, #4]
 8000eb8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ec2:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8000ec6:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 8000eca:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000ecc:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ece:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 8000ed2:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed4:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
}
 8000ede:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8000ee4:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ee6:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8000eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
}
 8000ef0:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ef2:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8000ef6:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ef8:	68cb      	ldr	r3, [r1, #12]
 8000efa:	6808      	ldr	r0, [r1, #0]
 8000efc:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8000f00:	f104 0318 	add.w	r3, r4, #24
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	50e8      	str	r0, [r5, r3]
 8000f08:	e7c4      	b.n	8000e94 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f0a:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8000f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
}
 8000f14:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f16:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f1c:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f1e:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f22:	f10e 3eff 	add.w	lr, lr, #4294967295
 8000f26:	f1be 0f01 	cmp.w	lr, #1
{
 8000f2a:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8000f2c:	d86d      	bhi.n	800100a <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f2e:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f30:	b951      	cbnz	r1, 8000f48 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f32:	68c4      	ldr	r4, [r0, #12]
 8000f34:	07a5      	lsls	r5, r4, #30
 8000f36:	d10a      	bne.n	8000f4e <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f38:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8000f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f42:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f48:	6904      	ldr	r4, [r0, #16]
 8000f4a:	07a4      	lsls	r4, r4, #30
 8000f4c:	d0f4      	beq.n	8000f38 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f4e:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 8000f52:	010c      	lsls	r4, r1, #4
 8000f54:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8000f58:	f005 0504 	and.w	r5, r5, #4
 8000f5c:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d05a      	beq.n	8001018 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f62:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8000f66:	08ed      	lsrs	r5, r5, #3
 8000f68:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f6a:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8000f6e:	f005 0502 	and.w	r5, r5, #2
 8000f72:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f74:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f78:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f7c:	f005 050f 	and.w	r5, r5, #15
 8000f80:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f82:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f84:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f88:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8000f8c:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f8e:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f90:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f94:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f96:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f98:	f8dc 2000 	ldr.w	r2, [ip]
 8000f9c:	4422      	add	r2, r4
 8000f9e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000fa2:	0a12      	lsrs	r2, r2, #8
 8000fa4:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fa6:	f8dc 2000 	ldr.w	r2, [ip]
 8000faa:	4422      	add	r2, r4
 8000fac:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000fb0:	0c12      	lsrs	r2, r2, #16
 8000fb2:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fb4:	f8dc 2000 	ldr.w	r2, [ip]
 8000fb8:	4422      	add	r2, r4
 8000fba:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fc2:	f8dc 2000 	ldr.w	r2, [ip]
 8000fc6:	4422      	add	r2, r4
 8000fc8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fcc:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fce:	f8dc 2000 	ldr.w	r2, [ip]
 8000fd2:	4422      	add	r2, r4
 8000fd4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fd8:	0a12      	lsrs	r2, r2, #8
 8000fda:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fdc:	f8dc 2000 	ldr.w	r2, [ip]
 8000fe0:	4422      	add	r2, r4
 8000fe2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fe6:	0c12      	lsrs	r2, r2, #16
 8000fe8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fea:	f8dc 2000 	ldr.w	r2, [ip]
 8000fee:	4422      	add	r2, r4
 8000ff0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000ff4:	0e12      	lsrs	r2, r2, #24
 8000ff6:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ff8:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ffc:	b989      	cbnz	r1, 8001022 <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ffe:	68d3      	ldr	r3, [r2, #12]
 8001000:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8001004:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8001010:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001012:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8001016:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001018:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800101c:	0d6d      	lsrs	r5, r5, #21
 800101e:	6015      	str	r5, [r2, #0]
 8001020:	e7a3      	b.n	8000f6a <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001022:	6913      	ldr	r3, [r2, #16]
 8001024:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8001028:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800102a:	6113      	str	r3, [r2, #16]
}
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	bf00      	nop

08001030 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001030:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001034:	3a01      	subs	r2, #1
 8001036:	2a01      	cmp	r2, #1
{
 8001038:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 800103a:	d905      	bls.n	8001048 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800103c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800103e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8001042:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001046:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001048:	6802      	ldr	r2, [r0, #0]
 800104a:	6953      	ldr	r3, [r2, #20]
 800104c:	4319      	orrs	r1, r3
    return HAL_OK;
 800104e:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001050:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001052:	4770      	bx	lr

08001054 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <HAL_CAN_TxMailbox2CompleteCallback>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_CAN_TxMailbox0AbortCallback>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <HAL_CAN_TxMailbox1AbortCallback>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <HAL_CAN_TxMailbox2AbortCallback>:
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <HAL_CAN_RxFifo0FullCallback>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <HAL_CAN_RxFifo1FullCallback>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <HAL_CAN_SleepCallback>:
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <HAL_CAN_WakeUpFromRxMsgCallback>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <HAL_CAN_ErrorCallback>:
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001088:	6803      	ldr	r3, [r0, #0]
 800108a:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800108c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001090:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001092:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001096:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800109a:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800109e:	f014 0601 	ands.w	r6, r4, #1
{
 80010a2:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010a4:	d020      	beq.n	80010e8 <HAL_CAN_IRQHandler+0x64>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010a6:	f017 0601 	ands.w	r6, r7, #1
 80010aa:	d00d      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x44>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010ac:	2201      	movs	r2, #1
 80010ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010b0:	07bb      	lsls	r3, r7, #30
 80010b2:	f100 80c4 	bmi.w	800123e <HAL_CAN_IRQHandler+0x1ba>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010b6:	077e      	lsls	r6, r7, #29
 80010b8:	f100 80e3 	bmi.w	8001282 <HAL_CAN_IRQHandler+0x1fe>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010bc:	f017 0608 	ands.w	r6, r7, #8
 80010c0:	f000 80e8 	beq.w	8001294 <HAL_CAN_IRQHandler+0x210>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010c4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010c8:	05f8      	lsls	r0, r7, #23
 80010ca:	d50b      	bpl.n	80010e4 <HAL_CAN_IRQHandler+0x60>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010d2:	05b9      	lsls	r1, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010d4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010d6:	f100 80ae 	bmi.w	8001236 <HAL_CAN_IRQHandler+0x1b2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010da:	057a      	lsls	r2, r7, #21
 80010dc:	f140 80cc 	bpl.w	8001278 <HAL_CAN_IRQHandler+0x1f4>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010e0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010e4:	03f8      	lsls	r0, r7, #15
 80010e6:	d465      	bmi.n	80011b4 <HAL_CAN_IRQHandler+0x130>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010e8:	0727      	lsls	r7, r4, #28
 80010ea:	d502      	bpl.n	80010f2 <HAL_CAN_IRQHandler+0x6e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010ec:	f01b 0f10 	tst.w	fp, #16
 80010f0:	d16b      	bne.n	80011ca <HAL_CAN_IRQHandler+0x146>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80010f2:	0760      	lsls	r0, r4, #29
 80010f4:	d503      	bpl.n	80010fe <HAL_CAN_IRQHandler+0x7a>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010f6:	f01b 0f08 	tst.w	fp, #8
 80010fa:	f040 808d 	bne.w	8001218 <HAL_CAN_IRQHandler+0x194>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010fe:	07a1      	lsls	r1, r4, #30
 8001100:	d504      	bpl.n	800110c <HAL_CAN_IRQHandler+0x88>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001102:	682b      	ldr	r3, [r5, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	079a      	lsls	r2, r3, #30
 8001108:	f040 8082 	bne.w	8001210 <HAL_CAN_IRQHandler+0x18c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800110c:	0663      	lsls	r3, r4, #25
 800110e:	d502      	bpl.n	8001116 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001110:	f01a 0f10 	tst.w	sl, #16
 8001114:	d148      	bne.n	80011a8 <HAL_CAN_IRQHandler+0x124>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001116:	06a7      	lsls	r7, r4, #26
 8001118:	d502      	bpl.n	8001120 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800111a:	f01a 0f08 	tst.w	sl, #8
 800111e:	d162      	bne.n	80011e6 <HAL_CAN_IRQHandler+0x162>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001120:	06e0      	lsls	r0, r4, #27
 8001122:	d503      	bpl.n	800112c <HAL_CAN_IRQHandler+0xa8>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	0799      	lsls	r1, r3, #30
 800112a:	d17c      	bne.n	8001226 <HAL_CAN_IRQHandler+0x1a2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800112c:	03a2      	lsls	r2, r4, #14
 800112e:	d502      	bpl.n	8001136 <HAL_CAN_IRQHandler+0xb2>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001130:	f018 0f10 	tst.w	r8, #16
 8001134:	d15e      	bne.n	80011f4 <HAL_CAN_IRQHandler+0x170>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001136:	03e3      	lsls	r3, r4, #15
 8001138:	d502      	bpl.n	8001140 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800113a:	f018 0f08 	tst.w	r8, #8
 800113e:	d160      	bne.n	8001202 <HAL_CAN_IRQHandler+0x17e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001140:	0427      	lsls	r7, r4, #16
 8001142:	d505      	bpl.n	8001150 <HAL_CAN_IRQHandler+0xcc>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001144:	f018 0f04 	tst.w	r8, #4
 8001148:	d106      	bne.n	8001158 <HAL_CAN_IRQHandler+0xd4>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800114a:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800114c:	2204      	movs	r2, #4
 800114e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001150:	2e00      	cmp	r6, #0
 8001152:	d140      	bne.n	80011d6 <HAL_CAN_IRQHandler+0x152>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001158:	05e0      	lsls	r0, r4, #23
 800115a:	d504      	bpl.n	8001166 <HAL_CAN_IRQHandler+0xe2>
 800115c:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8001160:	bf18      	it	ne
 8001162:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001166:	05a1      	lsls	r1, r4, #22
 8001168:	d504      	bpl.n	8001174 <HAL_CAN_IRQHandler+0xf0>
 800116a:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800116e:	bf18      	it	ne
 8001170:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001174:	0562      	lsls	r2, r4, #21
 8001176:	d504      	bpl.n	8001182 <HAL_CAN_IRQHandler+0xfe>
 8001178:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800117c:	bf18      	it	ne
 800117e:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001182:	0523      	lsls	r3, r4, #20
 8001184:	d5e1      	bpl.n	800114a <HAL_CAN_IRQHandler+0xc6>
 8001186:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 800118a:	d0de      	beq.n	800114a <HAL_CAN_IRQHandler+0xc6>
        switch (esrflags & CAN_ESR_LEC)
 800118c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8001190:	f000 808b 	beq.w	80012aa <HAL_CAN_IRQHandler+0x226>
 8001194:	d857      	bhi.n	8001246 <HAL_CAN_IRQHandler+0x1c2>
 8001196:	f1b9 0f20 	cmp.w	r9, #32
 800119a:	d078      	beq.n	800128e <HAL_CAN_IRQHandler+0x20a>
 800119c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80011a0:	d15f      	bne.n	8001262 <HAL_CAN_IRQHandler+0x1de>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011a2:	f046 0620 	orr.w	r6, r6, #32
            break;
 80011a6:	e056      	b.n	8001256 <HAL_CAN_IRQHandler+0x1d2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011ac:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	e7b0      	b.n	8001116 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011ba:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011bc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011be:	d436      	bmi.n	800122e <HAL_CAN_IRQHandler+0x1aa>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011c0:	037a      	lsls	r2, r7, #13
 80011c2:	d554      	bpl.n	800126e <HAL_CAN_IRQHandler+0x1ea>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011c4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 80011c8:	e78e      	b.n	80010e8 <HAL_CAN_IRQHandler+0x64>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011ce:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	e78d      	b.n	80010f2 <HAL_CAN_IRQHandler+0x6e>
    hcan->ErrorCode |= errorcode;
 80011d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011d8:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 80011da:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80011dc:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80011de:	f7ff ff4f 	bl	8001080 <HAL_CAN_ErrorCallback>
}
 80011e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	2208      	movs	r2, #8
 80011ea:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011ec:	4628      	mov	r0, r5
 80011ee:	f7ff ff41 	bl	8001074 <HAL_CAN_RxFifo1FullCallback>
 80011f2:	e795      	b.n	8001120 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	2210      	movs	r2, #16
 80011f8:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80011fa:	4628      	mov	r0, r5
 80011fc:	f7ff ff3c 	bl	8001078 <HAL_CAN_SleepCallback>
 8001200:	e799      	b.n	8001136 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001208:	4628      	mov	r0, r5
 800120a:	f7ff ff37 	bl	800107c <HAL_CAN_WakeUpFromRxMsgCallback>
 800120e:	e797      	b.n	8001140 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001210:	4628      	mov	r0, r5
 8001212:	f7ff f979 	bl	8000508 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001216:	e779      	b.n	800110c <HAL_CAN_IRQHandler+0x88>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	2208      	movs	r2, #8
 800121c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff ff24 	bl	800106c <HAL_CAN_RxFifo0FullCallback>
 8001224:	e76b      	b.n	80010fe <HAL_CAN_IRQHandler+0x7a>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001226:	4628      	mov	r0, r5
 8001228:	f7ff ff22 	bl	8001070 <HAL_CAN_RxFifo1MsgPendingCallback>
 800122c:	e77e      	b.n	800112c <HAL_CAN_IRQHandler+0xa8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff ff14 	bl	800105c <HAL_CAN_TxMailbox2CompleteCallback>
 8001234:	e758      	b.n	80010e8 <HAL_CAN_IRQHandler+0x64>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001236:	4628      	mov	r0, r5
 8001238:	f7ff ff0e 	bl	8001058 <HAL_CAN_TxMailbox1CompleteCallback>
 800123c:	e752      	b.n	80010e4 <HAL_CAN_IRQHandler+0x60>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800123e:	f7ff ff09 	bl	8001054 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001242:	2600      	movs	r6, #0
 8001244:	e740      	b.n	80010c8 <HAL_CAN_IRQHandler+0x44>
        switch (esrflags & CAN_ESR_LEC)
 8001246:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800124a:	d01d      	beq.n	8001288 <HAL_CAN_IRQHandler+0x204>
 800124c:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8001250:	bf08      	it	eq
 8001252:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800125e:	619a      	str	r2, [r3, #24]
 8001260:	e774      	b.n	800114c <HAL_CAN_IRQHandler+0xc8>
        switch (esrflags & CAN_ESR_LEC)
 8001262:	f1b9 0f10 	cmp.w	r9, #16
 8001266:	d1f6      	bne.n	8001256 <HAL_CAN_IRQHandler+0x1d2>
            errorcode |= HAL_CAN_ERROR_STF;
 8001268:	f046 0608 	orr.w	r6, r6, #8
            break;
 800126c:	e7f3      	b.n	8001256 <HAL_CAN_IRQHandler+0x1d2>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800126e:	033b      	lsls	r3, r7, #12
 8001270:	d517      	bpl.n	80012a2 <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001272:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8001276:	e737      	b.n	80010e8 <HAL_CAN_IRQHandler+0x64>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001278:	053b      	lsls	r3, r7, #20
 800127a:	d50e      	bpl.n	800129a <HAL_CAN_IRQHandler+0x216>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800127c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001280:	e730      	b.n	80010e4 <HAL_CAN_IRQHandler+0x60>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001282:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001286:	e71f      	b.n	80010c8 <HAL_CAN_IRQHandler+0x44>
            errorcode |= HAL_CAN_ERROR_BD;
 8001288:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800128c:	e7e3      	b.n	8001256 <HAL_CAN_IRQHandler+0x1d2>
            errorcode |= HAL_CAN_ERROR_FOR;
 800128e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8001292:	e7e0      	b.n	8001256 <HAL_CAN_IRQHandler+0x1d2>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001294:	f7ff fee4 	bl	8001060 <HAL_CAN_TxMailbox0AbortCallback>
 8001298:	e716      	b.n	80010c8 <HAL_CAN_IRQHandler+0x44>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800129a:	4628      	mov	r0, r5
 800129c:	f7ff fee2 	bl	8001064 <HAL_CAN_TxMailbox1AbortCallback>
 80012a0:	e720      	b.n	80010e4 <HAL_CAN_IRQHandler+0x60>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012a2:	4628      	mov	r0, r5
 80012a4:	f7ff fee0 	bl	8001068 <HAL_CAN_TxMailbox2AbortCallback>
 80012a8:	e71e      	b.n	80010e8 <HAL_CAN_IRQHandler+0x64>
            errorcode |= HAL_CAN_ERROR_BR;
 80012aa:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80012ae:	e7d2      	b.n	8001256 <HAL_CAN_IRQHandler+0x1d2>

080012b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012ca:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_NVIC_SetPriority+0x74>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012dc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012de:	f1c3 0e07 	rsb	lr, r3, #7
 80012e2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ea:	bf28      	it	cs
 80012ec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f0:	f1bc 0f06 	cmp.w	ip, #6
 80012f4:	d91b      	bls.n	800132e <HAL_NVIC_SetPriority+0x5a>
 80012f6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 3cff 	mov.w	ip, #4294967295
 80012fc:	fa0c fc03 	lsl.w	ip, ip, r3
 8001300:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 3cff 	mov.w	ip, #4294967295
 8001308:	fa0c fc0e 	lsl.w	ip, ip, lr
 800130c:	ea21 010c 	bic.w	r1, r1, ip
 8001310:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001312:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001318:	db0c      	blt.n	8001334 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800131e:	0109      	lsls	r1, r1, #4
 8001320:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001324:	b2c9      	uxtb	r1, r1
 8001326:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800132a:	f85d fb04 	ldr.w	pc, [sp], #4
 800132e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001330:	4613      	mov	r3, r2
 8001332:	e7e7      	b.n	8001304 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_NVIC_SetPriority+0x78>)
 8001336:	f000 000f 	and.w	r0, r0, #15
 800133a:	0109      	lsls	r1, r1, #4
 800133c:	4403      	add	r3, r0
 800133e:	b2c9      	uxtb	r1, r1
 8001340:	7619      	strb	r1, [r3, #24]
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	e000ecfc 	.word	0xe000ecfc

08001350 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001350:	2800      	cmp	r0, #0
 8001352:	db08      	blt.n	8001366 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001354:	0941      	lsrs	r1, r0, #5
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_NVIC_EnableIRQ+0x18>)
 8001358:	f000 001f 	and.w	r0, r0, #31
 800135c:	2301      	movs	r3, #1
 800135e:	fa03 f000 	lsl.w	r0, r3, r0
 8001362:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100

0800136c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	3801      	subs	r0, #1
 800136e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001372:	d210      	bcs.n	8001396 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001374:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	4c08      	ldr	r4, [pc, #32]	; (800139c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001382:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001386:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001388:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800138e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	6119      	str	r1, [r3, #16]
 8001394:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2001      	movs	r0, #1
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80013a6:	f7ff fc0b 	bl	8000bc0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013aa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d006      	beq.n	80013c0 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b4:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80013b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	6562      	str	r2, [r4, #84]	; 0x54
    
    return HAL_ERROR;
 80013bc:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80013be:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	f022 0216 	bic.w	r2, r2, #22
 80013c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013d4:	4605      	mov	r5, r0
 80013d6:	b332      	cbz	r2, 8001426 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	f022 0208 	bic.w	r2, r2, #8
 80013de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e005      	b.n	80013f6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff fbe9 	bl	8000bc0 <HAL_GetTick>
 80013ee:	1b43      	subs	r3, r0, r5
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d80f      	bhi.n	8001414 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f013 0301 	ands.w	r3, r3, #1
 80013fc:	d1f5      	bne.n	80013ea <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001400:	223f      	movs	r2, #63	; 0x3f
 8001402:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8001404:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001406:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800140c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001410:	4618      	mov	r0, r3
}
 8001412:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001414:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001416:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8001418:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800141a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800141c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001420:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001424:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001426:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001428:	2a00      	cmp	r2, #0
 800142a:	d1d5      	bne.n	80013d8 <HAL_DMA_Abort+0x38>
 800142c:	e7d8      	b.n	80013e0 <HAL_DMA_Abort+0x40>
 800142e:	bf00      	nop

08001430 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001430:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001434:	2b02      	cmp	r3, #2
 8001436:	d003      	beq.n	8001440 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
 800143e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001442:	2305      	movs	r3, #5
 8001444:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001448:	6813      	ldr	r3, [r2, #0]
 800144a:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 800144e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001450:	6013      	str	r3, [r2, #0]
}
 8001452:	4770      	bx	lr

08001454 <HAL_DMA_GetError>:
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
  return hdma->ErrorCode;
 8001454:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001456:	4770      	bx	lr

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145c:	2200      	movs	r2, #0
 800145e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001460:	f8df a214 	ldr.w	sl, [pc, #532]	; 8001678 <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001464:	4e7d      	ldr	r6, [pc, #500]	; (800165c <HAL_GPIO_Init+0x204>)
{
 8001466:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001468:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	4689      	mov	r9, r1
 800146c:	e005      	b.n	800147a <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	3301      	adds	r3, #1
 8001470:	2b10      	cmp	r3, #16
 8001472:	f102 0202 	add.w	r2, r2, #2
 8001476:	f000 8084 	beq.w	8001582 <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 800147a:	2101      	movs	r1, #1
 800147c:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001482:	43a1      	bics	r1, r4
 8001484:	d1f3      	bne.n	800146e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800148a:	f00c 0103 	and.w	r1, ip, #3
 800148e:	1e4d      	subs	r5, r1, #1
 8001490:	2d01      	cmp	r5, #1
 8001492:	d979      	bls.n	8001588 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001494:	2903      	cmp	r1, #3
 8001496:	f040 80b9 	bne.w	800160c <HAL_GPIO_Init+0x1b4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800149a:	4091      	lsls	r1, r2
 800149c:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800149e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a2:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a4:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80014a8:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014aa:	d0e0      	beq.n	800146e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	2100      	movs	r1, #0
 80014ae:	9103      	str	r1, [sp, #12]
 80014b0:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80014b4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80014b8:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 80014bc:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80014c0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014c8:	f023 0103 	bic.w	r1, r3, #3
 80014cc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80014d0:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80014d8:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014dc:	00bf      	lsls	r7, r7, #2
 80014de:	250f      	movs	r5, #15
 80014e0:	40bd      	lsls	r5, r7
 80014e2:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e6:	4d5e      	ldr	r5, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x208>)
 80014e8:	42a8      	cmp	r0, r5
 80014ea:	d01f      	beq.n	800152c <HAL_GPIO_Init+0xd4>
 80014ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014f0:	42a8      	cmp	r0, r5
 80014f2:	f000 808f 	beq.w	8001614 <HAL_GPIO_Init+0x1bc>
 80014f6:	4d5b      	ldr	r5, [pc, #364]	; (8001664 <HAL_GPIO_Init+0x20c>)
 80014f8:	42a8      	cmp	r0, r5
 80014fa:	f000 8092 	beq.w	8001622 <HAL_GPIO_Init+0x1ca>
 80014fe:	4d5a      	ldr	r5, [pc, #360]	; (8001668 <HAL_GPIO_Init+0x210>)
 8001500:	42a8      	cmp	r0, r5
 8001502:	f000 8095 	beq.w	8001630 <HAL_GPIO_Init+0x1d8>
 8001506:	4d59      	ldr	r5, [pc, #356]	; (800166c <HAL_GPIO_Init+0x214>)
 8001508:	42a8      	cmp	r0, r5
 800150a:	f000 8098 	beq.w	800163e <HAL_GPIO_Init+0x1e6>
 800150e:	4d58      	ldr	r5, [pc, #352]	; (8001670 <HAL_GPIO_Init+0x218>)
 8001510:	42a8      	cmp	r0, r5
 8001512:	f000 809b 	beq.w	800164c <HAL_GPIO_Init+0x1f4>
 8001516:	4d57      	ldr	r5, [pc, #348]	; (8001674 <HAL_GPIO_Init+0x21c>)
 8001518:	42a8      	cmp	r0, r5
 800151a:	bf0c      	ite	eq
 800151c:	f04f 0e06 	moveq.w	lr, #6
 8001520:	f04f 0e07 	movne.w	lr, #7
 8001524:	fa0e f707 	lsl.w	r7, lr, r7
 8001528:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800152c:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001530:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001532:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800153a:	bf0c      	ite	eq
 800153c:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 800153e:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001542:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001544:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001546:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800154a:	bf0c      	ite	eq
 800154c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800154e:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001552:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001554:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800155a:	bf0c      	ite	eq
 800155c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800155e:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001562:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001564:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001566:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800156e:	bf0c      	ite	eq
 8001570:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001572:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001578:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	f102 0202 	add.w	r2, r2, #2
 800157e:	f47f af7c 	bne.w	800147a <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001582:	b005      	add	sp, #20
 8001584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001588:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800158c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001592:	2503      	movs	r5, #3
 8001594:	fa05 fe02 	lsl.w	lr, r5, r2
 8001598:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80015a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80015a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a8:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80015b0:	409f      	lsls	r7, r3
 80015b2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80015b6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80015b8:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015be:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80015c2:	4097      	lsls	r7, r2
 80015c4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80015ca:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015cc:	fa01 f102 	lsl.w	r1, r1, r2
 80015d0:	f47f af65 	bne.w	800149e <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80015d4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80015d8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015dc:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80015e0:	f8de 7020 	ldr.w	r7, [lr, #32]
 80015e4:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ee:	fa07 f708 	lsl.w	r7, r7, r8
 80015f2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f4:	270f      	movs	r7, #15
 80015f6:	fa07 f808 	lsl.w	r8, r7, r8
 80015fa:	9f00      	ldr	r7, [sp, #0]
 80015fc:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	9f01      	ldr	r7, [sp, #4]
 8001602:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	f8ce 7020 	str.w	r7, [lr, #32]
 800160a:	e748      	b.n	800149e <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800160c:	2503      	movs	r5, #3
 800160e:	4095      	lsls	r5, r2
 8001610:	43ed      	mvns	r5, r5
 8001612:	e7d1      	b.n	80015b8 <HAL_GPIO_Init+0x160>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001614:	f04f 0e01 	mov.w	lr, #1
 8001618:	fa0e f707 	lsl.w	r7, lr, r7
 800161c:	ea48 0807 	orr.w	r8, r8, r7
 8001620:	e784      	b.n	800152c <HAL_GPIO_Init+0xd4>
 8001622:	f04f 0e02 	mov.w	lr, #2
 8001626:	fa0e f707 	lsl.w	r7, lr, r7
 800162a:	ea48 0807 	orr.w	r8, r8, r7
 800162e:	e77d      	b.n	800152c <HAL_GPIO_Init+0xd4>
 8001630:	f04f 0e03 	mov.w	lr, #3
 8001634:	fa0e f707 	lsl.w	r7, lr, r7
 8001638:	ea48 0807 	orr.w	r8, r8, r7
 800163c:	e776      	b.n	800152c <HAL_GPIO_Init+0xd4>
 800163e:	f04f 0e04 	mov.w	lr, #4
 8001642:	fa0e f707 	lsl.w	r7, lr, r7
 8001646:	ea48 0807 	orr.w	r8, r8, r7
 800164a:	e76f      	b.n	800152c <HAL_GPIO_Init+0xd4>
 800164c:	f04f 0e05 	mov.w	lr, #5
 8001650:	fa0e f707 	lsl.w	r7, lr, r7
 8001654:	ea48 0807 	orr.w	r8, r8, r7
 8001658:	e768      	b.n	800152c <HAL_GPIO_Init+0xd4>
 800165a:	bf00      	nop
 800165c:	40013c00 	.word	0x40013c00
 8001660:	40020000 	.word	0x40020000
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40021400 	.word	0x40021400
 8001674:	40021800 	.word	0x40021800
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	b902      	cbnz	r2, 8001680 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167e:	0409      	lsls	r1, r1, #16
 8001680:	6181      	str	r1, [r0, #24]
  }
}
 8001682:	4770      	bx	lr

08001684 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001684:	2800      	cmp	r0, #0
 8001686:	f000 8087 	beq.w	8001798 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168a:	4a48      	ldr	r2, [pc, #288]	; (80017ac <HAL_RCC_ClockConfig+0x128>)
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	428b      	cmp	r3, r1
{
 8001694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001698:	460d      	mov	r5, r1
 800169a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	d209      	bcs.n	80016b2 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	b2cb      	uxtb	r3, r1
 80016a0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d002      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	0798      	lsls	r0, r3, #30
 80016b6:	d514      	bpl.n	80016e2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	0759      	lsls	r1, r3, #29
 80016ba:	d504      	bpl.n	80016c6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	493c      	ldr	r1, [pc, #240]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016be:	688a      	ldr	r2, [r1, #8]
 80016c0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80016c4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	071a      	lsls	r2, r3, #28
 80016c8:	d504      	bpl.n	80016d4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ca:	4939      	ldr	r1, [pc, #228]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016cc:	688a      	ldr	r2, [r1, #8]
 80016ce:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80016d2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4936      	ldr	r1, [pc, #216]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016d6:	68a0      	ldr	r0, [r4, #8]
 80016d8:	688a      	ldr	r2, [r1, #8]
 80016da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016de:	4302      	orrs	r2, r0
 80016e0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	07df      	lsls	r7, r3, #31
 80016e4:	d521      	bpl.n	800172a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	6862      	ldr	r2, [r4, #4]
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d057      	beq.n	800179c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ec:	1e93      	subs	r3, r2, #2
 80016ee:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f4:	d94d      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	0799      	lsls	r1, r3, #30
 80016f8:	d5d8      	bpl.n	80016ac <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	4e2d      	ldr	r6, [pc, #180]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016fc:	68b3      	ldr	r3, [r6, #8]
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	4313      	orrs	r3, r2
 8001704:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001706:	f7ff fa5b 	bl	8000bc0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800170e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001710:	e004      	b.n	800171c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001712:	f7ff fa55 	bl	8000bc0 <HAL_GetTick>
 8001716:	1bc0      	subs	r0, r0, r7
 8001718:	4540      	cmp	r0, r8
 800171a:	d844      	bhi.n	80017a6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171c:	68b3      	ldr	r3, [r6, #8]
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001728:	d1f3      	bne.n	8001712 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800172a:	4a20      	ldr	r2, [pc, #128]	; (80017ac <HAL_RCC_ClockConfig+0x128>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	42ab      	cmp	r3, r5
 8001734:	d906      	bls.n	8001744 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	b2eb      	uxtb	r3, r5
 8001738:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	42ab      	cmp	r3, r5
 8001742:	d1b3      	bne.n	80016ac <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	075a      	lsls	r2, r3, #29
 8001748:	d506      	bpl.n	8001758 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174a:	4919      	ldr	r1, [pc, #100]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 800174c:	68e0      	ldr	r0, [r4, #12]
 800174e:	688a      	ldr	r2, [r1, #8]
 8001750:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001754:	4302      	orrs	r2, r0
 8001756:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	071b      	lsls	r3, r3, #28
 800175a:	d507      	bpl.n	800176c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 800175e:	6921      	ldr	r1, [r4, #16]
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001766:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800176a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176c:	f000 f848 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 8001772:	4c10      	ldr	r4, [pc, #64]	; (80017b4 <HAL_RCC_ClockConfig+0x130>)
 8001774:	6892      	ldr	r2, [r2, #8]
 8001776:	4910      	ldr	r1, [pc, #64]	; (80017b8 <HAL_RCC_ClockConfig+0x134>)
 8001778:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800177c:	4603      	mov	r3, r0
 800177e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001782:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001784:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001786:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001788:	f7ff f9d0 	bl	8000b2c <HAL_InitTick>
  return HAL_OK;
 800178c:	2000      	movs	r0, #0
}
 800178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	0198      	lsls	r0, r3, #6
 8001794:	d4b1      	bmi.n	80016fa <HAL_RCC_ClockConfig+0x76>
 8001796:	e789      	b.n	80016ac <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
}
 800179a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	039e      	lsls	r6, r3, #14
 80017a2:	d4aa      	bmi.n	80016fa <HAL_RCC_ClockConfig+0x76>
 80017a4:	e782      	b.n	80016ac <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80017a6:	2003      	movs	r0, #3
 80017a8:	e781      	b.n	80016ae <HAL_RCC_ClockConfig+0x2a>
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	080028c0 	.word	0x080028c0
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80017c2:	4905      	ldr	r1, [pc, #20]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017c8:	6808      	ldr	r0, [r1, #0]
 80017ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80017d0:	40d8      	lsrs	r0, r3
 80017d2:	4770      	bx	lr
 80017d4:	40023800 	.word	0x40023800
 80017d8:	20000000 	.word	0x20000000
 80017dc:	080028d0 	.word	0x080028d0

080017e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80017e2:	4905      	ldr	r1, [pc, #20]	; (80017f8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017e8:	6808      	ldr	r0, [r1, #0]
 80017ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80017f0:	40d8      	lsrs	r0, r3
 80017f2:	4770      	bx	lr
 80017f4:	40023800 	.word	0x40023800
 80017f8:	20000000 	.word	0x20000000
 80017fc:	080028d0 	.word	0x080028d0

08001800 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001800:	4927      	ldr	r1, [pc, #156]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8001802:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001804:	688b      	ldr	r3, [r1, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d007      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x1e>
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d01d      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x4e>
 8001812:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001814:	4824      	ldr	r0, [pc, #144]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf08      	it	eq
 800181a:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800181c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001820:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001824:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001828:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182c:	d12e      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	481e      	ldr	r0, [pc, #120]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001830:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001834:	fba1 0100 	umull	r0, r1, r1, r0
 8001838:	f7fe fce4 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001844:	3301      	adds	r3, #1
 8001846:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001848:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800184c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001850:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001854:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001858:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185c:	d10d      	bne.n	800187a <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4812      	ldr	r0, [pc, #72]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001860:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001864:	fba1 0100 	umull	r0, r1, r1, r0
 8001868:	f7fe fccc 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001874:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001878:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	480a      	ldr	r0, [pc, #40]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800187c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001880:	2300      	movs	r3, #0
 8001882:	fba1 0100 	umull	r0, r1, r1, r0
 8001886:	f7fe fcbd 	bl	8000204 <__aeabi_uldivmod>
 800188a:	e7ef      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800188e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001892:	2300      	movs	r3, #0
 8001894:	fba1 0100 	umull	r0, r1, r1, r0
 8001898:	f7fe fcb4 	bl	8000204 <__aeabi_uldivmod>
 800189c:	e7ce      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x3c>
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	017d7840 	.word	0x017d7840
 80018a8:	00f42400 	.word	0x00f42400

080018ac <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ac:	2800      	cmp	r0, #0
 80018ae:	f000 81b3 	beq.w	8001c18 <HAL_RCC_OscConfig+0x36c>
{
 80018b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	6803      	ldr	r3, [r0, #0]
 80018b8:	07da      	lsls	r2, r3, #31
{
 80018ba:	b082      	sub	sp, #8
 80018bc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	d536      	bpl.n	800192e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018c0:	49a2      	ldr	r1, [pc, #648]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 80018c2:	688a      	ldr	r2, [r1, #8]
 80018c4:	f002 020c 	and.w	r2, r2, #12
 80018c8:	2a04      	cmp	r2, #4
 80018ca:	f000 80df 	beq.w	8001a8c <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ce:	688a      	ldr	r2, [r1, #8]
 80018d0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d4:	2a08      	cmp	r2, #8
 80018d6:	f000 80d5 	beq.w	8001a84 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	499c      	ldr	r1, [pc, #624]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 80018dc:	688a      	ldr	r2, [r1, #8]
 80018de:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e2:	2a0c      	cmp	r2, #12
 80018e4:	f000 8105 	beq.w	8001af2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	f000 8119 	beq.w	8001b24 <HAL_RCC_OscConfig+0x278>
 80018f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f6:	f000 8196 	beq.w	8001c26 <HAL_RCC_OscConfig+0x37a>
 80018fa:	4d94      	ldr	r5, [pc, #592]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 80018fc:	682a      	ldr	r2, [r5, #0]
 80018fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001902:	602a      	str	r2, [r5, #0]
 8001904:	682a      	ldr	r2, [r5, #0]
 8001906:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800190a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 810e 	bne.w	8001b2e <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff f955 	bl	8000bc0 <HAL_GetTick>
 8001916:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001918:	e005      	b.n	8001926 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff f951 	bl	8000bc0 <HAL_GetTick>
 800191e:	1b80      	subs	r0, r0, r6
 8001920:	2864      	cmp	r0, #100	; 0x64
 8001922:	f200 80fb 	bhi.w	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	0399      	lsls	r1, r3, #14
 800192a:	d4f6      	bmi.n	800191a <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	079a      	lsls	r2, r3, #30
 8001930:	d52f      	bpl.n	8001992 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001932:	4a86      	ldr	r2, [pc, #536]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 8001934:	6891      	ldr	r1, [r2, #8]
 8001936:	f011 0f0c 	tst.w	r1, #12
 800193a:	f000 8098 	beq.w	8001a6e <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193e:	6891      	ldr	r1, [r2, #8]
 8001940:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001944:	2908      	cmp	r1, #8
 8001946:	f000 808e 	beq.w	8001a66 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194a:	4980      	ldr	r1, [pc, #512]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 800194c:	688a      	ldr	r2, [r1, #8]
 800194e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001952:	2a0c      	cmp	r2, #12
 8001954:	f000 8162 	beq.w	8001c1c <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001958:	68e3      	ldr	r3, [r4, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8114 	beq.w	8001b88 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001960:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4e7a      	ldr	r6, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001968:	f7ff f92a 	bl	8000bc0 <HAL_GetTick>
 800196c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	e005      	b.n	800197c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff f926 	bl	8000bc0 <HAL_GetTick>
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	2802      	cmp	r0, #2
 8001978:	f200 80d0 	bhi.w	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	6833      	ldr	r3, [r6, #0]
 800197e:	0798      	lsls	r0, r3, #30
 8001980:	d5f6      	bpl.n	8001970 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	6833      	ldr	r3, [r6, #0]
 8001984:	6922      	ldr	r2, [r4, #16]
 8001986:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800198a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800198e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	071a      	lsls	r2, r3, #28
 8001994:	d451      	bmi.n	8001a3a <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001996:	0758      	lsls	r0, r3, #29
 8001998:	d530      	bpl.n	80019fc <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4a6c      	ldr	r2, [pc, #432]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 800199c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800199e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80019a2:	f000 809a 	beq.w	8001ada <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4e6a      	ldr	r6, [pc, #424]	; (8001b54 <HAL_RCC_OscConfig+0x2a8>)
 80019aa:	6833      	ldr	r3, [r6, #0]
 80019ac:	05d9      	lsls	r1, r3, #23
 80019ae:	f140 80a5 	bpl.w	8001afc <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	68a3      	ldr	r3, [r4, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f000 80cf 	beq.w	8001b58 <HAL_RCC_OscConfig+0x2ac>
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	f000 813d 	beq.w	8001c3a <HAL_RCC_OscConfig+0x38e>
 80019c0:	4e62      	ldr	r6, [pc, #392]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 80019c2:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	6732      	str	r2, [r6, #112]	; 0x70
 80019ca:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80019cc:	f022 0204 	bic.w	r2, r2, #4
 80019d0:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 80c5 	bne.w	8001b62 <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f8f2 	bl	8000bc0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019e0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff f8ec 	bl	8000bc0 <HAL_GetTick>
 80019e8:	1bc0      	subs	r0, r0, r7
 80019ea:	4540      	cmp	r0, r8
 80019ec:	f200 8096 	bhi.w	8001b1c <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80019f2:	0798      	lsls	r0, r3, #30
 80019f4:	d4f6      	bmi.n	80019e4 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	f040 8108 	bne.w	8001c0c <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fc:	69a0      	ldr	r0, [r4, #24]
 80019fe:	b1c0      	cbz	r0, 8001a32 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a00:	4d52      	ldr	r5, [pc, #328]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 8001a02:	68ab      	ldr	r3, [r5, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	f000 80ce 	beq.w	8001baa <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x2a4>)
 8001a10:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a12:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a14:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a16:	f000 811a 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8d1 	bl	8000bc0 <HAL_GetTick>
 8001a1e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	e004      	b.n	8001a2c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f8cd 	bl	8000bc0 <HAL_GetTick>
 8001a26:	1b00      	subs	r0, r0, r4
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d877      	bhi.n	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	d4f7      	bmi.n	8001a22 <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001a32:	2000      	movs	r0, #0
}
 8001a34:	b002      	add	sp, #8
 8001a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3a:	6963      	ldr	r3, [r4, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d02f      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8001a40:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4e42      	ldr	r6, [pc, #264]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 8001a44:	2201      	movs	r2, #1
 8001a46:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f8b9 	bl	8000bc0 <HAL_GetTick>
 8001a4e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a50:	e004      	b.n	8001a5c <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff f8b5 	bl	8000bc0 <HAL_GetTick>
 8001a56:	1b40      	subs	r0, r0, r5
 8001a58:	2802      	cmp	r0, #2
 8001a5a:	d85f      	bhi.n	8001b1c <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001a5e:	079b      	lsls	r3, r3, #30
 8001a60:	d5f7      	bpl.n	8001a52 <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	e797      	b.n	8001996 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a66:	6852      	ldr	r2, [r2, #4]
 8001a68:	0257      	lsls	r7, r2, #9
 8001a6a:	f53f af6e 	bmi.w	800194a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	0795      	lsls	r5, r2, #30
 8001a74:	d525      	bpl.n	8001ac2 <HAL_RCC_OscConfig+0x216>
 8001a76:	68e2      	ldr	r2, [r4, #12]
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	d022      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
}
 8001a7e:	b002      	add	sp, #8
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a84:	684a      	ldr	r2, [r1, #4]
 8001a86:	0257      	lsls	r7, r2, #9
 8001a88:	f57f af27 	bpl.w	80018da <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	0395      	lsls	r5, r2, #14
 8001a92:	f57f af4c 	bpl.w	800192e <HAL_RCC_OscConfig+0x82>
 8001a96:	6862      	ldr	r2, [r4, #4]
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	f47f af48 	bne.w	800192e <HAL_RCC_OscConfig+0x82>
 8001a9e:	e7ed      	b.n	8001a7c <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa2:	4e2a      	ldr	r6, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 8001aa4:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f88a 	bl	8000bc0 <HAL_GetTick>
 8001aac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e004      	b.n	8001aba <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f886 	bl	8000bc0 <HAL_GetTick>
 8001ab4:	1b40      	subs	r0, r0, r5
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d830      	bhi.n	8001b1c <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aba:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001abc:	079f      	lsls	r7, r3, #30
 8001abe:	d4f7      	bmi.n	8001ab0 <HAL_RCC_OscConfig+0x204>
 8001ac0:	e7cf      	b.n	8001a62 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4922      	ldr	r1, [pc, #136]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 8001ac4:	6920      	ldr	r0, [r4, #16]
 8001ac6:	680a      	ldr	r2, [r1, #0]
 8001ac8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001acc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001ad0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	071a      	lsls	r2, r3, #28
 8001ad4:	f57f af5f 	bpl.w	8001996 <HAL_RCC_OscConfig+0xea>
 8001ad8:	e7af      	b.n	8001a3a <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001aee:	2501      	movs	r5, #1
 8001af0:	e75a      	b.n	80019a8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	684a      	ldr	r2, [r1, #4]
 8001af4:	0256      	lsls	r6, r2, #9
 8001af6:	f57f aef7 	bpl.w	80018e8 <HAL_RCC_OscConfig+0x3c>
 8001afa:	e7c7      	b.n	8001a8c <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afc:	6833      	ldr	r3, [r6, #0]
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b04:	f7ff f85c 	bl	8000bc0 <HAL_GetTick>
 8001b08:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	6833      	ldr	r3, [r6, #0]
 8001b0c:	05da      	lsls	r2, r3, #23
 8001b0e:	f53f af50 	bmi.w	80019b2 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7ff f855 	bl	8000bc0 <HAL_GetTick>
 8001b16:	1bc0      	subs	r0, r0, r7
 8001b18:	2802      	cmp	r0, #2
 8001b1a:	d9f6      	bls.n	8001b0a <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 8001b1c:	2003      	movs	r0, #3
}
 8001b1e:	b002      	add	sp, #8
 8001b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f847 	bl	8000bc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4e06      	ldr	r6, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 8001b34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e004      	b.n	8001b42 <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff f842 	bl	8000bc0 <HAL_GetTick>
 8001b3c:	1b40      	subs	r0, r0, r5
 8001b3e:	2864      	cmp	r0, #100	; 0x64
 8001b40:	d8ec      	bhi.n	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	0398      	lsls	r0, r3, #14
 8001b46:	d5f7      	bpl.n	8001b38 <HAL_RCC_OscConfig+0x28c>
 8001b48:	e6f0      	b.n	800192c <HAL_RCC_OscConfig+0x80>
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	42470000 	.word	0x42470000
 8001b54:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
 8001b5a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b62:	f7ff f82d 	bl	8000bc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	4f52      	ldr	r7, [pc, #328]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 8001b68:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	e004      	b.n	8001b7a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f826 	bl	8000bc0 <HAL_GetTick>
 8001b74:	1b80      	subs	r0, r0, r6
 8001b76:	4540      	cmp	r0, r8
 8001b78:	d8d0      	bhi.n	8001b1c <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b7c:	079b      	lsls	r3, r3, #30
 8001b7e:	d5f7      	bpl.n	8001b70 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8001b80:	2d00      	cmp	r5, #0
 8001b82:	f43f af3b 	beq.w	80019fc <HAL_RCC_OscConfig+0x150>
 8001b86:	e041      	b.n	8001c0c <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4e49      	ldr	r6, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f817 	bl	8000bc0 <HAL_GetTick>
 8001b92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b94:	e004      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff f813 	bl	8000bc0 <HAL_GetTick>
 8001b9a:	1b40      	subs	r0, r0, r5
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d8bd      	bhi.n	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	0799      	lsls	r1, r3, #30
 8001ba4:	d4f7      	bmi.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	e6f3      	b.n	8001992 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001baa:	2801      	cmp	r0, #1
 8001bac:	f43f af42 	beq.w	8001a34 <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8001bb0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	4291      	cmp	r1, r2
 8001bba:	f47f af5f 	bne.w	8001a7c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	4291      	cmp	r1, r2
 8001bc6:	f47f af59 	bne.w	8001a7c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bcc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001bd0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bd6:	f47f af51 	bne.w	8001a7c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bdc:	0852      	lsrs	r2, r2, #1
 8001bde:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001be2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001be8:	f47f af48 	bne.w	8001a7c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001bf6:	f47f af41 	bne.w	8001a7c <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bfc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c00:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 8001c04:	bf14      	ite	ne
 8001c06:	2001      	movne	r0, #1
 8001c08:	2000      	moveq	r0, #0
 8001c0a:	e713      	b.n	8001a34 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
 8001c0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	e6f1      	b.n	80019fc <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8001c18:	2001      	movs	r0, #1
}
 8001c1a:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1c:	684a      	ldr	r2, [r1, #4]
 8001c1e:	0256      	lsls	r6, r2, #9
 8001c20:	f53f ae9a 	bmi.w	8001958 <HAL_RCC_OscConfig+0xac>
 8001c24:	e723      	b.n	8001a6e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c36:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c38:	e779      	b.n	8001b2e <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
 8001c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c3e:	f042 0204 	orr.w	r2, r2, #4
 8001c42:	671a      	str	r2, [r3, #112]	; 0x70
 8001c44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4c:	e789      	b.n	8001b62 <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 8001c4e:	f7fe ffb7 	bl	8000bc0 <HAL_GetTick>
 8001c52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c54:	e005      	b.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe ffb3 	bl	8000bc0 <HAL_GetTick>
 8001c5a:	1b80      	subs	r0, r0, r6
 8001c5c:	2802      	cmp	r0, #2
 8001c5e:	f63f af5d 	bhi.w	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	682b      	ldr	r3, [r5, #0]
 8001c64:	0199      	lsls	r1, r3, #6
 8001c66:	d4f6      	bmi.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c68:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001c6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c74:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8001c78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c7a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001c7e:	0852      	lsrs	r2, r2, #1
 8001c80:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c84:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001c86:	490b      	ldr	r1, [pc, #44]	; (8001cb4 <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c8e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c90:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c92:	f7fe ff95 	bl	8000bc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	4d06      	ldr	r5, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 8001c98:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ff90 	bl	8000bc0 <HAL_GetTick>
 8001ca0:	1b00      	subs	r0, r0, r4
 8001ca2:	2802      	cmp	r0, #2
 8001ca4:	f63f af3a 	bhi.w	8001b1c <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	019a      	lsls	r2, r3, #6
 8001cac:	d5f6      	bpl.n	8001c9c <HAL_RCC_OscConfig+0x3f0>
 8001cae:	e6c0      	b.n	8001a32 <HAL_RCC_OscConfig+0x186>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	42470000 	.word	0x42470000

08001cb8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d12f      	bne.n	8001d20 <HAL_TIM_Base_Start_IT+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc0:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc2:	4919      	ldr	r1, [pc, #100]	; (8001d28 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cca:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd4:	d019      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d016      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_TIM_Base_Start_IT+0x74>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00f      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001cf2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001cfa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_Base_Start_IT+0x52>
 8001d02:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d104      	bne.n	8001d14 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d10:	2a06      	cmp	r2, #6
 8001d12:	d007      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4770      	bx	lr
    return HAL_ERROR;
 8001d20:	2001      	movs	r0, #1
 8001d22:	4770      	bx	lr
  return HAL_OK;
 8001d24:	2000      	movs	r0, #0
}
 8001d26:	4770      	bx	lr
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40000400 	.word	0x40000400

08001d30 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d075      	beq.n	8001e24 <HAL_TIM_ConfigClockSource+0xf4>
 8001d38:	4602      	mov	r2, r0
{
 8001d3a:	b430      	push	{r4, r5}

  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	2302      	movs	r3, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d3e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d4a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d54:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d56:	680b      	ldr	r3, [r1, #0]
 8001d58:	2b60      	cmp	r3, #96	; 0x60
 8001d5a:	d065      	beq.n	8001e28 <HAL_TIM_ConfigClockSource+0xf8>
 8001d5c:	d824      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x78>
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
 8001d60:	d07c      	beq.n	8001e5c <HAL_TIM_ConfigClockSource+0x12c>
 8001d62:	d94b      	bls.n	8001dfc <HAL_TIM_ConfigClockSource+0xcc>
 8001d64:	2b50      	cmp	r3, #80	; 0x50
 8001d66:	d117      	bne.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d68:	6848      	ldr	r0, [r1, #4]
 8001d6a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d6c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d6e:	6a23      	ldr	r3, [r4, #32]
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d76:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d78:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8001d80:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d86:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001d88:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d8a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d90:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8001d94:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d96:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001d98:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8001d9a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d9c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001da0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8001da4:	bc30      	pop	{r4, r5}
 8001da6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d038      	beq.n	8001e20 <HAL_TIM_ConfigClockSource+0xf0>
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d110      	bne.n	8001dd6 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001db4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001db8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dba:	432b      	orrs	r3, r5
 8001dbc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dbe:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001dc6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dc8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dca:	68a3      	ldr	r3, [r4, #8]
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dd2:	60a3      	str	r3, [r4, #8]
      break;
 8001dd4:	e7e0      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001dd6:	2b70      	cmp	r3, #112	; 0x70
 8001dd8:	d1de      	bne.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dda:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001dde:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001de0:	432b      	orrs	r3, r5
 8001de2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001de4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001de8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001dec:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001dee:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001df0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001df2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8001df8:	60a3      	str	r3, [r4, #8]
      break;
 8001dfa:	e7cd      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d002      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0xd6>
 8001e00:	d90a      	bls.n	8001e18 <HAL_TIM_ConfigClockSource+0xe8>
 8001e02:	2b30      	cmp	r3, #48	; 0x30
 8001e04:	d1c8      	bne.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8001e06:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e08:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001e14:	60a3      	str	r3, [r4, #8]
}
 8001e16:	e7bf      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001e18:	f033 0110 	bics.w	r1, r3, #16
 8001e1c:	d1bc      	bne.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
 8001e1e:	e7f2      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8001e20:	2000      	movs	r0, #0
 8001e22:	e7b9      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8001e24:	2002      	movs	r0, #2
}
 8001e26:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e28:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e2a:	68cb      	ldr	r3, [r1, #12]
 8001e2c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2e:	f020 0010 	bic.w	r0, r0, #16
 8001e32:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e34:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e36:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e3a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8001e3e:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001e40:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8001e4a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001e4c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e52:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8001e56:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001e58:	60a3      	str	r3, [r4, #8]
}
 8001e5a:	e79d      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5c:	6848      	ldr	r0, [r1, #4]
 8001e5e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e60:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e62:	6a23      	ldr	r3, [r4, #32]
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e6a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e6c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8001e74:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e76:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e7a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001e7c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001e7e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e84:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8001e88:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001e8a:	60a3      	str	r3, [r4, #8]
}
 8001e8c:	e784      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x68>
 8001e8e:	bf00      	nop

08001e90 <HAL_TIM_OC_DelayElapsedCallback>:
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <HAL_TIM_IC_CaptureCallback>:
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_TIM_TriggerCallback>:
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	0791      	lsls	r1, r2, #30
{
 8001ea6:	b510      	push	{r4, lr}
 8001ea8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eaa:	d502      	bpl.n	8001eb2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	0792      	lsls	r2, r2, #30
 8001eb0:	d45f      	bmi.n	8001f72 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	0750      	lsls	r0, r2, #29
 8001eb6:	d502      	bpl.n	8001ebe <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	0751      	lsls	r1, r2, #29
 8001ebc:	d446      	bmi.n	8001f4c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	0712      	lsls	r2, r2, #28
 8001ec2:	d502      	bpl.n	8001eca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	0710      	lsls	r0, r2, #28
 8001ec8:	d42e      	bmi.n	8001f28 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	06d2      	lsls	r2, r2, #27
 8001ece:	d502      	bpl.n	8001ed6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	06d0      	lsls	r0, r2, #27
 8001ed4:	d418      	bmi.n	8001f08 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	07d1      	lsls	r1, r2, #31
 8001eda:	d502      	bpl.n	8001ee2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	07d2      	lsls	r2, r2, #31
 8001ee0:	d45d      	bmi.n	8001f9e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	0610      	lsls	r0, r2, #24
 8001ee6:	d502      	bpl.n	8001eee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	0611      	lsls	r1, r2, #24
 8001eec:	d45f      	bmi.n	8001fae <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	0652      	lsls	r2, r2, #25
 8001ef2:	d502      	bpl.n	8001efa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	0650      	lsls	r0, r2, #25
 8001ef8:	d461      	bmi.n	8001fbe <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	0691      	lsls	r1, r2, #26
 8001efe:	d502      	bpl.n	8001f06 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	0692      	lsls	r2, r2, #26
 8001f04:	d443      	bmi.n	8001f8e <HAL_TIM_IRQHandler+0xee>
}
 8001f06:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f08:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f0e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f18:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1a:	d064      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1c:	f7ff ffba 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f22:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f24:	7722      	strb	r2, [r4, #28]
 8001f26:	e7d6      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f28:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f30:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	d152      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	f7ff ffa9 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ffaa 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f44:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f46:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f48:	7722      	strb	r2, [r4, #28]
 8001f4a:	e7be      	b.n	8001eca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f50:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f52:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f54:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5e:	d13c      	bne.n	8001fda <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f60:	f7ff ff96 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff ff97 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f6c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	7722      	strb	r2, [r4, #28]
 8001f70:	e7a5      	b.n	8001ebe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f72:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f76:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f78:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	079b      	lsls	r3, r3, #30
 8001f80:	d025      	beq.n	8001fce <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	f7ff ff87 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f88:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	7722      	strb	r2, [r4, #28]
 8001f8c:	e791      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f8e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001f92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f94:	611a      	str	r2, [r3, #16]
}
 8001f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001f9a:	f000 b905 	b.w	80021a8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f9e:	f06f 0201 	mvn.w	r2, #1
 8001fa2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7fe faed 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	e799      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f000 f8f9 	bl	80021ac <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	e797      	b.n	8001eee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff69 	bl	8001e9c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	e795      	b.n	8001efa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	f7ff ff5f 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff ff60 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fd8:	e7d5      	b.n	8001f86 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	f7ff ff5b 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001fde:	e7c4      	b.n	8001f6a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe0:	f7ff ff58 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e7ae      	b.n	8001f44 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	f7ff ff53 	bl	8001e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ff54 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ff0:	e796      	b.n	8001f20 <HAL_TIM_IRQHandler+0x80>
 8001ff2:	bf00      	nop

08001ff4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8001ff6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff8:	4290      	cmp	r0, r2
{
 8001ffa:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	d04c      	beq.n	8002098 <TIM_Base_SetConfig+0xa4>
 8001ffe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002002:	d034      	beq.n	800206e <TIM_Base_SetConfig+0x7a>
 8002004:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002008:	4290      	cmp	r0, r2
 800200a:	d030      	beq.n	800206e <TIM_Base_SetConfig+0x7a>
 800200c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002010:	4290      	cmp	r0, r2
 8002012:	d02c      	beq.n	800206e <TIM_Base_SetConfig+0x7a>
 8002014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002018:	4290      	cmp	r0, r2
 800201a:	d028      	beq.n	800206e <TIM_Base_SetConfig+0x7a>
 800201c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002020:	4290      	cmp	r0, r2
 8002022:	d039      	beq.n	8002098 <TIM_Base_SetConfig+0xa4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002024:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002028:	4290      	cmp	r0, r2
 800202a:	d024      	beq.n	8002076 <TIM_Base_SetConfig+0x82>
 800202c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002030:	4290      	cmp	r0, r2
 8002032:	d020      	beq.n	8002076 <TIM_Base_SetConfig+0x82>
 8002034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002038:	4290      	cmp	r0, r2
 800203a:	d01c      	beq.n	8002076 <TIM_Base_SetConfig+0x82>
 800203c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002040:	4290      	cmp	r0, r2
 8002042:	d018      	beq.n	8002076 <TIM_Base_SetConfig+0x82>
 8002044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002048:	4290      	cmp	r0, r2
 800204a:	d014      	beq.n	8002076 <TIM_Base_SetConfig+0x82>
 800204c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002050:	4290      	cmp	r0, r2
 8002052:	d010      	beq.n	8002076 <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002056:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8002058:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800205e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002060:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002062:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002064:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002066:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002068:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800206a:	6143      	str	r3, [r0, #20]
}
 800206c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800206e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002074:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002084:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002086:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8002088:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800208a:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800208c:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002090:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002092:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8002094:	6143      	str	r3, [r0, #20]
}
 8002096:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002098:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800209c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020a0:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a8:	694a      	ldr	r2, [r1, #20]
 80020aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020b0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b2:	688b      	ldr	r3, [r1, #8]
 80020b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020b6:	680b      	ldr	r3, [r1, #0]
 80020b8:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80020ba:	690b      	ldr	r3, [r1, #16]
 80020bc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80020c2:	6143      	str	r3, [r0, #20]
}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000

080020cc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80020cc:	b350      	cbz	r0, 8002124 <HAL_TIM_Base_Init+0x58>
{
 80020ce:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80020d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020d4:	4604      	mov	r4, r0
 80020d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020da:	b1f3      	cbz	r3, 800211a <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020dc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80020e8:	f7ff ff84 	bl	8001ff4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80020f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80020fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80020fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800210a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800210e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002116:	2000      	movs	r0, #0
}
 8002118:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800211a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800211e:	f7fe fc4b 	bl	80009b8 <HAL_TIM_Base_MspInit>
 8002122:	e7db      	b.n	80020dc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002124:	2001      	movs	r0, #1
}
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002128:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d037      	beq.n	80021a0 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002130:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002132:	2202      	movs	r2, #2
{
 8002134:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002136:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800213a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800213c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800213e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002140:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002144:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01a      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d017      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002154:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800215c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002160:	4293      	cmp	r3, r2
 8002162:	d00f      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002168:	4293      	cmp	r3, r2
 800216a:	d00b      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800216c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002174:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800217c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002180:	4293      	cmp	r3, r2
 8002182:	d104      	bne.n	800218e <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002184:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002186:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800218a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800218c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800218e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002190:	2201      	movs	r2, #1
 8002192:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002196:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800219a:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800219c:	4618      	mov	r0, r3
}
 800219e:	4770      	bx	lr
  __HAL_LOCK(htim);
 80021a0:	2002      	movs	r0, #2
}
 80021a2:	4770      	bx	lr
 80021a4:	40010000 	.word	0x40010000

080021a8 <HAL_TIMEx_CommutCallback>:
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <HAL_TIMEx_BreakCallback>:
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop

080021b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b2:	f102 030c 	add.w	r3, r2, #12
 80021b6:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021be:	f102 0c0c 	add.w	ip, r2, #12
 80021c2:	e84c 3100 	strex	r1, r3, [ip]
 80021c6:	2900      	cmp	r1, #0
 80021c8:	d1f3      	bne.n	80021b2 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ca:	f102 0314 	add.w	r3, r2, #20
 80021ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d6:	f102 0c14 	add.w	ip, r2, #20
 80021da:	e84c 3100 	strex	r1, r3, [ip]
 80021de:	2900      	cmp	r1, #0
 80021e0:	d1f3      	bne.n	80021ca <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d005      	beq.n	80021f4 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021e8:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ea:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80021ec:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f0:	6303      	str	r3, [r0, #48]	; 0x30
}
 80021f2:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f4:	f102 030c 	add.w	r3, r2, #12
 80021f8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002200:	f102 0c0c 	add.w	ip, r2, #12
 8002204:	e84c 3100 	strex	r1, r3, [ip]
 8002208:	2900      	cmp	r1, #0
 800220a:	d1f3      	bne.n	80021f4 <UART_EndRxTransfer+0x44>
 800220c:	e7ec      	b.n	80021e8 <UART_EndRxTransfer+0x38>
 800220e:	bf00      	nop

08002210 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002210:	6802      	ldr	r2, [r0, #0]
 8002212:	6911      	ldr	r1, [r2, #16]
{
 8002214:	b538      	push	{r3, r4, r5, lr}
 8002216:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002218:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800221a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800221c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002220:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002222:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002224:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002226:	4303      	orrs	r3, r0
 8002228:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800222a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800222c:	4303      	orrs	r3, r0
 800222e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002230:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002234:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002238:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800223a:	430b      	orrs	r3, r1
 800223c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800223e:	6953      	ldr	r3, [r2, #20]
 8002240:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002242:	4928      	ldr	r1, [pc, #160]	; (80022e4 <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002248:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800224a:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800224c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800224e:	d029      	beq.n	80022a4 <UART_SetConfig+0x94>
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <UART_SetConfig+0xd8>)
 8002252:	429a      	cmp	r2, r3
 8002254:	d026      	beq.n	80022a4 <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002256:	f7ff fab3 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800225a:	69e3      	ldr	r3, [r4, #28]
 800225c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002260:	d126      	bne.n	80022b0 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002262:	6862      	ldr	r2, [r4, #4]
 8002264:	4d21      	ldr	r5, [pc, #132]	; (80022ec <UART_SetConfig+0xdc>)
 8002266:	1892      	adds	r2, r2, r2
 8002268:	f04f 0119 	mov.w	r1, #25
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	415b      	adcs	r3, r3
 8002272:	fba0 0101 	umull	r0, r1, r0, r1
 8002276:	f7fd ffc5 	bl	8000204 <__aeabi_uldivmod>
 800227a:	fba5 3200 	umull	r3, r2, r5, r0
 800227e:	0951      	lsrs	r1, r2, #5
 8002280:	2364      	movs	r3, #100	; 0x64
 8002282:	fb03 0311 	mls	r3, r3, r1, r0
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	3332      	adds	r3, #50	; 0x32
 800228a:	fba5 2303 	umull	r2, r3, r5, r3
 800228e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	6824      	ldr	r4, [r4, #0]
 8002296:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800229a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800229e:	4413      	add	r3, r2
 80022a0:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80022a4:	f7ff fa9c 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a8:	69e3      	ldr	r3, [r4, #28]
 80022aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ae:	d0d8      	beq.n	8002262 <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	2119      	movs	r1, #25
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	fba0 0101 	umull	r0, r1, r0, r1
 80022ba:	0f9b      	lsrs	r3, r3, #30
 80022bc:	f7fd ffa2 	bl	8000204 <__aeabi_uldivmod>
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <UART_SetConfig+0xdc>)
 80022c2:	fba2 1300 	umull	r1, r3, r2, r0
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	6821      	ldr	r1, [r4, #0]
 80022ca:	2464      	movs	r4, #100	; 0x64
 80022cc:	fb04 0013 	mls	r0, r4, r3, r0
 80022d0:	0100      	lsls	r0, r0, #4
 80022d2:	3032      	adds	r0, #50	; 0x32
 80022d4:	fba2 2000 	umull	r2, r0, r2, r0
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80022de:	6088      	str	r0, [r1, #8]
}
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	51eb851f 	.word	0x51eb851f

080022f0 <HAL_UART_Init>:
  if (huart == NULL)
 80022f0:	b360      	cbz	r0, 800234c <HAL_UART_Init+0x5c>
{
 80022f2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80022f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022f8:	4604      	mov	r4, r0
 80022fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022fe:	b303      	cbz	r3, 8002342 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8002300:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002302:	2324      	movs	r3, #36	; 0x24
 8002304:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002308:	68d3      	ldr	r3, [r2, #12]
 800230a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  UART_SetConfig(huart);
 800230e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002310:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002312:	f7ff ff7d 	bl	8002210 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800231e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002326:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002328:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800232c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800232e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002332:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002336:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800233a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800233e:	4628      	mov	r0, r5
}
 8002340:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8002342:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002346:	f7fe fb55 	bl	80009f4 <HAL_UART_MspInit>
 800234a:	e7d9      	b.n	8002300 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
}
 800234e:	4770      	bx	lr

08002350 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002350:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002354:	2b20      	cmp	r3, #32
 8002356:	d11b      	bne.n	8002390 <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8002358:	b1c1      	cbz	r1, 800238c <HAL_UART_Transmit_IT+0x3c>
 800235a:	b1ba      	cbz	r2, 800238c <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 800235c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d015      	beq.n	8002390 <HAL_UART_Transmit_IT+0x40>
{
 8002364:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002368:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 800236a:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002372:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8002374:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 8002378:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800237a:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 800237c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800237e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8002382:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002384:	60e2      	str	r2, [r4, #12]
}
 8002386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800238a:	4770      	bx	lr
      return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
 800238e:	4770      	bx	lr
    return HAL_BUSY;
 8002390:	2002      	movs	r0, #2
}
 8002392:	4770      	bx	lr

08002394 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002394:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002398:	2b20      	cmp	r3, #32
 800239a:	d11f      	bne.n	80023dc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800239c:	b1e1      	cbz	r1, 80023d8 <HAL_UART_Receive_IT+0x44>
 800239e:	b1da      	cbz	r2, 80023d8 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 80023a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d019      	beq.n	80023dc <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a8:	2300      	movs	r3, #0
 80023aa:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80023ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80023b0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b2:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 80023b4:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 80023b6:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023b8:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 80023ba:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023bc:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 80023c0:	b973      	cbnz	r3, 80023e0 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023c2:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 80023d2:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023d4:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80023d6:	4770      	bx	lr
      return HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
 80023da:	4770      	bx	lr
    return HAL_BUSY;
 80023dc:	2002      	movs	r0, #2
}
 80023de:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023e0:	6803      	ldr	r3, [r0, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	e7eb      	b.n	80023c4 <HAL_UART_Receive_IT+0x30>

080023ec <HAL_UART_AbortReceive>:
{
 80023ec:	6803      	ldr	r3, [r0, #0]
 80023ee:	b510      	push	{r4, lr}
 80023f0:	4604      	mov	r4, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	f103 020c 	add.w	r2, r3, #12
 80023f6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fe:	f103 000c 	add.w	r0, r3, #12
 8002402:	e840 2100 	strex	r1, r2, [r0]
 8002406:	2900      	cmp	r1, #0
 8002408:	d1f3      	bne.n	80023f2 <HAL_UART_AbortReceive+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	f103 0214 	add.w	r2, r3, #20
 800240e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002412:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	f103 0014 	add.w	r0, r3, #20
 800241a:	e840 2100 	strex	r1, r2, [r0]
 800241e:	2900      	cmp	r1, #0
 8002420:	d1f3      	bne.n	800240a <HAL_UART_AbortReceive+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002422:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002424:	2a01      	cmp	r2, #1
 8002426:	d027      	beq.n	8002478 <HAL_UART_AbortReceive+0x8c>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	0652      	lsls	r2, r2, #25
 800242c:	d407      	bmi.n	800243e <HAL_UART_AbortReceive+0x52>
  huart->RxXferCount = 0x00U;
 800242e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	2220      	movs	r2, #32
  huart->RxXferCount = 0x00U;
 8002432:	85e3      	strh	r3, [r4, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8002434:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  return HAL_OK;
 8002438:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243a:	6323      	str	r3, [r4, #48]	; 0x30
}
 800243c:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	f103 0214 	add.w	r2, r3, #20
 8002442:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	f103 0014 	add.w	r0, r3, #20
 800244e:	e840 2100 	strex	r1, r2, [r0]
 8002452:	2900      	cmp	r1, #0
 8002454:	d1f3      	bne.n	800243e <HAL_UART_AbortReceive+0x52>
    if (huart->hdmarx != NULL)
 8002456:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002458:	2800      	cmp	r0, #0
 800245a:	d0e8      	beq.n	800242e <HAL_UART_AbortReceive+0x42>
      huart->hdmarx->XferAbortCallback = NULL;
 800245c:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800245e:	f7fe ff9f 	bl	80013a0 <HAL_DMA_Abort>
 8002462:	2800      	cmp	r0, #0
 8002464:	d0e3      	beq.n	800242e <HAL_UART_AbortReceive+0x42>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002466:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002468:	f7fe fff4 	bl	8001454 <HAL_DMA_GetError>
 800246c:	2820      	cmp	r0, #32
 800246e:	d1de      	bne.n	800242e <HAL_UART_AbortReceive+0x42>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002470:	2310      	movs	r3, #16
 8002472:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8002474:	2003      	movs	r0, #3
}
 8002476:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	f103 020c 	add.w	r2, r3, #12
 800247c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002480:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002484:	f103 000c 	add.w	r0, r3, #12
 8002488:	e840 2100 	strex	r1, r2, [r0]
 800248c:	2900      	cmp	r1, #0
 800248e:	d1f3      	bne.n	8002478 <HAL_UART_AbortReceive+0x8c>
 8002490:	e7ca      	b.n	8002428 <HAL_UART_AbortReceive+0x3c>
 8002492:	bf00      	nop

08002494 <HAL_UART_TxCpltCallback>:
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <HAL_UART_ErrorCallback>:
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop

0800249c <UART_DMAAbortOnError>:
{
 800249c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800249e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024a4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80024a6:	f7ff fff7 	bl	8002498 <HAL_UART_ErrorCallback>
}
 80024aa:	bd08      	pop	{r3, pc}

080024ac <HAL_UARTEx_RxEventCallback>:
}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	6883      	ldr	r3, [r0, #8]
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d044      	beq.n	8002542 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d039      	beq.n	8002532 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80024c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024ca:	3301      	adds	r3, #1
 80024cc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80024ce:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d132      	bne.n	8002540 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024da:	6802      	ldr	r2, [r0, #0]
 80024dc:	68d1      	ldr	r1, [r2, #12]
 80024de:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80024e2:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024e4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024e6:	68d1      	ldr	r1, [r2, #12]
 80024e8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80024ec:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024ee:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80024f0:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024f4:	f021 0101 	bic.w	r1, r1, #1
 80024f8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80024fa:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002500:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002502:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002504:	d128      	bne.n	8002558 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002506:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	f102 030c 	add.w	r3, r2, #12
 800250c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002510:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002514:	f102 0c0c 	add.w	ip, r2, #12
 8002518:	e84c 3100 	strex	r1, r3, [ip]
 800251c:	2900      	cmp	r1, #0
 800251e:	d1f3      	bne.n	8002508 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	06db      	lsls	r3, r3, #27
 8002524:	d422      	bmi.n	800256c <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002526:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002528:	f7ff ffc0 	bl	80024ac <HAL_UARTEx_RxEventCallback>
}
 800252c:	b003      	add	sp, #12
 800252e:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002532:	6903      	ldr	r3, [r0, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1c2      	bne.n	80024be <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002538:	6803      	ldr	r3, [r0, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	7013      	strb	r3, [r2, #0]
 800253e:	e7c3      	b.n	80024c8 <UART_Receive_IT.part.0.isra.0+0x18>
 8002540:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002542:	6903      	ldr	r3, [r0, #16]
 8002544:	b96b      	cbnz	r3, 8002562 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002546:	6802      	ldr	r2, [r0, #0]
 8002548:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800254a:	6852      	ldr	r2, [r2, #4]
 800254c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002550:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8002554:	6283      	str	r3, [r0, #40]	; 0x28
 8002556:	e7ba      	b.n	80024ce <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 8002558:	f7fe f82c 	bl	80005b4 <HAL_UART_RxCpltCallback>
}
 800255c:	b003      	add	sp, #12
 800255e:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002562:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002564:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	7013      	strb	r3, [r2, #0]
 800256a:	e7ad      	b.n	80024c8 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800256c:	9101      	str	r1, [sp, #4]
 800256e:	6813      	ldr	r3, [r2, #0]
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	6853      	ldr	r3, [r2, #4]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	e7d5      	b.n	8002526 <UART_Receive_IT.part.0.isra.0+0x76>
 800257a:	bf00      	nop

0800257c <HAL_UART_IRQHandler>:
{
 800257c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800257e:	6803      	ldr	r3, [r0, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002582:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002584:	695e      	ldr	r6, [r3, #20]
  if (errorflags == RESET)
 8002586:	f012 0f0f 	tst.w	r2, #15
{
 800258a:	b082      	sub	sp, #8
 800258c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800258e:	461d      	mov	r5, r3
  if (errorflags == RESET)
 8002590:	d16e      	bne.n	8002670 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002592:	0693      	lsls	r3, r2, #26
 8002594:	d502      	bpl.n	800259c <HAL_UART_IRQHandler+0x20>
 8002596:	068e      	lsls	r6, r1, #26
 8002598:	f100 80d4 	bmi.w	8002744 <HAL_UART_IRQHandler+0x1c8>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800259c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025a2:	0616      	lsls	r6, r2, #24
 80025a4:	d502      	bpl.n	80025ac <HAL_UART_IRQHandler+0x30>
 80025a6:	0608      	lsls	r0, r1, #24
 80025a8:	f100 80a2 	bmi.w	80026f0 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025ac:	0652      	lsls	r2, r2, #25
 80025ae:	d502      	bpl.n	80025b6 <HAL_UART_IRQHandler+0x3a>
 80025b0:	064b      	lsls	r3, r1, #25
 80025b2:	f100 80bc 	bmi.w	800272e <HAL_UART_IRQHandler+0x1b2>
}
 80025b6:	b002      	add	sp, #8
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025ba:	06d6      	lsls	r6, r2, #27
 80025bc:	d5f1      	bpl.n	80025a2 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025be:	06c8      	lsls	r0, r1, #27
 80025c0:	d5ef      	bpl.n	80025a2 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025c2:	2300      	movs	r3, #0
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	686b      	ldr	r3, [r5, #4]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d0:	696b      	ldr	r3, [r5, #20]
 80025d2:	065b      	lsls	r3, r3, #25
 80025d4:	f140 80e5 	bpl.w	80027a2 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80025da:	6803      	ldr	r3, [r0, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0e8      	beq.n	80025b6 <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025e4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d9e5      	bls.n	80025b6 <HAL_UART_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 80025ea:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025ec:	69c3      	ldr	r3, [r0, #28]
 80025ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f2:	d036      	beq.n	8002662 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	f105 030c 	add.w	r3, r5, #12
 80025f8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	f105 010c 	add.w	r1, r5, #12
 8002604:	e841 3200 	strex	r2, r3, [r1]
 8002608:	2a00      	cmp	r2, #0
 800260a:	d1f3      	bne.n	80025f4 <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	f105 0314 	add.w	r3, r5, #20
 8002610:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002614:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002618:	f105 0114 	add.w	r1, r5, #20
 800261c:	e841 3200 	strex	r2, r3, [r1]
 8002620:	2a00      	cmp	r2, #0
 8002622:	d1f3      	bne.n	800260c <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	f105 0314 	add.w	r3, r5, #20
 8002628:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	f105 0114 	add.w	r1, r5, #20
 8002634:	e841 3200 	strex	r2, r3, [r1]
 8002638:	2a00      	cmp	r2, #0
 800263a:	d1f3      	bne.n	8002624 <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 800263c:	2320      	movs	r3, #32
 800263e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002644:	f105 030c 	add.w	r3, r5, #12
 8002648:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800264c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002650:	f105 010c 	add.w	r1, r5, #12
 8002654:	e841 3200 	strex	r2, r3, [r1]
 8002658:	2a00      	cmp	r2, #0
 800265a:	d1f3      	bne.n	8002644 <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800265c:	f7fe fea0 	bl	80013a0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002660:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8002662:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	4620      	mov	r0, r4
 8002668:	b291      	uxth	r1, r2
 800266a:	f7ff ff1f 	bl	80024ac <HAL_UARTEx_RxEventCallback>
 800266e:	e7a2      	b.n	80025b6 <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002670:	f006 0601 	and.w	r6, r6, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002674:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8002678:	4330      	orrs	r0, r6
 800267a:	d08f      	beq.n	800259c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800267c:	07d0      	lsls	r0, r2, #31
 800267e:	d505      	bpl.n	800268c <HAL_UART_IRQHandler+0x110>
 8002680:	05cd      	lsls	r5, r1, #23
 8002682:	d503      	bpl.n	800268c <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002684:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002686:	f040 0001 	orr.w	r0, r0, #1
 800268a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800268c:	0750      	lsls	r0, r2, #29
 800268e:	d526      	bpl.n	80026de <HAL_UART_IRQHandler+0x162>
 8002690:	b12e      	cbz	r6, 800269e <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002692:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002694:	0795      	lsls	r5, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002696:	f040 0002 	orr.w	r0, r0, #2
 800269a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800269c:	d423      	bmi.n	80026e6 <HAL_UART_IRQHandler+0x16a>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800269e:	0715      	lsls	r5, r2, #28
 80026a0:	d507      	bpl.n	80026b2 <HAL_UART_IRQHandler+0x136>
 80026a2:	f001 0020 	and.w	r0, r1, #32
 80026a6:	4330      	orrs	r0, r6
 80026a8:	d003      	beq.n	80026b2 <HAL_UART_IRQHandler+0x136>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026ac:	f040 0008 	orr.w	r0, r0, #8
 80026b0:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026b4:	2800      	cmp	r0, #0
 80026b6:	f43f af7e 	beq.w	80025b6 <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ba:	0690      	lsls	r0, r2, #26
 80026bc:	d502      	bpl.n	80026c4 <HAL_UART_IRQHandler+0x148>
 80026be:	068a      	lsls	r2, r1, #26
 80026c0:	f100 80a8 	bmi.w	8002814 <HAL_UART_IRQHandler+0x298>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026c4:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026c6:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026cc:	f005 0508 	and.w	r5, r5, #8
 80026d0:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80026d2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026d4:	d140      	bne.n	8002758 <HAL_UART_IRQHandler+0x1dc>
        HAL_UART_ErrorCallback(huart);
 80026d6:	f7ff fedf 	bl	8002498 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026da:	6425      	str	r5, [r4, #64]	; 0x40
 80026dc:	e76b      	b.n	80025b6 <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026de:	0790      	lsls	r0, r2, #30
 80026e0:	d5dd      	bpl.n	800269e <HAL_UART_IRQHandler+0x122>
 80026e2:	2e00      	cmp	r6, #0
 80026e4:	d0db      	beq.n	800269e <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026e8:	f040 0004 	orr.w	r0, r0, #4
 80026ec:	6420      	str	r0, [r4, #64]	; 0x40
 80026ee:	e7d6      	b.n	800269e <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80026f4:	2b21      	cmp	r3, #33	; 0x21
 80026f6:	f47f af5e 	bne.w	80025b6 <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	f000 8092 	beq.w	8002828 <HAL_UART_IRQHandler+0x2ac>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002704:	6a23      	ldr	r3, [r4, #32]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	6222      	str	r2, [r4, #32]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	606b      	str	r3, [r5, #4]
    if (--huart->TxXferCount == 0U)
 800270e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002710:	3b01      	subs	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002716:	2b00      	cmp	r3, #0
 8002718:	f47f af4d 	bne.w	80025b6 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800271c:	68eb      	ldr	r3, [r5, #12]
 800271e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002722:	60eb      	str	r3, [r5, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002724:	68eb      	ldr	r3, [r5, #12]
 8002726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272a:	60eb      	str	r3, [r5, #12]
 800272c:	e743      	b.n	80025b6 <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800272e:	68eb      	ldr	r3, [r5, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002730:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002736:	60eb      	str	r3, [r5, #12]
  HAL_UART_TxCpltCallback(huart);
 8002738:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800273a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800273e:	f7ff fea9 	bl	8002494 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002742:	e738      	b.n	80025b6 <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002744:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002748:	2b22      	cmp	r3, #34	; 0x22
 800274a:	f47f af34 	bne.w	80025b6 <HAL_UART_IRQHandler+0x3a>
}
 800274e:	b002      	add	sp, #8
 8002750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002754:	f7ff beac 	b.w	80024b0 <UART_Receive_IT.part.0.isra.0>
        UART_EndRxTransfer(huart);
 8002758:	f7ff fd2a 	bl	80021b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	6825      	ldr	r5, [r4, #0]
 800275e:	696b      	ldr	r3, [r5, #20]
 8002760:	065b      	lsls	r3, r3, #25
 8002762:	d51a      	bpl.n	800279a <HAL_UART_IRQHandler+0x21e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	f105 0314 	add.w	r3, r5, #20
 8002768:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	f105 0114 	add.w	r1, r5, #20
 8002774:	e841 3200 	strex	r2, r3, [r1]
 8002778:	2a00      	cmp	r2, #0
 800277a:	d1f3      	bne.n	8002764 <HAL_UART_IRQHandler+0x1e8>
          if (huart->hdmarx != NULL)
 800277c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800277e:	b160      	cbz	r0, 800279a <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_UART_IRQHandler+0x2c4>)
 8002782:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002784:	f7fe fe54 	bl	8001430 <HAL_DMA_Abort_IT>
 8002788:	2800      	cmp	r0, #0
 800278a:	f43f af14 	beq.w	80025b6 <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800278e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002790:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8002792:	b002      	add	sp, #8
 8002794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002798:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fe7c 	bl	8002498 <HAL_UART_ErrorCallback>
 80027a0:	e709      	b.n	80025b6 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027a2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 80027a4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80027a6:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027a8:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f43f af03 	beq.w	80025b6 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027b0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80027b2:	1a8a      	subs	r2, r1, r2
 80027b4:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 80027b6:	2900      	cmp	r1, #0
 80027b8:	f43f aefd 	beq.w	80025b6 <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	f105 030c 	add.w	r3, r5, #12
 80027c0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	f105 000c 	add.w	r0, r5, #12
 80027cc:	e840 3200 	strex	r2, r3, [r0]
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	d1f3      	bne.n	80027bc <HAL_UART_IRQHandler+0x240>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	f105 0314 	add.w	r3, r5, #20
 80027d8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	f105 0014 	add.w	r0, r5, #20
 80027e4:	e840 3200 	strex	r2, r3, [r0]
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d1f3      	bne.n	80027d4 <HAL_UART_IRQHandler+0x258>
        huart->RxState = HAL_UART_STATE_READY;
 80027ec:	2320      	movs	r3, #32
 80027ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f2:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	f105 030c 	add.w	r3, r5, #12
 80027f8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	f105 000c 	add.w	r0, r5, #12
 8002804:	e840 3200 	strex	r2, r3, [r0]
 8002808:	2a00      	cmp	r2, #0
 800280a:	d1f3      	bne.n	80027f4 <HAL_UART_IRQHandler+0x278>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff fe4d 	bl	80024ac <HAL_UARTEx_RxEventCallback>
 8002812:	e6d0      	b.n	80025b6 <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002814:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002818:	2a22      	cmp	r2, #34	; 0x22
 800281a:	f47f af53 	bne.w	80026c4 <HAL_UART_IRQHandler+0x148>
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fe46 	bl	80024b0 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	e74d      	b.n	80026c4 <HAL_UART_IRQHandler+0x148>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002828:	6923      	ldr	r3, [r4, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f47f af6a 	bne.w	8002704 <HAL_UART_IRQHandler+0x188>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002830:	6a23      	ldr	r3, [r4, #32]
 8002832:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800283a:	606a      	str	r2, [r5, #4]
      huart->pTxBuffPtr += 2U;
 800283c:	6223      	str	r3, [r4, #32]
 800283e:	e766      	b.n	800270e <HAL_UART_IRQHandler+0x192>
 8002840:	0800249d 	.word	0x0800249d

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	4d0d      	ldr	r5, [pc, #52]	; (800287c <__libc_init_array+0x38>)
 8002848:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <__libc_init_array+0x3c>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	2600      	movs	r6, #0
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	4d0b      	ldr	r5, [pc, #44]	; (8002884 <__libc_init_array+0x40>)
 8002856:	4c0c      	ldr	r4, [pc, #48]	; (8002888 <__libc_init_array+0x44>)
 8002858:	f000 f826 	bl	80028a8 <_init>
 800285c:	1b64      	subs	r4, r4, r5
 800285e:	10a4      	asrs	r4, r4, #2
 8002860:	2600      	movs	r6, #0
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	080028e0 	.word	0x080028e0
 8002880:	080028e0 	.word	0x080028e0
 8002884:	080028e0 	.word	0x080028e0
 8002888:	080028e4 	.word	0x080028e4

0800288c <memcpy>:
 800288c:	440a      	add	r2, r1
 800288e:	4291      	cmp	r1, r2
 8002890:	f100 33ff 	add.w	r3, r0, #4294967295
 8002894:	d100      	bne.n	8002898 <memcpy+0xc>
 8002896:	4770      	bx	lr
 8002898:	b510      	push	{r4, lr}
 800289a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800289e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a2:	4291      	cmp	r1, r2
 80028a4:	d1f9      	bne.n	800289a <memcpy+0xe>
 80028a6:	bd10      	pop	{r4, pc}

080028a8 <_init>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr

080028b4 <_fini>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr
