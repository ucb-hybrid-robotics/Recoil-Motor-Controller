
CAN-USB-Adapter-G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c64  08006c64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c6c  08006c6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08006ce4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006ce4  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016db5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282f  00000000  00000000  00036e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00039688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003a928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa67  00000000  00000000  0003bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001521b  00000000  00000000  0005b54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb825  00000000  00000000  0007076a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bf8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  0013bfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bc0 	.word	0x08006bc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006bc0 	.word	0x08006bc0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <CAN_putTxFrame>:
  uint8_t frame_type;
  uint16_t size;
  uint8_t data[8];
} CAN_Frame;

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <CAN_putTxFrame+0x1c>
 80005ec:	2300      	movs	r3, #0
 80005ee:	e001      	b.n	80005f4 <CAN_putTxFrame+0x20>
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f4:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d101      	bne.n	8000602 <CAN_putTxFrame+0x2e>
 80005fe:	2300      	movs	r3, #0
 8000600:	e001      	b.n	8000606 <CAN_putTxFrame+0x32>
 8000602:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000606:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	88db      	ldrh	r3, [r3, #6]
 800060c:	2b08      	cmp	r3, #8
 800060e:	d838      	bhi.n	8000682 <CAN_putTxFrame+0xae>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <CAN_putTxFrame+0x44>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	0800063d 	.word	0x0800063d
 800061c:	08000643 	.word	0x08000643
 8000620:	0800064b 	.word	0x0800064b
 8000624:	08000653 	.word	0x08000653
 8000628:	0800065b 	.word	0x0800065b
 800062c:	08000663 	.word	0x08000663
 8000630:	0800066b 	.word	0x0800066b
 8000634:	08000673 	.word	0x08000673
 8000638:	0800067b 	.word	0x0800067b
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	e021      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 8000642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	e01d      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 800064a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	e019      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 8000652:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000656:	61bb      	str	r3, [r7, #24]
 8000658:	e015      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 800065a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	e011      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8000662:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	e00d      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800066a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	e009      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8000672:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	e005      	b.n	8000686 <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 800067a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	e001      	b.n	8000686 <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8000686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800068a:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	f103 0208 	add.w	r2, r3, #8
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f001 f8cb 	bl	8001844 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006ae:	4603      	mov	r3, r0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <HAL_FDCAN_RxFifo0Callback>:

uint8_t counter = 0;
uint8_t result;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  sprintf(str, "canrx\r\n");
 80006c2:	4909      	ldr	r1, [pc, #36]	; (80006e8 <HAL_FDCAN_RxFifo0Callback+0x30>)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <HAL_FDCAN_RxFifo0Callback+0x34>)
 80006c6:	f005 fe1b 	bl	8006300 <siprintf>
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)str, strlen(str));
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <HAL_FDCAN_RxFifo0Callback+0x34>)
 80006cc:	f7ff fda8 	bl	8000220 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4905      	ldr	r1, [pc, #20]	; (80006ec <HAL_FDCAN_RxFifo0Callback+0x34>)
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80006da:	f003 fb75 	bl	8003dc8 <HAL_UART_Transmit_IT>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08006bd8 	.word	0x08006bd8
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	20000250 	.word	0x20000250

080006f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive(&huart2);
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fe:	f003 fc61 	bl	8003fc4 <HAL_UART_AbortReceive>
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 10);
 8000702:	220a      	movs	r2, #10
 8000704:	4904      	ldr	r1, [pc, #16]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000708:	f003 fc06 	bl	8003f18 <HAL_UART_Receive_IT>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000250 	.word	0x20000250
 8000718:	2000011c 	.word	0x2000011c

0800071c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000724:	4b36      	ldr	r3, [pc, #216]	; (8000800 <HAL_UART_RxCpltCallback+0xe4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  if (!uart_rx_data_pending) {
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <HAL_UART_RxCpltCallback+0xe8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d148      	bne.n	80007c6 <HAL_UART_RxCpltCallback+0xaa>
    uint8_t is_valid_frame = uart_rx_buffer[0] == 0xAAU;
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2baa      	cmp	r3, #170	; 0xaa
 800073a:	bf0c      	ite	eq
 800073c:	2301      	moveq	r3, #1
 800073e:	2300      	movne	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	73fb      	strb	r3, [r7, #15]
    if (!is_valid_frame) {
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d056      	beq.n	80007f8 <HAL_UART_RxCpltCallback+0xdc>
      return;
    }
    can_tx_frame.id_type = CAN_ID_STANDARD;
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 800074c:	2200      	movs	r2, #0
 800074e:	711a      	strb	r2, [r3, #4]
    can_tx_frame.frame_type = CAN_FRAME_DATA;
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 8000752:	2201      	movs	r2, #1
 8000754:	715a      	strb	r2, [r3, #5]
    uint32_t timestamp = ((uart_rx_buffer[1])
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	461a      	mov	r2, r3
        | (uart_rx_buffer[2] << 8U)
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 800075e:	789b      	ldrb	r3, [r3, #2]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	431a      	orrs	r2, r3
        | (uart_rx_buffer[3] << 16U)
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	041b      	lsls	r3, r3, #16
 800076a:	431a      	orrs	r2, r3
        | (uart_rx_buffer[4] << 24U));
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	061b      	lsls	r3, r3, #24
 8000772:	4313      	orrs	r3, r2
    uint32_t timestamp = ((uart_rx_buffer[1])
 8000774:	60bb      	str	r3, [r7, #8]
    can_tx_frame.size = uart_rx_buffer[5];
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	b29a      	uxth	r2, r3
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 800077e:	80da      	strh	r2, [r3, #6]
    can_tx_frame.id = ((uart_rx_buffer[6])
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000782:	799b      	ldrb	r3, [r3, #6]
 8000784:	461a      	mov	r2, r3
        | (uart_rx_buffer[7] << 8U)
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	431a      	orrs	r2, r3
        | (uart_rx_buffer[8] << 16U)
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	431a      	orrs	r2, r3
        | (uart_rx_buffer[9] << 24U));
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 8000798:	7a5b      	ldrb	r3, [r3, #9]
 800079a:	061b      	lsls	r3, r3, #24
 800079c:	4313      	orrs	r3, r2
 800079e:	461a      	mov	r2, r3
    can_tx_frame.id = ((uart_rx_buffer[6])
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 80007a2:	601a      	str	r2, [r3, #0]
    if (can_tx_frame.size) {
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 80007a6:	88db      	ldrh	r3, [r3, #6]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d013      	beq.n	80007d4 <HAL_UART_RxCpltCallback+0xb8>
      uart_rx_data_pending = 1U;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_RxCpltCallback+0xe8>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart2, uart_rx_buffer, can_tx_frame.size+1);
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 80007b4:	88db      	ldrh	r3, [r3, #6]
 80007b6:	3301      	adds	r3, #1
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	4912      	ldr	r1, [pc, #72]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <HAL_UART_RxCpltCallback+0xf4>)
 80007c0:	f003 fbaa 	bl	8003f18 <HAL_UART_Receive_IT>
      return;
 80007c4:	e019      	b.n	80007fa <HAL_UART_RxCpltCallback+0xde>
    }
  }
  else {
    memcpy(can_tx_frame.data, uart_rx_buffer, can_tx_frame.size);
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 80007c8:	88db      	ldrh	r3, [r3, #6]
 80007ca:	461a      	mov	r2, r3
 80007cc:	490e      	ldr	r1, [pc, #56]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <HAL_UART_RxCpltCallback+0xf8>)
 80007d0:	f005 fd80 	bl	80062d4 <memcpy>
  }

  CAN_putTxFrame(&hfdcan1, &can_tx_frame);
 80007d4:	490d      	ldr	r1, [pc, #52]	; (800080c <HAL_UART_RxCpltCallback+0xf0>)
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <HAL_UART_RxCpltCallback+0xfc>)
 80007d8:	f7ff fefc 	bl	80005d4 <CAN_putTxFrame>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80007dc:	2104      	movs	r1, #4
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 fd67 	bl	80022b4 <HAL_GPIO_TogglePin>

  uart_rx_data_pending = 0U;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_UART_RxCpltCallback+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 10);
 80007ec:	220a      	movs	r2, #10
 80007ee:	4906      	ldr	r1, [pc, #24]	; (8000808 <HAL_UART_RxCpltCallback+0xec>)
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <HAL_UART_RxCpltCallback+0xf4>)
 80007f2:	f003 fb91 	bl	8003f18 <HAL_UART_Receive_IT>
 80007f6:	e000      	b.n	80007fa <HAL_UART_RxCpltCallback+0xde>
      return;
 80007f8:	bf00      	nop
}
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000204 	.word	0x20000204
 8000804:	2000015c 	.word	0x2000015c
 8000808:	2000011c 	.word	0x2000011c
 800080c:	2000010c 	.word	0x2000010c
 8000810:	20000250 	.word	0x20000250
 8000814:	20000114 	.word	0x20000114
 8000818:	200001a0 	.word	0x200001a0

0800081c <APP_init>:

void APP_init() {
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
  filter_config.FilterIndex = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 800082a:	2302      	movs	r3, #2
 800082c:	60bb      	str	r3, [r7, #8]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800082e:	2301      	movs	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
  filter_config.FilterID1 = 1;    // filter
 8000832:	2301      	movs	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <APP_init+0x58>)
 8000840:	f000 ff7e 	bl	8001740 <HAL_FDCAN_ConfigFilter>

  HAL_FDCAN_Start(&hfdcan1);
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <APP_init+0x58>)
 8000846:	f000 ffd5 	bl	80017f4 <HAL_FDCAN_Start>

  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2101      	movs	r1, #1
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <APP_init+0x58>)
 8000850:	f001 f83c 	bl	80018cc <HAL_FDCAN_ActivateNotification>

  HAL_TIM_Base_Start_IT(&htim2);
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <APP_init+0x5c>)
 8000856:	f002 fd67 	bl	8003328 <HAL_TIM_Base_Start_IT>

  uart_rx_data_pending = 0U;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <APP_init+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 10);
 8000860:	220a      	movs	r2, #10
 8000862:	4907      	ldr	r1, [pc, #28]	; (8000880 <APP_init+0x64>)
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <APP_init+0x68>)
 8000866:	f003 fb57 	bl	8003f18 <HAL_UART_Receive_IT>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001a0 	.word	0x200001a0
 8000878:	20000204 	.word	0x20000204
 800087c:	2000015c 	.word	0x2000015c
 8000880:	2000011c 	.word	0x2000011c
 8000884:	20000250 	.word	0x20000250

08000888 <APP_main>:

void APP_main() {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  uart_tx_buffer[0] = 0xAAU;  // Start of frame
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <APP_main+0x70>)
 800088e:	22aa      	movs	r2, #170	; 0xaa
 8000890:	701a      	strb	r2, [r3, #0]

  uart_tx_buffer[1] = 0x00U;  // Timestamp
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <APP_main+0x70>)
 8000894:	2200      	movs	r2, #0
 8000896:	705a      	strb	r2, [r3, #1]
  uart_tx_buffer[2] = 0x00U;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <APP_main+0x70>)
 800089a:	2200      	movs	r2, #0
 800089c:	709a      	strb	r2, [r3, #2]
  uart_tx_buffer[3] = 0x00U;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <APP_main+0x70>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	70da      	strb	r2, [r3, #3]
  uart_tx_buffer[4] = 0x00U;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <APP_main+0x70>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	711a      	strb	r2, [r3, #4]

  uart_tx_buffer[5] = 0x03U;  // DLC
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <APP_main+0x70>)
 80008ac:	2203      	movs	r2, #3
 80008ae:	715a      	strb	r2, [r3, #5]

  uart_tx_buffer[6] = 0x03U;  // ID
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <APP_main+0x70>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	719a      	strb	r2, [r3, #6]
  uart_tx_buffer[7] = 0x00U;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <APP_main+0x70>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	71da      	strb	r2, [r3, #7]
  uart_tx_buffer[8] = 0x00U;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <APP_main+0x70>)
 80008be:	2200      	movs	r2, #0
 80008c0:	721a      	strb	r2, [r3, #8]
  uart_tx_buffer[9] = 0x00U;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <APP_main+0x70>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	725a      	strb	r2, [r3, #9]

  uart_tx_buffer[10] = 0x01U;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <APP_main+0x70>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	729a      	strb	r2, [r3, #10]
  uart_tx_buffer[11] = 0x02U;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <APP_main+0x70>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	72da      	strb	r2, [r3, #11]
  uart_tx_buffer[12] = 0x03U;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <APP_main+0x70>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	731a      	strb	r2, [r3, #12]

  uart_tx_buffer[13] = 0xBBU;  // End of frame
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <APP_main+0x70>)
 80008dc:	22bb      	movs	r2, #187	; 0xbb
 80008de:	735a      	strb	r2, [r3, #13]


  HAL_UART_Transmit_IT(&huart2, uart_tx_buffer, 14);
 80008e0:	220e      	movs	r2, #14
 80008e2:	4905      	ldr	r1, [pc, #20]	; (80008f8 <APP_main+0x70>)
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <APP_main+0x74>)
 80008e6:	f003 fa6f 	bl	8003dc8 <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 80008ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ee:	f000 fbcf 	bl	8001090 <HAL_Delay>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000160 	.word	0x20000160
 80008fc:	20000250 	.word	0x20000250

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fb53 	bl	8000fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f80d 	bl	8000926 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 f936 	bl	8000b7c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000910:	f000 f854 	bl	80009bc <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000914:	f000 f8e6 	bl	8000ae4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000918:	f000 f896 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 800091c:	f7ff ff7e 	bl	800081c <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000920:	f7ff ffb2 	bl	8000888 <APP_main>
 8000924:	e7fc      	b.n	8000920 <main+0x20>

08000926 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b094      	sub	sp, #80	; 0x50
 800092a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	2238      	movs	r2, #56	; 0x38
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f005 fcdb 	bl	80062f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fccd 	bl	80022e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2340      	movs	r3, #64	; 0x40
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000964:	2301      	movs	r3, #1
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000968:	2314      	movs	r3, #20
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fd57 	bl	8002430 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000988:	f000 f936 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2303      	movs	r3, #3
 8000992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2104      	movs	r1, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f85b 	bl	8002a60 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009b0:	f000 f922 	bl	8000bf8 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	; 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <MX_FDCAN1_Init+0x88>)
 80009c4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009da:	2200      	movs	r2, #0
 80009dc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_FDCAN1_Init+0x84>)
 8000a2e:	f000 fd2d 	bl	800148c <HAL_FDCAN_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a38:	f000 f8de 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001a0 	.word	0x200001a0
 8000a44:	40006400 	.word	0x40006400

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a70:	229f      	movs	r2, #159	; 0x9f
 8000a72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a8e:	f002 fbf3 	bl	8003278 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a98:	f000 f8ae 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_TIM2_Init+0x94>)
 8000aaa:	f002 fe27 	bl	80036fc <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f000 f8a0 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM2_Init+0x94>)
 8000ac6:	f003 f867 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f892 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000204 	.word	0x20000204
 8000ae0:	000f4240 	.word	0x000f4240

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000aea:	4a23      	ldr	r2, [pc, #140]	; (8000b78 <MX_USART2_UART_Init+0x94>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b2e:	f003 f8fb 	bl	8003d28 <HAL_UART_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 f85e 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b40:	f005 fad3 	bl	80060ea <HAL_UARTEx_SetTxFifoThreshold>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f855 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b52:	f005 fb08 	bl	8006166 <HAL_UARTEx_SetRxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 f84c 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_USART2_UART_Init+0x90>)
 8000b62:	f005 fa89 	bl	8006078 <HAL_UARTEx_DisableFifoMode>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f844 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000250 	.word	0x20000250
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0x78>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <MX_GPIO_Init+0x78>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_GPIO_Init+0x78>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0x78>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0x78>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0x78>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f001 fb5b 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f001 f9ca 	bl	8001f80 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x44>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6613      	str	r3, [r2, #96]	; 0x60
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x44>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09a      	sub	sp, #104	; 0x68
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2244      	movs	r2, #68	; 0x44
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fb3f 	bl	80062f0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <HAL_FDCAN_MspInit+0xcc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d149      	bne.n	8000d10 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 f903 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c98:	f7ff ffae 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_FDCAN_MspInit+0xd0>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_FDCAN_MspInit+0xd0>)
 8000ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_FDCAN_MspInit+0xd0>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_FDCAN_MspInit+0xd0>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_FDCAN_MspInit+0xd0>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_FDCAN_MspInit+0xd0>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ccc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cd0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cde:	2309      	movs	r3, #9
 8000ce0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f001 f948 	bl	8001f80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2015      	movs	r0, #21
 8000cf6:	f000 fac8 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000cfa:	2015      	movs	r0, #21
 8000cfc:	f000 fadf 	bl	80012be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2016      	movs	r0, #22
 8000d06:	f000 fac0 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000d0a:	2016      	movs	r0, #22
 8000d0c:	f000 fad7 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3768      	adds	r7, #104	; 0x68
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40006400 	.word	0x40006400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_TIM_Base_MspInit+0x44>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_TIM_Base_MspInit+0x44>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_TIM_Base_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201c      	movs	r0, #28
 8000d50:	f000 fa9b 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d54:	201c      	movs	r0, #28
 8000d56:	f000 fab2 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09a      	sub	sp, #104	; 0x68
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2244      	movs	r2, #68	; 0x44
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fab1 	bl	80062f0 <memset>
  if(huart->Instance==USART2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <HAL_UART_MspInit+0xb4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d13d      	bne.n	8000e14 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 f877 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db0:	f7ff ff22 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000de4:	2318      	movs	r3, #24
 8000de6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df4:	2307      	movs	r3, #7
 8000df6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000e00:	f001 f8be 	bl	8001f80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2026      	movs	r0, #38	; 0x26
 8000e0a:	f000 fa3e 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e0e:	2026      	movs	r0, #38	; 0x26
 8000e10:	f000 fa55 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3768      	adds	r7, #104	; 0x68
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40004400 	.word	0x40004400
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000400 	.word	0x48000400

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f8ee 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <FDCAN1_IT0_IRQHandler+0x10>)
 8000e82:	f000 fe09 	bl	8001a98 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001a0 	.word	0x200001a0

08000e90 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <FDCAN1_IT1_IRQHandler+0x10>)
 8000e96:	f000 fdff 	bl	8001a98 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001a0 	.word	0x200001a0

08000ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM2_IRQHandler+0x10>)
 8000eaa:	f002 faa7 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000204 	.word	0x20000204

08000eb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USART2_IRQHandler+0x10>)
 8000ebe:	f003 f933 	bl	8004128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000250 	.word	0x20000250

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f005 f9c0 	bl	8006280 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20008000 	.word	0x20008000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	200002e0 	.word	0x200002e0
 8000f34:	200002f8 	.word	0x200002f8

08000f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopForever+0xe>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopForever+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f86:	f7ff ffd7 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f005 f97f 	bl	800628c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8e:	f7ff fcb7 	bl	8000900 <main>

08000f92 <LoopForever>:

LoopForever:
    b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   r0, =_estack
 8000f94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fa0:	08006c74 	.word	0x08006c74
  ldr r2, =_sbss
 8000fa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fa8:	200002f8 	.word	0x200002f8

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>

08000fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f95b 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f80e 	bl	8000fe0 <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	e001      	b.n	8000fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd0:	f7ff fe18 	bl	8000c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]

}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_InitTick+0x68>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d022      	beq.n	800103a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_InitTick+0x6c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_InitTick+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001000:	fbb1 f3f3 	udiv	r3, r1, r3
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f966 	bl	80012da <HAL_SYSTICK_Config>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10f      	bne.n	8001034 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d809      	bhi.n	800102e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101a:	2200      	movs	r2, #0
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	f04f 30ff 	mov.w	r0, #4294967295
 8001022:	f000 f932 	bl	800128a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_InitTick+0x70>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e007      	b.n	800103e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e004      	b.n	800103e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000008 	.word	0x20000008
 800104c:	20000000 	.word	0x20000000
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x1c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_IncTick+0x20>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4413      	add	r3, r2
 8001062:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_IncTick+0x1c>)
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	200002e4 	.word	0x200002e4
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200002e4 	.word	0x200002e4

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d004      	beq.n	80010b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_Delay+0x40>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b4:	bf00      	nop
 80010b6:	f7ff ffdf 	bl	8001078 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d8f7      	bhi.n	80010b6 <HAL_Delay+0x26>
  {
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000008 	.word	0x20000008

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff29 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff40 	bl	800111c <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff90 	bl	80011c8 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5f 	bl	8001174 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff33 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa4 	bl	8001230 <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d005      	beq.n	8001316 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2204      	movs	r2, #4
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e037      	b.n	8001386 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 020e 	bic.w	r2, r2, #14
 8001324:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001334:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0201 	bic.w	r2, r2, #1
 8001344:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 021f 	and.w	r2, r3, #31
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f202 	lsl.w	r2, r1, r2
 8001358:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001362:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800137a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001384:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d00d      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2204      	movs	r2, #4
 80013c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e047      	b.n	8001468 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001406:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001424:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800143c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001446:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
    }
  }
  return status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e147      	b.n	800172e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fbca 	bl	8000c4c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0210 	bic.w	r2, r2, #16
 80014c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff fdd6 	bl	8001078 <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ce:	e012      	b.n	80014f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014d0:	f7ff fdd2 	bl	8001078 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b0a      	cmp	r3, #10
 80014dc:	d90b      	bls.n	80014f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e11b      	b.n	800172e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b08      	cmp	r3, #8
 8001502:	d0e5      	beq.n	80014d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001514:	f7ff fdb0 	bl	8001078 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800151a:	e012      	b.n	8001542 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800151c:	f7ff fdac 	bl	8001078 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0f5      	b.n	800172e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0e5      	beq.n	800151c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0202 	orr.w	r2, r2, #2
 800155e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a74      	ldr	r2, [pc, #464]	; (8001738 <HAL_FDCAN_Init+0x2ac>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d103      	bne.n	8001572 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800156a:	4a74      	ldr	r2, [pc, #464]	; (800173c <HAL_FDCAN_Init+0x2b0>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7c1b      	ldrb	r3, [r3, #16]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001588:	619a      	str	r2, [r3, #24]
 800158a:	e007      	b.n	800159c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7c5b      	ldrb	r3, [r3, #17]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d108      	bne.n	80015b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	e007      	b.n	80015c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7c9b      	ldrb	r3, [r3, #18]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015dc:	619a      	str	r2, [r3, #24]
 80015de:	e007      	b.n	80015f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699a      	ldr	r2, [r3, #24]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001614:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0210 	bic.w	r2, r2, #16
 8001624:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0204 	orr.w	r2, r2, #4
 800163c:	619a      	str	r2, [r3, #24]
 800163e:	e02c      	b.n	800169a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d028      	beq.n	800169a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d01c      	beq.n	800168a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699a      	ldr	r2, [r3, #24]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0210 	orr.w	r2, r2, #16
 800166e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d110      	bne.n	800169a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	619a      	str	r2, [r3, #24]
 8001688:	e007      	b.n	800169a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0220 	orr.w	r2, r2, #32
 8001698:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	3b01      	subs	r3, #1
 80016a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ce:	d115      	bne.n	80016fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	3b01      	subs	r3, #1
 80016dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	3b01      	subs	r3, #1
 80016e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	3b01      	subs	r3, #1
 80016f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fb62 	bl	8001ddc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40006400 	.word	0x40006400
 800173c:	40006500 	.word	0x40006500

08001740 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001750:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d002      	beq.n	800175e <HAL_FDCAN_ConfigFilter+0x1e>
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d13d      	bne.n	80017da <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001772:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800177a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e01d      	b.n	80017d6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	075a      	lsls	r2, r3, #29
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	079a      	lsls	r2, r3, #30
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3304      	adds	r3, #4
 80017ce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e006      	b.n	80017e8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	f043 0202 	orr.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d110      	bne.n	800182a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e006      	b.n	8001838 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f043 0204 	orr.w	r2, r3, #4
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
  }
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d12c      	bne.n	80018b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001870:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e023      	b.n	80018c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 faf8 	bl	8001e88 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80018a8:	2201      	movs	r2, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e006      	b.n	80018c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f043 0208 	orr.w	r2, r3, #8
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018de:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d003      	beq.n	80018ee <HAL_FDCAN_ActivateNotification+0x22>
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f040 80c8 	bne.w	8001a7e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03b      	beq.n	8001982 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d031      	beq.n	8001982 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d027      	beq.n	8001982 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01d      	beq.n	8001982 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d013      	beq.n	8001982 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d13b      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d131      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d127      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11d      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d113      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0202 	orr.w	r2, r2, #2
 8001a2c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e006      	b.n	8001a8c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	6a3a      	ldr	r2, [r7, #32]
 8001acc:	4013      	ands	r3, r2
 8001ace:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ada:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001af2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b0a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f92e 	bl	8001d9e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d014      	beq.n	8001b88 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b66:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b80:	6939      	ldr	r1, [r7, #16]
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8ec 	bl	8001d60 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f8b6 	bl	8001d0a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6a3a      	ldr	r2, [r7, #32]
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fd82 	bl	80006b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bc2:	69f9      	ldr	r1, [r7, #28]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8ab 	bl	8001d20 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8a0 	bl	8001d36 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01a      	beq.n	8001c3a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d013      	beq.n	8001c3a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c1a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f888 	bl	8001d4a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00e      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f888 	bl	8001d76 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f87c 	bl	8001d8a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d011      	beq.n	8001cc4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001cd2:	6979      	ldr	r1, [r7, #20]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f876 	bl	8001dc6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f858 	bl	8001db2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001de6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfe:	041a      	lsls	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	061a      	lsls	r2, r3, #24
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e005      	b.n	8001e6a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3304      	adds	r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3f3      	bcc.n	8001e5e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	4000a400 	.word	0x4000a400

08001e88 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ea6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	e00a      	b.n	8001eca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ebc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ec2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ec8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ed4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001eda:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001ee0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	3304      	adds	r3, #4
 8001f06:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3304      	adds	r3, #4
 8001f12:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e020      	b.n	8001f5c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f32:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	3301      	adds	r3, #1
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	440b      	add	r3, r1
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f40:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	440a      	add	r2, r1
 8001f48:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f4a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	3304      	adds	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <FDCAN_CopyMessageToRAM+0xf4>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	461a      	mov	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d3d5      	bcc.n	8001f1a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3724      	adds	r7, #36	; 0x24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	08006bf8 	.word	0x08006bf8

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f8e:	e15a      	b.n	8002246 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 814c 	beq.w	8002240 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d005      	beq.n	8001fc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d130      	bne.n	8002022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 0201 	and.w	r2, r3, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b03      	cmp	r3, #3
 800202c:	d017      	beq.n	800205e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d123      	bne.n	80020b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	08da      	lsrs	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3208      	adds	r2, #8
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0203 	and.w	r2, r3, #3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80a6 	beq.w	8002240 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f4:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_GPIO_Init+0x2e4>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_GPIO_Init+0x2e4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002100:	4b58      	ldr	r3, [pc, #352]	; (8002264 <HAL_GPIO_Init+0x2e4>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210c:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002136:	d01f      	beq.n	8002178 <HAL_GPIO_Init+0x1f8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_GPIO_Init+0x2ec>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d019      	beq.n	8002174 <HAL_GPIO_Init+0x1f4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <HAL_GPIO_Init+0x1f0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <HAL_GPIO_Init+0x2f4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00d      	beq.n	800216c <HAL_GPIO_Init+0x1ec>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x2f8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_Init+0x1e8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_GPIO_Init+0x2fc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_GPIO_Init+0x1e4>
 8002160:	2305      	movs	r3, #5
 8002162:	e00a      	b.n	800217a <HAL_GPIO_Init+0x1fa>
 8002164:	2306      	movs	r3, #6
 8002166:	e008      	b.n	800217a <HAL_GPIO_Init+0x1fa>
 8002168:	2304      	movs	r3, #4
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x1fa>
 800216c:	2303      	movs	r3, #3
 800216e:	e004      	b.n	800217a <HAL_GPIO_Init+0x1fa>
 8002170:	2302      	movs	r3, #2
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0x1fa>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_GPIO_Init+0x1fa>
 8002178:	2300      	movs	r3, #0
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	4093      	lsls	r3, r2
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218a:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_GPIO_Init+0x300>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021bc:	4a30      	ldr	r2, [pc, #192]	; (8002280 <HAL_GPIO_Init+0x300>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x300>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_GPIO_Init+0x300>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_GPIO_Init+0x300>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002210:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_GPIO_Init+0x300>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x300>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_GPIO_Init+0x300>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f ae9d 	bne.w	8001f90 <HAL_GPIO_Init+0x10>
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	48000400 	.word	0x48000400
 8002270:	48000800 	.word	0x48000800
 8002274:	48000c00 	.word	0x48000c00
 8002278:	48001000 	.word	0x48001000
 800227c:	48001400 	.word	0x48001400
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4013      	ands	r3, r2
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43d9      	mvns	r1, r3
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	400b      	ands	r3, r1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	619a      	str	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d141      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d131      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002304:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230a:	4a46      	ldr	r2, [pc, #280]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800231c:	4a41      	ldr	r2, [pc, #260]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002324:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2232      	movs	r2, #50	; 0x32
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a3f      	ldr	r2, [pc, #252]	; (800242c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233a:	e002      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234e:	d102      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d158      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e057      	b.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002368:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236e:	4a2d      	ldr	r2, [pc, #180]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002378:	e04d      	b.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d141      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d131      	bne.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2232      	movs	r2, #50	; 0x32
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a1c      	ldr	r2, [pc, #112]	; (800242c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c6:	e002      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d102      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f2      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d112      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e011      	b.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002404:	e007      	b.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002414:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40007000 	.word	0x40007000
 8002428:	20000000 	.word	0x20000000
 800242c:	431bde83 	.word	0x431bde83

08002430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e306      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b97      	ldr	r3, [pc, #604]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b94      	ldr	r3, [pc, #592]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x3e>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d002      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e2e1      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x74>
 8002496:	4b85      	ldr	r3, [pc, #532]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a84      	ldr	r2, [pc, #528]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7e      	ldr	r2, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7b      	ldr	r2, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b75      	ldr	r3, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a74      	ldr	r2, [pc, #464]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdc6 	bl	8001078 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fdc2 	bl	8001078 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e2a6      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fdb2 	bl	8001078 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fdae 	bl	8001078 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e292      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252a:	4b60      	ldr	r3, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d075      	beq.n	8002632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002546:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002550:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d102      	bne.n	8002566 <HAL_RCC_OscConfig+0x136>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d002      	beq.n	800256c <HAL_RCC_OscConfig+0x13c>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11f      	bne.n	80025ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_OscConfig+0x154>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e265      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b49      	ldr	r3, [pc, #292]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	4946      	ldr	r1, [pc, #280]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fd1f 	bl	8000fe0 <HAL_InitTick>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d043      	beq.n	8002630 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e251      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3c      	ldr	r2, [pc, #240]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd5a 	bl	8001078 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fd56 	bl	8001078 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e23a      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	492d      	ldr	r1, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
 80025fa:	e01a      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fd36 	bl	8001078 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fd32 	bl	8001078 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e216      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1e0>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d041      	beq.n	80026c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01c      	beq.n	8002680 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fd0f 	bl	8001078 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fd0b 	bl	8001078 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1ef      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ef      	beq.n	800265e <HAL_RCC_OscConfig+0x22e>
 800267e:	e020      	b.n	80026c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fcf2 	bl	8001078 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002696:	e00d      	b.n	80026b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fcee 	bl	8001078 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d906      	bls.n	80026b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1d2      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ea      	bne.n	8002698 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a6 	beq.w	800281c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026d4:	4b84      	ldr	r3, [pc, #528]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2b4>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x2b6>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00d      	beq.n	8002706 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4a7e      	ldr	r2, [pc, #504]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002706:	4b79      	ldr	r3, [pc, #484]	; (80028ec <HAL_RCC_OscConfig+0x4bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002712:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x4bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a75      	ldr	r2, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x4bc>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fcab 	bl	8001078 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fca7 	bl	8001078 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e18b      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002738:	4b6c      	ldr	r3, [pc, #432]	; (80028ec <HAL_RCC_OscConfig+0x4bc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_RCC_OscConfig+0x32e>
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800275c:	e024      	b.n	80027a8 <HAL_RCC_OscConfig+0x378>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d110      	bne.n	8002788 <HAL_RCC_OscConfig+0x358>
 8002766:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	4a5a      	ldr	r2, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002786:	e00f      	b.n	80027a8 <HAL_RCC_OscConfig+0x378>
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d016      	beq.n	80027de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fc62 	bl	8001078 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fc5e 	bl	8001078 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e140      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ed      	beq.n	80027b8 <HAL_RCC_OscConfig+0x388>
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fc4b 	bl	8001078 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fc47 	bl	8001078 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e129      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ed      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800280a:	7ffb      	ldrb	r3, [r7, #31]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a34      	ldr	r2, [pc, #208]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fc1a 	bl	8001078 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002848:	f7fe fc16 	bl	8001078 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0fa      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800285c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCC_OscConfig+0x418>
 8002868:	e01b      	b.n	80028a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 800286c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fbfd 	bl	8001078 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002882:	f7fe fbf9 	bl	8001078 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0dd      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 8002896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ef      	bne.n	8002882 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80d1 	beq.w	8002a4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	f000 808b 	beq.w	80029d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d15e      	bne.n	8002980 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_RCC_OscConfig+0x4b8>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fbd3 	bl	8001078 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	e00c      	b.n	80028f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fbcf 	bl	8001078 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d905      	bls.n	80028f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0b3      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ec      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fc:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <HAL_RCC_OscConfig+0x62c>)
 8002902:	4013      	ands	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6a11      	ldr	r1, [r2, #32]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800290c:	3a01      	subs	r2, #1
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002916:	0212      	lsls	r2, r2, #8
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800291e:	0852      	lsrs	r2, r2, #1
 8002920:	3a01      	subs	r2, #1
 8002922:	0552      	lsls	r2, r2, #21
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800292a:	0852      	lsrs	r2, r2, #1
 800292c:	3a01      	subs	r2, #1
 800292e:	0652      	lsls	r2, r2, #25
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002936:	06d2      	lsls	r2, r2, #27
 8002938:	430a      	orrs	r2, r1
 800293a:	4947      	ldr	r1, [pc, #284]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a44      	ldr	r2, [pc, #272]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800294c:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a41      	ldr	r2, [pc, #260]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002956:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fb8e 	bl	8001078 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fb8a 	bl	8001078 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e06e      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x530>
 800297e:	e066      	b.n	8002a4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 800299e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fb66 	bl	8001078 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fb62 	bl	8001078 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e046      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x580>
 80029ce:	e03e      	b.n	8002a4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e039      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d12c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	3b01      	subs	r3, #1
 80029fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d123      	bne.n	8002a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d11b      	bne.n	8002a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d113      	bne.n	8002a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	019f800c 	.word	0x019f800c

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e11e      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b91      	ldr	r3, [pc, #580]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b8e      	ldr	r3, [pc, #568]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 020f 	bic.w	r2, r3, #15
 8002a8e:	498c      	ldr	r1, [pc, #560]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b8a      	ldr	r3, [pc, #552]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e106      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d073      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d129      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abc:	4b81      	ldr	r3, [pc, #516]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0f4      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002acc:	f000 f99e 	bl	8002e0c <RCC_GetSysClockFreqFromPLLSource>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4a7c      	ldr	r2, [pc, #496]	; (8002cc8 <HAL_RCC_ClockConfig+0x268>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d93f      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ada:	4b7a      	ldr	r3, [pc, #488]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d033      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12f      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b02:	4a70      	ldr	r2, [pc, #448]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e024      	b.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0c6      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b28:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0be      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b38:	f000 f8ce 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4a61      	ldr	r2, [pc, #388]	; (8002cc8 <HAL_RCC_ClockConfig+0x268>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d909      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4e:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b5a      	ldr	r3, [pc, #360]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4957      	ldr	r1, [pc, #348]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fa84 	bl	8001078 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe fa80 	bl	8001078 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e095      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a42      	ldr	r2, [pc, #264]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bcc:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4936      	ldr	r1, [pc, #216]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d21d      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 020f 	bic.w	r2, r3, #15
 8002c18:	4929      	ldr	r1, [pc, #164]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fa2a 	bl	8001078 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fa26 	bl	8001078 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e03b      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1ed      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4917      	ldr	r1, [pc, #92]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	490f      	ldr	r1, [pc, #60]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c8a:	f000 f825 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	490c      	ldr	r1, [pc, #48]	; (8002ccc <HAL_RCC_ClockConfig+0x26c>)
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x270>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_ClockConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f996 	bl	8000fe0 <HAL_InitTick>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	04c4b400 	.word	0x04c4b400
 8002ccc:	08006be0 	.word	0x08006be0
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	e047      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	e03e      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d136      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3301      	adds	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2c:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d36:	68d2      	ldr	r2, [r2, #12]
 8002d38:	0a12      	lsrs	r2, r2, #8
 8002d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	e00c      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	0a12      	lsrs	r2, r2, #8
 8002d54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
      break;
 8002d5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0e5b      	lsrs	r3, r3, #25
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e001      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d80:	693b      	ldr	r3, [r7, #16]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200

08002d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08006bf0 	.word	0x08006bf0

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de4:	f7ff ffda 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0adb      	lsrs	r3, r3, #11
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4904      	ldr	r1, [pc, #16]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08006bf0 	.word	0x08006bf0

08002e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d10c      	bne.n	8002e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e30:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e3a:	68d2      	ldr	r2, [r2, #12]
 8002e3c:	0a12      	lsrs	r2, r2, #8
 8002e3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	617b      	str	r3, [r7, #20]
    break;
 8002e48:	e00c      	b.n	8002e64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	0a12      	lsrs	r2, r2, #8
 8002e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
    break;
 8002e62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0e5b      	lsrs	r3, r3, #25
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e7e:	687b      	ldr	r3, [r7, #4]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	00f42400 	.word	0x00f42400

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8098 	beq.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10d      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a39      	ldr	r2, [pc, #228]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eee:	f7fe f8c3 	bl	8001078 <HAL_GetTick>
 8002ef2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef4:	e009      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fe f8bf 	bl	8001078 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d902      	bls.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	74fb      	strb	r3, [r7, #19]
        break;
 8002f08:	e005      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ef      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d159      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01e      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d019      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe f87f 	bl	8001078 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe f87b 	bl	8001078 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d902      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	74fb      	strb	r3, [r7, #19]
            break;
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ec      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	74bb      	strb	r3, [r7, #18]
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd4:	7c7b      	ldrb	r3, [r7, #17]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4ba6      	ldr	r3, [pc, #664]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	4aa5      	ldr	r2, [pc, #660]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff2:	4ba0      	ldr	r3, [pc, #640]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	499c      	ldr	r1, [pc, #624]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003014:	4b97      	ldr	r3, [pc, #604]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 020c 	bic.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4994      	ldr	r1, [pc, #592]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003036:	4b8f      	ldr	r3, [pc, #572]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	498b      	ldr	r1, [pc, #556]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003058:	4b86      	ldr	r3, [pc, #536]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	4983      	ldr	r1, [pc, #524]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800307a:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	497a      	ldr	r1, [pc, #488]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800309c:	4b75      	ldr	r3, [pc, #468]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	4972      	ldr	r1, [pc, #456]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030be:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4969      	ldr	r1, [pc, #420]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4961      	ldr	r1, [pc, #388]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	4958      	ldr	r1, [pc, #352]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	4950      	ldr	r1, [pc, #320]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003144:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a4a      	ldr	r2, [pc, #296]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800314e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800315c:	4b45      	ldr	r3, [pc, #276]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	4942      	ldr	r1, [pc, #264]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b2:	d105      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b4:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	4926      	ldr	r1, [pc, #152]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ea:	d105      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ec:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a20      	ldr	r2, [pc, #128]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	4918      	ldr	r1, [pc, #96]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003222:	d105      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003268:	7cbb      	ldrb	r3, [r7, #18]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e049      	b.n	800331e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fd3e 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f000 fb42 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04a      	b.n	80033d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d018      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d013      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_TIM_Base_Start_IT+0xc4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x6c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d115      	bne.n	80033c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d015      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0xaa>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d011      	beq.n	80033d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	e008      	b.n	80033d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e000      	b.n	80033d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40013400 	.word	0x40013400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	00010007 	.word	0x00010007

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0202 	mvn.w	r2, #2
 8003428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa60 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa52 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa63 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa36 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa28 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa39 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0208 	mvn.w	r2, #8
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa0c 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9fe 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa0f 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0210 	mvn.w	r2, #16
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2208      	movs	r2, #8
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9e2 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9d4 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9e5 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0201 	mvn.w	r2, #1
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd f8ba 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb82 	bl	8003cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ba:	d10e      	bne.n	80035da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d107      	bne.n	80035da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fb75 	bl	8003cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d10e      	bne.n	8003606 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d107      	bne.n	8003606 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f993 	bl	800392c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d10e      	bne.n	8003632 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b20      	cmp	r3, #32
 8003620:	d107      	bne.n	8003632 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0220 	mvn.w	r2, #32
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb35 	bl	8003c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003640:	d10f      	bne.n	8003662 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb3b 	bl	8003cd8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003670:	d10f      	bne.n	8003692 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fb2d 	bl	8003cec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d10f      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80036ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb1f 	bl	8003d00 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d0:	d10f      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fb11 	bl	8003d14 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIM_ConfigClockSource+0x1c>
 8003714:	2302      	movs	r3, #2
 8003716:	e0de      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x1da>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f000 80a9 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 8003758:	4a61      	ldr	r2, [pc, #388]	; (80038e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f200 80ae 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 8003760:	4a60      	ldr	r2, [pc, #384]	; (80038e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f000 80a1 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 8003768:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f200 80a6 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 8003770:	4a5d      	ldr	r2, [pc, #372]	; (80038e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f000 8099 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 8003778:	4a5b      	ldr	r2, [pc, #364]	; (80038e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f200 809e 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 8003780:	4a5a      	ldr	r2, [pc, #360]	; (80038ec <HAL_TIM_ConfigClockSource+0x1f0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f000 8091 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_TIM_ConfigClockSource+0x1f0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f200 8096 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 8003790:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003794:	f000 8089 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 8003798:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800379c:	f200 808e 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a4:	d03e      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x128>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	f200 8087 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_TIM_ConfigClockSource+0x1c6>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d87f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d01a      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xfa>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d87b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037c4:	2b60      	cmp	r3, #96	; 0x60
 80037c6:	d050      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x16e>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d877      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d03c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x14e>
 80037d0:	2b50      	cmp	r3, #80	; 0x50
 80037d2:	d873      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d058      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x18e>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d86f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037dc:	2b30      	cmp	r3, #48	; 0x30
 80037de:	d064      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 80037e0:	2b30      	cmp	r3, #48	; 0x30
 80037e2:	d86b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d060      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d867      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d05a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1ae>
 80037f4:	e062      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f000 f9a7 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e04f      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 f990 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e03c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 f902 	bl	8003a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2150      	movs	r1, #80	; 0x50
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f95b 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 8003868:	e02c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 f921 	bl	8003abe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2160      	movs	r1, #96	; 0x60
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f94b 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 8003888:	e01c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 f8e2 	bl	8003a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f93b 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 80038a8:	e00c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 f932 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100070 	.word	0x00100070
 80038e4:	00100040 	.word	0x00100040
 80038e8:	00100030 	.word	0x00100030
 80038ec:	00100020 	.word	0x00100020

080038f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <TIM_Base_SetConfig+0x104>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <TIM_Base_SetConfig+0x108>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <TIM_Base_SetConfig+0x10c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x38>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <TIM_Base_SetConfig+0x110>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <TIM_Base_SetConfig+0x104>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01b      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d017      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <TIM_Base_SetConfig+0x108>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <TIM_Base_SetConfig+0x10c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <TIM_Base_SetConfig+0x110>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <TIM_Base_SetConfig+0x104>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00f      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <TIM_Base_SetConfig+0x110>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0xe8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d103      	bne.n	8003a30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 030a 	bic.w	r3, r3, #10
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0210 	bic.w	r2, r3, #16
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e065      	b.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2c      	ldr	r2, [pc, #176]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d108      	bne.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d018      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d013      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10c      	bne.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40013400 	.word	0x40013400
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40014000 	.word	0x40014000

08003c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fd f80b 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2224      	movs	r2, #36	; 0x24
 8003d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fd14 	bl	8004798 <UART_SetConfig>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e022      	b.n	8003dc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 ffd4 	bl	8004d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f001 f85b 	bl	8004e74 <UART_CheckIdleState>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b091      	sub	sp, #68	; 0x44
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	f040 808c 	bne.w	8003efa <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_UART_Transmit_IT+0x26>
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e084      	b.n	8003efc <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_UART_Transmit_IT+0x38>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e07d      	b.n	8003efc <HAL_UART_Transmit_IT+0x134>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88fa      	ldrh	r2, [r7, #6]
 8003e12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2221      	movs	r2, #33	; 0x21
 8003e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3c:	d12e      	bne.n	8003e9c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d107      	bne.n	8003e58 <HAL_UART_Transmit_IT+0x90>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <HAL_UART_Transmit_IT+0x140>)
 8003e54:	675a      	str	r2, [r3, #116]	; 0x74
 8003e56:	e002      	b.n	8003e5e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <HAL_UART_Transmit_IT+0x144>)
 8003e5c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3308      	adds	r3, #8
 8003e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e86:	637a      	str	r2, [r7, #52]	; 0x34
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <HAL_UART_Transmit_IT+0x9e>
 8003e9a:	e02c      	b.n	8003ef6 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d107      	bne.n	8003eb6 <HAL_UART_Transmit_IT+0xee>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <HAL_UART_Transmit_IT+0x148>)
 8003eb2:	675a      	str	r2, [r3, #116]	; 0x74
 8003eb4:	e002      	b.n	8003ebc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <HAL_UART_Transmit_IT+0x14c>)
 8003eba:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	623b      	str	r3, [r7, #32]
 8003ee4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	69f9      	ldr	r1, [r7, #28]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e6      	bne.n	8003ec4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3744      	adds	r7, #68	; 0x44
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	08005643 	.word	0x08005643
 8003f0c:	08005563 	.word	0x08005563
 8003f10:	080054a1 	.word	0x080054a1
 8003f14:	080053e9 	.word	0x080053e9

08003f18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d142      	bne.n	8003fb6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Receive_IT+0x24>
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e03b      	b.n	8003fb8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Receive_IT+0x36>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e034      	b.n	8003fb8 <HAL_UART_Receive_IT+0xa0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <HAL_UART_Receive_IT+0xa8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01f      	beq.n	8003fa6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d018      	beq.n	8003fa6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e6      	bne.n	8003f74 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f001 f875 	bl	800509c <UART_Start_Receive_IT>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	e000      	b.n	8003fb8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40008000 	.word	0x40008000

08003fc4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b09a      	sub	sp, #104	; 0x68
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fea:	657b      	str	r3, [r7, #84]	; 0x54
 8003fec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e6      	bne.n	8003fcc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	663b      	str	r3, [r7, #96]	; 0x60
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004022:	643a      	str	r2, [r7, #64]	; 0x40
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d118      	bne.n	8004070 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	61fb      	str	r3, [r7, #28]
   return(result);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f023 0310 	bic.w	r3, r3, #16
 8004052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d137      	bne.n	80040ee <HAL_UART_AbortReceive+0x12a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3308      	adds	r3, #8
 8004084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	60bb      	str	r3, [r7, #8]
   return(result);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004094:	65bb      	str	r3, [r7, #88]	; 0x58
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409e:	61ba      	str	r2, [r7, #24]
 80040a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6979      	ldr	r1, [r7, #20]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	613b      	str	r3, [r7, #16]
   return(result);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e5      	bne.n	800407e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d019      	beq.n	80040ee <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040be:	2200      	movs	r2, #0
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd f913 	bl	80012f2 <HAL_DMA_Abort>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd f9cb 	bl	8001472 <HAL_DMA_GetError>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d105      	bne.n	80040ee <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2210      	movs	r2, #16
 80040e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e017      	b.n	800411e <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	220f      	movs	r2, #15
 80040fc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0208 	orr.w	r2, r2, #8
 800410c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3768      	adds	r7, #104	; 0x68
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b0ba      	sub	sp, #232	; 0xe8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800414e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004152:	f640 030f 	movw	r3, #2063	; 0x80f
 8004156:	4013      	ands	r3, r2
 8004158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800415c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11b      	bne.n	800419c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800417c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 82d6 	beq.w	800473e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
      }
      return;
 800419a:	e2d0      	b.n	800473e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800419c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 811f 	beq.w	80043e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <HAL_UART_IRQHandler+0x2b0>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041b6:	4b89      	ldr	r3, [pc, #548]	; (80043dc <HAL_UART_IRQHandler+0x2b4>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8112 	beq.w	80043e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d011      	beq.n	80041f0 <HAL_UART_IRQHandler+0xc8>
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <HAL_UART_IRQHandler+0xf8>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2202      	movs	r2, #2
 800420e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_UART_IRQHandler+0x128>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2204      	movs	r2, #4
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d017      	beq.n	800428c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004268:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800426c:	4b5a      	ldr	r3, [pc, #360]	; (80043d8 <HAL_UART_IRQHandler+0x2b0>)
 800426e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f043 0208 	orr.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	2b00      	cmp	r3, #0
 8004296:	d012      	beq.n	80042be <HAL_UART_IRQHandler+0x196>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00c      	beq.n	80042be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 823c 	beq.w	8004742 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d013      	beq.n	80042fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800431a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04f      	beq.n	80043c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 ffe4 	bl	80052f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d141      	bne.n	80043ba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3308      	adds	r3, #8
 800433c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800434c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800436e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800437a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1d9      	bne.n	8004336 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d013      	beq.n	80043b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438e:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <HAL_UART_IRQHandler+0x2b8>)
 8004390:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd f804 	bl	80013a4 <HAL_DMA_Abort_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d017      	beq.n	80043d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80043ac:	4610      	mov	r0, r2
 80043ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e00f      	b.n	80043d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9da 	bl	800476c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	e00b      	b.n	80043d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9d6 	bl	800476c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	e007      	b.n	80043d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9d2 	bl	800476c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80043d0:	e1b7      	b.n	8004742 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d2:	bf00      	nop
    return;
 80043d4:	e1b5      	b.n	8004742 <HAL_UART_IRQHandler+0x61a>
 80043d6:	bf00      	nop
 80043d8:	10000001 	.word	0x10000001
 80043dc:	04000120 	.word	0x04000120
 80043e0:	080053bd 	.word	0x080053bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	f040 814a 	bne.w	8004682 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8143 	beq.w	8004682 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 813c 	beq.w	8004682 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2210      	movs	r2, #16
 8004410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	f040 80b5 	bne.w	800458c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800442e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8187 	beq.w	8004746 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800443e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004442:	429a      	cmp	r2, r3
 8004444:	f080 817f 	bcs.w	8004746 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800444e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 8086 	bne.w	8004570 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800447c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800448e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800449a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1da      	bne.n	8004464 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e1      	bne.n	80044ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3308      	adds	r3, #8
 80044f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800450e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800451c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e3      	bne.n	80044ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800453e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004540:	f023 0310 	bic.w	r3, r3, #16
 8004544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004552:	65bb      	str	r3, [r7, #88]	; 0x58
 8004554:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc fec1 	bl	80012f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800457c:	b29b      	uxth	r3, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	b29b      	uxth	r3, r3
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8fb 	bl	8004780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800458a:	e0dc      	b.n	8004746 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004598:	b29b      	uxth	r3, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80ce 	beq.w	800474a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80045ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80c9 	beq.w	800474a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045da:	647b      	str	r3, [r7, #68]	; 0x44
 80045dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e4      	bne.n	80045b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	623b      	str	r3, [r7, #32]
   return(result);
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004616:	633a      	str	r2, [r7, #48]	; 0x30
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e1      	bne.n	80045ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	60fb      	str	r3, [r7, #12]
   return(result);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0310 	bic.w	r3, r3, #16
 8004652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	69b9      	ldr	r1, [r7, #24]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	617b      	str	r3, [r7, #20]
   return(result);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e4      	bne.n	800463e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f880 	bl	8004780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004680:	e063      	b.n	800474a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <HAL_UART_IRQHandler+0x584>
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f001 fcc9 	bl	800603c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046aa:	e051      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80046c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03a      	beq.n	800474e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    }
    return;
 80046e0:	e035      	b.n	800474e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_UART_IRQHandler+0x5da>
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f001 f816 	bl	800572c <UART_EndTransmit_IT>
    return;
 8004700:	e026      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_UART_IRQHandler+0x5fa>
 800470e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004712:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f001 fca2 	bl	8006064 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004720:	e016      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d010      	beq.n	8004750 <HAL_UART_IRQHandler+0x628>
 800472e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004732:	2b00      	cmp	r3, #0
 8004734:	da0c      	bge.n	8004750 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f001 fc8a 	bl	8006050 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800473c:	e008      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
      return;
 800473e:	bf00      	nop
 8004740:	e006      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
    return;
 8004742:	bf00      	nop
 8004744:	e004      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
      return;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
      return;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_UART_IRQHandler+0x628>
    return;
 800474e:	bf00      	nop
  }
}
 8004750:	37e8      	adds	r7, #232	; 0xe8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop

08004758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800479c:	b08c      	sub	sp, #48	; 0x30
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4313      	orrs	r3, r2
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	4bab      	ldr	r3, [pc, #684]	; (8004a74 <UART_SetConfig+0x2dc>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4aa0      	ldr	r2, [pc, #640]	; (8004a78 <UART_SetConfig+0x2e0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004800:	4313      	orrs	r3, r2
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800480e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004818:	430b      	orrs	r3, r1
 800481a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f023 010f 	bic.w	r1, r3, #15
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a91      	ldr	r2, [pc, #580]	; (8004a7c <UART_SetConfig+0x2e4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d125      	bne.n	8004888 <UART_SetConfig+0xf0>
 800483c:	4b90      	ldr	r3, [pc, #576]	; (8004a80 <UART_SetConfig+0x2e8>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b03      	cmp	r3, #3
 8004848:	d81a      	bhi.n	8004880 <UART_SetConfig+0xe8>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0xb8>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004861 	.word	0x08004861
 8004854:	08004871 	.word	0x08004871
 8004858:	08004869 	.word	0x08004869
 800485c:	08004879 	.word	0x08004879
 8004860:	2301      	movs	r3, #1
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e0d6      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004868:	2302      	movs	r3, #2
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e0d2      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004870:	2304      	movs	r3, #4
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e0ce      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004878:	2308      	movs	r3, #8
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487e:	e0ca      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004880:	2310      	movs	r3, #16
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004886:	e0c6      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a7d      	ldr	r2, [pc, #500]	; (8004a84 <UART_SetConfig+0x2ec>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d138      	bne.n	8004904 <UART_SetConfig+0x16c>
 8004892:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <UART_SetConfig+0x2e8>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b0c      	cmp	r3, #12
 800489e:	d82d      	bhi.n	80048fc <UART_SetConfig+0x164>
 80048a0:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x110>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	080048fd 	.word	0x080048fd
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048fd 	.word	0x080048fd
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e098      	b.n	8004a16 <UART_SetConfig+0x27e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e094      	b.n	8004a16 <UART_SetConfig+0x27e>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e090      	b.n	8004a16 <UART_SetConfig+0x27e>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e08c      	b.n	8004a16 <UART_SetConfig+0x27e>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e088      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5f      	ldr	r2, [pc, #380]	; (8004a88 <UART_SetConfig+0x2f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d125      	bne.n	800495a <UART_SetConfig+0x1c2>
 800490e:	4b5c      	ldr	r3, [pc, #368]	; (8004a80 <UART_SetConfig+0x2e8>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d016      	beq.n	800494a <UART_SetConfig+0x1b2>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d818      	bhi.n	8004952 <UART_SetConfig+0x1ba>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d00a      	beq.n	800493a <UART_SetConfig+0x1a2>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d814      	bhi.n	8004952 <UART_SetConfig+0x1ba>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <UART_SetConfig+0x19a>
 800492c:	2b10      	cmp	r3, #16
 800492e:	d008      	beq.n	8004942 <UART_SetConfig+0x1aa>
 8004930:	e00f      	b.n	8004952 <UART_SetConfig+0x1ba>
 8004932:	2300      	movs	r3, #0
 8004934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004938:	e06d      	b.n	8004a16 <UART_SetConfig+0x27e>
 800493a:	2302      	movs	r3, #2
 800493c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004940:	e069      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004942:	2304      	movs	r3, #4
 8004944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004948:	e065      	b.n	8004a16 <UART_SetConfig+0x27e>
 800494a:	2308      	movs	r3, #8
 800494c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004950:	e061      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004952:	2310      	movs	r3, #16
 8004954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004958:	e05d      	b.n	8004a16 <UART_SetConfig+0x27e>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <UART_SetConfig+0x2f4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d125      	bne.n	80049b0 <UART_SetConfig+0x218>
 8004964:	4b46      	ldr	r3, [pc, #280]	; (8004a80 <UART_SetConfig+0x2e8>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800496e:	2bc0      	cmp	r3, #192	; 0xc0
 8004970:	d016      	beq.n	80049a0 <UART_SetConfig+0x208>
 8004972:	2bc0      	cmp	r3, #192	; 0xc0
 8004974:	d818      	bhi.n	80049a8 <UART_SetConfig+0x210>
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d00a      	beq.n	8004990 <UART_SetConfig+0x1f8>
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d814      	bhi.n	80049a8 <UART_SetConfig+0x210>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <UART_SetConfig+0x1f0>
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d008      	beq.n	8004998 <UART_SetConfig+0x200>
 8004986:	e00f      	b.n	80049a8 <UART_SetConfig+0x210>
 8004988:	2300      	movs	r3, #0
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e042      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004990:	2302      	movs	r3, #2
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e03e      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499e:	e03a      	b.n	8004a16 <UART_SetConfig+0x27e>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a6:	e036      	b.n	8004a16 <UART_SetConfig+0x27e>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ae:	e032      	b.n	8004a16 <UART_SetConfig+0x27e>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <UART_SetConfig+0x2e0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d12a      	bne.n	8004a10 <UART_SetConfig+0x278>
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <UART_SetConfig+0x2e8>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c8:	d01a      	beq.n	8004a00 <UART_SetConfig+0x268>
 80049ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ce:	d81b      	bhi.n	8004a08 <UART_SetConfig+0x270>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d00c      	beq.n	80049f0 <UART_SetConfig+0x258>
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049da:	d815      	bhi.n	8004a08 <UART_SetConfig+0x270>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <UART_SetConfig+0x250>
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d008      	beq.n	80049f8 <UART_SetConfig+0x260>
 80049e6:	e00f      	b.n	8004a08 <UART_SetConfig+0x270>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e012      	b.n	8004a16 <UART_SetConfig+0x27e>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f6:	e00e      	b.n	8004a16 <UART_SetConfig+0x27e>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fe:	e00a      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a06:	e006      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	e002      	b.n	8004a16 <UART_SetConfig+0x27e>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <UART_SetConfig+0x2e0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 80a8 	bne.w	8004b72 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d834      	bhi.n	8004a94 <UART_SetConfig+0x2fc>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0x298>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a95 	.word	0x08004a95
 8004a38:	08004a5d 	.word	0x08004a5d
 8004a3c:	08004a95 	.word	0x08004a95
 8004a40:	08004a63 	.word	0x08004a63
 8004a44:	08004a95 	.word	0x08004a95
 8004a48:	08004a95 	.word	0x08004a95
 8004a4c:	08004a95 	.word	0x08004a95
 8004a50:	08004a6b 	.word	0x08004a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7fe f9ae 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a5a:	e021      	b.n	8004aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <UART_SetConfig+0x2f8>)
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a60:	e01e      	b.n	8004aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fe f939 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a68:	e01a      	b.n	8004aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a70:	e016      	b.n	8004aa0 <UART_SetConfig+0x308>
 8004a72:	bf00      	nop
 8004a74:	cfff69f3 	.word	0xcfff69f3
 8004a78:	40008000 	.word	0x40008000
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800
 8004a8c:	40004c00 	.word	0x40004c00
 8004a90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 812a 	beq.w	8004cfc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	4a9e      	ldr	r2, [pc, #632]	; (8004d28 <UART_SetConfig+0x590>)
 8004aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d305      	bcc.n	8004ad8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d903      	bls.n	8004ae0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ade:	e10d      	b.n	8004cfc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	60fa      	str	r2, [r7, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	4a8e      	ldr	r2, [pc, #568]	; (8004d28 <UART_SetConfig+0x590>)
 8004aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2200      	movs	r2, #0
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b02:	f7fb fbe5 	bl	80002d0 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	020b      	lsls	r3, r1, #8
 8004b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b1c:	0202      	lsls	r2, r0, #8
 8004b1e:	6979      	ldr	r1, [r7, #20]
 8004b20:	6849      	ldr	r1, [r1, #4]
 8004b22:	0849      	lsrs	r1, r1, #1
 8004b24:	2000      	movs	r0, #0
 8004b26:	460c      	mov	r4, r1
 8004b28:	4605      	mov	r5, r0
 8004b2a:	eb12 0804 	adds.w	r8, r2, r4
 8004b2e:	eb43 0905 	adc.w	r9, r3, r5
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	469a      	mov	sl, r3
 8004b3a:	4693      	mov	fp, r2
 8004b3c:	4652      	mov	r2, sl
 8004b3e:	465b      	mov	r3, fp
 8004b40:	4640      	mov	r0, r8
 8004b42:	4649      	mov	r1, r9
 8004b44:	f7fb fbc4 	bl	80002d0 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b56:	d308      	bcc.n	8004b6a <UART_SetConfig+0x3d2>
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5e:	d204      	bcs.n	8004b6a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	e0c8      	b.n	8004cfc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b70:	e0c4      	b.n	8004cfc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7a:	d167      	bne.n	8004c4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d828      	bhi.n	8004bd6 <UART_SetConfig+0x43e>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x3f4>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bd7 	.word	0x08004bd7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bd7 	.word	0x08004bd7
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bd7 	.word	0x08004bd7
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fe f900 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb6:	e014      	b.n	8004be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7fe f912 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bbe:	e010      	b.n	8004be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc0:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <UART_SetConfig+0x594>)
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc4:	e00d      	b.n	8004be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7fe f887 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bcc:	e009      	b.n	8004be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bd4:	e005      	b.n	8004be2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8089 	beq.w	8004cfc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	4a4e      	ldr	r2, [pc, #312]	; (8004d28 <UART_SetConfig+0x590>)
 8004bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfc:	005a      	lsls	r2, r3, #1
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	441a      	add	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	d916      	bls.n	8004c44 <UART_SetConfig+0x4ac>
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1c:	d212      	bcs.n	8004c44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f023 030f 	bic.w	r3, r3, #15
 8004c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	8bfb      	ldrh	r3, [r7, #30]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	8bfa      	ldrh	r2, [r7, #30]
 8004c40:	60da      	str	r2, [r3, #12]
 8004c42:	e05b      	b.n	8004cfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c4a:	e057      	b.n	8004cfc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d828      	bhi.n	8004ca6 <UART_SetConfig+0x50e>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x4c4>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	08004ca7 	.word	0x08004ca7
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004ca7 	.word	0x08004ca7
 8004c74:	08004ca7 	.word	0x08004ca7
 8004c78:	08004ca7 	.word	0x08004ca7
 8004c7c:	08004c9f 	.word	0x08004c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fe f898 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c86:	e014      	b.n	8004cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fe f8aa 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c8e:	e010      	b.n	8004cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <UART_SetConfig+0x594>)
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c94:	e00d      	b.n	8004cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c96:	f7fe f81f 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c9c:	e009      	b.n	8004cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ca4:	e005      	b.n	8004cb2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d021      	beq.n	8004cfc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <UART_SetConfig+0x590>)
 8004cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	441a      	add	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d909      	bls.n	8004cf6 <UART_SetConfig+0x55e>
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d205      	bcs.n	8004cf6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	e002      	b.n	8004cfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3730      	adds	r7, #48	; 0x30
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	08006c08 	.word	0x08006c08
 8004d2c:	00f42400 	.word	0x00f42400

08004d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2e:	d10a      	bne.n	8004e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e84:	f7fc f8f8 	bl	8001078 <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d10e      	bne.n	8004eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f82f 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e025      	b.n	8004f02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d10e      	bne.n	8004ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f819 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e00f      	b.n	8004f02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b09c      	sub	sp, #112	; 0x70
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1a:	e0a9      	b.n	8005070 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	f000 80a5 	beq.w	8005070 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fc f8a7 	bl	8001078 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d140      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f50:	667b      	str	r3, [r7, #100]	; 0x64
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e6      	bne.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	663b      	str	r3, [r7, #96]	; 0x60
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e069      	b.n	8005092 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d051      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d149      	bne.n	8005070 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
 8005006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e6      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	613b      	str	r3, [r7, #16]
   return(result);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005038:	623a      	str	r2, [r7, #32]
 800503a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	61bb      	str	r3, [r7, #24]
   return(result);
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e010      	b.n	8005092 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	429a      	cmp	r2, r3
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	429a      	cmp	r2, r3
 800508c:	f43f af46 	beq.w	8004f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3770      	adds	r7, #112	; 0x70
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800509c:	b480      	push	{r7}
 800509e:	b0a3      	sub	sp, #140	; 0x8c
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d10e      	bne.n	80050ee <UART_Start_Receive_IT+0x52>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d105      	bne.n	80050e4 <UART_Start_Receive_IT+0x48>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050e2:	e02d      	b.n	8005140 <UART_Start_Receive_IT+0xa4>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	22ff      	movs	r2, #255	; 0xff
 80050e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050ec:	e028      	b.n	8005140 <UART_Start_Receive_IT+0xa4>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10d      	bne.n	8005112 <UART_Start_Receive_IT+0x76>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d104      	bne.n	8005108 <UART_Start_Receive_IT+0x6c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005106:	e01b      	b.n	8005140 <UART_Start_Receive_IT+0xa4>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	227f      	movs	r2, #127	; 0x7f
 800510c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005110:	e016      	b.n	8005140 <UART_Start_Receive_IT+0xa4>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511a:	d10d      	bne.n	8005138 <UART_Start_Receive_IT+0x9c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <UART_Start_Receive_IT+0x92>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	227f      	movs	r2, #127	; 0x7f
 8005128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800512c:	e008      	b.n	8005140 <UART_Start_Receive_IT+0xa4>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	223f      	movs	r2, #63	; 0x3f
 8005132:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005136:	e003      	b.n	8005140 <UART_Start_Receive_IT+0xa4>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2222      	movs	r2, #34	; 0x22
 800514c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005174:	673a      	str	r2, [r7, #112]	; 0x70
 8005176:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800517a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e3      	bne.n	8005150 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005190:	d153      	bne.n	800523a <UART_Start_Receive_IT+0x19e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	429a      	cmp	r2, r3
 800519c:	d34d      	bcc.n	800523a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a6:	d107      	bne.n	80051b8 <UART_Start_Receive_IT+0x11c>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a4b      	ldr	r2, [pc, #300]	; (80052e0 <UART_Start_Receive_IT+0x244>)
 80051b4:	671a      	str	r2, [r3, #112]	; 0x70
 80051b6:	e002      	b.n	80051be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a4a      	ldr	r2, [pc, #296]	; (80052e4 <UART_Start_Receive_IT+0x248>)
 80051bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01a      	beq.n	8005204 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e4      	bne.n	80051ce <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005224:	64ba      	str	r2, [r7, #72]	; 0x48
 8005226:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800522a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_Start_Receive_IT+0x168>
 8005238:	e04a      	b.n	80052d0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d107      	bne.n	8005254 <UART_Start_Receive_IT+0x1b8>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <UART_Start_Receive_IT+0x24c>)
 8005250:	671a      	str	r2, [r3, #112]	; 0x70
 8005252:	e002      	b.n	800525a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <UART_Start_Receive_IT+0x250>)
 8005258:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800527e:	677b      	str	r3, [r7, #116]	; 0x74
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800528e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_Start_Receive_IT+0x1ce>
 800529c:	e018      	b.n	80052d0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	613b      	str	r3, [r7, #16]
   return(result);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f043 0320 	orr.w	r3, r3, #32
 80052b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	6a3a      	ldr	r2, [r7, #32]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	378c      	adds	r7, #140	; 0x8c
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	08005d3d 	.word	0x08005d3d
 80052e4:	08005a45 	.word	0x08005a45
 80052e8:	080058e3 	.word	0x080058e3
 80052ec:	08005783 	.word	0x08005783

080052f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b095      	sub	sp, #84	; 0x54
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800530c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
 8005318:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800531c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e6      	bne.n	80052f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3308      	adds	r3, #8
 8005330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	61fb      	str	r3, [r7, #28]
   return(result);
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	64bb      	str	r3, [r7, #72]	; 0x48
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800534e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d118      	bne.n	800539c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	60bb      	str	r3, [r7, #8]
   return(result);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f023 0310 	bic.w	r3, r3, #16
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6979      	ldr	r1, [r7, #20]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	613b      	str	r3, [r7, #16]
   return(result);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80053b0:	bf00      	nop
 80053b2:	3754      	adds	r7, #84	; 0x54
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff f9c6 	bl	800476c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b08f      	sub	sp, #60	; 0x3c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	2b21      	cmp	r3, #33	; 0x21
 80053f8:	d14c      	bne.n	8005494 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d132      	bne.n	800546c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	61fb      	str	r3, [r7, #28]
   return(result);
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005426:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	60bb      	str	r3, [r7, #8]
   return(result);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e6      	bne.n	8005438 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800546a:	e013      	b.n	8005494 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005494:	bf00      	nop
 8005496:	373c      	adds	r7, #60	; 0x3c
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b091      	sub	sp, #68	; 0x44
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ae:	2b21      	cmp	r3, #33	; 0x21
 80054b0:	d151      	bne.n	8005556 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d132      	bne.n	8005524 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	623b      	str	r3, [r7, #32]
   return(result);
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	633b      	str	r3, [r7, #48]	; 0x30
 80054de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	69b9      	ldr	r1, [r7, #24]
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	617b      	str	r3, [r7, #20]
   return(result);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e6      	bne.n	80054f0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005522:	e018      	b.n	8005556 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800552a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005538:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005556:	bf00      	nop
 8005558:	3744      	adds	r7, #68	; 0x44
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005562:	b480      	push	{r7}
 8005564:	b091      	sub	sp, #68	; 0x44
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005570:	2b21      	cmp	r3, #33	; 0x21
 8005572:	d160      	bne.n	8005636 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800557a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800557c:	e057      	b.n	800562e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d133      	bne.n	80055f2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	623b      	str	r3, [r7, #32]
   return(result);
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055aa:	633a      	str	r2, [r7, #48]	; 0x30
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80055f0:	e021      	b.n	8005636 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005628:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800562a:	3b01      	subs	r3, #1
 800562c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800562e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1a4      	bne.n	800557e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005634:	e7ff      	b.n	8005636 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005636:	bf00      	nop
 8005638:	3744      	adds	r7, #68	; 0x44
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005642:	b480      	push	{r7}
 8005644:	b091      	sub	sp, #68	; 0x44
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005650:	2b21      	cmp	r3, #33	; 0x21
 8005652:	d165      	bne.n	8005720 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800565a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800565c:	e05c      	b.n	8005718 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d133      	bne.n	80056d2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	61fb      	str	r3, [r7, #28]
   return(result);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6979      	ldr	r1, [r7, #20]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e6      	bne.n	800569e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80056d0:	e026      	b.n	8005720 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d018      	beq.n	8005712 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	1c9a      	adds	r2, r3, #2
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005712:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005714:	3b01      	subs	r3, #1
 8005716:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005718:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800571a:	2b00      	cmp	r3, #0
 800571c:	d19f      	bne.n	800565e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800571e:	e7ff      	b.n	8005720 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005720:	bf00      	nop
 8005722:	3744      	adds	r7, #68	; 0x44
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	60bb      	str	r3, [r7, #8]
   return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6979      	ldr	r1, [r7, #20]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fe ffef 	bl	8004758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577a:	bf00      	nop
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b096      	sub	sp, #88	; 0x58
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005790:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579a:	2b22      	cmp	r3, #34	; 0x22
 800579c:	f040 8095 	bne.w	80058ca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057ae:	b2d9      	uxtb	r1, r3
 80057b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	400a      	ands	r2, r1
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d178      	bne.n	80058da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800580c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e6      	bne.n	80057e8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800583a:	633a      	str	r2, [r7, #48]	; 0x30
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d12e      	bne.n	80058c2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60fb      	str	r3, [r7, #12]
   return(result);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	617b      	str	r3, [r7, #20]
   return(result);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e6      	bne.n	800586a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d103      	bne.n	80058b2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2210      	movs	r2, #16
 80058b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fe ff60 	bl	8004780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058c0:	e00b      	b.n	80058da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fa ff2a 	bl	800071c <HAL_UART_RxCpltCallback>
}
 80058c8:	e007      	b.n	80058da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0208 	orr.w	r2, r2, #8
 80058d8:	619a      	str	r2, [r3, #24]
}
 80058da:	bf00      	nop
 80058dc:	3758      	adds	r7, #88	; 0x58
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b096      	sub	sp, #88	; 0x58
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	2b22      	cmp	r3, #34	; 0x22
 80058fc:	f040 8095 	bne.w	8005a2a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005910:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005914:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005918:	4013      	ands	r3, r2
 800591a:	b29a      	uxth	r2, r3
 800591c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d178      	bne.n	8005a3a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800595c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
 8005968:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800596c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	61fb      	str	r3, [r7, #28]
   return(result);
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	64bb      	str	r3, [r7, #72]	; 0x48
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e5      	bne.n	800597a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d12e      	bne.n	8005a22 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	647b      	str	r3, [r7, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d103      	bne.n	8005a12 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe feb0 	bl	8004780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a20:	e00b      	b.n	8005a3a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fa fe7a 	bl	800071c <HAL_UART_RxCpltCallback>
}
 8005a28:	e007      	b.n	8005a3a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	619a      	str	r2, [r3, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	3758      	adds	r7, #88	; 0x58
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b0a6      	sub	sp, #152	; 0x98
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a52:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	2b22      	cmp	r3, #34	; 0x22
 8005a7c:	f040 814f 	bne.w	8005d1e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a8a:	e0f6      	b.n	8005c7a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a96:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a9a:	b2d9      	uxtb	r1, r3
 8005a9c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d053      	beq.n	8005b86 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d011      	beq.n	8005b0e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2201      	movs	r2, #1
 8005afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b34:	f043 0204 	orr.w	r2, r3, #4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d011      	beq.n	8005b6e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b64:	f043 0202 	orr.w	r2, r3, #2
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fe fdf7 	bl	800476c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d173      	bne.n	8005c7a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bb6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005bba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e4      	bne.n	8005b92 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005bec:	657a      	str	r2, [r7, #84]	; 0x54
 8005bee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e3      	bne.n	8005bc8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d12e      	bne.n	8005c74 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	f023 0310 	bic.w	r3, r3, #16
 8005c30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e6      	bne.n	8005c1c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d103      	bne.n	8005c64 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2210      	movs	r2, #16
 8005c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fe fd87 	bl	8004780 <HAL_UARTEx_RxEventCallback>
 8005c72:	e002      	b.n	8005c7a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fa fd51 	bl	800071c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d006      	beq.n	8005c90 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f47f aefe 	bne.w	8005a8c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c9a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d045      	beq.n	8005d2e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ca8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d23e      	bcs.n	8005d2e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005ce8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f043 0320 	orr.w	r3, r3, #32
 8005cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	613b      	str	r3, [r7, #16]
   return(result);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d1c:	e007      	b.n	8005d2e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0208 	orr.w	r2, r2, #8
 8005d2c:	619a      	str	r2, [r3, #24]
}
 8005d2e:	bf00      	nop
 8005d30:	3798      	adds	r7, #152	; 0x98
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	08005783 	.word	0x08005783

08005d3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b0a8      	sub	sp, #160	; 0xa0
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d4a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	2b22      	cmp	r3, #34	; 0x22
 8005d74:	f040 8153 	bne.w	800601e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d7e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d82:	e0fa      	b.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d96:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005d9a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d9e:	4013      	ands	r3, r2
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005da6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	1c9a      	adds	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d053      	beq.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d011      	beq.n	8005e0a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2201      	movs	r2, #1
 8005df8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e00:	f043 0201 	orr.w	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2202      	movs	r2, #2
 8005e28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e30:	f043 0204 	orr.w	r2, r3, #4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2204      	movs	r2, #4
 8005e58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e60:	f043 0202 	orr.w	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d006      	beq.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fe fc79 	bl	800476c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d175      	bne.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eb2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005eb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e4      	bne.n	8005e8e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eec:	65ba      	str	r2, [r7, #88]	; 0x58
 8005eee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e1      	bne.n	8005ec4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d12e      	bne.n	8005f74 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	f023 0310 	bic.w	r3, r3, #16
 8005f30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e6      	bne.n	8005f1c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d103      	bne.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fe fc07 	bl	8004780 <HAL_UARTEx_RxEventCallback>
 8005f72:	e002      	b.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fa fbd1 	bl	800071c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d006      	beq.n	8005f90 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f47f aefa 	bne.w	8005d84 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d045      	beq.n	800602e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005fa8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d23e      	bcs.n	800602e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	677b      	str	r3, [r7, #116]	; 0x74
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005fd0:	633a      	str	r2, [r7, #48]	; 0x30
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a14      	ldr	r2, [pc, #80]	; (8006038 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005fe8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f043 0320 	orr.w	r3, r3, #32
 8005ffe:	673b      	str	r3, [r7, #112]	; 0x70
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	617b      	str	r3, [r7, #20]
   return(result);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800601c:	e007      	b.n	800602e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0208 	orr.w	r2, r2, #8
 800602c:	619a      	str	r2, [r3, #24]
}
 800602e:	bf00      	nop
 8006030:	37a0      	adds	r7, #160	; 0xa0
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	080058e3 	.word	0x080058e3

0800603c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UARTEx_DisableFifoMode+0x16>
 800608a:	2302      	movs	r3, #2
 800608c:	e027      	b.n	80060de <HAL_UARTEx_DisableFifoMode+0x66>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2224      	movs	r2, #36	; 0x24
 800609a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060fe:	2302      	movs	r3, #2
 8006100:	e02d      	b.n	800615e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	; 0x24
 800610e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f850 	bl	80061e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800617a:	2302      	movs	r3, #2
 800617c:	e02d      	b.n	80061da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	; 0x24
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f812 	bl	80061e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006204:	e031      	b.n	800626a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006206:	2308      	movs	r3, #8
 8006208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800620a:	2308      	movs	r3, #8
 800620c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0e5b      	lsrs	r3, r3, #25
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	0f5b      	lsrs	r3, r3, #29
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	7b3a      	ldrb	r2, [r7, #12]
 8006232:	4911      	ldr	r1, [pc, #68]	; (8006278 <UARTEx_SetNbDataToProcess+0x94>)
 8006234:	5c8a      	ldrb	r2, [r1, r2]
 8006236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800623a:	7b3a      	ldrb	r2, [r7, #12]
 800623c:	490f      	ldr	r1, [pc, #60]	; (800627c <UARTEx_SetNbDataToProcess+0x98>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006240:	fb93 f3f2 	sdiv	r3, r3, r2
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	7b7a      	ldrb	r2, [r7, #13]
 8006250:	4909      	ldr	r1, [pc, #36]	; (8006278 <UARTEx_SetNbDataToProcess+0x94>)
 8006252:	5c8a      	ldrb	r2, [r1, r2]
 8006254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006258:	7b7a      	ldrb	r2, [r7, #13]
 800625a:	4908      	ldr	r1, [pc, #32]	; (800627c <UARTEx_SetNbDataToProcess+0x98>)
 800625c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800625e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	08006c20 	.word	0x08006c20
 800627c:	08006c28 	.word	0x08006c28

08006280 <__errno>:
 8006280:	4b01      	ldr	r3, [pc, #4]	; (8006288 <__errno+0x8>)
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	2000000c 	.word	0x2000000c

0800628c <__libc_init_array>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4d0d      	ldr	r5, [pc, #52]	; (80062c4 <__libc_init_array+0x38>)
 8006290:	4c0d      	ldr	r4, [pc, #52]	; (80062c8 <__libc_init_array+0x3c>)
 8006292:	1b64      	subs	r4, r4, r5
 8006294:	10a4      	asrs	r4, r4, #2
 8006296:	2600      	movs	r6, #0
 8006298:	42a6      	cmp	r6, r4
 800629a:	d109      	bne.n	80062b0 <__libc_init_array+0x24>
 800629c:	4d0b      	ldr	r5, [pc, #44]	; (80062cc <__libc_init_array+0x40>)
 800629e:	4c0c      	ldr	r4, [pc, #48]	; (80062d0 <__libc_init_array+0x44>)
 80062a0:	f000 fc8e 	bl	8006bc0 <_init>
 80062a4:	1b64      	subs	r4, r4, r5
 80062a6:	10a4      	asrs	r4, r4, #2
 80062a8:	2600      	movs	r6, #0
 80062aa:	42a6      	cmp	r6, r4
 80062ac:	d105      	bne.n	80062ba <__libc_init_array+0x2e>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b4:	4798      	blx	r3
 80062b6:	3601      	adds	r6, #1
 80062b8:	e7ee      	b.n	8006298 <__libc_init_array+0xc>
 80062ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80062be:	4798      	blx	r3
 80062c0:	3601      	adds	r6, #1
 80062c2:	e7f2      	b.n	80062aa <__libc_init_array+0x1e>
 80062c4:	08006c6c 	.word	0x08006c6c
 80062c8:	08006c6c 	.word	0x08006c6c
 80062cc:	08006c6c 	.word	0x08006c6c
 80062d0:	08006c70 	.word	0x08006c70

080062d4 <memcpy>:
 80062d4:	440a      	add	r2, r1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xc>
 80062de:	4770      	bx	lr
 80062e0:	b510      	push	{r4, lr}
 80062e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ea:	4291      	cmp	r1, r2
 80062ec:	d1f9      	bne.n	80062e2 <memcpy+0xe>
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <memset>:
 80062f0:	4402      	add	r2, r0
 80062f2:	4603      	mov	r3, r0
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d100      	bne.n	80062fa <memset+0xa>
 80062f8:	4770      	bx	lr
 80062fa:	f803 1b01 	strb.w	r1, [r3], #1
 80062fe:	e7f9      	b.n	80062f4 <memset+0x4>

08006300 <siprintf>:
 8006300:	b40e      	push	{r1, r2, r3}
 8006302:	b500      	push	{lr}
 8006304:	b09c      	sub	sp, #112	; 0x70
 8006306:	ab1d      	add	r3, sp, #116	; 0x74
 8006308:	9002      	str	r0, [sp, #8]
 800630a:	9006      	str	r0, [sp, #24]
 800630c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006310:	4809      	ldr	r0, [pc, #36]	; (8006338 <siprintf+0x38>)
 8006312:	9107      	str	r1, [sp, #28]
 8006314:	9104      	str	r1, [sp, #16]
 8006316:	4909      	ldr	r1, [pc, #36]	; (800633c <siprintf+0x3c>)
 8006318:	f853 2b04 	ldr.w	r2, [r3], #4
 800631c:	9105      	str	r1, [sp, #20]
 800631e:	6800      	ldr	r0, [r0, #0]
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	a902      	add	r1, sp, #8
 8006324:	f000 f868 	bl	80063f8 <_svfiprintf_r>
 8006328:	9b02      	ldr	r3, [sp, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	b01c      	add	sp, #112	; 0x70
 8006330:	f85d eb04 	ldr.w	lr, [sp], #4
 8006334:	b003      	add	sp, #12
 8006336:	4770      	bx	lr
 8006338:	2000000c 	.word	0x2000000c
 800633c:	ffff0208 	.word	0xffff0208

08006340 <__ssputs_r>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	688e      	ldr	r6, [r1, #8]
 8006346:	429e      	cmp	r6, r3
 8006348:	4682      	mov	sl, r0
 800634a:	460c      	mov	r4, r1
 800634c:	4690      	mov	r8, r2
 800634e:	461f      	mov	r7, r3
 8006350:	d838      	bhi.n	80063c4 <__ssputs_r+0x84>
 8006352:	898a      	ldrh	r2, [r1, #12]
 8006354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006358:	d032      	beq.n	80063c0 <__ssputs_r+0x80>
 800635a:	6825      	ldr	r5, [r4, #0]
 800635c:	6909      	ldr	r1, [r1, #16]
 800635e:	eba5 0901 	sub.w	r9, r5, r1
 8006362:	6965      	ldr	r5, [r4, #20]
 8006364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800636c:	3301      	adds	r3, #1
 800636e:	444b      	add	r3, r9
 8006370:	106d      	asrs	r5, r5, #1
 8006372:	429d      	cmp	r5, r3
 8006374:	bf38      	it	cc
 8006376:	461d      	movcc	r5, r3
 8006378:	0553      	lsls	r3, r2, #21
 800637a:	d531      	bpl.n	80063e0 <__ssputs_r+0xa0>
 800637c:	4629      	mov	r1, r5
 800637e:	f000 fb55 	bl	8006a2c <_malloc_r>
 8006382:	4606      	mov	r6, r0
 8006384:	b950      	cbnz	r0, 800639c <__ssputs_r+0x5c>
 8006386:	230c      	movs	r3, #12
 8006388:	f8ca 3000 	str.w	r3, [sl]
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	6921      	ldr	r1, [r4, #16]
 800639e:	464a      	mov	r2, r9
 80063a0:	f7ff ff98 	bl	80062d4 <memcpy>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	6126      	str	r6, [r4, #16]
 80063b2:	6165      	str	r5, [r4, #20]
 80063b4:	444e      	add	r6, r9
 80063b6:	eba5 0509 	sub.w	r5, r5, r9
 80063ba:	6026      	str	r6, [r4, #0]
 80063bc:	60a5      	str	r5, [r4, #8]
 80063be:	463e      	mov	r6, r7
 80063c0:	42be      	cmp	r6, r7
 80063c2:	d900      	bls.n	80063c6 <__ssputs_r+0x86>
 80063c4:	463e      	mov	r6, r7
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	4632      	mov	r2, r6
 80063ca:	4641      	mov	r1, r8
 80063cc:	f000 faa8 	bl	8006920 <memmove>
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	1b9b      	subs	r3, r3, r6
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	4433      	add	r3, r6
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	2000      	movs	r0, #0
 80063de:	e7db      	b.n	8006398 <__ssputs_r+0x58>
 80063e0:	462a      	mov	r2, r5
 80063e2:	f000 fb97 	bl	8006b14 <_realloc_r>
 80063e6:	4606      	mov	r6, r0
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d1e1      	bne.n	80063b0 <__ssputs_r+0x70>
 80063ec:	6921      	ldr	r1, [r4, #16]
 80063ee:	4650      	mov	r0, sl
 80063f0:	f000 fab0 	bl	8006954 <_free_r>
 80063f4:	e7c7      	b.n	8006386 <__ssputs_r+0x46>
	...

080063f8 <_svfiprintf_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	4698      	mov	r8, r3
 80063fe:	898b      	ldrh	r3, [r1, #12]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	b09d      	sub	sp, #116	; 0x74
 8006404:	4607      	mov	r7, r0
 8006406:	460d      	mov	r5, r1
 8006408:	4614      	mov	r4, r2
 800640a:	d50e      	bpl.n	800642a <_svfiprintf_r+0x32>
 800640c:	690b      	ldr	r3, [r1, #16]
 800640e:	b963      	cbnz	r3, 800642a <_svfiprintf_r+0x32>
 8006410:	2140      	movs	r1, #64	; 0x40
 8006412:	f000 fb0b 	bl	8006a2c <_malloc_r>
 8006416:	6028      	str	r0, [r5, #0]
 8006418:	6128      	str	r0, [r5, #16]
 800641a:	b920      	cbnz	r0, 8006426 <_svfiprintf_r+0x2e>
 800641c:	230c      	movs	r3, #12
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e0d1      	b.n	80065ca <_svfiprintf_r+0x1d2>
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	616b      	str	r3, [r5, #20]
 800642a:	2300      	movs	r3, #0
 800642c:	9309      	str	r3, [sp, #36]	; 0x24
 800642e:	2320      	movs	r3, #32
 8006430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006434:	f8cd 800c 	str.w	r8, [sp, #12]
 8006438:	2330      	movs	r3, #48	; 0x30
 800643a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065e4 <_svfiprintf_r+0x1ec>
 800643e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006442:	f04f 0901 	mov.w	r9, #1
 8006446:	4623      	mov	r3, r4
 8006448:	469a      	mov	sl, r3
 800644a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800644e:	b10a      	cbz	r2, 8006454 <_svfiprintf_r+0x5c>
 8006450:	2a25      	cmp	r2, #37	; 0x25
 8006452:	d1f9      	bne.n	8006448 <_svfiprintf_r+0x50>
 8006454:	ebba 0b04 	subs.w	fp, sl, r4
 8006458:	d00b      	beq.n	8006472 <_svfiprintf_r+0x7a>
 800645a:	465b      	mov	r3, fp
 800645c:	4622      	mov	r2, r4
 800645e:	4629      	mov	r1, r5
 8006460:	4638      	mov	r0, r7
 8006462:	f7ff ff6d 	bl	8006340 <__ssputs_r>
 8006466:	3001      	adds	r0, #1
 8006468:	f000 80aa 	beq.w	80065c0 <_svfiprintf_r+0x1c8>
 800646c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800646e:	445a      	add	r2, fp
 8006470:	9209      	str	r2, [sp, #36]	; 0x24
 8006472:	f89a 3000 	ldrb.w	r3, [sl]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80a2 	beq.w	80065c0 <_svfiprintf_r+0x1c8>
 800647c:	2300      	movs	r3, #0
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006486:	f10a 0a01 	add.w	sl, sl, #1
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	9307      	str	r3, [sp, #28]
 800648e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006492:	931a      	str	r3, [sp, #104]	; 0x68
 8006494:	4654      	mov	r4, sl
 8006496:	2205      	movs	r2, #5
 8006498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800649c:	4851      	ldr	r0, [pc, #324]	; (80065e4 <_svfiprintf_r+0x1ec>)
 800649e:	f7f9 fec7 	bl	8000230 <memchr>
 80064a2:	9a04      	ldr	r2, [sp, #16]
 80064a4:	b9d8      	cbnz	r0, 80064de <_svfiprintf_r+0xe6>
 80064a6:	06d0      	lsls	r0, r2, #27
 80064a8:	bf44      	itt	mi
 80064aa:	2320      	movmi	r3, #32
 80064ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064b0:	0711      	lsls	r1, r2, #28
 80064b2:	bf44      	itt	mi
 80064b4:	232b      	movmi	r3, #43	; 0x2b
 80064b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ba:	f89a 3000 	ldrb.w	r3, [sl]
 80064be:	2b2a      	cmp	r3, #42	; 0x2a
 80064c0:	d015      	beq.n	80064ee <_svfiprintf_r+0xf6>
 80064c2:	9a07      	ldr	r2, [sp, #28]
 80064c4:	4654      	mov	r4, sl
 80064c6:	2000      	movs	r0, #0
 80064c8:	f04f 0c0a 	mov.w	ip, #10
 80064cc:	4621      	mov	r1, r4
 80064ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064d2:	3b30      	subs	r3, #48	; 0x30
 80064d4:	2b09      	cmp	r3, #9
 80064d6:	d94e      	bls.n	8006576 <_svfiprintf_r+0x17e>
 80064d8:	b1b0      	cbz	r0, 8006508 <_svfiprintf_r+0x110>
 80064da:	9207      	str	r2, [sp, #28]
 80064dc:	e014      	b.n	8006508 <_svfiprintf_r+0x110>
 80064de:	eba0 0308 	sub.w	r3, r0, r8
 80064e2:	fa09 f303 	lsl.w	r3, r9, r3
 80064e6:	4313      	orrs	r3, r2
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	46a2      	mov	sl, r4
 80064ec:	e7d2      	b.n	8006494 <_svfiprintf_r+0x9c>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	1d19      	adds	r1, r3, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	9103      	str	r1, [sp, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfbb      	ittet	lt
 80064fa:	425b      	neglt	r3, r3
 80064fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006500:	9307      	strge	r3, [sp, #28]
 8006502:	9307      	strlt	r3, [sp, #28]
 8006504:	bfb8      	it	lt
 8006506:	9204      	strlt	r2, [sp, #16]
 8006508:	7823      	ldrb	r3, [r4, #0]
 800650a:	2b2e      	cmp	r3, #46	; 0x2e
 800650c:	d10c      	bne.n	8006528 <_svfiprintf_r+0x130>
 800650e:	7863      	ldrb	r3, [r4, #1]
 8006510:	2b2a      	cmp	r3, #42	; 0x2a
 8006512:	d135      	bne.n	8006580 <_svfiprintf_r+0x188>
 8006514:	9b03      	ldr	r3, [sp, #12]
 8006516:	1d1a      	adds	r2, r3, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	9203      	str	r2, [sp, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfb8      	it	lt
 8006520:	f04f 33ff 	movlt.w	r3, #4294967295
 8006524:	3402      	adds	r4, #2
 8006526:	9305      	str	r3, [sp, #20]
 8006528:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065f4 <_svfiprintf_r+0x1fc>
 800652c:	7821      	ldrb	r1, [r4, #0]
 800652e:	2203      	movs	r2, #3
 8006530:	4650      	mov	r0, sl
 8006532:	f7f9 fe7d 	bl	8000230 <memchr>
 8006536:	b140      	cbz	r0, 800654a <_svfiprintf_r+0x152>
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	eba0 000a 	sub.w	r0, r0, sl
 800653e:	fa03 f000 	lsl.w	r0, r3, r0
 8006542:	9b04      	ldr	r3, [sp, #16]
 8006544:	4303      	orrs	r3, r0
 8006546:	3401      	adds	r4, #1
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654e:	4826      	ldr	r0, [pc, #152]	; (80065e8 <_svfiprintf_r+0x1f0>)
 8006550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006554:	2206      	movs	r2, #6
 8006556:	f7f9 fe6b 	bl	8000230 <memchr>
 800655a:	2800      	cmp	r0, #0
 800655c:	d038      	beq.n	80065d0 <_svfiprintf_r+0x1d8>
 800655e:	4b23      	ldr	r3, [pc, #140]	; (80065ec <_svfiprintf_r+0x1f4>)
 8006560:	bb1b      	cbnz	r3, 80065aa <_svfiprintf_r+0x1b2>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	3307      	adds	r3, #7
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	3308      	adds	r3, #8
 800656c:	9303      	str	r3, [sp, #12]
 800656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006570:	4433      	add	r3, r6
 8006572:	9309      	str	r3, [sp, #36]	; 0x24
 8006574:	e767      	b.n	8006446 <_svfiprintf_r+0x4e>
 8006576:	fb0c 3202 	mla	r2, ip, r2, r3
 800657a:	460c      	mov	r4, r1
 800657c:	2001      	movs	r0, #1
 800657e:	e7a5      	b.n	80064cc <_svfiprintf_r+0xd4>
 8006580:	2300      	movs	r3, #0
 8006582:	3401      	adds	r4, #1
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	4619      	mov	r1, r3
 8006588:	f04f 0c0a 	mov.w	ip, #10
 800658c:	4620      	mov	r0, r4
 800658e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006592:	3a30      	subs	r2, #48	; 0x30
 8006594:	2a09      	cmp	r2, #9
 8006596:	d903      	bls.n	80065a0 <_svfiprintf_r+0x1a8>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0c5      	beq.n	8006528 <_svfiprintf_r+0x130>
 800659c:	9105      	str	r1, [sp, #20]
 800659e:	e7c3      	b.n	8006528 <_svfiprintf_r+0x130>
 80065a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065a4:	4604      	mov	r4, r0
 80065a6:	2301      	movs	r3, #1
 80065a8:	e7f0      	b.n	800658c <_svfiprintf_r+0x194>
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	462a      	mov	r2, r5
 80065b0:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <_svfiprintf_r+0x1f8>)
 80065b2:	a904      	add	r1, sp, #16
 80065b4:	4638      	mov	r0, r7
 80065b6:	f3af 8000 	nop.w
 80065ba:	1c42      	adds	r2, r0, #1
 80065bc:	4606      	mov	r6, r0
 80065be:	d1d6      	bne.n	800656e <_svfiprintf_r+0x176>
 80065c0:	89ab      	ldrh	r3, [r5, #12]
 80065c2:	065b      	lsls	r3, r3, #25
 80065c4:	f53f af2c 	bmi.w	8006420 <_svfiprintf_r+0x28>
 80065c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ca:	b01d      	add	sp, #116	; 0x74
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	ab03      	add	r3, sp, #12
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	462a      	mov	r2, r5
 80065d6:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <_svfiprintf_r+0x1f8>)
 80065d8:	a904      	add	r1, sp, #16
 80065da:	4638      	mov	r0, r7
 80065dc:	f000 f87a 	bl	80066d4 <_printf_i>
 80065e0:	e7eb      	b.n	80065ba <_svfiprintf_r+0x1c2>
 80065e2:	bf00      	nop
 80065e4:	08006c30 	.word	0x08006c30
 80065e8:	08006c3a 	.word	0x08006c3a
 80065ec:	00000000 	.word	0x00000000
 80065f0:	08006341 	.word	0x08006341
 80065f4:	08006c36 	.word	0x08006c36

080065f8 <_printf_common>:
 80065f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	4616      	mov	r6, r2
 80065fe:	4699      	mov	r9, r3
 8006600:	688a      	ldr	r2, [r1, #8]
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006608:	4293      	cmp	r3, r2
 800660a:	bfb8      	it	lt
 800660c:	4613      	movlt	r3, r2
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006614:	4607      	mov	r7, r0
 8006616:	460c      	mov	r4, r1
 8006618:	b10a      	cbz	r2, 800661e <_printf_common+0x26>
 800661a:	3301      	adds	r3, #1
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	0699      	lsls	r1, r3, #26
 8006622:	bf42      	ittt	mi
 8006624:	6833      	ldrmi	r3, [r6, #0]
 8006626:	3302      	addmi	r3, #2
 8006628:	6033      	strmi	r3, [r6, #0]
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	f015 0506 	ands.w	r5, r5, #6
 8006630:	d106      	bne.n	8006640 <_printf_common+0x48>
 8006632:	f104 0a19 	add.w	sl, r4, #25
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	6832      	ldr	r2, [r6, #0]
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	42ab      	cmp	r3, r5
 800663e:	dc26      	bgt.n	800668e <_printf_common+0x96>
 8006640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006644:	1e13      	subs	r3, r2, #0
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	bf18      	it	ne
 800664a:	2301      	movne	r3, #1
 800664c:	0692      	lsls	r2, r2, #26
 800664e:	d42b      	bmi.n	80066a8 <_printf_common+0xb0>
 8006650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006654:	4649      	mov	r1, r9
 8006656:	4638      	mov	r0, r7
 8006658:	47c0      	blx	r8
 800665a:	3001      	adds	r0, #1
 800665c:	d01e      	beq.n	800669c <_printf_common+0xa4>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	68e5      	ldr	r5, [r4, #12]
 8006662:	6832      	ldr	r2, [r6, #0]
 8006664:	f003 0306 	and.w	r3, r3, #6
 8006668:	2b04      	cmp	r3, #4
 800666a:	bf08      	it	eq
 800666c:	1aad      	subeq	r5, r5, r2
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	6922      	ldr	r2, [r4, #16]
 8006672:	bf0c      	ite	eq
 8006674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006678:	2500      	movne	r5, #0
 800667a:	4293      	cmp	r3, r2
 800667c:	bfc4      	itt	gt
 800667e:	1a9b      	subgt	r3, r3, r2
 8006680:	18ed      	addgt	r5, r5, r3
 8006682:	2600      	movs	r6, #0
 8006684:	341a      	adds	r4, #26
 8006686:	42b5      	cmp	r5, r6
 8006688:	d11a      	bne.n	80066c0 <_printf_common+0xc8>
 800668a:	2000      	movs	r0, #0
 800668c:	e008      	b.n	80066a0 <_printf_common+0xa8>
 800668e:	2301      	movs	r3, #1
 8006690:	4652      	mov	r2, sl
 8006692:	4649      	mov	r1, r9
 8006694:	4638      	mov	r0, r7
 8006696:	47c0      	blx	r8
 8006698:	3001      	adds	r0, #1
 800669a:	d103      	bne.n	80066a4 <_printf_common+0xac>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a4:	3501      	adds	r5, #1
 80066a6:	e7c6      	b.n	8006636 <_printf_common+0x3e>
 80066a8:	18e1      	adds	r1, r4, r3
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	2030      	movs	r0, #48	; 0x30
 80066ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066b2:	4422      	add	r2, r4
 80066b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066bc:	3302      	adds	r3, #2
 80066be:	e7c7      	b.n	8006650 <_printf_common+0x58>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4622      	mov	r2, r4
 80066c4:	4649      	mov	r1, r9
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c0      	blx	r8
 80066ca:	3001      	adds	r0, #1
 80066cc:	d0e6      	beq.n	800669c <_printf_common+0xa4>
 80066ce:	3601      	adds	r6, #1
 80066d0:	e7d9      	b.n	8006686 <_printf_common+0x8e>
	...

080066d4 <_printf_i>:
 80066d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	7e0f      	ldrb	r7, [r1, #24]
 80066da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066dc:	2f78      	cmp	r7, #120	; 0x78
 80066de:	4691      	mov	r9, r2
 80066e0:	4680      	mov	r8, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	469a      	mov	sl, r3
 80066e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ea:	d807      	bhi.n	80066fc <_printf_i+0x28>
 80066ec:	2f62      	cmp	r7, #98	; 0x62
 80066ee:	d80a      	bhi.n	8006706 <_printf_i+0x32>
 80066f0:	2f00      	cmp	r7, #0
 80066f2:	f000 80d8 	beq.w	80068a6 <_printf_i+0x1d2>
 80066f6:	2f58      	cmp	r7, #88	; 0x58
 80066f8:	f000 80a3 	beq.w	8006842 <_printf_i+0x16e>
 80066fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006704:	e03a      	b.n	800677c <_printf_i+0xa8>
 8006706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800670a:	2b15      	cmp	r3, #21
 800670c:	d8f6      	bhi.n	80066fc <_printf_i+0x28>
 800670e:	a101      	add	r1, pc, #4	; (adr r1, 8006714 <_printf_i+0x40>)
 8006710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006714:	0800676d 	.word	0x0800676d
 8006718:	08006781 	.word	0x08006781
 800671c:	080066fd 	.word	0x080066fd
 8006720:	080066fd 	.word	0x080066fd
 8006724:	080066fd 	.word	0x080066fd
 8006728:	080066fd 	.word	0x080066fd
 800672c:	08006781 	.word	0x08006781
 8006730:	080066fd 	.word	0x080066fd
 8006734:	080066fd 	.word	0x080066fd
 8006738:	080066fd 	.word	0x080066fd
 800673c:	080066fd 	.word	0x080066fd
 8006740:	0800688d 	.word	0x0800688d
 8006744:	080067b1 	.word	0x080067b1
 8006748:	0800686f 	.word	0x0800686f
 800674c:	080066fd 	.word	0x080066fd
 8006750:	080066fd 	.word	0x080066fd
 8006754:	080068af 	.word	0x080068af
 8006758:	080066fd 	.word	0x080066fd
 800675c:	080067b1 	.word	0x080067b1
 8006760:	080066fd 	.word	0x080066fd
 8006764:	080066fd 	.word	0x080066fd
 8006768:	08006877 	.word	0x08006877
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	602a      	str	r2, [r5, #0]
 8006774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800677c:	2301      	movs	r3, #1
 800677e:	e0a3      	b.n	80068c8 <_printf_i+0x1f4>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	6829      	ldr	r1, [r5, #0]
 8006784:	0606      	lsls	r6, r0, #24
 8006786:	f101 0304 	add.w	r3, r1, #4
 800678a:	d50a      	bpl.n	80067a2 <_printf_i+0xce>
 800678c:	680e      	ldr	r6, [r1, #0]
 800678e:	602b      	str	r3, [r5, #0]
 8006790:	2e00      	cmp	r6, #0
 8006792:	da03      	bge.n	800679c <_printf_i+0xc8>
 8006794:	232d      	movs	r3, #45	; 0x2d
 8006796:	4276      	negs	r6, r6
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679c:	485e      	ldr	r0, [pc, #376]	; (8006918 <_printf_i+0x244>)
 800679e:	230a      	movs	r3, #10
 80067a0:	e019      	b.n	80067d6 <_printf_i+0x102>
 80067a2:	680e      	ldr	r6, [r1, #0]
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067aa:	bf18      	it	ne
 80067ac:	b236      	sxthne	r6, r6
 80067ae:	e7ef      	b.n	8006790 <_printf_i+0xbc>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	1d19      	adds	r1, r3, #4
 80067b6:	6029      	str	r1, [r5, #0]
 80067b8:	0601      	lsls	r1, r0, #24
 80067ba:	d501      	bpl.n	80067c0 <_printf_i+0xec>
 80067bc:	681e      	ldr	r6, [r3, #0]
 80067be:	e002      	b.n	80067c6 <_printf_i+0xf2>
 80067c0:	0646      	lsls	r6, r0, #25
 80067c2:	d5fb      	bpl.n	80067bc <_printf_i+0xe8>
 80067c4:	881e      	ldrh	r6, [r3, #0]
 80067c6:	4854      	ldr	r0, [pc, #336]	; (8006918 <_printf_i+0x244>)
 80067c8:	2f6f      	cmp	r7, #111	; 0x6f
 80067ca:	bf0c      	ite	eq
 80067cc:	2308      	moveq	r3, #8
 80067ce:	230a      	movne	r3, #10
 80067d0:	2100      	movs	r1, #0
 80067d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067d6:	6865      	ldr	r5, [r4, #4]
 80067d8:	60a5      	str	r5, [r4, #8]
 80067da:	2d00      	cmp	r5, #0
 80067dc:	bfa2      	ittt	ge
 80067de:	6821      	ldrge	r1, [r4, #0]
 80067e0:	f021 0104 	bicge.w	r1, r1, #4
 80067e4:	6021      	strge	r1, [r4, #0]
 80067e6:	b90e      	cbnz	r6, 80067ec <_printf_i+0x118>
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	d04d      	beq.n	8006888 <_printf_i+0x1b4>
 80067ec:	4615      	mov	r5, r2
 80067ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80067f2:	fb03 6711 	mls	r7, r3, r1, r6
 80067f6:	5dc7      	ldrb	r7, [r0, r7]
 80067f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067fc:	4637      	mov	r7, r6
 80067fe:	42bb      	cmp	r3, r7
 8006800:	460e      	mov	r6, r1
 8006802:	d9f4      	bls.n	80067ee <_printf_i+0x11a>
 8006804:	2b08      	cmp	r3, #8
 8006806:	d10b      	bne.n	8006820 <_printf_i+0x14c>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	07de      	lsls	r6, r3, #31
 800680c:	d508      	bpl.n	8006820 <_printf_i+0x14c>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	6861      	ldr	r1, [r4, #4]
 8006812:	4299      	cmp	r1, r3
 8006814:	bfde      	ittt	le
 8006816:	2330      	movle	r3, #48	; 0x30
 8006818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800681c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006820:	1b52      	subs	r2, r2, r5
 8006822:	6122      	str	r2, [r4, #16]
 8006824:	f8cd a000 	str.w	sl, [sp]
 8006828:	464b      	mov	r3, r9
 800682a:	aa03      	add	r2, sp, #12
 800682c:	4621      	mov	r1, r4
 800682e:	4640      	mov	r0, r8
 8006830:	f7ff fee2 	bl	80065f8 <_printf_common>
 8006834:	3001      	adds	r0, #1
 8006836:	d14c      	bne.n	80068d2 <_printf_i+0x1fe>
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	b004      	add	sp, #16
 800683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006842:	4835      	ldr	r0, [pc, #212]	; (8006918 <_printf_i+0x244>)
 8006844:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006848:	6829      	ldr	r1, [r5, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006850:	6029      	str	r1, [r5, #0]
 8006852:	061d      	lsls	r5, r3, #24
 8006854:	d514      	bpl.n	8006880 <_printf_i+0x1ac>
 8006856:	07df      	lsls	r7, r3, #31
 8006858:	bf44      	itt	mi
 800685a:	f043 0320 	orrmi.w	r3, r3, #32
 800685e:	6023      	strmi	r3, [r4, #0]
 8006860:	b91e      	cbnz	r6, 800686a <_printf_i+0x196>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f023 0320 	bic.w	r3, r3, #32
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	2310      	movs	r3, #16
 800686c:	e7b0      	b.n	80067d0 <_printf_i+0xfc>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	f043 0320 	orr.w	r3, r3, #32
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	2378      	movs	r3, #120	; 0x78
 8006878:	4828      	ldr	r0, [pc, #160]	; (800691c <_printf_i+0x248>)
 800687a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800687e:	e7e3      	b.n	8006848 <_printf_i+0x174>
 8006880:	0659      	lsls	r1, r3, #25
 8006882:	bf48      	it	mi
 8006884:	b2b6      	uxthmi	r6, r6
 8006886:	e7e6      	b.n	8006856 <_printf_i+0x182>
 8006888:	4615      	mov	r5, r2
 800688a:	e7bb      	b.n	8006804 <_printf_i+0x130>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	6826      	ldr	r6, [r4, #0]
 8006890:	6961      	ldr	r1, [r4, #20]
 8006892:	1d18      	adds	r0, r3, #4
 8006894:	6028      	str	r0, [r5, #0]
 8006896:	0635      	lsls	r5, r6, #24
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	d501      	bpl.n	80068a0 <_printf_i+0x1cc>
 800689c:	6019      	str	r1, [r3, #0]
 800689e:	e002      	b.n	80068a6 <_printf_i+0x1d2>
 80068a0:	0670      	lsls	r0, r6, #25
 80068a2:	d5fb      	bpl.n	800689c <_printf_i+0x1c8>
 80068a4:	8019      	strh	r1, [r3, #0]
 80068a6:	2300      	movs	r3, #0
 80068a8:	6123      	str	r3, [r4, #16]
 80068aa:	4615      	mov	r5, r2
 80068ac:	e7ba      	b.n	8006824 <_printf_i+0x150>
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	1d1a      	adds	r2, r3, #4
 80068b2:	602a      	str	r2, [r5, #0]
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	2100      	movs	r1, #0
 80068ba:	4628      	mov	r0, r5
 80068bc:	f7f9 fcb8 	bl	8000230 <memchr>
 80068c0:	b108      	cbz	r0, 80068c6 <_printf_i+0x1f2>
 80068c2:	1b40      	subs	r0, r0, r5
 80068c4:	6060      	str	r0, [r4, #4]
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	2300      	movs	r3, #0
 80068cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d0:	e7a8      	b.n	8006824 <_printf_i+0x150>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	462a      	mov	r2, r5
 80068d6:	4649      	mov	r1, r9
 80068d8:	4640      	mov	r0, r8
 80068da:	47d0      	blx	sl
 80068dc:	3001      	adds	r0, #1
 80068de:	d0ab      	beq.n	8006838 <_printf_i+0x164>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	079b      	lsls	r3, r3, #30
 80068e4:	d413      	bmi.n	800690e <_printf_i+0x23a>
 80068e6:	68e0      	ldr	r0, [r4, #12]
 80068e8:	9b03      	ldr	r3, [sp, #12]
 80068ea:	4298      	cmp	r0, r3
 80068ec:	bfb8      	it	lt
 80068ee:	4618      	movlt	r0, r3
 80068f0:	e7a4      	b.n	800683c <_printf_i+0x168>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4632      	mov	r2, r6
 80068f6:	4649      	mov	r1, r9
 80068f8:	4640      	mov	r0, r8
 80068fa:	47d0      	blx	sl
 80068fc:	3001      	adds	r0, #1
 80068fe:	d09b      	beq.n	8006838 <_printf_i+0x164>
 8006900:	3501      	adds	r5, #1
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	9903      	ldr	r1, [sp, #12]
 8006906:	1a5b      	subs	r3, r3, r1
 8006908:	42ab      	cmp	r3, r5
 800690a:	dcf2      	bgt.n	80068f2 <_printf_i+0x21e>
 800690c:	e7eb      	b.n	80068e6 <_printf_i+0x212>
 800690e:	2500      	movs	r5, #0
 8006910:	f104 0619 	add.w	r6, r4, #25
 8006914:	e7f5      	b.n	8006902 <_printf_i+0x22e>
 8006916:	bf00      	nop
 8006918:	08006c41 	.word	0x08006c41
 800691c:	08006c52 	.word	0x08006c52

08006920 <memmove>:
 8006920:	4288      	cmp	r0, r1
 8006922:	b510      	push	{r4, lr}
 8006924:	eb01 0402 	add.w	r4, r1, r2
 8006928:	d902      	bls.n	8006930 <memmove+0x10>
 800692a:	4284      	cmp	r4, r0
 800692c:	4623      	mov	r3, r4
 800692e:	d807      	bhi.n	8006940 <memmove+0x20>
 8006930:	1e43      	subs	r3, r0, #1
 8006932:	42a1      	cmp	r1, r4
 8006934:	d008      	beq.n	8006948 <memmove+0x28>
 8006936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800693e:	e7f8      	b.n	8006932 <memmove+0x12>
 8006940:	4402      	add	r2, r0
 8006942:	4601      	mov	r1, r0
 8006944:	428a      	cmp	r2, r1
 8006946:	d100      	bne.n	800694a <memmove+0x2a>
 8006948:	bd10      	pop	{r4, pc}
 800694a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800694e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006952:	e7f7      	b.n	8006944 <memmove+0x24>

08006954 <_free_r>:
 8006954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006956:	2900      	cmp	r1, #0
 8006958:	d044      	beq.n	80069e4 <_free_r+0x90>
 800695a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695e:	9001      	str	r0, [sp, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f1a1 0404 	sub.w	r4, r1, #4
 8006966:	bfb8      	it	lt
 8006968:	18e4      	addlt	r4, r4, r3
 800696a:	f000 f913 	bl	8006b94 <__malloc_lock>
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <_free_r+0x94>)
 8006970:	9801      	ldr	r0, [sp, #4]
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	b933      	cbnz	r3, 8006984 <_free_r+0x30>
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	6014      	str	r4, [r2, #0]
 800697a:	b003      	add	sp, #12
 800697c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006980:	f000 b90e 	b.w	8006ba0 <__malloc_unlock>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d908      	bls.n	800699a <_free_r+0x46>
 8006988:	6825      	ldr	r5, [r4, #0]
 800698a:	1961      	adds	r1, r4, r5
 800698c:	428b      	cmp	r3, r1
 800698e:	bf01      	itttt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	1949      	addeq	r1, r1, r5
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	e7ed      	b.n	8006976 <_free_r+0x22>
 800699a:	461a      	mov	r2, r3
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b10b      	cbz	r3, 80069a4 <_free_r+0x50>
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d9fa      	bls.n	800699a <_free_r+0x46>
 80069a4:	6811      	ldr	r1, [r2, #0]
 80069a6:	1855      	adds	r5, r2, r1
 80069a8:	42a5      	cmp	r5, r4
 80069aa:	d10b      	bne.n	80069c4 <_free_r+0x70>
 80069ac:	6824      	ldr	r4, [r4, #0]
 80069ae:	4421      	add	r1, r4
 80069b0:	1854      	adds	r4, r2, r1
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	d1e0      	bne.n	800697a <_free_r+0x26>
 80069b8:	681c      	ldr	r4, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	6053      	str	r3, [r2, #4]
 80069be:	4421      	add	r1, r4
 80069c0:	6011      	str	r1, [r2, #0]
 80069c2:	e7da      	b.n	800697a <_free_r+0x26>
 80069c4:	d902      	bls.n	80069cc <_free_r+0x78>
 80069c6:	230c      	movs	r3, #12
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	e7d6      	b.n	800697a <_free_r+0x26>
 80069cc:	6825      	ldr	r5, [r4, #0]
 80069ce:	1961      	adds	r1, r4, r5
 80069d0:	428b      	cmp	r3, r1
 80069d2:	bf04      	itt	eq
 80069d4:	6819      	ldreq	r1, [r3, #0]
 80069d6:	685b      	ldreq	r3, [r3, #4]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	bf04      	itt	eq
 80069dc:	1949      	addeq	r1, r1, r5
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	6054      	str	r4, [r2, #4]
 80069e2:	e7ca      	b.n	800697a <_free_r+0x26>
 80069e4:	b003      	add	sp, #12
 80069e6:	bd30      	pop	{r4, r5, pc}
 80069e8:	200002e8 	.word	0x200002e8

080069ec <sbrk_aligned>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4e0e      	ldr	r6, [pc, #56]	; (8006a28 <sbrk_aligned+0x3c>)
 80069f0:	460c      	mov	r4, r1
 80069f2:	6831      	ldr	r1, [r6, #0]
 80069f4:	4605      	mov	r5, r0
 80069f6:	b911      	cbnz	r1, 80069fe <sbrk_aligned+0x12>
 80069f8:	f000 f8bc 	bl	8006b74 <_sbrk_r>
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f8b7 	bl	8006b74 <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d00a      	beq.n	8006a20 <sbrk_aligned+0x34>
 8006a0a:	1cc4      	adds	r4, r0, #3
 8006a0c:	f024 0403 	bic.w	r4, r4, #3
 8006a10:	42a0      	cmp	r0, r4
 8006a12:	d007      	beq.n	8006a24 <sbrk_aligned+0x38>
 8006a14:	1a21      	subs	r1, r4, r0
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 f8ac 	bl	8006b74 <_sbrk_r>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d101      	bne.n	8006a24 <sbrk_aligned+0x38>
 8006a20:	f04f 34ff 	mov.w	r4, #4294967295
 8006a24:	4620      	mov	r0, r4
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	200002ec 	.word	0x200002ec

08006a2c <_malloc_r>:
 8006a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a30:	1ccd      	adds	r5, r1, #3
 8006a32:	f025 0503 	bic.w	r5, r5, #3
 8006a36:	3508      	adds	r5, #8
 8006a38:	2d0c      	cmp	r5, #12
 8006a3a:	bf38      	it	cc
 8006a3c:	250c      	movcc	r5, #12
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	4607      	mov	r7, r0
 8006a42:	db01      	blt.n	8006a48 <_malloc_r+0x1c>
 8006a44:	42a9      	cmp	r1, r5
 8006a46:	d905      	bls.n	8006a54 <_malloc_r+0x28>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	4630      	mov	r0, r6
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a54:	4e2e      	ldr	r6, [pc, #184]	; (8006b10 <_malloc_r+0xe4>)
 8006a56:	f000 f89d 	bl	8006b94 <__malloc_lock>
 8006a5a:	6833      	ldr	r3, [r6, #0]
 8006a5c:	461c      	mov	r4, r3
 8006a5e:	bb34      	cbnz	r4, 8006aae <_malloc_r+0x82>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4638      	mov	r0, r7
 8006a64:	f7ff ffc2 	bl	80069ec <sbrk_aligned>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	d14d      	bne.n	8006b0a <_malloc_r+0xde>
 8006a6e:	6834      	ldr	r4, [r6, #0]
 8006a70:	4626      	mov	r6, r4
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	d140      	bne.n	8006af8 <_malloc_r+0xcc>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	eb04 0803 	add.w	r8, r4, r3
 8006a80:	f000 f878 	bl	8006b74 <_sbrk_r>
 8006a84:	4580      	cmp	r8, r0
 8006a86:	d13a      	bne.n	8006afe <_malloc_r+0xd2>
 8006a88:	6821      	ldr	r1, [r4, #0]
 8006a8a:	3503      	adds	r5, #3
 8006a8c:	1a6d      	subs	r5, r5, r1
 8006a8e:	f025 0503 	bic.w	r5, r5, #3
 8006a92:	3508      	adds	r5, #8
 8006a94:	2d0c      	cmp	r5, #12
 8006a96:	bf38      	it	cc
 8006a98:	250c      	movcc	r5, #12
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff ffa5 	bl	80069ec <sbrk_aligned>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d02b      	beq.n	8006afe <_malloc_r+0xd2>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	442b      	add	r3, r5
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	e00e      	b.n	8006acc <_malloc_r+0xa0>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	1b52      	subs	r2, r2, r5
 8006ab2:	d41e      	bmi.n	8006af2 <_malloc_r+0xc6>
 8006ab4:	2a0b      	cmp	r2, #11
 8006ab6:	d916      	bls.n	8006ae6 <_malloc_r+0xba>
 8006ab8:	1961      	adds	r1, r4, r5
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	bf18      	it	ne
 8006ac0:	6059      	strne	r1, [r3, #4]
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	bf08      	it	eq
 8006ac6:	6031      	streq	r1, [r6, #0]
 8006ac8:	5162      	str	r2, [r4, r5]
 8006aca:	604b      	str	r3, [r1, #4]
 8006acc:	4638      	mov	r0, r7
 8006ace:	f104 060b 	add.w	r6, r4, #11
 8006ad2:	f000 f865 	bl	8006ba0 <__malloc_unlock>
 8006ad6:	f026 0607 	bic.w	r6, r6, #7
 8006ada:	1d23      	adds	r3, r4, #4
 8006adc:	1af2      	subs	r2, r6, r3
 8006ade:	d0b6      	beq.n	8006a4e <_malloc_r+0x22>
 8006ae0:	1b9b      	subs	r3, r3, r6
 8006ae2:	50a3      	str	r3, [r4, r2]
 8006ae4:	e7b3      	b.n	8006a4e <_malloc_r+0x22>
 8006ae6:	6862      	ldr	r2, [r4, #4]
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	bf0c      	ite	eq
 8006aec:	6032      	streq	r2, [r6, #0]
 8006aee:	605a      	strne	r2, [r3, #4]
 8006af0:	e7ec      	b.n	8006acc <_malloc_r+0xa0>
 8006af2:	4623      	mov	r3, r4
 8006af4:	6864      	ldr	r4, [r4, #4]
 8006af6:	e7b2      	b.n	8006a5e <_malloc_r+0x32>
 8006af8:	4634      	mov	r4, r6
 8006afa:	6876      	ldr	r6, [r6, #4]
 8006afc:	e7b9      	b.n	8006a72 <_malloc_r+0x46>
 8006afe:	230c      	movs	r3, #12
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4638      	mov	r0, r7
 8006b04:	f000 f84c 	bl	8006ba0 <__malloc_unlock>
 8006b08:	e7a1      	b.n	8006a4e <_malloc_r+0x22>
 8006b0a:	6025      	str	r5, [r4, #0]
 8006b0c:	e7de      	b.n	8006acc <_malloc_r+0xa0>
 8006b0e:	bf00      	nop
 8006b10:	200002e8 	.word	0x200002e8

08006b14 <_realloc_r>:
 8006b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b18:	4680      	mov	r8, r0
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	460e      	mov	r6, r1
 8006b1e:	b921      	cbnz	r1, 8006b2a <_realloc_r+0x16>
 8006b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b24:	4611      	mov	r1, r2
 8006b26:	f7ff bf81 	b.w	8006a2c <_malloc_r>
 8006b2a:	b92a      	cbnz	r2, 8006b38 <_realloc_r+0x24>
 8006b2c:	f7ff ff12 	bl	8006954 <_free_r>
 8006b30:	4625      	mov	r5, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b38:	f000 f838 	bl	8006bac <_malloc_usable_size_r>
 8006b3c:	4284      	cmp	r4, r0
 8006b3e:	4607      	mov	r7, r0
 8006b40:	d802      	bhi.n	8006b48 <_realloc_r+0x34>
 8006b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b46:	d812      	bhi.n	8006b6e <_realloc_r+0x5a>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7ff ff6e 	bl	8006a2c <_malloc_r>
 8006b50:	4605      	mov	r5, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d0ed      	beq.n	8006b32 <_realloc_r+0x1e>
 8006b56:	42bc      	cmp	r4, r7
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	bf28      	it	cs
 8006b5e:	463a      	movcs	r2, r7
 8006b60:	f7ff fbb8 	bl	80062d4 <memcpy>
 8006b64:	4631      	mov	r1, r6
 8006b66:	4640      	mov	r0, r8
 8006b68:	f7ff fef4 	bl	8006954 <_free_r>
 8006b6c:	e7e1      	b.n	8006b32 <_realloc_r+0x1e>
 8006b6e:	4635      	mov	r5, r6
 8006b70:	e7df      	b.n	8006b32 <_realloc_r+0x1e>
	...

08006b74 <_sbrk_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d06      	ldr	r5, [pc, #24]	; (8006b90 <_sbrk_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7fa f9a4 	bl	8000ecc <_sbrk>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_sbrk_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_sbrk_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	200002f0 	.word	0x200002f0

08006b94 <__malloc_lock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__malloc_lock+0x8>)
 8006b96:	f000 b811 	b.w	8006bbc <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	200002f4 	.word	0x200002f4

08006ba0 <__malloc_unlock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__malloc_unlock+0x8>)
 8006ba2:	f000 b80c 	b.w	8006bbe <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	200002f4 	.word	0x200002f4

08006bac <_malloc_usable_size_r>:
 8006bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb0:	1f18      	subs	r0, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfbc      	itt	lt
 8006bb6:	580b      	ldrlt	r3, [r1, r0]
 8006bb8:	18c0      	addlt	r0, r0, r3
 8006bba:	4770      	bx	lr

08006bbc <__retarget_lock_acquire_recursive>:
 8006bbc:	4770      	bx	lr

08006bbe <__retarget_lock_release_recursive>:
 8006bbe:	4770      	bx	lr

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
