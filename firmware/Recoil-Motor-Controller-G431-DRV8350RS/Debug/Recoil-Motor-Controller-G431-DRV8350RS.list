
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  0800fdc8  0800fdc8  0001fdc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801069c  0801069c  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801069c  0801069c  0002069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106a4  080106a4  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106a4  080106a4  000206a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106a8  080106a8  000206a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080106ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  200001fc  080108a8  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  080108a8  00030794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026dfa  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004628  00000000  00000000  00057026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0005b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  0005d428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002418b  00000000  00000000  0005f018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a9c  00000000  00000000  000831a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8124  00000000  00000000  000a5c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018dd63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009468  00000000  00000000  0018ddb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fdac 	.word	0x0800fdac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800fdac 	.word	0x0800fdac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:

float user_input_pot;
uint8_t user_input_button;
uint8_t user_output_led;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000fae:	f000 f8e3 	bl	8001178 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000fba:	f002 fb65 	bl	8003688 <MotorController_handleCANMessage>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000043c 	.word	0x2000043c
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d104      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x1a>
    MotorController_updateCommutation(&controller, &hadc1);
 8000fe0:	4914      	ldr	r1, [pc, #80]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fe4:	f001 ff40 	bl	8002e68 <MotorController_updateCommutation>
    #endif
  }
  else if (htim == &htim4) {
    MotorController_triggerPositionUpdate(&controller);
  }
}
 8000fe8:	e01d      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim2) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d112      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
    if (controller.mode != MODE_IDLE && controller.mode != MODE_CALIBRATION) {
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d014      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ffe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001002:	2b05      	cmp	r3, #5
 8001004:	d00f      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
      MotorController_setMode(&controller, MODE_DISABLED);
 8001006:	2100      	movs	r1, #0
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800100a:	f001 fd61 	bl	8002ad0 <MotorController_setMode>
      controller.error = ERROR_HEARTBEAT_TIMEOUT;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001010:	2204      	movs	r2, #4
 8001012:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
}
 8001016:	e006      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim4) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
    MotorController_triggerPositionUpdate(&controller);
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001022:	f001 ff99 	bl	8002f58 <MotorController_triggerPositionUpdate>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200005b8 	.word	0x200005b8
 8001034:	20000364 	.word	0x20000364
 8001038:	20000218 	.word	0x20000218
 800103c:	20000604 	.word	0x20000604
 8001040:	20000650 	.word	0x20000650

08001044 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f006 ff97 	bl	8007f88 <HAL_GPIO_WritePin>

  MotorController_updatePositionReading(&controller);
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_TxRxCpltCallback+0x2c>)
 800105c:	f001 ffd0 	bl	8003000 <MotorController_updatePositionReading>
  /* ====== Start user APP code ====== */
//  controller.position_controller.position_target = APP_getUserPot() * M_PI;

  /* ====== End user APP code ====== */

  MotorController_updatePositionController(&controller);
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8001062:	f002 f829 	bl	80030b8 <MotorController_updatePositionController>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000218 	.word	0x20000218

08001074 <APP_init>:
  // so putting it here
  // can also comment out this line and just power cycle to update the flash settings
  HAL_FLASH_OB_Launch();
}

void APP_init() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  #if INITIAL_PROG
  APP_initFlashOption();
  #endif

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	2104      	movs	r1, #4
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f006 ff82 	bl	8007f88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f006 ff7c 	bl	8007f88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001090:	2201      	movs	r2, #1
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f006 ff76 	bl	8007f88 <HAL_GPIO_WritePin>

  MotorController_init(&controller);
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <APP_init+0x4c>)
 800109e:	f001 fc15 	bl	80028cc <MotorController_init>

  MotorController_setMode(&controller, MODE_IDLE);
 80010a2:	2101      	movs	r1, #1
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <APP_init+0x4c>)
 80010a6:	f001 fd13 	bl	8002ad0 <MotorController_setMode>

//  controller.position_controller.position_kp = 0.1;
  controller.position_controller.torque_limit_lower = -0.2;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <APP_init+0x4c>)
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <APP_init+0x50>)
 80010ae:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  controller.position_controller.torque_limit_upper = 0.2;
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <APP_init+0x4c>)
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <APP_init+0x54>)
 80010b6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
//  MotorController_setMode(&controller, MODE_POSITION);

//  controller.current_controller.v_q_target = 1.5;
//  controller.current_controller.v_d_target = 0;
//  MotorController_setMode(&controller, MODE_OPEN_VDQ);
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000218 	.word	0x20000218
 80010c4:	be4ccccd 	.word	0xbe4ccccd
 80010c8:	3e4ccccd 	.word	0x3e4ccccd

080010cc <APP_main>:


void APP_main() {
 80010cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d0:	b0a4      	sub	sp, #144	; 0x90
 80010d2:	af04      	add	r7, sp, #16
  MotorController_updateService(&controller);
 80010d4:	4825      	ldr	r0, [pc, #148]	; (800116c <APP_main+0xa0>)
 80010d6:	f002 f82b 	bl	8003130 <MotorController_updateService>

  if (controller.mode != MODE_IDLE) {
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <APP_main+0xa0>)
 80010dc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d006      	beq.n	80010f2 <APP_main+0x26>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);    // blue LED
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f006 ff4c 	bl	8007f88 <HAL_GPIO_WritePin>
 80010f0:	e005      	b.n	80010fe <APP_main+0x32>
  }
  else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);    // blue LED
 80010f2:	2200      	movs	r2, #0
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f006 ff45 	bl	8007f88 <HAL_GPIO_WritePin>
//      controller.position_controller.torque_setpoint*100,
//      controller.position_controller.torque_measured*100);


    sprintf(str, "pos:%f\tvel:%f\taccel:%f\n",
        controller.position_controller.position_measured,
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <APP_main+0xa0>)
 8001100:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    sprintf(str, "pos:%f\tvel:%f\taccel:%f\n",
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa47 	bl	8000598 <__aeabi_f2d>
 800110a:	4680      	mov	r8, r0
 800110c:	4689      	mov	r9, r1
        controller.position_controller.velocity_measured,
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <APP_main+0xa0>)
 8001110:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    sprintf(str, "pos:%f\tvel:%f\taccel:%f\n",
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa3f 	bl	8000598 <__aeabi_f2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
        controller.position_controller.acceleration_measured);
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <APP_main+0xa0>)
 8001120:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    sprintf(str, "pos:%f\tvel:%f\taccel:%f\n",
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa37 	bl	8000598 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4638      	mov	r0, r7
 8001130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001134:	e9cd 4500 	strd	r4, r5, [sp]
 8001138:	4642      	mov	r2, r8
 800113a:	464b      	mov	r3, r9
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <APP_main+0xa4>)
 800113e:	f00b fd07 	bl	800cb50 <siprintf>
//      controller.current_controller.i_b_measured,
//      controller.current_controller.i_c_measured);
//    sprintf(str, "pos:%f\tvbus:%f\r\n",
//        controller.position_controller.position_measured,
//        controller.powerstage.bus_voltage_measured);
  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f86b 	bl	8000220 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	4639      	mov	r1, r7
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <APP_main+0xa8>)
 8001156:	f00a fa44 	bl	800b5e2 <HAL_UART_Transmit>
////
  HAL_Delay(5);
 800115a:	2005      	movs	r0, #5
 800115c:	f004 f898 	bl	8005290 <HAL_Delay>

}
 8001160:	bf00      	nop
 8001162:	3780      	adds	r7, #128	; 0x80
 8001164:	46bd      	mov	sp, r7
 8001166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800116a:	bf00      	nop
 800116c:	20000218 	.word	0x20000218
 8001170:	0800fdc8 	.word	0x0800fdc8
 8001174:	200006e8 	.word	0x200006e8

08001178 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	3308      	adds	r3, #8
 8001186:	f107 0208 	add.w	r2, r7, #8
 800118a:	2140      	movs	r1, #64	; 0x40
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f005 febb 	bl	8006f08 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <CAN_getRxFrame+0x3c>
 80011b0:	2201      	movs	r2, #1
 80011b2:	e000      	b.n	80011b6 <CAN_getRxFrame+0x3e>
 80011b4:	2200      	movs	r2, #0
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011c0:	d04c      	beq.n	800125c <CAN_getRxFrame+0xe4>
 80011c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011c6:	d84d      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 80011c8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011cc:	d042      	beq.n	8001254 <CAN_getRxFrame+0xdc>
 80011ce:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011d2:	d847      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 80011d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011d8:	d038      	beq.n	800124c <CAN_getRxFrame+0xd4>
 80011da:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011de:	d841      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e4:	d02e      	beq.n	8001244 <CAN_getRxFrame+0xcc>
 80011e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ea:	d83b      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 80011ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011f0:	d024      	beq.n	800123c <CAN_getRxFrame+0xc4>
 80011f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011f6:	d835      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 80011f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80011fc:	d01a      	beq.n	8001234 <CAN_getRxFrame+0xbc>
 80011fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001202:	d82f      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 8001204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001208:	d010      	beq.n	800122c <CAN_getRxFrame+0xb4>
 800120a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800120e:	d829      	bhi.n	8001264 <CAN_getRxFrame+0xec>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <CAN_getRxFrame+0xa4>
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d004      	beq.n	8001224 <CAN_getRxFrame+0xac>
 800121a:	e023      	b.n	8001264 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	80da      	strh	r2, [r3, #6]
 8001222:	e023      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	80da      	strh	r2, [r3, #6]
 800122a:	e01f      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2202      	movs	r2, #2
 8001230:	80da      	strh	r2, [r3, #6]
 8001232:	e01b      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2203      	movs	r2, #3
 8001238:	80da      	strh	r2, [r3, #6]
 800123a:	e017      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2204      	movs	r2, #4
 8001240:	80da      	strh	r2, [r3, #6]
 8001242:	e013      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2205      	movs	r2, #5
 8001248:	80da      	strh	r2, [r3, #6]
 800124a:	e00f      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2206      	movs	r2, #6
 8001250:	80da      	strh	r2, [r3, #6]
 8001252:	e00b      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2207      	movs	r2, #7
 8001258:	80da      	strh	r2, [r3, #6]
 800125a:	e007      	b.n	800126c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2208      	movs	r2, #8
 8001260:	80da      	strh	r2, [r3, #6]
 8001262:	e003      	b.n	800126c <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	80da      	strh	r2, [r3, #6]
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3730      	adds	r7, #48	; 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	791b      	ldrb	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <CAN_putTxFrame+0x1c>
 800128c:	2300      	movs	r3, #0
 800128e:	e001      	b.n	8001294 <CAN_putTxFrame+0x20>
 8001290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001294:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	795b      	ldrb	r3, [r3, #5]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <CAN_putTxFrame+0x2e>
 800129e:	2300      	movs	r3, #0
 80012a0:	e001      	b.n	80012a6 <CAN_putTxFrame+0x32>
 80012a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a6:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	88db      	ldrh	r3, [r3, #6]
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d838      	bhi.n	8001322 <CAN_putTxFrame+0xae>
 80012b0:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <CAN_putTxFrame+0x44>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080012dd 	.word	0x080012dd
 80012bc:	080012e3 	.word	0x080012e3
 80012c0:	080012eb 	.word	0x080012eb
 80012c4:	080012f3 	.word	0x080012f3
 80012c8:	080012fb 	.word	0x080012fb
 80012cc:	08001303 	.word	0x08001303
 80012d0:	0800130b 	.word	0x0800130b
 80012d4:	08001313 	.word	0x08001313
 80012d8:	0800131b 	.word	0x0800131b
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	e021      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e01d      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80012ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	e019      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80012f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	e015      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 80012fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	e011      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8001302:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e00d      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800130a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e009      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8001312:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	e005      	b.n	8001326 <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 800131a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	e001      	b.n	8001326 <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8001326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800132a:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f103 0208 	add.w	r2, r3, #8
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f005 fd99 	bl	8006e80 <HAL_FDCAN_AddMessageToTxFifoQ>
 800134e:	4603      	mov	r3, r0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3730      	adds	r7, #48	; 0x30
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <clampf>:
#define SET_BITS(REG, BIT)                    ((REG) |= (BIT))
#define CLEAR_BITS(REG, BIT)                  ((REG) &= ~(BIT))
#define READ_BITS(REG, BIT)                   ((REG) & (BIT))
#define WRITE_BITS(REG, CLEARMASK, SETMASK)   ((REG) = (((REG) & (~(CLEARMASK))) | (SETMASK)))

static inline float clampf(float value, float min, float max) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001362:	edc7 0a02 	vstr	s1, [r7, #8]
 8001366:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 800136a:	ed97 7a03 	vldr	s14, [r7, #12]
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dd01      	ble.n	8001380 <clampf+0x28>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e00b      	b.n	8001398 <clampf+0x40>
 8001380:	ed97 7a03 	vldr	s14, [r7, #12]
 8001384:	edd7 7a02 	vldr	s15, [r7, #8]
 8001388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d501      	bpl.n	8001396 <clampf+0x3e>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	e000      	b.n	8001398 <clampf+0x40>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	ee07 3a90 	vmov	s15, r3
}
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <CurrentController_init>:

#include "current_controller.h"

void CurrentController_init(CurrentController *controller) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  controller->current_filter_alpha = 0.1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <CurrentController_init+0x48>)
 80013b8:	601a      	str	r2, [r3, #0]

  controller->i_q_kp = 3.;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <CurrentController_init+0x4c>)
 80013be:	605a      	str	r2, [r3, #4]
  controller->i_q_ki = 0.; // 0.01
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]

  controller->i_d_kp = 3.;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <CurrentController_init+0x4c>)
 80013cc:	60da      	str	r2, [r3, #12]
  controller->i_d_ki = 0.;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]

  controller->i_q_measured = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	669a      	str	r2, [r3, #104]	; 0x68
  controller->i_d_measured = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	3dcccccd 	.word	0x3dcccccd
 80013f8:	40400000 	.word	0x40400000
 80013fc:	00000000 	.word	0x00000000

08001400 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6178      	str	r0, [r7, #20]
 8001408:	460b      	mov	r3, r1
 800140a:	ed87 0a03 	vstr	s0, [r7, #12]
 800140e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001412:	ed87 1a01 	vstr	s2, [r7, #4]
 8001416:	74fb      	strb	r3, [r7, #19]
  //  current_error = command_current - feedback_current
  //  current_integrator = limit(current_integrator + ki * current_error, ilimit)
  //  voltage = current_integrator + kp * current_error

  FOC_clarkTransform(
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	edd3 7a08 	vldr	s15, [r3, #32]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001436:	eeb0 1a66 	vmov.f32	s2, s13
 800143a:	eef0 0a47 	vmov.f32	s1, s14
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	4610      	mov	r0, r2
 8001444:	f000 fb5c 	bl	8001b00 <FOC_clarkTransform>
    controller->i_c_measured);

  float i_q;
  float i_d;

  FOC_parkTransform(
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001454:	f107 021c 	add.w	r2, r7, #28
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	edd7 1a02 	vldr	s3, [r7, #8]
 8001460:	ed97 1a03 	vldr	s2, [r7, #12]
 8001464:	eef0 0a47 	vmov.f32	s1, s14
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fbaa 	bl	8001bc8 <FOC_parkTransform>
    &i_d,
    controller->i_alpha_measured,
    controller->i_beta_measured,
    sin_theta, cos_theta);

  controller->i_q_measured = controller->current_filter_alpha * (i_q - controller->i_q_measured);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	ed93 7a00 	vldr	s14, [r3]
 800147a:	edd7 6a08 	vldr	s13, [r7, #32]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001484:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  controller->i_d_measured = controller->current_filter_alpha * (i_d - controller->i_d_measured);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	edd7 6a07 	vldr	s13, [r7, #28]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  if (mode != MODE_OPEN_IDQ) {
 80014b0:	7cfb      	ldrb	r3, [r7, #19]
 80014b2:	2b21      	cmp	r3, #33	; 0x21
 80014b4:	d016      	beq.n	80014e4 <CurrentController_update+0xe4>
    controller->i_q_setpoint = controller->i_q_target - controller->i_q_measured;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80014c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->i_d_setpoint = controller->i_d_target - controller->i_d_measured;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 80014e2:	e007      	b.n	80014f4 <CurrentController_update+0xf4>
  }
  else {
    controller->i_q_setpoint = controller->i_q_target;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	671a      	str	r2, [r3, #112]	; 0x70
    controller->i_d_setpoint = controller->i_d_target;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	675a      	str	r2, [r3, #116]	; 0x74
  }

  if (mode != MODE_OPEN_VDQ) {
 80014f4:	7cfb      	ldrb	r3, [r7, #19]
 80014f6:	2b22      	cmp	r3, #34	; 0x22
 80014f8:	d054      	beq.n	80015a4 <CurrentController_update+0x1a4>
    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_q_ki * controller->i_q_setpoint, -1, 1);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	edd3 6a02 	vldr	s13, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_q_integrator = clampf(
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001518:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	f7ff ff1a 	bl	8001358 <clampf>
 8001524:	eef0 7a40 	vmov.f32	s15, s0
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->i_d_integrator = clampf(
        controller->i_d_integrator + controller->i_d_ki * controller->i_d_setpoint, -1, 1);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	edd3 6a04 	vldr	s13, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_d_integrator = clampf(
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800154c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	f7ff ff00 	bl	8001358 <clampf>
 8001558:	eef0 7a40 	vmov.f32	s15, s0
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

    controller->v_q_setpoint =
        controller->i_q_kp * controller->i_q_setpoint + controller->i_q_integrator;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	ed93 7a01 	vldr	s14, [r3, #4]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800156e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_q_setpoint =
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    controller->v_d_setpoint =
        controller->i_d_kp * controller->i_d_setpoint + controller->i_d_integrator;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	ed93 7a03 	vldr	s14, [r3, #12]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800158e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_d_setpoint =
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80015a2:	e007      	b.n	80015b4 <CurrentController_update+0x1b4>
  }
  else {
    controller->v_q_setpoint = controller->v_q_target;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d_setpoint = controller->v_d_target;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  // clamp voltage
  if (v_bus > 0) {
 80015b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dd53      	ble.n	800166a <CurrentController_update+0x26a>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15;
 80015c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015ca:	ee17 0a90 	vmov	r0, s15
 80015ce:	f7fe ffe3 	bl	8000598 <__aeabi_f2d>
 80015d2:	a34d      	add	r3, pc, #308	; (adr r3, 8001708 <CurrentController_update+0x308>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f836 	bl	8000648 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fb08 	bl	8000bf8 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_norm = (
        (controller->v_q_setpoint * controller->v_q_setpoint)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80015f8:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (controller->v_d_setpoint * controller->v_d_setpoint)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float v_norm = (
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        );
    if (v_norm > v_max_sq) {
 8001614:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001618:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd21      	ble.n	800166a <CurrentController_update+0x26a>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 8001626:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800162a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	eef0 7ae7 	vabs.f32	s15, s15
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f00d fdfd 	bl	800f238 <sqrtf>
 800163e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      controller->v_q_setpoint *= k;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001648:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      controller->v_d_setpoint *= k;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800165c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    }
  }

  if (mode != MODE_OPEN_VALPHABETA && mode != MODE_CALIBRATION) {
 800166a:	7cfb      	ldrb	r3, [r7, #19]
 800166c:	2b23      	cmp	r3, #35	; 0x23
 800166e:	d01a      	beq.n	80016a6 <CurrentController_update+0x2a6>
 8001670:	7cfb      	ldrb	r3, [r7, #19]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d017      	beq.n	80016a6 <CurrentController_update+0x2a6>
    FOC_invParkTransform(
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800168e:	edd7 1a02 	vldr	s3, [r7, #8]
 8001692:	ed97 1a03 	vldr	s2, [r7, #12]
 8001696:	eef0 0a47 	vmov.f32	s1, s14
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	4610      	mov	r0, r2
 80016a0:	f000 fac7 	bl	8001c32 <FOC_invParkTransform>
 80016a4:	e007      	b.n	80016b6 <CurrentController_update+0x2b6>
      controller->v_q_setpoint,
      controller->v_d_setpoint,
      sin_theta, cos_theta);
  }
  else {
    controller->v_alpha_setpoint = controller->v_alpha_target;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	649a      	str	r2, [r3, #72]	; 0x48
    controller->v_beta_setpoint = controller->v_beta_target;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (mode != MODE_OPEN_VABC) {
 80016b6:	7cfb      	ldrb	r3, [r7, #19]
 80016b8:	2b24      	cmp	r3, #36	; 0x24
 80016ba:	d015      	beq.n	80016e8 <CurrentController_update+0x2e8>
    FOC_invClarkSVPWM(
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80016da:	eef0 0a47 	vmov.f32	s1, s14
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f000 fadd 	bl	8001ca0 <FOC_invClarkSVPWM>
  else {
    controller->v_a_setpoint = controller->v_a_target;
    controller->v_b_setpoint = controller->v_b_target;
    controller->v_c_setpoint = controller->v_c_target;
  }
}
 80016e6:	e00b      	b.n	8001700 <CurrentController_update+0x300>
    controller->v_a_setpoint = controller->v_a_target;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
    controller->v_b_setpoint = controller->v_b_target;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
    controller->v_c_setpoint = controller->v_c_target;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	66666666 	.word	0x66666666
 800170c:	3ff26666 	.word	0x3ff26666

08001710 <getParity>:
 * If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number.
 * If the count of 1s in a given set of bits is already even, the parity bit's value is 0.
 *
 * @return true if the number of ones in the data package is even, else false.
 */
uint16_t getParity(uint16_t data) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 8;              // example for 8-bit (this line scales it up to 16 bit)
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29a      	uxth	r2, r3
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4053      	eors	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	b29a      	uxth	r2, r3
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4053      	eors	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	b29a      	uxth	r2, r3
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4053      	eors	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4053      	eors	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]
  return data & 1;                // if lsb of data is 0 -> data is even. if lsb of data is 1 -> data is odd.
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	b29b      	uxth	r3, r3
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <Encoder_init>:


void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim) {
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  encoder->hspi = hspi;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	601a      	str	r2, [r3, #0]
  encoder->htim = htim;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	605a      	str	r2, [r3, #4]

  encoder->cpr = -16384;  // 14 bit precision
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <Encoder_init+0x64>)
 800177c:	60da      	str	r2, [r3, #12]

  encoder->position_filter_alpha = 0.03;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <Encoder_init+0x68>)
 8001782:	615a      	str	r2, [r3, #20]
  encoder->velocity_filter_alpha = 0.003;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <Encoder_init+0x6c>)
 8001788:	619a      	str	r2, [r3, #24]
  encoder->acceleration_filter_alpha = 0.003;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <Encoder_init+0x6c>)
 800178e:	61da      	str	r2, [r3, #28]
  encoder->position_offset = 0;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	611a      	str	r2, [r3, #16]

  encoder->position_raw = 0;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  encoder->position = 0;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  encoder->velocity = 0;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30

  encoder->n_rotations = 0;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	ffffc000 	.word	0xffffc000
 80017c8:	3cf5c28f 	.word	0x3cf5c28f
 80017cc:	3b449ba6 	.word	0x3b449ba6

080017d0 <Encoder_triggerUpdate>:

void Encoder_setOffset(Encoder *encoder, float offset) {
  encoder->position_offset = offset;
}

void Encoder_triggerUpdate(Encoder *encoder) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  encoder->spi_tx_buffer = 0x3FFF;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80017de:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= 1 << 14;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	891b      	ldrh	r3, [r3, #8]
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	891b      	ldrh	r3, [r3, #8]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff8c 	bl	8001710 <getParity>
 80017f8:	4603      	mov	r3, r0
 80017fa:	03d9      	lsls	r1, r3, #15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	891b      	ldrh	r3, [r3, #8]
 8001800:	b21a      	sxth	r2, r3
 8001802:	b20b      	sxth	r3, r1
 8001804:	4313      	orrs	r3, r2
 8001806:	b21b      	sxth	r3, r3
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	811a      	strh	r2, [r3, #8]

  __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f006 fbb1 	bl	8007f88 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_IT(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f103 0108 	add.w	r1, r3, #8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f103 020a 	add.w	r2, r3, #10
 8001836:	2301      	movs	r3, #1
 8001838:	f007 fd34 	bl	80092a4 <HAL_SPI_TransmitReceive_IT>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0000      	movs	r0, r0
	...

08001848 <Encoder_update>:

void Encoder_update(Encoder *encoder) {
 8001848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800184c:	b088      	sub	sp, #32
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
//  float dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 1000000.;
//
  float dt = 1 / 4000.;
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <Encoder_update+0x238>)
 8001854:	61bb      	str	r3, [r7, #24]

  uint16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	895b      	ldrh	r3, [r3, #10]
 800185a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800185e:	82fb      	strh	r3, [r7, #22]
//  uint16_t error = READ_BITS(encoder->spi_rx_buffer, 0x4000);

  float position_relative = ((float)reading / (float)encoder->cpr) * (2*M_PI);
 8001860:	8afb      	ldrh	r3, [r7, #22]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800187a:	ee16 0a90 	vmov	r0, s13
 800187e:	f7fe fe8b 	bl	8000598 <__aeabi_f2d>
 8001882:	a379      	add	r3, pc, #484	; (adr r3, 8001a68 <Encoder_update+0x220>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fede 	bl	8000648 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f9b0 	bl	8000bf8 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	613b      	str	r3, [r7, #16]

  float delta_position = position_relative - encoder->position_relative;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	edc7 7a07 	vstr	s15, [r7, #28]

  if (fabsf(delta_position) > 0.75 * (2*M_PI)) {
 80018ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b2:	eef0 7ae7 	vabs.f32	s15, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	a36c      	add	r3, pc, #432	; (adr r3, 8001a70 <Encoder_update+0x228>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7ff f950 	bl	8000b68 <__aeabi_dcmpgt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d02c      	beq.n	8001928 <Encoder_update+0xe0>
    encoder->n_rotations += (delta_position > 0) ? -1 : 1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dd02      	ble.n	80018e6 <Encoder_update+0x9e>
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	e000      	b.n	80018e8 <Encoder_update+0xa0>
 80018e6:	2201      	movs	r2, #1
 80018e8:	441a      	add	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	621a      	str	r2, [r3, #32]

    // unwrap delta pos to correct value for velocity calculation
    delta_position += (delta_position > 0) ? -2*M_PI : 2*M_PI;
 80018ee:	69f8      	ldr	r0, [r7, #28]
 80018f0:	f7fe fe52 	bl	8000598 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80018fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	dd03      	ble.n	800190e <Encoder_update+0xc6>
 8001906:	a15c      	add	r1, pc, #368	; (adr r1, 8001a78 <Encoder_update+0x230>)
 8001908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800190c:	e002      	b.n	8001914 <Encoder_update+0xcc>
 800190e:	a156      	add	r1, pc, #344	; (adr r1, 8001a68 <Encoder_update+0x220>)
 8001910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001914:	f7fe fce2 	bl	80002dc <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f96a 	bl	8000bf8 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	61fb      	str	r3, [r7, #28]
  }

  encoder->position_relative = position_relative;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  encoder->position_raw += encoder->position_filter_alpha * ((encoder->position_relative + (encoder->n_rotations * (2*M_PI))) - encoder->position_raw);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe30 	bl	8000598 <__aeabi_f2d>
 8001938:	4604      	mov	r4, r0
 800193a:	460d      	mov	r5, r1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe29 	bl	8000598 <__aeabi_f2d>
 8001946:	4680      	mov	r8, r0
 8001948:	4689      	mov	r9, r1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe22 	bl	8000598 <__aeabi_f2d>
 8001954:	4682      	mov	sl, r0
 8001956:	468b      	mov	fp, r1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe09 	bl	8000574 <__aeabi_i2d>
 8001962:	a341      	add	r3, pc, #260	; (adr r3, 8001a68 <Encoder_update+0x220>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe6e 	bl	8000648 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4650      	mov	r0, sl
 8001972:	4659      	mov	r1, fp
 8001974:	f7fe fcb2 	bl	80002dc <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4692      	mov	sl, r2
 800197e:	469b      	mov	fp, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4650      	mov	r0, sl
 8001990:	4659      	mov	r1, fp
 8001992:	f7fe fca1 	bl	80002d8 <__aeabi_dsub>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f7fe fe53 	bl	8000648 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc97 	bl	80002dc <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f91f 	bl	8000bf8 <__aeabi_d2f>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  encoder->position = encoder->position_raw + encoder->position_offset;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  if (dt > 0) {
 80019d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	dc00      	bgt.n	80019e6 <Encoder_update+0x19e>
    float prev_velocity = encoder->velocity;
    encoder->velocity += encoder->velocity_filter_alpha * ((delta_position / dt) - encoder->velocity);
    float delta_velocity = encoder->velocity - prev_velocity;
    encoder->acceleration += encoder->acceleration_filter_alpha * ((delta_velocity / dt) - encoder->acceleration);
  }
}
 80019e4:	e03b      	b.n	8001a5e <Encoder_update+0x216>
    float prev_velocity = encoder->velocity;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	60fb      	str	r3, [r7, #12]
    encoder->velocity += encoder->velocity_filter_alpha * ((delta_position / dt) - encoder->velocity);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	edd3 6a06 	vldr	s13, [r3, #24]
 80019f8:	edd7 5a07 	vldr	s11, [r7, #28]
 80019fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a00:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    float delta_velocity = encoder->velocity - prev_velocity;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2a:	edc7 7a02 	vstr	s15, [r7, #8]
    encoder->acceleration += encoder->acceleration_filter_alpha * ((delta_velocity / dt) - encoder->acceleration);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a3a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a42:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001a4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a68:	54442d18 	.word	0x54442d18
 8001a6c:	401921fb 	.word	0x401921fb
 8001a70:	7f3321d2 	.word	0x7f3321d2
 8001a74:	4012d97c 	.word	0x4012d97c
 8001a78:	54442d18 	.word	0x54442d18
 8001a7c:	c01921fb 	.word	0xc01921fb
 8001a80:	3983126f 	.word	0x3983126f

08001a84 <Encoder_getRelativePosition>:

float Encoder_getRelativePosition(Encoder *encoder) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return encoder->position_relative;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	ee07 3a90 	vmov	s15, r3
}
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <Encoder_getPosition>:

float Encoder_getRawPosition(Encoder *encoder) {
  return encoder->position_raw;
}

float Encoder_getPosition(Encoder *encoder) {
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  return encoder->position;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	ee07 3a90 	vmov	s15, r3
}
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <Encoder_getVelocity>:

float Encoder_getVelocity(Encoder *encoder) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return encoder->velocity;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	ee07 3a90 	vmov	s15, r3
}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <Encoder_getAcceleration>:

float Encoder_getAcceleration(Encoder *encoder) {
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  return encoder->acceleration;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	ee07 3a90 	vmov	s15, r3
}
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	0000      	movs	r0, r0
	...

08001b00 <FOC_clarkTransform>:
 *      Author: TK
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6178      	str	r0, [r7, #20]
 8001b08:	6139      	str	r1, [r7, #16]
 8001b0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b12:	ed87 1a01 	vstr	s2, [r7, #4]
//  float i_beta_raw  = sinf((2./3.) * M_PI) * i_b + sinf((4./3.) * M_PI) * i_c;
//
//  *i_alpha = i_alpha_raw * (2.f/3.f);
//  *i_beta  = i_beta_raw * (2.f/3.f);

  *i_alpha = (1. / 3.) * (2. * i_a - i_b - i_c);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7fe fd3e 	bl	8000598 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	f7fe fbdc 	bl	80002dc <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f7fe fd33 	bl	8000598 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fbcd 	bl	80002d8 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4614      	mov	r4, r2
 8001b44:	461d      	mov	r5, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fd26 	bl	8000598 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fbc0 	bl	80002d8 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	a315      	add	r3, pc, #84	; (adr r3, 8001bb8 <FOC_clarkTransform+0xb8>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fd6f 	bl	8000648 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f841 	bl	8000bf8 <__aeabi_d2f>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
  *i_beta = (1. / sqrtf(3.)) * (i_b - i_c);
 8001b7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	ee17 0a90 	vmov	r0, s15
 8001b8c:	f7fe fd04 	bl	8000598 <__aeabi_f2d>
 8001b90:	a30b      	add	r3, pc, #44	; (adr r3, 8001bc0 <FOC_clarkTransform+0xc0>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd57 	bl	8000648 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f829 	bl	8000bf8 <__aeabi_d2f>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	601a      	str	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	55555555 	.word	0x55555555
 8001bbc:	3fd55555 	.word	0x3fd55555
 8001bc0:	4b20663a 	.word	0x4b20663a
 8001bc4:	3fe279a7 	.word	0x3fe279a7

08001bc8 <FOC_parkTransform>:


void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6178      	str	r0, [r7, #20]
 8001bd0:	6139      	str	r1, [r7, #16]
 8001bd2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bd6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bda:	ed87 1a01 	vstr	s2, [r7, #4]
 8001bde:	edc7 1a00 	vstr	s3, [r7]
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001be2:	ed97 7a00 	vldr	s14, [r7]
 8001be6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bee:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	edc3 7a00 	vstr	s15, [r3]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8001c04:	ed97 7a00 	vldr	s14, [r7]
 8001c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	edc3 7a00 	vstr	s15, [r3]

}
 8001c26:	bf00      	nop
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <FOC_invParkTransform>:

void FOC_invParkTransform(float *v_alpha, float *v_beta, float v_q, float v_d, float sin_theta, float cos_theta) {
 8001c32:	b480      	push	{r7}
 8001c34:	b087      	sub	sp, #28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6178      	str	r0, [r7, #20]
 8001c3a:	6139      	str	r1, [r7, #16]
 8001c3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c40:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c44:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c48:	edc7 1a00 	vstr	s3, [r7]
  *v_alpha  = -sin_theta * v_q + cos_theta * v_d;
 8001c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c50:	eeb1 7a67 	vneg.f32	s14, s15
 8001c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	edd7 6a00 	vldr	s13, [r7]
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
  *v_beta   =  cos_theta * v_q + sin_theta * v_d;
 8001c72:	ed97 7a00 	vldr	s14, [r7]
 8001c76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	edc3 7a00 	vstr	s15, [r3]
}
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <FOC_invClarkSVPWM>:


void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	ed2d 8b02 	vpush	{d8}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6178      	str	r0, [r7, #20]
 8001cac:	6139      	str	r1, [r7, #16]
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cb4:	edc7 0a01 	vstr	s1, [r7, #4]
  float v_a_phase = v_alpha;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 8001cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ccc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001d90 <FOC_invClarkSVPWM+0xf0>
 8001cd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	edc7 7a08 	vstr	s15, [r7, #32]
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 8001cdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001ce4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cec:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001d90 <FOC_invClarkSVPWM+0xf0>
 8001cf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	edc7 7a07 	vstr	s15, [r7, #28]

  float v_neutral = .5f * (fmaxf(fmaxf(v_a_phase, v_b_phase), v_c_phase) + fminf(fminf(v_a_phase, v_b_phase), v_c_phase));
 8001cfc:	edd7 0a08 	vldr	s1, [r7, #32]
 8001d00:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001d04:	f00d f9e0 	bl	800f0c8 <fmaxf>
 8001d08:	eef0 7a40 	vmov.f32	s15, s0
 8001d0c:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	f00d f9d8 	bl	800f0c8 <fmaxf>
 8001d18:	eeb0 8a40 	vmov.f32	s16, s0
 8001d1c:	edd7 0a08 	vldr	s1, [r7, #32]
 8001d20:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001d24:	f00d f9eb 	bl	800f0fe <fminf>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
 8001d2c:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	f00d f9e3 	bl	800f0fe <fminf>
 8001d38:	eef0 7a40 	vmov.f32	s15, s0
 8001d3c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	edc7 7a06 	vstr	s15, [r7, #24]

  *v_a = v_a_phase - v_neutral;
 8001d4c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
  *v_b = v_b_phase - v_neutral;
 8001d5e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d62:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	edc3 7a00 	vstr	s15, [r3]
  *v_c = v_c_phase - v_neutral;
 8001d70:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	edc3 7a00 	vstr	s15, [r3]
}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	ecbd 8b02 	vpop	{d8}
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	3f5db3d7 	.word	0x3f5db3d7

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d98:	f003 fa09 	bl	80051ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9c:	f000 f81f 	bl	8001dde <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da0:	f000 fc96 	bl	80026d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001da4:	f000 f866 	bl	8001e74 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001da8:	f000 f98e 	bl	80020c8 <MX_FDCAN1_Init>
  MX_OPAMP1_Init();
 8001dac:	f000 f9d2 	bl	8002154 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001db0:	f000 f9fe 	bl	80021b0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001db4:	f000 fa2a 	bl	800220c <MX_OPAMP3_Init>
  MX_SPI1_Init();
 8001db8:	f000 fa56 	bl	8002268 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001dbc:	f000 fa92 	bl	80022e4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001dc0:	f000 fc3a 	bl	8002638 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001dc4:	f000 f8fc 	bl	8001fc0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001dc8:	f000 fb64 	bl	8002494 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001dcc:	f000 fbb0 	bl	8002530 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001dd0:	f000 fbfc 	bl	80025cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8001dd4:	f7ff f94e 	bl	8001074 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8001dd8:	f7ff f978 	bl	80010cc <APP_main>
  {
 8001ddc:	e7fc      	b.n	8001dd8 <main+0x44>

08001dde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b094      	sub	sp, #80	; 0x50
 8001de2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	2238      	movs	r2, #56	; 0x38
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f00a fa3d 	bl	800c26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f006 f9db 	bl	80081bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e14:	2302      	movs	r3, #2
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e20:	2314      	movs	r3, #20
 8001e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fa65 	bl	8008304 <HAL_RCC_OscConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e40:	f000 fcf8 	bl	8002834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e44:	230f      	movs	r3, #15
 8001e46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fd69 	bl	8008934 <HAL_RCC_ClockConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e68:	f000 fce4 	bl	8002834 <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3750      	adds	r7, #80	; 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b092      	sub	sp, #72	; 0x48
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	223c      	movs	r2, #60	; 0x3c
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00a f9ed 	bl	800c26c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001e94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e9a:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001e9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001eae:	4b40      	ldr	r3, [pc, #256]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001eda:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef2:	482f      	ldr	r0, [pc, #188]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001ef4:	f003 fa9c 	bl	8005430 <HAL_ADC_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001efe:	f000 fc99 	bl	8002834 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4828      	ldr	r0, [pc, #160]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001f0e:	f004 fbc1 	bl	8006694 <HAL_ADCEx_MultiModeConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001f18:	f000 fc8c 	bl	8002834 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_ADC1_Init+0x140>)
 8001f1e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001f20:	2309      	movs	r3, #9
 8001f22:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001f28:	237f      	movs	r3, #127	; 0x7f
 8001f2a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001f34:	2303      	movs	r3, #3
 8001f36:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001f5e:	f003 feb9 	bl	8005cd4 <HAL_ADCEx_InjectedConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001f68:	f000 fc64 	bl	8002834 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_ADC1_Init+0x144>)
 8001f6e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001f70:	f240 130f 	movw	r3, #271	; 0x10f
 8001f74:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f76:	463b      	mov	r3, r7
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001f7c:	f003 feaa 	bl	8005cd4 <HAL_ADCEx_InjectedConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001f86:	f000 fc55 	bl	8002834 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_ADC1_Init+0x148>)
 8001f8c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001f8e:	f240 2315 	movw	r3, #533	; 0x215
 8001f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_ADC1_Init+0x13c>)
 8001f9a:	f003 fe9b 	bl	8005cd4 <HAL_ADCEx_InjectedConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001fa4:	f000 fc46 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3748      	adds	r7, #72	; 0x48
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000364 	.word	0x20000364
 8001fb4:	b6902000 	.word	0xb6902000
 8001fb8:	04300002 	.word	0x04300002
 8001fbc:	2e300800 	.word	0x2e300800

08001fc0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b090      	sub	sp, #64	; 0x40
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	223c      	movs	r2, #60	; 0x3c
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00a f94d 	bl	800c26c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001fd2:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <MX_ADC2_Init+0xfc>)
 8001fd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fd8:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001fda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fde:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8002006:	2200      	movs	r2, #0
 8002008:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <MX_ADC2_Init+0xf8>)
 800200c:	2201      	movs	r2, #1
 800200e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <MX_ADC2_Init+0xf8>)
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8002022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <MX_ADC2_Init+0xf8>)
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002030:	4821      	ldr	r0, [pc, #132]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8002032:	f003 f9fd 	bl	8005430 <HAL_ADC_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800203c:	f000 fbfa 	bl	8002834 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP2;
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_ADC2_Init+0x100>)
 8002042:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002044:	2309      	movs	r3, #9
 8002046:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800204c:	237f      	movs	r3, #127	; 0x7f
 800204e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002050:	2304      	movs	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002058:	2302      	movs	r3, #2
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4619      	mov	r1, r3
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_ADC2_Init+0xf8>)
 8002082:	f003 fe27 	bl	8005cd4 <HAL_ADCEx_InjectedConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800208c:	f000 fbd2 	bl	8002834 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_ADC2_Init+0x104>)
 8002092:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002094:	f240 130f 	movw	r3, #271	; 0x10f
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	; (80020b8 <MX_ADC2_Init+0xf8>)
 80020a0:	f003 fe18 	bl	8005cd4 <HAL_ADCEx_InjectedConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80020aa:	f000 fbc3 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	3740      	adds	r7, #64	; 0x40
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200003d0 	.word	0x200003d0
 80020bc:	50000100 	.word	0x50000100
 80020c0:	c3290000 	.word	0xc3290000
 80020c4:	cb8c0000 	.word	0xcb8c0000

080020c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020ce:	4a20      	ldr	r2, [pc, #128]	; (8002150 <MX_FDCAN1_Init+0x88>)
 80020d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020f8:	2210      	movs	r2, #16
 80020fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <MX_FDCAN1_Init+0x84>)
 80020fe:	2201      	movs	r2, #1
 8002100:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_FDCAN1_Init+0x84>)
 8002104:	2207      	movs	r2, #7
 8002106:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_FDCAN1_Init+0x84>)
 800210a:	2202      	movs	r2, #2
 800210c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_FDCAN1_Init+0x84>)
 8002110:	2201      	movs	r2, #1
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <MX_FDCAN1_Init+0x84>)
 8002116:	2201      	movs	r2, #1
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_FDCAN1_Init+0x84>)
 800211c:	2201      	movs	r2, #1
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <MX_FDCAN1_Init+0x84>)
 8002122:	2201      	movs	r2, #1
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_FDCAN1_Init+0x84>)
 8002128:	2200      	movs	r2, #0
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <MX_FDCAN1_Init+0x84>)
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_FDCAN1_Init+0x84>)
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_FDCAN1_Init+0x84>)
 800213a:	f004 fcc5 	bl	8006ac8 <HAL_FDCAN_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002144:	f000 fb76 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000043c 	.word	0x2000043c
 8002150:	40006400 	.word	0x40006400

08002154 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <MX_OPAMP1_Init+0x58>)
 800215c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 8002172:	2201      	movs	r2, #1
 8002174:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 800217e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 8002186:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 800218e:	2200      	movs	r2, #0
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_OPAMP1_Init+0x54>)
 8002194:	f005 ff10 	bl	8007fb8 <HAL_OPAMP_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 800219e:	f000 fb49 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200004a0 	.word	0x200004a0
 80021ac:	40010300 	.word	0x40010300

080021b0 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <MX_OPAMP2_Init+0x58>)
 80021b8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021e2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_OPAMP2_Init+0x54>)
 80021f0:	f005 fee2 	bl	8007fb8 <HAL_OPAMP_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80021fa:	f000 fb1b 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200004dc 	.word	0x200004dc
 8002208:	40010304 	.word	0x40010304

0800220c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <MX_OPAMP3_Init+0x54>)
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <MX_OPAMP3_Init+0x58>)
 8002214:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <MX_OPAMP3_Init+0x54>)
 8002218:	2200      	movs	r2, #0
 800221a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <MX_OPAMP3_Init+0x54>)
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_OPAMP3_Init+0x54>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <MX_OPAMP3_Init+0x54>)
 800222a:	2201      	movs	r2, #1
 800222c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_OPAMP3_Init+0x54>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <MX_OPAMP3_Init+0x54>)
 8002236:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <MX_OPAMP3_Init+0x54>)
 800223e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_OPAMP3_Init+0x54>)
 8002246:	2200      	movs	r2, #0
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_OPAMP3_Init+0x54>)
 800224c:	f005 feb4 	bl	8007fb8 <HAL_OPAMP_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8002256:	f000 faed 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000518 	.word	0x20000518
 8002264:	40010308 	.word	0x40010308

08002268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <MX_SPI1_Init+0x74>)
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <MX_SPI1_Init+0x78>)
 8002270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_SPI1_Init+0x74>)
 8002274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_SPI1_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_SPI1_Init+0x74>)
 8002282:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002286:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_SPI1_Init+0x74>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_SPI1_Init+0x74>)
 8002290:	2201      	movs	r2, #1
 8002292:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_SPI1_Init+0x74>)
 8002296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_SPI1_Init+0x74>)
 800229e:	2218      	movs	r2, #24
 80022a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_SPI1_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_SPI1_Init+0x74>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_SPI1_Init+0x74>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_SPI1_Init+0x74>)
 80022b6:	2207      	movs	r2, #7
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_SPI1_Init+0x74>)
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_SPI1_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_SPI1_Init+0x74>)
 80022c8:	f006 ff40 	bl	800914c <HAL_SPI_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022d2:	f000 faaf 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000554 	.word	0x20000554
 80022e0:	40013000 	.word	0x40013000

080022e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b09c      	sub	sp, #112	; 0x70
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002304:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	615a      	str	r2, [r3, #20]
 8002316:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2234      	movs	r2, #52	; 0x34
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f009 ffa4 	bl	800c26c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002326:	4a5a      	ldr	r2, [pc, #360]	; (8002490 <MX_TIM1_Init+0x1ac>)
 8002328:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <MX_TIM1_Init+0x1a8>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002330:	4b56      	ldr	r3, [pc, #344]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002332:	2220      	movs	r2, #32
 8002334:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002338:	f640 729f 	movw	r2, #3999	; 0xf9f
 800233c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8002344:	4b51      	ldr	r3, [pc, #324]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002346:	2201      	movs	r2, #1
 8002348:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <MX_TIM1_Init+0x1a8>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002350:	484e      	ldr	r0, [pc, #312]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002352:	f007 fc31 	bl	8009bb8 <HAL_TIM_Base_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800235c:	f000 fa6a 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002364:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002366:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800236a:	4619      	mov	r1, r3
 800236c:	4847      	ldr	r0, [pc, #284]	; (800248c <MX_TIM1_Init+0x1a8>)
 800236e:	f008 f93d 	bl	800a5ec <HAL_TIM_ConfigClockSource>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002378:	f000 fa5c 	bl	8002834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800237c:	4843      	ldr	r0, [pc, #268]	; (800248c <MX_TIM1_Init+0x1a8>)
 800237e:	f007 fd3f 	bl	8009e00 <HAL_TIM_PWM_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002388:	f000 fa54 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800238c:	2370      	movs	r3, #112	; 0x70
 800238e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800239c:	4619      	mov	r1, r3
 800239e:	483b      	ldr	r0, [pc, #236]	; (800248c <MX_TIM1_Init+0x1a8>)
 80023a0:	f008 ff42 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80023aa:	f000 fa43 	bl	8002834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ae:	2360      	movs	r3, #96	; 0x60
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b6:	2300      	movs	r3, #0
 80023b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ba:	2300      	movs	r3, #0
 80023bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ce:	2200      	movs	r2, #0
 80023d0:	4619      	mov	r1, r3
 80023d2:	482e      	ldr	r0, [pc, #184]	; (800248c <MX_TIM1_Init+0x1a8>)
 80023d4:	f007 fff6 	bl	800a3c4 <HAL_TIM_PWM_ConfigChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023de:	f000 fa29 	bl	8002834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023e6:	2204      	movs	r2, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4828      	ldr	r0, [pc, #160]	; (800248c <MX_TIM1_Init+0x1a8>)
 80023ec:	f007 ffea 	bl	800a3c4 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80023f6:	f000 fa1d 	bl	8002834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023fe:	2208      	movs	r2, #8
 8002400:	4619      	mov	r1, r3
 8002402:	4822      	ldr	r0, [pc, #136]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002404:	f007 ffde 	bl	800a3c4 <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800240e:	f000 fa11 	bl	8002834 <Error_Handler>
  }
  sConfigOC.Pulse = 3998;
 8002412:	f640 739e 	movw	r3, #3998	; 0xf9e
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002418:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800241c:	220c      	movs	r2, #12
 800241e:	4619      	mov	r1, r3
 8002420:	481a      	ldr	r0, [pc, #104]	; (800248c <MX_TIM1_Init+0x1a8>)
 8002422:	f007 ffcf 	bl	800a3c4 <HAL_TIM_PWM_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800242c:	f000 fa02 	bl	8002834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002448:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4807      	ldr	r0, [pc, #28]	; (800248c <MX_TIM1_Init+0x1a8>)
 800246e:	f008 ff5d 	bl	800b32c <HAL_TIMEx_ConfigBreakDeadTime>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8002478:	f000 f9dc 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800247c:	4803      	ldr	r0, [pc, #12]	; (800248c <MX_TIM1_Init+0x1a8>)
 800247e:	f002 fc6d 	bl	8004d5c <HAL_TIM_MspPostInit>

}
 8002482:	bf00      	nop
 8002484:	3770      	adds	r7, #112	; 0x70
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200005b8 	.word	0x200005b8
 8002490:	40012c00 	.word	0x40012c00

08002494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <MX_TIM2_Init+0x98>)
 80024b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <MX_TIM2_Init+0x98>)
 80024bc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80024c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_TIM2_Init+0x98>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_TIM2_Init+0x98>)
 80024ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80024ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <MX_TIM2_Init+0x98>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_TIM2_Init+0x98>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024dc:	4813      	ldr	r0, [pc, #76]	; (800252c <MX_TIM2_Init+0x98>)
 80024de:	f007 fb6b 	bl	8009bb8 <HAL_TIM_Base_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80024e8:	f000 f9a4 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4619      	mov	r1, r3
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <MX_TIM2_Init+0x98>)
 80024fa:	f008 f877 	bl	800a5ec <HAL_TIM_ConfigClockSource>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002504:	f000 f996 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002508:	2320      	movs	r3, #32
 800250a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_TIM2_Init+0x98>)
 8002516:	f008 fe87 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002520:	f000 f988 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000604 	.word	0x20000604

08002530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <MX_TIM4_Init+0x94>)
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <MX_TIM4_Init+0x98>)
 8002552:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_TIM4_Init+0x94>)
 8002556:	2213      	movs	r2, #19
 8002558:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_TIM4_Init+0x94>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_TIM4_Init+0x94>)
 8002562:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002566:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <MX_TIM4_Init+0x94>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_TIM4_Init+0x94>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002574:	4813      	ldr	r0, [pc, #76]	; (80025c4 <MX_TIM4_Init+0x94>)
 8002576:	f007 fb1f 	bl	8009bb8 <HAL_TIM_Base_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002580:	f000 f958 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002588:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	4619      	mov	r1, r3
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <MX_TIM4_Init+0x94>)
 8002592:	f008 f82b 	bl	800a5ec <HAL_TIM_ConfigClockSource>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800259c:	f000 f94a 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025a0:	2320      	movs	r3, #32
 80025a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_TIM4_Init+0x94>)
 80025ae:	f008 fe3b 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025b8:	f000 f93c 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000650 	.word	0x20000650
 80025c8:	40000800 	.word	0x40000800

080025cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <MX_TIM6_Init+0x64>)
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <MX_TIM6_Init+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <MX_TIM6_Init+0x64>)
 80025e4:	229f      	movs	r2, #159	; 0x9f
 80025e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_TIM6_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <MX_TIM6_Init+0x64>)
 80025f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_TIM6_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025fc:	480c      	ldr	r0, [pc, #48]	; (8002630 <MX_TIM6_Init+0x64>)
 80025fe:	f007 fadb 	bl	8009bb8 <HAL_TIM_Base_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002608:	f000 f914 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_TIM6_Init+0x64>)
 800261a:	f008 fe05 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002624:	f000 f906 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000069c 	.word	0x2000069c
 8002634:	40001000 	.word	0x40001000

08002638 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 800263e:	4a23      	ldr	r2, [pc, #140]	; (80026cc <MX_USART3_UART_Init+0x94>)
 8002640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 800267c:	2200      	movs	r2, #0
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002680:	4811      	ldr	r0, [pc, #68]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002682:	f008 ff5e 	bl	800b542 <HAL_UART_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800268c:	f000 f8d2 	bl	8002834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002690:	2100      	movs	r1, #0
 8002692:	480d      	ldr	r0, [pc, #52]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 8002694:	f009 fcf6 	bl	800c084 <HAL_UARTEx_SetTxFifoThreshold>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800269e:	f000 f8c9 	bl	8002834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a2:	2100      	movs	r1, #0
 80026a4:	4808      	ldr	r0, [pc, #32]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 80026a6:	f009 fd2b 	bl	800c100 <HAL_UARTEx_SetRxFifoThreshold>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026b0:	f000 f8c0 	bl	8002834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026b4:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_USART3_UART_Init+0x90>)
 80026b6:	f009 fcac 	bl	800c012 <HAL_UARTEx_DisableFifoMode>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026c0:	f000 f8b8 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200006e8 	.word	0x200006e8
 80026cc:	40004800 	.word	0x40004800

080026d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	4b50      	ldr	r3, [pc, #320]	; (8002828 <MX_GPIO_Init+0x158>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <MX_GPIO_Init+0x158>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f2:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <MX_GPIO_Init+0x158>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fe:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <MX_GPIO_Init+0x158>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	4a49      	ldr	r2, [pc, #292]	; (8002828 <MX_GPIO_Init+0x158>)
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <MX_GPIO_Init+0x158>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <MX_GPIO_Init+0x158>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	4a43      	ldr	r2, [pc, #268]	; (8002828 <MX_GPIO_Init+0x158>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <MX_GPIO_Init+0x158>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <MX_GPIO_Init+0x158>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4a3d      	ldr	r2, [pc, #244]	; (8002828 <MX_GPIO_Init+0x158>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <MX_GPIO_Init+0x158>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	2154      	movs	r1, #84	; 0x54
 800274a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800274e:	f005 fc1b 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275c:	f005 fc14 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	4831      	ldr	r0, [pc, #196]	; (800282c <MX_GPIO_Init+0x15c>)
 8002766:	f005 fc0f 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	482f      	ldr	r0, [pc, #188]	; (800282c <MX_GPIO_Init+0x15c>)
 8002770:	f005 fc0a 	bl	8007f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002774:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	4829      	ldr	r0, [pc, #164]	; (8002830 <MX_GPIO_Init+0x160>)
 800278a:	f005 fa63 	bl	8007c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 800278e:	2354      	movs	r3, #84	; 0x54
 8002790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a8:	f005 fa54 	bl	8007c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2302      	movs	r3, #2
 80027bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c8:	f005 fa44 	bl	8007c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027cc:	2340      	movs	r3, #64	; 0x40
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d8:	2302      	movs	r3, #2
 80027da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4812      	ldr	r0, [pc, #72]	; (800282c <MX_GPIO_Init+0x15c>)
 80027e4:	f005 fa36 	bl	8007c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	480b      	ldr	r0, [pc, #44]	; (800282c <MX_GPIO_Init+0x15c>)
 8002800:	f005 fa28 	bl	8007c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_GPIO_Init+0x15c>)
 800281a:	f005 fa1b 	bl	8007c54 <HAL_GPIO_Init>

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	48000400 	.word	0x48000400
 8002830:	48000800 	.word	0x48000800

08002834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800283c:	e7fe      	b.n	800283c <Error_Handler+0x8>

0800283e <Motor_init>:


#include "motor.h"


void Motor_init(Motor *motor) {
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  motor->pole_pairs = 14;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	220e      	movs	r2, #14
 800284a:	601a      	str	r2, [r3, #0]
  motor->kv_rating = 150;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2296      	movs	r2, #150	; 0x96
 8002850:	605a      	str	r2, [r3, #4]

  motor->flux_angle_offset = 0.;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8002872:	eddf 0a15 	vldr	s1, [pc, #84]	; 80028c8 <wrapTo2Pi+0x60>
 8002876:	ed97 0a01 	vldr	s0, [r7, #4]
 800287a:	f00c fcbd 	bl	800f1f8 <fmodf>
 800287e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	db01      	blt.n	8002894 <wrapTo2Pi+0x2c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	e00e      	b.n	80028b2 <wrapTo2Pi+0x4a>
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fd fe7f 	bl	8000598 <__aeabi_f2d>
 800289a:	a309      	add	r3, pc, #36	; (adr r3, 80028c0 <wrapTo2Pi+0x58>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd fd1c 	bl	80002dc <__adddf3>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f9a4 	bl	8000bf8 <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	ee07 3a90 	vmov	s15, r3
}
 80028b6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	54442d18 	.word	0x54442d18
 80028c4:	401921fb 	.word	0x401921fb
 80028c8:	40c90fdb 	.word	0x40c90fdb

080028cc <MotorController_init>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart3;

void MotorController_init(MotorController *controller) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  controller->mode = MODE_DISABLED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  controller->device_id = DEVICE_CAN_ID;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  controller->firmware_version = FIRMWARE_VERSION;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <MotorController_init+0x1b8>)
 80028e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  filter_config.FilterIndex = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80028f4:	2302      	movs	r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  filter_config.FilterID1 = controller->device_id;    // filter
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8002902:	61fb      	str	r3, [r7, #28]
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]

  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	4619      	mov	r1, r3
 8002914:	485c      	ldr	r0, [pc, #368]	; (8002a88 <MotorController_init+0x1bc>)
 8002916:	f004 fa31 	bl	8006d7c <HAL_FDCAN_ConfigFilter>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002922:	4313      	orrs	r3, r2
 8002924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_Start(&hfdcan1);
 8002928:	4857      	ldr	r0, [pc, #348]	; (8002a88 <MotorController_init+0x1bc>)
 800292a:	f004 fa81 	bl	8006e30 <HAL_FDCAN_Start>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002936:	4313      	orrs	r3, r2
 8002938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2101      	movs	r1, #1
 8002940:	4851      	ldr	r0, [pc, #324]	; (8002a88 <MotorController_init+0x1bc>)
 8002942:	f004 fbbb 	bl	80070bc <HAL_FDCAN_ActivateNotification>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800294e:	4313      	orrs	r3, r2
 8002950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  Encoder_init(&controller->encoder, &hspi1, &htim6);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <MotorController_init+0x1c0>)
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <MotorController_init+0x1c4>)
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe ff00 	bl	8001760 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002966:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <MotorController_init+0x1c8>)
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <MotorController_init+0x1cc>)
 800296a:	494c      	ldr	r1, [pc, #304]	; (8002a9c <MotorController_init+0x1d0>)
 800296c:	f001 fdac 	bl	80044c8 <PowerStage_init>
  Motor_init(&controller->motor);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	335c      	adds	r3, #92	; 0x5c
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff62 	bl	800283e <Motor_init>

  CurrentController_init(&controller->current_controller);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3368      	adds	r3, #104	; 0x68
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fd14 	bl	80013ac <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	33e8      	adds	r3, #232	; 0xe8
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fc8d 	bl	80042a8 <PositionController_init>

#if OVERWRITE_CONFIG
  MotorController_storeConfig(controller);
#else
  MotorController_loadConfig(controller);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f990 	bl	8002cb4 <MotorController_loadConfig>
#endif

  PowerStage_start(&controller->powerstage);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3338      	adds	r3, #56	; 0x38
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fdb1 	bl	8004500 <PowerStage_start>

  status |= HAL_OPAMP_Start(&hopamp1);
 800299e:	4840      	ldr	r0, [pc, #256]	; (8002aa0 <MotorController_init+0x1d4>)
 80029a0:	f005 fbda 	bl	8008158 <HAL_OPAMP_Start>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_OPAMP_Start(&hopamp2);
 80029b2:	483c      	ldr	r0, [pc, #240]	; (8002aa4 <MotorController_init+0x1d8>)
 80029b4:	f005 fbd0 	bl	8008158 <HAL_OPAMP_Start>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_OPAMP_Start(&hopamp3);
 80029c6:	4838      	ldr	r0, [pc, #224]	; (8002aa8 <MotorController_init+0x1dc>)
 80029c8:	f005 fbc6 	bl	8008158 <HAL_OPAMP_Start>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_TIM_Base_Start_IT(&htim2);    // safety watchdog timer
 80029da:	4834      	ldr	r0, [pc, #208]	; (8002aac <MotorController_init+0x1e0>)
 80029dc:	f007 f9a6 	bl	8009d2c <HAL_TIM_Base_Start_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_TIM_Base_Start_IT(&htim4);    // position update trigger timer
 80029ee:	4830      	ldr	r0, [pc, #192]	; (8002ab0 <MotorController_init+0x1e4>)
 80029f0:	f007 f99c 	bl	8009d2c <HAL_TIM_Base_Start_IT>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_TIM_Base_Start(&htim6);       // time keeper timer
 8002a02:	4822      	ldr	r0, [pc, #136]	; (8002a8c <MotorController_init+0x1c0>)
 8002a04:	f007 f930 	bl	8009c68 <HAL_TIM_Base_Start>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002a16:	4820      	ldr	r0, [pc, #128]	; (8002a98 <MotorController_init+0x1cc>)
 8002a18:	f003 f874 	bl	8005b04 <HAL_ADCEx_InjectedStart>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002a2a:	481a      	ldr	r0, [pc, #104]	; (8002a94 <MotorController_init+0x1c8>)
 8002a2c:	f003 f86a 	bl	8005b04 <HAL_ADCEx_InjectedStart>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status != HAL_OK) {
 8002a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d000      	beq.n	8002a48 <MotorController_init+0x17c>
    while (1) {
 8002a46:	e7fe      	b.n	8002a46 <MotorController_init+0x17a>
      // error loop
    }
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fec0 	bl	80017d0 <Encoder_triggerUpdate>

  HAL_Delay(100);
 8002a50:	2064      	movs	r0, #100	; 0x64
 8002a52:	f002 fc1d 	bl	8005290 <HAL_Delay>
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3338      	adds	r3, #56	; 0x38
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fe5e 	bl	800471c <PowerStage_calibratePhaseCurrentOffset>

  if (controller->mode == MODE_DISABLED) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <MotorController_init+0x1ae>
    controller->mode = MODE_IDLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
    controller->error = ERROR_NO_ERROR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	00100003 	.word	0x00100003
 8002a88:	2000043c 	.word	0x2000043c
 8002a8c:	2000069c 	.word	0x2000069c
 8002a90:	20000554 	.word	0x20000554
 8002a94:	200003d0 	.word	0x200003d0
 8002a98:	20000364 	.word	0x20000364
 8002a9c:	200005b8 	.word	0x200005b8
 8002aa0:	200004a0 	.word	0x200004a0
 8002aa4:	200004dc 	.word	0x200004dc
 8002aa8:	20000518 	.word	0x20000518
 8002aac:	20000604 	.word	0x20000604
 8002ab0:	20000650 	.word	0x20000650

08002ab4 <MotorController_getMode>:

ErrorCode MotorController_getError(MotorController *controller) {
  return controller->error;
}

Mode MotorController_getMode(MotorController *controller) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return controller->mode;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <MotorController_setMode>:

void MotorController_setMode(MotorController *controller, Mode mode) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  switch (mode) {
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	2b24      	cmp	r3, #36	; 0x24
 8002ae0:	dc52      	bgt.n	8002b88 <MotorController_setMode+0xb8>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f2c0 8088 	blt.w	8002bf8 <MotorController_setMode+0x128>
 8002ae8:	2b24      	cmp	r3, #36	; 0x24
 8002aea:	f200 8085 	bhi.w	8002bf8 <MotorController_setMode+0x128>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <MotorController_setMode+0x24>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b8f 	.word	0x08002b8f
 8002af8:	08002b9b 	.word	0x08002b9b
 8002afc:	08002bf9 	.word	0x08002bf9
 8002b00:	08002bf9 	.word	0x08002bf9
 8002b04:	08002bf9 	.word	0x08002bf9
 8002b08:	08002baf 	.word	0x08002baf
 8002b0c:	08002bf9 	.word	0x08002bf9
 8002b10:	08002bf9 	.word	0x08002bf9
 8002b14:	08002bf9 	.word	0x08002bf9
 8002b18:	08002bf9 	.word	0x08002bf9
 8002b1c:	08002bf9 	.word	0x08002bf9
 8002b20:	08002bf9 	.word	0x08002bf9
 8002b24:	08002bf9 	.word	0x08002bf9
 8002b28:	08002bf9 	.word	0x08002bf9
 8002b2c:	08002bf9 	.word	0x08002bf9
 8002b30:	08002bf9 	.word	0x08002bf9
 8002b34:	08002bbb 	.word	0x08002bbb
 8002b38:	08002bbb 	.word	0x08002bbb
 8002b3c:	08002bbb 	.word	0x08002bbb
 8002b40:	08002bf9 	.word	0x08002bf9
 8002b44:	08002bf9 	.word	0x08002bf9
 8002b48:	08002bf9 	.word	0x08002bf9
 8002b4c:	08002bf9 	.word	0x08002bf9
 8002b50:	08002bf9 	.word	0x08002bf9
 8002b54:	08002bf9 	.word	0x08002bf9
 8002b58:	08002bf9 	.word	0x08002bf9
 8002b5c:	08002bf9 	.word	0x08002bf9
 8002b60:	08002bf9 	.word	0x08002bf9
 8002b64:	08002bf9 	.word	0x08002bf9
 8002b68:	08002bf9 	.word	0x08002bf9
 8002b6c:	08002bf9 	.word	0x08002bf9
 8002b70:	08002bf9 	.word	0x08002bf9
 8002b74:	08002bf9 	.word	0x08002bf9
 8002b78:	08002bbb 	.word	0x08002bbb
 8002b7c:	08002bbb 	.word	0x08002bbb
 8002b80:	08002bbb 	.word	0x08002bbb
 8002b84:	08002bbb 	.word	0x08002bbb
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d016      	beq.n	8002bba <MotorController_setMode+0xea>
 8002b8c:	e034      	b.n	8002bf8 <MotorController_setMode+0x128>
    case MODE_DISABLED:
      PowerStage_disable(&controller->powerstage);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3338      	adds	r3, #56	; 0x38
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fce6 	bl	8004564 <PowerStage_disable>
      break;
 8002b98:	e03c      	b.n	8002c14 <MotorController_setMode+0x144>

    case MODE_IDLE:
      PowerStage_enable(&controller->powerstage);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3338      	adds	r3, #56	; 0x38
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fcfa 	bl	8004598 <PowerStage_enable>
      controller->error = ERROR_NO_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
      break;
 8002bac:	e032      	b.n	8002c14 <MotorController_setMode+0x144>

    case MODE_CALIBRATION:
      PowerStage_enable(&controller->powerstage);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3338      	adds	r3, #56	; 0x38
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fcf0 	bl	8004598 <PowerStage_enable>
      break;
 8002bb8:	e02c      	b.n	8002c14 <MotorController_setMode+0x144>
    case MODE_DEBUG:
    case MODE_OPEN_VDQ:
    case MODE_OPEN_VALPHABETA:
    case MODE_OPEN_VABC:
    case MODE_OPEN_IDQ:
      if (controller->mode != MODE_IDLE && controller->mode != mode) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d013      	beq.n	8002bec <MotorController_setMode+0x11c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d00d      	beq.n	8002bec <MotorController_setMode+0x11c>
        PowerStage_disable(&controller->powerstage);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3338      	adds	r3, #56	; 0x38
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 fcc5 	bl	8004564 <PowerStage_disable>
        controller->mode = MODE_DISABLED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        controller->error = ERROR_INVALID_MODE_SWITCH;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        return;  // return directly, do not update mode
 8002bea:	e017      	b.n	8002c1c <MotorController_setMode+0x14c>
      }
      PowerStage_enable(&controller->powerstage);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3338      	adds	r3, #56	; 0x38
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fcd1 	bl	8004598 <PowerStage_enable>
      break;
 8002bf6:	e00d      	b.n	8002c14 <MotorController_setMode+0x144>

    default:
      PowerStage_disable(&controller->powerstage);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3338      	adds	r3, #56	; 0x38
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 fcb1 	bl	8004564 <PowerStage_disable>
      controller->mode = MODE_DISABLED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
      controller->error = ERROR_INVALID_MODE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
      return;  // return directly, do not update mode
 8002c12:	e003      	b.n	8002c1c <MotorController_setMode+0x14c>
  }
  controller->mode = mode;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
}
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop

08002c24 <MotorController_setFluxAngle>:

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c30:	edc7 0a01 	vstr	s1, [r7, #4]
  float theta = wrapTo2Pi(angle_setpoint);
 8002c34:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c38:	f7ff fe16 	bl	8002868 <wrapTo2Pi>
 8002c3c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float sin_theta = sinf(theta);
 8002c40:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c44:	f00c fa92 	bl	800f16c <sinf>
 8002c48:	ed87 0a08 	vstr	s0, [r7, #32]
  float cos_theta = cosf(theta);
 8002c4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c50:	f00c f9f6 	bl	800f040 <cosf>
 8002c54:	ed87 0a07 	vstr	s0, [r7, #28]
  float v_q = 0.0;
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  float v_d = voltage_setpoint;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	617b      	str	r3, [r7, #20]

  controller->current_controller.v_alpha_target = -sin_theta * v_q + cos_theta * v_d;
 8002c62:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c66:	eeb1 7a67 	vneg.f32	s14, s15
 8002c6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
  controller->current_controller.v_beta_target =   cos_theta * v_q + sin_theta * v_d;
 8002c88:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c94:	edd7 6a08 	vldr	s13, [r7, #32]
 8002c98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8002caa:	bf00      	nop
 8002cac:	3728      	adds	r7, #40	; 0x28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <MotorController_loadConfig>:

void MotorController_loadConfig(MotorController *controller) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  EEPROMConfig *config = (EEPROMConfig *)FLASH_CONFIG_ADDRESS;
 8002cbc:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <MotorController_loadConfig+0x68>)
 8002cbe:	60fb      	str	r3, [r7, #12]

  controller->firmware_version                  = config->firmware_version;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  controller->device_id                         = config->device_id;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148

  controller->encoder.cpr                       = config->encoder_cpr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]
  controller->encoder.position_offset           = config->encoder_position_offset;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]
//  controller->encoder.velocity_filter_alpha     = config->encoder_velocity_filter_alpha;

  controller->powerstage.undervoltage_threshold = config->powerstage_undervoltage_threshold;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
  controller->powerstage.overvoltage_threshold  = config->powerstage_overvoltage_threshold;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	649a      	str	r2, [r3, #72]	; 0x48

  controller->motor.pole_pairs                  = config->motor_pole_pairs;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c
  controller->motor.kv_rating                   = config->motor_kv_rating;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	665a      	str	r2, [r3, #100]	; 0x64
//  controller->position_controller.torque_limit_lower    = config->position_controller_torque_limit_lower;
//  controller->position_controller.velocity_limit_upper  = config->position_controller_velocity_limit_upper;
//  controller->position_controller.velocity_limit_lower  = config->position_controller_velocity_limit_lower;
//  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
//  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	0801f800 	.word	0x0801f800

08002d20 <MotorController_storeConfig>:

uint32_t MotorController_storeConfig(MotorController *controller) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0a4      	sub	sp, #144	; 0x90
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  EEPROMConfig config;

  config.firmware_version                     = controller->firmware_version;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002d2e:	623b      	str	r3, [r7, #32]
  config.device_id                            = controller->device_id;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8002d36:	61fb      	str	r3, [r7, #28]

  config.encoder_cpr                          = controller->encoder.cpr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  config.encoder_position_offset              = controller->encoder.position_offset;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
  config.encoder_velocity_filter_alpha        = controller->encoder.velocity_filter_alpha;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40

  config.current_controller_current_filter_alpha  = controller->current_controller.current_filter_alpha;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
  config.current_controller_i_q_kp            = controller->current_controller.i_q_kp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
  config.current_controller_i_q_ki            = controller->current_controller.i_q_ki;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  config.current_controller_i_d_kp            = controller->current_controller.i_d_kp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	653b      	str	r3, [r7, #80]	; 0x50
  config.current_controller_i_d_ki            = controller->current_controller.i_d_ki;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54

  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  config.position_controller_position_kd      = controller->position_controller.position_kd;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d9c:	663b      	str	r3, [r7, #96]	; 0x60
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_upper;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_lower;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002dac:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_velocity_limit_upper     = controller->position_controller.velocity_limit_upper;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  config.position_controller_velocity_limit_lower     = controller->position_controller.velocity_limit_lower;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002dbc:	673b      	str	r3, [r7, #112]	; 0x70
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dc4:	677b      	str	r3, [r7, #116]	; 0x74
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002dcc:	67bb      	str	r3, [r7, #120]	; 0x78

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_error;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8002dce:	f004 fd25 	bl	800781c <HAL_FLASH_Unlock>

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8002dda:	233f      	movs	r3, #63	; 0x3f
 8002ddc:	617b      	str	r3, [r7, #20]
  erase_init_struct.NbPages = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8002de2:	f107 0208 	add.w	r2, r7, #8
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 fe0d 	bl	8007a0c <HAL_FLASHEx_Erase>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <MotorController_storeConfig+0xe0>
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
 8002df8:	f004 fd4c 	bl	8007894 <HAL_FLASH_GetError>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	e02e      	b.n	8002e5e <MotorController_storeConfig+0x13e>
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002e06:	e023      	b.n	8002e50 <MotorController_storeConfig+0x130>
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 8002e08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	f107 021c 	add.w	r2, r7, #28
 8002e12:	4413      	add	r3, r2
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
 8002e1c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002e26:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 8002e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8002e2c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002e30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e32:	2000      	movs	r0, #0
 8002e34:	f004 fc9c 	bl	8007770 <HAL_FLASH_Program>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <MotorController_storeConfig+0x126>
      return HAL_FLASH_GetError();
 8002e3e:	f004 fd29 	bl	8007894 <HAL_FLASH_GetError>
 8002e42:	4603      	mov	r3, r0
 8002e44:	e00b      	b.n	8002e5e <MotorController_storeConfig+0x13e>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002e46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002e50:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e54:	2b0b      	cmp	r3, #11
 8002e56:	d9d7      	bls.n	8002e08 <MotorController_storeConfig+0xe8>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8002e58:	f004 fd02 	bl	8007860 <HAL_FLASH_Lock>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3790      	adds	r7, #144	; 0x90
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <MotorController_updateCommutation>:

float MotorController_getPosition(MotorController *controller) {
  return controller->position_controller.position_measured;
}

void MotorController_updateCommutation(MotorController *controller, ADC_HandleTypeDef *hadc) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  float position_measured = Encoder_getRelativePosition(&controller->encoder);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fe05 	bl	8001a84 <Encoder_getRelativePosition>
 8002e7a:	ed87 0a05 	vstr	s0, [r7, #20]

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea0:	f7ff fce2 	bl	8002868 <wrapTo2Pi>
 8002ea4:	ed87 0a04 	vstr	s0, [r7, #16]
  float sin_theta = sinf(theta);
 8002ea8:	ed97 0a04 	vldr	s0, [r7, #16]
 8002eac:	f00c f95e 	bl	800f16c <sinf>
 8002eb0:	ed87 0a03 	vstr	s0, [r7, #12]
  float cos_theta = cosf(theta);
 8002eb4:	ed97 0a04 	vldr	s0, [r7, #16]
 8002eb8:	f00c f8c2 	bl	800f040 <cosf>
 8002ebc:	ed87 0a02 	vstr	s0, [r7, #8]

  PowerStage_getPhaseCurrent(&controller->powerstage,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3390      	adds	r3, #144	; 0x90
 8002ed6:	f001 fc73 	bl	80047c0 <PowerStage_getPhaseCurrent>
    &controller->current_controller.i_a_measured,
    &controller->current_controller.i_b_measured,
    &controller->current_controller.i_c_measured);

  CurrentController_update(&controller->current_controller,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002eec:	eeb0 1a67 	vmov.f32	s2, s15
 8002ef0:	edd7 0a02 	vldr	s1, [r7, #8]
 8002ef4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f7fe fa81 	bl	8001400 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d015      	beq.n	8002f34 <MotorController_updateCommutation+0xcc>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8002f20:	eeb0 1a66 	vmov.f32	s2, s13
 8002f24:	eef0 0a47 	vmov.f32	s1, s14
 8002f28:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f001 fb4d 	bl	80045cc <PowerStage_setBridgeOutput>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 8002f32:	e00a      	b.n	8002f4a <MotorController_updateCommutation+0xe2>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3338      	adds	r3, #56	; 0x38
 8002f38:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002f54 <MotorController_updateCommutation+0xec>
 8002f3c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002f54 <MotorController_updateCommutation+0xec>
 8002f40:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002f54 <MotorController_updateCommutation+0xec>
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fb41 	bl	80045cc <PowerStage_setBridgeOutput>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	00000000 	.word	0x00000000

08002f58 <MotorController_triggerPositionUpdate>:

void MotorController_triggerPositionUpdate(MotorController *controller) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_DISABLED
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <MotorController_triggerPositionUpdate+0x1c>
      || controller->mode == MODE_IDLE) {
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <MotorController_triggerPositionUpdate+0x28>
    PowerStage_disable(&controller->powerstage);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3338      	adds	r3, #56	; 0x38
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 faf3 	bl	8004564 <PowerStage_disable>
 8002f7e:	e035      	b.n	8002fec <MotorController_triggerPositionUpdate+0x94>
  }
  else if (controller->mode == MODE_CALIBRATION
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d022      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_TORQUE
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d01d      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_VELOCITY
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f9a:	2b11      	cmp	r3, #17
 8002f9c:	d018      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_POSITION
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002fa4:	2b12      	cmp	r3, #18
 8002fa6:	d013      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VDQ
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002fae:	2b22      	cmp	r3, #34	; 0x22
 8002fb0:	d00e      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VALPHABETA
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002fb8:	2b23      	cmp	r3, #35	; 0x23
 8002fba:	d009      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VABC
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002fc2:	2b24      	cmp	r3, #36	; 0x24
 8002fc4:	d004      	beq.n	8002fd0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_IDQ) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002fcc:	2b21      	cmp	r3, #33	; 0x21
 8002fce:	d105      	bne.n	8002fdc <MotorController_triggerPositionUpdate+0x84>
    PowerStage_enable(&controller->powerstage);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3338      	adds	r3, #56	; 0x38
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 fadf 	bl	8004598 <PowerStage_enable>
 8002fda:	e007      	b.n	8002fec <MotorController_triggerPositionUpdate+0x94>
  }
  else {
    MotorController_setMode(controller, MODE_DISABLED);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fd76 	bl	8002ad0 <MotorController_setMode>
    controller->error = ERROR_INVALID_MODE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fbee 	bl	80017d0 <Encoder_triggerUpdate>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	0000      	movs	r0, r0
	...

08003000 <MotorController_updatePositionReading>:

void MotorController_updatePositionReading(MotorController *controller) {
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  Encoder_update(&controller->encoder);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fc1c 	bl	8001848 <Encoder_update>

  PowerStage_getBusVoltage(&controller->powerstage);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3338      	adds	r3, #56	; 0x38
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fbab 	bl	8004770 <PowerStage_getBusVoltage>

  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fd40 	bl	8001aa2 <Encoder_getPosition>
 8003022:	eef0 7a40 	vmov.f32	s15, s0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fd46 	bl	8001ac0 <Encoder_getVelocity>
 8003034:	eef0 7a40 	vmov.f32	s15, s0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
  controller->position_controller.acceleration_measured = Encoder_getAcceleration(&controller->encoder);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fd4c 	bl	8001ade <Encoder_getAcceleration>
 8003046:	eef0 7a40 	vmov.f32	s15, s0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
  controller->position_controller.torque_measured = (8.3 * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa9e 	bl	8000598 <__aeabi_f2d>
 800305c:	a314      	add	r3, pc, #80	; (adr r3, 80030b0 <MotorController_updatePositionReading+0xb0>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd faf1 	bl	8000648 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4614      	mov	r4, r2
 800306c:	461d      	mov	r5, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	ee17 0a90 	vmov	r0, s15
 800307e:	f7fd fa8b 	bl	8000598 <__aeabi_f2d>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4620      	mov	r0, r4
 8003088:	4629      	mov	r1, r5
 800308a:	f7fd fc07 	bl	800089c <__aeabi_ddiv>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f7fd fdaf 	bl	8000bf8 <__aeabi_d2f>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bdb0      	pop	{r4, r5, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w
 80030b0:	9999999a 	.word	0x9999999a
 80030b4:	40209999 	.word	0x40209999

080030b8 <MotorController_updatePositionController>:

void MotorController_updatePositionController(MotorController *controller) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  PositionController_update(&controller->position_controller);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	33e8      	adds	r3, #232	; 0xe8
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 f92f 	bl	8004328 <PositionController_update>

  if (controller->mode != MODE_OPEN_IDQ) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80030d0:	2b21      	cmp	r3, #33	; 0x21
 80030d2:	d022      	beq.n	800311a <MotorController_updatePositionController+0x62>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ea:	ee17 0a90 	vmov	r0, s15
 80030ee:	f7fd fa53 	bl	8000598 <__aeabi_f2d>
 80030f2:	a30d      	add	r3, pc, #52	; (adr r3, 8003128 <MotorController_updatePositionController+0x70>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fbd0 	bl	800089c <__aeabi_ddiv>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f7fd fd78 	bl	8000bf8 <__aeabi_d2f>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    controller->current_controller.i_d_target = 0;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  }
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	f3af 8000 	nop.w
 8003128:	9999999a 	.word	0x9999999a
 800312c:	40209999 	.word	0x40209999

08003130 <MotorController_updateService>:

void MotorController_updateService(MotorController *controller) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_CALIBRATION) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800313e:	2b05      	cmp	r3, #5
 8003140:	d103      	bne.n	800314a <MotorController_updateService+0x1a>
    MotorController_runCalibrationSequence(controller);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f81c 	bl	8003180 <MotorController_runCalibrationSequence>
    return;
 8003148:	e014      	b.n	8003174 <MotorController_updateService+0x44>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 800314a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800314e:	480b      	ldr	r0, [pc, #44]	; (800317c <MotorController_updateService+0x4c>)
 8003150:	f004 ff02 	bl	8007f58 <HAL_GPIO_ReadPin>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <MotorController_updateService+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800315a:	2201      	movs	r2, #1
 800315c:	2104      	movs	r1, #4
 800315e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003162:	f004 ff11 	bl	8007f88 <HAL_GPIO_WritePin>
 8003166:	e005      	b.n	8003174 <MotorController_updateService+0x44>
  }
  else {
    // red
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2104      	movs	r1, #4
 800316c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003170:	f004 ff0a 	bl	8007f88 <HAL_GPIO_WritePin>
  }
}
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	48000400 	.word	0x48000400

08003180 <MotorController_runCalibrationSequence>:

void MotorController_runCalibrationSequence(MotorController *controller) {
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b0ae      	sub	sp, #184	; 0xb8
 8003184:	af02      	add	r7, sp, #8
 8003186:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);    // green LED
 8003188:	2200      	movs	r2, #0
 800318a:	2110      	movs	r1, #16
 800318c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003190:	f004 fefa 	bl	8007f88 <HAL_GPIO_WritePin>
  MotorController_setMode(controller, MODE_CALIBRATION);
 8003194:	2105      	movs	r1, #5
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fc9a 	bl	8002ad0 <MotorController_setMode>

  // open loop calibration
  float prev_v_alpha_target = controller->current_controller.v_alpha_target;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  float prev_v_beta_target = controller->current_controller.v_beta_target;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  float flux_angle_setpoint = 0;
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float voltage_setpoint = 0.2;
 80031b8:	4b7b      	ldr	r3, [pc, #492]	; (80033a8 <MotorController_runCalibrationSequence+0x228>)
 80031ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80031be:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80031c2:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fd2c 	bl	8002c24 <MotorController_setFluxAngle>
  HAL_Delay(100);
 80031cc:	2064      	movs	r0, #100	; 0x64
 80031ce:	f002 f85f 	bl	8005290 <HAL_Delay>
  PowerStage_enable(&controller->powerstage);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3338      	adds	r3, #56	; 0x38
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f9de 	bl	8004598 <PowerStage_enable>
  HAL_Delay(500);
 80031dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031e0:	f002 f856 	bl	8005290 <HAL_Delay>

  float phase_current = 0;
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  while (phase_current < CALIBRATION_CURRENT) {
 80031ec:	e07c      	b.n	80032e8 <MotorController_runCalibrationSequence+0x168>
    HAL_Delay(100);
 80031ee:	2064      	movs	r0, #100	; 0x64
 80031f0:	f002 f84e 	bl	8005290 <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80031f4:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80031f8:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fd11 	bl	8002c24 <MotorController_setFluxAngle>

    voltage_setpoint += 0.1;
 8003202:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003206:	f7fd f9c7 	bl	8000598 <__aeabi_f2d>
 800320a:	a361      	add	r3, pc, #388	; (adr r3, 8003390 <MotorController_runCalibrationSequence+0x210>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd f864 	bl	80002dc <__adddf3>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f7fd fcec 	bl	8000bf8 <__aeabi_d2f>
 8003220:	4603      	mov	r3, r0
 8003222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800322c:	eef0 7ae7 	vabs.f32	s15, s15
 8003230:	ee17 0a90 	vmov	r0, s15
 8003234:	f7fd f9b0 	bl	8000598 <__aeabi_f2d>
 8003238:	4604      	mov	r4, r0
 800323a:	460d      	mov	r5, r1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003242:	eef0 7ae7 	vabs.f32	s15, s15
 8003246:	ee17 0a90 	vmov	r0, s15
 800324a:	f7fd f9a5 	bl	8000598 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd f841 	bl	80002dc <__adddf3>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4614      	mov	r4, r2
 8003260:	461d      	mov	r5, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003268:	eef0 7ae7 	vabs.f32	s15, s15
 800326c:	ee17 0a90 	vmov	r0, s15
 8003270:	f7fd f992 	bl	8000598 <__aeabi_f2d>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4620      	mov	r0, r4
 800327a:	4629      	mov	r1, r5
 800327c:	f7fd f82e 	bl	80002dc <__adddf3>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	a343      	add	r3, pc, #268	; (adr r3, 8003398 <MotorController_runCalibrationSequence+0x218>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f9db 	bl	8000648 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f7fd fcad 	bl	8000bf8 <__aeabi_d2f>
 800329e:	4603      	mov	r3, r0
 80032a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 80032a4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80032a8:	f7fd f976 	bl	8000598 <__aeabi_f2d>
 80032ac:	4604      	mov	r4, r0
 80032ae:	460d      	mov	r5, r1
 80032b0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80032b4:	f7fd f970 	bl	8000598 <__aeabi_f2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	f107 000c 	add.w	r0, r7, #12
 80032c0:	e9cd 2300 	strd	r2, r3, [sp]
 80032c4:	4622      	mov	r2, r4
 80032c6:	462b      	mov	r3, r5
 80032c8:	4938      	ldr	r1, [pc, #224]	; (80033ac <MotorController_runCalibrationSequence+0x22c>)
 80032ca:	f009 fc41 	bl	800cb50 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fc ffa4 	bl	8000220 <strlen>
 80032d8:	4603      	mov	r3, r0
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f107 010c 	add.w	r1, r7, #12
 80032e0:	230a      	movs	r3, #10
 80032e2:	4833      	ldr	r0, [pc, #204]	; (80033b0 <MotorController_runCalibrationSequence+0x230>)
 80032e4:	f008 f97d 	bl	800b5e2 <HAL_UART_Transmit>
  while (phase_current < CALIBRATION_CURRENT) {
 80032e8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80032ec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80032f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f8:	f53f af79 	bmi.w	80031ee <MotorController_runCalibrationSequence+0x6e>
    }
  }


  float start_position = Encoder_getPosition(&controller->encoder);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fbcf 	bl	8001aa2 <Encoder_getPosition>
 8003304:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 8003308:	2300      	movs	r3, #0
 800330a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800330e:	e02b      	b.n	8003368 <MotorController_runCalibrationSequence+0x1e8>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003310:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8003314:	ee07 3a90 	vmov	s15, r3
 8003318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80033b4 <MotorController_runCalibrationSequence+0x234>
 8003320:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003324:	ee16 0a90 	vmov	r0, s13
 8003328:	f7fd f936 	bl	8000598 <__aeabi_f2d>
 800332c:	a31c      	add	r3, pc, #112	; (adr r3, 80033a0 <MotorController_runCalibrationSequence+0x220>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f989 	bl	8000648 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc5b 	bl	8000bf8 <__aeabi_d2f>
 8003342:	4603      	mov	r3, r0
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003348:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 800334c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fc67 	bl	8002c24 <MotorController_setFluxAngle>
    HAL_Delay(2);
 8003356:	2002      	movs	r0, #2
 8003358:	f001 ff9a 	bl	8005290 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 800335c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003360:	3301      	adds	r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003368:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800336c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003370:	ddce      	ble.n	8003310 <MotorController_runCalibrationSequence+0x190>
  }
  HAL_Delay(500);
 8003372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003376:	f001 ff8b 	bl	8005290 <HAL_Delay>

  float end_position = Encoder_getPosition(&controller->encoder);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fb90 	bl	8001aa2 <Encoder_getPosition>
 8003382:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

  for (int16_t i=500; i>=0; i-=1) {
 8003386:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800338a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800338e:	e03f      	b.n	8003410 <MotorController_runCalibrationSequence+0x290>
 8003390:	9999999a 	.word	0x9999999a
 8003394:	3fb99999 	.word	0x3fb99999
 8003398:	55555555 	.word	0x55555555
 800339c:	3fd55555 	.word	0x3fd55555
 80033a0:	54442d18 	.word	0x54442d18
 80033a4:	401921fb 	.word	0x401921fb
 80033a8:	3e4ccccd 	.word	0x3e4ccccd
 80033ac:	0800fde0 	.word	0x0800fde0
 80033b0:	200006e8 	.word	0x200006e8
 80033b4:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80033b8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c4:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80033b4 <MotorController_runCalibrationSequence+0x234>
 80033c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033cc:	ee16 0a90 	vmov	r0, s13
 80033d0:	f7fd f8e2 	bl	8000598 <__aeabi_f2d>
 80033d4:	a3a2      	add	r3, pc, #648	; (adr r3, 8003660 <MotorController_runCalibrationSequence+0x4e0>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd f935 	bl	8000648 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	f7fd fc07 	bl	8000bf8 <__aeabi_d2f>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80033f0:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80033f4:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fc13 	bl	8002c24 <MotorController_setFluxAngle>
    HAL_Delay(2);
 80033fe:	2002      	movs	r0, #2
 8003400:	f001 ff46 	bl	8005290 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 8003404:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003408:	3b01      	subs	r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003410:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8003414:	2b00      	cmp	r3, #0
 8003416:	dacf      	bge.n	80033b8 <MotorController_runCalibrationSequence+0x238>
  }

  flux_angle_setpoint = 0;
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003420:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003424:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fbfb 	bl	8002c24 <MotorController_setFluxAngle>
  HAL_Delay(500);
 800342e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003432:	f001 ff2d 	bl	8005290 <HAL_Delay>

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fb32 	bl	8001aa2 <Encoder_getPosition>
 800343e:	ee10 3a10 	vmov	r3, s0
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f8a8 	bl	8000598 <__aeabi_f2d>
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	4b86      	ldr	r3, [pc, #536]	; (8003668 <MotorController_runCalibrationSequence+0x4e8>)
 800344e:	f7fd f8fb 	bl	8000648 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4614      	mov	r4, r2
 8003458:	461d      	mov	r5, r3
 800345a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800345e:	f7fd f89b 	bl	8000598 <__aeabi_f2d>
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	4b80      	ldr	r3, [pc, #512]	; (8003668 <MotorController_runCalibrationSequence+0x4e8>)
 8003468:	f7fd f8ee 	bl	8000648 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4620      	mov	r0, r4
 8003472:	4629      	mov	r1, r5
 8003474:	f7fc ff32 	bl	80002dc <__adddf3>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f7fd fbba 	bl	8000bf8 <__aeabi_d2f>
 8003484:	4603      	mov	r3, r0
 8003486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Delay(500);
 800348a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800348e:	f001 feff 	bl	8005290 <HAL_Delay>

  // release motor
  PowerStage_disable(&controller->powerstage);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3338      	adds	r3, #56	; 0x38
 8003496:	4618      	mov	r0, r3
 8003498:	f001 f864 	bl	8004564 <PowerStage_disable>

  controller->current_controller.v_alpha_target = prev_v_alpha_target;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80034a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  controller->current_controller.v_beta_target = prev_v_beta_target;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80034ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  float delta_position = end_position - start_position;
 80034b0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80034b4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80034b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034bc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 80034c0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80034c4:	f7fd f868 	bl	8000598 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	f107 000c 	add.w	r0, r7, #12
 80034d0:	4966      	ldr	r1, [pc, #408]	; (800366c <MotorController_runCalibrationSequence+0x4ec>)
 80034d2:	f009 fb3d 	bl	800cb50 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc fea0 	bl	8000220 <strlen>
 80034e0:	4603      	mov	r3, r0
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	f107 010c 	add.w	r1, r7, #12
 80034e8:	230a      	movs	r3, #10
 80034ea:	4861      	ldr	r0, [pc, #388]	; (8003670 <MotorController_runCalibrationSequence+0x4f0>)
 80034ec:	f008 f879 	bl	800b5e2 <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 80034f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80034f4:	f7fd f850 	bl	8000598 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	f107 000c 	add.w	r0, r7, #12
 8003500:	495c      	ldr	r1, [pc, #368]	; (8003674 <MotorController_runCalibrationSequence+0x4f4>)
 8003502:	f009 fb25 	bl	800cb50 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc fe88 	bl	8000220 <strlen>
 8003510:	4603      	mov	r3, r0
 8003512:	b29a      	uxth	r2, r3
 8003514:	f107 010c 	add.w	r1, r7, #12
 8003518:	230a      	movs	r3, #10
 800351a:	4855      	ldr	r0, [pc, #340]	; (8003670 <MotorController_runCalibrationSequence+0x4f0>)
 800351c:	f008 f861 	bl	800b5e2 <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 8003520:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003524:	f7fd f838 	bl	8000598 <__aeabi_f2d>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	f107 000c 	add.w	r0, r7, #12
 8003530:	4951      	ldr	r1, [pc, #324]	; (8003678 <MotorController_runCalibrationSequence+0x4f8>)
 8003532:	f009 fb0d 	bl	800cb50 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	4618      	mov	r0, r3
 800353c:	f7fc fe70 	bl	8000220 <strlen>
 8003540:	4603      	mov	r3, r0
 8003542:	b29a      	uxth	r2, r3
 8003544:	f107 010c 	add.w	r1, r7, #12
 8003548:	230a      	movs	r3, #10
 800354a:	4849      	ldr	r0, [pc, #292]	; (8003670 <MotorController_runCalibrationSequence+0x4f0>)
 800354c:	f008 f849 	bl	800b5e2 <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 8003550:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003554:	eef0 7ae7 	vabs.f32	s15, s15
 8003558:	ee17 0a90 	vmov	r0, s15
 800355c:	f7fd f81c 	bl	8000598 <__aeabi_f2d>
 8003560:	a33d      	add	r3, pc, #244	; (adr r3, 8003658 <MotorController_runCalibrationSequence+0x4d8>)
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	f7fd fae1 	bl	8000b2c <__aeabi_dcmplt>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <MotorController_runCalibrationSequence+0x3fc>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 8003570:	230a      	movs	r3, #10
 8003572:	221b      	movs	r2, #27
 8003574:	4941      	ldr	r1, [pc, #260]	; (800367c <MotorController_runCalibrationSequence+0x4fc>)
 8003576:	483e      	ldr	r0, [pc, #248]	; (8003670 <MotorController_runCalibrationSequence+0x4f0>)
 8003578:	f008 f833 	bl	800b5e2 <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 800357c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003580:	eeb0 7ae7 	vabs.f32	s14, s15
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	ee17 0a90 	vmov	r0, s15
 8003598:	f7fc fffe 	bl	8000598 <__aeabi_f2d>
 800359c:	a330      	add	r3, pc, #192	; (adr r3, 8003660 <MotorController_runCalibrationSequence+0x4e0>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fc fe99 	bl	80002d8 <__aeabi_dsub>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fb23 	bl	8000bf8 <__aeabi_d2f>
 80035b2:	ee07 0a90 	vmov	s15, r0
 80035b6:	eef0 7ae7 	vabs.f32	s15, s15
 80035ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	dd05      	ble.n	80035d4 <MotorController_runCalibrationSequence+0x454>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 80035c8:	230a      	movs	r3, #10
 80035ca:	2221      	movs	r2, #33	; 0x21
 80035cc:	492c      	ldr	r1, [pc, #176]	; (8003680 <MotorController_runCalibrationSequence+0x500>)
 80035ce:	4828      	ldr	r0, [pc, #160]	; (8003670 <MotorController_runCalibrationSequence+0x4f0>)
 80035d0:	f008 f807 	bl	800b5e2 <HAL_UART_Transmit>
  }


  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80035e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e8:	eeb0 0a67 	vmov.f32	s0, s15
 80035ec:	f7ff f93c 	bl	8002868 <wrapTo2Pi>
 80035f0:	eef0 7a40 	vmov.f32	s15, s0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ffca 	bl	8000598 <__aeabi_f2d>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	f107 000c 	add.w	r0, r7, #12
 800360c:	491d      	ldr	r1, [pc, #116]	; (8003684 <MotorController_runCalibrationSequence+0x504>)
 800360e:	f009 fa9f 	bl	800cb50 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc fe02 	bl	8000220 <strlen>
 800361c:	4603      	mov	r3, r0
 800361e:	b29a      	uxth	r2, r3
 8003620:	f107 010c 	add.w	r1, r7, #12
 8003624:	230a      	movs	r3, #10
 8003626:	4812      	ldr	r0, [pc, #72]	; (8003670 <MotorController_runCalibrationSequence+0x4f0>)
 8003628:	f007 ffdb 	bl	800b5e2 <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fb77 	bl	8002d20 <MotorController_storeConfig>

  HAL_Delay(1000);
 8003632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003636:	f001 fe2b 	bl	8005290 <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 800363a:	2101      	movs	r1, #1
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fa47 	bl	8002ad0 <MotorController_setMode>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);    // green LED
 8003642:	2201      	movs	r2, #1
 8003644:	2110      	movs	r1, #16
 8003646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364a:	f004 fc9d 	bl	8007f88 <HAL_GPIO_WritePin>
}
 800364e:	bf00      	nop
 8003650:	37b0      	adds	r7, #176	; 0xb0
 8003652:	46bd      	mov	sp, r7
 8003654:	bdb0      	pop	{r4, r5, r7, pc}
 8003656:	bf00      	nop
 8003658:	9999999a 	.word	0x9999999a
 800365c:	3fb99999 	.word	0x3fb99999
 8003660:	54442d18 	.word	0x54442d18
 8003664:	401921fb 	.word	0x401921fb
 8003668:	3fe00000 	.word	0x3fe00000
 800366c:	0800fe00 	.word	0x0800fe00
 8003670:	200006e8 	.word	0x200006e8
 8003674:	0800fe1c 	.word	0x0800fe1c
 8003678:	0800fe34 	.word	0x0800fe34
 800367c:	0800fe48 	.word	0x0800fe48
 8003680:	0800fe64 	.word	0x0800fe64
 8003684:	0800fe88 	.word	0x0800fe88

08003688 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint16_t device_id = (rx_frame->id) & 0b1111;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	83fb      	strh	r3, [r7, #30]
  if (device_id && device_id != controller->device_id) {
 800369e:	8bfb      	ldrh	r3, [r7, #30]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <MotorController_handleCANMessage+0x2c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8bfa      	ldrh	r2, [r7, #30]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	f040 85cc 	bne.w	800424c <MotorController_handleCANMessage+0xbc4>
    return;
  }

  uint16_t func_id = (rx_frame->id) >> 4;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	83bb      	strh	r3, [r7, #28]
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	795b      	ldrb	r3, [r3, #5]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <MotorController_handleCANMessage+0x44>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	88db      	ldrh	r3, [r3, #6]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <MotorController_handleCANMessage+0x48>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <MotorController_handleCANMessage+0x4a>
 80036d0:	2300      	movs	r3, #0
 80036d2:	76fb      	strb	r3, [r7, #27]

  if (is_get_request) {
 80036d4:	7efb      	ldrb	r3, [r7, #27]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 83bc 	beq.w	8003e54 <MotorController_handleCANMessage+0x7cc>
    CAN_Frame tx_frame;

    tx_frame.id = rx_frame->id;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60bb      	str	r3, [r7, #8]
    tx_frame.id_type = CAN_ID_STANDARD;
 80036e2:	2300      	movs	r3, #0
 80036e4:	733b      	strb	r3, [r7, #12]
    tx_frame.frame_type = CAN_FRAME_DATA;
 80036e6:	2301      	movs	r3, #1
 80036e8:	737b      	strb	r3, [r7, #13]
    tx_frame.size = 8;
 80036ea:	2308      	movs	r3, #8
 80036ec:	81fb      	strh	r3, [r7, #14]

    switch (func_id) {
 80036ee:	8bbb      	ldrh	r3, [r7, #28]
 80036f0:	2b7f      	cmp	r3, #127	; 0x7f
 80036f2:	f200 83a8 	bhi.w	8003e46 <MotorController_handleCANMessage+0x7be>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <MotorController_handleCANMessage+0x74>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	080038fd 	.word	0x080038fd
 8003700:	0800390f 	.word	0x0800390f
 8003704:	0800391d 	.word	0x0800391d
 8003708:	0800392d 	.word	0x0800392d
 800370c:	08003e47 	.word	0x08003e47
 8003710:	08003e47 	.word	0x08003e47
 8003714:	08003949 	.word	0x08003949
 8003718:	08003e47 	.word	0x08003e47
 800371c:	08003e47 	.word	0x08003e47
 8003720:	08003e47 	.word	0x08003e47
 8003724:	08003e47 	.word	0x08003e47
 8003728:	08003e47 	.word	0x08003e47
 800372c:	08003e47 	.word	0x08003e47
 8003730:	08003e47 	.word	0x08003e47
 8003734:	08003e47 	.word	0x08003e47
 8003738:	08003e47 	.word	0x08003e47
 800373c:	08003959 	.word	0x08003959
 8003740:	0800396b 	.word	0x0800396b
 8003744:	0800397d 	.word	0x0800397d
 8003748:	0800398f 	.word	0x0800398f
 800374c:	080039ab 	.word	0x080039ab
 8003750:	080039bd 	.word	0x080039bd
 8003754:	080039cf 	.word	0x080039cf
 8003758:	080039e1 	.word	0x080039e1
 800375c:	08003e47 	.word	0x08003e47
 8003760:	08003e47 	.word	0x08003e47
 8003764:	08003e47 	.word	0x08003e47
 8003768:	08003e47 	.word	0x08003e47
 800376c:	08003e47 	.word	0x08003e47
 8003770:	08003e47 	.word	0x08003e47
 8003774:	08003e47 	.word	0x08003e47
 8003778:	08003e47 	.word	0x08003e47
 800377c:	080039f3 	.word	0x080039f3
 8003780:	08003a13 	.word	0x08003a13
 8003784:	08003a47 	.word	0x08003a47
 8003788:	08003a7b 	.word	0x08003a7b
 800378c:	08003e47 	.word	0x08003e47
 8003790:	08003e47 	.word	0x08003e47
 8003794:	08003e47 	.word	0x08003e47
 8003798:	08003e47 	.word	0x08003e47
 800379c:	08003e47 	.word	0x08003e47
 80037a0:	08003e47 	.word	0x08003e47
 80037a4:	08003e47 	.word	0x08003e47
 80037a8:	08003e47 	.word	0x08003e47
 80037ac:	08003e47 	.word	0x08003e47
 80037b0:	08003e47 	.word	0x08003e47
 80037b4:	08003e47 	.word	0x08003e47
 80037b8:	08003e47 	.word	0x08003e47
 80037bc:	08003a8d 	.word	0x08003a8d
 80037c0:	08003a9f 	.word	0x08003a9f
 80037c4:	08003ab1 	.word	0x08003ab1
 80037c8:	08003e47 	.word	0x08003e47
 80037cc:	08003e47 	.word	0x08003e47
 80037d0:	08003e47 	.word	0x08003e47
 80037d4:	08003e47 	.word	0x08003e47
 80037d8:	08003e47 	.word	0x08003e47
 80037dc:	08003e47 	.word	0x08003e47
 80037e0:	08003e47 	.word	0x08003e47
 80037e4:	08003e47 	.word	0x08003e47
 80037e8:	08003e47 	.word	0x08003e47
 80037ec:	08003e47 	.word	0x08003e47
 80037f0:	08003e47 	.word	0x08003e47
 80037f4:	08003e47 	.word	0x08003e47
 80037f8:	08003e47 	.word	0x08003e47
 80037fc:	08003ac3 	.word	0x08003ac3
 8003800:	08003ad5 	.word	0x08003ad5
 8003804:	08003af5 	.word	0x08003af5
 8003808:	08003b15 	.word	0x08003b15
 800380c:	08003b37 	.word	0x08003b37
 8003810:	08003b5b 	.word	0x08003b5b
 8003814:	08003b7f 	.word	0x08003b7f
 8003818:	08003ba3 	.word	0x08003ba3
 800381c:	08003bb7 	.word	0x08003bb7
 8003820:	08003bdb 	.word	0x08003bdb
 8003824:	08003bff 	.word	0x08003bff
 8003828:	08003c23 	.word	0x08003c23
 800382c:	08003c47 	.word	0x08003c47
 8003830:	08003c6b 	.word	0x08003c6b
 8003834:	08003c8f 	.word	0x08003c8f
 8003838:	08003cb3 	.word	0x08003cb3
 800383c:	08003cd7 	.word	0x08003cd7
 8003840:	08003e47 	.word	0x08003e47
 8003844:	08003e47 	.word	0x08003e47
 8003848:	08003e47 	.word	0x08003e47
 800384c:	08003e47 	.word	0x08003e47
 8003850:	08003e47 	.word	0x08003e47
 8003854:	08003e47 	.word	0x08003e47
 8003858:	08003e47 	.word	0x08003e47
 800385c:	08003e47 	.word	0x08003e47
 8003860:	08003e47 	.word	0x08003e47
 8003864:	08003e47 	.word	0x08003e47
 8003868:	08003e47 	.word	0x08003e47
 800386c:	08003e47 	.word	0x08003e47
 8003870:	08003e47 	.word	0x08003e47
 8003874:	08003e47 	.word	0x08003e47
 8003878:	08003e47 	.word	0x08003e47
 800387c:	08003cfb 	.word	0x08003cfb
 8003880:	08003d1f 	.word	0x08003d1f
 8003884:	08003d33 	.word	0x08003d33
 8003888:	08003d57 	.word	0x08003d57
 800388c:	08003d7b 	.word	0x08003d7b
 8003890:	08003d9f 	.word	0x08003d9f
 8003894:	08003dc3 	.word	0x08003dc3
 8003898:	08003dd7 	.word	0x08003dd7
 800389c:	08003dfb 	.word	0x08003dfb
 80038a0:	08003e0f 	.word	0x08003e0f
 80038a4:	08003e33 	.word	0x08003e33
 80038a8:	08003e47 	.word	0x08003e47
 80038ac:	08003e47 	.word	0x08003e47
 80038b0:	08003e47 	.word	0x08003e47
 80038b4:	08003e47 	.word	0x08003e47
 80038b8:	08003e47 	.word	0x08003e47
 80038bc:	08003e47 	.word	0x08003e47
 80038c0:	08003e47 	.word	0x08003e47
 80038c4:	08003e47 	.word	0x08003e47
 80038c8:	08003e47 	.word	0x08003e47
 80038cc:	08003e47 	.word	0x08003e47
 80038d0:	08003e47 	.word	0x08003e47
 80038d4:	08003e47 	.word	0x08003e47
 80038d8:	08003e47 	.word	0x08003e47
 80038dc:	08003e47 	.word	0x08003e47
 80038e0:	08003e47 	.word	0x08003e47
 80038e4:	08003e47 	.word	0x08003e47
 80038e8:	08003e47 	.word	0x08003e47
 80038ec:	08003e47 	.word	0x08003e47
 80038f0:	08003e47 	.word	0x08003e47
 80038f4:	08003e47 	.word	0x08003e47
 80038f8:	0800393b 	.word	0x0800393b
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 80038fc:	2100      	movs	r1, #0
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff f8e6 	bl	8002ad0 <MotorController_setMode>
        tx_frame.size = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8003908:	23ac      	movs	r3, #172	; 0xac
 800390a:	743b      	strb	r3, [r7, #16]
        break;
 800390c:	e29b      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ID:
        tx_frame.size = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8003918:	743b      	strb	r3, [r7, #16]
        break;
 800391a:	e294      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_VERSION:
        tx_frame.size = 1;
 800391c:	2301      	movs	r3, #1
 800391e:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003926:	b2db      	uxtb	r3, r3
 8003928:	743b      	strb	r3, [r7, #16]
        break;
 800392a:	e28c      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_SAFETY:
        tx_frame.size = 1;
 800392c:	2301      	movs	r3, #1
 800392e:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->error;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8003936:	743b      	strb	r3, [r7, #16]
        break;
 8003938:	e285      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_PING:
        tx_frame.size = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8003944:	743b      	strb	r3, [r7, #16]
        break;
 8003946:	e27e      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_MODE:
        tx_frame.size = 1;
 8003948:	2301      	movs	r3, #1
 800394a:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = MotorController_getMode(controller);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff f8b1 	bl	8002ab4 <MotorController_getMode>
 8003952:	4603      	mov	r3, r0
 8003954:	743b      	strb	r3, [r7, #16]
        break;
 8003956:	e276      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_CPR:
        tx_frame.size = 4;
 8003958:	2304      	movs	r3, #4
 800395a:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->encoder.cpr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	3308      	adds	r3, #8
 8003966:	601a      	str	r2, [r3, #0]
        break;
 8003968:	e26d      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        tx_frame.size = 4;
 800396a:	2304      	movs	r3, #4
 800396c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_offset;
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	3308      	adds	r3, #8
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6912      	ldr	r2, [r2, #16]
 8003978:	601a      	str	r2, [r3, #0]
        break;
 800397a:	e264      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_VELOCITY_FILTER_ALPHA:
        tx_frame.size = 4;
 800397c:	2304      	movs	r3, #4
 800397e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity_filter_alpha;
 8003980:	f107 0308 	add.w	r3, r7, #8
 8003984:	3308      	adds	r3, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6992      	ldr	r2, [r2, #24]
 800398a:	601a      	str	r2, [r3, #0]
        break;
 800398c:	e25b      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_N_ROTATIONS:
        tx_frame.size = 4;
 800398e:	2304      	movs	r3, #4
 8003990:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	3308      	adds	r3, #8
 800399c:	ee07 2a90 	vmov	s15, r2
 80039a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a4:	edc3 7a00 	vstr	s15, [r3]
        break;
 80039a8:	e24d      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_POSITION_RELATIVE:
        tx_frame.size = 4;
 80039aa:	2304      	movs	r3, #4
 80039ac:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_relative;
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	3308      	adds	r3, #8
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b8:	601a      	str	r2, [r3, #0]
        break;
 80039ba:	e244      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_POSITION_RAW:
        tx_frame.size = 4;
 80039bc:	2304      	movs	r3, #4
 80039be:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_raw;
 80039c0:	f107 0308 	add.w	r3, r7, #8
 80039c4:	3308      	adds	r3, #8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ca:	601a      	str	r2, [r3, #0]
        break;
 80039cc:	e23b      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_POSITION:
        tx_frame.size = 4;
 80039ce:	2304      	movs	r3, #4
 80039d0:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position;
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	3308      	adds	r3, #8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039dc:	601a      	str	r2, [r3, #0]
        break;
 80039de:	e232      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_ENCODER_VELOCITY:
        tx_frame.size = 4;
 80039e0:	2304      	movs	r3, #4
 80039e2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity;
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	3308      	adds	r3, #8
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ee:	601a      	str	r2, [r3, #0]
        break;
 80039f0:	e229      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        tx_frame.size = 8;
 80039f2:	2308      	movs	r3, #8
 80039f4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 80039f6:	f107 0308 	add.w	r3, r7, #8
 80039fa:	3308      	adds	r3, #8
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a00:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	3308      	adds	r3, #8
 8003a08:	3304      	adds	r3, #4
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a0e:	601a      	str	r2, [r3, #0]
        break;
 8003a10:	e219      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POWERSTAGE_ADC_READING_RAW_A_B_C:
        tx_frame.size = 6;
 8003a12:	2306      	movs	r3, #6
 8003a14:	81fb      	strh	r3, [r7, #14]
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8003a22:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_raw[1];
 8003a24:	f107 0308 	add.w	r3, r7, #8
 8003a28:	3308      	adds	r3, #8
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8003a32:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	3308      	adds	r3, #8
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003a42:	801a      	strh	r2, [r3, #0]
        break;
 8003a44:	e1ff      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POWERSTAGE_ADC_READING_OFFSET_A_B_C:
        tx_frame.size = 6;
 8003a46:	2306      	movs	r3, #6
 8003a48:	81fb      	strh	r3, [r7, #14]
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	3308      	adds	r3, #8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8003a56:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	3302      	adds	r3, #2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	f9b2 2054 	ldrsh.w	r2, [r2, #84]	; 0x54
 8003a66:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8003a68:	f107 0308 	add.w	r3, r7, #8
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	3304      	adds	r3, #4
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8003a76:	801a      	strh	r2, [r3, #0]
        break;
 8003a78:	e1e5      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POWERSTAGE_BUS_VOLTAGE:
        tx_frame.size = 4;
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	3308      	adds	r3, #8
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a88:	601a      	str	r2, [r3, #0]
        break;
 8003a8a:	e1dc      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_MOTOR_POLE_PAIRS:
        tx_frame.size = 4;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	3308      	adds	r3, #8
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a9a:	601a      	str	r2, [r3, #0]
        break;
 8003a9c:	e1d3      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_MOTOR_KV_RATING:
        tx_frame.size = 4;
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003aac:	601a      	str	r2, [r3, #0]
        break;
 8003aae:	e1ca      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_MOTOR_FLUX_ANGLE_OFFSET:
        tx_frame.size = 4;
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	3308      	adds	r3, #8
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003abe:	601a      	str	r2, [r3, #0]
        break;
 8003ac0:	e1c1      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        tx_frame.size = 4;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.current_filter_alpha;
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	3308      	adds	r3, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ad0:	601a      	str	r2, [r3, #0]
        break;
 8003ad2:	e1b8      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        tx_frame.size = 8;
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_kp;
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	3308      	adds	r3, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ae2:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_ki;
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	3308      	adds	r3, #8
 8003aea:	3304      	adds	r3, #4
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003af0:	601a      	str	r2, [r3, #0]
        break;
 8003af2:	e1a8      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        tx_frame.size = 8;
 8003af4:	2308      	movs	r3, #8
 8003af6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_kp;
 8003af8:	f107 0308 	add.w	r3, r7, #8
 8003afc:	3308      	adds	r3, #8
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b02:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_ki;
 8003b04:	f107 0308 	add.w	r3, r7, #8
 8003b08:	3308      	adds	r3, #8
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003b10:	601a      	str	r2, [r3, #0]
        break;
 8003b12:	e198      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_A_TARGET_I_A_MEASURED:
        tx_frame.size = 8;
 8003b14:	2308      	movs	r3, #8
 8003b16:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_target;
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003b22:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_a_measured;
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	3308      	adds	r3, #8
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003b32:	601a      	str	r2, [r3, #0]
        break;
 8003b34:	e187      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_B_TARGET_I_B_MEASURED:
        tx_frame.size = 8;
 8003b36:	2308      	movs	r3, #8
 8003b38:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_b_target;
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	3308      	adds	r3, #8
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003b46:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8003b48:	f107 0308 	add.w	r3, r7, #8
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	3304      	adds	r3, #4
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003b56:	601a      	str	r2, [r3, #0]
        break;
 8003b58:	e175      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_C_TARGET_I_C_MEASURED:
        tx_frame.size = 8;
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_target;
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	3308      	adds	r3, #8
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003b6a:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	3308      	adds	r3, #8
 8003b72:	3304      	adds	r3, #4
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003b7a:	601a      	str	r2, [r3, #0]
        break;
 8003b7c:	e163      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        tx_frame.size = 8;
 8003b7e:	2308      	movs	r3, #8
 8003b80:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	3308      	adds	r3, #8
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003b8e:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8003b90:	f107 0308 	add.w	r3, r7, #8
 8003b94:	3308      	adds	r3, #8
 8003b96:	3304      	adds	r3, #4
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8003b9e:	601a      	str	r2, [r3, #0]
        break;
 8003ba0:	e151      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        tx_frame.size = 4;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	3308      	adds	r3, #8
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003bb2:	601a      	str	r2, [r3, #0]
        break;
 8003bb4:	e147      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_TARGET_I_ALPHA_MEASURED:
        tx_frame.size = 8;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_target;
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003bc6:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_alpha_measured;
 8003bc8:	f107 0308 	add.w	r3, r7, #8
 8003bcc:	3308      	adds	r3, #8
 8003bce:	3304      	adds	r3, #4
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8003bd6:	601a      	str	r2, [r3, #0]
        break;
 8003bd8:	e135      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_BETA_TARGET_I_BETA_MEASURED:
        tx_frame.size = 8;
 8003bda:	2308      	movs	r3, #8
 8003bdc:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_beta_target;
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	3308      	adds	r3, #8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8003bea:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8003bec:	f107 0308 	add.w	r3, r7, #8
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003bfa:	601a      	str	r2, [r3, #0]
        break;
 8003bfc:	e123      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        tx_frame.size = 8;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	3308      	adds	r3, #8
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8003c0e:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8003c10:	f107 0308 	add.w	r3, r7, #8
 8003c14:	3308      	adds	r3, #8
 8003c16:	3304      	adds	r3, #4
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8003c1e:	601a      	str	r2, [r3, #0]
        break;
 8003c20:	e111      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_TARGET:
        tx_frame.size = 8;
 8003c22:	2308      	movs	r3, #8
 8003c24:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_target;
 8003c26:	f107 0308 	add.w	r3, r7, #8
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8003c32:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_target;
 8003c34:	f107 0308 	add.w	r3, r7, #8
 8003c38:	3308      	adds	r3, #8
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8003c42:	601a      	str	r2, [r3, #0]
        break;
 8003c44:	e0ff      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        tx_frame.size = 8;
 8003c46:	2308      	movs	r3, #8
 8003c48:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	3308      	adds	r3, #8
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8003c56:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	3304      	adds	r3, #4
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 8003c66:	601a      	str	r2, [r3, #0]
        break;
 8003c68:	e0ed      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_TARGET_MEASURED:
        tx_frame.size = 8;
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	3308      	adds	r3, #8
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003c7a:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_measured;
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	3308      	adds	r3, #8
 8003c82:	3304      	adds	r3, #4
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 8003c8a:	601a      	str	r2, [r3, #0]
        break;
 8003c8c:	e0db      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_I_D_TARGET_MEASURED:
        tx_frame.size = 8;
 8003c8e:	2308      	movs	r3, #8
 8003c90:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_target;
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	3308      	adds	r3, #8
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003c9e:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8003ca0:	f107 0308 	add.w	r3, r7, #8
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8003cae:	601a      	str	r2, [r3, #0]
        break;
 8003cb0:	e0c9      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        tx_frame.size = 8;
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	3308      	adds	r3, #8
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8003cc2:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	3308      	adds	r3, #8
 8003cca:	3304      	adds	r3, #4
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8003cd2:	601a      	str	r2, [r3, #0]
        break;
 8003cd4:	e0b7      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_INTEGRATOR:
        tx_frame.size = 8;
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	3308      	adds	r3, #8
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8003ce6:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	3308      	adds	r3, #8
 8003cee:	3304      	adds	r3, #4
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8003cf6:	601a      	str	r2, [r3, #0]
        break;
 8003cf8:	e0a5      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_KP_KI:
        tx_frame.size = 8;
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	3308      	adds	r3, #8
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 8003d0a:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	3308      	adds	r3, #8
 8003d12:	3304      	adds	r3, #4
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8003d1a:	601a      	str	r2, [r3, #0]
        break;
 8003d1c:	e093      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_KD:
        tx_frame.size = 4;
 8003d1e:	2304      	movs	r3, #4
 8003d20:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kd;
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	3308      	adds	r3, #8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8003d2e:	601a      	str	r2, [r3, #0]
        break;
 8003d30:	e089      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        tx_frame.size = 8;
 8003d32:	2308      	movs	r3, #8
 8003d34:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_limit_lower;
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 8003d42:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_limit_upper;
 8003d44:	f107 0308 	add.w	r3, r7, #8
 8003d48:	3308      	adds	r3, #8
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8003d52:	601a      	str	r2, [r3, #0]
        break;
 8003d54:	e077      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        tx_frame.size = 8;
 8003d56:	2308      	movs	r3, #8
 8003d58:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_limit_lower;
 8003d5a:	f107 0308 	add.w	r3, r7, #8
 8003d5e:	3308      	adds	r3, #8
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8003d66:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit_upper;
 8003d68:	f107 0308 	add.w	r3, r7, #8
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	3304      	adds	r3, #4
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8003d76:	601a      	str	r2, [r3, #0]
        break;
 8003d78:	e065      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        tx_frame.size = 8;
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	3308      	adds	r3, #8
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003d8a:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8003d8c:	f107 0308 	add.w	r3, r7, #8
 8003d90:	3308      	adds	r3, #8
 8003d92:	3304      	adds	r3, #4
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8003d9a:	601a      	str	r2, [r3, #0]
        break;
 8003d9c:	e053      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        tx_frame.size = 8;
 8003d9e:	2308      	movs	r3, #8
 8003da0:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8003da2:	f107 0308 	add.w	r3, r7, #8
 8003da6:	3308      	adds	r3, #8
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8003dae:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8003db0:	f107 0308 	add.w	r3, r7, #8
 8003db4:	3308      	adds	r3, #8
 8003db6:	3304      	adds	r3, #4
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 8003dbe:	601a      	str	r2, [r3, #0]
        break;
 8003dc0:	e041      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_SETPOINT:
        tx_frame.size = 4;
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	3308      	adds	r3, #8
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8003dd2:	601a      	str	r2, [r3, #0]
        break;
 8003dd4:	e037      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        tx_frame.size = 8;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8003dda:	f107 0308 	add.w	r3, r7, #8
 8003dde:	3308      	adds	r3, #8
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
 8003de6:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	3308      	adds	r3, #8
 8003dee:	3304      	adds	r3, #4
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8003df6:	601a      	str	r2, [r3, #0]
        break;
 8003df8:	e025      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_SETPOINT:
        tx_frame.size = 4;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	3308      	adds	r3, #8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8003e0a:	601a      	str	r2, [r3, #0]
        break;
 8003e0c:	e01b      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        tx_frame.size = 8;
 8003e0e:	2308      	movs	r3, #8
 8003e10:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	3308      	adds	r3, #8
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 8003e1e:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	3308      	adds	r3, #8
 8003e26:	3304      	adds	r3, #4
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 8003e2e:	601a      	str	r2, [r3, #0]
        break;
 8003e30:	e009      	b.n	8003e46 <MotorController_handleCANMessage+0x7be>
      case CAN_ID_POSITION_CONTROLLER_POSITION_SETPOINT:
        tx_frame.size = 4;
 8003e32:	2304      	movs	r3, #4
 8003e34:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 8003e42:	601a      	str	r2, [r3, #0]
        break;
 8003e44:	bf00      	nop
    }
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	48c5      	ldr	r0, [pc, #788]	; (8004164 <MotorController_handleCANMessage+0xadc>)
 8003e4e:	f7fd fa11 	bl	8001274 <CAN_putTxFrame>
 8003e52:	e1fc      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
  }
  else {
    switch (func_id) {
 8003e54:	8bbb      	ldrh	r3, [r7, #28]
 8003e56:	2b7e      	cmp	r3, #126	; 0x7e
 8003e58:	f200 81f9 	bhi.w	800424e <MotorController_handleCANMessage+0xbc6>
 8003e5c:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <MotorController_handleCANMessage+0x7dc>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08004061 	.word	0x08004061
 8003e68:	0800406b 	.word	0x0800406b
 8003e6c:	0800424f 	.word	0x0800424f
 8003e70:	0800424f 	.word	0x0800424f
 8003e74:	08004077 	.word	0x08004077
 8003e78:	0800424f 	.word	0x0800424f
 8003e7c:	08004099 	.word	0x08004099
 8003e80:	0800424f 	.word	0x0800424f
 8003e84:	0800424f 	.word	0x0800424f
 8003e88:	0800424f 	.word	0x0800424f
 8003e8c:	0800424f 	.word	0x0800424f
 8003e90:	0800424f 	.word	0x0800424f
 8003e94:	0800424f 	.word	0x0800424f
 8003e98:	0800424f 	.word	0x0800424f
 8003e9c:	0800424f 	.word	0x0800424f
 8003ea0:	0800424f 	.word	0x0800424f
 8003ea4:	080040a7 	.word	0x080040a7
 8003ea8:	080040b5 	.word	0x080040b5
 8003eac:	080040c1 	.word	0x080040c1
 8003eb0:	0800424f 	.word	0x0800424f
 8003eb4:	0800424f 	.word	0x0800424f
 8003eb8:	0800424f 	.word	0x0800424f
 8003ebc:	0800424f 	.word	0x0800424f
 8003ec0:	0800424f 	.word	0x0800424f
 8003ec4:	0800424f 	.word	0x0800424f
 8003ec8:	0800424f 	.word	0x0800424f
 8003ecc:	0800424f 	.word	0x0800424f
 8003ed0:	0800424f 	.word	0x0800424f
 8003ed4:	0800424f 	.word	0x0800424f
 8003ed8:	0800424f 	.word	0x0800424f
 8003edc:	0800424f 	.word	0x0800424f
 8003ee0:	0800424f 	.word	0x0800424f
 8003ee4:	080040cd 	.word	0x080040cd
 8003ee8:	0800424f 	.word	0x0800424f
 8003eec:	0800424f 	.word	0x0800424f
 8003ef0:	0800424f 	.word	0x0800424f
 8003ef4:	0800424f 	.word	0x0800424f
 8003ef8:	0800424f 	.word	0x0800424f
 8003efc:	0800424f 	.word	0x0800424f
 8003f00:	0800424f 	.word	0x0800424f
 8003f04:	0800424f 	.word	0x0800424f
 8003f08:	0800424f 	.word	0x0800424f
 8003f0c:	0800424f 	.word	0x0800424f
 8003f10:	0800424f 	.word	0x0800424f
 8003f14:	0800424f 	.word	0x0800424f
 8003f18:	0800424f 	.word	0x0800424f
 8003f1c:	0800424f 	.word	0x0800424f
 8003f20:	0800424f 	.word	0x0800424f
 8003f24:	0800424f 	.word	0x0800424f
 8003f28:	0800424f 	.word	0x0800424f
 8003f2c:	0800424f 	.word	0x0800424f
 8003f30:	0800424f 	.word	0x0800424f
 8003f34:	0800424f 	.word	0x0800424f
 8003f38:	0800424f 	.word	0x0800424f
 8003f3c:	0800424f 	.word	0x0800424f
 8003f40:	0800424f 	.word	0x0800424f
 8003f44:	0800424f 	.word	0x0800424f
 8003f48:	0800424f 	.word	0x0800424f
 8003f4c:	0800424f 	.word	0x0800424f
 8003f50:	0800424f 	.word	0x0800424f
 8003f54:	0800424f 	.word	0x0800424f
 8003f58:	0800424f 	.word	0x0800424f
 8003f5c:	0800424f 	.word	0x0800424f
 8003f60:	0800424f 	.word	0x0800424f
 8003f64:	080040e5 	.word	0x080040e5
 8003f68:	080040f1 	.word	0x080040f1
 8003f6c:	08004109 	.word	0x08004109
 8003f70:	08004121 	.word	0x08004121
 8003f74:	0800412d 	.word	0x0800412d
 8003f78:	0800413b 	.word	0x0800413b
 8003f7c:	0800424f 	.word	0x0800424f
 8003f80:	0800424f 	.word	0x0800424f
 8003f84:	08004149 	.word	0x08004149
 8003f88:	08004157 	.word	0x08004157
 8003f8c:	0800424f 	.word	0x0800424f
 8003f90:	0800416d 	.word	0x0800416d
 8003f94:	0800424f 	.word	0x0800424f
 8003f98:	08004189 	.word	0x08004189
 8003f9c:	08004197 	.word	0x08004197
 8003fa0:	0800424f 	.word	0x0800424f
 8003fa4:	0800424f 	.word	0x0800424f
 8003fa8:	0800424f 	.word	0x0800424f
 8003fac:	0800424f 	.word	0x0800424f
 8003fb0:	0800424f 	.word	0x0800424f
 8003fb4:	0800424f 	.word	0x0800424f
 8003fb8:	0800424f 	.word	0x0800424f
 8003fbc:	0800424f 	.word	0x0800424f
 8003fc0:	0800424f 	.word	0x0800424f
 8003fc4:	0800424f 	.word	0x0800424f
 8003fc8:	0800424f 	.word	0x0800424f
 8003fcc:	0800424f 	.word	0x0800424f
 8003fd0:	0800424f 	.word	0x0800424f
 8003fd4:	0800424f 	.word	0x0800424f
 8003fd8:	0800424f 	.word	0x0800424f
 8003fdc:	0800424f 	.word	0x0800424f
 8003fe0:	0800424f 	.word	0x0800424f
 8003fe4:	080041a5 	.word	0x080041a5
 8003fe8:	080041c1 	.word	0x080041c1
 8003fec:	080041cf 	.word	0x080041cf
 8003ff0:	080041eb 	.word	0x080041eb
 8003ff4:	08004207 	.word	0x08004207
 8003ff8:	08004223 	.word	0x08004223
 8003ffc:	0800424f 	.word	0x0800424f
 8004000:	08004231 	.word	0x08004231
 8004004:	0800424f 	.word	0x0800424f
 8004008:	0800423f 	.word	0x0800423f
 800400c:	0800424f 	.word	0x0800424f
 8004010:	0800424f 	.word	0x0800424f
 8004014:	0800424f 	.word	0x0800424f
 8004018:	0800424f 	.word	0x0800424f
 800401c:	0800424f 	.word	0x0800424f
 8004020:	0800424f 	.word	0x0800424f
 8004024:	0800424f 	.word	0x0800424f
 8004028:	0800424f 	.word	0x0800424f
 800402c:	0800424f 	.word	0x0800424f
 8004030:	0800424f 	.word	0x0800424f
 8004034:	0800424f 	.word	0x0800424f
 8004038:	0800424f 	.word	0x0800424f
 800403c:	0800424f 	.word	0x0800424f
 8004040:	0800424f 	.word	0x0800424f
 8004044:	0800424f 	.word	0x0800424f
 8004048:	0800424f 	.word	0x0800424f
 800404c:	0800424f 	.word	0x0800424f
 8004050:	0800424f 	.word	0x0800424f
 8004054:	0800424f 	.word	0x0800424f
 8004058:	0800424f 	.word	0x0800424f
 800405c:	0800408f 	.word	0x0800408f
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 8004060:	2100      	movs	r1, #0
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe fd34 	bl	8002ad0 <MotorController_setMode>
        break;
 8004068:	e0f1      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_ID:
        controller->device_id = *((uint8_t *)rx_frame->data);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	7a1a      	ldrb	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        break;
 8004074:	e0eb      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_FLASH:
        if (*((uint8_t *)rx_frame->data)) {
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	7a1b      	ldrb	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <MotorController_handleCANMessage+0x9fe>
          MotorController_storeConfig(controller);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe fe4e 	bl	8002d20 <MotorController_storeConfig>
        }
        else {
          MotorController_loadConfig(controller);
        }
        break;
 8004084:	e0e3      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
          MotorController_loadConfig(controller);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fe14 	bl	8002cb4 <MotorController_loadConfig>
        break;
 800408c:	e0df      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_HEARTBEAT:
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <MotorController_handleCANMessage+0xae0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8004096:	e0da      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_MODE:
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	7a1b      	ldrb	r3, [r3, #8]
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe fd16 	bl	8002ad0 <MotorController_setMode>
        break;
 80040a4:	e0d3      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_ENCODER_CPR:
        controller->encoder.cpr = *((uint32_t *)rx_frame->data);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	3308      	adds	r3, #8
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60da      	str	r2, [r3, #12]
        break;
 80040b2:	e0cc      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        controller->encoder.position_offset = *((float *)rx_frame->data);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]
        break;
 80040be:	e0c6      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_ENCODER_VELOCITY_FILTER_ALPHA:
        controller->encoder.velocity_filter_alpha = *((float *)rx_frame->data);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	619a      	str	r2, [r3, #24]
        break;
 80040ca:	e0c0      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	3304      	adds	r3, #4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80040e2:	e0b4      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        controller->current_controller.current_filter_alpha = *((float *)rx_frame->data);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80040ee:	e0ae      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        controller->current_controller.i_q_kp = *((float *)rx_frame->data);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	66da      	str	r2, [r3, #108]	; 0x6c
        controller->current_controller.i_q_ki = *((float *)rx_frame->data + 1);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	3304      	adds	r3, #4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004106:	e0a2      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        controller->current_controller.i_d_kp = *((float *)rx_frame->data);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	675a      	str	r2, [r3, #116]	; 0x74
        controller->current_controller.i_d_ki = *((float *)rx_frame->data + 1);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	3304      	adds	r3, #4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800411e:	e096      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_V_A_TARGET_I_A_MEASURED:
        controller->current_controller.v_a_target = *((float *)rx_frame->data);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800412a:	e090      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_V_B_TARGET_I_B_MEASURED:
        controller->current_controller.v_b_target = *((float *)rx_frame->data);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004138:	e089      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_V_C_TARGET_I_C_MEASURED:
        controller->current_controller.v_c_target = *((float *)rx_frame->data);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004146:	e082      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_TARGET_I_ALPHA_MEASURED:
        controller->current_controller.v_alpha_target = *((float *)rx_frame->data);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004154:	e07b      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_V_BETA_TARGET_I_BETA_MEASURED:
        controller->current_controller.v_beta_target = *((float *)rx_frame->data);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004162:	e074      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
 8004164:	2000043c 	.word	0x2000043c
 8004168:	20000604 	.word	0x20000604
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_TARGET:
        controller->current_controller.v_q_target = *((float *)rx_frame->data);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	3308      	adds	r3, #8
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        controller->current_controller.v_d_target = *((float *)rx_frame->data + 1);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	3304      	adds	r3, #4
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8004186:	e062      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_TARGET_MEASURED:
        controller->current_controller.i_q_target = *((float *)rx_frame->data);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8004194:	e05b      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_CURRENT_CONTROLLER_I_D_TARGET_MEASURED:
        controller->current_controller.i_d_target = *((float *)rx_frame->data);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        break;
 80041a2:	e054      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_KP_KI:
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	3304      	adds	r3, #4
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        break;
 80041be:	e046      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_KD:
        controller->position_controller.position_kd = *((float *)rx_frame->data);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        break;
 80041cc:	e03f      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        controller->position_controller.torque_limit_lower = *((float *)rx_frame->data);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        controller->position_controller.torque_limit_upper = *((float *)rx_frame->data + 1);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	3304      	adds	r3, #4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        break;
 80041e8:	e031      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        controller->position_controller.velocity_limit_lower = *((float *)rx_frame->data);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        controller->position_controller.velocity_limit_upper = *((float *)rx_frame->data + 1);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3308      	adds	r3, #8
 80041fa:	3304      	adds	r3, #4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        break;
 8004204:	e023      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	3304      	adds	r3, #4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        break;
 8004220:	e015      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        break;
 800422e:	e00e      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        break;
 800423c:	e007      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        break;
 800424a:	e000      	b.n	800424e <MotorController_handleCANMessage+0xbc6>
    return;
 800424c:	bf00      	nop
    }
  }
}
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	ed87 0a03 	vstr	s0, [r7, #12]
 800425e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004262:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8004266:	ed97 7a03 	vldr	s14, [r7, #12]
 800426a:	edd7 7a01 	vldr	s15, [r7, #4]
 800426e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004276:	dd01      	ble.n	800427c <clampf+0x28>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	e00b      	b.n	8004294 <clampf+0x40>
 800427c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004280:	edd7 7a02 	vldr	s15, [r7, #8]
 8004284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428c:	d501      	bpl.n	8004292 <clampf+0x3e>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	e000      	b.n	8004294 <clampf+0x40>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	ee07 3a90 	vmov	s15, r3
}
 8004298:	eeb0 0a67 	vmov.f32	s0, s15
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  controller->position_kp = 0.03;//0.03;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <PositionController_init+0x60>)
 80042b4:	601a      	str	r2, [r3, #0]
  controller->position_ki = 0;//0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	605a      	str	r2, [r3, #4]
  controller->position_kd = 0.01;//0.01;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <PositionController_init+0x64>)
 80042c2:	609a      	str	r2, [r3, #8]
  controller->position_kdd = 0.01;//0.01;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <PositionController_init+0x64>)
 80042c8:	60da      	str	r2, [r3, #12]

  controller->torque_limit_lower = -0.1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a10      	ldr	r2, [pc, #64]	; (8004310 <PositionController_init+0x68>)
 80042ce:	615a      	str	r2, [r3, #20]
  controller->torque_limit_upper = 0.1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a10      	ldr	r2, [pc, #64]	; (8004314 <PositionController_init+0x6c>)
 80042d4:	611a      	str	r2, [r3, #16]

  controller->velocity_limit_lower = -20;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a0f      	ldr	r2, [pc, #60]	; (8004318 <PositionController_init+0x70>)
 80042da:	61da      	str	r2, [r3, #28]
  controller->velocity_limit_upper = 20;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <PositionController_init+0x74>)
 80042e0:	619a      	str	r2, [r3, #24]

  controller->position_limit_lower = -100;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <PositionController_init+0x78>)
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
  controller->position_limit_upper = 100;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <PositionController_init+0x7c>)
 80042ec:	621a      	str	r2, [r3, #32]

  controller->acceleration_limit_lower = -20;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a09      	ldr	r2, [pc, #36]	; (8004318 <PositionController_init+0x70>)
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c
  controller->acceleration_limit_upper = 20;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <PositionController_init+0x74>)
 80042f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	3cf5c28f 	.word	0x3cf5c28f
 800430c:	3c23d70a 	.word	0x3c23d70a
 8004310:	bdcccccd 	.word	0xbdcccccd
 8004314:	3dcccccd 	.word	0x3dcccccd
 8004318:	c1a00000 	.word	0xc1a00000
 800431c:	41a00000 	.word	0x41a00000
 8004320:	c2c80000 	.word	0xc2c80000
 8004324:	42c80000 	.word	0x42c80000

08004328 <PositionController_update>:

void PositionController_update(PositionController *controller) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  //  torque = position_integrator +
  //           kp * kp_scale * position_error +
  //           kd * kd_scale * velocity_error +
  //           command_torque

  controller->position_target = clampf(
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	edd3 6a08 	vldr	s13, [r3, #32]
 8004342:	eeb0 1a66 	vmov.f32	s2, s13
 8004346:	eef0 0a47 	vmov.f32	s1, s14
 800434a:	eeb0 0a67 	vmov.f32	s0, s15
 800434e:	f7ff ff81 	bl	8004254 <clampf>
 8004352:	eef0 7a40 	vmov.f32	s15, s0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
      controller->position_target,
      controller->position_limit_lower,
      controller->position_limit_upper);

  controller->position_setpoint =
      controller->position_target - controller->position_measured;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004368:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->position_setpoint =
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  controller->velocity_target = controller->velocity_measured;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c

  controller->velocity_target = clampf(
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	ed93 7a07 	vldr	s14, [r3, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	edd3 6a06 	vldr	s13, [r3, #24]
 800438c:	eeb0 1a66 	vmov.f32	s2, s13
 8004390:	eef0 0a47 	vmov.f32	s1, s14
 8004394:	eeb0 0a67 	vmov.f32	s0, s15
 8004398:	f7ff ff5c 	bl	8004254 <clampf>
 800439c:	eef0 7a40 	vmov.f32	s15, s0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
      controller->velocity_target,
      controller->velocity_limit_lower,
      controller->velocity_limit_upper);

  controller->velocity_setpoint =
      controller->velocity_target - controller->velocity_measured;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80043b2:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->velocity_setpoint =
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  float acceleration_setpoint = clampf(
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80043ce:	eeb0 1a66 	vmov.f32	s2, s13
 80043d2:	eef0 0a47 	vmov.f32	s1, s14
 80043d6:	eeb0 0a67 	vmov.f32	s0, s15
 80043da:	f7ff ff3b 	bl	8004254 <clampf>
 80043de:	eeb0 7a40 	vmov.f32	s14, s0
      controller->acceleration_measured,
      controller->acceleration_limit_lower,
      controller->acceleration_limit_upper) - controller->acceleration_measured;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
  float acceleration_setpoint = clampf(
 80043e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ec:	edc7 7a03 	vstr	s15, [r7, #12]

  controller->torque_target =
      controller->position_kp * controller->position_setpoint
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	ed93 7a00 	vldr	s14, [r3]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80043fc:	ee27 7a27 	vmul.f32	s14, s14, s15
    + controller->position_kd * controller->velocity_setpoint
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	edd3 6a02 	vldr	s13, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800440c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004410:	ee37 7a27 	vadd.f32	s14, s14, s15
    + controller->position_kdd * acceleration_setpoint;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	edd3 6a03 	vldr	s13, [r3, #12]
 800441a:	edd7 7a03 	vldr	s15, [r7, #12]
 800441e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004422:	ee77 7a27 	vadd.f32	s15, s14, s15
  controller->torque_target =
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  controller->torque_target = clampf(
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	ed93 7a05 	vldr	s14, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	edd3 6a04 	vldr	s13, [r3, #16]
 800443e:	eeb0 1a66 	vmov.f32	s2, s13
 8004442:	eef0 0a47 	vmov.f32	s1, s14
 8004446:	eeb0 0a67 	vmov.f32	s0, s15
 800444a:	f7ff ff03 	bl	8004254 <clampf>
 800444e:	eef0 7a40 	vmov.f32	s15, s0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
      controller->torque_target,
      controller->torque_limit_lower,
      controller->torque_limit_upper);

  controller->torque_setpoint =
      controller->torque_target - controller->torque_measured;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004464:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->torque_setpoint =
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//  controller->torque_setpoint = clampf(
//      controller->torque_setpoint,
//      controller->torque_limit_lower,
//      controller->torque_limit_upper);
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004480:	edc7 0a02 	vstr	s1, [r7, #8]
 8004484:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8004488:	ed97 7a03 	vldr	s14, [r7, #12]
 800448c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004498:	dd01      	ble.n	800449e <clampf+0x28>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	e00b      	b.n	80044b6 <clampf+0x40>
 800449e:	ed97 7a03 	vldr	s14, [r7, #12]
 80044a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80044a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d501      	bpl.n	80044b4 <clampf+0x3e>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	e000      	b.n	80044b6 <clampf+0x40>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	ee07 3a90 	vmov	s15, r3
}
 80044ba:	eeb0 0a67 	vmov.f32	s0, s15
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <PowerStage_init>:
 *      Author: TK
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  powerstage->htim = htim;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	601a      	str	r2, [r3, #0]
  powerstage->hadc1 = hadc1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	605a      	str	r2, [r3, #4]
  powerstage->hadc2 = hadc2;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	609a      	str	r2, [r3, #8]

  powerstage->bus_voltage_measured = 12.;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <PowerStage_init+0x34>)
 80044ec:	621a      	str	r2, [r3, #32]

  PowerStage_disable(powerstage);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f838 	bl	8004564 <PowerStage_disable>
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	41400000 	.word	0x41400000

08004500 <PowerStage_start>:

void PowerStage_start(PowerStage *powerstage) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(powerstage->htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f005 fc0d 	bl	8009d2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f005 fcd3 	bl	8009ec4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f006 fdcb 	bl	800b0c0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2104      	movs	r1, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f005 fcc7 	bl	8009ec4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2104      	movs	r1, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f006 fdbf 	bl	800b0c0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2108      	movs	r1, #8
 8004548:	4618      	mov	r0, r3
 800454a:	f005 fcbb 	bl	8009ec4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2108      	movs	r1, #8
 8004554:	4618      	mov	r0, r3
 8004556:	f006 fdb3 	bl	800b0c0 <HAL_TIMEx_PWMN_Start>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <PowerStage_disable>:

uint8_t PowerStage_isEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disable(PowerStage *powerstage) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800456c:	2200      	movs	r2, #0
 800456e:	2180      	movs	r1, #128	; 0x80
 8004570:	4808      	ldr	r0, [pc, #32]	; (8004594 <PowerStage_disable+0x30>)
 8004572:	f003 fd09 	bl	8007f88 <HAL_GPIO_WritePin>
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	48000400 	.word	0x48000400

08004598 <PowerStage_enable>:

void PowerStage_enable(PowerStage *powerstage) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80045b4:	2201      	movs	r2, #1
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <PowerStage_enable+0x30>)
 80045ba:	f003 fce5 	bl	8007f88 <HAL_GPIO_WritePin>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	48000400 	.word	0x48000400

080045cc <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80045d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80045dc:	ed87 1a00 	vstr	s2, [r7]
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80045e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80045ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045fe:	edc7 7a02 	vstr	s15, [r7, #8]
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	ed93 7a08 	vldr	s14, [r3, #32]
 8004608:	edd7 6a01 	vldr	s13, [r7, #4]
 800460c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004618:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800461c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004620:	edc7 7a01 	vstr	s15, [r7, #4]
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	ed93 7a08 	vldr	s14, [r3, #32]
 800462a:	edd7 6a00 	vldr	s13, [r7]
 800462e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004636:	ee77 7a87 	vadd.f32	s15, s15, s14
 800463a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800463e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004642:	edc7 7a00 	vstr	s15, [r7]

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 8004646:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004714 <PowerStage_setBridgeOutput+0x148>
 800464a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8004718 <PowerStage_setBridgeOutput+0x14c>
 800464e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004652:	f7ff ff10 	bl	8004476 <clampf>
 8004656:	ed87 0a02 	vstr	s0, [r7, #8]
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
 800465a:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8004714 <PowerStage_setBridgeOutput+0x148>
 800465e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8004718 <PowerStage_setBridgeOutput+0x14c>
 8004662:	ed97 0a01 	vldr	s0, [r7, #4]
 8004666:	f7ff ff06 	bl	8004476 <clampf>
 800466a:	ed87 0a01 	vstr	s0, [r7, #4]
  v_c = clampf(v_c, 0.02f, 0.98f);
 800466e:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8004714 <PowerStage_setBridgeOutput+0x148>
 8004672:	eddf 0a29 	vldr	s1, [pc, #164]	; 8004718 <PowerStage_setBridgeOutput+0x14c>
 8004676:	ed97 0a00 	vldr	s0, [r7]
 800467a:	f7ff fefc 	bl	8004476 <clampf>
 800467e:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	3301      	adds	r3, #1
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004694:	edd7 7a02 	vldr	s15, [r7, #8]
 8004698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a0:	ee17 3a90 	vmov	r3, s15
 80046a4:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	3301      	adds	r3, #1
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80046bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c4:	ee17 3a90 	vmov	r3, s15
 80046c8:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	3301      	adds	r3, #1
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046dc:	edd7 7a00 	vldr	s15, [r7]
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e8:	ee17 3a90 	vmov	r3, s15
 80046ec:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	8afa      	ldrh	r2, [r7, #22]
 80046f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	8aba      	ldrh	r2, [r7, #20]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	8a7a      	ldrh	r2, [r7, #18]
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800470c:	bf00      	nop
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	3f7ae148 	.word	0x3f7ae148
 8004718:	3ca3d70a 	.word	0x3ca3d70a

0800471c <PowerStage_calibratePhaseCurrentOffset>:


void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  powerstage->adc_reading_offset[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2109      	movs	r1, #9
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fa9a 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 8004730:	4603      	mov	r3, r0
 8004732:	b21a      	sxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	835a      	strh	r2, [r3, #26]
  powerstage->adc_reading_offset[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2109      	movs	r1, #9
 800473e:	4618      	mov	r0, r3
 8004740:	f001 fa90 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 8004744:	4603      	mov	r3, r0
 8004746:	b21a      	sxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	839a      	strh	r2, [r3, #28]
  powerstage->adc_reading_offset[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f240 110f 	movw	r1, #271	; 0x10f
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fa85 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 800475a:	4603      	mov	r3, r0
 800475c:	b21a      	sxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	83da      	strh	r2, [r3, #30]

}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	0000      	movs	r0, r0
 800476c:	0000      	movs	r0, r0
	...

08004770 <PowerStage_getBusVoltage>:

void PowerStage_getBusVoltage(PowerStage *powerstage) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  powerstage->bus_voltage_measured = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f240 110f 	movw	r1, #271	; 0x10f
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fa6f 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 8004786:	4603      	mov	r3, r0
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fee3 	bl	8000554 <__aeabi_ui2d>
 800478e:	a30a      	add	r3, pc, #40	; (adr r3, 80047b8 <PowerStage_getBusVoltage+0x48>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb ff58 	bl	8000648 <__aeabi_dmul>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc fa2a 	bl	8000bf8 <__aeabi_d2f>
 80047a4:	4602      	mov	r2, r0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	f3af 8000 	nop.w
 80047b8:	99999999 	.word	0x99999999
 80047bc:	3f92f999 	.word	0x3f92f999

080047c0 <PowerStage_getPhaseCurrent>:

void PowerStage_getPhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2109      	movs	r1, #9
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 fa45 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 80047da:	4603      	mov	r3, r0
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	829a      	strh	r2, [r3, #20]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2109      	movs	r1, #9
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fa3b 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	82da      	strh	r2, [r3, #22]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f240 110f 	movw	r1, #271	; 0x10f
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 fa30 	bl	8005c64 <HAL_ADCEx_InjectedGetValue>
 8004804:	4603      	mov	r3, r0
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	831a      	strh	r2, [r3, #24]

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8a9b      	ldrh	r3, [r3, #20]
 8004810:	461a      	mov	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004822:	eef1 7a67 	vneg.f32	s15, s15
 8004826:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800488c <PowerStage_getPhaseCurrent+0xcc>
 800482a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	edc3 7a00 	vstr	s15, [r3]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8adb      	ldrh	r3, [r3, #22]
 8004838:	461a      	mov	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800484a:	eef1 7a67 	vneg.f32	s15, s15
 800484e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800488c <PowerStage_getPhaseCurrent+0xcc>
 8004852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	edc3 7a00 	vstr	s15, [r3]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8b1b      	ldrh	r3, [r3, #24]
 8004860:	461a      	mov	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004872:	eef1 7a67 	vneg.f32	s15, s15
 8004876:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800488c <PowerStage_getPhaseCurrent+0xcc>
 800487a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	edc3 7a00 	vstr	s15, [r3]
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	3c898000 	.word	0x3c898000

08004890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_MspInit+0x44>)
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <HAL_MspInit+0x44>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6613      	str	r3, [r2, #96]	; 0x60
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_MspInit+0x44>)
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_MspInit+0x44>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_MspInit+0x44>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_MspInit+0x44>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000

080048d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b09c      	sub	sp, #112	; 0x70
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048f0:	f107 0318 	add.w	r3, r7, #24
 80048f4:	2244      	movs	r2, #68	; 0x44
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f007 fcb7 	bl	800c26c <memset>
  if(hadc->Instance==ADC1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004906:	d157      	bne.n	80049b8 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800490e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004912:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004914:	f107 0318 	add.w	r3, r7, #24
 8004918:	4618      	mov	r0, r3
 800491a:	f004 fa27 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004924:	f7fd ff86 	bl	8002834 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_ADC_MspInit+0x13c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <HAL_ADC_MspInit+0x13c>)
 8004930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004932:	4b38      	ldr	r3, [pc, #224]	; (8004a14 <HAL_ADC_MspInit+0x13c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10b      	bne.n	8004952 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800495e:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004976:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004982:	2301      	movs	r3, #1
 8004984:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004986:	2303      	movs	r3, #3
 8004988:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498a:	2300      	movs	r3, #0
 800498c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004992:	4619      	mov	r1, r3
 8004994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004998:	f003 f95c 	bl	8007c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800499c:	f241 0302 	movw	r3, #4098	; 0x1002
 80049a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049a2:	2303      	movs	r3, #3
 80049a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049ae:	4619      	mov	r1, r3
 80049b0:	481a      	ldr	r0, [pc, #104]	; (8004a1c <HAL_ADC_MspInit+0x144>)
 80049b2:	f003 f94f 	bl	8007c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80049b6:	e029      	b.n	8004a0c <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_ADC_MspInit+0x148>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d124      	bne.n	8004a0c <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80049c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80049c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80049cc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049ce:	f107 0318 	add.w	r3, r7, #24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f004 f9ca 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_ADC_MspInit+0x10a>
      Error_Handler();
 80049de:	f7fd ff29 	bl	8002834 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <HAL_ADC_MspInit+0x13c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <HAL_ADC_MspInit+0x13c>)
 80049ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_ADC_MspInit+0x13c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d10b      	bne.n	8004a0c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 80049fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_ADC_MspInit+0x140>)
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	3770      	adds	r7, #112	; 0x70
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000778 	.word	0x20000778
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	48000400 	.word	0x48000400
 8004a20:	50000100 	.word	0x50000100

08004a24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b09a      	sub	sp, #104	; 0x68
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	2244      	movs	r2, #68	; 0x44
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f007 fc11 	bl	800c26c <memset>
  if(hfdcan->Instance==FDCAN1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <HAL_FDCAN_MspInit+0xcc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d149      	bne.n	8004ae8 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a5e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a60:	f107 0310 	add.w	r3, r7, #16
 8004a64:	4618      	mov	r0, r3
 8004a66:	f004 f981 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004a70:	f7fd fee0 	bl	8002834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a74:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <HAL_FDCAN_MspInit+0xd0>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <HAL_FDCAN_MspInit+0xd0>)
 8004a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_FDCAN_MspInit+0xd0>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_FDCAN_MspInit+0xd0>)
 8004a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_FDCAN_MspInit+0xd0>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_FDCAN_MspInit+0xd0>)
 8004a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004aa4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004aa8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004ab6:	2309      	movs	r3, #9
 8004ab8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ac4:	f003 f8c6 	bl	8007c54 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2104      	movs	r1, #4
 8004acc:	2015      	movs	r0, #21
 8004ace:	f001 ff60 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004ad2:	2015      	movs	r0, #21
 8004ad4:	f001 ff77 	bl	80069c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2104      	movs	r1, #4
 8004adc:	2016      	movs	r0, #22
 8004ade:	f001 ff58 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004ae2:	2016      	movs	r0, #22
 8004ae4:	f001 ff6f 	bl	80069c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004ae8:	bf00      	nop
 8004aea:	3768      	adds	r7, #104	; 0x68
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40006400 	.word	0x40006400
 8004af4:	40021000 	.word	0x40021000

08004af8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <HAL_OPAMP_MspInit+0xd8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d119      	bne.n	8004b4e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004b32:	230a      	movs	r3, #10
 8004b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b36:	2303      	movs	r3, #3
 8004b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b48:	f003 f884 	bl	8007c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004b4c:	e03b      	b.n	8004bc6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <HAL_OPAMP_MspInit+0xe0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d119      	bne.n	8004b8c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004b70:	23a0      	movs	r3, #160	; 0xa0
 8004b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b74:	2303      	movs	r3, #3
 8004b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	4619      	mov	r1, r3
 8004b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b86:	f003 f865 	bl	8007c54 <HAL_GPIO_Init>
}
 8004b8a:	e01c      	b.n	8004bc6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <HAL_OPAMP_MspInit+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d117      	bne.n	8004bc6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b96:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_OPAMP_MspInit+0xdc>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004bae:	2305      	movs	r3, #5
 8004bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4807      	ldr	r0, [pc, #28]	; (8004be0 <HAL_OPAMP_MspInit+0xe8>)
 8004bc2:	f003 f847 	bl	8007c54 <HAL_GPIO_Init>
}
 8004bc6:	bf00      	nop
 8004bc8:	3728      	adds	r7, #40	; 0x28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40010300 	.word	0x40010300
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40010304 	.word	0x40010304
 8004bdc:	40010308 	.word	0x40010308
 8004be0:	48000400 	.word	0x48000400

08004be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_SPI_MspInit+0x8c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12f      	bne.n	8004c66 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_SPI_MspInit+0x90>)
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <HAL_SPI_MspInit+0x90>)
 8004c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c10:	6613      	str	r3, [r2, #96]	; 0x60
 8004c12:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <HAL_SPI_MspInit+0x90>)
 8004c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <HAL_SPI_MspInit+0x90>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <HAL_SPI_MspInit+0x90>)
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_SPI_MspInit+0x90>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004c36:	2338      	movs	r3, #56	; 0x38
 8004c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c42:	2302      	movs	r3, #2
 8004c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c46:	2305      	movs	r3, #5
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4809      	ldr	r0, [pc, #36]	; (8004c78 <HAL_SPI_MspInit+0x94>)
 8004c52:	f002 ffff 	bl	8007c54 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004c56:	2200      	movs	r2, #0
 8004c58:	2102      	movs	r1, #2
 8004c5a:	2023      	movs	r0, #35	; 0x23
 8004c5c:	f001 fe99 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004c60:	2023      	movs	r0, #35	; 0x23
 8004c62:	f001 feb0 	bl	80069c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c66:	bf00      	nop
 8004c68:	3728      	adds	r7, #40	; 0x28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40013000 	.word	0x40013000
 8004c74:	40021000 	.word	0x40021000
 8004c78:	48000400 	.word	0x48000400

08004c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a30      	ldr	r2, [pc, #192]	; (8004d4c <HAL_TIM_Base_MspInit+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d114      	bne.n	8004cb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c92:	4a2f      	ldr	r2, [pc, #188]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004c94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c98:	6613      	str	r3, [r2, #96]	; 0x60
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2101      	movs	r1, #1
 8004caa:	2019      	movs	r0, #25
 8004cac:	f001 fe71 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004cb0:	2019      	movs	r0, #25
 8004cb2:	f001 fe88 	bl	80069c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004cb6:	e044      	b.n	8004d42 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d114      	bne.n	8004cec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	201c      	movs	r0, #28
 8004ce0:	f001 fe57 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ce4:	201c      	movs	r0, #28
 8004ce6:	f001 fe6e 	bl	80069c6 <HAL_NVIC_EnableIRQ>
}
 8004cea:	e02a      	b.n	8004d42 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_TIM_Base_MspInit+0xd8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d114      	bne.n	8004d20 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cf6:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	6593      	str	r3, [r2, #88]	; 0x58
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2102      	movs	r1, #2
 8004d12:	201e      	movs	r0, #30
 8004d14:	f001 fe3d 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d18:	201e      	movs	r0, #30
 8004d1a:	f001 fe54 	bl	80069c6 <HAL_NVIC_EnableIRQ>
}
 8004d1e:	e010      	b.n	8004d42 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <HAL_TIM_Base_MspInit+0xdc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10b      	bne.n	8004d42 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_TIM_Base_MspInit+0xd4>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40001000 	.word	0x40001000

08004d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <HAL_TIM_MspPostInit+0xc4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d14b      	bne.n	8004e16 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_TIM_MspPostInit+0xc8>)
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d82:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <HAL_TIM_MspPostInit+0xc8>)
 8004d84:	f043 0302 	orr.w	r3, r3, #2
 8004d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d8a:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <HAL_TIM_MspPostInit+0xc8>)
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_TIM_MspPostInit+0xc8>)
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	4a22      	ldr	r2, [pc, #136]	; (8004e24 <HAL_TIM_MspPostInit+0xc8>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_TIM_MspPostInit+0xc8>)
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004dae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db4:	2302      	movs	r3, #2
 8004db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004dc0:	2306      	movs	r3, #6
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4817      	ldr	r0, [pc, #92]	; (8004e28 <HAL_TIM_MspPostInit+0xcc>)
 8004dcc:	f002 ff42 	bl	8007c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004de2:	2304      	movs	r3, #4
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de6:	f107 0314 	add.w	r3, r7, #20
 8004dea:	4619      	mov	r1, r3
 8004dec:	480e      	ldr	r0, [pc, #56]	; (8004e28 <HAL_TIM_MspPostInit+0xcc>)
 8004dee:	f002 ff31 	bl	8007c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004df2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e00:	2300      	movs	r3, #0
 8004e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004e04:	2306      	movs	r3, #6
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e12:	f002 ff1f 	bl	8007c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e16:	bf00      	nop
 8004e18:	3728      	adds	r7, #40	; 0x28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48000400 	.word	0x48000400

08004e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b09a      	sub	sp, #104	; 0x68
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	2244      	movs	r2, #68	; 0x44
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f007 fa0d 	bl	800c26c <memset>
  if(huart->Instance==USART3)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_UART_MspInit+0xa8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d136      	bne.n	8004eca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f003 ff7f 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004e74:	f7fd fcde 	bl	8002834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_UART_MspInit+0xac>)
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_UART_MspInit+0xac>)
 8004e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e82:	6593      	str	r3, [r2, #88]	; 0x58
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_UART_MspInit+0xac>)
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_UART_MspInit+0xac>)
 8004e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e94:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <HAL_UART_MspInit+0xac>)
 8004e96:	f043 0302 	orr.w	r3, r3, #2
 8004e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <HAL_UART_MspInit+0xac>)
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ea8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004eac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004eba:	2307      	movs	r3, #7
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4805      	ldr	r0, [pc, #20]	; (8004edc <HAL_UART_MspInit+0xb0>)
 8004ec6:	f002 fec5 	bl	8007c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004eca:	bf00      	nop
 8004ecc:	3768      	adds	r7, #104	; 0x68
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40004800 	.word	0x40004800
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	48000400 	.word	0x48000400

08004ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ee4:	e7fe      	b.n	8004ee4 <NMI_Handler+0x4>

08004ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eea:	e7fe      	b.n	8004eea <HardFault_Handler+0x4>

08004eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ef0:	e7fe      	b.n	8004ef0 <MemManage_Handler+0x4>

08004ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ef6:	e7fe      	b.n	8004ef6 <BusFault_Handler+0x4>

08004ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004efc:	e7fe      	b.n	8004efc <UsageFault_Handler+0x4>

08004efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f2c:	f000 f992 	bl	8005254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f30:	bf00      	nop
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004f38:	4802      	ldr	r0, [pc, #8]	; (8004f44 <FDCAN1_IT0_IRQHandler+0x10>)
 8004f3a:	f002 f9a5 	bl	8007288 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000043c 	.word	0x2000043c

08004f48 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <FDCAN1_IT1_IRQHandler+0x10>)
 8004f4e:	f002 f99b 	bl	8007288 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000043c 	.word	0x2000043c

08004f5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004f62:	f005 f8af 	bl	800a0c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200005b8 	.word	0x200005b8

08004f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f74:	4802      	ldr	r0, [pc, #8]	; (8004f80 <TIM2_IRQHandler+0x10>)
 8004f76:	f005 f8a5 	bl	800a0c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000604 	.word	0x20000604

08004f84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <TIM4_IRQHandler+0x10>)
 8004f8a:	f005 f89b 	bl	800a0c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000650 	.word	0x20000650

08004f98 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <SPI1_IRQHandler+0x10>)
 8004f9e:	f004 fa31 	bl	8009404 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000554 	.word	0x20000554

08004fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	return 1;
 8004fb0:	2301      	movs	r3, #1
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <_kill>:

int _kill(int pid, int sig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fc6:	f007 f927 	bl	800c218 <__errno>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2216      	movs	r2, #22
 8004fce:	601a      	str	r2, [r3, #0]
	return -1;
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <_exit>:

void _exit (int status)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ffe7 	bl	8004fbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fee:	e7fe      	b.n	8004fee <_exit+0x12>

08004ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e00a      	b.n	8005018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005002:	f3af 8000 	nop.w
 8005006:	4601      	mov	r1, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	60ba      	str	r2, [r7, #8]
 800500e:	b2ca      	uxtb	r2, r1
 8005010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	dbf0      	blt.n	8005002 <_read+0x12>
	}

return len;
 8005020:	687b      	ldr	r3, [r7, #4]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e009      	b.n	8005050 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	60ba      	str	r2, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3301      	adds	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	dbf1      	blt.n	800503c <_write+0x12>
	}
	return len;
 8005058:	687b      	ldr	r3, [r7, #4]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_close>:

int _close(int file)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
	return -1;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800508a:	605a      	str	r2, [r3, #4]
	return 0;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_isatty>:

int _isatty(int file)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
	return 1;
 80050a2:	2301      	movs	r3, #1
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	return 0;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <_sbrk+0x5c>)
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <_sbrk+0x60>)
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <_sbrk+0x64>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <_sbrk+0x64>)
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <_sbrk+0x68>)
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <_sbrk+0x64>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d207      	bcs.n	800510c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050fc:	f007 f88c 	bl	800c218 <__errno>
 8005100:	4603      	mov	r3, r0
 8005102:	220c      	movs	r2, #12
 8005104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	e009      	b.n	8005120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <_sbrk+0x64>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <_sbrk+0x64>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <_sbrk+0x64>)
 800511c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20008000 	.word	0x20008000
 800512c:	00000400 	.word	0x00000400
 8005130:	2000077c 	.word	0x2000077c
 8005134:	20000798 	.word	0x20000798

08005138 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <SystemInit+0x20>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <SystemInit+0x20>)
 8005144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800515c:	480d      	ldr	r0, [pc, #52]	; (8005194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800515e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005160:	480d      	ldr	r0, [pc, #52]	; (8005198 <LoopForever+0x6>)
  ldr r1, =_edata
 8005162:	490e      	ldr	r1, [pc, #56]	; (800519c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005164:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <LoopForever+0xe>)
  movs r3, #0
 8005166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005168:	e002      	b.n	8005170 <LoopCopyDataInit>

0800516a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800516a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800516c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800516e:	3304      	adds	r3, #4

08005170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005174:	d3f9      	bcc.n	800516a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005176:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005178:	4c0b      	ldr	r4, [pc, #44]	; (80051a8 <LoopForever+0x16>)
  movs r3, #0
 800517a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800517c:	e001      	b.n	8005182 <LoopFillZerobss>

0800517e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800517e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005180:	3204      	adds	r2, #4

08005182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005184:	d3fb      	bcc.n	800517e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005186:	f7ff ffd7 	bl	8005138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800518a:	f007 f84b 	bl	800c224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800518e:	f7fc fe01 	bl	8001d94 <main>

08005192 <LoopForever>:

LoopForever:
    b LoopForever
 8005192:	e7fe      	b.n	8005192 <LoopForever>
  ldr   r0, =_estack
 8005194:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800519c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80051a0:	080106ac 	.word	0x080106ac
  ldr r2, =_sbss
 80051a4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80051a8:	20000794 	.word	0x20000794

080051ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051ac:	e7fe      	b.n	80051ac <ADC1_2_IRQHandler>

080051ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051b8:	2003      	movs	r0, #3
 80051ba:	f001 fbdf 	bl	800697c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051be:	200f      	movs	r0, #15
 80051c0:	f000 f80e 	bl	80051e0 <HAL_InitTick>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	71fb      	strb	r3, [r7, #7]
 80051ce:	e001      	b.n	80051d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051d0:	f7ff fb5e 	bl	8004890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051d4:	79fb      	ldrb	r3, [r7, #7]

}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_InitTick+0x68>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d022      	beq.n	800523a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80051f4:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_InitTick+0x6c>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <HAL_InitTick+0x68>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005200:	fbb1 f3f3 	udiv	r3, r1, r3
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fbea 	bl	80069e2 <HAL_SYSTICK_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10f      	bne.n	8005234 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d809      	bhi.n	800522e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800521a:	2200      	movs	r2, #0
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	f001 fbb6 	bl	8006992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_InitTick+0x70>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e007      	b.n	800523e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
 8005232:	e004      	b.n	800523e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e001      	b.n	800523e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000008 	.word	0x20000008
 800524c:	20000000 	.word	0x20000000
 8005250:	20000004 	.word	0x20000004

08005254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_IncTick+0x1c>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_IncTick+0x20>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4413      	add	r3, r2
 8005262:	4a03      	ldr	r2, [pc, #12]	; (8005270 <HAL_IncTick+0x1c>)
 8005264:	6013      	str	r3, [r2, #0]
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000780 	.word	0x20000780
 8005274:	20000008 	.word	0x20000008

08005278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return uwTick;
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <HAL_GetTick+0x14>)
 800527e:	681b      	ldr	r3, [r3, #0]
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000780 	.word	0x20000780

08005290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005298:	f7ff ffee 	bl	8005278 <HAL_GetTick>
 800529c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d004      	beq.n	80052b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <HAL_Delay+0x40>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052b4:	bf00      	nop
 80052b6:	f7ff ffdf 	bl	8005278 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d8f7      	bhi.n	80052b6 <HAL_Delay+0x26>
  {
  }
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000008 	.word	0x20000008

080052d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800530a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6093      	str	r3, [r2, #8]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005332:	d101      	bne.n	8005338 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005356:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800535a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005382:	d101      	bne.n	8005388 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053aa:	f043 0201 	orr.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <LL_ADC_IsEnabled+0x18>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <LL_ADC_IsEnabled+0x1a>
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d101      	bne.n	80053fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b08      	cmp	r3, #8
 800541c:	d101      	bne.n	8005422 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800543c:	2300      	movs	r3, #0
 800543e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e177      	b.n	800573a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fa3d 	bl	80048d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff54 	bl	800531e <LL_ADC_IsDeepPowerDownEnabled>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff ff3a 	bl	80052fa <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff6f 	bl	800536e <LL_ADC_IsInternalRegulatorEnabled>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d115      	bne.n	80054c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ff53 	bl	8005346 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054a0:	4b9c      	ldr	r3, [pc, #624]	; (8005714 <HAL_ADC_Init+0x2e4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	099b      	lsrs	r3, r3, #6
 80054a6:	4a9c      	ldr	r2, [pc, #624]	; (8005718 <HAL_ADC_Init+0x2e8>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	099b      	lsrs	r3, r3, #6
 80054ae:	3301      	adds	r3, #1
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80054b4:	e002      	b.n	80054bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f9      	bne.n	80054b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff ff51 	bl	800536e <LL_ADC_IsInternalRegulatorEnabled>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	f043 0210 	orr.w	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	f043 0201 	orr.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff76 	bl	80053e4 <LL_ADC_REG_IsConversionOngoing>
 80054f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 8110 	bne.w	8005728 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 810c 	bne.w	8005728 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005518:	f043 0202 	orr.w	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff4a 	bl	80053be <LL_ADC_IsEnabled>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d111      	bne.n	8005554 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005530:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005534:	f7ff ff43 	bl	80053be <LL_ADC_IsEnabled>
 8005538:	4604      	mov	r4, r0
 800553a:	4878      	ldr	r0, [pc, #480]	; (800571c <HAL_ADC_Init+0x2ec>)
 800553c:	f7ff ff3f 	bl	80053be <LL_ADC_IsEnabled>
 8005540:	4603      	mov	r3, r0
 8005542:	4323      	orrs	r3, r4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4619      	mov	r1, r3
 800554e:	4874      	ldr	r0, [pc, #464]	; (8005720 <HAL_ADC_Init+0x2f0>)
 8005550:	f7ff fec0 	bl	80052d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	7f5b      	ldrb	r3, [r3, #29]
 8005558:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800555e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005564:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800556a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005572:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800557e:	2b01      	cmp	r3, #1
 8005580:	d106      	bne.n	8005590 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	3b01      	subs	r3, #1
 8005588:	045b      	lsls	r3, r3, #17
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d009      	beq.n	80055ac <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	4b5c      	ldr	r3, [pc, #368]	; (8005724 <HAL_ADC_Init+0x2f4>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	430b      	orrs	r3, r1
 80055be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ff02 	bl	80053e4 <LL_ADC_REG_IsConversionOngoing>
 80055e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ff0f 	bl	800540a <LL_ADC_INJ_IsConversionOngoing>
 80055ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d16d      	bne.n	80056d0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d16a      	bne.n	80056d0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80055fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005606:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005608:	4313      	orrs	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005616:	f023 0302 	bic.w	r3, r3, #2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	69b9      	ldr	r1, [r7, #24]
 8005620:	430b      	orrs	r3, r1
 8005622:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d017      	beq.n	800565c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800563a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005644:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6911      	ldr	r1, [r2, #16]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	430b      	orrs	r3, r1
 8005656:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800565a:	e013      	b.n	8005684 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800566a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800567c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005680:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	2b01      	cmp	r3, #1
 800568c:	d118      	bne.n	80056c0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056a4:	4311      	orrs	r1, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056aa:	4311      	orrs	r1, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056b0:	430a      	orrs	r2, r1
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	611a      	str	r2, [r3, #16]
 80056be:	e007      	b.n	80056d0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10c      	bne.n	80056f2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f023 010f 	bic.w	r1, r3, #15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
 80056f0:	e007      	b.n	8005702 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 020f 	bic.w	r2, r2, #15
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	65da      	str	r2, [r3, #92]	; 0x5c
 8005712:	e011      	b.n	8005738 <HAL_ADC_Init+0x308>
 8005714:	20000000 	.word	0x20000000
 8005718:	053e2d63 	.word	0x053e2d63
 800571c:	50000100 	.word	0x50000100
 8005720:	50000300 	.word	0x50000300
 8005724:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	f043 0210 	orr.w	r2, r3, #16
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005738:	7ffb      	ldrb	r3, [r7, #31]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3724      	adds	r7, #36	; 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	bf00      	nop

08005744 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fe34 	bl	80053be <LL_ADC_IsEnabled>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d14d      	bne.n	80057f8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	4b28      	ldr	r3, [pc, #160]	; (8005804 <ADC_Enable+0xc0>)
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576e:	f043 0210 	orr.w	r2, r3, #16
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e039      	b.n	80057fa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fe03 	bl	8005396 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005790:	f7ff fd72 	bl	8005278 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005796:	e028      	b.n	80057ea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fe0e 	bl	80053be <LL_ADC_IsEnabled>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fdf2 	bl	8005396 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057b2:	f7ff fd61 	bl	8005278 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d914      	bls.n	80057ea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d00d      	beq.n	80057ea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f043 0210 	orr.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e007      	b.n	80057fa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d1cf      	bne.n	8005798 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	8000003f 	.word	0x8000003f

08005808 <LL_ADC_SetCommonPathInternalCh>:
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <LL_ADC_GetCommonPathInternalCh>:
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <LL_ADC_SetOffset>:
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3360      	adds	r3, #96	; 0x60
 800585e:	461a      	mov	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b08      	ldr	r3, [pc, #32]	; (8005890 <LL_ADC_SetOffset+0x44>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	03fff000 	.word	0x03fff000

08005894 <LL_ADC_GetOffsetChannel>:
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3360      	adds	r3, #96	; 0x60
 80058a2:	461a      	mov	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <LL_ADC_SetOffsetState>:
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3360      	adds	r3, #96	; 0x60
 80058d0:	461a      	mov	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <LL_ADC_SetOffsetSign>:
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3360      	adds	r3, #96	; 0x60
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	431a      	orrs	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LL_ADC_SetOffsetSaturation>:
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3360      	adds	r3, #96	; 0x60
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	431a      	orrs	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	601a      	str	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	615a      	str	r2, [r3, #20]
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <LL_ADC_INJ_GetTrigAuto>:
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_ADC_SetChannelSamplingTime>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3314      	adds	r3, #20
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	0e5b      	lsrs	r3, r3, #25
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	4413      	add	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0d1b      	lsrs	r3, r3, #20
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2107      	movs	r1, #7
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	401a      	ands	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	0d1b      	lsrs	r3, r3, #20
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	fa01 f303 	lsl.w	r3, r1, r3
 80059e8:	431a      	orrs	r2, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <LL_ADC_SetChannelSingleDiff>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10a      	bne.n	8005a26 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005a24:	e00a      	b.n	8005a3c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a32:	43db      	mvns	r3, r3
 8005a34:	401a      	ands	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	407f0000 	.word	0x407f0000

08005a4c <LL_ADC_GetMultimode>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 031f 	and.w	r3, r3, #31
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_ADC_IsEnabled>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <LL_ADC_IsEnabled+0x18>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <LL_ADC_IsEnabled+0x1a>
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_ADC_REG_IsConversionOngoing>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d101      	bne.n	8005aa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <LL_ADC_INJ_StartConversion>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ac8:	f043 0208 	orr.w	r2, r3, #8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <LL_ADC_INJ_IsConversionOngoing>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d101      	bne.n	8005af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b0c:	4853      	ldr	r0, [pc, #332]	; (8005c5c <HAL_ADCEx_InjectedStart+0x158>)
 8005b0e:	f7ff ff9d 	bl	8005a4c <LL_ADC_GetMultimode>
 8005b12:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ffdf 	bl	8005adc <LL_ADC_INJ_IsConversionOngoing>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
 8005b26:	e094      	b.n	8005c52 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b32:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d107      	bne.n	8005b58 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e07c      	b.n	8005c52 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_ADCEx_InjectedStart+0x62>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e075      	b.n	8005c52 <HAL_ADCEx_InjectedStart+0x14e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fde8 	bl	8005744 <ADC_Enable>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d164      	bne.n	8005c48 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	f023 0208 	bic.w	r2, r3, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60
 8005b96:	e002      	b.n	8005b9e <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <HAL_ADCEx_InjectedStart+0x15c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d002      	beq.n	8005bc2 <HAL_ADCEx_InjectedStart+0xbe>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	e001      	b.n	8005bc6 <HAL_ADCEx_InjectedStart+0xc2>
 8005bc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d002      	beq.n	8005bd4 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2260      	movs	r2, #96	; 0x60
 8005be6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_ADCEx_InjectedStart+0x15c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d002      	beq.n	8005c00 <HAL_ADCEx_InjectedStart+0xfc>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	e001      	b.n	8005c04 <HAL_ADCEx_InjectedStart+0x100>
 8005c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d008      	beq.n	8005c1e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b06      	cmp	r3, #6
 8005c16:	d002      	beq.n	8005c1e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	d10d      	bne.n	8005c3a <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff feb0 	bl	8005988 <LL_ADC_INJ_GetTrigAuto>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d110      	bne.n	8005c50 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff ff3e 	bl	8005ab4 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005c38:	e00a      	b.n	8005c50 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c46:	e003      	b.n	8005c50 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	50000300 	.word	0x50000300
 8005c60:	50000100 	.word	0x50000100

08005c64 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f240 321b 	movw	r2, #795	; 0x31b
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_ADCEx_InjectedGetValue+0x32>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8005c7e:	d21c      	bcs.n	8005cba <HAL_ADCEx_InjectedGetValue+0x56>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	f240 120f 	movw	r2, #271	; 0x10f
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d011      	beq.n	8005cae <HAL_ADCEx_InjectedGetValue+0x4a>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f240 2215 	movw	r2, #533	; 0x215
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d006      	beq.n	8005ca2 <HAL_ADCEx_InjectedGetValue+0x3e>
 8005c94:	e011      	b.n	8005cba <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c9e:	60fb      	str	r3, [r7, #12]
      break;
 8005ca0:	e011      	b.n	8005cc6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	60fb      	str	r3, [r7, #12]
      break;
 8005cac:	e00b      	b.n	8005cc6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb6:	60fb      	str	r3, [r7, #12]
      break;
 8005cb8:	e005      	b.n	8005cc6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc2:	60fb      	str	r3, [r7, #12]
      break;
 8005cc4:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b0b6      	sub	sp, #216	; 0xd8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d102      	bne.n	8005cfe <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f000 bcb5 	b.w	8006668 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d130      	bne.n	8005d78 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d179      	bne.n	8005e12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d010      	beq.n	8005d48 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	0e9b      	lsrs	r3, r3, #26
 8005d2c:	025b      	lsls	r3, r3, #9
 8005d2e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005d3a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d46:	e007      	b.n	8005d58 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0e9b      	lsrs	r3, r3, #26
 8005d4e:	025b      	lsls	r3, r3, #9
 8005d50:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d5e:	4b84      	ldr	r3, [pc, #528]	; (8005f70 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d74:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005d76:	e04c      	b.n	8005e12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d11d      	bne.n	8005dbc <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005da4:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005db0:	e004      	b.n	8005dbc <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	0e9b      	lsrs	r3, r3, #26
 8005dc2:	f003 021f 	and.w	r2, r3, #31
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005dea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e02:	4b5b      	ldr	r3, [pc, #364]	; (8005f70 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fe60 	bl	8005adc <LL_ADC_INJ_IsConversionOngoing>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d124      	bne.n	8005e6c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d112      	bne.n	8005e52 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e3c:	055a      	lsls	r2, r3, #21
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e44:	051b      	lsls	r3, r3, #20
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e00c      	b.n	8005e6c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e62:	055a      	lsls	r2, r3, #21
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fe0c 	bl	8005a8e <LL_ADC_REG_IsConversionOngoing>
 8005e76:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fe2c 	bl	8005adc <LL_ADC_INJ_IsConversionOngoing>
 8005e84:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f040 822e 	bne.w	80062ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 8229 	bne.w	80062ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d116      	bne.n	8005eda <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d108      	bne.n	8005ec8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005ec4:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005ec6:	e01f      	b.n	8005f08 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005ed6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005ed8:	e016      	b.n	8005f08 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d109      	bne.n	8005ef8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	f043 0220 	orr.w	r2, r3, #32
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005ef6:	e007      	b.n	8005f08 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005f06:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d110      	bne.n	8005f34 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	430b      	orrs	r3, r1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0202 	orr.w	r2, r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
 8005f32:	e007      	b.n	8005f44 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0202 	bic.w	r2, r2, #2
 8005f42:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4c:	d112      	bne.n	8005f74 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f7ff fd23 	bl	80059a4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fcfb 	bl	8005962 <LL_ADC_SetSamplingTimeCommonConfig>
 8005f6c:	e011      	b.n	8005f92 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8005f6e:	bf00      	nop
 8005f70:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6819      	ldr	r1, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	461a      	mov	r2, r3
 8005f82:	f7ff fd0f 	bl	80059a4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fce8 	bl	8005962 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	08db      	lsrs	r3, r3, #3
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d022      	beq.n	8005ffa <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6919      	ldr	r1, [r3, #16]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fc4:	f7ff fc42 	bl	800584c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6919      	ldr	r1, [r3, #16]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f7ff fc8e 	bl	80058f6 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d102      	bne.n	8005ff0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fee:	e000      	b.n	8005ff2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f7ff fc9a 	bl	800592c <LL_ADC_SetOffsetSaturation>
 8005ff8:	e179      	b.n	80062ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fc47 	bl	8005894 <LL_ADC_GetOffsetChannel>
 8006006:	4603      	mov	r3, r0
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fc3c 	bl	8005894 <LL_ADC_GetOffsetChannel>
 800601c:	4603      	mov	r3, r0
 800601e:	0e9b      	lsrs	r3, r3, #26
 8006020:	f003 021f 	and.w	r2, r3, #31
 8006024:	e01e      	b.n	8006064 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff fc31 	bl	8005894 <LL_ADC_GetOffsetChannel>
 8006032:	4603      	mov	r3, r0
 8006034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800603c:	fa93 f3a3 	rbit	r3, r3
 8006040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800604c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8006054:	2320      	movs	r3, #32
 8006056:	e004      	b.n	8006062 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8006058:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800605c:	fab3 f383 	clz	r3, r3
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0e9b      	lsrs	r3, r3, #26
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	e018      	b.n	80060ae <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006088:	fa93 f3a3 	rbit	r3, r3
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e004      	b.n	80060ae <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80060a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d106      	bne.n	80060c0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fc00 	bl	80058c0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fbe4 	bl	8005894 <LL_ADC_GetOffsetChannel>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <HAL_ADCEx_InjectedConfigChannel+0x418>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2101      	movs	r1, #1
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fbd9 	bl	8005894 <LL_ADC_GetOffsetChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	0e9b      	lsrs	r3, r3, #26
 80060e6:	f003 021f 	and.w	r2, r3, #31
 80060ea:	e01e      	b.n	800612a <HAL_ADCEx_InjectedConfigChannel+0x456>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fbce 	bl	8005894 <LL_ADC_GetOffsetChannel>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800610a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800610e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800611a:	2320      	movs	r3, #32
 800611c:	e004      	b.n	8006128 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800611e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	0e9b      	lsrs	r3, r3, #26
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	e018      	b.n	8006174 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800615e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8006166:	2320      	movs	r3, #32
 8006168:	e004      	b.n	8006174 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800616a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006174:	429a      	cmp	r2, r3
 8006176:	d106      	bne.n	8006186 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	2101      	movs	r1, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fb9d 	bl	80058c0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2102      	movs	r1, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fb81 	bl	8005894 <LL_ADC_GetOffsetChannel>
 8006192:	4603      	mov	r3, r0
 8006194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2102      	movs	r1, #2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fb76 	bl	8005894 <LL_ADC_GetOffsetChannel>
 80061a8:	4603      	mov	r3, r0
 80061aa:	0e9b      	lsrs	r3, r3, #26
 80061ac:	f003 021f 	and.w	r2, r3, #31
 80061b0:	e01e      	b.n	80061f0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2102      	movs	r1, #2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fb6b 	bl	8005894 <LL_ADC_GetOffsetChannel>
 80061be:	4603      	mov	r3, r0
 80061c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80061d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80061d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80061e0:	2320      	movs	r3, #32
 80061e2:	e004      	b.n	80061ee <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80061e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e8:	fab3 f383 	clz	r3, r3
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	e014      	b.n	8006232 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006210:	fa93 f3a3 	rbit	r3, r3
 8006214:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800621c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8006224:	2320      	movs	r3, #32
 8006226:	e004      	b.n	8006232 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8006228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800622c:	fab3 f383 	clz	r3, r3
 8006230:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006232:	429a      	cmp	r2, r3
 8006234:	d106      	bne.n	8006244 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	2102      	movs	r1, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fb3e 	bl	80058c0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2103      	movs	r1, #3
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fb22 	bl	8005894 <LL_ADC_GetOffsetChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2103      	movs	r1, #3
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fb17 	bl	8005894 <LL_ADC_GetOffsetChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	0e9b      	lsrs	r3, r3, #26
 800626a:	f003 021f 	and.w	r2, r3, #31
 800626e:	e017      	b.n	80062a0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2103      	movs	r1, #3
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fb0c 	bl	8005894 <LL_ADC_GetOffsetChannel>
 800627c:	4603      	mov	r3, r0
 800627e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006282:	fa93 f3a3 	rbit	r3, r3
 8006286:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800628c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8006292:	2320      	movs	r3, #32
 8006294:	e003      	b.n	800629e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8006296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006298:	fab3 f383 	clz	r3, r3
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	0e9b      	lsrs	r3, r3, #26
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	e011      	b.n	80062dc <HAL_ADCEx_InjectedConfigChannel+0x608>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80062c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80062ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80062d0:	2320      	movs	r3, #32
 80062d2:	e003      	b.n	80062dc <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80062d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062dc:	429a      	cmp	r2, r3
 80062de:	d106      	bne.n	80062ee <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2103      	movs	r1, #3
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fae9 	bl	80058c0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fbb8 	bl	8005a68 <LL_ADC_IsEnabled>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 8140 	bne.w	8006580 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	461a      	mov	r2, r3
 800630e:	f7ff fb75 	bl	80059fc <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4a8f      	ldr	r2, [pc, #572]	; (8006554 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8006318:	4293      	cmp	r3, r2
 800631a:	f040 8131 	bne.w	8006580 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	0e9b      	lsrs	r3, r3, #26
 8006334:	3301      	adds	r3, #1
 8006336:	f003 031f 	and.w	r3, r3, #31
 800633a:	2b09      	cmp	r3, #9
 800633c:	bf94      	ite	ls
 800633e:	2301      	movls	r3, #1
 8006340:	2300      	movhi	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e019      	b.n	800637a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800634e:	fa93 f3a3 	rbit	r3, r3
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006356:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800635e:	2320      	movs	r3, #32
 8006360:	e003      	b.n	800636a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8006362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006364:	fab3 f383 	clz	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3301      	adds	r3, #1
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b09      	cmp	r3, #9
 8006372:	bf94      	ite	ls
 8006374:	2301      	movls	r3, #1
 8006376:	2300      	movhi	r3, #0
 8006378:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637a:	2b00      	cmp	r3, #0
 800637c:	d079      	beq.n	8006472 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	0e9b      	lsrs	r3, r3, #26
 8006390:	3301      	adds	r3, #1
 8006392:	069b      	lsls	r3, r3, #26
 8006394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006398:	e015      	b.n	80063c6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80063a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80063ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e003      	b.n	80063be <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80063b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b8:	fab3 f383 	clz	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	3301      	adds	r3, #1
 80063c0:	069b      	lsls	r3, r3, #26
 80063c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	0e9b      	lsrs	r3, r3, #26
 80063d8:	3301      	adds	r3, #1
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2101      	movs	r1, #1
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	e017      	b.n	8006416 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e003      	b.n	800640a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	fab3 f383 	clz	r3, r3
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2101      	movs	r1, #1
 8006412:	fa01 f303 	lsl.w	r3, r1, r3
 8006416:	ea42 0103 	orr.w	r1, r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0e9b      	lsrs	r3, r3, #26
 800642c:	3301      	adds	r3, #1
 800642e:	f003 021f 	and.w	r2, r3, #31
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	e018      	b.n	800646e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8006454:	2320      	movs	r3, #32
 8006456:	e003      	b.n	8006460 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3301      	adds	r3, #1
 8006462:	f003 021f 	and.w	r2, r3, #31
 8006466:	4613      	mov	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4413      	add	r3, r2
 800646c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800646e:	430b      	orrs	r3, r1
 8006470:	e081      	b.n	8006576 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	0e9b      	lsrs	r3, r3, #26
 8006484:	3301      	adds	r3, #1
 8006486:	069b      	lsls	r3, r3, #26
 8006488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800648c:	e015      	b.n	80064ba <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	fa93 f3a3 	rbit	r3, r3
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80064a6:	2320      	movs	r3, #32
 80064a8:	e003      	b.n	80064b2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	3301      	adds	r3, #1
 80064b4:	069b      	lsls	r3, r3, #26
 80064b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_ADCEx_InjectedConfigChannel+0x806>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	0e9b      	lsrs	r3, r3, #26
 80064cc:	3301      	adds	r3, #1
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	e017      	b.n	800650a <HAL_ADCEx_InjectedConfigChannel+0x836>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	fa93 f3a3 	rbit	r3, r3
 80064e6:	61bb      	str	r3, [r7, #24]
  return result;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80064f2:	2320      	movs	r3, #32
 80064f4:	e003      	b.n	80064fe <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	fab3 f383 	clz	r3, r3
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	3301      	adds	r3, #1
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2101      	movs	r1, #1
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	ea42 0103 	orr.w	r1, r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	0e9b      	lsrs	r3, r3, #26
 8006520:	3301      	adds	r3, #1
 8006522:	f003 021f 	and.w	r2, r3, #31
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	3b1e      	subs	r3, #30
 800652e:	051b      	lsls	r3, r3, #20
 8006530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006534:	e01e      	b.n	8006574 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	fa93 f3a3 	rbit	r3, r3
 8006542:	60fb      	str	r3, [r7, #12]
  return result;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800654e:	2320      	movs	r3, #32
 8006550:	e006      	b.n	8006560 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8006552:	bf00      	nop
 8006554:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	fab3 f383 	clz	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	3301      	adds	r3, #1
 8006562:	f003 021f 	and.w	r2, r3, #31
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	3b1e      	subs	r3, #30
 800656e:	051b      	lsls	r3, r3, #20
 8006570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006574:	430b      	orrs	r3, r1
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	4619      	mov	r1, r3
 800657c:	f7ff fa12 	bl	80059a4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b3a      	ldr	r3, [pc, #232]	; (8006670 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d067      	beq.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800658c:	4839      	ldr	r0, [pc, #228]	; (8006674 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800658e:	f7ff f94e 	bl	800582e <LL_ADC_GetCommonPathInternalCh>
 8006592:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a37      	ldr	r2, [pc, #220]	; (8006678 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a35      	ldr	r2, [pc, #212]	; (800667c <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d127      	bne.n	80065fa <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d121      	bne.n	80065fa <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065be:	d14d      	bne.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065c8:	4619      	mov	r1, r3
 80065ca:	482a      	ldr	r0, [pc, #168]	; (8006674 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80065cc:	f7ff f91c 	bl	8005808 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80065d0:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	099b      	lsrs	r3, r3, #6
 80065d6:	4a2b      	ldr	r2, [pc, #172]	; (8006684 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	099a      	lsrs	r2, r3, #6
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	3318      	adds	r3, #24
 80065e8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80065ea:	e002      	b.n	80065f2 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f9      	bne.n	80065ec <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065f8:	e030      	b.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a22      	ldr	r2, [pc, #136]	; (8006688 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d113      	bne.n	800662c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10d      	bne.n	800662c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d020      	beq.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800661a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800661e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006622:	4619      	mov	r1, r3
 8006624:	4813      	ldr	r0, [pc, #76]	; (8006674 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006626:	f7ff f8ef 	bl	8005808 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800662a:	e017      	b.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a17      	ldr	r2, [pc, #92]	; (8006690 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d112      	bne.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006636:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800663a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10c      	bne.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a11      	ldr	r2, [pc, #68]	; (800668c <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800664c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006654:	4619      	mov	r1, r3
 8006656:	4807      	ldr	r0, [pc, #28]	; (8006674 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006658:	f7ff f8d6 	bl	8005808 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006664:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006668:	4618      	mov	r0, r3
 800666a:	37d8      	adds	r7, #216	; 0xd8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	80080000 	.word	0x80080000
 8006674:	50000300 	.word	0x50000300
 8006678:	c3210000 	.word	0xc3210000
 800667c:	90c00010 	.word	0x90c00010
 8006680:	20000000 	.word	0x20000000
 8006684:	053e2d63 	.word	0x053e2d63
 8006688:	c7520000 	.word	0xc7520000
 800668c:	50000100 	.word	0x50000100
 8006690:	cb840000 	.word	0xcb840000

08006694 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b0a1      	sub	sp, #132	; 0x84
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e08b      	b.n	80067ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80066ba:	2300      	movs	r3, #0
 80066bc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80066be:	2300      	movs	r3, #0
 80066c0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ca:	d102      	bne.n	80066d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066cc:	4b41      	ldr	r3, [pc, #260]	; (80067d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80066ce:	60bb      	str	r3, [r7, #8]
 80066d0:	e001      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	f043 0220 	orr.w	r2, r3, #32
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e06a      	b.n	80067ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff f9c9 	bl	8005a8e <LL_ADC_REG_IsConversionOngoing>
 80066fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff f9c3 	bl	8005a8e <LL_ADC_REG_IsConversionOngoing>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d14c      	bne.n	80067a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800670e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006710:	2b00      	cmp	r3, #0
 8006712:	d149      	bne.n	80067a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006714:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006716:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d028      	beq.n	8006772 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6859      	ldr	r1, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006732:	035b      	lsls	r3, r3, #13
 8006734:	430b      	orrs	r3, r1
 8006736:	431a      	orrs	r2, r3
 8006738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800673a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800673c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006740:	f7ff f992 	bl	8005a68 <LL_ADC_IsEnabled>
 8006744:	4604      	mov	r4, r0
 8006746:	4823      	ldr	r0, [pc, #140]	; (80067d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006748:	f7ff f98e 	bl	8005a68 <LL_ADC_IsEnabled>
 800674c:	4603      	mov	r3, r0
 800674e:	4323      	orrs	r3, r4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d133      	bne.n	80067bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800675c:	f023 030f 	bic.w	r3, r3, #15
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	6811      	ldr	r1, [r2, #0]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	6892      	ldr	r2, [r2, #8]
 8006768:	430a      	orrs	r2, r1
 800676a:	431a      	orrs	r2, r3
 800676c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006770:	e024      	b.n	80067bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800677a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800677e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006782:	f7ff f971 	bl	8005a68 <LL_ADC_IsEnabled>
 8006786:	4604      	mov	r4, r0
 8006788:	4812      	ldr	r0, [pc, #72]	; (80067d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800678a:	f7ff f96d 	bl	8005a68 <LL_ADC_IsEnabled>
 800678e:	4603      	mov	r3, r0
 8006790:	4323      	orrs	r3, r4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d112      	bne.n	80067bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800679e:	f023 030f 	bic.w	r3, r3, #15
 80067a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80067a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067a6:	e009      	b.n	80067bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80067ba:	e000      	b.n	80067be <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80067c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3784      	adds	r7, #132	; 0x84
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd90      	pop	{r4, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	50000100 	.word	0x50000100
 80067d8:	50000300 	.word	0x50000300

080067dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680e:	4a04      	ldr	r2, [pc, #16]	; (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	60d3      	str	r3, [r2, #12]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	e000ed00 	.word	0xe000ed00

08006824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <__NVIC_GetPriorityGrouping+0x18>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	f003 0307 	and.w	r3, r3, #7
}
 8006832:	4618      	mov	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed00 	.word	0xe000ed00

08006840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800684a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db0b      	blt.n	800686a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	f003 021f 	and.w	r2, r3, #31
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <__NVIC_EnableIRQ+0x38>)
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	2001      	movs	r0, #1
 8006862:	fa00 f202 	lsl.w	r2, r0, r2
 8006866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	e000e100 	.word	0xe000e100

0800687c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db0a      	blt.n	80068a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	490c      	ldr	r1, [pc, #48]	; (80068c8 <__NVIC_SetPriority+0x4c>)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	0112      	lsls	r2, r2, #4
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	440b      	add	r3, r1
 80068a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068a4:	e00a      	b.n	80068bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4908      	ldr	r1, [pc, #32]	; (80068cc <__NVIC_SetPriority+0x50>)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3b04      	subs	r3, #4
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	440b      	add	r3, r1
 80068ba:	761a      	strb	r2, [r3, #24]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000e100 	.word	0xe000e100
 80068cc:	e000ed00 	.word	0xe000ed00

080068d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b089      	sub	sp, #36	; 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f1c3 0307 	rsb	r3, r3, #7
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf28      	it	cs
 80068ee:	2304      	movcs	r3, #4
 80068f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d902      	bls.n	8006900 <NVIC_EncodePriority+0x30>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3b03      	subs	r3, #3
 80068fe:	e000      	b.n	8006902 <NVIC_EncodePriority+0x32>
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43da      	mvns	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	401a      	ands	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006918:	f04f 31ff 	mov.w	r1, #4294967295
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	43d9      	mvns	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006928:	4313      	orrs	r3, r2
         );
}
 800692a:	4618      	mov	r0, r3
 800692c:	3724      	adds	r7, #36	; 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3b01      	subs	r3, #1
 8006944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006948:	d301      	bcc.n	800694e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800694a:	2301      	movs	r3, #1
 800694c:	e00f      	b.n	800696e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800694e:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <SysTick_Config+0x40>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006956:	210f      	movs	r1, #15
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	f7ff ff8e 	bl	800687c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <SysTick_Config+0x40>)
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006966:	4b04      	ldr	r3, [pc, #16]	; (8006978 <SysTick_Config+0x40>)
 8006968:	2207      	movs	r2, #7
 800696a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	e000e010 	.word	0xe000e010

0800697c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff29 	bl	80067dc <__NVIC_SetPriorityGrouping>
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	4603      	mov	r3, r0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069a0:	f7ff ff40 	bl	8006824 <__NVIC_GetPriorityGrouping>
 80069a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	6978      	ldr	r0, [r7, #20]
 80069ac:	f7ff ff90 	bl	80068d0 <NVIC_EncodePriority>
 80069b0:	4602      	mov	r2, r0
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ff5f 	bl	800687c <__NVIC_SetPriority>
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff33 	bl	8006840 <__NVIC_EnableIRQ>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ffa4 	bl	8006938 <SysTick_Config>
 80069f0:	4603      	mov	r3, r0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d00d      	beq.n	8006a2e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2204      	movs	r2, #4
 8006a16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
 8006a2c:	e047      	b.n	8006abe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 020e 	bic.w	r2, r2, #14
 8006a3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	f003 021f 	and.w	r2, r3, #31
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
    }
  }
  return status;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e147      	b.n	8006d6a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fd ff98 	bl	8004a24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0210 	bic.w	r2, r2, #16
 8006b02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b04:	f7fe fbb8 	bl	8005278 <HAL_GetTick>
 8006b08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b0a:	e012      	b.n	8006b32 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b0c:	f7fe fbb4 	bl	8005278 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b0a      	cmp	r3, #10
 8006b18:	d90b      	bls.n	8006b32 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e11b      	b.n	8006d6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d0e5      	beq.n	8006b0c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b50:	f7fe fb92 	bl	8005278 <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b56:	e012      	b.n	8006b7e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b58:	f7fe fb8e 	bl	8005278 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b0a      	cmp	r3, #10
 8006b64:	d90b      	bls.n	8006b7e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6a:	f043 0201 	orr.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2203      	movs	r2, #3
 8006b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e0f5      	b.n	8006d6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0e5      	beq.n	8006b58 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0202 	orr.w	r2, r2, #2
 8006b9a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a74      	ldr	r2, [pc, #464]	; (8006d74 <HAL_FDCAN_Init+0x2ac>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d103      	bne.n	8006bae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006ba6:	4a74      	ldr	r2, [pc, #464]	; (8006d78 <HAL_FDCAN_Init+0x2b0>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d108      	bne.n	8006bc8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	619a      	str	r2, [r3, #24]
 8006bc6:	e007      	b.n	8006bd8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bd6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7c5b      	ldrb	r3, [r3, #17]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d108      	bne.n	8006bf2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bee:	619a      	str	r2, [r3, #24]
 8006bf0:	e007      	b.n	8006c02 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c00:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7c9b      	ldrb	r3, [r3, #18]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d108      	bne.n	8006c1c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c18:	619a      	str	r2, [r3, #24]
 8006c1a:	e007      	b.n	8006c2c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c2a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006c50:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0210 	bic.w	r2, r2, #16
 8006c60:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d108      	bne.n	8006c7c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0204 	orr.w	r2, r2, #4
 8006c78:	619a      	str	r2, [r3, #24]
 8006c7a:	e02c      	b.n	8006cd6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d028      	beq.n	8006cd6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d01c      	beq.n	8006cc6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c9a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0210 	orr.w	r2, r2, #16
 8006caa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d110      	bne.n	8006cd6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0220 	orr.w	r2, r2, #32
 8006cc2:	619a      	str	r2, [r3, #24]
 8006cc4:	e007      	b.n	8006cd6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0220 	orr.w	r2, r2, #32
 8006cd4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ce6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006cee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006cfe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d00:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d0a:	d115      	bne.n	8006d38 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	3b01      	subs	r3, #1
 8006d18:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d1a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	3b01      	subs	r3, #1
 8006d22:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d34:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d36:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fc3c 	bl	80075cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40006400 	.word	0x40006400
 8006d78:	40006500 	.word	0x40006500

08006d7c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d8c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d002      	beq.n	8006d9a <HAL_FDCAN_ConfigFilter+0x1e>
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d13d      	bne.n	8006e16 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d119      	bne.n	8006dd6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006dae:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006db6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e01d      	b.n	8006e12 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	075a      	lsls	r2, r3, #29
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	079a      	lsls	r2, r3, #30
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e006      	b.n	8006e24 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1a:	f043 0202 	orr.w	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
  }
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d110      	bne.n	8006e66 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e006      	b.n	8006e74 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6a:	f043 0204 	orr.w	r2, r3, #4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d12c      	bne.n	8006ef2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e023      	b.n	8006f00 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006ec0:	0c1b      	lsrs	r3, r3, #16
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fbd2 	bl	8007678 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2101      	movs	r1, #1
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	409a      	lsls	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e006      	b.n	8006f00 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef6:	f043 0208 	orr.w	r2, r3, #8
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b08b      	sub	sp, #44	; 0x2c
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f1c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006f1e:	7efb      	ldrb	r3, [r7, #27]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	f040 80bc 	bne.w	800709e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d121      	bne.n	8006f70 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d107      	bne.n	8006f4c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0af      	b.n	80070ac <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	4613      	mov	r3, r2
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	4413      	add	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	440b      	add	r3, r1
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6e:	e020      	b.n	8006fb2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d107      	bne.n	8006f90 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e08d      	b.n	80070ac <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f98:	0a1b      	lsrs	r3, r3, #8
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	4413      	add	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	440b      	add	r3, r1
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	0c9b      	lsrs	r3, r3, #18
 8006fcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e005      	b.n	8006fe2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	0e1b      	lsrs	r3, r3, #24
 8007034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	0fda      	lsrs	r2, r3, #31
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	3304      	adds	r3, #4
 800704a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007050:	2300      	movs	r3, #0
 8007052:	623b      	str	r3, [r7, #32]
 8007054:	e00a      	b.n	800706c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	441a      	add	r2, r3
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	440b      	add	r3, r1
 8007062:	7812      	ldrb	r2, [r2, #0]
 8007064:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	3301      	adds	r3, #1
 800706a:	623b      	str	r3, [r7, #32]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007074:	5cd3      	ldrb	r3, [r2, r3]
 8007076:	461a      	mov	r2, r3
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	4293      	cmp	r3, r2
 800707c:	d3eb      	bcc.n	8007056 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b40      	cmp	r3, #64	; 0x40
 8007082:	d105      	bne.n	8007090 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800708e:	e004      	b.n	800709a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e006      	b.n	80070ac <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a2:	f043 0208 	orr.w	r2, r3, #8
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
  }
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	372c      	adds	r7, #44	; 0x2c
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	0800feb4 	.word	0x0800feb4

080070bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070ce:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d003      	beq.n	80070de <HAL_FDCAN_ActivateNotification+0x22>
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	f040 80c8 	bne.w	800726e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d03b      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d031      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d027      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01d      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b00      	cmp	r3, #0
 8007148:	d013      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00c      	beq.n	8007182 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d107      	bne.n	8007182 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d13b      	bne.n	800720e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d131      	bne.n	800720e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d127      	bne.n	800720e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11d      	bne.n	800720e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d113      	bne.n	800720e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00c      	beq.n	800721e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0202 	orr.w	r2, r2, #2
 800721c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d009      	beq.n	800723c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	430a      	orrs	r2, r1
 8007238:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	430a      	orrs	r2, r1
 8007256:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	430a      	orrs	r2, r1
 8007268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e006      	b.n	800727c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007272:	f043 0202 	orr.w	r2, r3, #2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	; 0x28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a4:	4013      	ands	r3, r2
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	6a3a      	ldr	r2, [r7, #32]
 80072bc:	4013      	ands	r3, r2
 80072be:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ca:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	4013      	ands	r3, r2
 80072d6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072de:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80072e2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	4013      	ands	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80072fa:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4013      	ands	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d006      	beq.n	8007332 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2240      	movs	r2, #64	; 0x40
 800732a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f92e 	bl	800758e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d014      	beq.n	8007378 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007356:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4013      	ands	r3, r2
 8007364:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800736e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f8ec 	bl	8007550 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f8b6 	bl	80074fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a3a      	ldr	r2, [r7, #32]
 800739a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800739c:	6a39      	ldr	r1, [r7, #32]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7f9 fdfc 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f8ab 	bl	8007510 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00e      	beq.n	80073e6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8a0 	bl	8007526 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01a      	beq.n	800742a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d013      	beq.n	800742a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800740a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4013      	ands	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2280      	movs	r2, #128	; 0x80
 8007420:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f888 	bl	800753a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800744e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f888 	bl	8007566 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f87c 	bl	800757a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f876 	bl	80075b6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f858 	bl	80075a2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80074f2:	bf00      	nop
 80074f4:	3728      	adds	r7, #40	; 0x28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80075d4:	4b27      	ldr	r3, [pc, #156]	; (8007674 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80075d6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ee:	041a      	lsls	r2, r3, #16
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	061a      	lsls	r2, r3, #24
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e005      	b.n	800765a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3304      	adds	r3, #4
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	d3f3      	bcc.n	800764e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	4000a400 	.word	0x4000a400

08007678 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007696:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800769e:	4313      	orrs	r3, r2
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	e00a      	b.n	80076ba <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80076ac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80076b2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80076b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80076c4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80076ca:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80076d0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4613      	mov	r3, r2
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4413      	add	r3, r2
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	440b      	add	r3, r1
 80076ea:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	3304      	adds	r3, #4
 80076f6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	3304      	adds	r3, #4
 8007702:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e020      	b.n	800774c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	3303      	adds	r3, #3
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	3302      	adds	r3, #2
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	440b      	add	r3, r1
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007722:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	3301      	adds	r3, #1
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	440b      	add	r3, r1
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007730:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	440a      	add	r2, r1
 8007738:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800773a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	3304      	adds	r3, #4
 8007744:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	3304      	adds	r3, #4
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	4a06      	ldr	r2, [pc, #24]	; (800776c <FDCAN_CopyMessageToRAM+0xf4>)
 8007754:	5cd3      	ldrb	r3, [r2, r3]
 8007756:	461a      	mov	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4293      	cmp	r3, r2
 800775c:	d3d5      	bcc.n	800770a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	3724      	adds	r7, #36	; 0x24
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	0800feb4 	.word	0x0800feb4

08007770 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007782:	4b24      	ldr	r3, [pc, #144]	; (8007814 <HAL_FLASH_Program+0xa4>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_FLASH_Program+0x1e>
 800778a:	2302      	movs	r3, #2
 800778c:	e03e      	b.n	800780c <HAL_FLASH_Program+0x9c>
 800778e:	4b21      	ldr	r3, [pc, #132]	; (8007814 <HAL_FLASH_Program+0xa4>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007798:	f000 f888 	bl	80078ac <FLASH_WaitForLastOperation>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d12e      	bne.n	8007804 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80077a6:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <HAL_FLASH_Program+0xa4>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d107      	bne.n	80077c2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80077b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f000 f8cc 	bl	8007954 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80077bc:	2301      	movs	r3, #1
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e010      	b.n	80077e4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d002      	beq.n	80077ce <HAL_FLASH_Program+0x5e>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d10a      	bne.n	80077e4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68b8      	ldr	r0, [r7, #8]
 80077d4:	f000 f8e4 	bl	80079a0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d102      	bne.n	80077e4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80077de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077e2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80077e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077e8:	f000 f860 	bl	80078ac <FLASH_WaitForLastOperation>
 80077ec:	4603      	mov	r3, r0
 80077ee:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d006      	beq.n	8007804 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <HAL_FLASH_Program+0xa8>)
 80077f8:	695a      	ldr	r2, [r3, #20]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	43db      	mvns	r3, r3
 80077fe:	4906      	ldr	r1, [pc, #24]	; (8007818 <HAL_FLASH_Program+0xa8>)
 8007800:	4013      	ands	r3, r2
 8007802:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007804:	4b03      	ldr	r3, [pc, #12]	; (8007814 <HAL_FLASH_Program+0xa4>)
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	2000000c 	.word	0x2000000c
 8007818:	40022000 	.word	0x40022000

0800781c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <HAL_FLASH_Unlock+0x38>)
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da0b      	bge.n	8007846 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <HAL_FLASH_Unlock+0x38>)
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <HAL_FLASH_Unlock+0x3c>)
 8007832:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <HAL_FLASH_Unlock+0x38>)
 8007836:	4a09      	ldr	r2, [pc, #36]	; (800785c <HAL_FLASH_Unlock+0x40>)
 8007838:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <HAL_FLASH_Unlock+0x38>)
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	da01      	bge.n	8007846 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007846:	79fb      	ldrb	r3, [r7, #7]
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	40022000 	.word	0x40022000
 8007858:	45670123 	.word	0x45670123
 800785c:	cdef89ab 	.word	0xcdef89ab

08007860 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800786a:	4b09      	ldr	r3, [pc, #36]	; (8007890 <HAL_FLASH_Lock+0x30>)
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	4a08      	ldr	r2, [pc, #32]	; (8007890 <HAL_FLASH_Lock+0x30>)
 8007870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007874:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007876:	4b06      	ldr	r3, [pc, #24]	; (8007890 <HAL_FLASH_Lock+0x30>)
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	2b00      	cmp	r3, #0
 800787c:	da01      	bge.n	8007882 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007882:	79fb      	ldrb	r3, [r7, #7]
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	40022000 	.word	0x40022000

08007894 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007898:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <HAL_FLASH_GetError+0x14>)
 800789a:	685b      	ldr	r3, [r3, #4]
}
 800789c:	4618      	mov	r0, r3
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	2000000c 	.word	0x2000000c

080078ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80078b4:	f7fd fce0 	bl	8005278 <HAL_GetTick>
 80078b8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80078ba:	e009      	b.n	80078d0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80078bc:	f7fd fcdc 	bl	8005278 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d201      	bcs.n	80078d0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e038      	b.n	8007942 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80078d0:	4b1e      	ldr	r3, [pc, #120]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078dc:	d0ee      	beq.n	80078bc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80078de:	4b1b      	ldr	r3, [pc, #108]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80078e6:	4013      	ands	r3, r2
 80078e8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01e      	beq.n	800792e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80078f0:	4b17      	ldr	r3, [pc, #92]	; (8007950 <FLASH_WaitForLastOperation+0xa4>)
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	4a15      	ldr	r2, [pc, #84]	; (8007950 <FLASH_WaitForLastOperation+0xa4>)
 80078fa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <FLASH_WaitForLastOperation+0x6a>
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007910:	490e      	ldr	r1, [pc, #56]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 8007912:	4313      	orrs	r3, r2
 8007914:	618b      	str	r3, [r1, #24]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <FLASH_WaitForLastOperation+0x7e>
 8007920:	4a0a      	ldr	r2, [pc, #40]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007928:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e009      	b.n	8007942 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b01      	cmp	r3, #1
 8007938:	d102      	bne.n	8007940 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800793a:	4b04      	ldr	r3, [pc, #16]	; (800794c <FLASH_WaitForLastOperation+0xa0>)
 800793c:	2201      	movs	r2, #1
 800793e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40022000 	.word	0x40022000
 8007950:	2000000c 	.word	0x2000000c

08007954 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007960:	4b0e      	ldr	r3, [pc, #56]	; (800799c <FLASH_Program_DoubleWord+0x48>)
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <FLASH_Program_DoubleWord+0x48>)
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007972:	f3bf 8f6f 	isb	sy
}
 8007976:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	000a      	movs	r2, r1
 8007986:	2300      	movs	r3, #0
 8007988:	68f9      	ldr	r1, [r7, #12]
 800798a:	3104      	adds	r1, #4
 800798c:	4613      	mov	r3, r2
 800798e:	600b      	str	r3, [r1, #0]
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	40022000 	.word	0x40022000

080079a0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b089      	sub	sp, #36	; 0x24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <FLASH_Program_Fast+0x68>)
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <FLASH_Program_Fast+0x68>)
 80079bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c2:	f3ef 8310 	mrs	r3, PRIMASK
 80079c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80079c8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80079ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80079cc:	b672      	cpsid	i
}
 80079ce:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	3304      	adds	r3, #4
 80079dc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	3304      	adds	r3, #4
 80079e2:	617b      	str	r3, [r7, #20]
    row_index--;
 80079e4:	7ffb      	ldrb	r3, [r7, #31]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1ef      	bne.n	80079d0 <FLASH_Program_Fast+0x30>
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f383 8810 	msr	PRIMASK, r3
}
 80079fa:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80079fc:	bf00      	nop
 80079fe:	3724      	adds	r7, #36	; 0x24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	40022000 	.word	0x40022000

08007a0c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a16:	4b47      	ldr	r3, [pc, #284]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_FLASHEx_Erase+0x16>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e083      	b.n	8007b2a <HAL_FLASHEx_Erase+0x11e>
 8007a22:	4b44      	ldr	r3, [pc, #272]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a2c:	f7ff ff3e 	bl	80078ac <FLASH_WaitForLastOperation>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d173      	bne.n	8007b22 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a3a:	4b3e      	ldr	r3, [pc, #248]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007a40:	4b3d      	ldr	r3, [pc, #244]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d013      	beq.n	8007a74 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007a4c:	4b3a      	ldr	r3, [pc, #232]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007a58:	4b37      	ldr	r3, [pc, #220]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a36      	ldr	r2, [pc, #216]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a62:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007a64:	4b33      	ldr	r3, [pc, #204]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a66:	2203      	movs	r2, #3
 8007a68:	771a      	strb	r2, [r3, #28]
 8007a6a:	e016      	b.n	8007a9a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007a6c:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	771a      	strb	r2, [r3, #28]
 8007a72:	e012      	b.n	8007a9a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007a74:	4b30      	ldr	r3, [pc, #192]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007a80:	4b2d      	ldr	r3, [pc, #180]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2c      	ldr	r2, [pc, #176]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a8a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007a8c:	4b29      	ldr	r3, [pc, #164]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a8e:	2202      	movs	r2, #2
 8007a90:	771a      	strb	r2, [r3, #28]
 8007a92:	e002      	b.n	8007a9a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007a94:	4b27      	ldr	r3, [pc, #156]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d111      	bne.n	8007ac6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f848 	bl	8007b3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ab0:	f7ff fefc 	bl	80078ac <FLASH_WaitForLastOperation>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007ab8:	4b1f      	ldr	r3, [pc, #124]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007abe:	f023 0304 	bic.w	r3, r3, #4
 8007ac2:	6153      	str	r3, [r2, #20]
 8007ac4:	e02b      	b.n	8007b1e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8007acc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	60bb      	str	r3, [r7, #8]
 8007ad4:	e01b      	b.n	8007b0e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4619      	mov	r1, r3
 8007adc:	68b8      	ldr	r0, [r7, #8]
 8007ade:	f000 f84b 	bl	8007b78 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ae6:	f7ff fee1 	bl	80078ac <FLASH_WaitForLastOperation>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007aee:	4b12      	ldr	r3, [pc, #72]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <HAL_FLASHEx_Erase+0x12c>)
 8007af4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007af8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	601a      	str	r2, [r3, #0]
          break;
 8007b06:	e00a      	b.n	8007b1e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60bb      	str	r3, [r7, #8]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d3db      	bcc.n	8007ad6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007b1e:	f000 f84f 	bl	8007bc0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b22:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <HAL_FLASHEx_Erase+0x128>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]

  return status;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000000c 	.word	0x2000000c
 8007b38:	40022000 	.word	0x40022000

08007b3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <FLASH_MassErase+0x38>)
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	4a08      	ldr	r2, [pc, #32]	; (8007b74 <FLASH_MassErase+0x38>)
 8007b54:	f043 0304 	orr.w	r3, r3, #4
 8007b58:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <FLASH_MassErase+0x38>)
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <FLASH_MassErase+0x38>)
 8007b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b64:	6153      	str	r3, [r2, #20]
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40022000 	.word	0x40022000

08007b78 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007b82:	4b0e      	ldr	r3, [pc, #56]	; (8007bbc <FLASH_PageErase+0x44>)
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007b92:	490a      	ldr	r1, [pc, #40]	; (8007bbc <FLASH_PageErase+0x44>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007b98:	4b08      	ldr	r3, [pc, #32]	; (8007bbc <FLASH_PageErase+0x44>)
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	4a07      	ldr	r2, [pc, #28]	; (8007bbc <FLASH_PageErase+0x44>)
 8007b9e:	f043 0302 	orr.w	r3, r3, #2
 8007ba2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <FLASH_PageErase+0x44>)
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <FLASH_PageErase+0x44>)
 8007baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bae:	6153      	str	r3, [r2, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40022000 	.word	0x40022000

08007bc0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007bc6:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <FLASH_FlushCaches+0x8c>)
 8007bc8:	7f1b      	ldrb	r3, [r3, #28]
 8007bca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d002      	beq.n	8007bd8 <FLASH_FlushCaches+0x18>
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d117      	bne.n	8007c08 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007bd8:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1c      	ldr	r2, [pc, #112]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007be2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a19      	ldr	r2, [pc, #100]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4b17      	ldr	r3, [pc, #92]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bfa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007bfc:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c06:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d002      	beq.n	8007c14 <FLASH_FlushCaches+0x54>
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d111      	bne.n	8007c38 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a0a      	ldr	r2, [pc, #40]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c2c:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a07      	ldr	r2, [pc, #28]	; (8007c50 <FLASH_FlushCaches+0x90>)
 8007c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c36:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007c38:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <FLASH_FlushCaches+0x8c>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	771a      	strb	r2, [r3, #28]
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	40022000 	.word	0x40022000

08007c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c62:	e15a      	b.n	8007f1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	2101      	movs	r1, #1
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c70:	4013      	ands	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 814c 	beq.w	8007f14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d005      	beq.n	8007c94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d130      	bne.n	8007cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	43db      	mvns	r3, r3
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4013      	ands	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cca:	2201      	movs	r2, #1
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd2:	43db      	mvns	r3, r3
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	091b      	lsrs	r3, r3, #4
 8007ce0:	f003 0201 	and.w	r2, r3, #1
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d017      	beq.n	8007d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	43db      	mvns	r3, r3
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4013      	ands	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d123      	bne.n	8007d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	08da      	lsrs	r2, r3, #3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3208      	adds	r2, #8
 8007d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	220f      	movs	r2, #15
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	08da      	lsrs	r2, r3, #3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3208      	adds	r2, #8
 8007d80:	6939      	ldr	r1, [r7, #16]
 8007d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	2203      	movs	r2, #3
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	43db      	mvns	r3, r3
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f003 0203 	and.w	r2, r3, #3
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 80a6 	beq.w	8007f14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dc8:	4b5b      	ldr	r3, [pc, #364]	; (8007f38 <HAL_GPIO_Init+0x2e4>)
 8007dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dcc:	4a5a      	ldr	r2, [pc, #360]	; (8007f38 <HAL_GPIO_Init+0x2e4>)
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8007dd4:	4b58      	ldr	r3, [pc, #352]	; (8007f38 <HAL_GPIO_Init+0x2e4>)
 8007dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007de0:	4a56      	ldr	r2, [pc, #344]	; (8007f3c <HAL_GPIO_Init+0x2e8>)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	3302      	adds	r3, #2
 8007de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	220f      	movs	r2, #15
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4013      	ands	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007e0a:	d01f      	beq.n	8007e4c <HAL_GPIO_Init+0x1f8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a4c      	ldr	r2, [pc, #304]	; (8007f40 <HAL_GPIO_Init+0x2ec>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d019      	beq.n	8007e48 <HAL_GPIO_Init+0x1f4>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a4b      	ldr	r2, [pc, #300]	; (8007f44 <HAL_GPIO_Init+0x2f0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d013      	beq.n	8007e44 <HAL_GPIO_Init+0x1f0>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a4a      	ldr	r2, [pc, #296]	; (8007f48 <HAL_GPIO_Init+0x2f4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00d      	beq.n	8007e40 <HAL_GPIO_Init+0x1ec>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a49      	ldr	r2, [pc, #292]	; (8007f4c <HAL_GPIO_Init+0x2f8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d007      	beq.n	8007e3c <HAL_GPIO_Init+0x1e8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a48      	ldr	r2, [pc, #288]	; (8007f50 <HAL_GPIO_Init+0x2fc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d101      	bne.n	8007e38 <HAL_GPIO_Init+0x1e4>
 8007e34:	2305      	movs	r3, #5
 8007e36:	e00a      	b.n	8007e4e <HAL_GPIO_Init+0x1fa>
 8007e38:	2306      	movs	r3, #6
 8007e3a:	e008      	b.n	8007e4e <HAL_GPIO_Init+0x1fa>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	e006      	b.n	8007e4e <HAL_GPIO_Init+0x1fa>
 8007e40:	2303      	movs	r3, #3
 8007e42:	e004      	b.n	8007e4e <HAL_GPIO_Init+0x1fa>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e002      	b.n	8007e4e <HAL_GPIO_Init+0x1fa>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <HAL_GPIO_Init+0x1fa>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	f002 0203 	and.w	r2, r2, #3
 8007e54:	0092      	lsls	r2, r2, #2
 8007e56:	4093      	lsls	r3, r2
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e5e:	4937      	ldr	r1, [pc, #220]	; (8007f3c <HAL_GPIO_Init+0x2e8>)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	3302      	adds	r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e6c:	4b39      	ldr	r3, [pc, #228]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	43db      	mvns	r3, r3
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007e90:	4a30      	ldr	r2, [pc, #192]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007e96:	4b2f      	ldr	r3, [pc, #188]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	43db      	mvns	r3, r3
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007eba:	4a26      	ldr	r2, [pc, #152]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007ec0:	4b24      	ldr	r3, [pc, #144]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007ee4:	4a1b      	ldr	r2, [pc, #108]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007eea:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007f0e:	4a11      	ldr	r2, [pc, #68]	; (8007f54 <HAL_GPIO_Init+0x300>)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3301      	adds	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	fa22 f303 	lsr.w	r3, r2, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f ae9d 	bne.w	8007c64 <HAL_GPIO_Init+0x10>
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	40021000 	.word	0x40021000
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	48000400 	.word	0x48000400
 8007f44:	48000800 	.word	0x48000800
 8007f48:	48000c00 	.word	0x48000c00
 8007f4c:	48001000 	.word	0x48001000
 8007f50:	48001400 	.word	0x48001400
 8007f54:	40010400 	.word	0x40010400

08007f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	e001      	b.n	8007f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	807b      	strh	r3, [r7, #2]
 8007f94:	4613      	mov	r3, r2
 8007f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f98:	787b      	ldrb	r3, [r7, #1]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007fa4:	e002      	b.n	8007fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e0bb      	b.n	8008146 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b05      	cmp	r3, #5
 8007fd8:	d101      	bne.n	8007fde <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0b3      	b.n	8008146 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d101      	bne.n	8007fee <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e0ab      	b.n	8008146 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fee:	4b58      	ldr	r3, [pc, #352]	; (8008150 <HAL_OPAMP_Init+0x198>)
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	4a57      	ldr	r2, [pc, #348]	; (8008150 <HAL_OPAMP_Init+0x198>)
 8007ff4:	f043 0301 	orr.w	r3, r3, #1
 8007ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8007ffa:	4b55      	ldr	r3, [pc, #340]	; (8008150 <HAL_OPAMP_Init+0x198>)
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fc fd6c 	bl	8004af8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	2b40      	cmp	r3, #64	; 0x40
 8008026:	d003      	beq.n	8008030 <HAL_OPAMP_Init+0x78>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	2b60      	cmp	r3, #96	; 0x60
 800802e:	d133      	bne.n	8008098 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f023 0110 	bic.w	r1, r3, #16
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b41      	ldr	r3, [pc, #260]	; (8008154 <HAL_OPAMP_Init+0x19c>)
 800804e:	4013      	ands	r3, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6851      	ldr	r1, [r2, #4]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6892      	ldr	r2, [r2, #8]
 8008058:	4311      	orrs	r1, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6912      	ldr	r2, [r2, #16]
 800805e:	430a      	orrs	r2, r1
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	7d09      	ldrb	r1, [r1, #20]
 8008064:	2901      	cmp	r1, #1
 8008066:	d102      	bne.n	800806e <HAL_OPAMP_Init+0xb6>
 8008068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800806c:	e000      	b.n	8008070 <HAL_OPAMP_Init+0xb8>
 800806e:	2100      	movs	r1, #0
 8008070:	4311      	orrs	r1, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008076:	4311      	orrs	r1, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800807c:	4311      	orrs	r1, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008082:	04d2      	lsls	r2, r2, #19
 8008084:	4311      	orrs	r1, r2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800808a:	0612      	lsls	r2, r2, #24
 800808c:	4311      	orrs	r1, r2
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	430b      	orrs	r3, r1
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e035      	b.n	8008104 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f023 0110 	bic.w	r1, r3, #16
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	4b27      	ldr	r3, [pc, #156]	; (8008154 <HAL_OPAMP_Init+0x19c>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6851      	ldr	r1, [r2, #4]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6892      	ldr	r2, [r2, #8]
 80080c0:	4311      	orrs	r1, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68d2      	ldr	r2, [r2, #12]
 80080c6:	4311      	orrs	r1, r2
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6912      	ldr	r2, [r2, #16]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	7d09      	ldrb	r1, [r1, #20]
 80080d2:	2901      	cmp	r1, #1
 80080d4:	d102      	bne.n	80080dc <HAL_OPAMP_Init+0x124>
 80080d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080da:	e000      	b.n	80080de <HAL_OPAMP_Init+0x126>
 80080dc:	2100      	movs	r1, #0
 80080de:	4311      	orrs	r1, r2
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080e4:	4311      	orrs	r1, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80080ea:	4311      	orrs	r1, r2
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080f0:	04d2      	lsls	r2, r2, #19
 80080f2:	4311      	orrs	r1, r2
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080f8:	0612      	lsls	r2, r2, #24
 80080fa:	4311      	orrs	r1, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	430b      	orrs	r3, r1
 8008102:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	db10      	blt.n	8008130 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	40021000 	.word	0x40021000
 8008154:	e0003e11 	.word	0xe0003e11

08008158 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]
 800816e:	e01d      	b.n	80081ac <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b05      	cmp	r3, #5
 800817a:	d102      	bne.n	8008182 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	e014      	b.n	80081ac <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d10c      	bne.n	80081a8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2204      	movs	r2, #4
 80081a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80081a6:	e001      	b.n	80081ac <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
	...

080081bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d141      	bne.n	800824e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081ca:	4b4b      	ldr	r3, [pc, #300]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d6:	d131      	bne.n	800823c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081d8:	4b47      	ldr	r3, [pc, #284]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081de:	4a46      	ldr	r2, [pc, #280]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081e8:	4b43      	ldr	r3, [pc, #268]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081f0:	4a41      	ldr	r2, [pc, #260]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80081f8:	4b40      	ldr	r3, [pc, #256]	; (80082fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2232      	movs	r2, #50	; 0x32
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	4a3f      	ldr	r2, [pc, #252]	; (8008300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	0c9b      	lsrs	r3, r3, #18
 800820a:	3301      	adds	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800820e:	e002      	b.n	8008216 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3b01      	subs	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008216:	4b38      	ldr	r3, [pc, #224]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800821e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008222:	d102      	bne.n	800822a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f2      	bne.n	8008210 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800822a:	4b33      	ldr	r3, [pc, #204]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008236:	d158      	bne.n	80082ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e057      	b.n	80082ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800823c:	4b2e      	ldr	r3, [pc, #184]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008242:	4a2d      	ldr	r2, [pc, #180]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800824c:	e04d      	b.n	80082ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008254:	d141      	bne.n	80082da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008256:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800825e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008262:	d131      	bne.n	80082c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008264:	4b24      	ldr	r3, [pc, #144]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800826a:	4a23      	ldr	r2, [pc, #140]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800826c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800827c:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800827e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2232      	movs	r2, #50	; 0x32
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008290:	fba2 2303 	umull	r2, r3, r2, r3
 8008294:	0c9b      	lsrs	r3, r3, #18
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800829a:	e002      	b.n	80082a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3b01      	subs	r3, #1
 80082a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ae:	d102      	bne.n	80082b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f2      	bne.n	800829c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80082b6:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c2:	d112      	bne.n	80082ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e011      	b.n	80082ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ce:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80082d8:	e007      	b.n	80082ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082e2:	4a05      	ldr	r2, [pc, #20]	; (80082f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40007000 	.word	0x40007000
 80082fc:	20000000 	.word	0x20000000
 8008300:	431bde83 	.word	0x431bde83

08008304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e306      	b.n	8008924 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d075      	beq.n	800840e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008322:	4b97      	ldr	r3, [pc, #604]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 030c 	and.w	r3, r3, #12
 800832a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800832c:	4b94      	ldr	r3, [pc, #592]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d102      	bne.n	8008342 <HAL_RCC_OscConfig+0x3e>
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d002      	beq.n	8008348 <HAL_RCC_OscConfig+0x44>
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b08      	cmp	r3, #8
 8008346:	d10b      	bne.n	8008360 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008348:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d05b      	beq.n	800840c <HAL_RCC_OscConfig+0x108>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d157      	bne.n	800840c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e2e1      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d106      	bne.n	8008378 <HAL_RCC_OscConfig+0x74>
 800836a:	4b85      	ldr	r3, [pc, #532]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a84      	ldr	r2, [pc, #528]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	e01d      	b.n	80083b4 <HAL_RCC_OscConfig+0xb0>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008380:	d10c      	bne.n	800839c <HAL_RCC_OscConfig+0x98>
 8008382:	4b7f      	ldr	r3, [pc, #508]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a7e      	ldr	r2, [pc, #504]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	4b7c      	ldr	r3, [pc, #496]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a7b      	ldr	r2, [pc, #492]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e00b      	b.n	80083b4 <HAL_RCC_OscConfig+0xb0>
 800839c:	4b78      	ldr	r3, [pc, #480]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a77      	ldr	r2, [pc, #476]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80083a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4b75      	ldr	r3, [pc, #468]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a74      	ldr	r2, [pc, #464]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80083ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d013      	beq.n	80083e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fc ff5c 	bl	8005278 <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c4:	f7fc ff58 	bl	8005278 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b64      	cmp	r3, #100	; 0x64
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e2a6      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083d6:	4b6a      	ldr	r3, [pc, #424]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f0      	beq.n	80083c4 <HAL_RCC_OscConfig+0xc0>
 80083e2:	e014      	b.n	800840e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fc ff48 	bl	8005278 <HAL_GetTick>
 80083e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083ec:	f7fc ff44 	bl	8005278 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b64      	cmp	r3, #100	; 0x64
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e292      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083fe:	4b60      	ldr	r3, [pc, #384]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0xe8>
 800840a:	e000      	b.n	800840e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800840c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d075      	beq.n	8008506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800841a:	4b59      	ldr	r3, [pc, #356]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 030c 	and.w	r3, r3, #12
 8008422:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008424:	4b56      	ldr	r3, [pc, #344]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b0c      	cmp	r3, #12
 8008432:	d102      	bne.n	800843a <HAL_RCC_OscConfig+0x136>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d002      	beq.n	8008440 <HAL_RCC_OscConfig+0x13c>
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d11f      	bne.n	8008480 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008440:	4b4f      	ldr	r3, [pc, #316]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <HAL_RCC_OscConfig+0x154>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e265      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008458:	4b49      	ldr	r3, [pc, #292]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	061b      	lsls	r3, r3, #24
 8008466:	4946      	ldr	r1, [pc, #280]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008468:	4313      	orrs	r3, r2
 800846a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800846c:	4b45      	ldr	r3, [pc, #276]	; (8008584 <HAL_RCC_OscConfig+0x280>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f7fc feb5 	bl	80051e0 <HAL_InitTick>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d043      	beq.n	8008504 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e251      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d023      	beq.n	80084d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008488:	4b3d      	ldr	r3, [pc, #244]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a3c      	ldr	r2, [pc, #240]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800848e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7fc fef0 	bl	8005278 <HAL_GetTick>
 8008498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800849c:	f7fc feec 	bl	8005278 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e23a      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084ae:	4b34      	ldr	r3, [pc, #208]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f0      	beq.n	800849c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ba:	4b31      	ldr	r3, [pc, #196]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	061b      	lsls	r3, r3, #24
 80084c8:	492d      	ldr	r1, [pc, #180]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	604b      	str	r3, [r1, #4]
 80084ce:	e01a      	b.n	8008506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084d0:	4b2b      	ldr	r3, [pc, #172]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2a      	ldr	r2, [pc, #168]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80084d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fc fecc 	bl	8005278 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e4:	f7fc fec8 	bl	8005278 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e216      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084f6:	4b22      	ldr	r3, [pc, #136]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x1e0>
 8008502:	e000      	b.n	8008506 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008504:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d041      	beq.n	8008596 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01c      	beq.n	8008554 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800851a:	4b19      	ldr	r3, [pc, #100]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800851c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008520:	4a17      	ldr	r2, [pc, #92]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008522:	f043 0301 	orr.w	r3, r3, #1
 8008526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852a:	f7fc fea5 	bl	8005278 <HAL_GetTick>
 800852e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008530:	e008      	b.n	8008544 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008532:	f7fc fea1 	bl	8005278 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	d901      	bls.n	8008544 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e1ef      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0ef      	beq.n	8008532 <HAL_RCC_OscConfig+0x22e>
 8008552:	e020      	b.n	8008596 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 8008556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800855a:	4a09      	ldr	r2, [pc, #36]	; (8008580 <HAL_RCC_OscConfig+0x27c>)
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008564:	f7fc fe88 	bl	8005278 <HAL_GetTick>
 8008568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800856a:	e00d      	b.n	8008588 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800856c:	f7fc fe84 	bl	8005278 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d906      	bls.n	8008588 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e1d2      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
 800857e:	bf00      	nop
 8008580:	40021000 	.word	0x40021000
 8008584:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008588:	4b8c      	ldr	r3, [pc, #560]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800858a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1ea      	bne.n	800856c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 80a6 	beq.w	80086f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085a4:	2300      	movs	r3, #0
 80085a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80085a8:	4b84      	ldr	r3, [pc, #528]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80085aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_RCC_OscConfig+0x2b4>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <HAL_RCC_OscConfig+0x2b6>
 80085b8:	2300      	movs	r3, #0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085be:	4b7f      	ldr	r3, [pc, #508]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	4a7e      	ldr	r2, [pc, #504]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80085c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c8:	6593      	str	r3, [r2, #88]	; 0x58
 80085ca:	4b7c      	ldr	r3, [pc, #496]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80085d6:	2301      	movs	r3, #1
 80085d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085da:	4b79      	ldr	r3, [pc, #484]	; (80087c0 <HAL_RCC_OscConfig+0x4bc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d118      	bne.n	8008618 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085e6:	4b76      	ldr	r3, [pc, #472]	; (80087c0 <HAL_RCC_OscConfig+0x4bc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a75      	ldr	r2, [pc, #468]	; (80087c0 <HAL_RCC_OscConfig+0x4bc>)
 80085ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085f2:	f7fc fe41 	bl	8005278 <HAL_GetTick>
 80085f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085f8:	e008      	b.n	800860c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085fa:	f7fc fe3d 	bl	8005278 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d901      	bls.n	800860c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e18b      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800860c:	4b6c      	ldr	r3, [pc, #432]	; (80087c0 <HAL_RCC_OscConfig+0x4bc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0f0      	beq.n	80085fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d108      	bne.n	8008632 <HAL_RCC_OscConfig+0x32e>
 8008620:	4b66      	ldr	r3, [pc, #408]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008626:	4a65      	ldr	r2, [pc, #404]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008630:	e024      	b.n	800867c <HAL_RCC_OscConfig+0x378>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b05      	cmp	r3, #5
 8008638:	d110      	bne.n	800865c <HAL_RCC_OscConfig+0x358>
 800863a:	4b60      	ldr	r3, [pc, #384]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	4a5e      	ldr	r2, [pc, #376]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008642:	f043 0304 	orr.w	r3, r3, #4
 8008646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800864a:	4b5c      	ldr	r3, [pc, #368]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800864c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008650:	4a5a      	ldr	r2, [pc, #360]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800865a:	e00f      	b.n	800867c <HAL_RCC_OscConfig+0x378>
 800865c:	4b57      	ldr	r3, [pc, #348]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008662:	4a56      	ldr	r2, [pc, #344]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800866c:	4b53      	ldr	r3, [pc, #332]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	4a52      	ldr	r2, [pc, #328]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008674:	f023 0304 	bic.w	r3, r3, #4
 8008678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d016      	beq.n	80086b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008684:	f7fc fdf8 	bl	8005278 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800868a:	e00a      	b.n	80086a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800868c:	f7fc fdf4 	bl	8005278 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	f241 3288 	movw	r2, #5000	; 0x1388
 800869a:	4293      	cmp	r3, r2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e140      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086a2:	4b46      	ldr	r3, [pc, #280]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0ed      	beq.n	800868c <HAL_RCC_OscConfig+0x388>
 80086b0:	e015      	b.n	80086de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b2:	f7fc fde1 	bl	8005278 <HAL_GetTick>
 80086b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086b8:	e00a      	b.n	80086d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ba:	f7fc fddd 	bl	8005278 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e129      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086d0:	4b3a      	ldr	r3, [pc, #232]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1ed      	bne.n	80086ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086de:	7ffb      	ldrb	r3, [r7, #31]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d105      	bne.n	80086f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086e4:	4b35      	ldr	r3, [pc, #212]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80086e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e8:	4a34      	ldr	r2, [pc, #208]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 80086ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d03c      	beq.n	8008776 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01c      	beq.n	800873e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800870a:	4a2c      	ldr	r2, [pc, #176]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008714:	f7fc fdb0 	bl	8005278 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800871c:	f7fc fdac 	bl	8005278 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e0fa      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800872e:	4b23      	ldr	r3, [pc, #140]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ef      	beq.n	800871c <HAL_RCC_OscConfig+0x418>
 800873c:	e01b      	b.n	8008776 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800873e:	4b1f      	ldr	r3, [pc, #124]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008744:	4a1d      	ldr	r2, [pc, #116]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008746:	f023 0301 	bic.w	r3, r3, #1
 800874a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874e:	f7fc fd93 	bl	8005278 <HAL_GetTick>
 8008752:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008756:	f7fc fd8f 	bl	8005278 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e0dd      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008768:	4b14      	ldr	r3, [pc, #80]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800876a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1ef      	bne.n	8008756 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 80d1 	beq.w	8008922 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008780:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 030c 	and.w	r3, r3, #12
 8008788:	2b0c      	cmp	r3, #12
 800878a:	f000 808b 	beq.w	80088a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d15e      	bne.n	8008854 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a08      	ldr	r2, [pc, #32]	; (80087bc <HAL_RCC_OscConfig+0x4b8>)
 800879c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a2:	f7fc fd69 	bl	8005278 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087a8:	e00c      	b.n	80087c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087aa:	f7fc fd65 	bl	8005278 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d905      	bls.n	80087c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e0b3      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
 80087bc:	40021000 	.word	0x40021000
 80087c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087c4:	4b59      	ldr	r3, [pc, #356]	; (800892c <HAL_RCC_OscConfig+0x628>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1ec      	bne.n	80087aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087d0:	4b56      	ldr	r3, [pc, #344]	; (800892c <HAL_RCC_OscConfig+0x628>)
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	4b56      	ldr	r3, [pc, #344]	; (8008930 <HAL_RCC_OscConfig+0x62c>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6a11      	ldr	r1, [r2, #32]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087e0:	3a01      	subs	r2, #1
 80087e2:	0112      	lsls	r2, r2, #4
 80087e4:	4311      	orrs	r1, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80087ea:	0212      	lsls	r2, r2, #8
 80087ec:	4311      	orrs	r1, r2
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087f2:	0852      	lsrs	r2, r2, #1
 80087f4:	3a01      	subs	r2, #1
 80087f6:	0552      	lsls	r2, r2, #21
 80087f8:	4311      	orrs	r1, r2
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087fe:	0852      	lsrs	r2, r2, #1
 8008800:	3a01      	subs	r2, #1
 8008802:	0652      	lsls	r2, r2, #25
 8008804:	4311      	orrs	r1, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800880a:	06d2      	lsls	r2, r2, #27
 800880c:	430a      	orrs	r2, r1
 800880e:	4947      	ldr	r1, [pc, #284]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008810:	4313      	orrs	r3, r2
 8008812:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008814:	4b45      	ldr	r3, [pc, #276]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a44      	ldr	r2, [pc, #272]	; (800892c <HAL_RCC_OscConfig+0x628>)
 800881a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800881e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008820:	4b42      	ldr	r3, [pc, #264]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	4a41      	ldr	r2, [pc, #260]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800882a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7fc fd24 	bl	8005278 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008834:	f7fc fd20 	bl	8005278 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e06e      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008846:	4b39      	ldr	r3, [pc, #228]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f0      	beq.n	8008834 <HAL_RCC_OscConfig+0x530>
 8008852:	e066      	b.n	8008922 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008854:	4b35      	ldr	r3, [pc, #212]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a34      	ldr	r2, [pc, #208]	; (800892c <HAL_RCC_OscConfig+0x628>)
 800885a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800885e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008860:	4b32      	ldr	r3, [pc, #200]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	4a31      	ldr	r2, [pc, #196]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800886c:	4b2f      	ldr	r3, [pc, #188]	; (800892c <HAL_RCC_OscConfig+0x628>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	4a2e      	ldr	r2, [pc, #184]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008872:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800887a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7fc fcfc 	bl	8005278 <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008884:	f7fc fcf8 	bl	8005278 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e046      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008896:	4b25      	ldr	r3, [pc, #148]	; (800892c <HAL_RCC_OscConfig+0x628>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f0      	bne.n	8008884 <HAL_RCC_OscConfig+0x580>
 80088a2:	e03e      	b.n	8008922 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e039      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80088b0:	4b1e      	ldr	r3, [pc, #120]	; (800892c <HAL_RCC_OscConfig+0x628>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f003 0203 	and.w	r2, r3, #3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d12c      	bne.n	800891e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	3b01      	subs	r3, #1
 80088d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d123      	bne.n	800891e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d11b      	bne.n	800891e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d113      	bne.n	800891e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	3b01      	subs	r3, #1
 8008904:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008906:	429a      	cmp	r2, r3
 8008908:	d109      	bne.n	800891e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	3b01      	subs	r3, #1
 8008918:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800891a:	429a      	cmp	r2, r3
 800891c:	d001      	beq.n	8008922 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	40021000 	.word	0x40021000
 8008930:	019f800c 	.word	0x019f800c

08008934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e11e      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800894c:	4b91      	ldr	r3, [pc, #580]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d910      	bls.n	800897c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800895a:	4b8e      	ldr	r3, [pc, #568]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f023 020f 	bic.w	r2, r3, #15
 8008962:	498c      	ldr	r1, [pc, #560]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	4313      	orrs	r3, r2
 8008968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800896a:	4b8a      	ldr	r3, [pc, #552]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d001      	beq.n	800897c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e106      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d073      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d129      	bne.n	80089e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008990:	4b81      	ldr	r3, [pc, #516]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e0f4      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80089a0:	f000 f99e 	bl	8008ce0 <RCC_GetSysClockFreqFromPLLSource>
 80089a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	4a7c      	ldr	r2, [pc, #496]	; (8008b9c <HAL_RCC_ClockConfig+0x268>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d93f      	bls.n	8008a2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80089ae:	4b7a      	ldr	r3, [pc, #488]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d033      	beq.n	8008a2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d12f      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089ce:	4b72      	ldr	r3, [pc, #456]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089d6:	4a70      	ldr	r2, [pc, #448]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 80089d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80089de:	2380      	movs	r3, #128	; 0x80
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	e024      	b.n	8008a2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d107      	bne.n	80089fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ec:	4b6a      	ldr	r3, [pc, #424]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0c6      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089fc:	4b66      	ldr	r3, [pc, #408]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e0be      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008a0c:	f000 f8ce 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 8008a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	4a61      	ldr	r2, [pc, #388]	; (8008b9c <HAL_RCC_ClockConfig+0x268>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d909      	bls.n	8008a2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a1a:	4b5f      	ldr	r3, [pc, #380]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a22:	4a5d      	ldr	r2, [pc, #372]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008a2a:	2380      	movs	r3, #128	; 0x80
 8008a2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a2e:	4b5a      	ldr	r3, [pc, #360]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f023 0203 	bic.w	r2, r3, #3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	4957      	ldr	r1, [pc, #348]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a40:	f7fc fc1a 	bl	8005278 <HAL_GetTick>
 8008a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a46:	e00a      	b.n	8008a5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a48:	f7fc fc16 	bl	8005278 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e095      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5e:	4b4e      	ldr	r3, [pc, #312]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f003 020c 	and.w	r2, r3, #12
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d1eb      	bne.n	8008a48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d023      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a88:	4b43      	ldr	r3, [pc, #268]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	4a42      	ldr	r2, [pc, #264]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008aa0:	4b3d      	ldr	r3, [pc, #244]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008aa8:	4a3b      	ldr	r2, [pc, #236]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008aaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab0:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	4936      	ldr	r1, [pc, #216]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	608b      	str	r3, [r1, #8]
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b80      	cmp	r3, #128	; 0x80
 8008ac8:	d105      	bne.n	8008ad6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008aca:	4b33      	ldr	r3, [pc, #204]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	4a32      	ldr	r2, [pc, #200]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ad4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 030f 	and.w	r3, r3, #15
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d21d      	bcs.n	8008b20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae4:	4b2b      	ldr	r3, [pc, #172]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f023 020f 	bic.w	r2, r3, #15
 8008aec:	4929      	ldr	r1, [pc, #164]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008af4:	f7fc fbc0 	bl	8005278 <HAL_GetTick>
 8008af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afa:	e00a      	b.n	8008b12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008afc:	f7fc fbbc 	bl	8005278 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e03b      	b.n	8008b8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b12:	4b20      	ldr	r3, [pc, #128]	; (8008b94 <HAL_RCC_ClockConfig+0x260>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d1ed      	bne.n	8008afc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d008      	beq.n	8008b3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4917      	ldr	r1, [pc, #92]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b4a:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	490f      	ldr	r1, [pc, #60]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b5e:	f000 f825 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 8008b62:	4602      	mov	r2, r0
 8008b64:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <HAL_RCC_ClockConfig+0x264>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	091b      	lsrs	r3, r3, #4
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	490c      	ldr	r1, [pc, #48]	; (8008ba0 <HAL_RCC_ClockConfig+0x26c>)
 8008b70:	5ccb      	ldrb	r3, [r1, r3]
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	fa22 f303 	lsr.w	r3, r2, r3
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <HAL_RCC_ClockConfig+0x270>)
 8008b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <HAL_RCC_ClockConfig+0x274>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fc fb2c 	bl	80051e0 <HAL_InitTick>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	40022000 	.word	0x40022000
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	04c4b400 	.word	0x04c4b400
 8008ba0:	0800fe9c 	.word	0x0800fe9c
 8008ba4:	20000000 	.word	0x20000000
 8008ba8:	20000004 	.word	0x20000004

08008bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008bb2:	4b2c      	ldr	r3, [pc, #176]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 030c 	and.w	r3, r3, #12
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	d102      	bne.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008bbe:	4b2a      	ldr	r3, [pc, #168]	; (8008c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	e047      	b.n	8008c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008bc4:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f003 030c 	and.w	r3, r3, #12
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d102      	bne.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008bd0:	4b26      	ldr	r3, [pc, #152]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	e03e      	b.n	8008c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008bd6:	4b23      	ldr	r3, [pc, #140]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 030c 	and.w	r3, r3, #12
 8008bde:	2b0c      	cmp	r3, #12
 8008be0:	d136      	bne.n	8008c50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008be2:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008bec:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	091b      	lsrs	r3, r3, #4
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d10c      	bne.n	8008c1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c00:	4a1a      	ldr	r2, [pc, #104]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c08:	4a16      	ldr	r2, [pc, #88]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c0a:	68d2      	ldr	r2, [r2, #12]
 8008c0c:	0a12      	lsrs	r2, r2, #8
 8008c0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	617b      	str	r3, [r7, #20]
      break;
 8008c18:	e00c      	b.n	8008c34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c1a:	4a13      	ldr	r2, [pc, #76]	; (8008c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	4a10      	ldr	r2, [pc, #64]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c24:	68d2      	ldr	r2, [r2, #12]
 8008c26:	0a12      	lsrs	r2, r2, #8
 8008c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c2c:	fb02 f303 	mul.w	r3, r2, r3
 8008c30:	617b      	str	r3, [r7, #20]
      break;
 8008c32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c34:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	0e5b      	lsrs	r3, r3, #25
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	3301      	adds	r3, #1
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	e001      	b.n	8008c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c54:	693b      	ldr	r3, [r7, #16]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40021000 	.word	0x40021000
 8008c68:	00f42400 	.word	0x00f42400
 8008c6c:	007a1200 	.word	0x007a1200

08008c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c74:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c76:	681b      	ldr	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000000 	.word	0x20000000

08008c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c8c:	f7ff fff0 	bl	8008c70 <HAL_RCC_GetHCLKFreq>
 8008c90:	4602      	mov	r2, r0
 8008c92:	4b06      	ldr	r3, [pc, #24]	; (8008cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	4904      	ldr	r1, [pc, #16]	; (8008cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	40021000 	.word	0x40021000
 8008cb0:	0800feac 	.word	0x0800feac

08008cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008cb8:	f7ff ffda 	bl	8008c70 <HAL_RCC_GetHCLKFreq>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	0adb      	lsrs	r3, r3, #11
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	4904      	ldr	r1, [pc, #16]	; (8008cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cca:	5ccb      	ldrb	r3, [r1, r3]
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	0800feac 	.word	0x0800feac

08008ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ce6:	4b1e      	ldr	r3, [pc, #120]	; (8008d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	091b      	lsrs	r3, r3, #4
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d10c      	bne.n	8008d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d04:	4a17      	ldr	r2, [pc, #92]	; (8008d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	4a14      	ldr	r2, [pc, #80]	; (8008d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d0e:	68d2      	ldr	r2, [r2, #12]
 8008d10:	0a12      	lsrs	r2, r2, #8
 8008d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	617b      	str	r3, [r7, #20]
    break;
 8008d1c:	e00c      	b.n	8008d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d1e:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d26:	4a0e      	ldr	r2, [pc, #56]	; (8008d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d28:	68d2      	ldr	r2, [r2, #12]
 8008d2a:	0a12      	lsrs	r2, r2, #8
 8008d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	617b      	str	r3, [r7, #20]
    break;
 8008d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d38:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	0e5b      	lsrs	r3, r3, #25
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	3301      	adds	r3, #1
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008d52:	687b      	ldr	r3, [r7, #4]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	40021000 	.word	0x40021000
 8008d64:	007a1200 	.word	0x007a1200
 8008d68:	00f42400 	.word	0x00f42400

08008d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d74:	2300      	movs	r3, #0
 8008d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d78:	2300      	movs	r3, #0
 8008d7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8098 	beq.w	8008eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d8e:	4b43      	ldr	r3, [pc, #268]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10d      	bne.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d9a:	4b40      	ldr	r3, [pc, #256]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	4a3f      	ldr	r2, [pc, #252]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da4:	6593      	str	r3, [r2, #88]	; 0x58
 8008da6:	4b3d      	ldr	r3, [pc, #244]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dae:	60bb      	str	r3, [r7, #8]
 8008db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008db2:	2301      	movs	r3, #1
 8008db4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008db6:	4b3a      	ldr	r3, [pc, #232]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a39      	ldr	r2, [pc, #228]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dc2:	f7fc fa59 	bl	8005278 <HAL_GetTick>
 8008dc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dc8:	e009      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dca:	f7fc fa55 	bl	8005278 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d902      	bls.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	74fb      	strb	r3, [r7, #19]
        break;
 8008ddc:	e005      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dde:	4b30      	ldr	r3, [pc, #192]	; (8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0ef      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008dea:	7cfb      	ldrb	r3, [r7, #19]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d159      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008df0:	4b2a      	ldr	r3, [pc, #168]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01e      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d019      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e0c:	4b23      	ldr	r3, [pc, #140]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e18:	4b20      	ldr	r3, [pc, #128]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1e:	4a1f      	ldr	r2, [pc, #124]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e28:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2e:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e38:	4a18      	ldr	r2, [pc, #96]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d016      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4a:	f7fc fa15 	bl	8005278 <HAL_GetTick>
 8008e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e50:	e00b      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e52:	f7fc fa11 	bl	8005278 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d902      	bls.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	74fb      	strb	r3, [r7, #19]
            break;
 8008e68:	e006      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0ec      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e78:	7cfb      	ldrb	r3, [r7, #19]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8c:	4903      	ldr	r1, [pc, #12]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008e94:	e008      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e96:	7cfb      	ldrb	r3, [r7, #19]
 8008e98:	74bb      	strb	r3, [r7, #18]
 8008e9a:	e005      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea4:	7cfb      	ldrb	r3, [r7, #19]
 8008ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ea8:	7c7b      	ldrb	r3, [r7, #17]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d105      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eae:	4ba6      	ldr	r3, [pc, #664]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb2:	4aa5      	ldr	r2, [pc, #660]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ec6:	4ba0      	ldr	r3, [pc, #640]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	f023 0203 	bic.w	r2, r3, #3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	499c      	ldr	r1, [pc, #624]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00a      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ee8:	4b97      	ldr	r3, [pc, #604]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eee:	f023 020c 	bic.w	r2, r3, #12
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	4994      	ldr	r1, [pc, #592]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f0a:	4b8f      	ldr	r3, [pc, #572]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	498b      	ldr	r1, [pc, #556]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00a      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f2c:	4b86      	ldr	r3, [pc, #536]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	4983      	ldr	r1, [pc, #524]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f4e:	4b7e      	ldr	r3, [pc, #504]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	497a      	ldr	r1, [pc, #488]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00a      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f70:	4b75      	ldr	r3, [pc, #468]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	4972      	ldr	r1, [pc, #456]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f92:	4b6d      	ldr	r3, [pc, #436]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	4969      	ldr	r1, [pc, #420]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00a      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fb4:	4b64      	ldr	r3, [pc, #400]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	4961      	ldr	r1, [pc, #388]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fd6:	4b5c      	ldr	r3, [pc, #368]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	4958      	ldr	r1, [pc, #352]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d015      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ff8:	4b53      	ldr	r3, [pc, #332]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	4950      	ldr	r1, [pc, #320]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009008:	4313      	orrs	r3, r2
 800900a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009016:	d105      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009018:	4b4b      	ldr	r3, [pc, #300]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	4a4a      	ldr	r2, [pc, #296]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800901e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800902c:	2b00      	cmp	r3, #0
 800902e:	d015      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009030:	4b45      	ldr	r3, [pc, #276]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	4942      	ldr	r1, [pc, #264]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009040:	4313      	orrs	r3, r2
 8009042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800904e:	d105      	bne.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009050:	4b3d      	ldr	r3, [pc, #244]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	4a3c      	ldr	r2, [pc, #240]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800905a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d015      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009068:	4b37      	ldr	r3, [pc, #220]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800906a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	4934      	ldr	r1, [pc, #208]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009078:	4313      	orrs	r3, r2
 800907a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009086:	d105      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009088:	4b2f      	ldr	r3, [pc, #188]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	4a2e      	ldr	r2, [pc, #184]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800908e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d015      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090a0:	4b29      	ldr	r3, [pc, #164]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	4926      	ldr	r1, [pc, #152]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090be:	d105      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090c0:	4b21      	ldr	r3, [pc, #132]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	4a20      	ldr	r2, [pc, #128]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d015      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090d8:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e6:	4918      	ldr	r1, [pc, #96]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090f6:	d105      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090f8:	4b13      	ldr	r3, [pc, #76]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	4a12      	ldr	r2, [pc, #72]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d015      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009110:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911e:	490a      	ldr	r1, [pc, #40]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009120:	4313      	orrs	r3, r2
 8009122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912e:	d105      	bne.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009130:	4b05      	ldr	r3, [pc, #20]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	4a04      	ldr	r2, [pc, #16]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800913a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800913c:	7cbb      	ldrb	r3, [r7, #18]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40021000 	.word	0x40021000

0800914c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e09d      	b.n	800929a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d108      	bne.n	8009178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800916e:	d009      	beq.n	8009184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	61da      	str	r2, [r3, #28]
 8009176:	e005      	b.n	8009184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fb fd20 	bl	8004be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091c4:	d902      	bls.n	80091cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	e002      	b.n	80091d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091da:	d007      	beq.n	80091ec <HAL_SPI_Init+0xa0>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091e4:	d002      	beq.n	80091ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800921a:	431a      	orrs	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009224:	431a      	orrs	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800922e:	ea42 0103 	orr.w	r1, r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	0c1b      	lsrs	r3, r3, #16
 8009248:	f003 0204 	and.w	r2, r3, #4
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925a:	f003 0308 	and.w	r3, r3, #8
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009268:	ea42 0103 	orr.w	r1, r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69da      	ldr	r2, [r3, #28]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_SPI_TransmitReceive_IT+0x20>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e091      	b.n	80093e8 <HAL_SPI_TransmitReceive_IT+0x144>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80092da:	7dbb      	ldrb	r3, [r7, #22]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d00d      	beq.n	80092fc <HAL_SPI_TransmitReceive_IT+0x58>
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e6:	d106      	bne.n	80092f6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d102      	bne.n	80092f6 <HAL_SPI_TransmitReceive_IT+0x52>
 80092f0:	7dbb      	ldrb	r3, [r7, #22]
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d002      	beq.n	80092fc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80092f6:	2302      	movs	r3, #2
 80092f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092fa:	e070      	b.n	80093de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009308:	887b      	ldrh	r3, [r7, #2]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009312:	e064      	b.n	80093de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b04      	cmp	r3, #4
 800931e:	d003      	beq.n	8009328 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2205      	movs	r2, #5
 8009324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	887a      	ldrh	r2, [r7, #2]
 8009338:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	887a      	ldrh	r2, [r7, #2]
 800933e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	887a      	ldrh	r2, [r7, #2]
 800934a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	887a      	ldrh	r2, [r7, #2]
 8009352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800935e:	d906      	bls.n	800936e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4a24      	ldr	r2, [pc, #144]	; (80093f4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009364:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4a23      	ldr	r2, [pc, #140]	; (80093f8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800936a:	651a      	str	r2, [r3, #80]	; 0x50
 800936c:	e005      	b.n	800937a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4a22      	ldr	r2, [pc, #136]	; (80093fc <HAL_SPI_TransmitReceive_IT+0x158>)
 8009372:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4a22      	ldr	r2, [pc, #136]	; (8009400 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009378:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009382:	d802      	bhi.n	800938a <HAL_SPI_TransmitReceive_IT+0xe6>
 8009384:	887b      	ldrh	r3, [r7, #2]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d908      	bls.n	800939c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	e007      	b.n	80093ac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093aa:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80093ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c6:	2b40      	cmp	r3, #64	; 0x40
 80093c8:	d008      	beq.n	80093dc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	e000      	b.n	80093de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80093dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	080097a7 	.word	0x080097a7
 80093f8:	0800980d 	.word	0x0800980d
 80093fc:	08009657 	.word	0x08009657
 8009400:	08009715 	.word	0x08009715

08009404 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	099b      	lsrs	r3, r3, #6
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10f      	bne.n	8009448 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	099b      	lsrs	r3, r3, #6
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	4798      	blx	r3
    return;
 8009446:	e0d7      	b.n	80095f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <HAL_SPI_IRQHandler+0x66>
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	09db      	lsrs	r3, r3, #7
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	4798      	blx	r3
    return;
 8009468:	e0c6      	b.n	80095f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	095b      	lsrs	r3, r3, #5
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10c      	bne.n	8009490 <HAL_SPI_IRQHandler+0x8c>
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	099b      	lsrs	r3, r3, #6
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 80b4 	beq.w	80095f8 <HAL_SPI_IRQHandler+0x1f4>
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80ad 	beq.w	80095f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	099b      	lsrs	r3, r3, #6
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d023      	beq.n	80094f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d011      	beq.n	80094da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ba:	f043 0204 	orr.w	r2, r3, #4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	617b      	str	r3, [r7, #20]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	617b      	str	r3, [r7, #20]
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	e00b      	b.n	80094f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	693b      	ldr	r3, [r7, #16]
        return;
 80094f0:	e082      	b.n	80095f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d014      	beq.n	8009528 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009502:	f043 0201 	orr.w	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	0a1b      	lsrs	r3, r3, #8
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009538:	f043 0208 	orr.w	r2, r3, #8
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009540:	2300      	movs	r3, #0
 8009542:	60bb      	str	r3, [r7, #8]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	60bb      	str	r3, [r7, #8]
 800954c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009552:	2b00      	cmp	r3, #0
 8009554:	d04f      	beq.n	80095f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009564:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <HAL_SPI_IRQHandler+0x17e>
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d034      	beq.n	80095ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0203 	bic.w	r2, r2, #3
 8009590:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009596:	2b00      	cmp	r3, #0
 8009598:	d011      	beq.n	80095be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959e:	4a18      	ldr	r2, [pc, #96]	; (8009600 <HAL_SPI_IRQHandler+0x1fc>)
 80095a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fd fa27 	bl	80069fa <HAL_DMA_Abort_IT>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d016      	beq.n	80095f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ca:	4a0d      	ldr	r2, [pc, #52]	; (8009600 <HAL_SPI_IRQHandler+0x1fc>)
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fd fa11 	bl	80069fa <HAL_DMA_Abort_IT>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80095ea:	e003      	b.n	80095f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f813 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80095f2:	e000      	b.n	80095f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80095f4:	bf00      	nop
    return;
 80095f6:	bf00      	nop
  }
}
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	0800962d 	.word	0x0800962d

08009604 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff ffe5 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b01      	cmp	r3, #1
 8009668:	d923      	bls.n	80096b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	b292      	uxth	r2, r2
 8009676:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	1c9a      	adds	r2, r3, #2
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b02      	subs	r3, #2
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b01      	cmp	r3, #1
 800969e:	d11f      	bne.n	80096e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096ae:	605a      	str	r2, [r3, #4]
 80096b0:	e016      	b.n	80096e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f103 020c 	add.w	r2, r3, #12
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	7812      	ldrb	r2, [r2, #0]
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10f      	bne.n	800970c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80096fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa14 	bl	8009b34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b01      	cmp	r3, #1
 8009724:	d912      	bls.n	800974c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	881a      	ldrh	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	1c9a      	adds	r2, r3, #2
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b02      	subs	r3, #2
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800974a:	e012      	b.n	8009772 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	330c      	adds	r3, #12
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009768:	b29b      	uxth	r3, r3
 800976a:	3b01      	subs	r3, #1
 800976c:	b29a      	uxth	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d110      	bne.n	800979e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800978a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f9cb 	bl	8009b34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	b292      	uxth	r2, r2
 80097ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	1c9a      	adds	r2, r3, #2
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10f      	bne.n	8009804 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f998 	bl	8009b34 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	1c9a      	adds	r2, r3, #2
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d110      	bne.n	8009864 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009850:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f968 	bl	8009b34 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	4613      	mov	r3, r2
 800987a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800987c:	f7fb fcfc 	bl	8005278 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	4413      	add	r3, r2
 800988a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800988c:	f7fb fcf4 	bl	8005278 <HAL_GetTick>
 8009890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009892:	4b39      	ldr	r3, [pc, #228]	; (8009978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	015b      	lsls	r3, r3, #5
 8009898:	0d1b      	lsrs	r3, r3, #20
 800989a:	69fa      	ldr	r2, [r7, #28]
 800989c:	fb02 f303 	mul.w	r3, r2, r3
 80098a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098a2:	e054      	b.n	800994e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098aa:	d050      	beq.n	800994e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098ac:	f7fb fce4 	bl	8005278 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d902      	bls.n	80098c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d13d      	bne.n	800993e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098da:	d111      	bne.n	8009900 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e4:	d004      	beq.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ee:	d107      	bne.n	8009900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009908:	d10f      	bne.n	800992a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e017      	b.n	800996e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	3b01      	subs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4013      	ands	r3, r2
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	429a      	cmp	r2, r3
 800996a:	d19b      	bne.n	80098a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3720      	adds	r7, #32
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000000 	.word	0x20000000

0800997c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	; 0x28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800998e:	f7fb fc73 	bl	8005278 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	4413      	add	r3, r2
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800999e:	f7fb fc6b 	bl	8005278 <HAL_GetTick>
 80099a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	330c      	adds	r3, #12
 80099aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099ac:	4b3d      	ldr	r3, [pc, #244]	; (8009aa4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	00da      	lsls	r2, r3, #3
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	0d1b      	lsrs	r3, r3, #20
 80099bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80099c4:	e060      	b.n	8009a88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80099cc:	d107      	bne.n	80099de <SPI_WaitFifoStateUntilTimeout+0x62>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e4:	d050      	beq.n	8009a88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099e6:	f7fb fc47 	bl	8005278 <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d902      	bls.n	80099fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d13d      	bne.n	8009a78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a14:	d111      	bne.n	8009a3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a1e:	d004      	beq.n	8009a2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a28:	d107      	bne.n	8009a3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a42:	d10f      	bne.n	8009a64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e010      	b.n	8009a9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	4013      	ands	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d196      	bne.n	80099c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3728      	adds	r7, #40	; 0x28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000000 	.word	0x20000000

08009aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff ff5b 	bl	800997c <SPI_WaitFifoStateUntilTimeout>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad0:	f043 0220 	orr.w	r2, r3, #32
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e027      	b.n	8009b2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2180      	movs	r1, #128	; 0x80
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7ff fec0 	bl	800986c <SPI_WaitFlagStateUntilTimeout>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d007      	beq.n	8009b02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af6:	f043 0220 	orr.w	r2, r3, #32
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e014      	b.n	8009b2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff ff34 	bl	800997c <SPI_WaitFifoStateUntilTimeout>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b1e:	f043 0220 	orr.w	r2, r3, #32
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e000      	b.n	8009b2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b3c:	f7fb fb9c 	bl	8005278 <HAL_GetTick>
 8009b40:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0220 	bic.w	r2, r2, #32
 8009b50:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	2164      	movs	r1, #100	; 0x64
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff ffa6 	bl	8009aa8 <SPI_EndRxTxTransaction>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b66:	f043 0220 	orr.w	r2, r3, #32
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d115      	bne.n	8009ba2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d107      	bne.n	8009b92 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fd3a 	bl	8009604 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009b90:	e00e      	b.n	8009bb0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7f7 fa52 	bl	8001044 <HAL_SPI_TxRxCpltCallback>
}
 8009ba0:	e006      	b.n	8009bb0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff fd34 	bl	8009618 <HAL_SPI_ErrorCallback>
}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e049      	b.n	8009c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fb f84c 	bl	8004c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f000 fe1a 	bl	800a830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d001      	beq.n	8009c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e042      	b.n	8009d06 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a21      	ldr	r2, [pc, #132]	; (8009d14 <HAL_TIM_Base_Start+0xac>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d018      	beq.n	8009cc4 <HAL_TIM_Base_Start+0x5c>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9a:	d013      	beq.n	8009cc4 <HAL_TIM_Base_Start+0x5c>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_TIM_Base_Start+0xb0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00e      	beq.n	8009cc4 <HAL_TIM_Base_Start+0x5c>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <HAL_TIM_Base_Start+0xb4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d009      	beq.n	8009cc4 <HAL_TIM_Base_Start+0x5c>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a1a      	ldr	r2, [pc, #104]	; (8009d20 <HAL_TIM_Base_Start+0xb8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIM_Base_Start+0x5c>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a19      	ldr	r2, [pc, #100]	; (8009d24 <HAL_TIM_Base_Start+0xbc>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d115      	bne.n	8009cf0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <HAL_TIM_Base_Start+0xc0>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b06      	cmp	r3, #6
 8009cd4:	d015      	beq.n	8009d02 <HAL_TIM_Base_Start+0x9a>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cdc:	d011      	beq.n	8009d02 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0201 	orr.w	r2, r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cee:	e008      	b.n	8009d02 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0201 	orr.w	r2, r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	e000      	b.n	8009d04 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	40012c00 	.word	0x40012c00
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40013400 	.word	0x40013400
 8009d24:	40014000 	.word	0x40014000
 8009d28:	00010007 	.word	0x00010007

08009d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d001      	beq.n	8009d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e04a      	b.n	8009dda <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0201 	orr.w	r2, r2, #1
 8009d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a21      	ldr	r2, [pc, #132]	; (8009de8 <HAL_TIM_Base_Start_IT+0xbc>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d018      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0x6c>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6e:	d013      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0x6c>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1d      	ldr	r2, [pc, #116]	; (8009dec <HAL_TIM_Base_Start_IT+0xc0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00e      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0x6c>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a1c      	ldr	r2, [pc, #112]	; (8009df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d009      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0x6c>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a1a      	ldr	r2, [pc, #104]	; (8009df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0x6c>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a19      	ldr	r2, [pc, #100]	; (8009df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d115      	bne.n	8009dc4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689a      	ldr	r2, [r3, #8]
 8009d9e:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b06      	cmp	r3, #6
 8009da8:	d015      	beq.n	8009dd6 <HAL_TIM_Base_Start_IT+0xaa>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db0:	d011      	beq.n	8009dd6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0201 	orr.w	r2, r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc2:	e008      	b.n	8009dd6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0201 	orr.w	r2, r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	e000      	b.n	8009dd8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	40012c00 	.word	0x40012c00
 8009dec:	40000400 	.word	0x40000400
 8009df0:	40000800 	.word	0x40000800
 8009df4:	40013400 	.word	0x40013400
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	00010007 	.word	0x00010007

08009e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e049      	b.n	8009ea6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f841 	bl	8009eae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f000 fcf6 	bl	800a830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
	...

08009ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d109      	bne.n	8009ee8 <HAL_TIM_PWM_Start+0x24>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	bf14      	ite	ne
 8009ee0:	2301      	movne	r3, #1
 8009ee2:	2300      	moveq	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e03c      	b.n	8009f62 <HAL_TIM_PWM_Start+0x9e>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d109      	bne.n	8009f02 <HAL_TIM_PWM_Start+0x3e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	bf14      	ite	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	2300      	moveq	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	e02f      	b.n	8009f62 <HAL_TIM_PWM_Start+0x9e>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d109      	bne.n	8009f1c <HAL_TIM_PWM_Start+0x58>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	bf14      	ite	ne
 8009f14:	2301      	movne	r3, #1
 8009f16:	2300      	moveq	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	e022      	b.n	8009f62 <HAL_TIM_PWM_Start+0x9e>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b0c      	cmp	r3, #12
 8009f20:	d109      	bne.n	8009f36 <HAL_TIM_PWM_Start+0x72>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	bf14      	ite	ne
 8009f2e:	2301      	movne	r3, #1
 8009f30:	2300      	moveq	r3, #0
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	e015      	b.n	8009f62 <HAL_TIM_PWM_Start+0x9e>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	d109      	bne.n	8009f50 <HAL_TIM_PWM_Start+0x8c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	bf14      	ite	ne
 8009f48:	2301      	movne	r3, #1
 8009f4a:	2300      	moveq	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	e008      	b.n	8009f62 <HAL_TIM_PWM_Start+0x9e>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	bf14      	ite	ne
 8009f5c:	2301      	movne	r3, #1
 8009f5e:	2300      	moveq	r3, #0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e097      	b.n	800a09a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <HAL_TIM_PWM_Start+0xb6>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f78:	e023      	b.n	8009fc2 <HAL_TIM_PWM_Start+0xfe>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b04      	cmp	r3, #4
 8009f7e:	d104      	bne.n	8009f8a <HAL_TIM_PWM_Start+0xc6>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f88:	e01b      	b.n	8009fc2 <HAL_TIM_PWM_Start+0xfe>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b08      	cmp	r3, #8
 8009f8e:	d104      	bne.n	8009f9a <HAL_TIM_PWM_Start+0xd6>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f98:	e013      	b.n	8009fc2 <HAL_TIM_PWM_Start+0xfe>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b0c      	cmp	r3, #12
 8009f9e:	d104      	bne.n	8009faa <HAL_TIM_PWM_Start+0xe6>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fa8:	e00b      	b.n	8009fc2 <HAL_TIM_PWM_Start+0xfe>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b10      	cmp	r3, #16
 8009fae:	d104      	bne.n	8009fba <HAL_TIM_PWM_Start+0xf6>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fb8:	e003      	b.n	8009fc2 <HAL_TIM_PWM_Start+0xfe>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 f852 	bl	800b074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a33      	ldr	r2, [pc, #204]	; (800a0a4 <HAL_TIM_PWM_Start+0x1e0>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d013      	beq.n	800a002 <HAL_TIM_PWM_Start+0x13e>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a32      	ldr	r2, [pc, #200]	; (800a0a8 <HAL_TIM_PWM_Start+0x1e4>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00e      	beq.n	800a002 <HAL_TIM_PWM_Start+0x13e>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a30      	ldr	r2, [pc, #192]	; (800a0ac <HAL_TIM_PWM_Start+0x1e8>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d009      	beq.n	800a002 <HAL_TIM_PWM_Start+0x13e>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a2f      	ldr	r2, [pc, #188]	; (800a0b0 <HAL_TIM_PWM_Start+0x1ec>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d004      	beq.n	800a002 <HAL_TIM_PWM_Start+0x13e>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a2d      	ldr	r2, [pc, #180]	; (800a0b4 <HAL_TIM_PWM_Start+0x1f0>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d101      	bne.n	800a006 <HAL_TIM_PWM_Start+0x142>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <HAL_TIM_PWM_Start+0x144>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a01a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a20      	ldr	r2, [pc, #128]	; (800a0a4 <HAL_TIM_PWM_Start+0x1e0>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d018      	beq.n	800a058 <HAL_TIM_PWM_Start+0x194>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02e:	d013      	beq.n	800a058 <HAL_TIM_PWM_Start+0x194>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a20      	ldr	r2, [pc, #128]	; (800a0b8 <HAL_TIM_PWM_Start+0x1f4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d00e      	beq.n	800a058 <HAL_TIM_PWM_Start+0x194>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a1f      	ldr	r2, [pc, #124]	; (800a0bc <HAL_TIM_PWM_Start+0x1f8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d009      	beq.n	800a058 <HAL_TIM_PWM_Start+0x194>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a17      	ldr	r2, [pc, #92]	; (800a0a8 <HAL_TIM_PWM_Start+0x1e4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <HAL_TIM_PWM_Start+0x194>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a16      	ldr	r2, [pc, #88]	; (800a0ac <HAL_TIM_PWM_Start+0x1e8>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d115      	bne.n	800a084 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	4b18      	ldr	r3, [pc, #96]	; (800a0c0 <HAL_TIM_PWM_Start+0x1fc>)
 800a060:	4013      	ands	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b06      	cmp	r3, #6
 800a068:	d015      	beq.n	800a096 <HAL_TIM_PWM_Start+0x1d2>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a070:	d011      	beq.n	800a096 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0201 	orr.w	r2, r2, #1
 800a080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a082:	e008      	b.n	800a096 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0201 	orr.w	r2, r2, #1
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	e000      	b.n	800a098 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	40012c00 	.word	0x40012c00
 800a0a8:	40013400 	.word	0x40013400
 800a0ac:	40014000 	.word	0x40014000
 800a0b0:	40014400 	.word	0x40014400
 800a0b4:	40014800 	.word	0x40014800
 800a0b8:	40000400 	.word	0x40000400
 800a0bc:	40000800 	.word	0x40000800
 800a0c0:	00010007 	.word	0x00010007

0800a0c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d122      	bne.n	800a120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d11b      	bne.n	800a120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0202 	mvn.w	r2, #2
 800a0f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fb74 	bl	800a7f4 <HAL_TIM_IC_CaptureCallback>
 800a10c:	e005      	b.n	800a11a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fb66 	bl	800a7e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb77 	bl	800a808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f003 0304 	and.w	r3, r3, #4
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d122      	bne.n	800a174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b04      	cmp	r3, #4
 800a13a:	d11b      	bne.n	800a174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f06f 0204 	mvn.w	r2, #4
 800a144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2202      	movs	r2, #2
 800a14a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fb4a 	bl	800a7f4 <HAL_TIM_IC_CaptureCallback>
 800a160:	e005      	b.n	800a16e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fb3c 	bl	800a7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fb4d 	bl	800a808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d122      	bne.n	800a1c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d11b      	bne.n	800a1c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f06f 0208 	mvn.w	r2, #8
 800a198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2204      	movs	r2, #4
 800a19e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fb20 	bl	800a7f4 <HAL_TIM_IC_CaptureCallback>
 800a1b4:	e005      	b.n	800a1c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fb12 	bl	800a7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fb23 	bl	800a808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	f003 0310 	and.w	r3, r3, #16
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d122      	bne.n	800a21c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f003 0310 	and.w	r3, r3, #16
 800a1e0:	2b10      	cmp	r3, #16
 800a1e2:	d11b      	bne.n	800a21c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f06f 0210 	mvn.w	r2, #16
 800a1ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 faf6 	bl	800a7f4 <HAL_TIM_IC_CaptureCallback>
 800a208:	e005      	b.n	800a216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fae8 	bl	800a7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 faf9 	bl	800a808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b01      	cmp	r3, #1
 800a228:	d10e      	bne.n	800a248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b01      	cmp	r3, #1
 800a236:	d107      	bne.n	800a248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f06f 0201 	mvn.w	r2, #1
 800a240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7f6 fec4 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a252:	2b80      	cmp	r3, #128	; 0x80
 800a254:	d10e      	bne.n	800a274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a260:	2b80      	cmp	r3, #128	; 0x80
 800a262:	d107      	bne.n	800a274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f001 f906 	bl	800b480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a282:	d10e      	bne.n	800a2a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28e:	2b80      	cmp	r3, #128	; 0x80
 800a290:	d107      	bne.n	800a2a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 f8f9 	bl	800b494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ac:	2b40      	cmp	r3, #64	; 0x40
 800a2ae:	d10e      	bne.n	800a2ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ba:	2b40      	cmp	r3, #64	; 0x40
 800a2bc:	d107      	bne.n	800a2ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 faa7 	bl	800a81c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d10e      	bne.n	800a2fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	f003 0320 	and.w	r3, r3, #32
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d107      	bne.n	800a2fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f06f 0220 	mvn.w	r2, #32
 800a2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f001 f8b9 	bl	800b46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a308:	d10f      	bne.n	800a32a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a318:	d107      	bne.n	800a32a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 f8bf 	bl	800b4a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a338:	d10f      	bne.n	800a35a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a348:	d107      	bne.n	800a35a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 f8b1 	bl	800b4bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a368:	d10f      	bne.n	800a38a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a378:	d107      	bne.n	800a38a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 f8a3 	bl	800b4d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a398:	d10f      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3a8:	d107      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 f895 	bl	800b4e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d101      	bne.n	800a3e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3de:	2302      	movs	r3, #2
 800a3e0:	e0ff      	b.n	800a5e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b14      	cmp	r3, #20
 800a3ee:	f200 80f0 	bhi.w	800a5d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a3f2:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a44d 	.word	0x0800a44d
 800a3fc:	0800a5d3 	.word	0x0800a5d3
 800a400:	0800a5d3 	.word	0x0800a5d3
 800a404:	0800a5d3 	.word	0x0800a5d3
 800a408:	0800a48d 	.word	0x0800a48d
 800a40c:	0800a5d3 	.word	0x0800a5d3
 800a410:	0800a5d3 	.word	0x0800a5d3
 800a414:	0800a5d3 	.word	0x0800a5d3
 800a418:	0800a4cf 	.word	0x0800a4cf
 800a41c:	0800a5d3 	.word	0x0800a5d3
 800a420:	0800a5d3 	.word	0x0800a5d3
 800a424:	0800a5d3 	.word	0x0800a5d3
 800a428:	0800a50f 	.word	0x0800a50f
 800a42c:	0800a5d3 	.word	0x0800a5d3
 800a430:	0800a5d3 	.word	0x0800a5d3
 800a434:	0800a5d3 	.word	0x0800a5d3
 800a438:	0800a551 	.word	0x0800a551
 800a43c:	0800a5d3 	.word	0x0800a5d3
 800a440:	0800a5d3 	.word	0x0800a5d3
 800a444:	0800a5d3 	.word	0x0800a5d3
 800a448:	0800a591 	.word	0x0800a591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fa7c 	bl	800a950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699a      	ldr	r2, [r3, #24]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f042 0208 	orr.w	r2, r2, #8
 800a466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f022 0204 	bic.w	r2, r2, #4
 800a476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6999      	ldr	r1, [r3, #24]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	619a      	str	r2, [r3, #24]
      break;
 800a48a:	e0a5      	b.n	800a5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	4618      	mov	r0, r3
 800a494:	f000 faec 	bl	800aa70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6999      	ldr	r1, [r3, #24]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	021a      	lsls	r2, r3, #8
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	619a      	str	r2, [r3, #24]
      break;
 800a4cc:	e084      	b.n	800a5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fb55 	bl	800ab84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69da      	ldr	r2, [r3, #28]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f042 0208 	orr.w	r2, r2, #8
 800a4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69da      	ldr	r2, [r3, #28]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0204 	bic.w	r2, r2, #4
 800a4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	69d9      	ldr	r1, [r3, #28]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	61da      	str	r2, [r3, #28]
      break;
 800a50c:	e064      	b.n	800a5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fbbd 	bl	800ac94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69da      	ldr	r2, [r3, #28]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69d9      	ldr	r1, [r3, #28]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	021a      	lsls	r2, r3, #8
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	61da      	str	r2, [r3, #28]
      break;
 800a54e:	e043      	b.n	800a5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68b9      	ldr	r1, [r7, #8]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fc26 	bl	800ada8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f042 0208 	orr.w	r2, r2, #8
 800a56a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0204 	bic.w	r2, r2, #4
 800a57a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	691a      	ldr	r2, [r3, #16]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a58e:	e023      	b.n	800a5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fc6a 	bl	800ae70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	021a      	lsls	r2, r3, #8
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a5d0:	e002      	b.n	800a5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop

0800a5ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_TIM_ConfigClockSource+0x1c>
 800a604:	2302      	movs	r3, #2
 800a606:	e0de      	b.n	800a7c6 <HAL_TIM_ConfigClockSource+0x1da>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a62a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a63      	ldr	r2, [pc, #396]	; (800a7d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	f000 80a9 	beq.w	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a648:	4a61      	ldr	r2, [pc, #388]	; (800a7d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	f200 80ae 	bhi.w	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a650:	4a60      	ldr	r2, [pc, #384]	; (800a7d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a652:	4293      	cmp	r3, r2
 800a654:	f000 80a1 	beq.w	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a658:	4a5e      	ldr	r2, [pc, #376]	; (800a7d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	f200 80a6 	bhi.w	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a660:	4a5d      	ldr	r2, [pc, #372]	; (800a7d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a662:	4293      	cmp	r3, r2
 800a664:	f000 8099 	beq.w	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a668:	4a5b      	ldr	r2, [pc, #364]	; (800a7d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	f200 809e 	bhi.w	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a670:	4a5a      	ldr	r2, [pc, #360]	; (800a7dc <HAL_TIM_ConfigClockSource+0x1f0>)
 800a672:	4293      	cmp	r3, r2
 800a674:	f000 8091 	beq.w	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a678:	4a58      	ldr	r2, [pc, #352]	; (800a7dc <HAL_TIM_ConfigClockSource+0x1f0>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	f200 8096 	bhi.w	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a680:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a684:	f000 8089 	beq.w	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a688:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a68c:	f200 808e 	bhi.w	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a694:	d03e      	beq.n	800a714 <HAL_TIM_ConfigClockSource+0x128>
 800a696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69a:	f200 8087 	bhi.w	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a69e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6a2:	f000 8086 	beq.w	800a7b2 <HAL_TIM_ConfigClockSource+0x1c6>
 800a6a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6aa:	d87f      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6ac:	2b70      	cmp	r3, #112	; 0x70
 800a6ae:	d01a      	beq.n	800a6e6 <HAL_TIM_ConfigClockSource+0xfa>
 800a6b0:	2b70      	cmp	r3, #112	; 0x70
 800a6b2:	d87b      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6b4:	2b60      	cmp	r3, #96	; 0x60
 800a6b6:	d050      	beq.n	800a75a <HAL_TIM_ConfigClockSource+0x16e>
 800a6b8:	2b60      	cmp	r3, #96	; 0x60
 800a6ba:	d877      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6bc:	2b50      	cmp	r3, #80	; 0x50
 800a6be:	d03c      	beq.n	800a73a <HAL_TIM_ConfigClockSource+0x14e>
 800a6c0:	2b50      	cmp	r3, #80	; 0x50
 800a6c2:	d873      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6c4:	2b40      	cmp	r3, #64	; 0x40
 800a6c6:	d058      	beq.n	800a77a <HAL_TIM_ConfigClockSource+0x18e>
 800a6c8:	2b40      	cmp	r3, #64	; 0x40
 800a6ca:	d86f      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6cc:	2b30      	cmp	r3, #48	; 0x30
 800a6ce:	d064      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a6d0:	2b30      	cmp	r3, #48	; 0x30
 800a6d2:	d86b      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6d4:	2b20      	cmp	r3, #32
 800a6d6:	d060      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	d867      	bhi.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d05c      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a6e0:	2b10      	cmp	r3, #16
 800a6e2:	d05a      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x1ae>
 800a6e4:	e062      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6899      	ldr	r1, [r3, #8]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	f000 fc9d 	bl	800b034 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	609a      	str	r2, [r3, #8]
      break;
 800a712:	e04f      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	6899      	ldr	r1, [r3, #8]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	f000 fc86 	bl	800b034 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a736:	609a      	str	r2, [r3, #8]
      break;
 800a738:	e03c      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	6859      	ldr	r1, [r3, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	461a      	mov	r2, r3
 800a748:	f000 fbf8 	bl	800af3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2150      	movs	r1, #80	; 0x50
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fc51 	bl	800affa <TIM_ITRx_SetConfig>
      break;
 800a758:	e02c      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	6859      	ldr	r1, [r3, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	461a      	mov	r2, r3
 800a768:	f000 fc17 	bl	800af9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2160      	movs	r1, #96	; 0x60
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fc41 	bl	800affa <TIM_ITRx_SetConfig>
      break;
 800a778:	e01c      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	6859      	ldr	r1, [r3, #4]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	461a      	mov	r2, r3
 800a788:	f000 fbd8 	bl	800af3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2140      	movs	r1, #64	; 0x40
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fc31 	bl	800affa <TIM_ITRx_SetConfig>
      break;
 800a798:	e00c      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f000 fc28 	bl	800affa <TIM_ITRx_SetConfig>
      break;
 800a7aa:	e003      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b0:	e000      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a7b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	00100070 	.word	0x00100070
 800a7d4:	00100040 	.word	0x00100040
 800a7d8:	00100030 	.word	0x00100030
 800a7dc:	00100020 	.word	0x00100020

0800a7e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a3c      	ldr	r2, [pc, #240]	; (800a934 <TIM_Base_SetConfig+0x104>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00f      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84e:	d00b      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a39      	ldr	r2, [pc, #228]	; (800a938 <TIM_Base_SetConfig+0x108>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d007      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a38      	ldr	r2, [pc, #224]	; (800a93c <TIM_Base_SetConfig+0x10c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d003      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a37      	ldr	r2, [pc, #220]	; (800a940 <TIM_Base_SetConfig+0x110>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d108      	bne.n	800a87a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a2d      	ldr	r2, [pc, #180]	; (800a934 <TIM_Base_SetConfig+0x104>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d01b      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a888:	d017      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a2a      	ldr	r2, [pc, #168]	; (800a938 <TIM_Base_SetConfig+0x108>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d013      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a29      	ldr	r2, [pc, #164]	; (800a93c <TIM_Base_SetConfig+0x10c>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00f      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a28      	ldr	r2, [pc, #160]	; (800a940 <TIM_Base_SetConfig+0x110>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00b      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a27      	ldr	r2, [pc, #156]	; (800a944 <TIM_Base_SetConfig+0x114>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d007      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a26      	ldr	r2, [pc, #152]	; (800a948 <TIM_Base_SetConfig+0x118>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d003      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a25      	ldr	r2, [pc, #148]	; (800a94c <TIM_Base_SetConfig+0x11c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d108      	bne.n	800a8cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a10      	ldr	r2, [pc, #64]	; (800a934 <TIM_Base_SetConfig+0x104>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00f      	beq.n	800a918 <TIM_Base_SetConfig+0xe8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a11      	ldr	r2, [pc, #68]	; (800a940 <TIM_Base_SetConfig+0x110>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00b      	beq.n	800a918 <TIM_Base_SetConfig+0xe8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a10      	ldr	r2, [pc, #64]	; (800a944 <TIM_Base_SetConfig+0x114>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d007      	beq.n	800a918 <TIM_Base_SetConfig+0xe8>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a0f      	ldr	r2, [pc, #60]	; (800a948 <TIM_Base_SetConfig+0x118>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d003      	beq.n	800a918 <TIM_Base_SetConfig+0xe8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a0e      	ldr	r2, [pc, #56]	; (800a94c <TIM_Base_SetConfig+0x11c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d103      	bne.n	800a920 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691a      	ldr	r2, [r3, #16]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	615a      	str	r2, [r3, #20]
}
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	40012c00 	.word	0x40012c00
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40013400 	.word	0x40013400
 800a944:	40014000 	.word	0x40014000
 800a948:	40014400 	.word	0x40014400
 800a94c:	40014800 	.word	0x40014800

0800a950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	f023 0201 	bic.w	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f023 0302 	bic.w	r3, r3, #2
 800a99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a2c      	ldr	r2, [pc, #176]	; (800aa5c <TIM_OC1_SetConfig+0x10c>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00f      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x80>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a2b      	ldr	r2, [pc, #172]	; (800aa60 <TIM_OC1_SetConfig+0x110>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d00b      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x80>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a2a      	ldr	r2, [pc, #168]	; (800aa64 <TIM_OC1_SetConfig+0x114>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d007      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x80>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a29      	ldr	r2, [pc, #164]	; (800aa68 <TIM_OC1_SetConfig+0x118>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d003      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x80>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a28      	ldr	r2, [pc, #160]	; (800aa6c <TIM_OC1_SetConfig+0x11c>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d10c      	bne.n	800a9ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0308 	bic.w	r3, r3, #8
 800a9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f023 0304 	bic.w	r3, r3, #4
 800a9e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a1b      	ldr	r2, [pc, #108]	; (800aa5c <TIM_OC1_SetConfig+0x10c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00f      	beq.n	800aa12 <TIM_OC1_SetConfig+0xc2>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a1a      	ldr	r2, [pc, #104]	; (800aa60 <TIM_OC1_SetConfig+0x110>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <TIM_OC1_SetConfig+0xc2>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <TIM_OC1_SetConfig+0x114>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d007      	beq.n	800aa12 <TIM_OC1_SetConfig+0xc2>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a18      	ldr	r2, [pc, #96]	; (800aa68 <TIM_OC1_SetConfig+0x118>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_OC1_SetConfig+0xc2>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a17      	ldr	r2, [pc, #92]	; (800aa6c <TIM_OC1_SetConfig+0x11c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d111      	bne.n	800aa36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	621a      	str	r2, [r3, #32]
}
 800aa50:	bf00      	nop
 800aa52:	371c      	adds	r7, #28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	40012c00 	.word	0x40012c00
 800aa60:	40013400 	.word	0x40013400
 800aa64:	40014000 	.word	0x40014000
 800aa68:	40014400 	.word	0x40014400
 800aa6c:	40014800 	.word	0x40014800

0800aa70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	f023 0210 	bic.w	r2, r3, #16
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f023 0320 	bic.w	r3, r3, #32
 800aabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a28      	ldr	r2, [pc, #160]	; (800ab70 <TIM_OC2_SetConfig+0x100>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC2_SetConfig+0x6c>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a27      	ldr	r2, [pc, #156]	; (800ab74 <TIM_OC2_SetConfig+0x104>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10d      	bne.n	800aaf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a1d      	ldr	r2, [pc, #116]	; (800ab70 <TIM_OC2_SetConfig+0x100>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00f      	beq.n	800ab20 <TIM_OC2_SetConfig+0xb0>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <TIM_OC2_SetConfig+0x104>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d00b      	beq.n	800ab20 <TIM_OC2_SetConfig+0xb0>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a1b      	ldr	r2, [pc, #108]	; (800ab78 <TIM_OC2_SetConfig+0x108>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d007      	beq.n	800ab20 <TIM_OC2_SetConfig+0xb0>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a1a      	ldr	r2, [pc, #104]	; (800ab7c <TIM_OC2_SetConfig+0x10c>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d003      	beq.n	800ab20 <TIM_OC2_SetConfig+0xb0>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a19      	ldr	r2, [pc, #100]	; (800ab80 <TIM_OC2_SetConfig+0x110>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d113      	bne.n	800ab48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	621a      	str	r2, [r3, #32]
}
 800ab62:	bf00      	nop
 800ab64:	371c      	adds	r7, #28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	40012c00 	.word	0x40012c00
 800ab74:	40013400 	.word	0x40013400
 800ab78:	40014000 	.word	0x40014000
 800ab7c:	40014400 	.word	0x40014400
 800ab80:	40014800 	.word	0x40014800

0800ab84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	4313      	orrs	r3, r2
 800abdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a27      	ldr	r2, [pc, #156]	; (800ac80 <TIM_OC3_SetConfig+0xfc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d003      	beq.n	800abee <TIM_OC3_SetConfig+0x6a>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a26      	ldr	r2, [pc, #152]	; (800ac84 <TIM_OC3_SetConfig+0x100>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d10d      	bne.n	800ac0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	021b      	lsls	r3, r3, #8
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a1c      	ldr	r2, [pc, #112]	; (800ac80 <TIM_OC3_SetConfig+0xfc>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00f      	beq.n	800ac32 <TIM_OC3_SetConfig+0xae>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a1b      	ldr	r2, [pc, #108]	; (800ac84 <TIM_OC3_SetConfig+0x100>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_OC3_SetConfig+0xae>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a1a      	ldr	r2, [pc, #104]	; (800ac88 <TIM_OC3_SetConfig+0x104>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_OC3_SetConfig+0xae>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a19      	ldr	r2, [pc, #100]	; (800ac8c <TIM_OC3_SetConfig+0x108>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_OC3_SetConfig+0xae>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a18      	ldr	r2, [pc, #96]	; (800ac90 <TIM_OC3_SetConfig+0x10c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d113      	bne.n	800ac5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	621a      	str	r2, [r3, #32]
}
 800ac74:	bf00      	nop
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	40012c00 	.word	0x40012c00
 800ac84:	40013400 	.word	0x40013400
 800ac88:	40014000 	.word	0x40014000
 800ac8c:	40014400 	.word	0x40014400
 800ac90:	40014800 	.word	0x40014800

0800ac94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ace2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	031b      	lsls	r3, r3, #12
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	4313      	orrs	r3, r2
 800acee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a28      	ldr	r2, [pc, #160]	; (800ad94 <TIM_OC4_SetConfig+0x100>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d003      	beq.n	800ad00 <TIM_OC4_SetConfig+0x6c>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a27      	ldr	r2, [pc, #156]	; (800ad98 <TIM_OC4_SetConfig+0x104>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d10d      	bne.n	800ad1c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	031b      	lsls	r3, r3, #12
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <TIM_OC4_SetConfig+0x100>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00f      	beq.n	800ad44 <TIM_OC4_SetConfig+0xb0>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a1c      	ldr	r2, [pc, #112]	; (800ad98 <TIM_OC4_SetConfig+0x104>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00b      	beq.n	800ad44 <TIM_OC4_SetConfig+0xb0>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a1b      	ldr	r2, [pc, #108]	; (800ad9c <TIM_OC4_SetConfig+0x108>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d007      	beq.n	800ad44 <TIM_OC4_SetConfig+0xb0>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1a      	ldr	r2, [pc, #104]	; (800ada0 <TIM_OC4_SetConfig+0x10c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d003      	beq.n	800ad44 <TIM_OC4_SetConfig+0xb0>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a19      	ldr	r2, [pc, #100]	; (800ada4 <TIM_OC4_SetConfig+0x110>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d113      	bne.n	800ad6c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	019b      	lsls	r3, r3, #6
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	019b      	lsls	r3, r3, #6
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	40012c00 	.word	0x40012c00
 800ad98:	40013400 	.word	0x40013400
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40014400 	.word	0x40014400
 800ada4:	40014800 	.word	0x40014800

0800ada8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800add6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	041b      	lsls	r3, r3, #16
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a17      	ldr	r2, [pc, #92]	; (800ae5c <TIM_OC5_SetConfig+0xb4>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00f      	beq.n	800ae22 <TIM_OC5_SetConfig+0x7a>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a16      	ldr	r2, [pc, #88]	; (800ae60 <TIM_OC5_SetConfig+0xb8>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00b      	beq.n	800ae22 <TIM_OC5_SetConfig+0x7a>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a15      	ldr	r2, [pc, #84]	; (800ae64 <TIM_OC5_SetConfig+0xbc>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d007      	beq.n	800ae22 <TIM_OC5_SetConfig+0x7a>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a14      	ldr	r2, [pc, #80]	; (800ae68 <TIM_OC5_SetConfig+0xc0>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <TIM_OC5_SetConfig+0x7a>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a13      	ldr	r2, [pc, #76]	; (800ae6c <TIM_OC5_SetConfig+0xc4>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d109      	bne.n	800ae36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	021b      	lsls	r3, r3, #8
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	621a      	str	r2, [r3, #32]
}
 800ae50:	bf00      	nop
 800ae52:	371c      	adds	r7, #28
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	40012c00 	.word	0x40012c00
 800ae60:	40013400 	.word	0x40013400
 800ae64:	40014000 	.word	0x40014000
 800ae68:	40014400 	.word	0x40014400
 800ae6c:	40014800 	.word	0x40014800

0800ae70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	051b      	lsls	r3, r3, #20
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a18      	ldr	r2, [pc, #96]	; (800af28 <TIM_OC6_SetConfig+0xb8>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00f      	beq.n	800aeec <TIM_OC6_SetConfig+0x7c>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a17      	ldr	r2, [pc, #92]	; (800af2c <TIM_OC6_SetConfig+0xbc>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00b      	beq.n	800aeec <TIM_OC6_SetConfig+0x7c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a16      	ldr	r2, [pc, #88]	; (800af30 <TIM_OC6_SetConfig+0xc0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d007      	beq.n	800aeec <TIM_OC6_SetConfig+0x7c>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a15      	ldr	r2, [pc, #84]	; (800af34 <TIM_OC6_SetConfig+0xc4>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_OC6_SetConfig+0x7c>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a14      	ldr	r2, [pc, #80]	; (800af38 <TIM_OC6_SetConfig+0xc8>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d109      	bne.n	800af00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	029b      	lsls	r3, r3, #10
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	621a      	str	r2, [r3, #32]
}
 800af1a:	bf00      	nop
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	40012c00 	.word	0x40012c00
 800af2c:	40013400 	.word	0x40013400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800

0800af3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	f023 0201 	bic.w	r2, r3, #1
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f023 030a 	bic.w	r3, r3, #10
 800af78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	621a      	str	r2, [r3, #32]
}
 800af8e:	bf00      	nop
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b087      	sub	sp, #28
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f023 0210 	bic.w	r2, r3, #16
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	031b      	lsls	r3, r3, #12
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	4313      	orrs	r3, r2
 800afce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	621a      	str	r2, [r3, #32]
}
 800afee:	bf00      	nop
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800affa:	b480      	push	{r7}
 800affc:	b085      	sub	sp, #20
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	f043 0307 	orr.w	r3, r3, #7
 800b020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	609a      	str	r2, [r3, #8]
}
 800b028:	bf00      	nop
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b04e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	021a      	lsls	r2, r3, #8
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	431a      	orrs	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	609a      	str	r2, [r3, #8]
}
 800b068:	bf00      	nop
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	f003 031f 	and.w	r3, r3, #31
 800b086:	2201      	movs	r2, #1
 800b088:	fa02 f303 	lsl.w	r3, r2, r3
 800b08c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a1a      	ldr	r2, [r3, #32]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	43db      	mvns	r3, r3
 800b096:	401a      	ands	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a1a      	ldr	r2, [r3, #32]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f003 031f 	and.w	r3, r3, #31
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	621a      	str	r2, [r3, #32]
}
 800b0b2:	bf00      	nop
 800b0b4:	371c      	adds	r7, #28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
	...

0800b0c0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d109      	bne.n	800b0e4 <HAL_TIMEx_PWMN_Start+0x24>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	bf14      	ite	ne
 800b0dc:	2301      	movne	r3, #1
 800b0de:	2300      	moveq	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	e022      	b.n	800b12a <HAL_TIMEx_PWMN_Start+0x6a>
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b04      	cmp	r3, #4
 800b0e8:	d109      	bne.n	800b0fe <HAL_TIMEx_PWMN_Start+0x3e>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	bf14      	ite	ne
 800b0f6:	2301      	movne	r3, #1
 800b0f8:	2300      	moveq	r3, #0
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	e015      	b.n	800b12a <HAL_TIMEx_PWMN_Start+0x6a>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b08      	cmp	r3, #8
 800b102:	d109      	bne.n	800b118 <HAL_TIMEx_PWMN_Start+0x58>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	bf14      	ite	ne
 800b110:	2301      	movne	r3, #1
 800b112:	2300      	moveq	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	e008      	b.n	800b12a <HAL_TIMEx_PWMN_Start+0x6a>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b01      	cmp	r3, #1
 800b122:	bf14      	ite	ne
 800b124:	2301      	movne	r3, #1
 800b126:	2300      	moveq	r3, #0
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e069      	b.n	800b206 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <HAL_TIMEx_PWMN_Start+0x82>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b140:	e013      	b.n	800b16a <HAL_TIMEx_PWMN_Start+0xaa>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b04      	cmp	r3, #4
 800b146:	d104      	bne.n	800b152 <HAL_TIMEx_PWMN_Start+0x92>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b150:	e00b      	b.n	800b16a <HAL_TIMEx_PWMN_Start+0xaa>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b08      	cmp	r3, #8
 800b156:	d104      	bne.n	800b162 <HAL_TIMEx_PWMN_Start+0xa2>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b160:	e003      	b.n	800b16a <HAL_TIMEx_PWMN_Start+0xaa>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2202      	movs	r2, #2
 800b166:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2204      	movs	r2, #4
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f9c0 	bl	800b4f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b186:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a20      	ldr	r2, [pc, #128]	; (800b210 <HAL_TIMEx_PWMN_Start+0x150>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d018      	beq.n	800b1c4 <HAL_TIMEx_PWMN_Start+0x104>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b19a:	d013      	beq.n	800b1c4 <HAL_TIMEx_PWMN_Start+0x104>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a1c      	ldr	r2, [pc, #112]	; (800b214 <HAL_TIMEx_PWMN_Start+0x154>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00e      	beq.n	800b1c4 <HAL_TIMEx_PWMN_Start+0x104>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a1b      	ldr	r2, [pc, #108]	; (800b218 <HAL_TIMEx_PWMN_Start+0x158>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d009      	beq.n	800b1c4 <HAL_TIMEx_PWMN_Start+0x104>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a19      	ldr	r2, [pc, #100]	; (800b21c <HAL_TIMEx_PWMN_Start+0x15c>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <HAL_TIMEx_PWMN_Start+0x104>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a18      	ldr	r2, [pc, #96]	; (800b220 <HAL_TIMEx_PWMN_Start+0x160>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d115      	bne.n	800b1f0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689a      	ldr	r2, [r3, #8]
 800b1ca:	4b16      	ldr	r3, [pc, #88]	; (800b224 <HAL_TIMEx_PWMN_Start+0x164>)
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b06      	cmp	r3, #6
 800b1d4:	d015      	beq.n	800b202 <HAL_TIMEx_PWMN_Start+0x142>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1dc:	d011      	beq.n	800b202 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f042 0201 	orr.w	r2, r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ee:	e008      	b.n	800b202 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0201 	orr.w	r2, r2, #1
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	e000      	b.n	800b204 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	40012c00 	.word	0x40012c00
 800b214:	40000400 	.word	0x40000400
 800b218:	40000800 	.word	0x40000800
 800b21c:	40013400 	.word	0x40013400
 800b220:	40014000 	.word	0x40014000
 800b224:	00010007 	.word	0x00010007

0800b228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e065      	b.n	800b30c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a2c      	ldr	r2, [pc, #176]	; (800b318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d004      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a2b      	ldr	r2, [pc, #172]	; (800b31c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d108      	bne.n	800b286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b27a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a1b      	ldr	r2, [pc, #108]	; (800b318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d018      	beq.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b6:	d013      	beq.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a18      	ldr	r2, [pc, #96]	; (800b320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00e      	beq.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a17      	ldr	r2, [pc, #92]	; (800b324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d009      	beq.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a12      	ldr	r2, [pc, #72]	; (800b31c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d004      	beq.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a13      	ldr	r2, [pc, #76]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d10c      	bne.n	800b2fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	40012c00 	.word	0x40012c00
 800b31c:	40013400 	.word	0x40013400
 800b320:	40000400 	.word	0x40000400
 800b324:	40000800 	.word	0x40000800
 800b328:	40014000 	.word	0x40014000

0800b32c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b344:	2302      	movs	r3, #2
 800b346:	e087      	b.n	800b458 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	4313      	orrs	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4313      	orrs	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a27      	ldr	r2, [pc, #156]	; (800b464 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d004      	beq.n	800b3d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a25      	ldr	r2, [pc, #148]	; (800b468 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d106      	bne.n	800b3e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a1e      	ldr	r2, [pc, #120]	; (800b464 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d004      	beq.n	800b3f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a1d      	ldr	r2, [pc, #116]	; (800b468 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d126      	bne.n	800b446 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	051b      	lsls	r3, r3, #20
 800b404:	4313      	orrs	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	4313      	orrs	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a0e      	ldr	r2, [pc, #56]	; (800b464 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d004      	beq.n	800b438 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a0d      	ldr	r2, [pc, #52]	; (800b468 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d106      	bne.n	800b446 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	4313      	orrs	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	40012c00 	.word	0x40012c00
 800b468:	40013400 	.word	0x40013400

0800b46c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f003 031f 	and.w	r3, r3, #31
 800b50a:	2204      	movs	r2, #4
 800b50c:	fa02 f303 	lsl.w	r3, r2, r3
 800b510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a1a      	ldr	r2, [r3, #32]
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	43db      	mvns	r3, r3
 800b51a:	401a      	ands	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a1a      	ldr	r2, [r3, #32]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f003 031f 	and.w	r3, r3, #31
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	fa01 f303 	lsl.w	r3, r1, r3
 800b530:	431a      	orrs	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	621a      	str	r2, [r3, #32]
}
 800b536:	bf00      	nop
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	e042      	b.n	800b5da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7f9 fc60 	bl	8004e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2224      	movs	r2, #36	; 0x24
 800b570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0201 	bic.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f8c3 	bl	800b710 <UART_SetConfig>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d101      	bne.n	800b594 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e022      	b.n	800b5da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fb83 	bl	800bca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b5c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f042 0201 	orr.w	r2, r2, #1
 800b5d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fc0a 	bl	800bdec <UART_CheckIdleState>
 800b5d8:	4603      	mov	r3, r0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b08a      	sub	sp, #40	; 0x28
 800b5e6:	af02      	add	r7, sp, #8
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	603b      	str	r3, [r7, #0]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5f8:	2b20      	cmp	r3, #32
 800b5fa:	f040 8083 	bne.w	800b704 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <HAL_UART_Transmit+0x28>
 800b604:	88fb      	ldrh	r3, [r7, #6]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d101      	bne.n	800b60e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e07b      	b.n	800b706 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b614:	2b01      	cmp	r3, #1
 800b616:	d101      	bne.n	800b61c <HAL_UART_Transmit+0x3a>
 800b618:	2302      	movs	r3, #2
 800b61a:	e074      	b.n	800b706 <HAL_UART_Transmit+0x124>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2221      	movs	r2, #33	; 0x21
 800b630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b634:	f7f9 fe20 	bl	8005278 <HAL_GetTick>
 800b638:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	88fa      	ldrh	r2, [r7, #6]
 800b63e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	88fa      	ldrh	r2, [r7, #6]
 800b646:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b652:	d108      	bne.n	800b666 <HAL_UART_Transmit+0x84>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	61bb      	str	r3, [r7, #24]
 800b664:	e003      	b.n	800b66e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b676:	e02c      	b.n	800b6d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2200      	movs	r2, #0
 800b680:	2180      	movs	r1, #128	; 0x80
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 fbfd 	bl	800be82 <UART_WaitOnFlagUntilTimeout>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e039      	b.n	800b706 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10b      	bne.n	800b6b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	881b      	ldrh	r3, [r3, #0]
 800b69c:	461a      	mov	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	3302      	adds	r3, #2
 800b6ac:	61bb      	str	r3, [r7, #24]
 800b6ae:	e007      	b.n	800b6c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1cc      	bne.n	800b678 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2140      	movs	r1, #64	; 0x40
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 fbca 	bl	800be82 <UART_WaitOnFlagUntilTimeout>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e006      	b.n	800b706 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	e000      	b.n	800b706 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b704:	2302      	movs	r3, #2
  }
}
 800b706:	4618      	mov	r0, r3
 800b708:	3720      	adds	r7, #32
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b714:	b08c      	sub	sp, #48	; 0x30
 800b716:	af00      	add	r7, sp, #0
 800b718:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	431a      	orrs	r2, r3
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	431a      	orrs	r2, r3
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	4313      	orrs	r3, r2
 800b736:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4bab      	ldr	r3, [pc, #684]	; (800b9ec <UART_SetConfig+0x2dc>)
 800b740:	4013      	ands	r3, r2
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	6812      	ldr	r2, [r2, #0]
 800b746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b748:	430b      	orrs	r3, r1
 800b74a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4aa0      	ldr	r2, [pc, #640]	; (800b9f0 <UART_SetConfig+0x2e0>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d004      	beq.n	800b77c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b778:	4313      	orrs	r3, r2
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b786:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	6812      	ldr	r2, [r2, #0]
 800b78e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b790:	430b      	orrs	r3, r1
 800b792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	f023 010f 	bic.w	r1, r3, #15
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a91      	ldr	r2, [pc, #580]	; (800b9f4 <UART_SetConfig+0x2e4>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d125      	bne.n	800b800 <UART_SetConfig+0xf0>
 800b7b4:	4b90      	ldr	r3, [pc, #576]	; (800b9f8 <UART_SetConfig+0x2e8>)
 800b7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ba:	f003 0303 	and.w	r3, r3, #3
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	d81a      	bhi.n	800b7f8 <UART_SetConfig+0xe8>
 800b7c2:	a201      	add	r2, pc, #4	; (adr r2, 800b7c8 <UART_SetConfig+0xb8>)
 800b7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7e9 	.word	0x0800b7e9
 800b7d0:	0800b7e1 	.word	0x0800b7e1
 800b7d4:	0800b7f1 	.word	0x0800b7f1
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7de:	e0d6      	b.n	800b98e <UART_SetConfig+0x27e>
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7e6:	e0d2      	b.n	800b98e <UART_SetConfig+0x27e>
 800b7e8:	2304      	movs	r3, #4
 800b7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7ee:	e0ce      	b.n	800b98e <UART_SetConfig+0x27e>
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7f6:	e0ca      	b.n	800b98e <UART_SetConfig+0x27e>
 800b7f8:	2310      	movs	r3, #16
 800b7fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7fe:	e0c6      	b.n	800b98e <UART_SetConfig+0x27e>
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a7d      	ldr	r2, [pc, #500]	; (800b9fc <UART_SetConfig+0x2ec>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d138      	bne.n	800b87c <UART_SetConfig+0x16c>
 800b80a:	4b7b      	ldr	r3, [pc, #492]	; (800b9f8 <UART_SetConfig+0x2e8>)
 800b80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b810:	f003 030c 	and.w	r3, r3, #12
 800b814:	2b0c      	cmp	r3, #12
 800b816:	d82d      	bhi.n	800b874 <UART_SetConfig+0x164>
 800b818:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <UART_SetConfig+0x110>)
 800b81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81e:	bf00      	nop
 800b820:	0800b855 	.word	0x0800b855
 800b824:	0800b875 	.word	0x0800b875
 800b828:	0800b875 	.word	0x0800b875
 800b82c:	0800b875 	.word	0x0800b875
 800b830:	0800b865 	.word	0x0800b865
 800b834:	0800b875 	.word	0x0800b875
 800b838:	0800b875 	.word	0x0800b875
 800b83c:	0800b875 	.word	0x0800b875
 800b840:	0800b85d 	.word	0x0800b85d
 800b844:	0800b875 	.word	0x0800b875
 800b848:	0800b875 	.word	0x0800b875
 800b84c:	0800b875 	.word	0x0800b875
 800b850:	0800b86d 	.word	0x0800b86d
 800b854:	2300      	movs	r3, #0
 800b856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b85a:	e098      	b.n	800b98e <UART_SetConfig+0x27e>
 800b85c:	2302      	movs	r3, #2
 800b85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b862:	e094      	b.n	800b98e <UART_SetConfig+0x27e>
 800b864:	2304      	movs	r3, #4
 800b866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b86a:	e090      	b.n	800b98e <UART_SetConfig+0x27e>
 800b86c:	2308      	movs	r3, #8
 800b86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b872:	e08c      	b.n	800b98e <UART_SetConfig+0x27e>
 800b874:	2310      	movs	r3, #16
 800b876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b87a:	e088      	b.n	800b98e <UART_SetConfig+0x27e>
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a5f      	ldr	r2, [pc, #380]	; (800ba00 <UART_SetConfig+0x2f0>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d125      	bne.n	800b8d2 <UART_SetConfig+0x1c2>
 800b886:	4b5c      	ldr	r3, [pc, #368]	; (800b9f8 <UART_SetConfig+0x2e8>)
 800b888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b890:	2b30      	cmp	r3, #48	; 0x30
 800b892:	d016      	beq.n	800b8c2 <UART_SetConfig+0x1b2>
 800b894:	2b30      	cmp	r3, #48	; 0x30
 800b896:	d818      	bhi.n	800b8ca <UART_SetConfig+0x1ba>
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d00a      	beq.n	800b8b2 <UART_SetConfig+0x1a2>
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d814      	bhi.n	800b8ca <UART_SetConfig+0x1ba>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <UART_SetConfig+0x19a>
 800b8a4:	2b10      	cmp	r3, #16
 800b8a6:	d008      	beq.n	800b8ba <UART_SetConfig+0x1aa>
 800b8a8:	e00f      	b.n	800b8ca <UART_SetConfig+0x1ba>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8b0:	e06d      	b.n	800b98e <UART_SetConfig+0x27e>
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8b8:	e069      	b.n	800b98e <UART_SetConfig+0x27e>
 800b8ba:	2304      	movs	r3, #4
 800b8bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8c0:	e065      	b.n	800b98e <UART_SetConfig+0x27e>
 800b8c2:	2308      	movs	r3, #8
 800b8c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8c8:	e061      	b.n	800b98e <UART_SetConfig+0x27e>
 800b8ca:	2310      	movs	r3, #16
 800b8cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8d0:	e05d      	b.n	800b98e <UART_SetConfig+0x27e>
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a4b      	ldr	r2, [pc, #300]	; (800ba04 <UART_SetConfig+0x2f4>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d125      	bne.n	800b928 <UART_SetConfig+0x218>
 800b8dc:	4b46      	ldr	r3, [pc, #280]	; (800b9f8 <UART_SetConfig+0x2e8>)
 800b8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b8e6:	2bc0      	cmp	r3, #192	; 0xc0
 800b8e8:	d016      	beq.n	800b918 <UART_SetConfig+0x208>
 800b8ea:	2bc0      	cmp	r3, #192	; 0xc0
 800b8ec:	d818      	bhi.n	800b920 <UART_SetConfig+0x210>
 800b8ee:	2b80      	cmp	r3, #128	; 0x80
 800b8f0:	d00a      	beq.n	800b908 <UART_SetConfig+0x1f8>
 800b8f2:	2b80      	cmp	r3, #128	; 0x80
 800b8f4:	d814      	bhi.n	800b920 <UART_SetConfig+0x210>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <UART_SetConfig+0x1f0>
 800b8fa:	2b40      	cmp	r3, #64	; 0x40
 800b8fc:	d008      	beq.n	800b910 <UART_SetConfig+0x200>
 800b8fe:	e00f      	b.n	800b920 <UART_SetConfig+0x210>
 800b900:	2300      	movs	r3, #0
 800b902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b906:	e042      	b.n	800b98e <UART_SetConfig+0x27e>
 800b908:	2302      	movs	r3, #2
 800b90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b90e:	e03e      	b.n	800b98e <UART_SetConfig+0x27e>
 800b910:	2304      	movs	r3, #4
 800b912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b916:	e03a      	b.n	800b98e <UART_SetConfig+0x27e>
 800b918:	2308      	movs	r3, #8
 800b91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b91e:	e036      	b.n	800b98e <UART_SetConfig+0x27e>
 800b920:	2310      	movs	r3, #16
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b926:	e032      	b.n	800b98e <UART_SetConfig+0x27e>
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a30      	ldr	r2, [pc, #192]	; (800b9f0 <UART_SetConfig+0x2e0>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d12a      	bne.n	800b988 <UART_SetConfig+0x278>
 800b932:	4b31      	ldr	r3, [pc, #196]	; (800b9f8 <UART_SetConfig+0x2e8>)
 800b934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b93c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b940:	d01a      	beq.n	800b978 <UART_SetConfig+0x268>
 800b942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b946:	d81b      	bhi.n	800b980 <UART_SetConfig+0x270>
 800b948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b94c:	d00c      	beq.n	800b968 <UART_SetConfig+0x258>
 800b94e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b952:	d815      	bhi.n	800b980 <UART_SetConfig+0x270>
 800b954:	2b00      	cmp	r3, #0
 800b956:	d003      	beq.n	800b960 <UART_SetConfig+0x250>
 800b958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b95c:	d008      	beq.n	800b970 <UART_SetConfig+0x260>
 800b95e:	e00f      	b.n	800b980 <UART_SetConfig+0x270>
 800b960:	2300      	movs	r3, #0
 800b962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b966:	e012      	b.n	800b98e <UART_SetConfig+0x27e>
 800b968:	2302      	movs	r3, #2
 800b96a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b96e:	e00e      	b.n	800b98e <UART_SetConfig+0x27e>
 800b970:	2304      	movs	r3, #4
 800b972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b976:	e00a      	b.n	800b98e <UART_SetConfig+0x27e>
 800b978:	2308      	movs	r3, #8
 800b97a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b97e:	e006      	b.n	800b98e <UART_SetConfig+0x27e>
 800b980:	2310      	movs	r3, #16
 800b982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b986:	e002      	b.n	800b98e <UART_SetConfig+0x27e>
 800b988:	2310      	movs	r3, #16
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a17      	ldr	r2, [pc, #92]	; (800b9f0 <UART_SetConfig+0x2e0>)
 800b994:	4293      	cmp	r3, r2
 800b996:	f040 80a8 	bne.w	800baea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b99a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b99e:	2b08      	cmp	r3, #8
 800b9a0:	d834      	bhi.n	800ba0c <UART_SetConfig+0x2fc>
 800b9a2:	a201      	add	r2, pc, #4	; (adr r2, 800b9a8 <UART_SetConfig+0x298>)
 800b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a8:	0800b9cd 	.word	0x0800b9cd
 800b9ac:	0800ba0d 	.word	0x0800ba0d
 800b9b0:	0800b9d5 	.word	0x0800b9d5
 800b9b4:	0800ba0d 	.word	0x0800ba0d
 800b9b8:	0800b9db 	.word	0x0800b9db
 800b9bc:	0800ba0d 	.word	0x0800ba0d
 800b9c0:	0800ba0d 	.word	0x0800ba0d
 800b9c4:	0800ba0d 	.word	0x0800ba0d
 800b9c8:	0800b9e3 	.word	0x0800b9e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9cc:	f7fd f95c 	bl	8008c88 <HAL_RCC_GetPCLK1Freq>
 800b9d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9d2:	e021      	b.n	800ba18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <UART_SetConfig+0x2f8>)
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9d8:	e01e      	b.n	800ba18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9da:	f7fd f8e7 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 800b9de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9e0:	e01a      	b.n	800ba18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9e8:	e016      	b.n	800ba18 <UART_SetConfig+0x308>
 800b9ea:	bf00      	nop
 800b9ec:	cfff69f3 	.word	0xcfff69f3
 800b9f0:	40008000 	.word	0x40008000
 800b9f4:	40013800 	.word	0x40013800
 800b9f8:	40021000 	.word	0x40021000
 800b9fc:	40004400 	.word	0x40004400
 800ba00:	40004800 	.word	0x40004800
 800ba04:	40004c00 	.word	0x40004c00
 800ba08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ba16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 812a 	beq.w	800bc74 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	4a9e      	ldr	r2, [pc, #632]	; (800bca0 <UART_SetConfig+0x590>)
 800ba26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	4413      	add	r3, r2
 800ba3e:	69ba      	ldr	r2, [r7, #24]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d305      	bcc.n	800ba50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d903      	bls.n	800ba58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ba56:	e10d      	b.n	800bc74 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	60bb      	str	r3, [r7, #8]
 800ba5e:	60fa      	str	r2, [r7, #12]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	4a8e      	ldr	r2, [pc, #568]	; (800bca0 <UART_SetConfig+0x590>)
 800ba66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	607a      	str	r2, [r7, #4]
 800ba72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba7a:	f7f5 f90d 	bl	8000c98 <__aeabi_uldivmod>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	f04f 0200 	mov.w	r2, #0
 800ba8a:	f04f 0300 	mov.w	r3, #0
 800ba8e:	020b      	lsls	r3, r1, #8
 800ba90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba94:	0202      	lsls	r2, r0, #8
 800ba96:	6979      	ldr	r1, [r7, #20]
 800ba98:	6849      	ldr	r1, [r1, #4]
 800ba9a:	0849      	lsrs	r1, r1, #1
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	4605      	mov	r5, r0
 800baa2:	eb12 0804 	adds.w	r8, r2, r4
 800baa6:	eb43 0905 	adc.w	r9, r3, r5
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	469a      	mov	sl, r3
 800bab2:	4693      	mov	fp, r2
 800bab4:	4652      	mov	r2, sl
 800bab6:	465b      	mov	r3, fp
 800bab8:	4640      	mov	r0, r8
 800baba:	4649      	mov	r1, r9
 800babc:	f7f5 f8ec 	bl	8000c98 <__aeabi_uldivmod>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4613      	mov	r3, r2
 800bac6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bace:	d308      	bcc.n	800bae2 <UART_SetConfig+0x3d2>
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bad6:	d204      	bcs.n	800bae2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6a3a      	ldr	r2, [r7, #32]
 800bade:	60da      	str	r2, [r3, #12]
 800bae0:	e0c8      	b.n	800bc74 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bae8:	e0c4      	b.n	800bc74 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baf2:	d167      	bne.n	800bbc4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800baf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d828      	bhi.n	800bb4e <UART_SetConfig+0x43e>
 800bafc:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <UART_SetConfig+0x3f4>)
 800bafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb02:	bf00      	nop
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb31 	.word	0x0800bb31
 800bb0c:	0800bb39 	.word	0x0800bb39
 800bb10:	0800bb4f 	.word	0x0800bb4f
 800bb14:	0800bb3f 	.word	0x0800bb3f
 800bb18:	0800bb4f 	.word	0x0800bb4f
 800bb1c:	0800bb4f 	.word	0x0800bb4f
 800bb20:	0800bb4f 	.word	0x0800bb4f
 800bb24:	0800bb47 	.word	0x0800bb47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb28:	f7fd f8ae 	bl	8008c88 <HAL_RCC_GetPCLK1Freq>
 800bb2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb2e:	e014      	b.n	800bb5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb30:	f7fd f8c0 	bl	8008cb4 <HAL_RCC_GetPCLK2Freq>
 800bb34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb36:	e010      	b.n	800bb5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb38:	4b5a      	ldr	r3, [pc, #360]	; (800bca4 <UART_SetConfig+0x594>)
 800bb3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb3c:	e00d      	b.n	800bb5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb3e:	f7fd f835 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 800bb42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb44:	e009      	b.n	800bb5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb4c:	e005      	b.n	800bb5a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 8089 	beq.w	800bc74 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb66:	4a4e      	ldr	r2, [pc, #312]	; (800bca0 <UART_SetConfig+0x590>)
 800bb68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb74:	005a      	lsls	r2, r3, #1
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	085b      	lsrs	r3, r3, #1
 800bb7c:	441a      	add	r2, r3
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	2b0f      	cmp	r3, #15
 800bb8c:	d916      	bls.n	800bbbc <UART_SetConfig+0x4ac>
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb94:	d212      	bcs.n	800bbbc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f023 030f 	bic.w	r3, r3, #15
 800bb9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	085b      	lsrs	r3, r3, #1
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	8bfb      	ldrh	r3, [r7, #30]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	8bfa      	ldrh	r2, [r7, #30]
 800bbb8:	60da      	str	r2, [r3, #12]
 800bbba:	e05b      	b.n	800bc74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bbc2:	e057      	b.n	800bc74 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbc8:	2b08      	cmp	r3, #8
 800bbca:	d828      	bhi.n	800bc1e <UART_SetConfig+0x50e>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <UART_SetConfig+0x4c4>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bbf9 	.word	0x0800bbf9
 800bbd8:	0800bc01 	.word	0x0800bc01
 800bbdc:	0800bc09 	.word	0x0800bc09
 800bbe0:	0800bc1f 	.word	0x0800bc1f
 800bbe4:	0800bc0f 	.word	0x0800bc0f
 800bbe8:	0800bc1f 	.word	0x0800bc1f
 800bbec:	0800bc1f 	.word	0x0800bc1f
 800bbf0:	0800bc1f 	.word	0x0800bc1f
 800bbf4:	0800bc17 	.word	0x0800bc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbf8:	f7fd f846 	bl	8008c88 <HAL_RCC_GetPCLK1Freq>
 800bbfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbfe:	e014      	b.n	800bc2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc00:	f7fd f858 	bl	8008cb4 <HAL_RCC_GetPCLK2Freq>
 800bc04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc06:	e010      	b.n	800bc2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc08:	4b26      	ldr	r3, [pc, #152]	; (800bca4 <UART_SetConfig+0x594>)
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc0c:	e00d      	b.n	800bc2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc0e:	f7fc ffcd 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 800bc12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc14:	e009      	b.n	800bc2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc1c:	e005      	b.n	800bc2a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc28:	bf00      	nop
    }

    if (pclk != 0U)
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d021      	beq.n	800bc74 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	4a1a      	ldr	r2, [pc, #104]	; (800bca0 <UART_SetConfig+0x590>)
 800bc36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	441a      	add	r2, r3
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	2b0f      	cmp	r3, #15
 800bc58:	d909      	bls.n	800bc6e <UART_SetConfig+0x55e>
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc60:	d205      	bcs.n	800bc6e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60da      	str	r2, [r3, #12]
 800bc6c:	e002      	b.n	800bc74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2200      	movs	r2, #0
 800bc88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bc90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3730      	adds	r7, #48	; 0x30
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc9e:	bf00      	nop
 800bca0:	0800fec4 	.word	0x0800fec4
 800bca4:	00f42400 	.word	0x00f42400

0800bca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00a      	beq.n	800bcd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	f003 0302 	and.w	r3, r3, #2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00a      	beq.n	800bcf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf8:	f003 0304 	and.w	r3, r3, #4
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00a      	beq.n	800bd16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	430a      	orrs	r2, r1
 800bd14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00a      	beq.n	800bd38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	430a      	orrs	r2, r1
 800bd36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00a      	beq.n	800bd5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	f003 0320 	and.w	r3, r3, #32
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00a      	beq.n	800bd7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01a      	beq.n	800bdbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bda6:	d10a      	bne.n	800bdbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	605a      	str	r2, [r3, #4]
  }
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af02      	add	r7, sp, #8
 800bdf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdfc:	f7f9 fa3c 	bl	8005278 <HAL_GetTick>
 800be00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 0308 	and.w	r3, r3, #8
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d10e      	bne.n	800be2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f82f 	bl	800be82 <UART_WaitOnFlagUntilTimeout>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e025      	b.n	800be7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 0304 	and.w	r3, r3, #4
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d10e      	bne.n	800be5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f819 	bl	800be82 <UART_WaitOnFlagUntilTimeout>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e00f      	b.n	800be7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2220      	movs	r2, #32
 800be5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2220      	movs	r2, #32
 800be66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b09c      	sub	sp, #112	; 0x70
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	603b      	str	r3, [r7, #0]
 800be8e:	4613      	mov	r3, r2
 800be90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be92:	e0a9      	b.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9a:	f000 80a5 	beq.w	800bfe8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be9e:	f7f9 f9eb 	bl	8005278 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800beaa:	429a      	cmp	r2, r3
 800beac:	d302      	bcc.n	800beb4 <UART_WaitOnFlagUntilTimeout+0x32>
 800beae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d140      	bne.n	800bf36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bebc:	e853 3f00 	ldrex	r3, [r3]
 800bec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bec8:	667b      	str	r3, [r7, #100]	; 0x64
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bed4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bed8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e6      	bne.n	800beb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	f023 0301 	bic.w	r3, r3, #1
 800befc:	663b      	str	r3, [r7, #96]	; 0x60
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3308      	adds	r3, #8
 800bf04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf06:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf0e:	e841 2300 	strex	r3, r2, [r1]
 800bf12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1e5      	bne.n	800bee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e069      	b.n	800c00a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d051      	beq.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf52:	d149      	bne.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf66:	e853 3f00 	ldrex	r3, [r3]
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf72:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf84:	e841 2300 	strex	r3, r2, [r1]
 800bf88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e6      	bne.n	800bf5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3308      	adds	r3, #8
 800bf96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	e853 3f00 	ldrex	r3, [r3]
 800bf9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f023 0301 	bic.w	r3, r3, #1
 800bfa6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3308      	adds	r3, #8
 800bfae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfb0:	623a      	str	r2, [r7, #32]
 800bfb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb4:	69f9      	ldr	r1, [r7, #28]
 800bfb6:	6a3a      	ldr	r2, [r7, #32]
 800bfb8:	e841 2300 	strex	r3, r2, [r1]
 800bfbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1e5      	bne.n	800bf90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e010      	b.n	800c00a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69da      	ldr	r2, [r3, #28]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	4013      	ands	r3, r2
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	bf0c      	ite	eq
 800bff8:	2301      	moveq	r3, #1
 800bffa:	2300      	movne	r3, #0
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	79fb      	ldrb	r3, [r7, #7]
 800c002:	429a      	cmp	r2, r3
 800c004:	f43f af46 	beq.w	800be94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3770      	adds	r7, #112	; 0x70
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c012:	b480      	push	{r7}
 800c014:	b085      	sub	sp, #20
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c020:	2b01      	cmp	r3, #1
 800c022:	d101      	bne.n	800c028 <HAL_UARTEx_DisableFifoMode+0x16>
 800c024:	2302      	movs	r3, #2
 800c026:	e027      	b.n	800c078 <HAL_UARTEx_DisableFifoMode+0x66>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2224      	movs	r2, #36	; 0x24
 800c034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f022 0201 	bic.w	r2, r2, #1
 800c04e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2220      	movs	r2, #32
 800c06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c094:	2b01      	cmp	r3, #1
 800c096:	d101      	bne.n	800c09c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c098:	2302      	movs	r3, #2
 800c09a:	e02d      	b.n	800c0f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2224      	movs	r2, #36	; 0x24
 800c0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f022 0201 	bic.w	r2, r2, #1
 800c0c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f84f 	bl	800c17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c110:	2b01      	cmp	r3, #1
 800c112:	d101      	bne.n	800c118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c114:	2302      	movs	r3, #2
 800c116:	e02d      	b.n	800c174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2224      	movs	r2, #36	; 0x24
 800c124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f022 0201 	bic.w	r2, r2, #1
 800c13e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f811 	bl	800c17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d108      	bne.n	800c19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c19c:	e031      	b.n	800c202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c19e:	2308      	movs	r3, #8
 800c1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1a2:	2308      	movs	r3, #8
 800c1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	0e5b      	lsrs	r3, r3, #25
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	f003 0307 	and.w	r3, r3, #7
 800c1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	0f5b      	lsrs	r3, r3, #29
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	f003 0307 	and.w	r3, r3, #7
 800c1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	7b3a      	ldrb	r2, [r7, #12]
 800c1ca:	4911      	ldr	r1, [pc, #68]	; (800c210 <UARTEx_SetNbDataToProcess+0x94>)
 800c1cc:	5c8a      	ldrb	r2, [r1, r2]
 800c1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1d2:	7b3a      	ldrb	r2, [r7, #12]
 800c1d4:	490f      	ldr	r1, [pc, #60]	; (800c214 <UARTEx_SetNbDataToProcess+0x98>)
 800c1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	7b7a      	ldrb	r2, [r7, #13]
 800c1e8:	4909      	ldr	r1, [pc, #36]	; (800c210 <UARTEx_SetNbDataToProcess+0x94>)
 800c1ea:	5c8a      	ldrb	r2, [r1, r2]
 800c1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1f0:	7b7a      	ldrb	r2, [r7, #13]
 800c1f2:	4908      	ldr	r1, [pc, #32]	; (800c214 <UARTEx_SetNbDataToProcess+0x98>)
 800c1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c202:	bf00      	nop
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	0800fedc 	.word	0x0800fedc
 800c214:	0800fee4 	.word	0x0800fee4

0800c218 <__errno>:
 800c218:	4b01      	ldr	r3, [pc, #4]	; (800c220 <__errno+0x8>)
 800c21a:	6818      	ldr	r0, [r3, #0]
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	2000002c 	.word	0x2000002c

0800c224 <__libc_init_array>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	4d0d      	ldr	r5, [pc, #52]	; (800c25c <__libc_init_array+0x38>)
 800c228:	4c0d      	ldr	r4, [pc, #52]	; (800c260 <__libc_init_array+0x3c>)
 800c22a:	1b64      	subs	r4, r4, r5
 800c22c:	10a4      	asrs	r4, r4, #2
 800c22e:	2600      	movs	r6, #0
 800c230:	42a6      	cmp	r6, r4
 800c232:	d109      	bne.n	800c248 <__libc_init_array+0x24>
 800c234:	4d0b      	ldr	r5, [pc, #44]	; (800c264 <__libc_init_array+0x40>)
 800c236:	4c0c      	ldr	r4, [pc, #48]	; (800c268 <__libc_init_array+0x44>)
 800c238:	f003 fdb8 	bl	800fdac <_init>
 800c23c:	1b64      	subs	r4, r4, r5
 800c23e:	10a4      	asrs	r4, r4, #2
 800c240:	2600      	movs	r6, #0
 800c242:	42a6      	cmp	r6, r4
 800c244:	d105      	bne.n	800c252 <__libc_init_array+0x2e>
 800c246:	bd70      	pop	{r4, r5, r6, pc}
 800c248:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24c:	4798      	blx	r3
 800c24e:	3601      	adds	r6, #1
 800c250:	e7ee      	b.n	800c230 <__libc_init_array+0xc>
 800c252:	f855 3b04 	ldr.w	r3, [r5], #4
 800c256:	4798      	blx	r3
 800c258:	3601      	adds	r6, #1
 800c25a:	e7f2      	b.n	800c242 <__libc_init_array+0x1e>
 800c25c:	080106a4 	.word	0x080106a4
 800c260:	080106a4 	.word	0x080106a4
 800c264:	080106a4 	.word	0x080106a4
 800c268:	080106a8 	.word	0x080106a8

0800c26c <memset>:
 800c26c:	4402      	add	r2, r0
 800c26e:	4603      	mov	r3, r0
 800c270:	4293      	cmp	r3, r2
 800c272:	d100      	bne.n	800c276 <memset+0xa>
 800c274:	4770      	bx	lr
 800c276:	f803 1b01 	strb.w	r1, [r3], #1
 800c27a:	e7f9      	b.n	800c270 <memset+0x4>

0800c27c <__cvt>:
 800c27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c280:	ec55 4b10 	vmov	r4, r5, d0
 800c284:	2d00      	cmp	r5, #0
 800c286:	460e      	mov	r6, r1
 800c288:	4619      	mov	r1, r3
 800c28a:	462b      	mov	r3, r5
 800c28c:	bfbb      	ittet	lt
 800c28e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c292:	461d      	movlt	r5, r3
 800c294:	2300      	movge	r3, #0
 800c296:	232d      	movlt	r3, #45	; 0x2d
 800c298:	700b      	strb	r3, [r1, #0]
 800c29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c29c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c2a0:	4691      	mov	r9, r2
 800c2a2:	f023 0820 	bic.w	r8, r3, #32
 800c2a6:	bfbc      	itt	lt
 800c2a8:	4622      	movlt	r2, r4
 800c2aa:	4614      	movlt	r4, r2
 800c2ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2b0:	d005      	beq.n	800c2be <__cvt+0x42>
 800c2b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c2b6:	d100      	bne.n	800c2ba <__cvt+0x3e>
 800c2b8:	3601      	adds	r6, #1
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	e000      	b.n	800c2c0 <__cvt+0x44>
 800c2be:	2103      	movs	r1, #3
 800c2c0:	ab03      	add	r3, sp, #12
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	ab02      	add	r3, sp, #8
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	ec45 4b10 	vmov	d0, r4, r5
 800c2cc:	4653      	mov	r3, sl
 800c2ce:	4632      	mov	r2, r6
 800c2d0:	f000 fcea 	bl	800cca8 <_dtoa_r>
 800c2d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c2d8:	4607      	mov	r7, r0
 800c2da:	d102      	bne.n	800c2e2 <__cvt+0x66>
 800c2dc:	f019 0f01 	tst.w	r9, #1
 800c2e0:	d022      	beq.n	800c328 <__cvt+0xac>
 800c2e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2e6:	eb07 0906 	add.w	r9, r7, r6
 800c2ea:	d110      	bne.n	800c30e <__cvt+0x92>
 800c2ec:	783b      	ldrb	r3, [r7, #0]
 800c2ee:	2b30      	cmp	r3, #48	; 0x30
 800c2f0:	d10a      	bne.n	800c308 <__cvt+0x8c>
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f7f4 fc0d 	bl	8000b18 <__aeabi_dcmpeq>
 800c2fe:	b918      	cbnz	r0, 800c308 <__cvt+0x8c>
 800c300:	f1c6 0601 	rsb	r6, r6, #1
 800c304:	f8ca 6000 	str.w	r6, [sl]
 800c308:	f8da 3000 	ldr.w	r3, [sl]
 800c30c:	4499      	add	r9, r3
 800c30e:	2200      	movs	r2, #0
 800c310:	2300      	movs	r3, #0
 800c312:	4620      	mov	r0, r4
 800c314:	4629      	mov	r1, r5
 800c316:	f7f4 fbff 	bl	8000b18 <__aeabi_dcmpeq>
 800c31a:	b108      	cbz	r0, 800c320 <__cvt+0xa4>
 800c31c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c320:	2230      	movs	r2, #48	; 0x30
 800c322:	9b03      	ldr	r3, [sp, #12]
 800c324:	454b      	cmp	r3, r9
 800c326:	d307      	bcc.n	800c338 <__cvt+0xbc>
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c32c:	1bdb      	subs	r3, r3, r7
 800c32e:	4638      	mov	r0, r7
 800c330:	6013      	str	r3, [r2, #0]
 800c332:	b004      	add	sp, #16
 800c334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c338:	1c59      	adds	r1, r3, #1
 800c33a:	9103      	str	r1, [sp, #12]
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	e7f0      	b.n	800c322 <__cvt+0xa6>

0800c340 <__exponent>:
 800c340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c342:	4603      	mov	r3, r0
 800c344:	2900      	cmp	r1, #0
 800c346:	bfb8      	it	lt
 800c348:	4249      	neglt	r1, r1
 800c34a:	f803 2b02 	strb.w	r2, [r3], #2
 800c34e:	bfb4      	ite	lt
 800c350:	222d      	movlt	r2, #45	; 0x2d
 800c352:	222b      	movge	r2, #43	; 0x2b
 800c354:	2909      	cmp	r1, #9
 800c356:	7042      	strb	r2, [r0, #1]
 800c358:	dd2a      	ble.n	800c3b0 <__exponent+0x70>
 800c35a:	f10d 0407 	add.w	r4, sp, #7
 800c35e:	46a4      	mov	ip, r4
 800c360:	270a      	movs	r7, #10
 800c362:	46a6      	mov	lr, r4
 800c364:	460a      	mov	r2, r1
 800c366:	fb91 f6f7 	sdiv	r6, r1, r7
 800c36a:	fb07 1516 	mls	r5, r7, r6, r1
 800c36e:	3530      	adds	r5, #48	; 0x30
 800c370:	2a63      	cmp	r2, #99	; 0x63
 800c372:	f104 34ff 	add.w	r4, r4, #4294967295
 800c376:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c37a:	4631      	mov	r1, r6
 800c37c:	dcf1      	bgt.n	800c362 <__exponent+0x22>
 800c37e:	3130      	adds	r1, #48	; 0x30
 800c380:	f1ae 0502 	sub.w	r5, lr, #2
 800c384:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c388:	1c44      	adds	r4, r0, #1
 800c38a:	4629      	mov	r1, r5
 800c38c:	4561      	cmp	r1, ip
 800c38e:	d30a      	bcc.n	800c3a6 <__exponent+0x66>
 800c390:	f10d 0209 	add.w	r2, sp, #9
 800c394:	eba2 020e 	sub.w	r2, r2, lr
 800c398:	4565      	cmp	r5, ip
 800c39a:	bf88      	it	hi
 800c39c:	2200      	movhi	r2, #0
 800c39e:	4413      	add	r3, r2
 800c3a0:	1a18      	subs	r0, r3, r0
 800c3a2:	b003      	add	sp, #12
 800c3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c3ae:	e7ed      	b.n	800c38c <__exponent+0x4c>
 800c3b0:	2330      	movs	r3, #48	; 0x30
 800c3b2:	3130      	adds	r1, #48	; 0x30
 800c3b4:	7083      	strb	r3, [r0, #2]
 800c3b6:	70c1      	strb	r1, [r0, #3]
 800c3b8:	1d03      	adds	r3, r0, #4
 800c3ba:	e7f1      	b.n	800c3a0 <__exponent+0x60>

0800c3bc <_printf_float>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	ed2d 8b02 	vpush	{d8}
 800c3c4:	b08d      	sub	sp, #52	; 0x34
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	461f      	mov	r7, r3
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	f001 fa57 	bl	800d884 <_localeconv_r>
 800c3d6:	f8d0 a000 	ldr.w	sl, [r0]
 800c3da:	4650      	mov	r0, sl
 800c3dc:	f7f3 ff20 	bl	8000220 <strlen>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	9305      	str	r3, [sp, #20]
 800c3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c3f0:	3307      	adds	r3, #7
 800c3f2:	f023 0307 	bic.w	r3, r3, #7
 800c3f6:	f103 0208 	add.w	r2, r3, #8
 800c3fa:	f8c8 2000 	str.w	r2, [r8]
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c406:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c40a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c40e:	9307      	str	r3, [sp, #28]
 800c410:	f8cd 8018 	str.w	r8, [sp, #24]
 800c414:	ee08 0a10 	vmov	s16, r0
 800c418:	4b9f      	ldr	r3, [pc, #636]	; (800c698 <_printf_float+0x2dc>)
 800c41a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
 800c422:	f7f4 fbab 	bl	8000b7c <__aeabi_dcmpun>
 800c426:	bb88      	cbnz	r0, 800c48c <_printf_float+0xd0>
 800c428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c42c:	4b9a      	ldr	r3, [pc, #616]	; (800c698 <_printf_float+0x2dc>)
 800c42e:	f04f 32ff 	mov.w	r2, #4294967295
 800c432:	f7f4 fb85 	bl	8000b40 <__aeabi_dcmple>
 800c436:	bb48      	cbnz	r0, 800c48c <_printf_float+0xd0>
 800c438:	2200      	movs	r2, #0
 800c43a:	2300      	movs	r3, #0
 800c43c:	4640      	mov	r0, r8
 800c43e:	4649      	mov	r1, r9
 800c440:	f7f4 fb74 	bl	8000b2c <__aeabi_dcmplt>
 800c444:	b110      	cbz	r0, 800c44c <_printf_float+0x90>
 800c446:	232d      	movs	r3, #45	; 0x2d
 800c448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c44c:	4b93      	ldr	r3, [pc, #588]	; (800c69c <_printf_float+0x2e0>)
 800c44e:	4894      	ldr	r0, [pc, #592]	; (800c6a0 <_printf_float+0x2e4>)
 800c450:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c454:	bf94      	ite	ls
 800c456:	4698      	movls	r8, r3
 800c458:	4680      	movhi	r8, r0
 800c45a:	2303      	movs	r3, #3
 800c45c:	6123      	str	r3, [r4, #16]
 800c45e:	9b05      	ldr	r3, [sp, #20]
 800c460:	f023 0204 	bic.w	r2, r3, #4
 800c464:	6022      	str	r2, [r4, #0]
 800c466:	f04f 0900 	mov.w	r9, #0
 800c46a:	9700      	str	r7, [sp, #0]
 800c46c:	4633      	mov	r3, r6
 800c46e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c470:	4621      	mov	r1, r4
 800c472:	4628      	mov	r0, r5
 800c474:	f000 f9d8 	bl	800c828 <_printf_common>
 800c478:	3001      	adds	r0, #1
 800c47a:	f040 8090 	bne.w	800c59e <_printf_float+0x1e2>
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295
 800c482:	b00d      	add	sp, #52	; 0x34
 800c484:	ecbd 8b02 	vpop	{d8}
 800c488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48c:	4642      	mov	r2, r8
 800c48e:	464b      	mov	r3, r9
 800c490:	4640      	mov	r0, r8
 800c492:	4649      	mov	r1, r9
 800c494:	f7f4 fb72 	bl	8000b7c <__aeabi_dcmpun>
 800c498:	b140      	cbz	r0, 800c4ac <_printf_float+0xf0>
 800c49a:	464b      	mov	r3, r9
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	bfbc      	itt	lt
 800c4a0:	232d      	movlt	r3, #45	; 0x2d
 800c4a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4a6:	487f      	ldr	r0, [pc, #508]	; (800c6a4 <_printf_float+0x2e8>)
 800c4a8:	4b7f      	ldr	r3, [pc, #508]	; (800c6a8 <_printf_float+0x2ec>)
 800c4aa:	e7d1      	b.n	800c450 <_printf_float+0x94>
 800c4ac:	6863      	ldr	r3, [r4, #4]
 800c4ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c4b2:	9206      	str	r2, [sp, #24]
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	d13f      	bne.n	800c538 <_printf_float+0x17c>
 800c4b8:	2306      	movs	r3, #6
 800c4ba:	6063      	str	r3, [r4, #4]
 800c4bc:	9b05      	ldr	r3, [sp, #20]
 800c4be:	6861      	ldr	r1, [r4, #4]
 800c4c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9303      	str	r3, [sp, #12]
 800c4c8:	ab0a      	add	r3, sp, #40	; 0x28
 800c4ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c4ce:	ab09      	add	r3, sp, #36	; 0x24
 800c4d0:	ec49 8b10 	vmov	d0, r8, r9
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	6022      	str	r2, [r4, #0]
 800c4d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f7ff fecd 	bl	800c27c <__cvt>
 800c4e2:	9b06      	ldr	r3, [sp, #24]
 800c4e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4e6:	2b47      	cmp	r3, #71	; 0x47
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	d108      	bne.n	800c4fe <_printf_float+0x142>
 800c4ec:	1cc8      	adds	r0, r1, #3
 800c4ee:	db02      	blt.n	800c4f6 <_printf_float+0x13a>
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	dd41      	ble.n	800c57a <_printf_float+0x1be>
 800c4f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c4fa:	fa5f fb8b 	uxtb.w	fp, fp
 800c4fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c502:	d820      	bhi.n	800c546 <_printf_float+0x18a>
 800c504:	3901      	subs	r1, #1
 800c506:	465a      	mov	r2, fp
 800c508:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c50c:	9109      	str	r1, [sp, #36]	; 0x24
 800c50e:	f7ff ff17 	bl	800c340 <__exponent>
 800c512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c514:	1813      	adds	r3, r2, r0
 800c516:	2a01      	cmp	r2, #1
 800c518:	4681      	mov	r9, r0
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	dc02      	bgt.n	800c524 <_printf_float+0x168>
 800c51e:	6822      	ldr	r2, [r4, #0]
 800c520:	07d2      	lsls	r2, r2, #31
 800c522:	d501      	bpl.n	800c528 <_printf_float+0x16c>
 800c524:	3301      	adds	r3, #1
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d09c      	beq.n	800c46a <_printf_float+0xae>
 800c530:	232d      	movs	r3, #45	; 0x2d
 800c532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c536:	e798      	b.n	800c46a <_printf_float+0xae>
 800c538:	9a06      	ldr	r2, [sp, #24]
 800c53a:	2a47      	cmp	r2, #71	; 0x47
 800c53c:	d1be      	bne.n	800c4bc <_printf_float+0x100>
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1bc      	bne.n	800c4bc <_printf_float+0x100>
 800c542:	2301      	movs	r3, #1
 800c544:	e7b9      	b.n	800c4ba <_printf_float+0xfe>
 800c546:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c54a:	d118      	bne.n	800c57e <_printf_float+0x1c2>
 800c54c:	2900      	cmp	r1, #0
 800c54e:	6863      	ldr	r3, [r4, #4]
 800c550:	dd0b      	ble.n	800c56a <_printf_float+0x1ae>
 800c552:	6121      	str	r1, [r4, #16]
 800c554:	b913      	cbnz	r3, 800c55c <_printf_float+0x1a0>
 800c556:	6822      	ldr	r2, [r4, #0]
 800c558:	07d0      	lsls	r0, r2, #31
 800c55a:	d502      	bpl.n	800c562 <_printf_float+0x1a6>
 800c55c:	3301      	adds	r3, #1
 800c55e:	440b      	add	r3, r1
 800c560:	6123      	str	r3, [r4, #16]
 800c562:	65a1      	str	r1, [r4, #88]	; 0x58
 800c564:	f04f 0900 	mov.w	r9, #0
 800c568:	e7de      	b.n	800c528 <_printf_float+0x16c>
 800c56a:	b913      	cbnz	r3, 800c572 <_printf_float+0x1b6>
 800c56c:	6822      	ldr	r2, [r4, #0]
 800c56e:	07d2      	lsls	r2, r2, #31
 800c570:	d501      	bpl.n	800c576 <_printf_float+0x1ba>
 800c572:	3302      	adds	r3, #2
 800c574:	e7f4      	b.n	800c560 <_printf_float+0x1a4>
 800c576:	2301      	movs	r3, #1
 800c578:	e7f2      	b.n	800c560 <_printf_float+0x1a4>
 800c57a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c580:	4299      	cmp	r1, r3
 800c582:	db05      	blt.n	800c590 <_printf_float+0x1d4>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	6121      	str	r1, [r4, #16]
 800c588:	07d8      	lsls	r0, r3, #31
 800c58a:	d5ea      	bpl.n	800c562 <_printf_float+0x1a6>
 800c58c:	1c4b      	adds	r3, r1, #1
 800c58e:	e7e7      	b.n	800c560 <_printf_float+0x1a4>
 800c590:	2900      	cmp	r1, #0
 800c592:	bfd4      	ite	le
 800c594:	f1c1 0202 	rsble	r2, r1, #2
 800c598:	2201      	movgt	r2, #1
 800c59a:	4413      	add	r3, r2
 800c59c:	e7e0      	b.n	800c560 <_printf_float+0x1a4>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	055a      	lsls	r2, r3, #21
 800c5a2:	d407      	bmi.n	800c5b4 <_printf_float+0x1f8>
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	4642      	mov	r2, r8
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b8      	blx	r7
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d12c      	bne.n	800c60c <_printf_float+0x250>
 800c5b2:	e764      	b.n	800c47e <_printf_float+0xc2>
 800c5b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5b8:	f240 80e0 	bls.w	800c77c <_printf_float+0x3c0>
 800c5bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f7f4 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d034      	beq.n	800c636 <_printf_float+0x27a>
 800c5cc:	4a37      	ldr	r2, [pc, #220]	; (800c6ac <_printf_float+0x2f0>)
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	47b8      	blx	r7
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	f43f af51 	beq.w	800c47e <_printf_float+0xc2>
 800c5dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	db02      	blt.n	800c5ea <_printf_float+0x22e>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	07d8      	lsls	r0, r3, #31
 800c5e8:	d510      	bpl.n	800c60c <_printf_float+0x250>
 800c5ea:	ee18 3a10 	vmov	r3, s16
 800c5ee:	4652      	mov	r2, sl
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	47b8      	blx	r7
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	f43f af41 	beq.w	800c47e <_printf_float+0xc2>
 800c5fc:	f04f 0800 	mov.w	r8, #0
 800c600:	f104 091a 	add.w	r9, r4, #26
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	3b01      	subs	r3, #1
 800c608:	4543      	cmp	r3, r8
 800c60a:	dc09      	bgt.n	800c620 <_printf_float+0x264>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	079b      	lsls	r3, r3, #30
 800c610:	f100 8105 	bmi.w	800c81e <_printf_float+0x462>
 800c614:	68e0      	ldr	r0, [r4, #12]
 800c616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c618:	4298      	cmp	r0, r3
 800c61a:	bfb8      	it	lt
 800c61c:	4618      	movlt	r0, r3
 800c61e:	e730      	b.n	800c482 <_printf_float+0xc6>
 800c620:	2301      	movs	r3, #1
 800c622:	464a      	mov	r2, r9
 800c624:	4631      	mov	r1, r6
 800c626:	4628      	mov	r0, r5
 800c628:	47b8      	blx	r7
 800c62a:	3001      	adds	r0, #1
 800c62c:	f43f af27 	beq.w	800c47e <_printf_float+0xc2>
 800c630:	f108 0801 	add.w	r8, r8, #1
 800c634:	e7e6      	b.n	800c604 <_printf_float+0x248>
 800c636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dc39      	bgt.n	800c6b0 <_printf_float+0x2f4>
 800c63c:	4a1b      	ldr	r2, [pc, #108]	; (800c6ac <_printf_float+0x2f0>)
 800c63e:	2301      	movs	r3, #1
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	47b8      	blx	r7
 800c646:	3001      	adds	r0, #1
 800c648:	f43f af19 	beq.w	800c47e <_printf_float+0xc2>
 800c64c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c650:	4313      	orrs	r3, r2
 800c652:	d102      	bne.n	800c65a <_printf_float+0x29e>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	07d9      	lsls	r1, r3, #31
 800c658:	d5d8      	bpl.n	800c60c <_printf_float+0x250>
 800c65a:	ee18 3a10 	vmov	r3, s16
 800c65e:	4652      	mov	r2, sl
 800c660:	4631      	mov	r1, r6
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	f43f af09 	beq.w	800c47e <_printf_float+0xc2>
 800c66c:	f04f 0900 	mov.w	r9, #0
 800c670:	f104 0a1a 	add.w	sl, r4, #26
 800c674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c676:	425b      	negs	r3, r3
 800c678:	454b      	cmp	r3, r9
 800c67a:	dc01      	bgt.n	800c680 <_printf_float+0x2c4>
 800c67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c67e:	e792      	b.n	800c5a6 <_printf_float+0x1ea>
 800c680:	2301      	movs	r3, #1
 800c682:	4652      	mov	r2, sl
 800c684:	4631      	mov	r1, r6
 800c686:	4628      	mov	r0, r5
 800c688:	47b8      	blx	r7
 800c68a:	3001      	adds	r0, #1
 800c68c:	f43f aef7 	beq.w	800c47e <_printf_float+0xc2>
 800c690:	f109 0901 	add.w	r9, r9, #1
 800c694:	e7ee      	b.n	800c674 <_printf_float+0x2b8>
 800c696:	bf00      	nop
 800c698:	7fefffff 	.word	0x7fefffff
 800c69c:	0800fef0 	.word	0x0800fef0
 800c6a0:	0800fef4 	.word	0x0800fef4
 800c6a4:	0800fefc 	.word	0x0800fefc
 800c6a8:	0800fef8 	.word	0x0800fef8
 800c6ac:	0800ff00 	.word	0x0800ff00
 800c6b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	bfa8      	it	ge
 800c6b8:	461a      	movge	r2, r3
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	4691      	mov	r9, r2
 800c6be:	dc37      	bgt.n	800c730 <_printf_float+0x374>
 800c6c0:	f04f 0b00 	mov.w	fp, #0
 800c6c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6c8:	f104 021a 	add.w	r2, r4, #26
 800c6cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	eba3 0309 	sub.w	r3, r3, r9
 800c6d4:	455b      	cmp	r3, fp
 800c6d6:	dc33      	bgt.n	800c740 <_printf_float+0x384>
 800c6d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	db3b      	blt.n	800c758 <_printf_float+0x39c>
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	07da      	lsls	r2, r3, #31
 800c6e4:	d438      	bmi.n	800c758 <_printf_float+0x39c>
 800c6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e8:	9a05      	ldr	r2, [sp, #20]
 800c6ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6ec:	1a9a      	subs	r2, r3, r2
 800c6ee:	eba3 0901 	sub.w	r9, r3, r1
 800c6f2:	4591      	cmp	r9, r2
 800c6f4:	bfa8      	it	ge
 800c6f6:	4691      	movge	r9, r2
 800c6f8:	f1b9 0f00 	cmp.w	r9, #0
 800c6fc:	dc35      	bgt.n	800c76a <_printf_float+0x3ae>
 800c6fe:	f04f 0800 	mov.w	r8, #0
 800c702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c706:	f104 0a1a 	add.w	sl, r4, #26
 800c70a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c70e:	1a9b      	subs	r3, r3, r2
 800c710:	eba3 0309 	sub.w	r3, r3, r9
 800c714:	4543      	cmp	r3, r8
 800c716:	f77f af79 	ble.w	800c60c <_printf_float+0x250>
 800c71a:	2301      	movs	r3, #1
 800c71c:	4652      	mov	r2, sl
 800c71e:	4631      	mov	r1, r6
 800c720:	4628      	mov	r0, r5
 800c722:	47b8      	blx	r7
 800c724:	3001      	adds	r0, #1
 800c726:	f43f aeaa 	beq.w	800c47e <_printf_float+0xc2>
 800c72a:	f108 0801 	add.w	r8, r8, #1
 800c72e:	e7ec      	b.n	800c70a <_printf_float+0x34e>
 800c730:	4613      	mov	r3, r2
 800c732:	4631      	mov	r1, r6
 800c734:	4642      	mov	r2, r8
 800c736:	4628      	mov	r0, r5
 800c738:	47b8      	blx	r7
 800c73a:	3001      	adds	r0, #1
 800c73c:	d1c0      	bne.n	800c6c0 <_printf_float+0x304>
 800c73e:	e69e      	b.n	800c47e <_printf_float+0xc2>
 800c740:	2301      	movs	r3, #1
 800c742:	4631      	mov	r1, r6
 800c744:	4628      	mov	r0, r5
 800c746:	9205      	str	r2, [sp, #20]
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	f43f ae97 	beq.w	800c47e <_printf_float+0xc2>
 800c750:	9a05      	ldr	r2, [sp, #20]
 800c752:	f10b 0b01 	add.w	fp, fp, #1
 800c756:	e7b9      	b.n	800c6cc <_printf_float+0x310>
 800c758:	ee18 3a10 	vmov	r3, s16
 800c75c:	4652      	mov	r2, sl
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	d1be      	bne.n	800c6e6 <_printf_float+0x32a>
 800c768:	e689      	b.n	800c47e <_printf_float+0xc2>
 800c76a:	9a05      	ldr	r2, [sp, #20]
 800c76c:	464b      	mov	r3, r9
 800c76e:	4442      	add	r2, r8
 800c770:	4631      	mov	r1, r6
 800c772:	4628      	mov	r0, r5
 800c774:	47b8      	blx	r7
 800c776:	3001      	adds	r0, #1
 800c778:	d1c1      	bne.n	800c6fe <_printf_float+0x342>
 800c77a:	e680      	b.n	800c47e <_printf_float+0xc2>
 800c77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c77e:	2a01      	cmp	r2, #1
 800c780:	dc01      	bgt.n	800c786 <_printf_float+0x3ca>
 800c782:	07db      	lsls	r3, r3, #31
 800c784:	d538      	bpl.n	800c7f8 <_printf_float+0x43c>
 800c786:	2301      	movs	r3, #1
 800c788:	4642      	mov	r2, r8
 800c78a:	4631      	mov	r1, r6
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b8      	blx	r7
 800c790:	3001      	adds	r0, #1
 800c792:	f43f ae74 	beq.w	800c47e <_printf_float+0xc2>
 800c796:	ee18 3a10 	vmov	r3, s16
 800c79a:	4652      	mov	r2, sl
 800c79c:	4631      	mov	r1, r6
 800c79e:	4628      	mov	r0, r5
 800c7a0:	47b8      	blx	r7
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	f43f ae6b 	beq.w	800c47e <_printf_float+0xc2>
 800c7a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f7f4 f9b2 	bl	8000b18 <__aeabi_dcmpeq>
 800c7b4:	b9d8      	cbnz	r0, 800c7ee <_printf_float+0x432>
 800c7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b8:	f108 0201 	add.w	r2, r8, #1
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b8      	blx	r7
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d10e      	bne.n	800c7e6 <_printf_float+0x42a>
 800c7c8:	e659      	b.n	800c47e <_printf_float+0xc2>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	4652      	mov	r2, sl
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	47b8      	blx	r7
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	f43f ae52 	beq.w	800c47e <_printf_float+0xc2>
 800c7da:	f108 0801 	add.w	r8, r8, #1
 800c7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	4543      	cmp	r3, r8
 800c7e4:	dcf1      	bgt.n	800c7ca <_printf_float+0x40e>
 800c7e6:	464b      	mov	r3, r9
 800c7e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7ec:	e6dc      	b.n	800c5a8 <_printf_float+0x1ec>
 800c7ee:	f04f 0800 	mov.w	r8, #0
 800c7f2:	f104 0a1a 	add.w	sl, r4, #26
 800c7f6:	e7f2      	b.n	800c7de <_printf_float+0x422>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	4642      	mov	r2, r8
 800c7fc:	e7df      	b.n	800c7be <_printf_float+0x402>
 800c7fe:	2301      	movs	r3, #1
 800c800:	464a      	mov	r2, r9
 800c802:	4631      	mov	r1, r6
 800c804:	4628      	mov	r0, r5
 800c806:	47b8      	blx	r7
 800c808:	3001      	adds	r0, #1
 800c80a:	f43f ae38 	beq.w	800c47e <_printf_float+0xc2>
 800c80e:	f108 0801 	add.w	r8, r8, #1
 800c812:	68e3      	ldr	r3, [r4, #12]
 800c814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c816:	1a5b      	subs	r3, r3, r1
 800c818:	4543      	cmp	r3, r8
 800c81a:	dcf0      	bgt.n	800c7fe <_printf_float+0x442>
 800c81c:	e6fa      	b.n	800c614 <_printf_float+0x258>
 800c81e:	f04f 0800 	mov.w	r8, #0
 800c822:	f104 0919 	add.w	r9, r4, #25
 800c826:	e7f4      	b.n	800c812 <_printf_float+0x456>

0800c828 <_printf_common>:
 800c828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c82c:	4616      	mov	r6, r2
 800c82e:	4699      	mov	r9, r3
 800c830:	688a      	ldr	r2, [r1, #8]
 800c832:	690b      	ldr	r3, [r1, #16]
 800c834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c838:	4293      	cmp	r3, r2
 800c83a:	bfb8      	it	lt
 800c83c:	4613      	movlt	r3, r2
 800c83e:	6033      	str	r3, [r6, #0]
 800c840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c844:	4607      	mov	r7, r0
 800c846:	460c      	mov	r4, r1
 800c848:	b10a      	cbz	r2, 800c84e <_printf_common+0x26>
 800c84a:	3301      	adds	r3, #1
 800c84c:	6033      	str	r3, [r6, #0]
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	0699      	lsls	r1, r3, #26
 800c852:	bf42      	ittt	mi
 800c854:	6833      	ldrmi	r3, [r6, #0]
 800c856:	3302      	addmi	r3, #2
 800c858:	6033      	strmi	r3, [r6, #0]
 800c85a:	6825      	ldr	r5, [r4, #0]
 800c85c:	f015 0506 	ands.w	r5, r5, #6
 800c860:	d106      	bne.n	800c870 <_printf_common+0x48>
 800c862:	f104 0a19 	add.w	sl, r4, #25
 800c866:	68e3      	ldr	r3, [r4, #12]
 800c868:	6832      	ldr	r2, [r6, #0]
 800c86a:	1a9b      	subs	r3, r3, r2
 800c86c:	42ab      	cmp	r3, r5
 800c86e:	dc26      	bgt.n	800c8be <_printf_common+0x96>
 800c870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c874:	1e13      	subs	r3, r2, #0
 800c876:	6822      	ldr	r2, [r4, #0]
 800c878:	bf18      	it	ne
 800c87a:	2301      	movne	r3, #1
 800c87c:	0692      	lsls	r2, r2, #26
 800c87e:	d42b      	bmi.n	800c8d8 <_printf_common+0xb0>
 800c880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c884:	4649      	mov	r1, r9
 800c886:	4638      	mov	r0, r7
 800c888:	47c0      	blx	r8
 800c88a:	3001      	adds	r0, #1
 800c88c:	d01e      	beq.n	800c8cc <_printf_common+0xa4>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	68e5      	ldr	r5, [r4, #12]
 800c892:	6832      	ldr	r2, [r6, #0]
 800c894:	f003 0306 	and.w	r3, r3, #6
 800c898:	2b04      	cmp	r3, #4
 800c89a:	bf08      	it	eq
 800c89c:	1aad      	subeq	r5, r5, r2
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	6922      	ldr	r2, [r4, #16]
 800c8a2:	bf0c      	ite	eq
 800c8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8a8:	2500      	movne	r5, #0
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	bfc4      	itt	gt
 800c8ae:	1a9b      	subgt	r3, r3, r2
 800c8b0:	18ed      	addgt	r5, r5, r3
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	341a      	adds	r4, #26
 800c8b6:	42b5      	cmp	r5, r6
 800c8b8:	d11a      	bne.n	800c8f0 <_printf_common+0xc8>
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	e008      	b.n	800c8d0 <_printf_common+0xa8>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	47c0      	blx	r8
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d103      	bne.n	800c8d4 <_printf_common+0xac>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d4:	3501      	adds	r5, #1
 800c8d6:	e7c6      	b.n	800c866 <_printf_common+0x3e>
 800c8d8:	18e1      	adds	r1, r4, r3
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	2030      	movs	r0, #48	; 0x30
 800c8de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8e2:	4422      	add	r2, r4
 800c8e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8ec:	3302      	adds	r3, #2
 800c8ee:	e7c7      	b.n	800c880 <_printf_common+0x58>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	47c0      	blx	r8
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	d0e6      	beq.n	800c8cc <_printf_common+0xa4>
 800c8fe:	3601      	adds	r6, #1
 800c900:	e7d9      	b.n	800c8b6 <_printf_common+0x8e>
	...

0800c904 <_printf_i>:
 800c904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c908:	7e0f      	ldrb	r7, [r1, #24]
 800c90a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c90c:	2f78      	cmp	r7, #120	; 0x78
 800c90e:	4691      	mov	r9, r2
 800c910:	4680      	mov	r8, r0
 800c912:	460c      	mov	r4, r1
 800c914:	469a      	mov	sl, r3
 800c916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c91a:	d807      	bhi.n	800c92c <_printf_i+0x28>
 800c91c:	2f62      	cmp	r7, #98	; 0x62
 800c91e:	d80a      	bhi.n	800c936 <_printf_i+0x32>
 800c920:	2f00      	cmp	r7, #0
 800c922:	f000 80d8 	beq.w	800cad6 <_printf_i+0x1d2>
 800c926:	2f58      	cmp	r7, #88	; 0x58
 800c928:	f000 80a3 	beq.w	800ca72 <_printf_i+0x16e>
 800c92c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c934:	e03a      	b.n	800c9ac <_printf_i+0xa8>
 800c936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c93a:	2b15      	cmp	r3, #21
 800c93c:	d8f6      	bhi.n	800c92c <_printf_i+0x28>
 800c93e:	a101      	add	r1, pc, #4	; (adr r1, 800c944 <_printf_i+0x40>)
 800c940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c944:	0800c99d 	.word	0x0800c99d
 800c948:	0800c9b1 	.word	0x0800c9b1
 800c94c:	0800c92d 	.word	0x0800c92d
 800c950:	0800c92d 	.word	0x0800c92d
 800c954:	0800c92d 	.word	0x0800c92d
 800c958:	0800c92d 	.word	0x0800c92d
 800c95c:	0800c9b1 	.word	0x0800c9b1
 800c960:	0800c92d 	.word	0x0800c92d
 800c964:	0800c92d 	.word	0x0800c92d
 800c968:	0800c92d 	.word	0x0800c92d
 800c96c:	0800c92d 	.word	0x0800c92d
 800c970:	0800cabd 	.word	0x0800cabd
 800c974:	0800c9e1 	.word	0x0800c9e1
 800c978:	0800ca9f 	.word	0x0800ca9f
 800c97c:	0800c92d 	.word	0x0800c92d
 800c980:	0800c92d 	.word	0x0800c92d
 800c984:	0800cadf 	.word	0x0800cadf
 800c988:	0800c92d 	.word	0x0800c92d
 800c98c:	0800c9e1 	.word	0x0800c9e1
 800c990:	0800c92d 	.word	0x0800c92d
 800c994:	0800c92d 	.word	0x0800c92d
 800c998:	0800caa7 	.word	0x0800caa7
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	1d1a      	adds	r2, r3, #4
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	602a      	str	r2, [r5, #0]
 800c9a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e0a3      	b.n	800caf8 <_printf_i+0x1f4>
 800c9b0:	6820      	ldr	r0, [r4, #0]
 800c9b2:	6829      	ldr	r1, [r5, #0]
 800c9b4:	0606      	lsls	r6, r0, #24
 800c9b6:	f101 0304 	add.w	r3, r1, #4
 800c9ba:	d50a      	bpl.n	800c9d2 <_printf_i+0xce>
 800c9bc:	680e      	ldr	r6, [r1, #0]
 800c9be:	602b      	str	r3, [r5, #0]
 800c9c0:	2e00      	cmp	r6, #0
 800c9c2:	da03      	bge.n	800c9cc <_printf_i+0xc8>
 800c9c4:	232d      	movs	r3, #45	; 0x2d
 800c9c6:	4276      	negs	r6, r6
 800c9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9cc:	485e      	ldr	r0, [pc, #376]	; (800cb48 <_printf_i+0x244>)
 800c9ce:	230a      	movs	r3, #10
 800c9d0:	e019      	b.n	800ca06 <_printf_i+0x102>
 800c9d2:	680e      	ldr	r6, [r1, #0]
 800c9d4:	602b      	str	r3, [r5, #0]
 800c9d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9da:	bf18      	it	ne
 800c9dc:	b236      	sxthne	r6, r6
 800c9de:	e7ef      	b.n	800c9c0 <_printf_i+0xbc>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	6820      	ldr	r0, [r4, #0]
 800c9e4:	1d19      	adds	r1, r3, #4
 800c9e6:	6029      	str	r1, [r5, #0]
 800c9e8:	0601      	lsls	r1, r0, #24
 800c9ea:	d501      	bpl.n	800c9f0 <_printf_i+0xec>
 800c9ec:	681e      	ldr	r6, [r3, #0]
 800c9ee:	e002      	b.n	800c9f6 <_printf_i+0xf2>
 800c9f0:	0646      	lsls	r6, r0, #25
 800c9f2:	d5fb      	bpl.n	800c9ec <_printf_i+0xe8>
 800c9f4:	881e      	ldrh	r6, [r3, #0]
 800c9f6:	4854      	ldr	r0, [pc, #336]	; (800cb48 <_printf_i+0x244>)
 800c9f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9fa:	bf0c      	ite	eq
 800c9fc:	2308      	moveq	r3, #8
 800c9fe:	230a      	movne	r3, #10
 800ca00:	2100      	movs	r1, #0
 800ca02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca06:	6865      	ldr	r5, [r4, #4]
 800ca08:	60a5      	str	r5, [r4, #8]
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	bfa2      	ittt	ge
 800ca0e:	6821      	ldrge	r1, [r4, #0]
 800ca10:	f021 0104 	bicge.w	r1, r1, #4
 800ca14:	6021      	strge	r1, [r4, #0]
 800ca16:	b90e      	cbnz	r6, 800ca1c <_printf_i+0x118>
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	d04d      	beq.n	800cab8 <_printf_i+0x1b4>
 800ca1c:	4615      	mov	r5, r2
 800ca1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca22:	fb03 6711 	mls	r7, r3, r1, r6
 800ca26:	5dc7      	ldrb	r7, [r0, r7]
 800ca28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca2c:	4637      	mov	r7, r6
 800ca2e:	42bb      	cmp	r3, r7
 800ca30:	460e      	mov	r6, r1
 800ca32:	d9f4      	bls.n	800ca1e <_printf_i+0x11a>
 800ca34:	2b08      	cmp	r3, #8
 800ca36:	d10b      	bne.n	800ca50 <_printf_i+0x14c>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	07de      	lsls	r6, r3, #31
 800ca3c:	d508      	bpl.n	800ca50 <_printf_i+0x14c>
 800ca3e:	6923      	ldr	r3, [r4, #16]
 800ca40:	6861      	ldr	r1, [r4, #4]
 800ca42:	4299      	cmp	r1, r3
 800ca44:	bfde      	ittt	le
 800ca46:	2330      	movle	r3, #48	; 0x30
 800ca48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca50:	1b52      	subs	r2, r2, r5
 800ca52:	6122      	str	r2, [r4, #16]
 800ca54:	f8cd a000 	str.w	sl, [sp]
 800ca58:	464b      	mov	r3, r9
 800ca5a:	aa03      	add	r2, sp, #12
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7ff fee2 	bl	800c828 <_printf_common>
 800ca64:	3001      	adds	r0, #1
 800ca66:	d14c      	bne.n	800cb02 <_printf_i+0x1fe>
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6c:	b004      	add	sp, #16
 800ca6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca72:	4835      	ldr	r0, [pc, #212]	; (800cb48 <_printf_i+0x244>)
 800ca74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca78:	6829      	ldr	r1, [r5, #0]
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca80:	6029      	str	r1, [r5, #0]
 800ca82:	061d      	lsls	r5, r3, #24
 800ca84:	d514      	bpl.n	800cab0 <_printf_i+0x1ac>
 800ca86:	07df      	lsls	r7, r3, #31
 800ca88:	bf44      	itt	mi
 800ca8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca8e:	6023      	strmi	r3, [r4, #0]
 800ca90:	b91e      	cbnz	r6, 800ca9a <_printf_i+0x196>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	f023 0320 	bic.w	r3, r3, #32
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	2310      	movs	r3, #16
 800ca9c:	e7b0      	b.n	800ca00 <_printf_i+0xfc>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	f043 0320 	orr.w	r3, r3, #32
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	2378      	movs	r3, #120	; 0x78
 800caa8:	4828      	ldr	r0, [pc, #160]	; (800cb4c <_printf_i+0x248>)
 800caaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800caae:	e7e3      	b.n	800ca78 <_printf_i+0x174>
 800cab0:	0659      	lsls	r1, r3, #25
 800cab2:	bf48      	it	mi
 800cab4:	b2b6      	uxthmi	r6, r6
 800cab6:	e7e6      	b.n	800ca86 <_printf_i+0x182>
 800cab8:	4615      	mov	r5, r2
 800caba:	e7bb      	b.n	800ca34 <_printf_i+0x130>
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	6826      	ldr	r6, [r4, #0]
 800cac0:	6961      	ldr	r1, [r4, #20]
 800cac2:	1d18      	adds	r0, r3, #4
 800cac4:	6028      	str	r0, [r5, #0]
 800cac6:	0635      	lsls	r5, r6, #24
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	d501      	bpl.n	800cad0 <_printf_i+0x1cc>
 800cacc:	6019      	str	r1, [r3, #0]
 800cace:	e002      	b.n	800cad6 <_printf_i+0x1d2>
 800cad0:	0670      	lsls	r0, r6, #25
 800cad2:	d5fb      	bpl.n	800cacc <_printf_i+0x1c8>
 800cad4:	8019      	strh	r1, [r3, #0]
 800cad6:	2300      	movs	r3, #0
 800cad8:	6123      	str	r3, [r4, #16]
 800cada:	4615      	mov	r5, r2
 800cadc:	e7ba      	b.n	800ca54 <_printf_i+0x150>
 800cade:	682b      	ldr	r3, [r5, #0]
 800cae0:	1d1a      	adds	r2, r3, #4
 800cae2:	602a      	str	r2, [r5, #0]
 800cae4:	681d      	ldr	r5, [r3, #0]
 800cae6:	6862      	ldr	r2, [r4, #4]
 800cae8:	2100      	movs	r1, #0
 800caea:	4628      	mov	r0, r5
 800caec:	f7f3 fba0 	bl	8000230 <memchr>
 800caf0:	b108      	cbz	r0, 800caf6 <_printf_i+0x1f2>
 800caf2:	1b40      	subs	r0, r0, r5
 800caf4:	6060      	str	r0, [r4, #4]
 800caf6:	6863      	ldr	r3, [r4, #4]
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	2300      	movs	r3, #0
 800cafc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb00:	e7a8      	b.n	800ca54 <_printf_i+0x150>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	462a      	mov	r2, r5
 800cb06:	4649      	mov	r1, r9
 800cb08:	4640      	mov	r0, r8
 800cb0a:	47d0      	blx	sl
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d0ab      	beq.n	800ca68 <_printf_i+0x164>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	079b      	lsls	r3, r3, #30
 800cb14:	d413      	bmi.n	800cb3e <_printf_i+0x23a>
 800cb16:	68e0      	ldr	r0, [r4, #12]
 800cb18:	9b03      	ldr	r3, [sp, #12]
 800cb1a:	4298      	cmp	r0, r3
 800cb1c:	bfb8      	it	lt
 800cb1e:	4618      	movlt	r0, r3
 800cb20:	e7a4      	b.n	800ca6c <_printf_i+0x168>
 800cb22:	2301      	movs	r3, #1
 800cb24:	4632      	mov	r2, r6
 800cb26:	4649      	mov	r1, r9
 800cb28:	4640      	mov	r0, r8
 800cb2a:	47d0      	blx	sl
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d09b      	beq.n	800ca68 <_printf_i+0x164>
 800cb30:	3501      	adds	r5, #1
 800cb32:	68e3      	ldr	r3, [r4, #12]
 800cb34:	9903      	ldr	r1, [sp, #12]
 800cb36:	1a5b      	subs	r3, r3, r1
 800cb38:	42ab      	cmp	r3, r5
 800cb3a:	dcf2      	bgt.n	800cb22 <_printf_i+0x21e>
 800cb3c:	e7eb      	b.n	800cb16 <_printf_i+0x212>
 800cb3e:	2500      	movs	r5, #0
 800cb40:	f104 0619 	add.w	r6, r4, #25
 800cb44:	e7f5      	b.n	800cb32 <_printf_i+0x22e>
 800cb46:	bf00      	nop
 800cb48:	0800ff02 	.word	0x0800ff02
 800cb4c:	0800ff13 	.word	0x0800ff13

0800cb50 <siprintf>:
 800cb50:	b40e      	push	{r1, r2, r3}
 800cb52:	b500      	push	{lr}
 800cb54:	b09c      	sub	sp, #112	; 0x70
 800cb56:	ab1d      	add	r3, sp, #116	; 0x74
 800cb58:	9002      	str	r0, [sp, #8]
 800cb5a:	9006      	str	r0, [sp, #24]
 800cb5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb60:	4809      	ldr	r0, [pc, #36]	; (800cb88 <siprintf+0x38>)
 800cb62:	9107      	str	r1, [sp, #28]
 800cb64:	9104      	str	r1, [sp, #16]
 800cb66:	4909      	ldr	r1, [pc, #36]	; (800cb8c <siprintf+0x3c>)
 800cb68:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb6c:	9105      	str	r1, [sp, #20]
 800cb6e:	6800      	ldr	r0, [r0, #0]
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	a902      	add	r1, sp, #8
 800cb74:	f001 fb76 	bl	800e264 <_svfiprintf_r>
 800cb78:	9b02      	ldr	r3, [sp, #8]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	b01c      	add	sp, #112	; 0x70
 800cb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb84:	b003      	add	sp, #12
 800cb86:	4770      	bx	lr
 800cb88:	2000002c 	.word	0x2000002c
 800cb8c:	ffff0208 	.word	0xffff0208

0800cb90 <quorem>:
 800cb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	6903      	ldr	r3, [r0, #16]
 800cb96:	690c      	ldr	r4, [r1, #16]
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	f2c0 8081 	blt.w	800cca2 <quorem+0x112>
 800cba0:	3c01      	subs	r4, #1
 800cba2:	f101 0814 	add.w	r8, r1, #20
 800cba6:	f100 0514 	add.w	r5, r0, #20
 800cbaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cbc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbc8:	d331      	bcc.n	800cc2e <quorem+0x9e>
 800cbca:	f04f 0e00 	mov.w	lr, #0
 800cbce:	4640      	mov	r0, r8
 800cbd0:	46ac      	mov	ip, r5
 800cbd2:	46f2      	mov	sl, lr
 800cbd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cbd8:	b293      	uxth	r3, r2
 800cbda:	fb06 e303 	mla	r3, r6, r3, lr
 800cbde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	ebaa 0303 	sub.w	r3, sl, r3
 800cbe8:	f8dc a000 	ldr.w	sl, [ip]
 800cbec:	0c12      	lsrs	r2, r2, #16
 800cbee:	fa13 f38a 	uxtah	r3, r3, sl
 800cbf2:	fb06 e202 	mla	r2, r6, r2, lr
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	9b00      	ldr	r3, [sp, #0]
 800cbfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cbfe:	b292      	uxth	r2, r2
 800cc00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cc04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc08:	f8bd 3000 	ldrh.w	r3, [sp]
 800cc0c:	4581      	cmp	r9, r0
 800cc0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc12:	f84c 3b04 	str.w	r3, [ip], #4
 800cc16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc1a:	d2db      	bcs.n	800cbd4 <quorem+0x44>
 800cc1c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc20:	b92b      	cbnz	r3, 800cc2e <quorem+0x9e>
 800cc22:	9b01      	ldr	r3, [sp, #4]
 800cc24:	3b04      	subs	r3, #4
 800cc26:	429d      	cmp	r5, r3
 800cc28:	461a      	mov	r2, r3
 800cc2a:	d32e      	bcc.n	800cc8a <quorem+0xfa>
 800cc2c:	613c      	str	r4, [r7, #16]
 800cc2e:	4638      	mov	r0, r7
 800cc30:	f001 f8c4 	bl	800ddbc <__mcmp>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	db24      	blt.n	800cc82 <quorem+0xf2>
 800cc38:	3601      	adds	r6, #1
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f04f 0c00 	mov.w	ip, #0
 800cc40:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc44:	f8d0 e000 	ldr.w	lr, [r0]
 800cc48:	b293      	uxth	r3, r2
 800cc4a:	ebac 0303 	sub.w	r3, ip, r3
 800cc4e:	0c12      	lsrs	r2, r2, #16
 800cc50:	fa13 f38e 	uxtah	r3, r3, lr
 800cc54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc62:	45c1      	cmp	r9, r8
 800cc64:	f840 3b04 	str.w	r3, [r0], #4
 800cc68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc6c:	d2e8      	bcs.n	800cc40 <quorem+0xb0>
 800cc6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc76:	b922      	cbnz	r2, 800cc82 <quorem+0xf2>
 800cc78:	3b04      	subs	r3, #4
 800cc7a:	429d      	cmp	r5, r3
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	d30a      	bcc.n	800cc96 <quorem+0x106>
 800cc80:	613c      	str	r4, [r7, #16]
 800cc82:	4630      	mov	r0, r6
 800cc84:	b003      	add	sp, #12
 800cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	3b04      	subs	r3, #4
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	d1cc      	bne.n	800cc2c <quorem+0x9c>
 800cc92:	3c01      	subs	r4, #1
 800cc94:	e7c7      	b.n	800cc26 <quorem+0x96>
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	3b04      	subs	r3, #4
 800cc9a:	2a00      	cmp	r2, #0
 800cc9c:	d1f0      	bne.n	800cc80 <quorem+0xf0>
 800cc9e:	3c01      	subs	r4, #1
 800cca0:	e7eb      	b.n	800cc7a <quorem+0xea>
 800cca2:	2000      	movs	r0, #0
 800cca4:	e7ee      	b.n	800cc84 <quorem+0xf4>
	...

0800cca8 <_dtoa_r>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	ed2d 8b04 	vpush	{d8-d9}
 800ccb0:	ec57 6b10 	vmov	r6, r7, d0
 800ccb4:	b093      	sub	sp, #76	; 0x4c
 800ccb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ccb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ccbc:	9106      	str	r1, [sp, #24]
 800ccbe:	ee10 aa10 	vmov	sl, s0
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccc6:	930c      	str	r3, [sp, #48]	; 0x30
 800ccc8:	46bb      	mov	fp, r7
 800ccca:	b975      	cbnz	r5, 800ccea <_dtoa_r+0x42>
 800cccc:	2010      	movs	r0, #16
 800ccce:	f000 fddd 	bl	800d88c <malloc>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	6260      	str	r0, [r4, #36]	; 0x24
 800ccd6:	b920      	cbnz	r0, 800cce2 <_dtoa_r+0x3a>
 800ccd8:	4ba7      	ldr	r3, [pc, #668]	; (800cf78 <_dtoa_r+0x2d0>)
 800ccda:	21ea      	movs	r1, #234	; 0xea
 800ccdc:	48a7      	ldr	r0, [pc, #668]	; (800cf7c <_dtoa_r+0x2d4>)
 800ccde:	f001 fbd1 	bl	800e484 <__assert_func>
 800cce2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cce6:	6005      	str	r5, [r0, #0]
 800cce8:	60c5      	str	r5, [r0, #12]
 800ccea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccec:	6819      	ldr	r1, [r3, #0]
 800ccee:	b151      	cbz	r1, 800cd06 <_dtoa_r+0x5e>
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	604a      	str	r2, [r1, #4]
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	4093      	lsls	r3, r2
 800ccf8:	608b      	str	r3, [r1, #8]
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fe1c 	bl	800d938 <_Bfree>
 800cd00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	1e3b      	subs	r3, r7, #0
 800cd08:	bfaa      	itet	ge
 800cd0a:	2300      	movge	r3, #0
 800cd0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cd10:	f8c8 3000 	strge.w	r3, [r8]
 800cd14:	4b9a      	ldr	r3, [pc, #616]	; (800cf80 <_dtoa_r+0x2d8>)
 800cd16:	bfbc      	itt	lt
 800cd18:	2201      	movlt	r2, #1
 800cd1a:	f8c8 2000 	strlt.w	r2, [r8]
 800cd1e:	ea33 030b 	bics.w	r3, r3, fp
 800cd22:	d11b      	bne.n	800cd5c <_dtoa_r+0xb4>
 800cd24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd26:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd2a:	6013      	str	r3, [r2, #0]
 800cd2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd30:	4333      	orrs	r3, r6
 800cd32:	f000 8592 	beq.w	800d85a <_dtoa_r+0xbb2>
 800cd36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd38:	b963      	cbnz	r3, 800cd54 <_dtoa_r+0xac>
 800cd3a:	4b92      	ldr	r3, [pc, #584]	; (800cf84 <_dtoa_r+0x2dc>)
 800cd3c:	e022      	b.n	800cd84 <_dtoa_r+0xdc>
 800cd3e:	4b92      	ldr	r3, [pc, #584]	; (800cf88 <_dtoa_r+0x2e0>)
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	3308      	adds	r3, #8
 800cd44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	9801      	ldr	r0, [sp, #4]
 800cd4a:	b013      	add	sp, #76	; 0x4c
 800cd4c:	ecbd 8b04 	vpop	{d8-d9}
 800cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd54:	4b8b      	ldr	r3, [pc, #556]	; (800cf84 <_dtoa_r+0x2dc>)
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	3303      	adds	r3, #3
 800cd5a:	e7f3      	b.n	800cd44 <_dtoa_r+0x9c>
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	2300      	movs	r3, #0
 800cd60:	4650      	mov	r0, sl
 800cd62:	4659      	mov	r1, fp
 800cd64:	f7f3 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 800cd68:	ec4b ab19 	vmov	d9, sl, fp
 800cd6c:	4680      	mov	r8, r0
 800cd6e:	b158      	cbz	r0, 800cd88 <_dtoa_r+0xe0>
 800cd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd72:	2301      	movs	r3, #1
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 856b 	beq.w	800d854 <_dtoa_r+0xbac>
 800cd7e:	4883      	ldr	r0, [pc, #524]	; (800cf8c <_dtoa_r+0x2e4>)
 800cd80:	6018      	str	r0, [r3, #0]
 800cd82:	1e43      	subs	r3, r0, #1
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	e7df      	b.n	800cd48 <_dtoa_r+0xa0>
 800cd88:	ec4b ab10 	vmov	d0, sl, fp
 800cd8c:	aa10      	add	r2, sp, #64	; 0x40
 800cd8e:	a911      	add	r1, sp, #68	; 0x44
 800cd90:	4620      	mov	r0, r4
 800cd92:	f001 f8b9 	bl	800df08 <__d2b>
 800cd96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd9a:	ee08 0a10 	vmov	s16, r0
 800cd9e:	2d00      	cmp	r5, #0
 800cda0:	f000 8084 	beq.w	800ceac <_dtoa_r+0x204>
 800cda4:	ee19 3a90 	vmov	r3, s19
 800cda8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cdb0:	4656      	mov	r6, sl
 800cdb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cdb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cdba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cdbe:	4b74      	ldr	r3, [pc, #464]	; (800cf90 <_dtoa_r+0x2e8>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f7f3 fa87 	bl	80002d8 <__aeabi_dsub>
 800cdca:	a365      	add	r3, pc, #404	; (adr r3, 800cf60 <_dtoa_r+0x2b8>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f7f3 fc3a 	bl	8000648 <__aeabi_dmul>
 800cdd4:	a364      	add	r3, pc, #400	; (adr r3, 800cf68 <_dtoa_r+0x2c0>)
 800cdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdda:	f7f3 fa7f 	bl	80002dc <__adddf3>
 800cdde:	4606      	mov	r6, r0
 800cde0:	4628      	mov	r0, r5
 800cde2:	460f      	mov	r7, r1
 800cde4:	f7f3 fbc6 	bl	8000574 <__aeabi_i2d>
 800cde8:	a361      	add	r3, pc, #388	; (adr r3, 800cf70 <_dtoa_r+0x2c8>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 fc2b 	bl	8000648 <__aeabi_dmul>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	4639      	mov	r1, r7
 800cdfa:	f7f3 fa6f 	bl	80002dc <__adddf3>
 800cdfe:	4606      	mov	r6, r0
 800ce00:	460f      	mov	r7, r1
 800ce02:	f7f3 fed1 	bl	8000ba8 <__aeabi_d2iz>
 800ce06:	2200      	movs	r2, #0
 800ce08:	9000      	str	r0, [sp, #0]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	4639      	mov	r1, r7
 800ce10:	f7f3 fe8c 	bl	8000b2c <__aeabi_dcmplt>
 800ce14:	b150      	cbz	r0, 800ce2c <_dtoa_r+0x184>
 800ce16:	9800      	ldr	r0, [sp, #0]
 800ce18:	f7f3 fbac 	bl	8000574 <__aeabi_i2d>
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	463b      	mov	r3, r7
 800ce20:	f7f3 fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 800ce24:	b910      	cbnz	r0, 800ce2c <_dtoa_r+0x184>
 800ce26:	9b00      	ldr	r3, [sp, #0]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	9b00      	ldr	r3, [sp, #0]
 800ce2e:	2b16      	cmp	r3, #22
 800ce30:	d85a      	bhi.n	800cee8 <_dtoa_r+0x240>
 800ce32:	9a00      	ldr	r2, [sp, #0]
 800ce34:	4b57      	ldr	r3, [pc, #348]	; (800cf94 <_dtoa_r+0x2ec>)
 800ce36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	ec51 0b19 	vmov	r0, r1, d9
 800ce42:	f7f3 fe73 	bl	8000b2c <__aeabi_dcmplt>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d050      	beq.n	800ceec <_dtoa_r+0x244>
 800ce4a:	9b00      	ldr	r3, [sp, #0]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	2300      	movs	r3, #0
 800ce52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce56:	1b5d      	subs	r5, r3, r5
 800ce58:	1e6b      	subs	r3, r5, #1
 800ce5a:	9305      	str	r3, [sp, #20]
 800ce5c:	bf45      	ittet	mi
 800ce5e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ce62:	9304      	strmi	r3, [sp, #16]
 800ce64:	2300      	movpl	r3, #0
 800ce66:	2300      	movmi	r3, #0
 800ce68:	bf4c      	ite	mi
 800ce6a:	9305      	strmi	r3, [sp, #20]
 800ce6c:	9304      	strpl	r3, [sp, #16]
 800ce6e:	9b00      	ldr	r3, [sp, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	db3d      	blt.n	800cef0 <_dtoa_r+0x248>
 800ce74:	9b05      	ldr	r3, [sp, #20]
 800ce76:	9a00      	ldr	r2, [sp, #0]
 800ce78:	920a      	str	r2, [sp, #40]	; 0x28
 800ce7a:	4413      	add	r3, r2
 800ce7c:	9305      	str	r3, [sp, #20]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	9307      	str	r3, [sp, #28]
 800ce82:	9b06      	ldr	r3, [sp, #24]
 800ce84:	2b09      	cmp	r3, #9
 800ce86:	f200 8089 	bhi.w	800cf9c <_dtoa_r+0x2f4>
 800ce8a:	2b05      	cmp	r3, #5
 800ce8c:	bfc4      	itt	gt
 800ce8e:	3b04      	subgt	r3, #4
 800ce90:	9306      	strgt	r3, [sp, #24]
 800ce92:	9b06      	ldr	r3, [sp, #24]
 800ce94:	f1a3 0302 	sub.w	r3, r3, #2
 800ce98:	bfcc      	ite	gt
 800ce9a:	2500      	movgt	r5, #0
 800ce9c:	2501      	movle	r5, #1
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	f200 8087 	bhi.w	800cfb2 <_dtoa_r+0x30a>
 800cea4:	e8df f003 	tbb	[pc, r3]
 800cea8:	59383a2d 	.word	0x59383a2d
 800ceac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ceb0:	441d      	add	r5, r3
 800ceb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ceb6:	2b20      	cmp	r3, #32
 800ceb8:	bfc1      	itttt	gt
 800ceba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cebe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cec2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cec6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ceca:	bfda      	itte	le
 800cecc:	f1c3 0320 	rsble	r3, r3, #32
 800ced0:	fa06 f003 	lslle.w	r0, r6, r3
 800ced4:	4318      	orrgt	r0, r3
 800ced6:	f7f3 fb3d 	bl	8000554 <__aeabi_ui2d>
 800ceda:	2301      	movs	r3, #1
 800cedc:	4606      	mov	r6, r0
 800cede:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cee2:	3d01      	subs	r5, #1
 800cee4:	930e      	str	r3, [sp, #56]	; 0x38
 800cee6:	e76a      	b.n	800cdbe <_dtoa_r+0x116>
 800cee8:	2301      	movs	r3, #1
 800ceea:	e7b2      	b.n	800ce52 <_dtoa_r+0x1aa>
 800ceec:	900b      	str	r0, [sp, #44]	; 0x2c
 800ceee:	e7b1      	b.n	800ce54 <_dtoa_r+0x1ac>
 800cef0:	9b04      	ldr	r3, [sp, #16]
 800cef2:	9a00      	ldr	r2, [sp, #0]
 800cef4:	1a9b      	subs	r3, r3, r2
 800cef6:	9304      	str	r3, [sp, #16]
 800cef8:	4253      	negs	r3, r2
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	2300      	movs	r3, #0
 800cefe:	930a      	str	r3, [sp, #40]	; 0x28
 800cf00:	e7bf      	b.n	800ce82 <_dtoa_r+0x1da>
 800cf02:	2300      	movs	r3, #0
 800cf04:	9308      	str	r3, [sp, #32]
 800cf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	dc55      	bgt.n	800cfb8 <_dtoa_r+0x310>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf12:	461a      	mov	r2, r3
 800cf14:	9209      	str	r2, [sp, #36]	; 0x24
 800cf16:	e00c      	b.n	800cf32 <_dtoa_r+0x28a>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e7f3      	b.n	800cf04 <_dtoa_r+0x25c>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf20:	9308      	str	r3, [sp, #32]
 800cf22:	9b00      	ldr	r3, [sp, #0]
 800cf24:	4413      	add	r3, r2
 800cf26:	9302      	str	r3, [sp, #8]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	9303      	str	r3, [sp, #12]
 800cf2e:	bfb8      	it	lt
 800cf30:	2301      	movlt	r3, #1
 800cf32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cf34:	2200      	movs	r2, #0
 800cf36:	6042      	str	r2, [r0, #4]
 800cf38:	2204      	movs	r2, #4
 800cf3a:	f102 0614 	add.w	r6, r2, #20
 800cf3e:	429e      	cmp	r6, r3
 800cf40:	6841      	ldr	r1, [r0, #4]
 800cf42:	d93d      	bls.n	800cfc0 <_dtoa_r+0x318>
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fcb7 	bl	800d8b8 <_Balloc>
 800cf4a:	9001      	str	r0, [sp, #4]
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d13b      	bne.n	800cfc8 <_dtoa_r+0x320>
 800cf50:	4b11      	ldr	r3, [pc, #68]	; (800cf98 <_dtoa_r+0x2f0>)
 800cf52:	4602      	mov	r2, r0
 800cf54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cf58:	e6c0      	b.n	800ccdc <_dtoa_r+0x34>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e7df      	b.n	800cf1e <_dtoa_r+0x276>
 800cf5e:	bf00      	nop
 800cf60:	636f4361 	.word	0x636f4361
 800cf64:	3fd287a7 	.word	0x3fd287a7
 800cf68:	8b60c8b3 	.word	0x8b60c8b3
 800cf6c:	3fc68a28 	.word	0x3fc68a28
 800cf70:	509f79fb 	.word	0x509f79fb
 800cf74:	3fd34413 	.word	0x3fd34413
 800cf78:	0800ff31 	.word	0x0800ff31
 800cf7c:	0800ff48 	.word	0x0800ff48
 800cf80:	7ff00000 	.word	0x7ff00000
 800cf84:	0800ff2d 	.word	0x0800ff2d
 800cf88:	0800ff24 	.word	0x0800ff24
 800cf8c:	0800ff01 	.word	0x0800ff01
 800cf90:	3ff80000 	.word	0x3ff80000
 800cf94:	08010038 	.word	0x08010038
 800cf98:	0800ffa3 	.word	0x0800ffa3
 800cf9c:	2501      	movs	r5, #1
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9306      	str	r3, [sp, #24]
 800cfa2:	9508      	str	r5, [sp, #32]
 800cfa4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cfac:	2200      	movs	r2, #0
 800cfae:	2312      	movs	r3, #18
 800cfb0:	e7b0      	b.n	800cf14 <_dtoa_r+0x26c>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	9308      	str	r3, [sp, #32]
 800cfb6:	e7f5      	b.n	800cfa4 <_dtoa_r+0x2fc>
 800cfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cfbe:	e7b8      	b.n	800cf32 <_dtoa_r+0x28a>
 800cfc0:	3101      	adds	r1, #1
 800cfc2:	6041      	str	r1, [r0, #4]
 800cfc4:	0052      	lsls	r2, r2, #1
 800cfc6:	e7b8      	b.n	800cf3a <_dtoa_r+0x292>
 800cfc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfca:	9a01      	ldr	r2, [sp, #4]
 800cfcc:	601a      	str	r2, [r3, #0]
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	2b0e      	cmp	r3, #14
 800cfd2:	f200 809d 	bhi.w	800d110 <_dtoa_r+0x468>
 800cfd6:	2d00      	cmp	r5, #0
 800cfd8:	f000 809a 	beq.w	800d110 <_dtoa_r+0x468>
 800cfdc:	9b00      	ldr	r3, [sp, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dd32      	ble.n	800d048 <_dtoa_r+0x3a0>
 800cfe2:	4ab7      	ldr	r2, [pc, #732]	; (800d2c0 <_dtoa_r+0x618>)
 800cfe4:	f003 030f 	and.w	r3, r3, #15
 800cfe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cff0:	9b00      	ldr	r3, [sp, #0]
 800cff2:	05d8      	lsls	r0, r3, #23
 800cff4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cff8:	d516      	bpl.n	800d028 <_dtoa_r+0x380>
 800cffa:	4bb2      	ldr	r3, [pc, #712]	; (800d2c4 <_dtoa_r+0x61c>)
 800cffc:	ec51 0b19 	vmov	r0, r1, d9
 800d000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d004:	f7f3 fc4a 	bl	800089c <__aeabi_ddiv>
 800d008:	f007 070f 	and.w	r7, r7, #15
 800d00c:	4682      	mov	sl, r0
 800d00e:	468b      	mov	fp, r1
 800d010:	2503      	movs	r5, #3
 800d012:	4eac      	ldr	r6, [pc, #688]	; (800d2c4 <_dtoa_r+0x61c>)
 800d014:	b957      	cbnz	r7, 800d02c <_dtoa_r+0x384>
 800d016:	4642      	mov	r2, r8
 800d018:	464b      	mov	r3, r9
 800d01a:	4650      	mov	r0, sl
 800d01c:	4659      	mov	r1, fp
 800d01e:	f7f3 fc3d 	bl	800089c <__aeabi_ddiv>
 800d022:	4682      	mov	sl, r0
 800d024:	468b      	mov	fp, r1
 800d026:	e028      	b.n	800d07a <_dtoa_r+0x3d2>
 800d028:	2502      	movs	r5, #2
 800d02a:	e7f2      	b.n	800d012 <_dtoa_r+0x36a>
 800d02c:	07f9      	lsls	r1, r7, #31
 800d02e:	d508      	bpl.n	800d042 <_dtoa_r+0x39a>
 800d030:	4640      	mov	r0, r8
 800d032:	4649      	mov	r1, r9
 800d034:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d038:	f7f3 fb06 	bl	8000648 <__aeabi_dmul>
 800d03c:	3501      	adds	r5, #1
 800d03e:	4680      	mov	r8, r0
 800d040:	4689      	mov	r9, r1
 800d042:	107f      	asrs	r7, r7, #1
 800d044:	3608      	adds	r6, #8
 800d046:	e7e5      	b.n	800d014 <_dtoa_r+0x36c>
 800d048:	f000 809b 	beq.w	800d182 <_dtoa_r+0x4da>
 800d04c:	9b00      	ldr	r3, [sp, #0]
 800d04e:	4f9d      	ldr	r7, [pc, #628]	; (800d2c4 <_dtoa_r+0x61c>)
 800d050:	425e      	negs	r6, r3
 800d052:	4b9b      	ldr	r3, [pc, #620]	; (800d2c0 <_dtoa_r+0x618>)
 800d054:	f006 020f 	and.w	r2, r6, #15
 800d058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	ec51 0b19 	vmov	r0, r1, d9
 800d064:	f7f3 faf0 	bl	8000648 <__aeabi_dmul>
 800d068:	1136      	asrs	r6, r6, #4
 800d06a:	4682      	mov	sl, r0
 800d06c:	468b      	mov	fp, r1
 800d06e:	2300      	movs	r3, #0
 800d070:	2502      	movs	r5, #2
 800d072:	2e00      	cmp	r6, #0
 800d074:	d17a      	bne.n	800d16c <_dtoa_r+0x4c4>
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1d3      	bne.n	800d022 <_dtoa_r+0x37a>
 800d07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 8082 	beq.w	800d186 <_dtoa_r+0x4de>
 800d082:	4b91      	ldr	r3, [pc, #580]	; (800d2c8 <_dtoa_r+0x620>)
 800d084:	2200      	movs	r2, #0
 800d086:	4650      	mov	r0, sl
 800d088:	4659      	mov	r1, fp
 800d08a:	f7f3 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 800d08e:	2800      	cmp	r0, #0
 800d090:	d079      	beq.n	800d186 <_dtoa_r+0x4de>
 800d092:	9b03      	ldr	r3, [sp, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d076      	beq.n	800d186 <_dtoa_r+0x4de>
 800d098:	9b02      	ldr	r3, [sp, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dd36      	ble.n	800d10c <_dtoa_r+0x464>
 800d09e:	9b00      	ldr	r3, [sp, #0]
 800d0a0:	4650      	mov	r0, sl
 800d0a2:	4659      	mov	r1, fp
 800d0a4:	1e5f      	subs	r7, r3, #1
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	4b88      	ldr	r3, [pc, #544]	; (800d2cc <_dtoa_r+0x624>)
 800d0aa:	f7f3 facd 	bl	8000648 <__aeabi_dmul>
 800d0ae:	9e02      	ldr	r6, [sp, #8]
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f7f3 fa5c 	bl	8000574 <__aeabi_i2d>
 800d0bc:	4652      	mov	r2, sl
 800d0be:	465b      	mov	r3, fp
 800d0c0:	f7f3 fac2 	bl	8000648 <__aeabi_dmul>
 800d0c4:	4b82      	ldr	r3, [pc, #520]	; (800d2d0 <_dtoa_r+0x628>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f7f3 f908 	bl	80002dc <__adddf3>
 800d0cc:	46d0      	mov	r8, sl
 800d0ce:	46d9      	mov	r9, fp
 800d0d0:	4682      	mov	sl, r0
 800d0d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	d158      	bne.n	800d18c <_dtoa_r+0x4e4>
 800d0da:	4b7e      	ldr	r3, [pc, #504]	; (800d2d4 <_dtoa_r+0x62c>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4640      	mov	r0, r8
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	f7f3 f8f9 	bl	80002d8 <__aeabi_dsub>
 800d0e6:	4652      	mov	r2, sl
 800d0e8:	465b      	mov	r3, fp
 800d0ea:	4680      	mov	r8, r0
 800d0ec:	4689      	mov	r9, r1
 800d0ee:	f7f3 fd3b 	bl	8000b68 <__aeabi_dcmpgt>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	f040 8295 	bne.w	800d622 <_dtoa_r+0x97a>
 800d0f8:	4652      	mov	r2, sl
 800d0fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0fe:	4640      	mov	r0, r8
 800d100:	4649      	mov	r1, r9
 800d102:	f7f3 fd13 	bl	8000b2c <__aeabi_dcmplt>
 800d106:	2800      	cmp	r0, #0
 800d108:	f040 8289 	bne.w	800d61e <_dtoa_r+0x976>
 800d10c:	ec5b ab19 	vmov	sl, fp, d9
 800d110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d112:	2b00      	cmp	r3, #0
 800d114:	f2c0 8148 	blt.w	800d3a8 <_dtoa_r+0x700>
 800d118:	9a00      	ldr	r2, [sp, #0]
 800d11a:	2a0e      	cmp	r2, #14
 800d11c:	f300 8144 	bgt.w	800d3a8 <_dtoa_r+0x700>
 800d120:	4b67      	ldr	r3, [pc, #412]	; (800d2c0 <_dtoa_r+0x618>)
 800d122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d126:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f280 80d5 	bge.w	800d2dc <_dtoa_r+0x634>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f300 80d1 	bgt.w	800d2dc <_dtoa_r+0x634>
 800d13a:	f040 826f 	bne.w	800d61c <_dtoa_r+0x974>
 800d13e:	4b65      	ldr	r3, [pc, #404]	; (800d2d4 <_dtoa_r+0x62c>)
 800d140:	2200      	movs	r2, #0
 800d142:	4640      	mov	r0, r8
 800d144:	4649      	mov	r1, r9
 800d146:	f7f3 fa7f 	bl	8000648 <__aeabi_dmul>
 800d14a:	4652      	mov	r2, sl
 800d14c:	465b      	mov	r3, fp
 800d14e:	f7f3 fd01 	bl	8000b54 <__aeabi_dcmpge>
 800d152:	9e03      	ldr	r6, [sp, #12]
 800d154:	4637      	mov	r7, r6
 800d156:	2800      	cmp	r0, #0
 800d158:	f040 8245 	bne.w	800d5e6 <_dtoa_r+0x93e>
 800d15c:	9d01      	ldr	r5, [sp, #4]
 800d15e:	2331      	movs	r3, #49	; 0x31
 800d160:	f805 3b01 	strb.w	r3, [r5], #1
 800d164:	9b00      	ldr	r3, [sp, #0]
 800d166:	3301      	adds	r3, #1
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	e240      	b.n	800d5ee <_dtoa_r+0x946>
 800d16c:	07f2      	lsls	r2, r6, #31
 800d16e:	d505      	bpl.n	800d17c <_dtoa_r+0x4d4>
 800d170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d174:	f7f3 fa68 	bl	8000648 <__aeabi_dmul>
 800d178:	3501      	adds	r5, #1
 800d17a:	2301      	movs	r3, #1
 800d17c:	1076      	asrs	r6, r6, #1
 800d17e:	3708      	adds	r7, #8
 800d180:	e777      	b.n	800d072 <_dtoa_r+0x3ca>
 800d182:	2502      	movs	r5, #2
 800d184:	e779      	b.n	800d07a <_dtoa_r+0x3d2>
 800d186:	9f00      	ldr	r7, [sp, #0]
 800d188:	9e03      	ldr	r6, [sp, #12]
 800d18a:	e794      	b.n	800d0b6 <_dtoa_r+0x40e>
 800d18c:	9901      	ldr	r1, [sp, #4]
 800d18e:	4b4c      	ldr	r3, [pc, #304]	; (800d2c0 <_dtoa_r+0x618>)
 800d190:	4431      	add	r1, r6
 800d192:	910d      	str	r1, [sp, #52]	; 0x34
 800d194:	9908      	ldr	r1, [sp, #32]
 800d196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d19a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	d043      	beq.n	800d22a <_dtoa_r+0x582>
 800d1a2:	494d      	ldr	r1, [pc, #308]	; (800d2d8 <_dtoa_r+0x630>)
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	f7f3 fb79 	bl	800089c <__aeabi_ddiv>
 800d1aa:	4652      	mov	r2, sl
 800d1ac:	465b      	mov	r3, fp
 800d1ae:	f7f3 f893 	bl	80002d8 <__aeabi_dsub>
 800d1b2:	9d01      	ldr	r5, [sp, #4]
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	468b      	mov	fp, r1
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	f7f3 fcf4 	bl	8000ba8 <__aeabi_d2iz>
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	f7f3 f9d7 	bl	8000574 <__aeabi_i2d>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	f7f3 f883 	bl	80002d8 <__aeabi_dsub>
 800d1d2:	3630      	adds	r6, #48	; 0x30
 800d1d4:	f805 6b01 	strb.w	r6, [r5], #1
 800d1d8:	4652      	mov	r2, sl
 800d1da:	465b      	mov	r3, fp
 800d1dc:	4680      	mov	r8, r0
 800d1de:	4689      	mov	r9, r1
 800d1e0:	f7f3 fca4 	bl	8000b2c <__aeabi_dcmplt>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d163      	bne.n	800d2b0 <_dtoa_r+0x608>
 800d1e8:	4642      	mov	r2, r8
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	4936      	ldr	r1, [pc, #216]	; (800d2c8 <_dtoa_r+0x620>)
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	f7f3 f872 	bl	80002d8 <__aeabi_dsub>
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	465b      	mov	r3, fp
 800d1f8:	f7f3 fc98 	bl	8000b2c <__aeabi_dcmplt>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	f040 80b5 	bne.w	800d36c <_dtoa_r+0x6c4>
 800d202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d204:	429d      	cmp	r5, r3
 800d206:	d081      	beq.n	800d10c <_dtoa_r+0x464>
 800d208:	4b30      	ldr	r3, [pc, #192]	; (800d2cc <_dtoa_r+0x624>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	4650      	mov	r0, sl
 800d20e:	4659      	mov	r1, fp
 800d210:	f7f3 fa1a 	bl	8000648 <__aeabi_dmul>
 800d214:	4b2d      	ldr	r3, [pc, #180]	; (800d2cc <_dtoa_r+0x624>)
 800d216:	4682      	mov	sl, r0
 800d218:	468b      	mov	fp, r1
 800d21a:	4640      	mov	r0, r8
 800d21c:	4649      	mov	r1, r9
 800d21e:	2200      	movs	r2, #0
 800d220:	f7f3 fa12 	bl	8000648 <__aeabi_dmul>
 800d224:	4680      	mov	r8, r0
 800d226:	4689      	mov	r9, r1
 800d228:	e7c6      	b.n	800d1b8 <_dtoa_r+0x510>
 800d22a:	4650      	mov	r0, sl
 800d22c:	4659      	mov	r1, fp
 800d22e:	f7f3 fa0b 	bl	8000648 <__aeabi_dmul>
 800d232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d234:	9d01      	ldr	r5, [sp, #4]
 800d236:	930f      	str	r3, [sp, #60]	; 0x3c
 800d238:	4682      	mov	sl, r0
 800d23a:	468b      	mov	fp, r1
 800d23c:	4649      	mov	r1, r9
 800d23e:	4640      	mov	r0, r8
 800d240:	f7f3 fcb2 	bl	8000ba8 <__aeabi_d2iz>
 800d244:	4606      	mov	r6, r0
 800d246:	f7f3 f995 	bl	8000574 <__aeabi_i2d>
 800d24a:	3630      	adds	r6, #48	; 0x30
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	4640      	mov	r0, r8
 800d252:	4649      	mov	r1, r9
 800d254:	f7f3 f840 	bl	80002d8 <__aeabi_dsub>
 800d258:	f805 6b01 	strb.w	r6, [r5], #1
 800d25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d25e:	429d      	cmp	r5, r3
 800d260:	4680      	mov	r8, r0
 800d262:	4689      	mov	r9, r1
 800d264:	f04f 0200 	mov.w	r2, #0
 800d268:	d124      	bne.n	800d2b4 <_dtoa_r+0x60c>
 800d26a:	4b1b      	ldr	r3, [pc, #108]	; (800d2d8 <_dtoa_r+0x630>)
 800d26c:	4650      	mov	r0, sl
 800d26e:	4659      	mov	r1, fp
 800d270:	f7f3 f834 	bl	80002dc <__adddf3>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	4640      	mov	r0, r8
 800d27a:	4649      	mov	r1, r9
 800d27c:	f7f3 fc74 	bl	8000b68 <__aeabi_dcmpgt>
 800d280:	2800      	cmp	r0, #0
 800d282:	d173      	bne.n	800d36c <_dtoa_r+0x6c4>
 800d284:	4652      	mov	r2, sl
 800d286:	465b      	mov	r3, fp
 800d288:	4913      	ldr	r1, [pc, #76]	; (800d2d8 <_dtoa_r+0x630>)
 800d28a:	2000      	movs	r0, #0
 800d28c:	f7f3 f824 	bl	80002d8 <__aeabi_dsub>
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	4640      	mov	r0, r8
 800d296:	4649      	mov	r1, r9
 800d298:	f7f3 fc48 	bl	8000b2c <__aeabi_dcmplt>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	f43f af35 	beq.w	800d10c <_dtoa_r+0x464>
 800d2a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d2a4:	1e6b      	subs	r3, r5, #1
 800d2a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2ac:	2b30      	cmp	r3, #48	; 0x30
 800d2ae:	d0f8      	beq.n	800d2a2 <_dtoa_r+0x5fa>
 800d2b0:	9700      	str	r7, [sp, #0]
 800d2b2:	e049      	b.n	800d348 <_dtoa_r+0x6a0>
 800d2b4:	4b05      	ldr	r3, [pc, #20]	; (800d2cc <_dtoa_r+0x624>)
 800d2b6:	f7f3 f9c7 	bl	8000648 <__aeabi_dmul>
 800d2ba:	4680      	mov	r8, r0
 800d2bc:	4689      	mov	r9, r1
 800d2be:	e7bd      	b.n	800d23c <_dtoa_r+0x594>
 800d2c0:	08010038 	.word	0x08010038
 800d2c4:	08010010 	.word	0x08010010
 800d2c8:	3ff00000 	.word	0x3ff00000
 800d2cc:	40240000 	.word	0x40240000
 800d2d0:	401c0000 	.word	0x401c0000
 800d2d4:	40140000 	.word	0x40140000
 800d2d8:	3fe00000 	.word	0x3fe00000
 800d2dc:	9d01      	ldr	r5, [sp, #4]
 800d2de:	4656      	mov	r6, sl
 800d2e0:	465f      	mov	r7, fp
 800d2e2:	4642      	mov	r2, r8
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	f7f3 fad7 	bl	800089c <__aeabi_ddiv>
 800d2ee:	f7f3 fc5b 	bl	8000ba8 <__aeabi_d2iz>
 800d2f2:	4682      	mov	sl, r0
 800d2f4:	f7f3 f93e 	bl	8000574 <__aeabi_i2d>
 800d2f8:	4642      	mov	r2, r8
 800d2fa:	464b      	mov	r3, r9
 800d2fc:	f7f3 f9a4 	bl	8000648 <__aeabi_dmul>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4630      	mov	r0, r6
 800d306:	4639      	mov	r1, r7
 800d308:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d30c:	f7f2 ffe4 	bl	80002d8 <__aeabi_dsub>
 800d310:	f805 6b01 	strb.w	r6, [r5], #1
 800d314:	9e01      	ldr	r6, [sp, #4]
 800d316:	9f03      	ldr	r7, [sp, #12]
 800d318:	1bae      	subs	r6, r5, r6
 800d31a:	42b7      	cmp	r7, r6
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	d135      	bne.n	800d38e <_dtoa_r+0x6e6>
 800d322:	f7f2 ffdb 	bl	80002dc <__adddf3>
 800d326:	4642      	mov	r2, r8
 800d328:	464b      	mov	r3, r9
 800d32a:	4606      	mov	r6, r0
 800d32c:	460f      	mov	r7, r1
 800d32e:	f7f3 fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 800d332:	b9d0      	cbnz	r0, 800d36a <_dtoa_r+0x6c2>
 800d334:	4642      	mov	r2, r8
 800d336:	464b      	mov	r3, r9
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fbec 	bl	8000b18 <__aeabi_dcmpeq>
 800d340:	b110      	cbz	r0, 800d348 <_dtoa_r+0x6a0>
 800d342:	f01a 0f01 	tst.w	sl, #1
 800d346:	d110      	bne.n	800d36a <_dtoa_r+0x6c2>
 800d348:	4620      	mov	r0, r4
 800d34a:	ee18 1a10 	vmov	r1, s16
 800d34e:	f000 faf3 	bl	800d938 <_Bfree>
 800d352:	2300      	movs	r3, #0
 800d354:	9800      	ldr	r0, [sp, #0]
 800d356:	702b      	strb	r3, [r5, #0]
 800d358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d35a:	3001      	adds	r0, #1
 800d35c:	6018      	str	r0, [r3, #0]
 800d35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d360:	2b00      	cmp	r3, #0
 800d362:	f43f acf1 	beq.w	800cd48 <_dtoa_r+0xa0>
 800d366:	601d      	str	r5, [r3, #0]
 800d368:	e4ee      	b.n	800cd48 <_dtoa_r+0xa0>
 800d36a:	9f00      	ldr	r7, [sp, #0]
 800d36c:	462b      	mov	r3, r5
 800d36e:	461d      	mov	r5, r3
 800d370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d374:	2a39      	cmp	r2, #57	; 0x39
 800d376:	d106      	bne.n	800d386 <_dtoa_r+0x6de>
 800d378:	9a01      	ldr	r2, [sp, #4]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d1f7      	bne.n	800d36e <_dtoa_r+0x6c6>
 800d37e:	9901      	ldr	r1, [sp, #4]
 800d380:	2230      	movs	r2, #48	; 0x30
 800d382:	3701      	adds	r7, #1
 800d384:	700a      	strb	r2, [r1, #0]
 800d386:	781a      	ldrb	r2, [r3, #0]
 800d388:	3201      	adds	r2, #1
 800d38a:	701a      	strb	r2, [r3, #0]
 800d38c:	e790      	b.n	800d2b0 <_dtoa_r+0x608>
 800d38e:	4ba6      	ldr	r3, [pc, #664]	; (800d628 <_dtoa_r+0x980>)
 800d390:	2200      	movs	r2, #0
 800d392:	f7f3 f959 	bl	8000648 <__aeabi_dmul>
 800d396:	2200      	movs	r2, #0
 800d398:	2300      	movs	r3, #0
 800d39a:	4606      	mov	r6, r0
 800d39c:	460f      	mov	r7, r1
 800d39e:	f7f3 fbbb 	bl	8000b18 <__aeabi_dcmpeq>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d09d      	beq.n	800d2e2 <_dtoa_r+0x63a>
 800d3a6:	e7cf      	b.n	800d348 <_dtoa_r+0x6a0>
 800d3a8:	9a08      	ldr	r2, [sp, #32]
 800d3aa:	2a00      	cmp	r2, #0
 800d3ac:	f000 80d7 	beq.w	800d55e <_dtoa_r+0x8b6>
 800d3b0:	9a06      	ldr	r2, [sp, #24]
 800d3b2:	2a01      	cmp	r2, #1
 800d3b4:	f300 80ba 	bgt.w	800d52c <_dtoa_r+0x884>
 800d3b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3ba:	2a00      	cmp	r2, #0
 800d3bc:	f000 80b2 	beq.w	800d524 <_dtoa_r+0x87c>
 800d3c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3c4:	9e07      	ldr	r6, [sp, #28]
 800d3c6:	9d04      	ldr	r5, [sp, #16]
 800d3c8:	9a04      	ldr	r2, [sp, #16]
 800d3ca:	441a      	add	r2, r3
 800d3cc:	9204      	str	r2, [sp, #16]
 800d3ce:	9a05      	ldr	r2, [sp, #20]
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	441a      	add	r2, r3
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	9205      	str	r2, [sp, #20]
 800d3d8:	f000 fb66 	bl	800daa8 <__i2b>
 800d3dc:	4607      	mov	r7, r0
 800d3de:	2d00      	cmp	r5, #0
 800d3e0:	dd0c      	ble.n	800d3fc <_dtoa_r+0x754>
 800d3e2:	9b05      	ldr	r3, [sp, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	dd09      	ble.n	800d3fc <_dtoa_r+0x754>
 800d3e8:	42ab      	cmp	r3, r5
 800d3ea:	9a04      	ldr	r2, [sp, #16]
 800d3ec:	bfa8      	it	ge
 800d3ee:	462b      	movge	r3, r5
 800d3f0:	1ad2      	subs	r2, r2, r3
 800d3f2:	9204      	str	r2, [sp, #16]
 800d3f4:	9a05      	ldr	r2, [sp, #20]
 800d3f6:	1aed      	subs	r5, r5, r3
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	9305      	str	r3, [sp, #20]
 800d3fc:	9b07      	ldr	r3, [sp, #28]
 800d3fe:	b31b      	cbz	r3, 800d448 <_dtoa_r+0x7a0>
 800d400:	9b08      	ldr	r3, [sp, #32]
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 80af 	beq.w	800d566 <_dtoa_r+0x8be>
 800d408:	2e00      	cmp	r6, #0
 800d40a:	dd13      	ble.n	800d434 <_dtoa_r+0x78c>
 800d40c:	4639      	mov	r1, r7
 800d40e:	4632      	mov	r2, r6
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fc09 	bl	800dc28 <__pow5mult>
 800d416:	ee18 2a10 	vmov	r2, s16
 800d41a:	4601      	mov	r1, r0
 800d41c:	4607      	mov	r7, r0
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 fb58 	bl	800dad4 <__multiply>
 800d424:	ee18 1a10 	vmov	r1, s16
 800d428:	4680      	mov	r8, r0
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 fa84 	bl	800d938 <_Bfree>
 800d430:	ee08 8a10 	vmov	s16, r8
 800d434:	9b07      	ldr	r3, [sp, #28]
 800d436:	1b9a      	subs	r2, r3, r6
 800d438:	d006      	beq.n	800d448 <_dtoa_r+0x7a0>
 800d43a:	ee18 1a10 	vmov	r1, s16
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 fbf2 	bl	800dc28 <__pow5mult>
 800d444:	ee08 0a10 	vmov	s16, r0
 800d448:	2101      	movs	r1, #1
 800d44a:	4620      	mov	r0, r4
 800d44c:	f000 fb2c 	bl	800daa8 <__i2b>
 800d450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d452:	2b00      	cmp	r3, #0
 800d454:	4606      	mov	r6, r0
 800d456:	f340 8088 	ble.w	800d56a <_dtoa_r+0x8c2>
 800d45a:	461a      	mov	r2, r3
 800d45c:	4601      	mov	r1, r0
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fbe2 	bl	800dc28 <__pow5mult>
 800d464:	9b06      	ldr	r3, [sp, #24]
 800d466:	2b01      	cmp	r3, #1
 800d468:	4606      	mov	r6, r0
 800d46a:	f340 8081 	ble.w	800d570 <_dtoa_r+0x8c8>
 800d46e:	f04f 0800 	mov.w	r8, #0
 800d472:	6933      	ldr	r3, [r6, #16]
 800d474:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d478:	6918      	ldr	r0, [r3, #16]
 800d47a:	f000 fac5 	bl	800da08 <__hi0bits>
 800d47e:	f1c0 0020 	rsb	r0, r0, #32
 800d482:	9b05      	ldr	r3, [sp, #20]
 800d484:	4418      	add	r0, r3
 800d486:	f010 001f 	ands.w	r0, r0, #31
 800d48a:	f000 8092 	beq.w	800d5b2 <_dtoa_r+0x90a>
 800d48e:	f1c0 0320 	rsb	r3, r0, #32
 800d492:	2b04      	cmp	r3, #4
 800d494:	f340 808a 	ble.w	800d5ac <_dtoa_r+0x904>
 800d498:	f1c0 001c 	rsb	r0, r0, #28
 800d49c:	9b04      	ldr	r3, [sp, #16]
 800d49e:	4403      	add	r3, r0
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	9b05      	ldr	r3, [sp, #20]
 800d4a4:	4403      	add	r3, r0
 800d4a6:	4405      	add	r5, r0
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	dd07      	ble.n	800d4c0 <_dtoa_r+0x818>
 800d4b0:	ee18 1a10 	vmov	r1, s16
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 fc10 	bl	800dcdc <__lshift>
 800d4bc:	ee08 0a10 	vmov	s16, r0
 800d4c0:	9b05      	ldr	r3, [sp, #20]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	dd05      	ble.n	800d4d2 <_dtoa_r+0x82a>
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fc06 	bl	800dcdc <__lshift>
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d06e      	beq.n	800d5b6 <_dtoa_r+0x90e>
 800d4d8:	ee18 0a10 	vmov	r0, s16
 800d4dc:	4631      	mov	r1, r6
 800d4de:	f000 fc6d 	bl	800ddbc <__mcmp>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	da67      	bge.n	800d5b6 <_dtoa_r+0x90e>
 800d4e6:	9b00      	ldr	r3, [sp, #0]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	ee18 1a10 	vmov	r1, s16
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	220a      	movs	r2, #10
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 fa41 	bl	800d97c <__multadd>
 800d4fa:	9b08      	ldr	r3, [sp, #32]
 800d4fc:	ee08 0a10 	vmov	s16, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 81b1 	beq.w	800d868 <_dtoa_r+0xbc0>
 800d506:	2300      	movs	r3, #0
 800d508:	4639      	mov	r1, r7
 800d50a:	220a      	movs	r2, #10
 800d50c:	4620      	mov	r0, r4
 800d50e:	f000 fa35 	bl	800d97c <__multadd>
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	4607      	mov	r7, r0
 800d518:	f300 808e 	bgt.w	800d638 <_dtoa_r+0x990>
 800d51c:	9b06      	ldr	r3, [sp, #24]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	dc51      	bgt.n	800d5c6 <_dtoa_r+0x91e>
 800d522:	e089      	b.n	800d638 <_dtoa_r+0x990>
 800d524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d52a:	e74b      	b.n	800d3c4 <_dtoa_r+0x71c>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	1e5e      	subs	r6, r3, #1
 800d530:	9b07      	ldr	r3, [sp, #28]
 800d532:	42b3      	cmp	r3, r6
 800d534:	bfbf      	itttt	lt
 800d536:	9b07      	ldrlt	r3, [sp, #28]
 800d538:	9607      	strlt	r6, [sp, #28]
 800d53a:	1af2      	sublt	r2, r6, r3
 800d53c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d53e:	bfb6      	itet	lt
 800d540:	189b      	addlt	r3, r3, r2
 800d542:	1b9e      	subge	r6, r3, r6
 800d544:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	bfb8      	it	lt
 800d54a:	2600      	movlt	r6, #0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfb7      	itett	lt
 800d550:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d554:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d558:	1a9d      	sublt	r5, r3, r2
 800d55a:	2300      	movlt	r3, #0
 800d55c:	e734      	b.n	800d3c8 <_dtoa_r+0x720>
 800d55e:	9e07      	ldr	r6, [sp, #28]
 800d560:	9d04      	ldr	r5, [sp, #16]
 800d562:	9f08      	ldr	r7, [sp, #32]
 800d564:	e73b      	b.n	800d3de <_dtoa_r+0x736>
 800d566:	9a07      	ldr	r2, [sp, #28]
 800d568:	e767      	b.n	800d43a <_dtoa_r+0x792>
 800d56a:	9b06      	ldr	r3, [sp, #24]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	dc18      	bgt.n	800d5a2 <_dtoa_r+0x8fa>
 800d570:	f1ba 0f00 	cmp.w	sl, #0
 800d574:	d115      	bne.n	800d5a2 <_dtoa_r+0x8fa>
 800d576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d57a:	b993      	cbnz	r3, 800d5a2 <_dtoa_r+0x8fa>
 800d57c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d580:	0d1b      	lsrs	r3, r3, #20
 800d582:	051b      	lsls	r3, r3, #20
 800d584:	b183      	cbz	r3, 800d5a8 <_dtoa_r+0x900>
 800d586:	9b04      	ldr	r3, [sp, #16]
 800d588:	3301      	adds	r3, #1
 800d58a:	9304      	str	r3, [sp, #16]
 800d58c:	9b05      	ldr	r3, [sp, #20]
 800d58e:	3301      	adds	r3, #1
 800d590:	9305      	str	r3, [sp, #20]
 800d592:	f04f 0801 	mov.w	r8, #1
 800d596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f47f af6a 	bne.w	800d472 <_dtoa_r+0x7ca>
 800d59e:	2001      	movs	r0, #1
 800d5a0:	e76f      	b.n	800d482 <_dtoa_r+0x7da>
 800d5a2:	f04f 0800 	mov.w	r8, #0
 800d5a6:	e7f6      	b.n	800d596 <_dtoa_r+0x8ee>
 800d5a8:	4698      	mov	r8, r3
 800d5aa:	e7f4      	b.n	800d596 <_dtoa_r+0x8ee>
 800d5ac:	f43f af7d 	beq.w	800d4aa <_dtoa_r+0x802>
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	301c      	adds	r0, #28
 800d5b4:	e772      	b.n	800d49c <_dtoa_r+0x7f4>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	dc37      	bgt.n	800d62c <_dtoa_r+0x984>
 800d5bc:	9b06      	ldr	r3, [sp, #24]
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	dd34      	ble.n	800d62c <_dtoa_r+0x984>
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	9302      	str	r3, [sp, #8]
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	b96b      	cbnz	r3, 800d5e6 <_dtoa_r+0x93e>
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	2205      	movs	r2, #5
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 f9d4 	bl	800d97c <__multadd>
 800d5d4:	4601      	mov	r1, r0
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	ee18 0a10 	vmov	r0, s16
 800d5dc:	f000 fbee 	bl	800ddbc <__mcmp>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	f73f adbb 	bgt.w	800d15c <_dtoa_r+0x4b4>
 800d5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e8:	9d01      	ldr	r5, [sp, #4]
 800d5ea:	43db      	mvns	r3, r3
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	f04f 0800 	mov.w	r8, #0
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 f99f 	bl	800d938 <_Bfree>
 800d5fa:	2f00      	cmp	r7, #0
 800d5fc:	f43f aea4 	beq.w	800d348 <_dtoa_r+0x6a0>
 800d600:	f1b8 0f00 	cmp.w	r8, #0
 800d604:	d005      	beq.n	800d612 <_dtoa_r+0x96a>
 800d606:	45b8      	cmp	r8, r7
 800d608:	d003      	beq.n	800d612 <_dtoa_r+0x96a>
 800d60a:	4641      	mov	r1, r8
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 f993 	bl	800d938 <_Bfree>
 800d612:	4639      	mov	r1, r7
 800d614:	4620      	mov	r0, r4
 800d616:	f000 f98f 	bl	800d938 <_Bfree>
 800d61a:	e695      	b.n	800d348 <_dtoa_r+0x6a0>
 800d61c:	2600      	movs	r6, #0
 800d61e:	4637      	mov	r7, r6
 800d620:	e7e1      	b.n	800d5e6 <_dtoa_r+0x93e>
 800d622:	9700      	str	r7, [sp, #0]
 800d624:	4637      	mov	r7, r6
 800d626:	e599      	b.n	800d15c <_dtoa_r+0x4b4>
 800d628:	40240000 	.word	0x40240000
 800d62c:	9b08      	ldr	r3, [sp, #32]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f000 80ca 	beq.w	800d7c8 <_dtoa_r+0xb20>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	9302      	str	r3, [sp, #8]
 800d638:	2d00      	cmp	r5, #0
 800d63a:	dd05      	ble.n	800d648 <_dtoa_r+0x9a0>
 800d63c:	4639      	mov	r1, r7
 800d63e:	462a      	mov	r2, r5
 800d640:	4620      	mov	r0, r4
 800d642:	f000 fb4b 	bl	800dcdc <__lshift>
 800d646:	4607      	mov	r7, r0
 800d648:	f1b8 0f00 	cmp.w	r8, #0
 800d64c:	d05b      	beq.n	800d706 <_dtoa_r+0xa5e>
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	4620      	mov	r0, r4
 800d652:	f000 f931 	bl	800d8b8 <_Balloc>
 800d656:	4605      	mov	r5, r0
 800d658:	b928      	cbnz	r0, 800d666 <_dtoa_r+0x9be>
 800d65a:	4b87      	ldr	r3, [pc, #540]	; (800d878 <_dtoa_r+0xbd0>)
 800d65c:	4602      	mov	r2, r0
 800d65e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d662:	f7ff bb3b 	b.w	800ccdc <_dtoa_r+0x34>
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	3202      	adds	r2, #2
 800d66a:	0092      	lsls	r2, r2, #2
 800d66c:	f107 010c 	add.w	r1, r7, #12
 800d670:	300c      	adds	r0, #12
 800d672:	f000 f913 	bl	800d89c <memcpy>
 800d676:	2201      	movs	r2, #1
 800d678:	4629      	mov	r1, r5
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 fb2e 	bl	800dcdc <__lshift>
 800d680:	9b01      	ldr	r3, [sp, #4]
 800d682:	f103 0901 	add.w	r9, r3, #1
 800d686:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d68a:	4413      	add	r3, r2
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	f00a 0301 	and.w	r3, sl, #1
 800d692:	46b8      	mov	r8, r7
 800d694:	9304      	str	r3, [sp, #16]
 800d696:	4607      	mov	r7, r0
 800d698:	4631      	mov	r1, r6
 800d69a:	ee18 0a10 	vmov	r0, s16
 800d69e:	f7ff fa77 	bl	800cb90 <quorem>
 800d6a2:	4641      	mov	r1, r8
 800d6a4:	9002      	str	r0, [sp, #8]
 800d6a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d6aa:	ee18 0a10 	vmov	r0, s16
 800d6ae:	f000 fb85 	bl	800ddbc <__mcmp>
 800d6b2:	463a      	mov	r2, r7
 800d6b4:	9003      	str	r0, [sp, #12]
 800d6b6:	4631      	mov	r1, r6
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f000 fb9b 	bl	800ddf4 <__mdiff>
 800d6be:	68c2      	ldr	r2, [r0, #12]
 800d6c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	bb02      	cbnz	r2, 800d70a <_dtoa_r+0xa62>
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	ee18 0a10 	vmov	r0, s16
 800d6ce:	f000 fb75 	bl	800ddbc <__mcmp>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	9207      	str	r2, [sp, #28]
 800d6da:	f000 f92d 	bl	800d938 <_Bfree>
 800d6de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d6e2:	ea43 0102 	orr.w	r1, r3, r2
 800d6e6:	9b04      	ldr	r3, [sp, #16]
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	464d      	mov	r5, r9
 800d6ec:	d10f      	bne.n	800d70e <_dtoa_r+0xa66>
 800d6ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6f2:	d02a      	beq.n	800d74a <_dtoa_r+0xaa2>
 800d6f4:	9b03      	ldr	r3, [sp, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	dd02      	ble.n	800d700 <_dtoa_r+0xa58>
 800d6fa:	9b02      	ldr	r3, [sp, #8]
 800d6fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d700:	f88b a000 	strb.w	sl, [fp]
 800d704:	e775      	b.n	800d5f2 <_dtoa_r+0x94a>
 800d706:	4638      	mov	r0, r7
 800d708:	e7ba      	b.n	800d680 <_dtoa_r+0x9d8>
 800d70a:	2201      	movs	r2, #1
 800d70c:	e7e2      	b.n	800d6d4 <_dtoa_r+0xa2c>
 800d70e:	9b03      	ldr	r3, [sp, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	db04      	blt.n	800d71e <_dtoa_r+0xa76>
 800d714:	9906      	ldr	r1, [sp, #24]
 800d716:	430b      	orrs	r3, r1
 800d718:	9904      	ldr	r1, [sp, #16]
 800d71a:	430b      	orrs	r3, r1
 800d71c:	d122      	bne.n	800d764 <_dtoa_r+0xabc>
 800d71e:	2a00      	cmp	r2, #0
 800d720:	ddee      	ble.n	800d700 <_dtoa_r+0xa58>
 800d722:	ee18 1a10 	vmov	r1, s16
 800d726:	2201      	movs	r2, #1
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fad7 	bl	800dcdc <__lshift>
 800d72e:	4631      	mov	r1, r6
 800d730:	ee08 0a10 	vmov	s16, r0
 800d734:	f000 fb42 	bl	800ddbc <__mcmp>
 800d738:	2800      	cmp	r0, #0
 800d73a:	dc03      	bgt.n	800d744 <_dtoa_r+0xa9c>
 800d73c:	d1e0      	bne.n	800d700 <_dtoa_r+0xa58>
 800d73e:	f01a 0f01 	tst.w	sl, #1
 800d742:	d0dd      	beq.n	800d700 <_dtoa_r+0xa58>
 800d744:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d748:	d1d7      	bne.n	800d6fa <_dtoa_r+0xa52>
 800d74a:	2339      	movs	r3, #57	; 0x39
 800d74c:	f88b 3000 	strb.w	r3, [fp]
 800d750:	462b      	mov	r3, r5
 800d752:	461d      	mov	r5, r3
 800d754:	3b01      	subs	r3, #1
 800d756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d75a:	2a39      	cmp	r2, #57	; 0x39
 800d75c:	d071      	beq.n	800d842 <_dtoa_r+0xb9a>
 800d75e:	3201      	adds	r2, #1
 800d760:	701a      	strb	r2, [r3, #0]
 800d762:	e746      	b.n	800d5f2 <_dtoa_r+0x94a>
 800d764:	2a00      	cmp	r2, #0
 800d766:	dd07      	ble.n	800d778 <_dtoa_r+0xad0>
 800d768:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d76c:	d0ed      	beq.n	800d74a <_dtoa_r+0xaa2>
 800d76e:	f10a 0301 	add.w	r3, sl, #1
 800d772:	f88b 3000 	strb.w	r3, [fp]
 800d776:	e73c      	b.n	800d5f2 <_dtoa_r+0x94a>
 800d778:	9b05      	ldr	r3, [sp, #20]
 800d77a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d77e:	4599      	cmp	r9, r3
 800d780:	d047      	beq.n	800d812 <_dtoa_r+0xb6a>
 800d782:	ee18 1a10 	vmov	r1, s16
 800d786:	2300      	movs	r3, #0
 800d788:	220a      	movs	r2, #10
 800d78a:	4620      	mov	r0, r4
 800d78c:	f000 f8f6 	bl	800d97c <__multadd>
 800d790:	45b8      	cmp	r8, r7
 800d792:	ee08 0a10 	vmov	s16, r0
 800d796:	f04f 0300 	mov.w	r3, #0
 800d79a:	f04f 020a 	mov.w	r2, #10
 800d79e:	4641      	mov	r1, r8
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	d106      	bne.n	800d7b2 <_dtoa_r+0xb0a>
 800d7a4:	f000 f8ea 	bl	800d97c <__multadd>
 800d7a8:	4680      	mov	r8, r0
 800d7aa:	4607      	mov	r7, r0
 800d7ac:	f109 0901 	add.w	r9, r9, #1
 800d7b0:	e772      	b.n	800d698 <_dtoa_r+0x9f0>
 800d7b2:	f000 f8e3 	bl	800d97c <__multadd>
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	220a      	movs	r2, #10
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f000 f8dc 	bl	800d97c <__multadd>
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	e7f1      	b.n	800d7ac <_dtoa_r+0xb04>
 800d7c8:	9b03      	ldr	r3, [sp, #12]
 800d7ca:	9302      	str	r3, [sp, #8]
 800d7cc:	9d01      	ldr	r5, [sp, #4]
 800d7ce:	ee18 0a10 	vmov	r0, s16
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	f7ff f9dc 	bl	800cb90 <quorem>
 800d7d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d7dc:	9b01      	ldr	r3, [sp, #4]
 800d7de:	f805 ab01 	strb.w	sl, [r5], #1
 800d7e2:	1aea      	subs	r2, r5, r3
 800d7e4:	9b02      	ldr	r3, [sp, #8]
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	dd09      	ble.n	800d7fe <_dtoa_r+0xb56>
 800d7ea:	ee18 1a10 	vmov	r1, s16
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	220a      	movs	r2, #10
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f000 f8c2 	bl	800d97c <__multadd>
 800d7f8:	ee08 0a10 	vmov	s16, r0
 800d7fc:	e7e7      	b.n	800d7ce <_dtoa_r+0xb26>
 800d7fe:	9b02      	ldr	r3, [sp, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	bfc8      	it	gt
 800d804:	461d      	movgt	r5, r3
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	bfd8      	it	le
 800d80a:	2501      	movle	r5, #1
 800d80c:	441d      	add	r5, r3
 800d80e:	f04f 0800 	mov.w	r8, #0
 800d812:	ee18 1a10 	vmov	r1, s16
 800d816:	2201      	movs	r2, #1
 800d818:	4620      	mov	r0, r4
 800d81a:	f000 fa5f 	bl	800dcdc <__lshift>
 800d81e:	4631      	mov	r1, r6
 800d820:	ee08 0a10 	vmov	s16, r0
 800d824:	f000 faca 	bl	800ddbc <__mcmp>
 800d828:	2800      	cmp	r0, #0
 800d82a:	dc91      	bgt.n	800d750 <_dtoa_r+0xaa8>
 800d82c:	d102      	bne.n	800d834 <_dtoa_r+0xb8c>
 800d82e:	f01a 0f01 	tst.w	sl, #1
 800d832:	d18d      	bne.n	800d750 <_dtoa_r+0xaa8>
 800d834:	462b      	mov	r3, r5
 800d836:	461d      	mov	r5, r3
 800d838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d83c:	2a30      	cmp	r2, #48	; 0x30
 800d83e:	d0fa      	beq.n	800d836 <_dtoa_r+0xb8e>
 800d840:	e6d7      	b.n	800d5f2 <_dtoa_r+0x94a>
 800d842:	9a01      	ldr	r2, [sp, #4]
 800d844:	429a      	cmp	r2, r3
 800d846:	d184      	bne.n	800d752 <_dtoa_r+0xaaa>
 800d848:	9b00      	ldr	r3, [sp, #0]
 800d84a:	3301      	adds	r3, #1
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	2331      	movs	r3, #49	; 0x31
 800d850:	7013      	strb	r3, [r2, #0]
 800d852:	e6ce      	b.n	800d5f2 <_dtoa_r+0x94a>
 800d854:	4b09      	ldr	r3, [pc, #36]	; (800d87c <_dtoa_r+0xbd4>)
 800d856:	f7ff ba95 	b.w	800cd84 <_dtoa_r+0xdc>
 800d85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f47f aa6e 	bne.w	800cd3e <_dtoa_r+0x96>
 800d862:	4b07      	ldr	r3, [pc, #28]	; (800d880 <_dtoa_r+0xbd8>)
 800d864:	f7ff ba8e 	b.w	800cd84 <_dtoa_r+0xdc>
 800d868:	9b02      	ldr	r3, [sp, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	dcae      	bgt.n	800d7cc <_dtoa_r+0xb24>
 800d86e:	9b06      	ldr	r3, [sp, #24]
 800d870:	2b02      	cmp	r3, #2
 800d872:	f73f aea8 	bgt.w	800d5c6 <_dtoa_r+0x91e>
 800d876:	e7a9      	b.n	800d7cc <_dtoa_r+0xb24>
 800d878:	0800ffa3 	.word	0x0800ffa3
 800d87c:	0800ff00 	.word	0x0800ff00
 800d880:	0800ff24 	.word	0x0800ff24

0800d884 <_localeconv_r>:
 800d884:	4800      	ldr	r0, [pc, #0]	; (800d888 <_localeconv_r+0x4>)
 800d886:	4770      	bx	lr
 800d888:	20000180 	.word	0x20000180

0800d88c <malloc>:
 800d88c:	4b02      	ldr	r3, [pc, #8]	; (800d898 <malloc+0xc>)
 800d88e:	4601      	mov	r1, r0
 800d890:	6818      	ldr	r0, [r3, #0]
 800d892:	f000 bc17 	b.w	800e0c4 <_malloc_r>
 800d896:	bf00      	nop
 800d898:	2000002c 	.word	0x2000002c

0800d89c <memcpy>:
 800d89c:	440a      	add	r2, r1
 800d89e:	4291      	cmp	r1, r2
 800d8a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8a4:	d100      	bne.n	800d8a8 <memcpy+0xc>
 800d8a6:	4770      	bx	lr
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8b2:	4291      	cmp	r1, r2
 800d8b4:	d1f9      	bne.n	800d8aa <memcpy+0xe>
 800d8b6:	bd10      	pop	{r4, pc}

0800d8b8 <_Balloc>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8bc:	4604      	mov	r4, r0
 800d8be:	460d      	mov	r5, r1
 800d8c0:	b976      	cbnz	r6, 800d8e0 <_Balloc+0x28>
 800d8c2:	2010      	movs	r0, #16
 800d8c4:	f7ff ffe2 	bl	800d88c <malloc>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6260      	str	r0, [r4, #36]	; 0x24
 800d8cc:	b920      	cbnz	r0, 800d8d8 <_Balloc+0x20>
 800d8ce:	4b18      	ldr	r3, [pc, #96]	; (800d930 <_Balloc+0x78>)
 800d8d0:	4818      	ldr	r0, [pc, #96]	; (800d934 <_Balloc+0x7c>)
 800d8d2:	2166      	movs	r1, #102	; 0x66
 800d8d4:	f000 fdd6 	bl	800e484 <__assert_func>
 800d8d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8dc:	6006      	str	r6, [r0, #0]
 800d8de:	60c6      	str	r6, [r0, #12]
 800d8e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d8e2:	68f3      	ldr	r3, [r6, #12]
 800d8e4:	b183      	cbz	r3, 800d908 <_Balloc+0x50>
 800d8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8ee:	b9b8      	cbnz	r0, 800d920 <_Balloc+0x68>
 800d8f0:	2101      	movs	r1, #1
 800d8f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d8f6:	1d72      	adds	r2, r6, #5
 800d8f8:	0092      	lsls	r2, r2, #2
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 fb60 	bl	800dfc0 <_calloc_r>
 800d900:	b160      	cbz	r0, 800d91c <_Balloc+0x64>
 800d902:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d906:	e00e      	b.n	800d926 <_Balloc+0x6e>
 800d908:	2221      	movs	r2, #33	; 0x21
 800d90a:	2104      	movs	r1, #4
 800d90c:	4620      	mov	r0, r4
 800d90e:	f000 fb57 	bl	800dfc0 <_calloc_r>
 800d912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d914:	60f0      	str	r0, [r6, #12]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1e4      	bne.n	800d8e6 <_Balloc+0x2e>
 800d91c:	2000      	movs	r0, #0
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	6802      	ldr	r2, [r0, #0]
 800d922:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d926:	2300      	movs	r3, #0
 800d928:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d92c:	e7f7      	b.n	800d91e <_Balloc+0x66>
 800d92e:	bf00      	nop
 800d930:	0800ff31 	.word	0x0800ff31
 800d934:	0800ffb4 	.word	0x0800ffb4

0800d938 <_Bfree>:
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d93c:	4605      	mov	r5, r0
 800d93e:	460c      	mov	r4, r1
 800d940:	b976      	cbnz	r6, 800d960 <_Bfree+0x28>
 800d942:	2010      	movs	r0, #16
 800d944:	f7ff ffa2 	bl	800d88c <malloc>
 800d948:	4602      	mov	r2, r0
 800d94a:	6268      	str	r0, [r5, #36]	; 0x24
 800d94c:	b920      	cbnz	r0, 800d958 <_Bfree+0x20>
 800d94e:	4b09      	ldr	r3, [pc, #36]	; (800d974 <_Bfree+0x3c>)
 800d950:	4809      	ldr	r0, [pc, #36]	; (800d978 <_Bfree+0x40>)
 800d952:	218a      	movs	r1, #138	; 0x8a
 800d954:	f000 fd96 	bl	800e484 <__assert_func>
 800d958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d95c:	6006      	str	r6, [r0, #0]
 800d95e:	60c6      	str	r6, [r0, #12]
 800d960:	b13c      	cbz	r4, 800d972 <_Bfree+0x3a>
 800d962:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d964:	6862      	ldr	r2, [r4, #4]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d96c:	6021      	str	r1, [r4, #0]
 800d96e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d972:	bd70      	pop	{r4, r5, r6, pc}
 800d974:	0800ff31 	.word	0x0800ff31
 800d978:	0800ffb4 	.word	0x0800ffb4

0800d97c <__multadd>:
 800d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d980:	690d      	ldr	r5, [r1, #16]
 800d982:	4607      	mov	r7, r0
 800d984:	460c      	mov	r4, r1
 800d986:	461e      	mov	r6, r3
 800d988:	f101 0c14 	add.w	ip, r1, #20
 800d98c:	2000      	movs	r0, #0
 800d98e:	f8dc 3000 	ldr.w	r3, [ip]
 800d992:	b299      	uxth	r1, r3
 800d994:	fb02 6101 	mla	r1, r2, r1, r6
 800d998:	0c1e      	lsrs	r6, r3, #16
 800d99a:	0c0b      	lsrs	r3, r1, #16
 800d99c:	fb02 3306 	mla	r3, r2, r6, r3
 800d9a0:	b289      	uxth	r1, r1
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9a8:	4285      	cmp	r5, r0
 800d9aa:	f84c 1b04 	str.w	r1, [ip], #4
 800d9ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9b2:	dcec      	bgt.n	800d98e <__multadd+0x12>
 800d9b4:	b30e      	cbz	r6, 800d9fa <__multadd+0x7e>
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	42ab      	cmp	r3, r5
 800d9ba:	dc19      	bgt.n	800d9f0 <__multadd+0x74>
 800d9bc:	6861      	ldr	r1, [r4, #4]
 800d9be:	4638      	mov	r0, r7
 800d9c0:	3101      	adds	r1, #1
 800d9c2:	f7ff ff79 	bl	800d8b8 <_Balloc>
 800d9c6:	4680      	mov	r8, r0
 800d9c8:	b928      	cbnz	r0, 800d9d6 <__multadd+0x5a>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <__multadd+0x84>)
 800d9ce:	480d      	ldr	r0, [pc, #52]	; (800da04 <__multadd+0x88>)
 800d9d0:	21b5      	movs	r1, #181	; 0xb5
 800d9d2:	f000 fd57 	bl	800e484 <__assert_func>
 800d9d6:	6922      	ldr	r2, [r4, #16]
 800d9d8:	3202      	adds	r2, #2
 800d9da:	f104 010c 	add.w	r1, r4, #12
 800d9de:	0092      	lsls	r2, r2, #2
 800d9e0:	300c      	adds	r0, #12
 800d9e2:	f7ff ff5b 	bl	800d89c <memcpy>
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ffa5 	bl	800d938 <_Bfree>
 800d9ee:	4644      	mov	r4, r8
 800d9f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9f4:	3501      	adds	r5, #1
 800d9f6:	615e      	str	r6, [r3, #20]
 800d9f8:	6125      	str	r5, [r4, #16]
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da00:	0800ffa3 	.word	0x0800ffa3
 800da04:	0800ffb4 	.word	0x0800ffb4

0800da08 <__hi0bits>:
 800da08:	0c03      	lsrs	r3, r0, #16
 800da0a:	041b      	lsls	r3, r3, #16
 800da0c:	b9d3      	cbnz	r3, 800da44 <__hi0bits+0x3c>
 800da0e:	0400      	lsls	r0, r0, #16
 800da10:	2310      	movs	r3, #16
 800da12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da16:	bf04      	itt	eq
 800da18:	0200      	lsleq	r0, r0, #8
 800da1a:	3308      	addeq	r3, #8
 800da1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da20:	bf04      	itt	eq
 800da22:	0100      	lsleq	r0, r0, #4
 800da24:	3304      	addeq	r3, #4
 800da26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da2a:	bf04      	itt	eq
 800da2c:	0080      	lsleq	r0, r0, #2
 800da2e:	3302      	addeq	r3, #2
 800da30:	2800      	cmp	r0, #0
 800da32:	db05      	blt.n	800da40 <__hi0bits+0x38>
 800da34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da38:	f103 0301 	add.w	r3, r3, #1
 800da3c:	bf08      	it	eq
 800da3e:	2320      	moveq	r3, #32
 800da40:	4618      	mov	r0, r3
 800da42:	4770      	bx	lr
 800da44:	2300      	movs	r3, #0
 800da46:	e7e4      	b.n	800da12 <__hi0bits+0xa>

0800da48 <__lo0bits>:
 800da48:	6803      	ldr	r3, [r0, #0]
 800da4a:	f013 0207 	ands.w	r2, r3, #7
 800da4e:	4601      	mov	r1, r0
 800da50:	d00b      	beq.n	800da6a <__lo0bits+0x22>
 800da52:	07da      	lsls	r2, r3, #31
 800da54:	d423      	bmi.n	800da9e <__lo0bits+0x56>
 800da56:	0798      	lsls	r0, r3, #30
 800da58:	bf49      	itett	mi
 800da5a:	085b      	lsrmi	r3, r3, #1
 800da5c:	089b      	lsrpl	r3, r3, #2
 800da5e:	2001      	movmi	r0, #1
 800da60:	600b      	strmi	r3, [r1, #0]
 800da62:	bf5c      	itt	pl
 800da64:	600b      	strpl	r3, [r1, #0]
 800da66:	2002      	movpl	r0, #2
 800da68:	4770      	bx	lr
 800da6a:	b298      	uxth	r0, r3
 800da6c:	b9a8      	cbnz	r0, 800da9a <__lo0bits+0x52>
 800da6e:	0c1b      	lsrs	r3, r3, #16
 800da70:	2010      	movs	r0, #16
 800da72:	b2da      	uxtb	r2, r3
 800da74:	b90a      	cbnz	r2, 800da7a <__lo0bits+0x32>
 800da76:	3008      	adds	r0, #8
 800da78:	0a1b      	lsrs	r3, r3, #8
 800da7a:	071a      	lsls	r2, r3, #28
 800da7c:	bf04      	itt	eq
 800da7e:	091b      	lsreq	r3, r3, #4
 800da80:	3004      	addeq	r0, #4
 800da82:	079a      	lsls	r2, r3, #30
 800da84:	bf04      	itt	eq
 800da86:	089b      	lsreq	r3, r3, #2
 800da88:	3002      	addeq	r0, #2
 800da8a:	07da      	lsls	r2, r3, #31
 800da8c:	d403      	bmi.n	800da96 <__lo0bits+0x4e>
 800da8e:	085b      	lsrs	r3, r3, #1
 800da90:	f100 0001 	add.w	r0, r0, #1
 800da94:	d005      	beq.n	800daa2 <__lo0bits+0x5a>
 800da96:	600b      	str	r3, [r1, #0]
 800da98:	4770      	bx	lr
 800da9a:	4610      	mov	r0, r2
 800da9c:	e7e9      	b.n	800da72 <__lo0bits+0x2a>
 800da9e:	2000      	movs	r0, #0
 800daa0:	4770      	bx	lr
 800daa2:	2020      	movs	r0, #32
 800daa4:	4770      	bx	lr
	...

0800daa8 <__i2b>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	460c      	mov	r4, r1
 800daac:	2101      	movs	r1, #1
 800daae:	f7ff ff03 	bl	800d8b8 <_Balloc>
 800dab2:	4602      	mov	r2, r0
 800dab4:	b928      	cbnz	r0, 800dac2 <__i2b+0x1a>
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <__i2b+0x24>)
 800dab8:	4805      	ldr	r0, [pc, #20]	; (800dad0 <__i2b+0x28>)
 800daba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dabe:	f000 fce1 	bl	800e484 <__assert_func>
 800dac2:	2301      	movs	r3, #1
 800dac4:	6144      	str	r4, [r0, #20]
 800dac6:	6103      	str	r3, [r0, #16]
 800dac8:	bd10      	pop	{r4, pc}
 800daca:	bf00      	nop
 800dacc:	0800ffa3 	.word	0x0800ffa3
 800dad0:	0800ffb4 	.word	0x0800ffb4

0800dad4 <__multiply>:
 800dad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad8:	4691      	mov	r9, r2
 800dada:	690a      	ldr	r2, [r1, #16]
 800dadc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	bfb8      	it	lt
 800dae4:	460b      	movlt	r3, r1
 800dae6:	460c      	mov	r4, r1
 800dae8:	bfbc      	itt	lt
 800daea:	464c      	movlt	r4, r9
 800daec:	4699      	movlt	r9, r3
 800daee:	6927      	ldr	r7, [r4, #16]
 800daf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800daf4:	68a3      	ldr	r3, [r4, #8]
 800daf6:	6861      	ldr	r1, [r4, #4]
 800daf8:	eb07 060a 	add.w	r6, r7, sl
 800dafc:	42b3      	cmp	r3, r6
 800dafe:	b085      	sub	sp, #20
 800db00:	bfb8      	it	lt
 800db02:	3101      	addlt	r1, #1
 800db04:	f7ff fed8 	bl	800d8b8 <_Balloc>
 800db08:	b930      	cbnz	r0, 800db18 <__multiply+0x44>
 800db0a:	4602      	mov	r2, r0
 800db0c:	4b44      	ldr	r3, [pc, #272]	; (800dc20 <__multiply+0x14c>)
 800db0e:	4845      	ldr	r0, [pc, #276]	; (800dc24 <__multiply+0x150>)
 800db10:	f240 115d 	movw	r1, #349	; 0x15d
 800db14:	f000 fcb6 	bl	800e484 <__assert_func>
 800db18:	f100 0514 	add.w	r5, r0, #20
 800db1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db20:	462b      	mov	r3, r5
 800db22:	2200      	movs	r2, #0
 800db24:	4543      	cmp	r3, r8
 800db26:	d321      	bcc.n	800db6c <__multiply+0x98>
 800db28:	f104 0314 	add.w	r3, r4, #20
 800db2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db30:	f109 0314 	add.w	r3, r9, #20
 800db34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db38:	9202      	str	r2, [sp, #8]
 800db3a:	1b3a      	subs	r2, r7, r4
 800db3c:	3a15      	subs	r2, #21
 800db3e:	f022 0203 	bic.w	r2, r2, #3
 800db42:	3204      	adds	r2, #4
 800db44:	f104 0115 	add.w	r1, r4, #21
 800db48:	428f      	cmp	r7, r1
 800db4a:	bf38      	it	cc
 800db4c:	2204      	movcc	r2, #4
 800db4e:	9201      	str	r2, [sp, #4]
 800db50:	9a02      	ldr	r2, [sp, #8]
 800db52:	9303      	str	r3, [sp, #12]
 800db54:	429a      	cmp	r2, r3
 800db56:	d80c      	bhi.n	800db72 <__multiply+0x9e>
 800db58:	2e00      	cmp	r6, #0
 800db5a:	dd03      	ble.n	800db64 <__multiply+0x90>
 800db5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db60:	2b00      	cmp	r3, #0
 800db62:	d05a      	beq.n	800dc1a <__multiply+0x146>
 800db64:	6106      	str	r6, [r0, #16]
 800db66:	b005      	add	sp, #20
 800db68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6c:	f843 2b04 	str.w	r2, [r3], #4
 800db70:	e7d8      	b.n	800db24 <__multiply+0x50>
 800db72:	f8b3 a000 	ldrh.w	sl, [r3]
 800db76:	f1ba 0f00 	cmp.w	sl, #0
 800db7a:	d024      	beq.n	800dbc6 <__multiply+0xf2>
 800db7c:	f104 0e14 	add.w	lr, r4, #20
 800db80:	46a9      	mov	r9, r5
 800db82:	f04f 0c00 	mov.w	ip, #0
 800db86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db8a:	f8d9 1000 	ldr.w	r1, [r9]
 800db8e:	fa1f fb82 	uxth.w	fp, r2
 800db92:	b289      	uxth	r1, r1
 800db94:	fb0a 110b 	mla	r1, sl, fp, r1
 800db98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db9c:	f8d9 2000 	ldr.w	r2, [r9]
 800dba0:	4461      	add	r1, ip
 800dba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dba6:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbae:	b289      	uxth	r1, r1
 800dbb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbb4:	4577      	cmp	r7, lr
 800dbb6:	f849 1b04 	str.w	r1, [r9], #4
 800dbba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbbe:	d8e2      	bhi.n	800db86 <__multiply+0xb2>
 800dbc0:	9a01      	ldr	r2, [sp, #4]
 800dbc2:	f845 c002 	str.w	ip, [r5, r2]
 800dbc6:	9a03      	ldr	r2, [sp, #12]
 800dbc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	f1b9 0f00 	cmp.w	r9, #0
 800dbd2:	d020      	beq.n	800dc16 <__multiply+0x142>
 800dbd4:	6829      	ldr	r1, [r5, #0]
 800dbd6:	f104 0c14 	add.w	ip, r4, #20
 800dbda:	46ae      	mov	lr, r5
 800dbdc:	f04f 0a00 	mov.w	sl, #0
 800dbe0:	f8bc b000 	ldrh.w	fp, [ip]
 800dbe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dbe8:	fb09 220b 	mla	r2, r9, fp, r2
 800dbec:	4492      	add	sl, r2
 800dbee:	b289      	uxth	r1, r1
 800dbf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dbf4:	f84e 1b04 	str.w	r1, [lr], #4
 800dbf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dbfc:	f8be 1000 	ldrh.w	r1, [lr]
 800dc00:	0c12      	lsrs	r2, r2, #16
 800dc02:	fb09 1102 	mla	r1, r9, r2, r1
 800dc06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dc0a:	4567      	cmp	r7, ip
 800dc0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc10:	d8e6      	bhi.n	800dbe0 <__multiply+0x10c>
 800dc12:	9a01      	ldr	r2, [sp, #4]
 800dc14:	50a9      	str	r1, [r5, r2]
 800dc16:	3504      	adds	r5, #4
 800dc18:	e79a      	b.n	800db50 <__multiply+0x7c>
 800dc1a:	3e01      	subs	r6, #1
 800dc1c:	e79c      	b.n	800db58 <__multiply+0x84>
 800dc1e:	bf00      	nop
 800dc20:	0800ffa3 	.word	0x0800ffa3
 800dc24:	0800ffb4 	.word	0x0800ffb4

0800dc28 <__pow5mult>:
 800dc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc2c:	4615      	mov	r5, r2
 800dc2e:	f012 0203 	ands.w	r2, r2, #3
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	d007      	beq.n	800dc48 <__pow5mult+0x20>
 800dc38:	4c25      	ldr	r4, [pc, #148]	; (800dcd0 <__pow5mult+0xa8>)
 800dc3a:	3a01      	subs	r2, #1
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc42:	f7ff fe9b 	bl	800d97c <__multadd>
 800dc46:	4607      	mov	r7, r0
 800dc48:	10ad      	asrs	r5, r5, #2
 800dc4a:	d03d      	beq.n	800dcc8 <__pow5mult+0xa0>
 800dc4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc4e:	b97c      	cbnz	r4, 800dc70 <__pow5mult+0x48>
 800dc50:	2010      	movs	r0, #16
 800dc52:	f7ff fe1b 	bl	800d88c <malloc>
 800dc56:	4602      	mov	r2, r0
 800dc58:	6270      	str	r0, [r6, #36]	; 0x24
 800dc5a:	b928      	cbnz	r0, 800dc68 <__pow5mult+0x40>
 800dc5c:	4b1d      	ldr	r3, [pc, #116]	; (800dcd4 <__pow5mult+0xac>)
 800dc5e:	481e      	ldr	r0, [pc, #120]	; (800dcd8 <__pow5mult+0xb0>)
 800dc60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc64:	f000 fc0e 	bl	800e484 <__assert_func>
 800dc68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc6c:	6004      	str	r4, [r0, #0]
 800dc6e:	60c4      	str	r4, [r0, #12]
 800dc70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc78:	b94c      	cbnz	r4, 800dc8e <__pow5mult+0x66>
 800dc7a:	f240 2171 	movw	r1, #625	; 0x271
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f7ff ff12 	bl	800daa8 <__i2b>
 800dc84:	2300      	movs	r3, #0
 800dc86:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	6003      	str	r3, [r0, #0]
 800dc8e:	f04f 0900 	mov.w	r9, #0
 800dc92:	07eb      	lsls	r3, r5, #31
 800dc94:	d50a      	bpl.n	800dcac <__pow5mult+0x84>
 800dc96:	4639      	mov	r1, r7
 800dc98:	4622      	mov	r2, r4
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f7ff ff1a 	bl	800dad4 <__multiply>
 800dca0:	4639      	mov	r1, r7
 800dca2:	4680      	mov	r8, r0
 800dca4:	4630      	mov	r0, r6
 800dca6:	f7ff fe47 	bl	800d938 <_Bfree>
 800dcaa:	4647      	mov	r7, r8
 800dcac:	106d      	asrs	r5, r5, #1
 800dcae:	d00b      	beq.n	800dcc8 <__pow5mult+0xa0>
 800dcb0:	6820      	ldr	r0, [r4, #0]
 800dcb2:	b938      	cbnz	r0, 800dcc4 <__pow5mult+0x9c>
 800dcb4:	4622      	mov	r2, r4
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7ff ff0b 	bl	800dad4 <__multiply>
 800dcbe:	6020      	str	r0, [r4, #0]
 800dcc0:	f8c0 9000 	str.w	r9, [r0]
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	e7e4      	b.n	800dc92 <__pow5mult+0x6a>
 800dcc8:	4638      	mov	r0, r7
 800dcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcce:	bf00      	nop
 800dcd0:	08010100 	.word	0x08010100
 800dcd4:	0800ff31 	.word	0x0800ff31
 800dcd8:	0800ffb4 	.word	0x0800ffb4

0800dcdc <__lshift>:
 800dcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce0:	460c      	mov	r4, r1
 800dce2:	6849      	ldr	r1, [r1, #4]
 800dce4:	6923      	ldr	r3, [r4, #16]
 800dce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcea:	68a3      	ldr	r3, [r4, #8]
 800dcec:	4607      	mov	r7, r0
 800dcee:	4691      	mov	r9, r2
 800dcf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcf4:	f108 0601 	add.w	r6, r8, #1
 800dcf8:	42b3      	cmp	r3, r6
 800dcfa:	db0b      	blt.n	800dd14 <__lshift+0x38>
 800dcfc:	4638      	mov	r0, r7
 800dcfe:	f7ff fddb 	bl	800d8b8 <_Balloc>
 800dd02:	4605      	mov	r5, r0
 800dd04:	b948      	cbnz	r0, 800dd1a <__lshift+0x3e>
 800dd06:	4602      	mov	r2, r0
 800dd08:	4b2a      	ldr	r3, [pc, #168]	; (800ddb4 <__lshift+0xd8>)
 800dd0a:	482b      	ldr	r0, [pc, #172]	; (800ddb8 <__lshift+0xdc>)
 800dd0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd10:	f000 fbb8 	bl	800e484 <__assert_func>
 800dd14:	3101      	adds	r1, #1
 800dd16:	005b      	lsls	r3, r3, #1
 800dd18:	e7ee      	b.n	800dcf8 <__lshift+0x1c>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f100 0114 	add.w	r1, r0, #20
 800dd20:	f100 0210 	add.w	r2, r0, #16
 800dd24:	4618      	mov	r0, r3
 800dd26:	4553      	cmp	r3, sl
 800dd28:	db37      	blt.n	800dd9a <__lshift+0xbe>
 800dd2a:	6920      	ldr	r0, [r4, #16]
 800dd2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd30:	f104 0314 	add.w	r3, r4, #20
 800dd34:	f019 091f 	ands.w	r9, r9, #31
 800dd38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dd40:	d02f      	beq.n	800dda2 <__lshift+0xc6>
 800dd42:	f1c9 0e20 	rsb	lr, r9, #32
 800dd46:	468a      	mov	sl, r1
 800dd48:	f04f 0c00 	mov.w	ip, #0
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	fa02 f209 	lsl.w	r2, r2, r9
 800dd52:	ea42 020c 	orr.w	r2, r2, ip
 800dd56:	f84a 2b04 	str.w	r2, [sl], #4
 800dd5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd5e:	4298      	cmp	r0, r3
 800dd60:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dd64:	d8f2      	bhi.n	800dd4c <__lshift+0x70>
 800dd66:	1b03      	subs	r3, r0, r4
 800dd68:	3b15      	subs	r3, #21
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	3304      	adds	r3, #4
 800dd70:	f104 0215 	add.w	r2, r4, #21
 800dd74:	4290      	cmp	r0, r2
 800dd76:	bf38      	it	cc
 800dd78:	2304      	movcc	r3, #4
 800dd7a:	f841 c003 	str.w	ip, [r1, r3]
 800dd7e:	f1bc 0f00 	cmp.w	ip, #0
 800dd82:	d001      	beq.n	800dd88 <__lshift+0xac>
 800dd84:	f108 0602 	add.w	r6, r8, #2
 800dd88:	3e01      	subs	r6, #1
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	612e      	str	r6, [r5, #16]
 800dd8e:	4621      	mov	r1, r4
 800dd90:	f7ff fdd2 	bl	800d938 <_Bfree>
 800dd94:	4628      	mov	r0, r5
 800dd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd9e:	3301      	adds	r3, #1
 800dda0:	e7c1      	b.n	800dd26 <__lshift+0x4a>
 800dda2:	3904      	subs	r1, #4
 800dda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddac:	4298      	cmp	r0, r3
 800ddae:	d8f9      	bhi.n	800dda4 <__lshift+0xc8>
 800ddb0:	e7ea      	b.n	800dd88 <__lshift+0xac>
 800ddb2:	bf00      	nop
 800ddb4:	0800ffa3 	.word	0x0800ffa3
 800ddb8:	0800ffb4 	.word	0x0800ffb4

0800ddbc <__mcmp>:
 800ddbc:	b530      	push	{r4, r5, lr}
 800ddbe:	6902      	ldr	r2, [r0, #16]
 800ddc0:	690c      	ldr	r4, [r1, #16]
 800ddc2:	1b12      	subs	r2, r2, r4
 800ddc4:	d10e      	bne.n	800dde4 <__mcmp+0x28>
 800ddc6:	f100 0314 	add.w	r3, r0, #20
 800ddca:	3114      	adds	r1, #20
 800ddcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dddc:	42a5      	cmp	r5, r4
 800ddde:	d003      	beq.n	800dde8 <__mcmp+0x2c>
 800dde0:	d305      	bcc.n	800ddee <__mcmp+0x32>
 800dde2:	2201      	movs	r2, #1
 800dde4:	4610      	mov	r0, r2
 800dde6:	bd30      	pop	{r4, r5, pc}
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d3f3      	bcc.n	800ddd4 <__mcmp+0x18>
 800ddec:	e7fa      	b.n	800dde4 <__mcmp+0x28>
 800ddee:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf2:	e7f7      	b.n	800dde4 <__mcmp+0x28>

0800ddf4 <__mdiff>:
 800ddf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4620      	mov	r0, r4
 800de00:	4690      	mov	r8, r2
 800de02:	f7ff ffdb 	bl	800ddbc <__mcmp>
 800de06:	1e05      	subs	r5, r0, #0
 800de08:	d110      	bne.n	800de2c <__mdiff+0x38>
 800de0a:	4629      	mov	r1, r5
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7ff fd53 	bl	800d8b8 <_Balloc>
 800de12:	b930      	cbnz	r0, 800de22 <__mdiff+0x2e>
 800de14:	4b3a      	ldr	r3, [pc, #232]	; (800df00 <__mdiff+0x10c>)
 800de16:	4602      	mov	r2, r0
 800de18:	f240 2132 	movw	r1, #562	; 0x232
 800de1c:	4839      	ldr	r0, [pc, #228]	; (800df04 <__mdiff+0x110>)
 800de1e:	f000 fb31 	bl	800e484 <__assert_func>
 800de22:	2301      	movs	r3, #1
 800de24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2c:	bfa4      	itt	ge
 800de2e:	4643      	movge	r3, r8
 800de30:	46a0      	movge	r8, r4
 800de32:	4630      	mov	r0, r6
 800de34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de38:	bfa6      	itte	ge
 800de3a:	461c      	movge	r4, r3
 800de3c:	2500      	movge	r5, #0
 800de3e:	2501      	movlt	r5, #1
 800de40:	f7ff fd3a 	bl	800d8b8 <_Balloc>
 800de44:	b920      	cbnz	r0, 800de50 <__mdiff+0x5c>
 800de46:	4b2e      	ldr	r3, [pc, #184]	; (800df00 <__mdiff+0x10c>)
 800de48:	4602      	mov	r2, r0
 800de4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800de4e:	e7e5      	b.n	800de1c <__mdiff+0x28>
 800de50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de54:	6926      	ldr	r6, [r4, #16]
 800de56:	60c5      	str	r5, [r0, #12]
 800de58:	f104 0914 	add.w	r9, r4, #20
 800de5c:	f108 0514 	add.w	r5, r8, #20
 800de60:	f100 0e14 	add.w	lr, r0, #20
 800de64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de6c:	f108 0210 	add.w	r2, r8, #16
 800de70:	46f2      	mov	sl, lr
 800de72:	2100      	movs	r1, #0
 800de74:	f859 3b04 	ldr.w	r3, [r9], #4
 800de78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de7c:	fa1f f883 	uxth.w	r8, r3
 800de80:	fa11 f18b 	uxtah	r1, r1, fp
 800de84:	0c1b      	lsrs	r3, r3, #16
 800de86:	eba1 0808 	sub.w	r8, r1, r8
 800de8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de92:	fa1f f888 	uxth.w	r8, r8
 800de96:	1419      	asrs	r1, r3, #16
 800de98:	454e      	cmp	r6, r9
 800de9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de9e:	f84a 3b04 	str.w	r3, [sl], #4
 800dea2:	d8e7      	bhi.n	800de74 <__mdiff+0x80>
 800dea4:	1b33      	subs	r3, r6, r4
 800dea6:	3b15      	subs	r3, #21
 800dea8:	f023 0303 	bic.w	r3, r3, #3
 800deac:	3304      	adds	r3, #4
 800deae:	3415      	adds	r4, #21
 800deb0:	42a6      	cmp	r6, r4
 800deb2:	bf38      	it	cc
 800deb4:	2304      	movcc	r3, #4
 800deb6:	441d      	add	r5, r3
 800deb8:	4473      	add	r3, lr
 800deba:	469e      	mov	lr, r3
 800debc:	462e      	mov	r6, r5
 800debe:	4566      	cmp	r6, ip
 800dec0:	d30e      	bcc.n	800dee0 <__mdiff+0xec>
 800dec2:	f10c 0203 	add.w	r2, ip, #3
 800dec6:	1b52      	subs	r2, r2, r5
 800dec8:	f022 0203 	bic.w	r2, r2, #3
 800decc:	3d03      	subs	r5, #3
 800dece:	45ac      	cmp	ip, r5
 800ded0:	bf38      	it	cc
 800ded2:	2200      	movcc	r2, #0
 800ded4:	441a      	add	r2, r3
 800ded6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800deda:	b17b      	cbz	r3, 800defc <__mdiff+0x108>
 800dedc:	6107      	str	r7, [r0, #16]
 800dede:	e7a3      	b.n	800de28 <__mdiff+0x34>
 800dee0:	f856 8b04 	ldr.w	r8, [r6], #4
 800dee4:	fa11 f288 	uxtah	r2, r1, r8
 800dee8:	1414      	asrs	r4, r2, #16
 800deea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800deee:	b292      	uxth	r2, r2
 800def0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800def4:	f84e 2b04 	str.w	r2, [lr], #4
 800def8:	1421      	asrs	r1, r4, #16
 800defa:	e7e0      	b.n	800debe <__mdiff+0xca>
 800defc:	3f01      	subs	r7, #1
 800defe:	e7ea      	b.n	800ded6 <__mdiff+0xe2>
 800df00:	0800ffa3 	.word	0x0800ffa3
 800df04:	0800ffb4 	.word	0x0800ffb4

0800df08 <__d2b>:
 800df08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df0c:	4689      	mov	r9, r1
 800df0e:	2101      	movs	r1, #1
 800df10:	ec57 6b10 	vmov	r6, r7, d0
 800df14:	4690      	mov	r8, r2
 800df16:	f7ff fccf 	bl	800d8b8 <_Balloc>
 800df1a:	4604      	mov	r4, r0
 800df1c:	b930      	cbnz	r0, 800df2c <__d2b+0x24>
 800df1e:	4602      	mov	r2, r0
 800df20:	4b25      	ldr	r3, [pc, #148]	; (800dfb8 <__d2b+0xb0>)
 800df22:	4826      	ldr	r0, [pc, #152]	; (800dfbc <__d2b+0xb4>)
 800df24:	f240 310a 	movw	r1, #778	; 0x30a
 800df28:	f000 faac 	bl	800e484 <__assert_func>
 800df2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800df30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df34:	bb35      	cbnz	r5, 800df84 <__d2b+0x7c>
 800df36:	2e00      	cmp	r6, #0
 800df38:	9301      	str	r3, [sp, #4]
 800df3a:	d028      	beq.n	800df8e <__d2b+0x86>
 800df3c:	4668      	mov	r0, sp
 800df3e:	9600      	str	r6, [sp, #0]
 800df40:	f7ff fd82 	bl	800da48 <__lo0bits>
 800df44:	9900      	ldr	r1, [sp, #0]
 800df46:	b300      	cbz	r0, 800df8a <__d2b+0x82>
 800df48:	9a01      	ldr	r2, [sp, #4]
 800df4a:	f1c0 0320 	rsb	r3, r0, #32
 800df4e:	fa02 f303 	lsl.w	r3, r2, r3
 800df52:	430b      	orrs	r3, r1
 800df54:	40c2      	lsrs	r2, r0
 800df56:	6163      	str	r3, [r4, #20]
 800df58:	9201      	str	r2, [sp, #4]
 800df5a:	9b01      	ldr	r3, [sp, #4]
 800df5c:	61a3      	str	r3, [r4, #24]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	bf14      	ite	ne
 800df62:	2202      	movne	r2, #2
 800df64:	2201      	moveq	r2, #1
 800df66:	6122      	str	r2, [r4, #16]
 800df68:	b1d5      	cbz	r5, 800dfa0 <__d2b+0x98>
 800df6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df6e:	4405      	add	r5, r0
 800df70:	f8c9 5000 	str.w	r5, [r9]
 800df74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df78:	f8c8 0000 	str.w	r0, [r8]
 800df7c:	4620      	mov	r0, r4
 800df7e:	b003      	add	sp, #12
 800df80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df88:	e7d5      	b.n	800df36 <__d2b+0x2e>
 800df8a:	6161      	str	r1, [r4, #20]
 800df8c:	e7e5      	b.n	800df5a <__d2b+0x52>
 800df8e:	a801      	add	r0, sp, #4
 800df90:	f7ff fd5a 	bl	800da48 <__lo0bits>
 800df94:	9b01      	ldr	r3, [sp, #4]
 800df96:	6163      	str	r3, [r4, #20]
 800df98:	2201      	movs	r2, #1
 800df9a:	6122      	str	r2, [r4, #16]
 800df9c:	3020      	adds	r0, #32
 800df9e:	e7e3      	b.n	800df68 <__d2b+0x60>
 800dfa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dfa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dfa8:	f8c9 0000 	str.w	r0, [r9]
 800dfac:	6918      	ldr	r0, [r3, #16]
 800dfae:	f7ff fd2b 	bl	800da08 <__hi0bits>
 800dfb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dfb6:	e7df      	b.n	800df78 <__d2b+0x70>
 800dfb8:	0800ffa3 	.word	0x0800ffa3
 800dfbc:	0800ffb4 	.word	0x0800ffb4

0800dfc0 <_calloc_r>:
 800dfc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfc2:	fba1 2402 	umull	r2, r4, r1, r2
 800dfc6:	b94c      	cbnz	r4, 800dfdc <_calloc_r+0x1c>
 800dfc8:	4611      	mov	r1, r2
 800dfca:	9201      	str	r2, [sp, #4]
 800dfcc:	f000 f87a 	bl	800e0c4 <_malloc_r>
 800dfd0:	9a01      	ldr	r2, [sp, #4]
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	b930      	cbnz	r0, 800dfe4 <_calloc_r+0x24>
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	b003      	add	sp, #12
 800dfda:	bd30      	pop	{r4, r5, pc}
 800dfdc:	220c      	movs	r2, #12
 800dfde:	6002      	str	r2, [r0, #0]
 800dfe0:	2500      	movs	r5, #0
 800dfe2:	e7f8      	b.n	800dfd6 <_calloc_r+0x16>
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	f7fe f941 	bl	800c26c <memset>
 800dfea:	e7f4      	b.n	800dfd6 <_calloc_r+0x16>

0800dfec <_free_r>:
 800dfec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfee:	2900      	cmp	r1, #0
 800dff0:	d044      	beq.n	800e07c <_free_r+0x90>
 800dff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dff6:	9001      	str	r0, [sp, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f1a1 0404 	sub.w	r4, r1, #4
 800dffe:	bfb8      	it	lt
 800e000:	18e4      	addlt	r4, r4, r3
 800e002:	f000 fa9b 	bl	800e53c <__malloc_lock>
 800e006:	4a1e      	ldr	r2, [pc, #120]	; (800e080 <_free_r+0x94>)
 800e008:	9801      	ldr	r0, [sp, #4]
 800e00a:	6813      	ldr	r3, [r2, #0]
 800e00c:	b933      	cbnz	r3, 800e01c <_free_r+0x30>
 800e00e:	6063      	str	r3, [r4, #4]
 800e010:	6014      	str	r4, [r2, #0]
 800e012:	b003      	add	sp, #12
 800e014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e018:	f000 ba96 	b.w	800e548 <__malloc_unlock>
 800e01c:	42a3      	cmp	r3, r4
 800e01e:	d908      	bls.n	800e032 <_free_r+0x46>
 800e020:	6825      	ldr	r5, [r4, #0]
 800e022:	1961      	adds	r1, r4, r5
 800e024:	428b      	cmp	r3, r1
 800e026:	bf01      	itttt	eq
 800e028:	6819      	ldreq	r1, [r3, #0]
 800e02a:	685b      	ldreq	r3, [r3, #4]
 800e02c:	1949      	addeq	r1, r1, r5
 800e02e:	6021      	streq	r1, [r4, #0]
 800e030:	e7ed      	b.n	800e00e <_free_r+0x22>
 800e032:	461a      	mov	r2, r3
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	b10b      	cbz	r3, 800e03c <_free_r+0x50>
 800e038:	42a3      	cmp	r3, r4
 800e03a:	d9fa      	bls.n	800e032 <_free_r+0x46>
 800e03c:	6811      	ldr	r1, [r2, #0]
 800e03e:	1855      	adds	r5, r2, r1
 800e040:	42a5      	cmp	r5, r4
 800e042:	d10b      	bne.n	800e05c <_free_r+0x70>
 800e044:	6824      	ldr	r4, [r4, #0]
 800e046:	4421      	add	r1, r4
 800e048:	1854      	adds	r4, r2, r1
 800e04a:	42a3      	cmp	r3, r4
 800e04c:	6011      	str	r1, [r2, #0]
 800e04e:	d1e0      	bne.n	800e012 <_free_r+0x26>
 800e050:	681c      	ldr	r4, [r3, #0]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	6053      	str	r3, [r2, #4]
 800e056:	4421      	add	r1, r4
 800e058:	6011      	str	r1, [r2, #0]
 800e05a:	e7da      	b.n	800e012 <_free_r+0x26>
 800e05c:	d902      	bls.n	800e064 <_free_r+0x78>
 800e05e:	230c      	movs	r3, #12
 800e060:	6003      	str	r3, [r0, #0]
 800e062:	e7d6      	b.n	800e012 <_free_r+0x26>
 800e064:	6825      	ldr	r5, [r4, #0]
 800e066:	1961      	adds	r1, r4, r5
 800e068:	428b      	cmp	r3, r1
 800e06a:	bf04      	itt	eq
 800e06c:	6819      	ldreq	r1, [r3, #0]
 800e06e:	685b      	ldreq	r3, [r3, #4]
 800e070:	6063      	str	r3, [r4, #4]
 800e072:	bf04      	itt	eq
 800e074:	1949      	addeq	r1, r1, r5
 800e076:	6021      	streq	r1, [r4, #0]
 800e078:	6054      	str	r4, [r2, #4]
 800e07a:	e7ca      	b.n	800e012 <_free_r+0x26>
 800e07c:	b003      	add	sp, #12
 800e07e:	bd30      	pop	{r4, r5, pc}
 800e080:	20000784 	.word	0x20000784

0800e084 <sbrk_aligned>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	4e0e      	ldr	r6, [pc, #56]	; (800e0c0 <sbrk_aligned+0x3c>)
 800e088:	460c      	mov	r4, r1
 800e08a:	6831      	ldr	r1, [r6, #0]
 800e08c:	4605      	mov	r5, r0
 800e08e:	b911      	cbnz	r1, 800e096 <sbrk_aligned+0x12>
 800e090:	f000 f9e8 	bl	800e464 <_sbrk_r>
 800e094:	6030      	str	r0, [r6, #0]
 800e096:	4621      	mov	r1, r4
 800e098:	4628      	mov	r0, r5
 800e09a:	f000 f9e3 	bl	800e464 <_sbrk_r>
 800e09e:	1c43      	adds	r3, r0, #1
 800e0a0:	d00a      	beq.n	800e0b8 <sbrk_aligned+0x34>
 800e0a2:	1cc4      	adds	r4, r0, #3
 800e0a4:	f024 0403 	bic.w	r4, r4, #3
 800e0a8:	42a0      	cmp	r0, r4
 800e0aa:	d007      	beq.n	800e0bc <sbrk_aligned+0x38>
 800e0ac:	1a21      	subs	r1, r4, r0
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f000 f9d8 	bl	800e464 <_sbrk_r>
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d101      	bne.n	800e0bc <sbrk_aligned+0x38>
 800e0b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0bc:	4620      	mov	r0, r4
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	20000788 	.word	0x20000788

0800e0c4 <_malloc_r>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	1ccd      	adds	r5, r1, #3
 800e0ca:	f025 0503 	bic.w	r5, r5, #3
 800e0ce:	3508      	adds	r5, #8
 800e0d0:	2d0c      	cmp	r5, #12
 800e0d2:	bf38      	it	cc
 800e0d4:	250c      	movcc	r5, #12
 800e0d6:	2d00      	cmp	r5, #0
 800e0d8:	4607      	mov	r7, r0
 800e0da:	db01      	blt.n	800e0e0 <_malloc_r+0x1c>
 800e0dc:	42a9      	cmp	r1, r5
 800e0de:	d905      	bls.n	800e0ec <_malloc_r+0x28>
 800e0e0:	230c      	movs	r3, #12
 800e0e2:	603b      	str	r3, [r7, #0]
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ec:	4e2e      	ldr	r6, [pc, #184]	; (800e1a8 <_malloc_r+0xe4>)
 800e0ee:	f000 fa25 	bl	800e53c <__malloc_lock>
 800e0f2:	6833      	ldr	r3, [r6, #0]
 800e0f4:	461c      	mov	r4, r3
 800e0f6:	bb34      	cbnz	r4, 800e146 <_malloc_r+0x82>
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	f7ff ffc2 	bl	800e084 <sbrk_aligned>
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	4604      	mov	r4, r0
 800e104:	d14d      	bne.n	800e1a2 <_malloc_r+0xde>
 800e106:	6834      	ldr	r4, [r6, #0]
 800e108:	4626      	mov	r6, r4
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	d140      	bne.n	800e190 <_malloc_r+0xcc>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	4631      	mov	r1, r6
 800e112:	4638      	mov	r0, r7
 800e114:	eb04 0803 	add.w	r8, r4, r3
 800e118:	f000 f9a4 	bl	800e464 <_sbrk_r>
 800e11c:	4580      	cmp	r8, r0
 800e11e:	d13a      	bne.n	800e196 <_malloc_r+0xd2>
 800e120:	6821      	ldr	r1, [r4, #0]
 800e122:	3503      	adds	r5, #3
 800e124:	1a6d      	subs	r5, r5, r1
 800e126:	f025 0503 	bic.w	r5, r5, #3
 800e12a:	3508      	adds	r5, #8
 800e12c:	2d0c      	cmp	r5, #12
 800e12e:	bf38      	it	cc
 800e130:	250c      	movcc	r5, #12
 800e132:	4629      	mov	r1, r5
 800e134:	4638      	mov	r0, r7
 800e136:	f7ff ffa5 	bl	800e084 <sbrk_aligned>
 800e13a:	3001      	adds	r0, #1
 800e13c:	d02b      	beq.n	800e196 <_malloc_r+0xd2>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	442b      	add	r3, r5
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	e00e      	b.n	800e164 <_malloc_r+0xa0>
 800e146:	6822      	ldr	r2, [r4, #0]
 800e148:	1b52      	subs	r2, r2, r5
 800e14a:	d41e      	bmi.n	800e18a <_malloc_r+0xc6>
 800e14c:	2a0b      	cmp	r2, #11
 800e14e:	d916      	bls.n	800e17e <_malloc_r+0xba>
 800e150:	1961      	adds	r1, r4, r5
 800e152:	42a3      	cmp	r3, r4
 800e154:	6025      	str	r5, [r4, #0]
 800e156:	bf18      	it	ne
 800e158:	6059      	strne	r1, [r3, #4]
 800e15a:	6863      	ldr	r3, [r4, #4]
 800e15c:	bf08      	it	eq
 800e15e:	6031      	streq	r1, [r6, #0]
 800e160:	5162      	str	r2, [r4, r5]
 800e162:	604b      	str	r3, [r1, #4]
 800e164:	4638      	mov	r0, r7
 800e166:	f104 060b 	add.w	r6, r4, #11
 800e16a:	f000 f9ed 	bl	800e548 <__malloc_unlock>
 800e16e:	f026 0607 	bic.w	r6, r6, #7
 800e172:	1d23      	adds	r3, r4, #4
 800e174:	1af2      	subs	r2, r6, r3
 800e176:	d0b6      	beq.n	800e0e6 <_malloc_r+0x22>
 800e178:	1b9b      	subs	r3, r3, r6
 800e17a:	50a3      	str	r3, [r4, r2]
 800e17c:	e7b3      	b.n	800e0e6 <_malloc_r+0x22>
 800e17e:	6862      	ldr	r2, [r4, #4]
 800e180:	42a3      	cmp	r3, r4
 800e182:	bf0c      	ite	eq
 800e184:	6032      	streq	r2, [r6, #0]
 800e186:	605a      	strne	r2, [r3, #4]
 800e188:	e7ec      	b.n	800e164 <_malloc_r+0xa0>
 800e18a:	4623      	mov	r3, r4
 800e18c:	6864      	ldr	r4, [r4, #4]
 800e18e:	e7b2      	b.n	800e0f6 <_malloc_r+0x32>
 800e190:	4634      	mov	r4, r6
 800e192:	6876      	ldr	r6, [r6, #4]
 800e194:	e7b9      	b.n	800e10a <_malloc_r+0x46>
 800e196:	230c      	movs	r3, #12
 800e198:	603b      	str	r3, [r7, #0]
 800e19a:	4638      	mov	r0, r7
 800e19c:	f000 f9d4 	bl	800e548 <__malloc_unlock>
 800e1a0:	e7a1      	b.n	800e0e6 <_malloc_r+0x22>
 800e1a2:	6025      	str	r5, [r4, #0]
 800e1a4:	e7de      	b.n	800e164 <_malloc_r+0xa0>
 800e1a6:	bf00      	nop
 800e1a8:	20000784 	.word	0x20000784

0800e1ac <__ssputs_r>:
 800e1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b0:	688e      	ldr	r6, [r1, #8]
 800e1b2:	429e      	cmp	r6, r3
 800e1b4:	4682      	mov	sl, r0
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	4690      	mov	r8, r2
 800e1ba:	461f      	mov	r7, r3
 800e1bc:	d838      	bhi.n	800e230 <__ssputs_r+0x84>
 800e1be:	898a      	ldrh	r2, [r1, #12]
 800e1c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1c4:	d032      	beq.n	800e22c <__ssputs_r+0x80>
 800e1c6:	6825      	ldr	r5, [r4, #0]
 800e1c8:	6909      	ldr	r1, [r1, #16]
 800e1ca:	eba5 0901 	sub.w	r9, r5, r1
 800e1ce:	6965      	ldr	r5, [r4, #20]
 800e1d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1d8:	3301      	adds	r3, #1
 800e1da:	444b      	add	r3, r9
 800e1dc:	106d      	asrs	r5, r5, #1
 800e1de:	429d      	cmp	r5, r3
 800e1e0:	bf38      	it	cc
 800e1e2:	461d      	movcc	r5, r3
 800e1e4:	0553      	lsls	r3, r2, #21
 800e1e6:	d531      	bpl.n	800e24c <__ssputs_r+0xa0>
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	f7ff ff6b 	bl	800e0c4 <_malloc_r>
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	b950      	cbnz	r0, 800e208 <__ssputs_r+0x5c>
 800e1f2:	230c      	movs	r3, #12
 800e1f4:	f8ca 3000 	str.w	r3, [sl]
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1fe:	81a3      	strh	r3, [r4, #12]
 800e200:	f04f 30ff 	mov.w	r0, #4294967295
 800e204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e208:	6921      	ldr	r1, [r4, #16]
 800e20a:	464a      	mov	r2, r9
 800e20c:	f7ff fb46 	bl	800d89c <memcpy>
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e21a:	81a3      	strh	r3, [r4, #12]
 800e21c:	6126      	str	r6, [r4, #16]
 800e21e:	6165      	str	r5, [r4, #20]
 800e220:	444e      	add	r6, r9
 800e222:	eba5 0509 	sub.w	r5, r5, r9
 800e226:	6026      	str	r6, [r4, #0]
 800e228:	60a5      	str	r5, [r4, #8]
 800e22a:	463e      	mov	r6, r7
 800e22c:	42be      	cmp	r6, r7
 800e22e:	d900      	bls.n	800e232 <__ssputs_r+0x86>
 800e230:	463e      	mov	r6, r7
 800e232:	6820      	ldr	r0, [r4, #0]
 800e234:	4632      	mov	r2, r6
 800e236:	4641      	mov	r1, r8
 800e238:	f000 f966 	bl	800e508 <memmove>
 800e23c:	68a3      	ldr	r3, [r4, #8]
 800e23e:	1b9b      	subs	r3, r3, r6
 800e240:	60a3      	str	r3, [r4, #8]
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	4433      	add	r3, r6
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	2000      	movs	r0, #0
 800e24a:	e7db      	b.n	800e204 <__ssputs_r+0x58>
 800e24c:	462a      	mov	r2, r5
 800e24e:	f000 f981 	bl	800e554 <_realloc_r>
 800e252:	4606      	mov	r6, r0
 800e254:	2800      	cmp	r0, #0
 800e256:	d1e1      	bne.n	800e21c <__ssputs_r+0x70>
 800e258:	6921      	ldr	r1, [r4, #16]
 800e25a:	4650      	mov	r0, sl
 800e25c:	f7ff fec6 	bl	800dfec <_free_r>
 800e260:	e7c7      	b.n	800e1f2 <__ssputs_r+0x46>
	...

0800e264 <_svfiprintf_r>:
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	4698      	mov	r8, r3
 800e26a:	898b      	ldrh	r3, [r1, #12]
 800e26c:	061b      	lsls	r3, r3, #24
 800e26e:	b09d      	sub	sp, #116	; 0x74
 800e270:	4607      	mov	r7, r0
 800e272:	460d      	mov	r5, r1
 800e274:	4614      	mov	r4, r2
 800e276:	d50e      	bpl.n	800e296 <_svfiprintf_r+0x32>
 800e278:	690b      	ldr	r3, [r1, #16]
 800e27a:	b963      	cbnz	r3, 800e296 <_svfiprintf_r+0x32>
 800e27c:	2140      	movs	r1, #64	; 0x40
 800e27e:	f7ff ff21 	bl	800e0c4 <_malloc_r>
 800e282:	6028      	str	r0, [r5, #0]
 800e284:	6128      	str	r0, [r5, #16]
 800e286:	b920      	cbnz	r0, 800e292 <_svfiprintf_r+0x2e>
 800e288:	230c      	movs	r3, #12
 800e28a:	603b      	str	r3, [r7, #0]
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295
 800e290:	e0d1      	b.n	800e436 <_svfiprintf_r+0x1d2>
 800e292:	2340      	movs	r3, #64	; 0x40
 800e294:	616b      	str	r3, [r5, #20]
 800e296:	2300      	movs	r3, #0
 800e298:	9309      	str	r3, [sp, #36]	; 0x24
 800e29a:	2320      	movs	r3, #32
 800e29c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2a4:	2330      	movs	r3, #48	; 0x30
 800e2a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e450 <_svfiprintf_r+0x1ec>
 800e2aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2ae:	f04f 0901 	mov.w	r9, #1
 800e2b2:	4623      	mov	r3, r4
 800e2b4:	469a      	mov	sl, r3
 800e2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ba:	b10a      	cbz	r2, 800e2c0 <_svfiprintf_r+0x5c>
 800e2bc:	2a25      	cmp	r2, #37	; 0x25
 800e2be:	d1f9      	bne.n	800e2b4 <_svfiprintf_r+0x50>
 800e2c0:	ebba 0b04 	subs.w	fp, sl, r4
 800e2c4:	d00b      	beq.n	800e2de <_svfiprintf_r+0x7a>
 800e2c6:	465b      	mov	r3, fp
 800e2c8:	4622      	mov	r2, r4
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	4638      	mov	r0, r7
 800e2ce:	f7ff ff6d 	bl	800e1ac <__ssputs_r>
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	f000 80aa 	beq.w	800e42c <_svfiprintf_r+0x1c8>
 800e2d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2da:	445a      	add	r2, fp
 800e2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800e2de:	f89a 3000 	ldrb.w	r3, [sl]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 80a2 	beq.w	800e42c <_svfiprintf_r+0x1c8>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2f2:	f10a 0a01 	add.w	sl, sl, #1
 800e2f6:	9304      	str	r3, [sp, #16]
 800e2f8:	9307      	str	r3, [sp, #28]
 800e2fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2fe:	931a      	str	r3, [sp, #104]	; 0x68
 800e300:	4654      	mov	r4, sl
 800e302:	2205      	movs	r2, #5
 800e304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e308:	4851      	ldr	r0, [pc, #324]	; (800e450 <_svfiprintf_r+0x1ec>)
 800e30a:	f7f1 ff91 	bl	8000230 <memchr>
 800e30e:	9a04      	ldr	r2, [sp, #16]
 800e310:	b9d8      	cbnz	r0, 800e34a <_svfiprintf_r+0xe6>
 800e312:	06d0      	lsls	r0, r2, #27
 800e314:	bf44      	itt	mi
 800e316:	2320      	movmi	r3, #32
 800e318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e31c:	0711      	lsls	r1, r2, #28
 800e31e:	bf44      	itt	mi
 800e320:	232b      	movmi	r3, #43	; 0x2b
 800e322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e326:	f89a 3000 	ldrb.w	r3, [sl]
 800e32a:	2b2a      	cmp	r3, #42	; 0x2a
 800e32c:	d015      	beq.n	800e35a <_svfiprintf_r+0xf6>
 800e32e:	9a07      	ldr	r2, [sp, #28]
 800e330:	4654      	mov	r4, sl
 800e332:	2000      	movs	r0, #0
 800e334:	f04f 0c0a 	mov.w	ip, #10
 800e338:	4621      	mov	r1, r4
 800e33a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e33e:	3b30      	subs	r3, #48	; 0x30
 800e340:	2b09      	cmp	r3, #9
 800e342:	d94e      	bls.n	800e3e2 <_svfiprintf_r+0x17e>
 800e344:	b1b0      	cbz	r0, 800e374 <_svfiprintf_r+0x110>
 800e346:	9207      	str	r2, [sp, #28]
 800e348:	e014      	b.n	800e374 <_svfiprintf_r+0x110>
 800e34a:	eba0 0308 	sub.w	r3, r0, r8
 800e34e:	fa09 f303 	lsl.w	r3, r9, r3
 800e352:	4313      	orrs	r3, r2
 800e354:	9304      	str	r3, [sp, #16]
 800e356:	46a2      	mov	sl, r4
 800e358:	e7d2      	b.n	800e300 <_svfiprintf_r+0x9c>
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	1d19      	adds	r1, r3, #4
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	9103      	str	r1, [sp, #12]
 800e362:	2b00      	cmp	r3, #0
 800e364:	bfbb      	ittet	lt
 800e366:	425b      	neglt	r3, r3
 800e368:	f042 0202 	orrlt.w	r2, r2, #2
 800e36c:	9307      	strge	r3, [sp, #28]
 800e36e:	9307      	strlt	r3, [sp, #28]
 800e370:	bfb8      	it	lt
 800e372:	9204      	strlt	r2, [sp, #16]
 800e374:	7823      	ldrb	r3, [r4, #0]
 800e376:	2b2e      	cmp	r3, #46	; 0x2e
 800e378:	d10c      	bne.n	800e394 <_svfiprintf_r+0x130>
 800e37a:	7863      	ldrb	r3, [r4, #1]
 800e37c:	2b2a      	cmp	r3, #42	; 0x2a
 800e37e:	d135      	bne.n	800e3ec <_svfiprintf_r+0x188>
 800e380:	9b03      	ldr	r3, [sp, #12]
 800e382:	1d1a      	adds	r2, r3, #4
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	9203      	str	r2, [sp, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	bfb8      	it	lt
 800e38c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e390:	3402      	adds	r4, #2
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e460 <_svfiprintf_r+0x1fc>
 800e398:	7821      	ldrb	r1, [r4, #0]
 800e39a:	2203      	movs	r2, #3
 800e39c:	4650      	mov	r0, sl
 800e39e:	f7f1 ff47 	bl	8000230 <memchr>
 800e3a2:	b140      	cbz	r0, 800e3b6 <_svfiprintf_r+0x152>
 800e3a4:	2340      	movs	r3, #64	; 0x40
 800e3a6:	eba0 000a 	sub.w	r0, r0, sl
 800e3aa:	fa03 f000 	lsl.w	r0, r3, r0
 800e3ae:	9b04      	ldr	r3, [sp, #16]
 800e3b0:	4303      	orrs	r3, r0
 800e3b2:	3401      	adds	r4, #1
 800e3b4:	9304      	str	r3, [sp, #16]
 800e3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ba:	4826      	ldr	r0, [pc, #152]	; (800e454 <_svfiprintf_r+0x1f0>)
 800e3bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3c0:	2206      	movs	r2, #6
 800e3c2:	f7f1 ff35 	bl	8000230 <memchr>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d038      	beq.n	800e43c <_svfiprintf_r+0x1d8>
 800e3ca:	4b23      	ldr	r3, [pc, #140]	; (800e458 <_svfiprintf_r+0x1f4>)
 800e3cc:	bb1b      	cbnz	r3, 800e416 <_svfiprintf_r+0x1b2>
 800e3ce:	9b03      	ldr	r3, [sp, #12]
 800e3d0:	3307      	adds	r3, #7
 800e3d2:	f023 0307 	bic.w	r3, r3, #7
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	9303      	str	r3, [sp, #12]
 800e3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3dc:	4433      	add	r3, r6
 800e3de:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e0:	e767      	b.n	800e2b2 <_svfiprintf_r+0x4e>
 800e3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	2001      	movs	r0, #1
 800e3ea:	e7a5      	b.n	800e338 <_svfiprintf_r+0xd4>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	3401      	adds	r4, #1
 800e3f0:	9305      	str	r3, [sp, #20]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	f04f 0c0a 	mov.w	ip, #10
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3fe:	3a30      	subs	r2, #48	; 0x30
 800e400:	2a09      	cmp	r2, #9
 800e402:	d903      	bls.n	800e40c <_svfiprintf_r+0x1a8>
 800e404:	2b00      	cmp	r3, #0
 800e406:	d0c5      	beq.n	800e394 <_svfiprintf_r+0x130>
 800e408:	9105      	str	r1, [sp, #20]
 800e40a:	e7c3      	b.n	800e394 <_svfiprintf_r+0x130>
 800e40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e410:	4604      	mov	r4, r0
 800e412:	2301      	movs	r3, #1
 800e414:	e7f0      	b.n	800e3f8 <_svfiprintf_r+0x194>
 800e416:	ab03      	add	r3, sp, #12
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	462a      	mov	r2, r5
 800e41c:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <_svfiprintf_r+0x1f8>)
 800e41e:	a904      	add	r1, sp, #16
 800e420:	4638      	mov	r0, r7
 800e422:	f7fd ffcb 	bl	800c3bc <_printf_float>
 800e426:	1c42      	adds	r2, r0, #1
 800e428:	4606      	mov	r6, r0
 800e42a:	d1d6      	bne.n	800e3da <_svfiprintf_r+0x176>
 800e42c:	89ab      	ldrh	r3, [r5, #12]
 800e42e:	065b      	lsls	r3, r3, #25
 800e430:	f53f af2c 	bmi.w	800e28c <_svfiprintf_r+0x28>
 800e434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e436:	b01d      	add	sp, #116	; 0x74
 800e438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e43c:	ab03      	add	r3, sp, #12
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	462a      	mov	r2, r5
 800e442:	4b06      	ldr	r3, [pc, #24]	; (800e45c <_svfiprintf_r+0x1f8>)
 800e444:	a904      	add	r1, sp, #16
 800e446:	4638      	mov	r0, r7
 800e448:	f7fe fa5c 	bl	800c904 <_printf_i>
 800e44c:	e7eb      	b.n	800e426 <_svfiprintf_r+0x1c2>
 800e44e:	bf00      	nop
 800e450:	0801010c 	.word	0x0801010c
 800e454:	08010116 	.word	0x08010116
 800e458:	0800c3bd 	.word	0x0800c3bd
 800e45c:	0800e1ad 	.word	0x0800e1ad
 800e460:	08010112 	.word	0x08010112

0800e464 <_sbrk_r>:
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4d06      	ldr	r5, [pc, #24]	; (800e480 <_sbrk_r+0x1c>)
 800e468:	2300      	movs	r3, #0
 800e46a:	4604      	mov	r4, r0
 800e46c:	4608      	mov	r0, r1
 800e46e:	602b      	str	r3, [r5, #0]
 800e470:	f7f6 fe2c 	bl	80050cc <_sbrk>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	d102      	bne.n	800e47e <_sbrk_r+0x1a>
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	b103      	cbz	r3, 800e47e <_sbrk_r+0x1a>
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	2000078c 	.word	0x2000078c

0800e484 <__assert_func>:
 800e484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e486:	4614      	mov	r4, r2
 800e488:	461a      	mov	r2, r3
 800e48a:	4b09      	ldr	r3, [pc, #36]	; (800e4b0 <__assert_func+0x2c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4605      	mov	r5, r0
 800e490:	68d8      	ldr	r0, [r3, #12]
 800e492:	b14c      	cbz	r4, 800e4a8 <__assert_func+0x24>
 800e494:	4b07      	ldr	r3, [pc, #28]	; (800e4b4 <__assert_func+0x30>)
 800e496:	9100      	str	r1, [sp, #0]
 800e498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e49c:	4906      	ldr	r1, [pc, #24]	; (800e4b8 <__assert_func+0x34>)
 800e49e:	462b      	mov	r3, r5
 800e4a0:	f000 f80e 	bl	800e4c0 <fiprintf>
 800e4a4:	f000 faac 	bl	800ea00 <abort>
 800e4a8:	4b04      	ldr	r3, [pc, #16]	; (800e4bc <__assert_func+0x38>)
 800e4aa:	461c      	mov	r4, r3
 800e4ac:	e7f3      	b.n	800e496 <__assert_func+0x12>
 800e4ae:	bf00      	nop
 800e4b0:	2000002c 	.word	0x2000002c
 800e4b4:	0801011d 	.word	0x0801011d
 800e4b8:	0801012a 	.word	0x0801012a
 800e4bc:	08010158 	.word	0x08010158

0800e4c0 <fiprintf>:
 800e4c0:	b40e      	push	{r1, r2, r3}
 800e4c2:	b503      	push	{r0, r1, lr}
 800e4c4:	4601      	mov	r1, r0
 800e4c6:	ab03      	add	r3, sp, #12
 800e4c8:	4805      	ldr	r0, [pc, #20]	; (800e4e0 <fiprintf+0x20>)
 800e4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ce:	6800      	ldr	r0, [r0, #0]
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	f000 f897 	bl	800e604 <_vfiprintf_r>
 800e4d6:	b002      	add	sp, #8
 800e4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4dc:	b003      	add	sp, #12
 800e4de:	4770      	bx	lr
 800e4e0:	2000002c 	.word	0x2000002c

0800e4e4 <__ascii_mbtowc>:
 800e4e4:	b082      	sub	sp, #8
 800e4e6:	b901      	cbnz	r1, 800e4ea <__ascii_mbtowc+0x6>
 800e4e8:	a901      	add	r1, sp, #4
 800e4ea:	b142      	cbz	r2, 800e4fe <__ascii_mbtowc+0x1a>
 800e4ec:	b14b      	cbz	r3, 800e502 <__ascii_mbtowc+0x1e>
 800e4ee:	7813      	ldrb	r3, [r2, #0]
 800e4f0:	600b      	str	r3, [r1, #0]
 800e4f2:	7812      	ldrb	r2, [r2, #0]
 800e4f4:	1e10      	subs	r0, r2, #0
 800e4f6:	bf18      	it	ne
 800e4f8:	2001      	movne	r0, #1
 800e4fa:	b002      	add	sp, #8
 800e4fc:	4770      	bx	lr
 800e4fe:	4610      	mov	r0, r2
 800e500:	e7fb      	b.n	800e4fa <__ascii_mbtowc+0x16>
 800e502:	f06f 0001 	mvn.w	r0, #1
 800e506:	e7f8      	b.n	800e4fa <__ascii_mbtowc+0x16>

0800e508 <memmove>:
 800e508:	4288      	cmp	r0, r1
 800e50a:	b510      	push	{r4, lr}
 800e50c:	eb01 0402 	add.w	r4, r1, r2
 800e510:	d902      	bls.n	800e518 <memmove+0x10>
 800e512:	4284      	cmp	r4, r0
 800e514:	4623      	mov	r3, r4
 800e516:	d807      	bhi.n	800e528 <memmove+0x20>
 800e518:	1e43      	subs	r3, r0, #1
 800e51a:	42a1      	cmp	r1, r4
 800e51c:	d008      	beq.n	800e530 <memmove+0x28>
 800e51e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e522:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e526:	e7f8      	b.n	800e51a <memmove+0x12>
 800e528:	4402      	add	r2, r0
 800e52a:	4601      	mov	r1, r0
 800e52c:	428a      	cmp	r2, r1
 800e52e:	d100      	bne.n	800e532 <memmove+0x2a>
 800e530:	bd10      	pop	{r4, pc}
 800e532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e53a:	e7f7      	b.n	800e52c <memmove+0x24>

0800e53c <__malloc_lock>:
 800e53c:	4801      	ldr	r0, [pc, #4]	; (800e544 <__malloc_lock+0x8>)
 800e53e:	f000 bc1f 	b.w	800ed80 <__retarget_lock_acquire_recursive>
 800e542:	bf00      	nop
 800e544:	20000790 	.word	0x20000790

0800e548 <__malloc_unlock>:
 800e548:	4801      	ldr	r0, [pc, #4]	; (800e550 <__malloc_unlock+0x8>)
 800e54a:	f000 bc1a 	b.w	800ed82 <__retarget_lock_release_recursive>
 800e54e:	bf00      	nop
 800e550:	20000790 	.word	0x20000790

0800e554 <_realloc_r>:
 800e554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e558:	4680      	mov	r8, r0
 800e55a:	4614      	mov	r4, r2
 800e55c:	460e      	mov	r6, r1
 800e55e:	b921      	cbnz	r1, 800e56a <_realloc_r+0x16>
 800e560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e564:	4611      	mov	r1, r2
 800e566:	f7ff bdad 	b.w	800e0c4 <_malloc_r>
 800e56a:	b92a      	cbnz	r2, 800e578 <_realloc_r+0x24>
 800e56c:	f7ff fd3e 	bl	800dfec <_free_r>
 800e570:	4625      	mov	r5, r4
 800e572:	4628      	mov	r0, r5
 800e574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e578:	f000 fc6a 	bl	800ee50 <_malloc_usable_size_r>
 800e57c:	4284      	cmp	r4, r0
 800e57e:	4607      	mov	r7, r0
 800e580:	d802      	bhi.n	800e588 <_realloc_r+0x34>
 800e582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e586:	d812      	bhi.n	800e5ae <_realloc_r+0x5a>
 800e588:	4621      	mov	r1, r4
 800e58a:	4640      	mov	r0, r8
 800e58c:	f7ff fd9a 	bl	800e0c4 <_malloc_r>
 800e590:	4605      	mov	r5, r0
 800e592:	2800      	cmp	r0, #0
 800e594:	d0ed      	beq.n	800e572 <_realloc_r+0x1e>
 800e596:	42bc      	cmp	r4, r7
 800e598:	4622      	mov	r2, r4
 800e59a:	4631      	mov	r1, r6
 800e59c:	bf28      	it	cs
 800e59e:	463a      	movcs	r2, r7
 800e5a0:	f7ff f97c 	bl	800d89c <memcpy>
 800e5a4:	4631      	mov	r1, r6
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	f7ff fd20 	bl	800dfec <_free_r>
 800e5ac:	e7e1      	b.n	800e572 <_realloc_r+0x1e>
 800e5ae:	4635      	mov	r5, r6
 800e5b0:	e7df      	b.n	800e572 <_realloc_r+0x1e>

0800e5b2 <__sfputc_r>:
 800e5b2:	6893      	ldr	r3, [r2, #8]
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	b410      	push	{r4}
 800e5ba:	6093      	str	r3, [r2, #8]
 800e5bc:	da08      	bge.n	800e5d0 <__sfputc_r+0x1e>
 800e5be:	6994      	ldr	r4, [r2, #24]
 800e5c0:	42a3      	cmp	r3, r4
 800e5c2:	db01      	blt.n	800e5c8 <__sfputc_r+0x16>
 800e5c4:	290a      	cmp	r1, #10
 800e5c6:	d103      	bne.n	800e5d0 <__sfputc_r+0x1e>
 800e5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5cc:	f000 b94a 	b.w	800e864 <__swbuf_r>
 800e5d0:	6813      	ldr	r3, [r2, #0]
 800e5d2:	1c58      	adds	r0, r3, #1
 800e5d4:	6010      	str	r0, [r2, #0]
 800e5d6:	7019      	strb	r1, [r3, #0]
 800e5d8:	4608      	mov	r0, r1
 800e5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <__sfputs_r>:
 800e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	460f      	mov	r7, r1
 800e5e6:	4614      	mov	r4, r2
 800e5e8:	18d5      	adds	r5, r2, r3
 800e5ea:	42ac      	cmp	r4, r5
 800e5ec:	d101      	bne.n	800e5f2 <__sfputs_r+0x12>
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	e007      	b.n	800e602 <__sfputs_r+0x22>
 800e5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5f6:	463a      	mov	r2, r7
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f7ff ffda 	bl	800e5b2 <__sfputc_r>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d1f3      	bne.n	800e5ea <__sfputs_r+0xa>
 800e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e604 <_vfiprintf_r>:
 800e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	460d      	mov	r5, r1
 800e60a:	b09d      	sub	sp, #116	; 0x74
 800e60c:	4614      	mov	r4, r2
 800e60e:	4698      	mov	r8, r3
 800e610:	4606      	mov	r6, r0
 800e612:	b118      	cbz	r0, 800e61c <_vfiprintf_r+0x18>
 800e614:	6983      	ldr	r3, [r0, #24]
 800e616:	b90b      	cbnz	r3, 800e61c <_vfiprintf_r+0x18>
 800e618:	f000 fb14 	bl	800ec44 <__sinit>
 800e61c:	4b89      	ldr	r3, [pc, #548]	; (800e844 <_vfiprintf_r+0x240>)
 800e61e:	429d      	cmp	r5, r3
 800e620:	d11b      	bne.n	800e65a <_vfiprintf_r+0x56>
 800e622:	6875      	ldr	r5, [r6, #4]
 800e624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e626:	07d9      	lsls	r1, r3, #31
 800e628:	d405      	bmi.n	800e636 <_vfiprintf_r+0x32>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	059a      	lsls	r2, r3, #22
 800e62e:	d402      	bmi.n	800e636 <_vfiprintf_r+0x32>
 800e630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e632:	f000 fba5 	bl	800ed80 <__retarget_lock_acquire_recursive>
 800e636:	89ab      	ldrh	r3, [r5, #12]
 800e638:	071b      	lsls	r3, r3, #28
 800e63a:	d501      	bpl.n	800e640 <_vfiprintf_r+0x3c>
 800e63c:	692b      	ldr	r3, [r5, #16]
 800e63e:	b9eb      	cbnz	r3, 800e67c <_vfiprintf_r+0x78>
 800e640:	4629      	mov	r1, r5
 800e642:	4630      	mov	r0, r6
 800e644:	f000 f96e 	bl	800e924 <__swsetup_r>
 800e648:	b1c0      	cbz	r0, 800e67c <_vfiprintf_r+0x78>
 800e64a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e64c:	07dc      	lsls	r4, r3, #31
 800e64e:	d50e      	bpl.n	800e66e <_vfiprintf_r+0x6a>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	b01d      	add	sp, #116	; 0x74
 800e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65a:	4b7b      	ldr	r3, [pc, #492]	; (800e848 <_vfiprintf_r+0x244>)
 800e65c:	429d      	cmp	r5, r3
 800e65e:	d101      	bne.n	800e664 <_vfiprintf_r+0x60>
 800e660:	68b5      	ldr	r5, [r6, #8]
 800e662:	e7df      	b.n	800e624 <_vfiprintf_r+0x20>
 800e664:	4b79      	ldr	r3, [pc, #484]	; (800e84c <_vfiprintf_r+0x248>)
 800e666:	429d      	cmp	r5, r3
 800e668:	bf08      	it	eq
 800e66a:	68f5      	ldreq	r5, [r6, #12]
 800e66c:	e7da      	b.n	800e624 <_vfiprintf_r+0x20>
 800e66e:	89ab      	ldrh	r3, [r5, #12]
 800e670:	0598      	lsls	r0, r3, #22
 800e672:	d4ed      	bmi.n	800e650 <_vfiprintf_r+0x4c>
 800e674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e676:	f000 fb84 	bl	800ed82 <__retarget_lock_release_recursive>
 800e67a:	e7e9      	b.n	800e650 <_vfiprintf_r+0x4c>
 800e67c:	2300      	movs	r3, #0
 800e67e:	9309      	str	r3, [sp, #36]	; 0x24
 800e680:	2320      	movs	r3, #32
 800e682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e686:	f8cd 800c 	str.w	r8, [sp, #12]
 800e68a:	2330      	movs	r3, #48	; 0x30
 800e68c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e850 <_vfiprintf_r+0x24c>
 800e690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e694:	f04f 0901 	mov.w	r9, #1
 800e698:	4623      	mov	r3, r4
 800e69a:	469a      	mov	sl, r3
 800e69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6a0:	b10a      	cbz	r2, 800e6a6 <_vfiprintf_r+0xa2>
 800e6a2:	2a25      	cmp	r2, #37	; 0x25
 800e6a4:	d1f9      	bne.n	800e69a <_vfiprintf_r+0x96>
 800e6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800e6aa:	d00b      	beq.n	800e6c4 <_vfiprintf_r+0xc0>
 800e6ac:	465b      	mov	r3, fp
 800e6ae:	4622      	mov	r2, r4
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f7ff ff94 	bl	800e5e0 <__sfputs_r>
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	f000 80aa 	beq.w	800e812 <_vfiprintf_r+0x20e>
 800e6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c0:	445a      	add	r2, fp
 800e6c2:	9209      	str	r2, [sp, #36]	; 0x24
 800e6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 80a2 	beq.w	800e812 <_vfiprintf_r+0x20e>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6d8:	f10a 0a01 	add.w	sl, sl, #1
 800e6dc:	9304      	str	r3, [sp, #16]
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6e4:	931a      	str	r3, [sp, #104]	; 0x68
 800e6e6:	4654      	mov	r4, sl
 800e6e8:	2205      	movs	r2, #5
 800e6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ee:	4858      	ldr	r0, [pc, #352]	; (800e850 <_vfiprintf_r+0x24c>)
 800e6f0:	f7f1 fd9e 	bl	8000230 <memchr>
 800e6f4:	9a04      	ldr	r2, [sp, #16]
 800e6f6:	b9d8      	cbnz	r0, 800e730 <_vfiprintf_r+0x12c>
 800e6f8:	06d1      	lsls	r1, r2, #27
 800e6fa:	bf44      	itt	mi
 800e6fc:	2320      	movmi	r3, #32
 800e6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e702:	0713      	lsls	r3, r2, #28
 800e704:	bf44      	itt	mi
 800e706:	232b      	movmi	r3, #43	; 0x2b
 800e708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e70c:	f89a 3000 	ldrb.w	r3, [sl]
 800e710:	2b2a      	cmp	r3, #42	; 0x2a
 800e712:	d015      	beq.n	800e740 <_vfiprintf_r+0x13c>
 800e714:	9a07      	ldr	r2, [sp, #28]
 800e716:	4654      	mov	r4, sl
 800e718:	2000      	movs	r0, #0
 800e71a:	f04f 0c0a 	mov.w	ip, #10
 800e71e:	4621      	mov	r1, r4
 800e720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e724:	3b30      	subs	r3, #48	; 0x30
 800e726:	2b09      	cmp	r3, #9
 800e728:	d94e      	bls.n	800e7c8 <_vfiprintf_r+0x1c4>
 800e72a:	b1b0      	cbz	r0, 800e75a <_vfiprintf_r+0x156>
 800e72c:	9207      	str	r2, [sp, #28]
 800e72e:	e014      	b.n	800e75a <_vfiprintf_r+0x156>
 800e730:	eba0 0308 	sub.w	r3, r0, r8
 800e734:	fa09 f303 	lsl.w	r3, r9, r3
 800e738:	4313      	orrs	r3, r2
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	46a2      	mov	sl, r4
 800e73e:	e7d2      	b.n	800e6e6 <_vfiprintf_r+0xe2>
 800e740:	9b03      	ldr	r3, [sp, #12]
 800e742:	1d19      	adds	r1, r3, #4
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	9103      	str	r1, [sp, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	bfbb      	ittet	lt
 800e74c:	425b      	neglt	r3, r3
 800e74e:	f042 0202 	orrlt.w	r2, r2, #2
 800e752:	9307      	strge	r3, [sp, #28]
 800e754:	9307      	strlt	r3, [sp, #28]
 800e756:	bfb8      	it	lt
 800e758:	9204      	strlt	r2, [sp, #16]
 800e75a:	7823      	ldrb	r3, [r4, #0]
 800e75c:	2b2e      	cmp	r3, #46	; 0x2e
 800e75e:	d10c      	bne.n	800e77a <_vfiprintf_r+0x176>
 800e760:	7863      	ldrb	r3, [r4, #1]
 800e762:	2b2a      	cmp	r3, #42	; 0x2a
 800e764:	d135      	bne.n	800e7d2 <_vfiprintf_r+0x1ce>
 800e766:	9b03      	ldr	r3, [sp, #12]
 800e768:	1d1a      	adds	r2, r3, #4
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	9203      	str	r2, [sp, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	bfb8      	it	lt
 800e772:	f04f 33ff 	movlt.w	r3, #4294967295
 800e776:	3402      	adds	r4, #2
 800e778:	9305      	str	r3, [sp, #20]
 800e77a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e860 <_vfiprintf_r+0x25c>
 800e77e:	7821      	ldrb	r1, [r4, #0]
 800e780:	2203      	movs	r2, #3
 800e782:	4650      	mov	r0, sl
 800e784:	f7f1 fd54 	bl	8000230 <memchr>
 800e788:	b140      	cbz	r0, 800e79c <_vfiprintf_r+0x198>
 800e78a:	2340      	movs	r3, #64	; 0x40
 800e78c:	eba0 000a 	sub.w	r0, r0, sl
 800e790:	fa03 f000 	lsl.w	r0, r3, r0
 800e794:	9b04      	ldr	r3, [sp, #16]
 800e796:	4303      	orrs	r3, r0
 800e798:	3401      	adds	r4, #1
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a0:	482c      	ldr	r0, [pc, #176]	; (800e854 <_vfiprintf_r+0x250>)
 800e7a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7a6:	2206      	movs	r2, #6
 800e7a8:	f7f1 fd42 	bl	8000230 <memchr>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d03f      	beq.n	800e830 <_vfiprintf_r+0x22c>
 800e7b0:	4b29      	ldr	r3, [pc, #164]	; (800e858 <_vfiprintf_r+0x254>)
 800e7b2:	bb1b      	cbnz	r3, 800e7fc <_vfiprintf_r+0x1f8>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	3307      	adds	r3, #7
 800e7b8:	f023 0307 	bic.w	r3, r3, #7
 800e7bc:	3308      	adds	r3, #8
 800e7be:	9303      	str	r3, [sp, #12]
 800e7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c2:	443b      	add	r3, r7
 800e7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c6:	e767      	b.n	800e698 <_vfiprintf_r+0x94>
 800e7c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7cc:	460c      	mov	r4, r1
 800e7ce:	2001      	movs	r0, #1
 800e7d0:	e7a5      	b.n	800e71e <_vfiprintf_r+0x11a>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	3401      	adds	r4, #1
 800e7d6:	9305      	str	r3, [sp, #20]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f04f 0c0a 	mov.w	ip, #10
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7e4:	3a30      	subs	r2, #48	; 0x30
 800e7e6:	2a09      	cmp	r2, #9
 800e7e8:	d903      	bls.n	800e7f2 <_vfiprintf_r+0x1ee>
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0c5      	beq.n	800e77a <_vfiprintf_r+0x176>
 800e7ee:	9105      	str	r1, [sp, #20]
 800e7f0:	e7c3      	b.n	800e77a <_vfiprintf_r+0x176>
 800e7f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e7f0      	b.n	800e7de <_vfiprintf_r+0x1da>
 800e7fc:	ab03      	add	r3, sp, #12
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	462a      	mov	r2, r5
 800e802:	4b16      	ldr	r3, [pc, #88]	; (800e85c <_vfiprintf_r+0x258>)
 800e804:	a904      	add	r1, sp, #16
 800e806:	4630      	mov	r0, r6
 800e808:	f7fd fdd8 	bl	800c3bc <_printf_float>
 800e80c:	4607      	mov	r7, r0
 800e80e:	1c78      	adds	r0, r7, #1
 800e810:	d1d6      	bne.n	800e7c0 <_vfiprintf_r+0x1bc>
 800e812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e814:	07d9      	lsls	r1, r3, #31
 800e816:	d405      	bmi.n	800e824 <_vfiprintf_r+0x220>
 800e818:	89ab      	ldrh	r3, [r5, #12]
 800e81a:	059a      	lsls	r2, r3, #22
 800e81c:	d402      	bmi.n	800e824 <_vfiprintf_r+0x220>
 800e81e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e820:	f000 faaf 	bl	800ed82 <__retarget_lock_release_recursive>
 800e824:	89ab      	ldrh	r3, [r5, #12]
 800e826:	065b      	lsls	r3, r3, #25
 800e828:	f53f af12 	bmi.w	800e650 <_vfiprintf_r+0x4c>
 800e82c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e82e:	e711      	b.n	800e654 <_vfiprintf_r+0x50>
 800e830:	ab03      	add	r3, sp, #12
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	462a      	mov	r2, r5
 800e836:	4b09      	ldr	r3, [pc, #36]	; (800e85c <_vfiprintf_r+0x258>)
 800e838:	a904      	add	r1, sp, #16
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7fe f862 	bl	800c904 <_printf_i>
 800e840:	e7e4      	b.n	800e80c <_vfiprintf_r+0x208>
 800e842:	bf00      	nop
 800e844:	08010284 	.word	0x08010284
 800e848:	080102a4 	.word	0x080102a4
 800e84c:	08010264 	.word	0x08010264
 800e850:	0801010c 	.word	0x0801010c
 800e854:	08010116 	.word	0x08010116
 800e858:	0800c3bd 	.word	0x0800c3bd
 800e85c:	0800e5e1 	.word	0x0800e5e1
 800e860:	08010112 	.word	0x08010112

0800e864 <__swbuf_r>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	460e      	mov	r6, r1
 800e868:	4614      	mov	r4, r2
 800e86a:	4605      	mov	r5, r0
 800e86c:	b118      	cbz	r0, 800e876 <__swbuf_r+0x12>
 800e86e:	6983      	ldr	r3, [r0, #24]
 800e870:	b90b      	cbnz	r3, 800e876 <__swbuf_r+0x12>
 800e872:	f000 f9e7 	bl	800ec44 <__sinit>
 800e876:	4b21      	ldr	r3, [pc, #132]	; (800e8fc <__swbuf_r+0x98>)
 800e878:	429c      	cmp	r4, r3
 800e87a:	d12b      	bne.n	800e8d4 <__swbuf_r+0x70>
 800e87c:	686c      	ldr	r4, [r5, #4]
 800e87e:	69a3      	ldr	r3, [r4, #24]
 800e880:	60a3      	str	r3, [r4, #8]
 800e882:	89a3      	ldrh	r3, [r4, #12]
 800e884:	071a      	lsls	r2, r3, #28
 800e886:	d52f      	bpl.n	800e8e8 <__swbuf_r+0x84>
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	b36b      	cbz	r3, 800e8e8 <__swbuf_r+0x84>
 800e88c:	6923      	ldr	r3, [r4, #16]
 800e88e:	6820      	ldr	r0, [r4, #0]
 800e890:	1ac0      	subs	r0, r0, r3
 800e892:	6963      	ldr	r3, [r4, #20]
 800e894:	b2f6      	uxtb	r6, r6
 800e896:	4283      	cmp	r3, r0
 800e898:	4637      	mov	r7, r6
 800e89a:	dc04      	bgt.n	800e8a6 <__swbuf_r+0x42>
 800e89c:	4621      	mov	r1, r4
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f000 f93c 	bl	800eb1c <_fflush_r>
 800e8a4:	bb30      	cbnz	r0, 800e8f4 <__swbuf_r+0x90>
 800e8a6:	68a3      	ldr	r3, [r4, #8]
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	60a3      	str	r3, [r4, #8]
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	1c5a      	adds	r2, r3, #1
 800e8b0:	6022      	str	r2, [r4, #0]
 800e8b2:	701e      	strb	r6, [r3, #0]
 800e8b4:	6963      	ldr	r3, [r4, #20]
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	4283      	cmp	r3, r0
 800e8ba:	d004      	beq.n	800e8c6 <__swbuf_r+0x62>
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	07db      	lsls	r3, r3, #31
 800e8c0:	d506      	bpl.n	800e8d0 <__swbuf_r+0x6c>
 800e8c2:	2e0a      	cmp	r6, #10
 800e8c4:	d104      	bne.n	800e8d0 <__swbuf_r+0x6c>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 f927 	bl	800eb1c <_fflush_r>
 800e8ce:	b988      	cbnz	r0, 800e8f4 <__swbuf_r+0x90>
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d4:	4b0a      	ldr	r3, [pc, #40]	; (800e900 <__swbuf_r+0x9c>)
 800e8d6:	429c      	cmp	r4, r3
 800e8d8:	d101      	bne.n	800e8de <__swbuf_r+0x7a>
 800e8da:	68ac      	ldr	r4, [r5, #8]
 800e8dc:	e7cf      	b.n	800e87e <__swbuf_r+0x1a>
 800e8de:	4b09      	ldr	r3, [pc, #36]	; (800e904 <__swbuf_r+0xa0>)
 800e8e0:	429c      	cmp	r4, r3
 800e8e2:	bf08      	it	eq
 800e8e4:	68ec      	ldreq	r4, [r5, #12]
 800e8e6:	e7ca      	b.n	800e87e <__swbuf_r+0x1a>
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f000 f81a 	bl	800e924 <__swsetup_r>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d0cb      	beq.n	800e88c <__swbuf_r+0x28>
 800e8f4:	f04f 37ff 	mov.w	r7, #4294967295
 800e8f8:	e7ea      	b.n	800e8d0 <__swbuf_r+0x6c>
 800e8fa:	bf00      	nop
 800e8fc:	08010284 	.word	0x08010284
 800e900:	080102a4 	.word	0x080102a4
 800e904:	08010264 	.word	0x08010264

0800e908 <__ascii_wctomb>:
 800e908:	b149      	cbz	r1, 800e91e <__ascii_wctomb+0x16>
 800e90a:	2aff      	cmp	r2, #255	; 0xff
 800e90c:	bf85      	ittet	hi
 800e90e:	238a      	movhi	r3, #138	; 0x8a
 800e910:	6003      	strhi	r3, [r0, #0]
 800e912:	700a      	strbls	r2, [r1, #0]
 800e914:	f04f 30ff 	movhi.w	r0, #4294967295
 800e918:	bf98      	it	ls
 800e91a:	2001      	movls	r0, #1
 800e91c:	4770      	bx	lr
 800e91e:	4608      	mov	r0, r1
 800e920:	4770      	bx	lr
	...

0800e924 <__swsetup_r>:
 800e924:	4b32      	ldr	r3, [pc, #200]	; (800e9f0 <__swsetup_r+0xcc>)
 800e926:	b570      	push	{r4, r5, r6, lr}
 800e928:	681d      	ldr	r5, [r3, #0]
 800e92a:	4606      	mov	r6, r0
 800e92c:	460c      	mov	r4, r1
 800e92e:	b125      	cbz	r5, 800e93a <__swsetup_r+0x16>
 800e930:	69ab      	ldr	r3, [r5, #24]
 800e932:	b913      	cbnz	r3, 800e93a <__swsetup_r+0x16>
 800e934:	4628      	mov	r0, r5
 800e936:	f000 f985 	bl	800ec44 <__sinit>
 800e93a:	4b2e      	ldr	r3, [pc, #184]	; (800e9f4 <__swsetup_r+0xd0>)
 800e93c:	429c      	cmp	r4, r3
 800e93e:	d10f      	bne.n	800e960 <__swsetup_r+0x3c>
 800e940:	686c      	ldr	r4, [r5, #4]
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e948:	0719      	lsls	r1, r3, #28
 800e94a:	d42c      	bmi.n	800e9a6 <__swsetup_r+0x82>
 800e94c:	06dd      	lsls	r5, r3, #27
 800e94e:	d411      	bmi.n	800e974 <__swsetup_r+0x50>
 800e950:	2309      	movs	r3, #9
 800e952:	6033      	str	r3, [r6, #0]
 800e954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	f04f 30ff 	mov.w	r0, #4294967295
 800e95e:	e03e      	b.n	800e9de <__swsetup_r+0xba>
 800e960:	4b25      	ldr	r3, [pc, #148]	; (800e9f8 <__swsetup_r+0xd4>)
 800e962:	429c      	cmp	r4, r3
 800e964:	d101      	bne.n	800e96a <__swsetup_r+0x46>
 800e966:	68ac      	ldr	r4, [r5, #8]
 800e968:	e7eb      	b.n	800e942 <__swsetup_r+0x1e>
 800e96a:	4b24      	ldr	r3, [pc, #144]	; (800e9fc <__swsetup_r+0xd8>)
 800e96c:	429c      	cmp	r4, r3
 800e96e:	bf08      	it	eq
 800e970:	68ec      	ldreq	r4, [r5, #12]
 800e972:	e7e6      	b.n	800e942 <__swsetup_r+0x1e>
 800e974:	0758      	lsls	r0, r3, #29
 800e976:	d512      	bpl.n	800e99e <__swsetup_r+0x7a>
 800e978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e97a:	b141      	cbz	r1, 800e98e <__swsetup_r+0x6a>
 800e97c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e980:	4299      	cmp	r1, r3
 800e982:	d002      	beq.n	800e98a <__swsetup_r+0x66>
 800e984:	4630      	mov	r0, r6
 800e986:	f7ff fb31 	bl	800dfec <_free_r>
 800e98a:	2300      	movs	r3, #0
 800e98c:	6363      	str	r3, [r4, #52]	; 0x34
 800e98e:	89a3      	ldrh	r3, [r4, #12]
 800e990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e994:	81a3      	strh	r3, [r4, #12]
 800e996:	2300      	movs	r3, #0
 800e998:	6063      	str	r3, [r4, #4]
 800e99a:	6923      	ldr	r3, [r4, #16]
 800e99c:	6023      	str	r3, [r4, #0]
 800e99e:	89a3      	ldrh	r3, [r4, #12]
 800e9a0:	f043 0308 	orr.w	r3, r3, #8
 800e9a4:	81a3      	strh	r3, [r4, #12]
 800e9a6:	6923      	ldr	r3, [r4, #16]
 800e9a8:	b94b      	cbnz	r3, 800e9be <__swsetup_r+0x9a>
 800e9aa:	89a3      	ldrh	r3, [r4, #12]
 800e9ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9b4:	d003      	beq.n	800e9be <__swsetup_r+0x9a>
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f000 fa09 	bl	800edd0 <__smakebuf_r>
 800e9be:	89a0      	ldrh	r0, [r4, #12]
 800e9c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9c4:	f010 0301 	ands.w	r3, r0, #1
 800e9c8:	d00a      	beq.n	800e9e0 <__swsetup_r+0xbc>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60a3      	str	r3, [r4, #8]
 800e9ce:	6963      	ldr	r3, [r4, #20]
 800e9d0:	425b      	negs	r3, r3
 800e9d2:	61a3      	str	r3, [r4, #24]
 800e9d4:	6923      	ldr	r3, [r4, #16]
 800e9d6:	b943      	cbnz	r3, 800e9ea <__swsetup_r+0xc6>
 800e9d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9dc:	d1ba      	bne.n	800e954 <__swsetup_r+0x30>
 800e9de:	bd70      	pop	{r4, r5, r6, pc}
 800e9e0:	0781      	lsls	r1, r0, #30
 800e9e2:	bf58      	it	pl
 800e9e4:	6963      	ldrpl	r3, [r4, #20]
 800e9e6:	60a3      	str	r3, [r4, #8]
 800e9e8:	e7f4      	b.n	800e9d4 <__swsetup_r+0xb0>
 800e9ea:	2000      	movs	r0, #0
 800e9ec:	e7f7      	b.n	800e9de <__swsetup_r+0xba>
 800e9ee:	bf00      	nop
 800e9f0:	2000002c 	.word	0x2000002c
 800e9f4:	08010284 	.word	0x08010284
 800e9f8:	080102a4 	.word	0x080102a4
 800e9fc:	08010264 	.word	0x08010264

0800ea00 <abort>:
 800ea00:	b508      	push	{r3, lr}
 800ea02:	2006      	movs	r0, #6
 800ea04:	f000 fa54 	bl	800eeb0 <raise>
 800ea08:	2001      	movs	r0, #1
 800ea0a:	f7f6 fae7 	bl	8004fdc <_exit>
	...

0800ea10 <__sflush_r>:
 800ea10:	898a      	ldrh	r2, [r1, #12]
 800ea12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea16:	4605      	mov	r5, r0
 800ea18:	0710      	lsls	r0, r2, #28
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	d458      	bmi.n	800ead0 <__sflush_r+0xc0>
 800ea1e:	684b      	ldr	r3, [r1, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dc05      	bgt.n	800ea30 <__sflush_r+0x20>
 800ea24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	dc02      	bgt.n	800ea30 <__sflush_r+0x20>
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea32:	2e00      	cmp	r6, #0
 800ea34:	d0f9      	beq.n	800ea2a <__sflush_r+0x1a>
 800ea36:	2300      	movs	r3, #0
 800ea38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea3c:	682f      	ldr	r7, [r5, #0]
 800ea3e:	602b      	str	r3, [r5, #0]
 800ea40:	d032      	beq.n	800eaa8 <__sflush_r+0x98>
 800ea42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	075a      	lsls	r2, r3, #29
 800ea48:	d505      	bpl.n	800ea56 <__sflush_r+0x46>
 800ea4a:	6863      	ldr	r3, [r4, #4]
 800ea4c:	1ac0      	subs	r0, r0, r3
 800ea4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea50:	b10b      	cbz	r3, 800ea56 <__sflush_r+0x46>
 800ea52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea54:	1ac0      	subs	r0, r0, r3
 800ea56:	2300      	movs	r3, #0
 800ea58:	4602      	mov	r2, r0
 800ea5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea5c:	6a21      	ldr	r1, [r4, #32]
 800ea5e:	4628      	mov	r0, r5
 800ea60:	47b0      	blx	r6
 800ea62:	1c43      	adds	r3, r0, #1
 800ea64:	89a3      	ldrh	r3, [r4, #12]
 800ea66:	d106      	bne.n	800ea76 <__sflush_r+0x66>
 800ea68:	6829      	ldr	r1, [r5, #0]
 800ea6a:	291d      	cmp	r1, #29
 800ea6c:	d82c      	bhi.n	800eac8 <__sflush_r+0xb8>
 800ea6e:	4a2a      	ldr	r2, [pc, #168]	; (800eb18 <__sflush_r+0x108>)
 800ea70:	40ca      	lsrs	r2, r1
 800ea72:	07d6      	lsls	r6, r2, #31
 800ea74:	d528      	bpl.n	800eac8 <__sflush_r+0xb8>
 800ea76:	2200      	movs	r2, #0
 800ea78:	6062      	str	r2, [r4, #4]
 800ea7a:	04d9      	lsls	r1, r3, #19
 800ea7c:	6922      	ldr	r2, [r4, #16]
 800ea7e:	6022      	str	r2, [r4, #0]
 800ea80:	d504      	bpl.n	800ea8c <__sflush_r+0x7c>
 800ea82:	1c42      	adds	r2, r0, #1
 800ea84:	d101      	bne.n	800ea8a <__sflush_r+0x7a>
 800ea86:	682b      	ldr	r3, [r5, #0]
 800ea88:	b903      	cbnz	r3, 800ea8c <__sflush_r+0x7c>
 800ea8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ea8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea8e:	602f      	str	r7, [r5, #0]
 800ea90:	2900      	cmp	r1, #0
 800ea92:	d0ca      	beq.n	800ea2a <__sflush_r+0x1a>
 800ea94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea98:	4299      	cmp	r1, r3
 800ea9a:	d002      	beq.n	800eaa2 <__sflush_r+0x92>
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f7ff faa5 	bl	800dfec <_free_r>
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	6360      	str	r0, [r4, #52]	; 0x34
 800eaa6:	e7c1      	b.n	800ea2c <__sflush_r+0x1c>
 800eaa8:	6a21      	ldr	r1, [r4, #32]
 800eaaa:	2301      	movs	r3, #1
 800eaac:	4628      	mov	r0, r5
 800eaae:	47b0      	blx	r6
 800eab0:	1c41      	adds	r1, r0, #1
 800eab2:	d1c7      	bne.n	800ea44 <__sflush_r+0x34>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0c4      	beq.n	800ea44 <__sflush_r+0x34>
 800eaba:	2b1d      	cmp	r3, #29
 800eabc:	d001      	beq.n	800eac2 <__sflush_r+0xb2>
 800eabe:	2b16      	cmp	r3, #22
 800eac0:	d101      	bne.n	800eac6 <__sflush_r+0xb6>
 800eac2:	602f      	str	r7, [r5, #0]
 800eac4:	e7b1      	b.n	800ea2a <__sflush_r+0x1a>
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eacc:	81a3      	strh	r3, [r4, #12]
 800eace:	e7ad      	b.n	800ea2c <__sflush_r+0x1c>
 800ead0:	690f      	ldr	r7, [r1, #16]
 800ead2:	2f00      	cmp	r7, #0
 800ead4:	d0a9      	beq.n	800ea2a <__sflush_r+0x1a>
 800ead6:	0793      	lsls	r3, r2, #30
 800ead8:	680e      	ldr	r6, [r1, #0]
 800eada:	bf08      	it	eq
 800eadc:	694b      	ldreq	r3, [r1, #20]
 800eade:	600f      	str	r7, [r1, #0]
 800eae0:	bf18      	it	ne
 800eae2:	2300      	movne	r3, #0
 800eae4:	eba6 0807 	sub.w	r8, r6, r7
 800eae8:	608b      	str	r3, [r1, #8]
 800eaea:	f1b8 0f00 	cmp.w	r8, #0
 800eaee:	dd9c      	ble.n	800ea2a <__sflush_r+0x1a>
 800eaf0:	6a21      	ldr	r1, [r4, #32]
 800eaf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eaf4:	4643      	mov	r3, r8
 800eaf6:	463a      	mov	r2, r7
 800eaf8:	4628      	mov	r0, r5
 800eafa:	47b0      	blx	r6
 800eafc:	2800      	cmp	r0, #0
 800eafe:	dc06      	bgt.n	800eb0e <__sflush_r+0xfe>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb06:	81a3      	strh	r3, [r4, #12]
 800eb08:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0c:	e78e      	b.n	800ea2c <__sflush_r+0x1c>
 800eb0e:	4407      	add	r7, r0
 800eb10:	eba8 0800 	sub.w	r8, r8, r0
 800eb14:	e7e9      	b.n	800eaea <__sflush_r+0xda>
 800eb16:	bf00      	nop
 800eb18:	20400001 	.word	0x20400001

0800eb1c <_fflush_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	690b      	ldr	r3, [r1, #16]
 800eb20:	4605      	mov	r5, r0
 800eb22:	460c      	mov	r4, r1
 800eb24:	b913      	cbnz	r3, 800eb2c <_fflush_r+0x10>
 800eb26:	2500      	movs	r5, #0
 800eb28:	4628      	mov	r0, r5
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}
 800eb2c:	b118      	cbz	r0, 800eb36 <_fflush_r+0x1a>
 800eb2e:	6983      	ldr	r3, [r0, #24]
 800eb30:	b90b      	cbnz	r3, 800eb36 <_fflush_r+0x1a>
 800eb32:	f000 f887 	bl	800ec44 <__sinit>
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <_fflush_r+0x6c>)
 800eb38:	429c      	cmp	r4, r3
 800eb3a:	d11b      	bne.n	800eb74 <_fflush_r+0x58>
 800eb3c:	686c      	ldr	r4, [r5, #4]
 800eb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d0ef      	beq.n	800eb26 <_fflush_r+0xa>
 800eb46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb48:	07d0      	lsls	r0, r2, #31
 800eb4a:	d404      	bmi.n	800eb56 <_fflush_r+0x3a>
 800eb4c:	0599      	lsls	r1, r3, #22
 800eb4e:	d402      	bmi.n	800eb56 <_fflush_r+0x3a>
 800eb50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb52:	f000 f915 	bl	800ed80 <__retarget_lock_acquire_recursive>
 800eb56:	4628      	mov	r0, r5
 800eb58:	4621      	mov	r1, r4
 800eb5a:	f7ff ff59 	bl	800ea10 <__sflush_r>
 800eb5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb60:	07da      	lsls	r2, r3, #31
 800eb62:	4605      	mov	r5, r0
 800eb64:	d4e0      	bmi.n	800eb28 <_fflush_r+0xc>
 800eb66:	89a3      	ldrh	r3, [r4, #12]
 800eb68:	059b      	lsls	r3, r3, #22
 800eb6a:	d4dd      	bmi.n	800eb28 <_fflush_r+0xc>
 800eb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb6e:	f000 f908 	bl	800ed82 <__retarget_lock_release_recursive>
 800eb72:	e7d9      	b.n	800eb28 <_fflush_r+0xc>
 800eb74:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <_fflush_r+0x70>)
 800eb76:	429c      	cmp	r4, r3
 800eb78:	d101      	bne.n	800eb7e <_fflush_r+0x62>
 800eb7a:	68ac      	ldr	r4, [r5, #8]
 800eb7c:	e7df      	b.n	800eb3e <_fflush_r+0x22>
 800eb7e:	4b04      	ldr	r3, [pc, #16]	; (800eb90 <_fflush_r+0x74>)
 800eb80:	429c      	cmp	r4, r3
 800eb82:	bf08      	it	eq
 800eb84:	68ec      	ldreq	r4, [r5, #12]
 800eb86:	e7da      	b.n	800eb3e <_fflush_r+0x22>
 800eb88:	08010284 	.word	0x08010284
 800eb8c:	080102a4 	.word	0x080102a4
 800eb90:	08010264 	.word	0x08010264

0800eb94 <std>:
 800eb94:	2300      	movs	r3, #0
 800eb96:	b510      	push	{r4, lr}
 800eb98:	4604      	mov	r4, r0
 800eb9a:	e9c0 3300 	strd	r3, r3, [r0]
 800eb9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eba2:	6083      	str	r3, [r0, #8]
 800eba4:	8181      	strh	r1, [r0, #12]
 800eba6:	6643      	str	r3, [r0, #100]	; 0x64
 800eba8:	81c2      	strh	r2, [r0, #14]
 800ebaa:	6183      	str	r3, [r0, #24]
 800ebac:	4619      	mov	r1, r3
 800ebae:	2208      	movs	r2, #8
 800ebb0:	305c      	adds	r0, #92	; 0x5c
 800ebb2:	f7fd fb5b 	bl	800c26c <memset>
 800ebb6:	4b05      	ldr	r3, [pc, #20]	; (800ebcc <std+0x38>)
 800ebb8:	6263      	str	r3, [r4, #36]	; 0x24
 800ebba:	4b05      	ldr	r3, [pc, #20]	; (800ebd0 <std+0x3c>)
 800ebbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebbe:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <std+0x40>)
 800ebc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <std+0x44>)
 800ebc4:	6224      	str	r4, [r4, #32]
 800ebc6:	6323      	str	r3, [r4, #48]	; 0x30
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	bf00      	nop
 800ebcc:	0800eee9 	.word	0x0800eee9
 800ebd0:	0800ef0b 	.word	0x0800ef0b
 800ebd4:	0800ef43 	.word	0x0800ef43
 800ebd8:	0800ef67 	.word	0x0800ef67

0800ebdc <_cleanup_r>:
 800ebdc:	4901      	ldr	r1, [pc, #4]	; (800ebe4 <_cleanup_r+0x8>)
 800ebde:	f000 b8af 	b.w	800ed40 <_fwalk_reent>
 800ebe2:	bf00      	nop
 800ebe4:	0800eb1d 	.word	0x0800eb1d

0800ebe8 <__sfmoreglue>:
 800ebe8:	b570      	push	{r4, r5, r6, lr}
 800ebea:	2268      	movs	r2, #104	; 0x68
 800ebec:	1e4d      	subs	r5, r1, #1
 800ebee:	4355      	muls	r5, r2
 800ebf0:	460e      	mov	r6, r1
 800ebf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ebf6:	f7ff fa65 	bl	800e0c4 <_malloc_r>
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	b140      	cbz	r0, 800ec10 <__sfmoreglue+0x28>
 800ebfe:	2100      	movs	r1, #0
 800ec00:	e9c0 1600 	strd	r1, r6, [r0]
 800ec04:	300c      	adds	r0, #12
 800ec06:	60a0      	str	r0, [r4, #8]
 800ec08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec0c:	f7fd fb2e 	bl	800c26c <memset>
 800ec10:	4620      	mov	r0, r4
 800ec12:	bd70      	pop	{r4, r5, r6, pc}

0800ec14 <__sfp_lock_acquire>:
 800ec14:	4801      	ldr	r0, [pc, #4]	; (800ec1c <__sfp_lock_acquire+0x8>)
 800ec16:	f000 b8b3 	b.w	800ed80 <__retarget_lock_acquire_recursive>
 800ec1a:	bf00      	nop
 800ec1c:	20000791 	.word	0x20000791

0800ec20 <__sfp_lock_release>:
 800ec20:	4801      	ldr	r0, [pc, #4]	; (800ec28 <__sfp_lock_release+0x8>)
 800ec22:	f000 b8ae 	b.w	800ed82 <__retarget_lock_release_recursive>
 800ec26:	bf00      	nop
 800ec28:	20000791 	.word	0x20000791

0800ec2c <__sinit_lock_acquire>:
 800ec2c:	4801      	ldr	r0, [pc, #4]	; (800ec34 <__sinit_lock_acquire+0x8>)
 800ec2e:	f000 b8a7 	b.w	800ed80 <__retarget_lock_acquire_recursive>
 800ec32:	bf00      	nop
 800ec34:	20000792 	.word	0x20000792

0800ec38 <__sinit_lock_release>:
 800ec38:	4801      	ldr	r0, [pc, #4]	; (800ec40 <__sinit_lock_release+0x8>)
 800ec3a:	f000 b8a2 	b.w	800ed82 <__retarget_lock_release_recursive>
 800ec3e:	bf00      	nop
 800ec40:	20000792 	.word	0x20000792

0800ec44 <__sinit>:
 800ec44:	b510      	push	{r4, lr}
 800ec46:	4604      	mov	r4, r0
 800ec48:	f7ff fff0 	bl	800ec2c <__sinit_lock_acquire>
 800ec4c:	69a3      	ldr	r3, [r4, #24]
 800ec4e:	b11b      	cbz	r3, 800ec58 <__sinit+0x14>
 800ec50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec54:	f7ff bff0 	b.w	800ec38 <__sinit_lock_release>
 800ec58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ec5e:	4b13      	ldr	r3, [pc, #76]	; (800ecac <__sinit+0x68>)
 800ec60:	4a13      	ldr	r2, [pc, #76]	; (800ecb0 <__sinit+0x6c>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec66:	42a3      	cmp	r3, r4
 800ec68:	bf04      	itt	eq
 800ec6a:	2301      	moveq	r3, #1
 800ec6c:	61a3      	streq	r3, [r4, #24]
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f000 f820 	bl	800ecb4 <__sfp>
 800ec74:	6060      	str	r0, [r4, #4]
 800ec76:	4620      	mov	r0, r4
 800ec78:	f000 f81c 	bl	800ecb4 <__sfp>
 800ec7c:	60a0      	str	r0, [r4, #8]
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f000 f818 	bl	800ecb4 <__sfp>
 800ec84:	2200      	movs	r2, #0
 800ec86:	60e0      	str	r0, [r4, #12]
 800ec88:	2104      	movs	r1, #4
 800ec8a:	6860      	ldr	r0, [r4, #4]
 800ec8c:	f7ff ff82 	bl	800eb94 <std>
 800ec90:	68a0      	ldr	r0, [r4, #8]
 800ec92:	2201      	movs	r2, #1
 800ec94:	2109      	movs	r1, #9
 800ec96:	f7ff ff7d 	bl	800eb94 <std>
 800ec9a:	68e0      	ldr	r0, [r4, #12]
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	2112      	movs	r1, #18
 800eca0:	f7ff ff78 	bl	800eb94 <std>
 800eca4:	2301      	movs	r3, #1
 800eca6:	61a3      	str	r3, [r4, #24]
 800eca8:	e7d2      	b.n	800ec50 <__sinit+0xc>
 800ecaa:	bf00      	nop
 800ecac:	0800feec 	.word	0x0800feec
 800ecb0:	0800ebdd 	.word	0x0800ebdd

0800ecb4 <__sfp>:
 800ecb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	f7ff ffac 	bl	800ec14 <__sfp_lock_acquire>
 800ecbc:	4b1e      	ldr	r3, [pc, #120]	; (800ed38 <__sfp+0x84>)
 800ecbe:	681e      	ldr	r6, [r3, #0]
 800ecc0:	69b3      	ldr	r3, [r6, #24]
 800ecc2:	b913      	cbnz	r3, 800ecca <__sfp+0x16>
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff ffbd 	bl	800ec44 <__sinit>
 800ecca:	3648      	adds	r6, #72	; 0x48
 800eccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	d503      	bpl.n	800ecdc <__sfp+0x28>
 800ecd4:	6833      	ldr	r3, [r6, #0]
 800ecd6:	b30b      	cbz	r3, 800ed1c <__sfp+0x68>
 800ecd8:	6836      	ldr	r6, [r6, #0]
 800ecda:	e7f7      	b.n	800eccc <__sfp+0x18>
 800ecdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ece0:	b9d5      	cbnz	r5, 800ed18 <__sfp+0x64>
 800ece2:	4b16      	ldr	r3, [pc, #88]	; (800ed3c <__sfp+0x88>)
 800ece4:	60e3      	str	r3, [r4, #12]
 800ece6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ecea:	6665      	str	r5, [r4, #100]	; 0x64
 800ecec:	f000 f847 	bl	800ed7e <__retarget_lock_init_recursive>
 800ecf0:	f7ff ff96 	bl	800ec20 <__sfp_lock_release>
 800ecf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ecf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ecfc:	6025      	str	r5, [r4, #0]
 800ecfe:	61a5      	str	r5, [r4, #24]
 800ed00:	2208      	movs	r2, #8
 800ed02:	4629      	mov	r1, r5
 800ed04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed08:	f7fd fab0 	bl	800c26c <memset>
 800ed0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed14:	4620      	mov	r0, r4
 800ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed18:	3468      	adds	r4, #104	; 0x68
 800ed1a:	e7d9      	b.n	800ecd0 <__sfp+0x1c>
 800ed1c:	2104      	movs	r1, #4
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f7ff ff62 	bl	800ebe8 <__sfmoreglue>
 800ed24:	4604      	mov	r4, r0
 800ed26:	6030      	str	r0, [r6, #0]
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d1d5      	bne.n	800ecd8 <__sfp+0x24>
 800ed2c:	f7ff ff78 	bl	800ec20 <__sfp_lock_release>
 800ed30:	230c      	movs	r3, #12
 800ed32:	603b      	str	r3, [r7, #0]
 800ed34:	e7ee      	b.n	800ed14 <__sfp+0x60>
 800ed36:	bf00      	nop
 800ed38:	0800feec 	.word	0x0800feec
 800ed3c:	ffff0001 	.word	0xffff0001

0800ed40 <_fwalk_reent>:
 800ed40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed44:	4606      	mov	r6, r0
 800ed46:	4688      	mov	r8, r1
 800ed48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed4c:	2700      	movs	r7, #0
 800ed4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed52:	f1b9 0901 	subs.w	r9, r9, #1
 800ed56:	d505      	bpl.n	800ed64 <_fwalk_reent+0x24>
 800ed58:	6824      	ldr	r4, [r4, #0]
 800ed5a:	2c00      	cmp	r4, #0
 800ed5c:	d1f7      	bne.n	800ed4e <_fwalk_reent+0xe>
 800ed5e:	4638      	mov	r0, r7
 800ed60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed64:	89ab      	ldrh	r3, [r5, #12]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d907      	bls.n	800ed7a <_fwalk_reent+0x3a>
 800ed6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	d003      	beq.n	800ed7a <_fwalk_reent+0x3a>
 800ed72:	4629      	mov	r1, r5
 800ed74:	4630      	mov	r0, r6
 800ed76:	47c0      	blx	r8
 800ed78:	4307      	orrs	r7, r0
 800ed7a:	3568      	adds	r5, #104	; 0x68
 800ed7c:	e7e9      	b.n	800ed52 <_fwalk_reent+0x12>

0800ed7e <__retarget_lock_init_recursive>:
 800ed7e:	4770      	bx	lr

0800ed80 <__retarget_lock_acquire_recursive>:
 800ed80:	4770      	bx	lr

0800ed82 <__retarget_lock_release_recursive>:
 800ed82:	4770      	bx	lr

0800ed84 <__swhatbuf_r>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	460e      	mov	r6, r1
 800ed88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed8c:	2900      	cmp	r1, #0
 800ed8e:	b096      	sub	sp, #88	; 0x58
 800ed90:	4614      	mov	r4, r2
 800ed92:	461d      	mov	r5, r3
 800ed94:	da08      	bge.n	800eda8 <__swhatbuf_r+0x24>
 800ed96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	602a      	str	r2, [r5, #0]
 800ed9e:	061a      	lsls	r2, r3, #24
 800eda0:	d410      	bmi.n	800edc4 <__swhatbuf_r+0x40>
 800eda2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eda6:	e00e      	b.n	800edc6 <__swhatbuf_r+0x42>
 800eda8:	466a      	mov	r2, sp
 800edaa:	f000 f903 	bl	800efb4 <_fstat_r>
 800edae:	2800      	cmp	r0, #0
 800edb0:	dbf1      	blt.n	800ed96 <__swhatbuf_r+0x12>
 800edb2:	9a01      	ldr	r2, [sp, #4]
 800edb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800edb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800edbc:	425a      	negs	r2, r3
 800edbe:	415a      	adcs	r2, r3
 800edc0:	602a      	str	r2, [r5, #0]
 800edc2:	e7ee      	b.n	800eda2 <__swhatbuf_r+0x1e>
 800edc4:	2340      	movs	r3, #64	; 0x40
 800edc6:	2000      	movs	r0, #0
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	b016      	add	sp, #88	; 0x58
 800edcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800edd0 <__smakebuf_r>:
 800edd0:	898b      	ldrh	r3, [r1, #12]
 800edd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edd4:	079d      	lsls	r5, r3, #30
 800edd6:	4606      	mov	r6, r0
 800edd8:	460c      	mov	r4, r1
 800edda:	d507      	bpl.n	800edec <__smakebuf_r+0x1c>
 800eddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ede0:	6023      	str	r3, [r4, #0]
 800ede2:	6123      	str	r3, [r4, #16]
 800ede4:	2301      	movs	r3, #1
 800ede6:	6163      	str	r3, [r4, #20]
 800ede8:	b002      	add	sp, #8
 800edea:	bd70      	pop	{r4, r5, r6, pc}
 800edec:	ab01      	add	r3, sp, #4
 800edee:	466a      	mov	r2, sp
 800edf0:	f7ff ffc8 	bl	800ed84 <__swhatbuf_r>
 800edf4:	9900      	ldr	r1, [sp, #0]
 800edf6:	4605      	mov	r5, r0
 800edf8:	4630      	mov	r0, r6
 800edfa:	f7ff f963 	bl	800e0c4 <_malloc_r>
 800edfe:	b948      	cbnz	r0, 800ee14 <__smakebuf_r+0x44>
 800ee00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee04:	059a      	lsls	r2, r3, #22
 800ee06:	d4ef      	bmi.n	800ede8 <__smakebuf_r+0x18>
 800ee08:	f023 0303 	bic.w	r3, r3, #3
 800ee0c:	f043 0302 	orr.w	r3, r3, #2
 800ee10:	81a3      	strh	r3, [r4, #12]
 800ee12:	e7e3      	b.n	800eddc <__smakebuf_r+0xc>
 800ee14:	4b0d      	ldr	r3, [pc, #52]	; (800ee4c <__smakebuf_r+0x7c>)
 800ee16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	6020      	str	r0, [r4, #0]
 800ee1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee20:	81a3      	strh	r3, [r4, #12]
 800ee22:	9b00      	ldr	r3, [sp, #0]
 800ee24:	6163      	str	r3, [r4, #20]
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	6120      	str	r0, [r4, #16]
 800ee2a:	b15b      	cbz	r3, 800ee44 <__smakebuf_r+0x74>
 800ee2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee30:	4630      	mov	r0, r6
 800ee32:	f000 f8d1 	bl	800efd8 <_isatty_r>
 800ee36:	b128      	cbz	r0, 800ee44 <__smakebuf_r+0x74>
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	f023 0303 	bic.w	r3, r3, #3
 800ee3e:	f043 0301 	orr.w	r3, r3, #1
 800ee42:	81a3      	strh	r3, [r4, #12]
 800ee44:	89a0      	ldrh	r0, [r4, #12]
 800ee46:	4305      	orrs	r5, r0
 800ee48:	81a5      	strh	r5, [r4, #12]
 800ee4a:	e7cd      	b.n	800ede8 <__smakebuf_r+0x18>
 800ee4c:	0800ebdd 	.word	0x0800ebdd

0800ee50 <_malloc_usable_size_r>:
 800ee50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee54:	1f18      	subs	r0, r3, #4
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	bfbc      	itt	lt
 800ee5a:	580b      	ldrlt	r3, [r1, r0]
 800ee5c:	18c0      	addlt	r0, r0, r3
 800ee5e:	4770      	bx	lr

0800ee60 <_raise_r>:
 800ee60:	291f      	cmp	r1, #31
 800ee62:	b538      	push	{r3, r4, r5, lr}
 800ee64:	4604      	mov	r4, r0
 800ee66:	460d      	mov	r5, r1
 800ee68:	d904      	bls.n	800ee74 <_raise_r+0x14>
 800ee6a:	2316      	movs	r3, #22
 800ee6c:	6003      	str	r3, [r0, #0]
 800ee6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee76:	b112      	cbz	r2, 800ee7e <_raise_r+0x1e>
 800ee78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee7c:	b94b      	cbnz	r3, 800ee92 <_raise_r+0x32>
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 f830 	bl	800eee4 <_getpid_r>
 800ee84:	462a      	mov	r2, r5
 800ee86:	4601      	mov	r1, r0
 800ee88:	4620      	mov	r0, r4
 800ee8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee8e:	f000 b817 	b.w	800eec0 <_kill_r>
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d00a      	beq.n	800eeac <_raise_r+0x4c>
 800ee96:	1c59      	adds	r1, r3, #1
 800ee98:	d103      	bne.n	800eea2 <_raise_r+0x42>
 800ee9a:	2316      	movs	r3, #22
 800ee9c:	6003      	str	r3, [r0, #0]
 800ee9e:	2001      	movs	r0, #1
 800eea0:	e7e7      	b.n	800ee72 <_raise_r+0x12>
 800eea2:	2400      	movs	r4, #0
 800eea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eea8:	4628      	mov	r0, r5
 800eeaa:	4798      	blx	r3
 800eeac:	2000      	movs	r0, #0
 800eeae:	e7e0      	b.n	800ee72 <_raise_r+0x12>

0800eeb0 <raise>:
 800eeb0:	4b02      	ldr	r3, [pc, #8]	; (800eebc <raise+0xc>)
 800eeb2:	4601      	mov	r1, r0
 800eeb4:	6818      	ldr	r0, [r3, #0]
 800eeb6:	f7ff bfd3 	b.w	800ee60 <_raise_r>
 800eeba:	bf00      	nop
 800eebc:	2000002c 	.word	0x2000002c

0800eec0 <_kill_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4d07      	ldr	r5, [pc, #28]	; (800eee0 <_kill_r+0x20>)
 800eec4:	2300      	movs	r3, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	4611      	mov	r1, r2
 800eecc:	602b      	str	r3, [r5, #0]
 800eece:	f7f6 f875 	bl	8004fbc <_kill>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	d102      	bne.n	800eedc <_kill_r+0x1c>
 800eed6:	682b      	ldr	r3, [r5, #0]
 800eed8:	b103      	cbz	r3, 800eedc <_kill_r+0x1c>
 800eeda:	6023      	str	r3, [r4, #0]
 800eedc:	bd38      	pop	{r3, r4, r5, pc}
 800eede:	bf00      	nop
 800eee0:	2000078c 	.word	0x2000078c

0800eee4 <_getpid_r>:
 800eee4:	f7f6 b862 	b.w	8004fac <_getpid>

0800eee8 <__sread>:
 800eee8:	b510      	push	{r4, lr}
 800eeea:	460c      	mov	r4, r1
 800eeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef0:	f000 f894 	bl	800f01c <_read_r>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	bfab      	itete	ge
 800eef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eefa:	89a3      	ldrhlt	r3, [r4, #12]
 800eefc:	181b      	addge	r3, r3, r0
 800eefe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef02:	bfac      	ite	ge
 800ef04:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef06:	81a3      	strhlt	r3, [r4, #12]
 800ef08:	bd10      	pop	{r4, pc}

0800ef0a <__swrite>:
 800ef0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0e:	461f      	mov	r7, r3
 800ef10:	898b      	ldrh	r3, [r1, #12]
 800ef12:	05db      	lsls	r3, r3, #23
 800ef14:	4605      	mov	r5, r0
 800ef16:	460c      	mov	r4, r1
 800ef18:	4616      	mov	r6, r2
 800ef1a:	d505      	bpl.n	800ef28 <__swrite+0x1e>
 800ef1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef20:	2302      	movs	r3, #2
 800ef22:	2200      	movs	r2, #0
 800ef24:	f000 f868 	bl	800eff8 <_lseek_r>
 800ef28:	89a3      	ldrh	r3, [r4, #12]
 800ef2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef32:	81a3      	strh	r3, [r4, #12]
 800ef34:	4632      	mov	r2, r6
 800ef36:	463b      	mov	r3, r7
 800ef38:	4628      	mov	r0, r5
 800ef3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef3e:	f000 b817 	b.w	800ef70 <_write_r>

0800ef42 <__sseek>:
 800ef42:	b510      	push	{r4, lr}
 800ef44:	460c      	mov	r4, r1
 800ef46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef4a:	f000 f855 	bl	800eff8 <_lseek_r>
 800ef4e:	1c43      	adds	r3, r0, #1
 800ef50:	89a3      	ldrh	r3, [r4, #12]
 800ef52:	bf15      	itete	ne
 800ef54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef5e:	81a3      	strheq	r3, [r4, #12]
 800ef60:	bf18      	it	ne
 800ef62:	81a3      	strhne	r3, [r4, #12]
 800ef64:	bd10      	pop	{r4, pc}

0800ef66 <__sclose>:
 800ef66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef6a:	f000 b813 	b.w	800ef94 <_close_r>
	...

0800ef70 <_write_r>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	4d07      	ldr	r5, [pc, #28]	; (800ef90 <_write_r+0x20>)
 800ef74:	4604      	mov	r4, r0
 800ef76:	4608      	mov	r0, r1
 800ef78:	4611      	mov	r1, r2
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	602a      	str	r2, [r5, #0]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f7f6 f853 	bl	800502a <_write>
 800ef84:	1c43      	adds	r3, r0, #1
 800ef86:	d102      	bne.n	800ef8e <_write_r+0x1e>
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	b103      	cbz	r3, 800ef8e <_write_r+0x1e>
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	2000078c 	.word	0x2000078c

0800ef94 <_close_r>:
 800ef94:	b538      	push	{r3, r4, r5, lr}
 800ef96:	4d06      	ldr	r5, [pc, #24]	; (800efb0 <_close_r+0x1c>)
 800ef98:	2300      	movs	r3, #0
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	4608      	mov	r0, r1
 800ef9e:	602b      	str	r3, [r5, #0]
 800efa0:	f7f6 f85f 	bl	8005062 <_close>
 800efa4:	1c43      	adds	r3, r0, #1
 800efa6:	d102      	bne.n	800efae <_close_r+0x1a>
 800efa8:	682b      	ldr	r3, [r5, #0]
 800efaa:	b103      	cbz	r3, 800efae <_close_r+0x1a>
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	2000078c 	.word	0x2000078c

0800efb4 <_fstat_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d07      	ldr	r5, [pc, #28]	; (800efd4 <_fstat_r+0x20>)
 800efb8:	2300      	movs	r3, #0
 800efba:	4604      	mov	r4, r0
 800efbc:	4608      	mov	r0, r1
 800efbe:	4611      	mov	r1, r2
 800efc0:	602b      	str	r3, [r5, #0]
 800efc2:	f7f6 f85a 	bl	800507a <_fstat>
 800efc6:	1c43      	adds	r3, r0, #1
 800efc8:	d102      	bne.n	800efd0 <_fstat_r+0x1c>
 800efca:	682b      	ldr	r3, [r5, #0]
 800efcc:	b103      	cbz	r3, 800efd0 <_fstat_r+0x1c>
 800efce:	6023      	str	r3, [r4, #0]
 800efd0:	bd38      	pop	{r3, r4, r5, pc}
 800efd2:	bf00      	nop
 800efd4:	2000078c 	.word	0x2000078c

0800efd8 <_isatty_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	4d06      	ldr	r5, [pc, #24]	; (800eff4 <_isatty_r+0x1c>)
 800efdc:	2300      	movs	r3, #0
 800efde:	4604      	mov	r4, r0
 800efe0:	4608      	mov	r0, r1
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	f7f6 f859 	bl	800509a <_isatty>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_isatty_r+0x1a>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_isatty_r+0x1a>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	2000078c 	.word	0x2000078c

0800eff8 <_lseek_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4d07      	ldr	r5, [pc, #28]	; (800f018 <_lseek_r+0x20>)
 800effc:	4604      	mov	r4, r0
 800effe:	4608      	mov	r0, r1
 800f000:	4611      	mov	r1, r2
 800f002:	2200      	movs	r2, #0
 800f004:	602a      	str	r2, [r5, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	f7f6 f852 	bl	80050b0 <_lseek>
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	d102      	bne.n	800f016 <_lseek_r+0x1e>
 800f010:	682b      	ldr	r3, [r5, #0]
 800f012:	b103      	cbz	r3, 800f016 <_lseek_r+0x1e>
 800f014:	6023      	str	r3, [r4, #0]
 800f016:	bd38      	pop	{r3, r4, r5, pc}
 800f018:	2000078c 	.word	0x2000078c

0800f01c <_read_r>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	4d07      	ldr	r5, [pc, #28]	; (800f03c <_read_r+0x20>)
 800f020:	4604      	mov	r4, r0
 800f022:	4608      	mov	r0, r1
 800f024:	4611      	mov	r1, r2
 800f026:	2200      	movs	r2, #0
 800f028:	602a      	str	r2, [r5, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	f7f5 ffe0 	bl	8004ff0 <_read>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d102      	bne.n	800f03a <_read_r+0x1e>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	b103      	cbz	r3, 800f03a <_read_r+0x1e>
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	2000078c 	.word	0x2000078c

0800f040 <cosf>:
 800f040:	ee10 3a10 	vmov	r3, s0
 800f044:	b507      	push	{r0, r1, r2, lr}
 800f046:	4a1e      	ldr	r2, [pc, #120]	; (800f0c0 <cosf+0x80>)
 800f048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f04c:	4293      	cmp	r3, r2
 800f04e:	dc06      	bgt.n	800f05e <cosf+0x1e>
 800f050:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f0c4 <cosf+0x84>
 800f054:	b003      	add	sp, #12
 800f056:	f85d eb04 	ldr.w	lr, [sp], #4
 800f05a:	f000 bacd 	b.w	800f5f8 <__kernel_cosf>
 800f05e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f062:	db04      	blt.n	800f06e <cosf+0x2e>
 800f064:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f068:	b003      	add	sp, #12
 800f06a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f06e:	4668      	mov	r0, sp
 800f070:	f000 f982 	bl	800f378 <__ieee754_rem_pio2f>
 800f074:	f000 0003 	and.w	r0, r0, #3
 800f078:	2801      	cmp	r0, #1
 800f07a:	d009      	beq.n	800f090 <cosf+0x50>
 800f07c:	2802      	cmp	r0, #2
 800f07e:	d010      	beq.n	800f0a2 <cosf+0x62>
 800f080:	b9b0      	cbnz	r0, 800f0b0 <cosf+0x70>
 800f082:	eddd 0a01 	vldr	s1, [sp, #4]
 800f086:	ed9d 0a00 	vldr	s0, [sp]
 800f08a:	f000 fab5 	bl	800f5f8 <__kernel_cosf>
 800f08e:	e7eb      	b.n	800f068 <cosf+0x28>
 800f090:	eddd 0a01 	vldr	s1, [sp, #4]
 800f094:	ed9d 0a00 	vldr	s0, [sp]
 800f098:	f000 fd84 	bl	800fba4 <__kernel_sinf>
 800f09c:	eeb1 0a40 	vneg.f32	s0, s0
 800f0a0:	e7e2      	b.n	800f068 <cosf+0x28>
 800f0a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f0a6:	ed9d 0a00 	vldr	s0, [sp]
 800f0aa:	f000 faa5 	bl	800f5f8 <__kernel_cosf>
 800f0ae:	e7f5      	b.n	800f09c <cosf+0x5c>
 800f0b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f0b4:	ed9d 0a00 	vldr	s0, [sp]
 800f0b8:	2001      	movs	r0, #1
 800f0ba:	f000 fd73 	bl	800fba4 <__kernel_sinf>
 800f0be:	e7d3      	b.n	800f068 <cosf+0x28>
 800f0c0:	3f490fd8 	.word	0x3f490fd8
 800f0c4:	00000000 	.word	0x00000000

0800f0c8 <fmaxf>:
 800f0c8:	b508      	push	{r3, lr}
 800f0ca:	ed2d 8b02 	vpush	{d8}
 800f0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f0d2:	eef0 8a60 	vmov.f32	s17, s1
 800f0d6:	f000 f82d 	bl	800f134 <__fpclassifyf>
 800f0da:	b148      	cbz	r0, 800f0f0 <fmaxf+0x28>
 800f0dc:	eeb0 0a68 	vmov.f32	s0, s17
 800f0e0:	f000 f828 	bl	800f134 <__fpclassifyf>
 800f0e4:	b130      	cbz	r0, 800f0f4 <fmaxf+0x2c>
 800f0e6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ee:	dc01      	bgt.n	800f0f4 <fmaxf+0x2c>
 800f0f0:	eeb0 8a68 	vmov.f32	s16, s17
 800f0f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f0f8:	ecbd 8b02 	vpop	{d8}
 800f0fc:	bd08      	pop	{r3, pc}

0800f0fe <fminf>:
 800f0fe:	b508      	push	{r3, lr}
 800f100:	ed2d 8b02 	vpush	{d8}
 800f104:	eeb0 8a40 	vmov.f32	s16, s0
 800f108:	eef0 8a60 	vmov.f32	s17, s1
 800f10c:	f000 f812 	bl	800f134 <__fpclassifyf>
 800f110:	b148      	cbz	r0, 800f126 <fminf+0x28>
 800f112:	eeb0 0a68 	vmov.f32	s0, s17
 800f116:	f000 f80d 	bl	800f134 <__fpclassifyf>
 800f11a:	b130      	cbz	r0, 800f12a <fminf+0x2c>
 800f11c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f124:	d401      	bmi.n	800f12a <fminf+0x2c>
 800f126:	eeb0 8a68 	vmov.f32	s16, s17
 800f12a:	eeb0 0a48 	vmov.f32	s0, s16
 800f12e:	ecbd 8b02 	vpop	{d8}
 800f132:	bd08      	pop	{r3, pc}

0800f134 <__fpclassifyf>:
 800f134:	ee10 3a10 	vmov	r3, s0
 800f138:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800f13c:	d00d      	beq.n	800f15a <__fpclassifyf+0x26>
 800f13e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800f142:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f146:	d30a      	bcc.n	800f15e <__fpclassifyf+0x2a>
 800f148:	4b07      	ldr	r3, [pc, #28]	; (800f168 <__fpclassifyf+0x34>)
 800f14a:	1e42      	subs	r2, r0, #1
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d908      	bls.n	800f162 <__fpclassifyf+0x2e>
 800f150:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800f154:	4258      	negs	r0, r3
 800f156:	4158      	adcs	r0, r3
 800f158:	4770      	bx	lr
 800f15a:	2002      	movs	r0, #2
 800f15c:	4770      	bx	lr
 800f15e:	2004      	movs	r0, #4
 800f160:	4770      	bx	lr
 800f162:	2003      	movs	r0, #3
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	007ffffe 	.word	0x007ffffe

0800f16c <sinf>:
 800f16c:	ee10 3a10 	vmov	r3, s0
 800f170:	b507      	push	{r0, r1, r2, lr}
 800f172:	4a1f      	ldr	r2, [pc, #124]	; (800f1f0 <sinf+0x84>)
 800f174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f178:	4293      	cmp	r3, r2
 800f17a:	dc07      	bgt.n	800f18c <sinf+0x20>
 800f17c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f1f4 <sinf+0x88>
 800f180:	2000      	movs	r0, #0
 800f182:	b003      	add	sp, #12
 800f184:	f85d eb04 	ldr.w	lr, [sp], #4
 800f188:	f000 bd0c 	b.w	800fba4 <__kernel_sinf>
 800f18c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f190:	db04      	blt.n	800f19c <sinf+0x30>
 800f192:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f196:	b003      	add	sp, #12
 800f198:	f85d fb04 	ldr.w	pc, [sp], #4
 800f19c:	4668      	mov	r0, sp
 800f19e:	f000 f8eb 	bl	800f378 <__ieee754_rem_pio2f>
 800f1a2:	f000 0003 	and.w	r0, r0, #3
 800f1a6:	2801      	cmp	r0, #1
 800f1a8:	d00a      	beq.n	800f1c0 <sinf+0x54>
 800f1aa:	2802      	cmp	r0, #2
 800f1ac:	d00f      	beq.n	800f1ce <sinf+0x62>
 800f1ae:	b9c0      	cbnz	r0, 800f1e2 <sinf+0x76>
 800f1b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1b4:	ed9d 0a00 	vldr	s0, [sp]
 800f1b8:	2001      	movs	r0, #1
 800f1ba:	f000 fcf3 	bl	800fba4 <__kernel_sinf>
 800f1be:	e7ea      	b.n	800f196 <sinf+0x2a>
 800f1c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1c4:	ed9d 0a00 	vldr	s0, [sp]
 800f1c8:	f000 fa16 	bl	800f5f8 <__kernel_cosf>
 800f1cc:	e7e3      	b.n	800f196 <sinf+0x2a>
 800f1ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1d2:	ed9d 0a00 	vldr	s0, [sp]
 800f1d6:	2001      	movs	r0, #1
 800f1d8:	f000 fce4 	bl	800fba4 <__kernel_sinf>
 800f1dc:	eeb1 0a40 	vneg.f32	s0, s0
 800f1e0:	e7d9      	b.n	800f196 <sinf+0x2a>
 800f1e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f1e6:	ed9d 0a00 	vldr	s0, [sp]
 800f1ea:	f000 fa05 	bl	800f5f8 <__kernel_cosf>
 800f1ee:	e7f5      	b.n	800f1dc <sinf+0x70>
 800f1f0:	3f490fd8 	.word	0x3f490fd8
 800f1f4:	00000000 	.word	0x00000000

0800f1f8 <fmodf>:
 800f1f8:	b508      	push	{r3, lr}
 800f1fa:	ed2d 8b02 	vpush	{d8}
 800f1fe:	eef0 8a40 	vmov.f32	s17, s0
 800f202:	eeb0 8a60 	vmov.f32	s16, s1
 800f206:	f000 f835 	bl	800f274 <__ieee754_fmodf>
 800f20a:	eef4 8a48 	vcmp.f32	s17, s16
 800f20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f212:	d60c      	bvs.n	800f22e <fmodf+0x36>
 800f214:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f234 <fmodf+0x3c>
 800f218:	eeb4 8a68 	vcmp.f32	s16, s17
 800f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f220:	d105      	bne.n	800f22e <fmodf+0x36>
 800f222:	f7fc fff9 	bl	800c218 <__errno>
 800f226:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f22a:	2321      	movs	r3, #33	; 0x21
 800f22c:	6003      	str	r3, [r0, #0]
 800f22e:	ecbd 8b02 	vpop	{d8}
 800f232:	bd08      	pop	{r3, pc}
 800f234:	00000000 	.word	0x00000000

0800f238 <sqrtf>:
 800f238:	b508      	push	{r3, lr}
 800f23a:	ed2d 8b02 	vpush	{d8}
 800f23e:	eeb0 8a40 	vmov.f32	s16, s0
 800f242:	f000 f9d5 	bl	800f5f0 <__ieee754_sqrtf>
 800f246:	eeb4 8a48 	vcmp.f32	s16, s16
 800f24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24e:	d60c      	bvs.n	800f26a <sqrtf+0x32>
 800f250:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f270 <sqrtf+0x38>
 800f254:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f25c:	d505      	bpl.n	800f26a <sqrtf+0x32>
 800f25e:	f7fc ffdb 	bl	800c218 <__errno>
 800f262:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f266:	2321      	movs	r3, #33	; 0x21
 800f268:	6003      	str	r3, [r0, #0]
 800f26a:	ecbd 8b02 	vpop	{d8}
 800f26e:	bd08      	pop	{r3, pc}
 800f270:	00000000 	.word	0x00000000

0800f274 <__ieee754_fmodf>:
 800f274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f276:	ee10 5a90 	vmov	r5, s1
 800f27a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800f27e:	d009      	beq.n	800f294 <__ieee754_fmodf+0x20>
 800f280:	ee10 2a10 	vmov	r2, s0
 800f284:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f288:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f28c:	da02      	bge.n	800f294 <__ieee754_fmodf+0x20>
 800f28e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f292:	dd04      	ble.n	800f29e <__ieee754_fmodf+0x2a>
 800f294:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f298:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f29e:	42a3      	cmp	r3, r4
 800f2a0:	dbfc      	blt.n	800f29c <__ieee754_fmodf+0x28>
 800f2a2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800f2a6:	d105      	bne.n	800f2b4 <__ieee754_fmodf+0x40>
 800f2a8:	4b32      	ldr	r3, [pc, #200]	; (800f374 <__ieee754_fmodf+0x100>)
 800f2aa:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800f2ae:	ed93 0a00 	vldr	s0, [r3]
 800f2b2:	e7f3      	b.n	800f29c <__ieee754_fmodf+0x28>
 800f2b4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800f2b8:	d13f      	bne.n	800f33a <__ieee754_fmodf+0xc6>
 800f2ba:	0219      	lsls	r1, r3, #8
 800f2bc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800f2c0:	2900      	cmp	r1, #0
 800f2c2:	dc37      	bgt.n	800f334 <__ieee754_fmodf+0xc0>
 800f2c4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800f2c8:	d13d      	bne.n	800f346 <__ieee754_fmodf+0xd2>
 800f2ca:	0227      	lsls	r7, r4, #8
 800f2cc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800f2d0:	2f00      	cmp	r7, #0
 800f2d2:	da35      	bge.n	800f340 <__ieee754_fmodf+0xcc>
 800f2d4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800f2d8:	bfbb      	ittet	lt
 800f2da:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f2de:	1a12      	sublt	r2, r2, r0
 800f2e0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800f2e4:	4093      	lsllt	r3, r2
 800f2e6:	bfa8      	it	ge
 800f2e8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800f2ec:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f2f0:	bfb5      	itete	lt
 800f2f2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f2f6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800f2fa:	1a52      	sublt	r2, r2, r1
 800f2fc:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800f300:	bfb8      	it	lt
 800f302:	4094      	lsllt	r4, r2
 800f304:	1a40      	subs	r0, r0, r1
 800f306:	1b1a      	subs	r2, r3, r4
 800f308:	bb00      	cbnz	r0, 800f34c <__ieee754_fmodf+0xd8>
 800f30a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800f30e:	bf38      	it	cc
 800f310:	4613      	movcc	r3, r2
 800f312:	2b00      	cmp	r3, #0
 800f314:	d0c8      	beq.n	800f2a8 <__ieee754_fmodf+0x34>
 800f316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f31a:	db1f      	blt.n	800f35c <__ieee754_fmodf+0xe8>
 800f31c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f320:	db1f      	blt.n	800f362 <__ieee754_fmodf+0xee>
 800f322:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800f326:	317f      	adds	r1, #127	; 0x7f
 800f328:	4333      	orrs	r3, r6
 800f32a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800f32e:	ee00 3a10 	vmov	s0, r3
 800f332:	e7b3      	b.n	800f29c <__ieee754_fmodf+0x28>
 800f334:	3801      	subs	r0, #1
 800f336:	0049      	lsls	r1, r1, #1
 800f338:	e7c2      	b.n	800f2c0 <__ieee754_fmodf+0x4c>
 800f33a:	15d8      	asrs	r0, r3, #23
 800f33c:	387f      	subs	r0, #127	; 0x7f
 800f33e:	e7c1      	b.n	800f2c4 <__ieee754_fmodf+0x50>
 800f340:	3901      	subs	r1, #1
 800f342:	007f      	lsls	r7, r7, #1
 800f344:	e7c4      	b.n	800f2d0 <__ieee754_fmodf+0x5c>
 800f346:	15e1      	asrs	r1, r4, #23
 800f348:	397f      	subs	r1, #127	; 0x7f
 800f34a:	e7c3      	b.n	800f2d4 <__ieee754_fmodf+0x60>
 800f34c:	2a00      	cmp	r2, #0
 800f34e:	da02      	bge.n	800f356 <__ieee754_fmodf+0xe2>
 800f350:	005b      	lsls	r3, r3, #1
 800f352:	3801      	subs	r0, #1
 800f354:	e7d7      	b.n	800f306 <__ieee754_fmodf+0x92>
 800f356:	d0a7      	beq.n	800f2a8 <__ieee754_fmodf+0x34>
 800f358:	0053      	lsls	r3, r2, #1
 800f35a:	e7fa      	b.n	800f352 <__ieee754_fmodf+0xde>
 800f35c:	005b      	lsls	r3, r3, #1
 800f35e:	3901      	subs	r1, #1
 800f360:	e7d9      	b.n	800f316 <__ieee754_fmodf+0xa2>
 800f362:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800f366:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800f36a:	3182      	adds	r1, #130	; 0x82
 800f36c:	410b      	asrs	r3, r1
 800f36e:	4333      	orrs	r3, r6
 800f370:	e7dd      	b.n	800f32e <__ieee754_fmodf+0xba>
 800f372:	bf00      	nop
 800f374:	080102c4 	.word	0x080102c4

0800f378 <__ieee754_rem_pio2f>:
 800f378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f37a:	ee10 6a10 	vmov	r6, s0
 800f37e:	4b8e      	ldr	r3, [pc, #568]	; (800f5b8 <__ieee754_rem_pio2f+0x240>)
 800f380:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f384:	429d      	cmp	r5, r3
 800f386:	b087      	sub	sp, #28
 800f388:	eef0 7a40 	vmov.f32	s15, s0
 800f38c:	4604      	mov	r4, r0
 800f38e:	dc05      	bgt.n	800f39c <__ieee754_rem_pio2f+0x24>
 800f390:	2300      	movs	r3, #0
 800f392:	ed80 0a00 	vstr	s0, [r0]
 800f396:	6043      	str	r3, [r0, #4]
 800f398:	2000      	movs	r0, #0
 800f39a:	e01a      	b.n	800f3d2 <__ieee754_rem_pio2f+0x5a>
 800f39c:	4b87      	ldr	r3, [pc, #540]	; (800f5bc <__ieee754_rem_pio2f+0x244>)
 800f39e:	429d      	cmp	r5, r3
 800f3a0:	dc46      	bgt.n	800f430 <__ieee754_rem_pio2f+0xb8>
 800f3a2:	2e00      	cmp	r6, #0
 800f3a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f5c0 <__ieee754_rem_pio2f+0x248>
 800f3a8:	4b86      	ldr	r3, [pc, #536]	; (800f5c4 <__ieee754_rem_pio2f+0x24c>)
 800f3aa:	f025 050f 	bic.w	r5, r5, #15
 800f3ae:	dd1f      	ble.n	800f3f0 <__ieee754_rem_pio2f+0x78>
 800f3b0:	429d      	cmp	r5, r3
 800f3b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f3b6:	d00e      	beq.n	800f3d6 <__ieee754_rem_pio2f+0x5e>
 800f3b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f5c8 <__ieee754_rem_pio2f+0x250>
 800f3bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f3c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f3c4:	ed80 0a00 	vstr	s0, [r0]
 800f3c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3cc:	2001      	movs	r0, #1
 800f3ce:	edc4 7a01 	vstr	s15, [r4, #4]
 800f3d2:	b007      	add	sp, #28
 800f3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f5cc <__ieee754_rem_pio2f+0x254>
 800f3da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f5d0 <__ieee754_rem_pio2f+0x258>
 800f3de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f3e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f3e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f3ea:	edc0 6a00 	vstr	s13, [r0]
 800f3ee:	e7eb      	b.n	800f3c8 <__ieee754_rem_pio2f+0x50>
 800f3f0:	429d      	cmp	r5, r3
 800f3f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f3f6:	d00e      	beq.n	800f416 <__ieee754_rem_pio2f+0x9e>
 800f3f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f5c8 <__ieee754_rem_pio2f+0x250>
 800f3fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f400:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f404:	ed80 0a00 	vstr	s0, [r0]
 800f408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f40c:	f04f 30ff 	mov.w	r0, #4294967295
 800f410:	edc4 7a01 	vstr	s15, [r4, #4]
 800f414:	e7dd      	b.n	800f3d2 <__ieee754_rem_pio2f+0x5a>
 800f416:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f5cc <__ieee754_rem_pio2f+0x254>
 800f41a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f5d0 <__ieee754_rem_pio2f+0x258>
 800f41e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f422:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f42a:	edc0 6a00 	vstr	s13, [r0]
 800f42e:	e7eb      	b.n	800f408 <__ieee754_rem_pio2f+0x90>
 800f430:	4b68      	ldr	r3, [pc, #416]	; (800f5d4 <__ieee754_rem_pio2f+0x25c>)
 800f432:	429d      	cmp	r5, r3
 800f434:	dc72      	bgt.n	800f51c <__ieee754_rem_pio2f+0x1a4>
 800f436:	f000 fbfd 	bl	800fc34 <fabsf>
 800f43a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f5d8 <__ieee754_rem_pio2f+0x260>
 800f43e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f442:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f44a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f44e:	ee17 0a90 	vmov	r0, s15
 800f452:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f5c0 <__ieee754_rem_pio2f+0x248>
 800f456:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f45a:	281f      	cmp	r0, #31
 800f45c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f5c8 <__ieee754_rem_pio2f+0x250>
 800f460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f464:	eeb1 6a47 	vneg.f32	s12, s14
 800f468:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f46c:	ee16 2a90 	vmov	r2, s13
 800f470:	dc1c      	bgt.n	800f4ac <__ieee754_rem_pio2f+0x134>
 800f472:	495a      	ldr	r1, [pc, #360]	; (800f5dc <__ieee754_rem_pio2f+0x264>)
 800f474:	1e47      	subs	r7, r0, #1
 800f476:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f47a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f47e:	428b      	cmp	r3, r1
 800f480:	d014      	beq.n	800f4ac <__ieee754_rem_pio2f+0x134>
 800f482:	6022      	str	r2, [r4, #0]
 800f484:	ed94 7a00 	vldr	s14, [r4]
 800f488:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f48c:	2e00      	cmp	r6, #0
 800f48e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f492:	ed84 0a01 	vstr	s0, [r4, #4]
 800f496:	da9c      	bge.n	800f3d2 <__ieee754_rem_pio2f+0x5a>
 800f498:	eeb1 7a47 	vneg.f32	s14, s14
 800f49c:	eeb1 0a40 	vneg.f32	s0, s0
 800f4a0:	ed84 7a00 	vstr	s14, [r4]
 800f4a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800f4a8:	4240      	negs	r0, r0
 800f4aa:	e792      	b.n	800f3d2 <__ieee754_rem_pio2f+0x5a>
 800f4ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f4b0:	15eb      	asrs	r3, r5, #23
 800f4b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f4b6:	2d08      	cmp	r5, #8
 800f4b8:	dde3      	ble.n	800f482 <__ieee754_rem_pio2f+0x10a>
 800f4ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f5cc <__ieee754_rem_pio2f+0x254>
 800f4be:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f5d0 <__ieee754_rem_pio2f+0x258>
 800f4c2:	eef0 6a40 	vmov.f32	s13, s0
 800f4c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f4ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f4ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f4d2:	eef0 7a40 	vmov.f32	s15, s0
 800f4d6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f4da:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f4de:	ee15 2a90 	vmov	r2, s11
 800f4e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f4e6:	1a5b      	subs	r3, r3, r1
 800f4e8:	2b19      	cmp	r3, #25
 800f4ea:	dc04      	bgt.n	800f4f6 <__ieee754_rem_pio2f+0x17e>
 800f4ec:	edc4 5a00 	vstr	s11, [r4]
 800f4f0:	eeb0 0a66 	vmov.f32	s0, s13
 800f4f4:	e7c6      	b.n	800f484 <__ieee754_rem_pio2f+0x10c>
 800f4f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f5e0 <__ieee754_rem_pio2f+0x268>
 800f4fa:	eeb0 0a66 	vmov.f32	s0, s13
 800f4fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f502:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f506:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f5e4 <__ieee754_rem_pio2f+0x26c>
 800f50a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f50e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f512:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f516:	ed84 7a00 	vstr	s14, [r4]
 800f51a:	e7b3      	b.n	800f484 <__ieee754_rem_pio2f+0x10c>
 800f51c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f520:	db06      	blt.n	800f530 <__ieee754_rem_pio2f+0x1b8>
 800f522:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f526:	edc0 7a01 	vstr	s15, [r0, #4]
 800f52a:	edc0 7a00 	vstr	s15, [r0]
 800f52e:	e733      	b.n	800f398 <__ieee754_rem_pio2f+0x20>
 800f530:	15ea      	asrs	r2, r5, #23
 800f532:	3a86      	subs	r2, #134	; 0x86
 800f534:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f538:	ee07 3a90 	vmov	s15, r3
 800f53c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f540:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f5e8 <__ieee754_rem_pio2f+0x270>
 800f544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f54c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f55c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f560:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f570:	edcd 7a05 	vstr	s15, [sp, #20]
 800f574:	d11e      	bne.n	800f5b4 <__ieee754_rem_pio2f+0x23c>
 800f576:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	bf14      	ite	ne
 800f580:	2302      	movne	r3, #2
 800f582:	2301      	moveq	r3, #1
 800f584:	4919      	ldr	r1, [pc, #100]	; (800f5ec <__ieee754_rem_pio2f+0x274>)
 800f586:	9101      	str	r1, [sp, #4]
 800f588:	2102      	movs	r1, #2
 800f58a:	9100      	str	r1, [sp, #0]
 800f58c:	a803      	add	r0, sp, #12
 800f58e:	4621      	mov	r1, r4
 800f590:	f000 f892 	bl	800f6b8 <__kernel_rem_pio2f>
 800f594:	2e00      	cmp	r6, #0
 800f596:	f6bf af1c 	bge.w	800f3d2 <__ieee754_rem_pio2f+0x5a>
 800f59a:	edd4 7a00 	vldr	s15, [r4]
 800f59e:	eef1 7a67 	vneg.f32	s15, s15
 800f5a2:	edc4 7a00 	vstr	s15, [r4]
 800f5a6:	edd4 7a01 	vldr	s15, [r4, #4]
 800f5aa:	eef1 7a67 	vneg.f32	s15, s15
 800f5ae:	edc4 7a01 	vstr	s15, [r4, #4]
 800f5b2:	e779      	b.n	800f4a8 <__ieee754_rem_pio2f+0x130>
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	e7e5      	b.n	800f584 <__ieee754_rem_pio2f+0x20c>
 800f5b8:	3f490fd8 	.word	0x3f490fd8
 800f5bc:	4016cbe3 	.word	0x4016cbe3
 800f5c0:	3fc90f80 	.word	0x3fc90f80
 800f5c4:	3fc90fd0 	.word	0x3fc90fd0
 800f5c8:	37354443 	.word	0x37354443
 800f5cc:	37354400 	.word	0x37354400
 800f5d0:	2e85a308 	.word	0x2e85a308
 800f5d4:	43490f80 	.word	0x43490f80
 800f5d8:	3f22f984 	.word	0x3f22f984
 800f5dc:	080102cc 	.word	0x080102cc
 800f5e0:	2e85a300 	.word	0x2e85a300
 800f5e4:	248d3132 	.word	0x248d3132
 800f5e8:	43800000 	.word	0x43800000
 800f5ec:	0801034c 	.word	0x0801034c

0800f5f0 <__ieee754_sqrtf>:
 800f5f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f5f4:	4770      	bx	lr
	...

0800f5f8 <__kernel_cosf>:
 800f5f8:	ee10 3a10 	vmov	r3, s0
 800f5fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f600:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f604:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f608:	da05      	bge.n	800f616 <__kernel_cosf+0x1e>
 800f60a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f60e:	ee17 2a90 	vmov	r2, s15
 800f612:	2a00      	cmp	r2, #0
 800f614:	d03d      	beq.n	800f692 <__kernel_cosf+0x9a>
 800f616:	ee60 5a00 	vmul.f32	s11, s0, s0
 800f61a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f698 <__kernel_cosf+0xa0>
 800f61e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f69c <__kernel_cosf+0xa4>
 800f622:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800f6a0 <__kernel_cosf+0xa8>
 800f626:	4a1f      	ldr	r2, [pc, #124]	; (800f6a4 <__kernel_cosf+0xac>)
 800f628:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f62c:	4293      	cmp	r3, r2
 800f62e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f6a8 <__kernel_cosf+0xb0>
 800f632:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f636:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800f6ac <__kernel_cosf+0xb4>
 800f63a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f63e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800f6b0 <__kernel_cosf+0xb8>
 800f642:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f646:	eeb0 7a66 	vmov.f32	s14, s13
 800f64a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f64e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f652:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800f656:	ee67 6a25 	vmul.f32	s13, s14, s11
 800f65a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800f65e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f662:	dc04      	bgt.n	800f66e <__kernel_cosf+0x76>
 800f664:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f668:	ee36 0a47 	vsub.f32	s0, s12, s14
 800f66c:	4770      	bx	lr
 800f66e:	4a11      	ldr	r2, [pc, #68]	; (800f6b4 <__kernel_cosf+0xbc>)
 800f670:	4293      	cmp	r3, r2
 800f672:	bfda      	itte	le
 800f674:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f678:	ee06 3a90 	vmovle	s13, r3
 800f67c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800f680:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f684:	ee36 0a66 	vsub.f32	s0, s12, s13
 800f688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f68c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f690:	4770      	bx	lr
 800f692:	eeb0 0a46 	vmov.f32	s0, s12
 800f696:	4770      	bx	lr
 800f698:	ad47d74e 	.word	0xad47d74e
 800f69c:	310f74f6 	.word	0x310f74f6
 800f6a0:	3d2aaaab 	.word	0x3d2aaaab
 800f6a4:	3e999999 	.word	0x3e999999
 800f6a8:	b493f27c 	.word	0xb493f27c
 800f6ac:	37d00d01 	.word	0x37d00d01
 800f6b0:	bab60b61 	.word	0xbab60b61
 800f6b4:	3f480000 	.word	0x3f480000

0800f6b8 <__kernel_rem_pio2f>:
 800f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	ed2d 8b04 	vpush	{d8-d9}
 800f6c0:	b0d9      	sub	sp, #356	; 0x164
 800f6c2:	4688      	mov	r8, r1
 800f6c4:	9002      	str	r0, [sp, #8]
 800f6c6:	49bb      	ldr	r1, [pc, #748]	; (800f9b4 <__kernel_rem_pio2f+0x2fc>)
 800f6c8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800f6ca:	9301      	str	r3, [sp, #4]
 800f6cc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800f6d0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800f6d4:	1e59      	subs	r1, r3, #1
 800f6d6:	1d13      	adds	r3, r2, #4
 800f6d8:	db27      	blt.n	800f72a <__kernel_rem_pio2f+0x72>
 800f6da:	f1b2 0b03 	subs.w	fp, r2, #3
 800f6de:	bf48      	it	mi
 800f6e0:	f102 0b04 	addmi.w	fp, r2, #4
 800f6e4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800f6e8:	1c45      	adds	r5, r0, #1
 800f6ea:	00ec      	lsls	r4, r5, #3
 800f6ec:	1a47      	subs	r7, r0, r1
 800f6ee:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800f6f2:	9403      	str	r4, [sp, #12]
 800f6f4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800f6f8:	eb0a 0c01 	add.w	ip, sl, r1
 800f6fc:	ae1c      	add	r6, sp, #112	; 0x70
 800f6fe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800f702:	2400      	movs	r4, #0
 800f704:	4564      	cmp	r4, ip
 800f706:	dd12      	ble.n	800f72e <__kernel_rem_pio2f+0x76>
 800f708:	9b01      	ldr	r3, [sp, #4]
 800f70a:	ac1c      	add	r4, sp, #112	; 0x70
 800f70c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f710:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800f714:	f04f 0c00 	mov.w	ip, #0
 800f718:	45d4      	cmp	ip, sl
 800f71a:	dc27      	bgt.n	800f76c <__kernel_rem_pio2f+0xb4>
 800f71c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f720:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800f724:	4627      	mov	r7, r4
 800f726:	2600      	movs	r6, #0
 800f728:	e016      	b.n	800f758 <__kernel_rem_pio2f+0xa0>
 800f72a:	2000      	movs	r0, #0
 800f72c:	e7dc      	b.n	800f6e8 <__kernel_rem_pio2f+0x30>
 800f72e:	42e7      	cmn	r7, r4
 800f730:	bf5d      	ittte	pl
 800f732:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800f736:	ee07 3a90 	vmovpl	s15, r3
 800f73a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f73e:	eef0 7a47 	vmovmi.f32	s15, s14
 800f742:	ece6 7a01 	vstmia	r6!, {s15}
 800f746:	3401      	adds	r4, #1
 800f748:	e7dc      	b.n	800f704 <__kernel_rem_pio2f+0x4c>
 800f74a:	ecf9 6a01 	vldmia	r9!, {s13}
 800f74e:	ed97 7a00 	vldr	s14, [r7]
 800f752:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f756:	3601      	adds	r6, #1
 800f758:	428e      	cmp	r6, r1
 800f75a:	f1a7 0704 	sub.w	r7, r7, #4
 800f75e:	ddf4      	ble.n	800f74a <__kernel_rem_pio2f+0x92>
 800f760:	eceb 7a01 	vstmia	fp!, {s15}
 800f764:	f10c 0c01 	add.w	ip, ip, #1
 800f768:	3404      	adds	r4, #4
 800f76a:	e7d5      	b.n	800f718 <__kernel_rem_pio2f+0x60>
 800f76c:	ab08      	add	r3, sp, #32
 800f76e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f772:	eddf 8a93 	vldr	s17, [pc, #588]	; 800f9c0 <__kernel_rem_pio2f+0x308>
 800f776:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800f9bc <__kernel_rem_pio2f+0x304>
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800f780:	4656      	mov	r6, sl
 800f782:	00b3      	lsls	r3, r6, #2
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	ab58      	add	r3, sp, #352	; 0x160
 800f788:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f78c:	ac08      	add	r4, sp, #32
 800f78e:	ab44      	add	r3, sp, #272	; 0x110
 800f790:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800f794:	46a4      	mov	ip, r4
 800f796:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f79a:	4637      	mov	r7, r6
 800f79c:	2f00      	cmp	r7, #0
 800f79e:	f1a0 0004 	sub.w	r0, r0, #4
 800f7a2:	dc4f      	bgt.n	800f844 <__kernel_rem_pio2f+0x18c>
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f7aa:	f000 fa8d 	bl	800fcc8 <scalbnf>
 800f7ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f7b2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f7b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f7ba:	f000 fa43 	bl	800fc44 <floorf>
 800f7be:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f7c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f7c6:	2d00      	cmp	r5, #0
 800f7c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f7cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f7d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800f7d4:	ee17 9a90 	vmov	r9, s15
 800f7d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f7dc:	dd44      	ble.n	800f868 <__kernel_rem_pio2f+0x1b0>
 800f7de:	f106 3cff 	add.w	ip, r6, #4294967295
 800f7e2:	ab08      	add	r3, sp, #32
 800f7e4:	f1c5 0e08 	rsb	lr, r5, #8
 800f7e8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800f7ec:	fa47 f00e 	asr.w	r0, r7, lr
 800f7f0:	4481      	add	r9, r0
 800f7f2:	fa00 f00e 	lsl.w	r0, r0, lr
 800f7f6:	1a3f      	subs	r7, r7, r0
 800f7f8:	f1c5 0007 	rsb	r0, r5, #7
 800f7fc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800f800:	4107      	asrs	r7, r0
 800f802:	2f00      	cmp	r7, #0
 800f804:	dd3f      	ble.n	800f886 <__kernel_rem_pio2f+0x1ce>
 800f806:	f04f 0e00 	mov.w	lr, #0
 800f80a:	f109 0901 	add.w	r9, r9, #1
 800f80e:	4673      	mov	r3, lr
 800f810:	4576      	cmp	r6, lr
 800f812:	dc6b      	bgt.n	800f8ec <__kernel_rem_pio2f+0x234>
 800f814:	2d00      	cmp	r5, #0
 800f816:	dd04      	ble.n	800f822 <__kernel_rem_pio2f+0x16a>
 800f818:	2d01      	cmp	r5, #1
 800f81a:	d078      	beq.n	800f90e <__kernel_rem_pio2f+0x256>
 800f81c:	2d02      	cmp	r5, #2
 800f81e:	f000 8081 	beq.w	800f924 <__kernel_rem_pio2f+0x26c>
 800f822:	2f02      	cmp	r7, #2
 800f824:	d12f      	bne.n	800f886 <__kernel_rem_pio2f+0x1ce>
 800f826:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f82a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f82e:	b353      	cbz	r3, 800f886 <__kernel_rem_pio2f+0x1ce>
 800f830:	4628      	mov	r0, r5
 800f832:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f836:	f000 fa47 	bl	800fcc8 <scalbnf>
 800f83a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f83e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f842:	e020      	b.n	800f886 <__kernel_rem_pio2f+0x1ce>
 800f844:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f848:	3f01      	subs	r7, #1
 800f84a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f84e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f852:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f856:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f85a:	ecac 0a01 	vstmia	ip!, {s0}
 800f85e:	ed90 0a00 	vldr	s0, [r0]
 800f862:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f866:	e799      	b.n	800f79c <__kernel_rem_pio2f+0xe4>
 800f868:	d105      	bne.n	800f876 <__kernel_rem_pio2f+0x1be>
 800f86a:	1e70      	subs	r0, r6, #1
 800f86c:	ab08      	add	r3, sp, #32
 800f86e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800f872:	11ff      	asrs	r7, r7, #7
 800f874:	e7c5      	b.n	800f802 <__kernel_rem_pio2f+0x14a>
 800f876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f87a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f882:	da31      	bge.n	800f8e8 <__kernel_rem_pio2f+0x230>
 800f884:	2700      	movs	r7, #0
 800f886:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f88e:	f040 809b 	bne.w	800f9c8 <__kernel_rem_pio2f+0x310>
 800f892:	1e74      	subs	r4, r6, #1
 800f894:	46a4      	mov	ip, r4
 800f896:	2000      	movs	r0, #0
 800f898:	45d4      	cmp	ip, sl
 800f89a:	da4a      	bge.n	800f932 <__kernel_rem_pio2f+0x27a>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d07a      	beq.n	800f996 <__kernel_rem_pio2f+0x2de>
 800f8a0:	ab08      	add	r3, sp, #32
 800f8a2:	3d08      	subs	r5, #8
 800f8a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 8081 	beq.w	800f9b0 <__kernel_rem_pio2f+0x2f8>
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f8b4:	00a5      	lsls	r5, r4, #2
 800f8b6:	f000 fa07 	bl	800fcc8 <scalbnf>
 800f8ba:	aa44      	add	r2, sp, #272	; 0x110
 800f8bc:	1d2b      	adds	r3, r5, #4
 800f8be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f9c0 <__kernel_rem_pio2f+0x308>
 800f8c2:	18d1      	adds	r1, r2, r3
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	2a00      	cmp	r2, #0
 800f8c8:	f280 80ae 	bge.w	800fa28 <__kernel_rem_pio2f+0x370>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	2a00      	cmp	r2, #0
 800f8d0:	f2c0 80cc 	blt.w	800fa6c <__kernel_rem_pio2f+0x3b4>
 800f8d4:	a944      	add	r1, sp, #272	; 0x110
 800f8d6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800f8da:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800f9b8 <__kernel_rem_pio2f+0x300>
 800f8de:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	1aa1      	subs	r1, r4, r2
 800f8e6:	e0b6      	b.n	800fa56 <__kernel_rem_pio2f+0x39e>
 800f8e8:	2702      	movs	r7, #2
 800f8ea:	e78c      	b.n	800f806 <__kernel_rem_pio2f+0x14e>
 800f8ec:	6820      	ldr	r0, [r4, #0]
 800f8ee:	b94b      	cbnz	r3, 800f904 <__kernel_rem_pio2f+0x24c>
 800f8f0:	b118      	cbz	r0, 800f8fa <__kernel_rem_pio2f+0x242>
 800f8f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800f8f6:	6020      	str	r0, [r4, #0]
 800f8f8:	2001      	movs	r0, #1
 800f8fa:	f10e 0e01 	add.w	lr, lr, #1
 800f8fe:	3404      	adds	r4, #4
 800f900:	4603      	mov	r3, r0
 800f902:	e785      	b.n	800f810 <__kernel_rem_pio2f+0x158>
 800f904:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800f908:	6020      	str	r0, [r4, #0]
 800f90a:	4618      	mov	r0, r3
 800f90c:	e7f5      	b.n	800f8fa <__kernel_rem_pio2f+0x242>
 800f90e:	1e74      	subs	r4, r6, #1
 800f910:	a808      	add	r0, sp, #32
 800f912:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f916:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f91a:	f10d 0c20 	add.w	ip, sp, #32
 800f91e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800f922:	e77e      	b.n	800f822 <__kernel_rem_pio2f+0x16a>
 800f924:	1e74      	subs	r4, r6, #1
 800f926:	a808      	add	r0, sp, #32
 800f928:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f92c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f930:	e7f3      	b.n	800f91a <__kernel_rem_pio2f+0x262>
 800f932:	ab08      	add	r3, sp, #32
 800f934:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f938:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f93c:	4318      	orrs	r0, r3
 800f93e:	e7ab      	b.n	800f898 <__kernel_rem_pio2f+0x1e0>
 800f940:	f10c 0c01 	add.w	ip, ip, #1
 800f944:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800f948:	2c00      	cmp	r4, #0
 800f94a:	d0f9      	beq.n	800f940 <__kernel_rem_pio2f+0x288>
 800f94c:	9b05      	ldr	r3, [sp, #20]
 800f94e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800f952:	eb0d 0003 	add.w	r0, sp, r3
 800f956:	9b01      	ldr	r3, [sp, #4]
 800f958:	18f4      	adds	r4, r6, r3
 800f95a:	ab1c      	add	r3, sp, #112	; 0x70
 800f95c:	1c77      	adds	r7, r6, #1
 800f95e:	384c      	subs	r0, #76	; 0x4c
 800f960:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f964:	4466      	add	r6, ip
 800f966:	42be      	cmp	r6, r7
 800f968:	f6ff af0b 	blt.w	800f782 <__kernel_rem_pio2f+0xca>
 800f96c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800f970:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f974:	ee07 3a90 	vmov	s15, r3
 800f978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f97c:	f04f 0c00 	mov.w	ip, #0
 800f980:	ece4 7a01 	vstmia	r4!, {s15}
 800f984:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800f988:	46a1      	mov	r9, r4
 800f98a:	458c      	cmp	ip, r1
 800f98c:	dd07      	ble.n	800f99e <__kernel_rem_pio2f+0x2e6>
 800f98e:	ece0 7a01 	vstmia	r0!, {s15}
 800f992:	3701      	adds	r7, #1
 800f994:	e7e7      	b.n	800f966 <__kernel_rem_pio2f+0x2ae>
 800f996:	9804      	ldr	r0, [sp, #16]
 800f998:	f04f 0c01 	mov.w	ip, #1
 800f99c:	e7d2      	b.n	800f944 <__kernel_rem_pio2f+0x28c>
 800f99e:	ecfe 6a01 	vldmia	lr!, {s13}
 800f9a2:	ed39 7a01 	vldmdb	r9!, {s14}
 800f9a6:	f10c 0c01 	add.w	ip, ip, #1
 800f9aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f9ae:	e7ec      	b.n	800f98a <__kernel_rem_pio2f+0x2d2>
 800f9b0:	3c01      	subs	r4, #1
 800f9b2:	e775      	b.n	800f8a0 <__kernel_rem_pio2f+0x1e8>
 800f9b4:	08010690 	.word	0x08010690
 800f9b8:	08010664 	.word	0x08010664
 800f9bc:	43800000 	.word	0x43800000
 800f9c0:	3b800000 	.word	0x3b800000
 800f9c4:	00000000 	.word	0x00000000
 800f9c8:	9b03      	ldr	r3, [sp, #12]
 800f9ca:	eeb0 0a48 	vmov.f32	s0, s16
 800f9ce:	1a98      	subs	r0, r3, r2
 800f9d0:	f000 f97a 	bl	800fcc8 <scalbnf>
 800f9d4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f9bc <__kernel_rem_pio2f+0x304>
 800f9d8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	db19      	blt.n	800fa16 <__kernel_rem_pio2f+0x35e>
 800f9e2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f9c0 <__kernel_rem_pio2f+0x308>
 800f9e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f9ea:	aa08      	add	r2, sp, #32
 800f9ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9f0:	1c74      	adds	r4, r6, #1
 800f9f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9f6:	3508      	adds	r5, #8
 800f9f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f9fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fa04:	ee10 3a10 	vmov	r3, s0
 800fa08:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fa0c:	ee17 3a90 	vmov	r3, s15
 800fa10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fa14:	e74b      	b.n	800f8ae <__kernel_rem_pio2f+0x1f6>
 800fa16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fa1a:	aa08      	add	r2, sp, #32
 800fa1c:	ee10 3a10 	vmov	r3, s0
 800fa20:	4634      	mov	r4, r6
 800fa22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fa26:	e742      	b.n	800f8ae <__kernel_rem_pio2f+0x1f6>
 800fa28:	a808      	add	r0, sp, #32
 800fa2a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800fa2e:	9001      	str	r0, [sp, #4]
 800fa30:	ee07 0a90 	vmov	s15, r0
 800fa34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa38:	3a01      	subs	r2, #1
 800fa3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fa3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fa42:	ed61 7a01 	vstmdb	r1!, {s15}
 800fa46:	e73e      	b.n	800f8c6 <__kernel_rem_pio2f+0x20e>
 800fa48:	ecfc 6a01 	vldmia	ip!, {s13}
 800fa4c:	ecb6 7a01 	vldmia	r6!, {s14}
 800fa50:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa54:	3001      	adds	r0, #1
 800fa56:	4550      	cmp	r0, sl
 800fa58:	dc01      	bgt.n	800fa5e <__kernel_rem_pio2f+0x3a6>
 800fa5a:	4288      	cmp	r0, r1
 800fa5c:	ddf4      	ble.n	800fa48 <__kernel_rem_pio2f+0x390>
 800fa5e:	a858      	add	r0, sp, #352	; 0x160
 800fa60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa64:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800fa68:	3a01      	subs	r2, #1
 800fa6a:	e730      	b.n	800f8ce <__kernel_rem_pio2f+0x216>
 800fa6c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800fa6e:	2a02      	cmp	r2, #2
 800fa70:	dc09      	bgt.n	800fa86 <__kernel_rem_pio2f+0x3ce>
 800fa72:	2a00      	cmp	r2, #0
 800fa74:	dc2a      	bgt.n	800facc <__kernel_rem_pio2f+0x414>
 800fa76:	d043      	beq.n	800fb00 <__kernel_rem_pio2f+0x448>
 800fa78:	f009 0007 	and.w	r0, r9, #7
 800fa7c:	b059      	add	sp, #356	; 0x164
 800fa7e:	ecbd 8b04 	vpop	{d8-d9}
 800fa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa86:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fa88:	2b03      	cmp	r3, #3
 800fa8a:	d1f5      	bne.n	800fa78 <__kernel_rem_pio2f+0x3c0>
 800fa8c:	ab30      	add	r3, sp, #192	; 0xc0
 800fa8e:	442b      	add	r3, r5
 800fa90:	461a      	mov	r2, r3
 800fa92:	4619      	mov	r1, r3
 800fa94:	4620      	mov	r0, r4
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f1a1 0104 	sub.w	r1, r1, #4
 800fa9c:	dc51      	bgt.n	800fb42 <__kernel_rem_pio2f+0x48a>
 800fa9e:	4621      	mov	r1, r4
 800faa0:	2901      	cmp	r1, #1
 800faa2:	f1a2 0204 	sub.w	r2, r2, #4
 800faa6:	dc5c      	bgt.n	800fb62 <__kernel_rem_pio2f+0x4aa>
 800faa8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800faac:	3304      	adds	r3, #4
 800faae:	2c01      	cmp	r4, #1
 800fab0:	dc67      	bgt.n	800fb82 <__kernel_rem_pio2f+0x4ca>
 800fab2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800fab6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800faba:	2f00      	cmp	r7, #0
 800fabc:	d167      	bne.n	800fb8e <__kernel_rem_pio2f+0x4d6>
 800fabe:	edc8 6a00 	vstr	s13, [r8]
 800fac2:	ed88 7a01 	vstr	s14, [r8, #4]
 800fac6:	edc8 7a02 	vstr	s15, [r8, #8]
 800faca:	e7d5      	b.n	800fa78 <__kernel_rem_pio2f+0x3c0>
 800facc:	aa30      	add	r2, sp, #192	; 0xc0
 800face:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800fad2:	4413      	add	r3, r2
 800fad4:	4622      	mov	r2, r4
 800fad6:	2a00      	cmp	r2, #0
 800fad8:	da24      	bge.n	800fb24 <__kernel_rem_pio2f+0x46c>
 800fada:	b34f      	cbz	r7, 800fb30 <__kernel_rem_pio2f+0x478>
 800fadc:	eef1 7a47 	vneg.f32	s15, s14
 800fae0:	edc8 7a00 	vstr	s15, [r8]
 800fae4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800fae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faec:	aa31      	add	r2, sp, #196	; 0xc4
 800faee:	2301      	movs	r3, #1
 800faf0:	429c      	cmp	r4, r3
 800faf2:	da20      	bge.n	800fb36 <__kernel_rem_pio2f+0x47e>
 800faf4:	b10f      	cbz	r7, 800fafa <__kernel_rem_pio2f+0x442>
 800faf6:	eef1 7a67 	vneg.f32	s15, s15
 800fafa:	edc8 7a01 	vstr	s15, [r8, #4]
 800fafe:	e7bb      	b.n	800fa78 <__kernel_rem_pio2f+0x3c0>
 800fb00:	aa30      	add	r2, sp, #192	; 0xc0
 800fb02:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800f9c4 <__kernel_rem_pio2f+0x30c>
 800fb06:	4413      	add	r3, r2
 800fb08:	2c00      	cmp	r4, #0
 800fb0a:	da05      	bge.n	800fb18 <__kernel_rem_pio2f+0x460>
 800fb0c:	b10f      	cbz	r7, 800fb12 <__kernel_rem_pio2f+0x45a>
 800fb0e:	eef1 7a67 	vneg.f32	s15, s15
 800fb12:	edc8 7a00 	vstr	s15, [r8]
 800fb16:	e7af      	b.n	800fa78 <__kernel_rem_pio2f+0x3c0>
 800fb18:	ed33 7a01 	vldmdb	r3!, {s14}
 800fb1c:	3c01      	subs	r4, #1
 800fb1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb22:	e7f1      	b.n	800fb08 <__kernel_rem_pio2f+0x450>
 800fb24:	ed73 7a01 	vldmdb	r3!, {s15}
 800fb28:	3a01      	subs	r2, #1
 800fb2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb2e:	e7d2      	b.n	800fad6 <__kernel_rem_pio2f+0x41e>
 800fb30:	eef0 7a47 	vmov.f32	s15, s14
 800fb34:	e7d4      	b.n	800fae0 <__kernel_rem_pio2f+0x428>
 800fb36:	ecb2 7a01 	vldmia	r2!, {s14}
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb40:	e7d6      	b.n	800faf0 <__kernel_rem_pio2f+0x438>
 800fb42:	edd1 7a00 	vldr	s15, [r1]
 800fb46:	edd1 6a01 	vldr	s13, [r1, #4]
 800fb4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb4e:	3801      	subs	r0, #1
 800fb50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb54:	ed81 7a00 	vstr	s14, [r1]
 800fb58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb5c:	edc1 7a01 	vstr	s15, [r1, #4]
 800fb60:	e799      	b.n	800fa96 <__kernel_rem_pio2f+0x3de>
 800fb62:	edd2 7a00 	vldr	s15, [r2]
 800fb66:	edd2 6a01 	vldr	s13, [r2, #4]
 800fb6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb6e:	3901      	subs	r1, #1
 800fb70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb74:	ed82 7a00 	vstr	s14, [r2]
 800fb78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb7c:	edc2 7a01 	vstr	s15, [r2, #4]
 800fb80:	e78e      	b.n	800faa0 <__kernel_rem_pio2f+0x3e8>
 800fb82:	ed33 7a01 	vldmdb	r3!, {s14}
 800fb86:	3c01      	subs	r4, #1
 800fb88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb8c:	e78f      	b.n	800faae <__kernel_rem_pio2f+0x3f6>
 800fb8e:	eef1 6a66 	vneg.f32	s13, s13
 800fb92:	eeb1 7a47 	vneg.f32	s14, s14
 800fb96:	edc8 6a00 	vstr	s13, [r8]
 800fb9a:	ed88 7a01 	vstr	s14, [r8, #4]
 800fb9e:	eef1 7a67 	vneg.f32	s15, s15
 800fba2:	e790      	b.n	800fac6 <__kernel_rem_pio2f+0x40e>

0800fba4 <__kernel_sinf>:
 800fba4:	ee10 3a10 	vmov	r3, s0
 800fba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fbb0:	da04      	bge.n	800fbbc <__kernel_sinf+0x18>
 800fbb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fbb6:	ee17 3a90 	vmov	r3, s15
 800fbba:	b35b      	cbz	r3, 800fc14 <__kernel_sinf+0x70>
 800fbbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fbc0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fc18 <__kernel_sinf+0x74>
 800fbc4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fc1c <__kernel_sinf+0x78>
 800fbc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fbcc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800fc20 <__kernel_sinf+0x7c>
 800fbd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fbd4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fc24 <__kernel_sinf+0x80>
 800fbd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fbdc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fc28 <__kernel_sinf+0x84>
 800fbe0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fbe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fbe8:	b930      	cbnz	r0, 800fbf8 <__kernel_sinf+0x54>
 800fbea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800fc2c <__kernel_sinf+0x88>
 800fbee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fbf2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fbf6:	4770      	bx	lr
 800fbf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fbfc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fc00:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fc04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fc08:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fc30 <__kernel_sinf+0x8c>
 800fc0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fc10:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	2f2ec9d3 	.word	0x2f2ec9d3
 800fc1c:	b2d72f34 	.word	0xb2d72f34
 800fc20:	3638ef1b 	.word	0x3638ef1b
 800fc24:	b9500d01 	.word	0xb9500d01
 800fc28:	3c088889 	.word	0x3c088889
 800fc2c:	be2aaaab 	.word	0xbe2aaaab
 800fc30:	3e2aaaab 	.word	0x3e2aaaab

0800fc34 <fabsf>:
 800fc34:	ee10 3a10 	vmov	r3, s0
 800fc38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc3c:	ee00 3a10 	vmov	s0, r3
 800fc40:	4770      	bx	lr
	...

0800fc44 <floorf>:
 800fc44:	ee10 3a10 	vmov	r3, s0
 800fc48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc4c:	3a7f      	subs	r2, #127	; 0x7f
 800fc4e:	2a16      	cmp	r2, #22
 800fc50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc54:	dc2a      	bgt.n	800fcac <floorf+0x68>
 800fc56:	2a00      	cmp	r2, #0
 800fc58:	da11      	bge.n	800fc7e <floorf+0x3a>
 800fc5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fcbc <floorf+0x78>
 800fc5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6a:	dd05      	ble.n	800fc78 <floorf+0x34>
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	da23      	bge.n	800fcb8 <floorf+0x74>
 800fc70:	4a13      	ldr	r2, [pc, #76]	; (800fcc0 <floorf+0x7c>)
 800fc72:	2900      	cmp	r1, #0
 800fc74:	bf18      	it	ne
 800fc76:	4613      	movne	r3, r2
 800fc78:	ee00 3a10 	vmov	s0, r3
 800fc7c:	4770      	bx	lr
 800fc7e:	4911      	ldr	r1, [pc, #68]	; (800fcc4 <floorf+0x80>)
 800fc80:	4111      	asrs	r1, r2
 800fc82:	420b      	tst	r3, r1
 800fc84:	d0fa      	beq.n	800fc7c <floorf+0x38>
 800fc86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fcbc <floorf+0x78>
 800fc8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc96:	ddef      	ble.n	800fc78 <floorf+0x34>
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	bfbe      	ittt	lt
 800fc9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800fca0:	fa40 f202 	asrlt.w	r2, r0, r2
 800fca4:	189b      	addlt	r3, r3, r2
 800fca6:	ea23 0301 	bic.w	r3, r3, r1
 800fcaa:	e7e5      	b.n	800fc78 <floorf+0x34>
 800fcac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fcb0:	d3e4      	bcc.n	800fc7c <floorf+0x38>
 800fcb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fcb6:	4770      	bx	lr
 800fcb8:	2300      	movs	r3, #0
 800fcba:	e7dd      	b.n	800fc78 <floorf+0x34>
 800fcbc:	7149f2ca 	.word	0x7149f2ca
 800fcc0:	bf800000 	.word	0xbf800000
 800fcc4:	007fffff 	.word	0x007fffff

0800fcc8 <scalbnf>:
 800fcc8:	ee10 3a10 	vmov	r3, s0
 800fccc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fcd0:	d025      	beq.n	800fd1e <scalbnf+0x56>
 800fcd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fcd6:	d302      	bcc.n	800fcde <scalbnf+0x16>
 800fcd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fcdc:	4770      	bx	lr
 800fcde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fce2:	d122      	bne.n	800fd2a <scalbnf+0x62>
 800fce4:	4b2a      	ldr	r3, [pc, #168]	; (800fd90 <scalbnf+0xc8>)
 800fce6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fd94 <scalbnf+0xcc>
 800fcea:	4298      	cmp	r0, r3
 800fcec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fcf0:	db16      	blt.n	800fd20 <scalbnf+0x58>
 800fcf2:	ee10 3a10 	vmov	r3, s0
 800fcf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fcfa:	3a19      	subs	r2, #25
 800fcfc:	4402      	add	r2, r0
 800fcfe:	2afe      	cmp	r2, #254	; 0xfe
 800fd00:	dd15      	ble.n	800fd2e <scalbnf+0x66>
 800fd02:	ee10 3a10 	vmov	r3, s0
 800fd06:	eddf 7a24 	vldr	s15, [pc, #144]	; 800fd98 <scalbnf+0xd0>
 800fd0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fd9c <scalbnf+0xd4>
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	eeb0 7a67 	vmov.f32	s14, s15
 800fd14:	bfb8      	it	lt
 800fd16:	eef0 7a66 	vmovlt.f32	s15, s13
 800fd1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fd1e:	4770      	bx	lr
 800fd20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fda0 <scalbnf+0xd8>
 800fd24:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd28:	4770      	bx	lr
 800fd2a:	0dd2      	lsrs	r2, r2, #23
 800fd2c:	e7e6      	b.n	800fcfc <scalbnf+0x34>
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	dd06      	ble.n	800fd40 <scalbnf+0x78>
 800fd32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fd3a:	ee00 3a10 	vmov	s0, r3
 800fd3e:	4770      	bx	lr
 800fd40:	f112 0f16 	cmn.w	r2, #22
 800fd44:	da1a      	bge.n	800fd7c <scalbnf+0xb4>
 800fd46:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fd4a:	4298      	cmp	r0, r3
 800fd4c:	ee10 3a10 	vmov	r3, s0
 800fd50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd54:	dd0a      	ble.n	800fd6c <scalbnf+0xa4>
 800fd56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fd98 <scalbnf+0xd0>
 800fd5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800fd9c <scalbnf+0xd4>
 800fd5e:	eef0 7a40 	vmov.f32	s15, s0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	bf18      	it	ne
 800fd66:	eeb0 0a47 	vmovne.f32	s0, s14
 800fd6a:	e7db      	b.n	800fd24 <scalbnf+0x5c>
 800fd6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fda0 <scalbnf+0xd8>
 800fd70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fda4 <scalbnf+0xdc>
 800fd74:	eef0 7a40 	vmov.f32	s15, s0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	e7f3      	b.n	800fd64 <scalbnf+0x9c>
 800fd7c:	3219      	adds	r2, #25
 800fd7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fd86:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fda8 <scalbnf+0xe0>
 800fd8a:	ee07 3a10 	vmov	s14, r3
 800fd8e:	e7c4      	b.n	800fd1a <scalbnf+0x52>
 800fd90:	ffff3cb0 	.word	0xffff3cb0
 800fd94:	4c000000 	.word	0x4c000000
 800fd98:	7149f2ca 	.word	0x7149f2ca
 800fd9c:	f149f2ca 	.word	0xf149f2ca
 800fda0:	0da24260 	.word	0x0da24260
 800fda4:	8da24260 	.word	0x8da24260
 800fda8:	33000000 	.word	0x33000000

0800fdac <_init>:
 800fdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdae:	bf00      	nop
 800fdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdb2:	bc08      	pop	{r3}
 800fdb4:	469e      	mov	lr, r3
 800fdb6:	4770      	bx	lr

0800fdb8 <_fini>:
 800fdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdba:	bf00      	nop
 800fdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdbe:	bc08      	pop	{r3}
 800fdc0:	469e      	mov	lr, r3
 800fdc2:	4770      	bx	lr
