
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b198  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800b378  0800b378  0001b378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc7c  0800bc7c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc84  0800bc84  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc84  0800bc84  0001bc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc88  0800bc88  0001bc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bc8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  200001fc  0800be88  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800be88  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000327ce  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000588f  00000000  00000000  000529fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001f3aa  00000000  00000000  00058289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00077638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003af8  00000000  00000000  00078cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f9b  00000000  00000000  0007c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f707  00000000  00000000  000a176b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9d81  00000000  00000000  000d0e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001babf3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bbc  00000000  00000000  001bac44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b360 	.word	0x0800b360

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800b360 	.word	0x0800b360

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:
extern TIM_HandleTypeDef htim15;
extern UART_HandleTypeDef huart3;

MotorController controller;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b500      	push	{lr}
 8000f9e:	b085      	sub	sp, #20
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa0:	4669      	mov	r1, sp
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8000fa4:	f000 f880 	bl	80010a8 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_FDCAN_RxFifo0Callback+0x20>)
 8000faa:	4669      	mov	r1, sp
 8000fac:	f001 fc1a 	bl	80027e4 <MotorController_handleCANMessage>
}
 8000fb0:	b005      	add	sp, #20
 8000fb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb6:	bf00      	nop
 8000fb8:	20000434 	.word	0x20000434
 8000fbc:	20000218 	.word	0x20000218

08000fc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim == &htim1) {
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fc2:	4283      	cmp	r3, r0
 8000fc4:	d000      	beq.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x8>
      MotorController_setMode(&controller, MODE_ERROR);
      controller.error = ERROR_HEARTBEAT_TIMEOUT;
    }
    #endif
  }
}
 8000fc6:	4770      	bx	lr
    MotorController_update(&controller);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000fca:	f001 b97f 	b.w	80022cc <MotorController_update>
 8000fce:	bf00      	nop
 8000fd0:	200005b0 	.word	0x200005b0
 8000fd4:	20000218 	.word	0x20000218

08000fd8 <APP_init>:
  // so putting it here
  // can also comment out this line and just power cycle to update the flash settings
  HAL_FLASH_OB_Launch();
}

void APP_init() {
 8000fd8:	b508      	push	{r3, lr}
  #if FIRST_TIME_BOOTUP
  APP_initFlashOption();
  #endif

  MotorController_init(&controller);
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <APP_init+0x14>)
 8000fdc:	f001 f836 	bl	800204c <MotorController_init>
//  MotorController_setMode(&controller, MODE_TORQUE);
//  controller.position_controller.torque_target = 0;
//  HAL_Delay(1000);
//  MotorController_setMode(&controller, MODE_POSITION);
//  controller.position_controller.position_target = 0;
}
 8000fe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(1000);
 8000fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe8:	f002 bd58 	b.w	8003a9c <HAL_Delay>
 8000fec:	20000218 	.word	0x20000218

08000ff0 <APP_main>:


void APP_main() {
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	ed2d 8b02 	vpush	{d8}
  MotorController_updateService(&controller);
 8000ff6:	4c28      	ldr	r4, [pc, #160]	; (8001098 <APP_main+0xa8>)
//        controller.current_controller.i_a_measured * 1000,
//        controller.current_controller.i_b_measured * 1000,
//        controller.current_controller.i_c_measured * 1000);

  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
      controller.current_controller.i_q_target * 1000,
 8000ff8:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800109c <APP_main+0xac>
void APP_main() {
 8000ffc:	b0aa      	sub	sp, #168	; 0xa8
  MotorController_updateService(&controller);
 8000ffe:	4620      	mov	r0, r4
 8001000:	f001 fbe8 	bl	80027d4 <MotorController_updateService>
      controller.current_controller.i_q_target * 1000,
 8001004:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 8001008:	ee67 7a88 	vmul.f32	s15, s15, s16
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fac2 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_q_setpoint * 1000,
      controller.current_controller.i_q_measured * 1000,
      controller.current_controller.i_d_setpoint * 1000,
      controller.current_controller.i_d_measured * 1000);
 8001014:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 8001018:	ee67 7a88 	vmul.f32	s15, s15, s16
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	ee17 0a90 	vmov	r0, s15
 8001024:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001028:	f7ff fab6 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_d_setpoint * 1000,
 800102c:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 8001030:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001034:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001038:	ee17 0a90 	vmov	r0, s15
 800103c:	f7ff faac 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_q_measured * 1000,
 8001040:	edd4 7a2a 	vldr	s15, [r4, #168]	; 0xa8
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 8001044:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800104c:	ee17 0a90 	vmov	r0, s15
 8001050:	f7ff faa2 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_q_setpoint * 1000,
 8001054:	edd4 7a2c 	vldr	s15, [r4, #176]	; 0xb0
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 8001058:	ee67 7a88 	vmul.f32	s15, s15, s16
 800105c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001060:	ee17 0a90 	vmov	r0, s15
 8001064:	f7ff fa98 	bl	8000598 <__aeabi_f2d>
 8001068:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800106c:	e9cd 0100 	strd	r0, r1, [sp]
 8001070:	490b      	ldr	r1, [pc, #44]	; (80010a0 <APP_main+0xb0>)
 8001072:	a80a      	add	r0, sp, #40	; 0x28
 8001074:	f007 f898 	bl	80081a8 <siprintf>
//      controller.position_controller.torque_setpoint * 1000,
//      controller.position_controller.torque_measured * 1000,
//      controller.current_controller.i_q_setpoint);


  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 8001078:	a80a      	add	r0, sp, #40	; 0x28
 800107a:	f7ff f8d1 	bl	8000220 <strlen>
 800107e:	4602      	mov	r2, r0
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	b292      	uxth	r2, r2
 8001086:	a90a      	add	r1, sp, #40	; 0x28
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <APP_main+0xb4>)
 800108a:	f006 fa83 	bl	8007594 <HAL_UART_Transmit>
//  HAL_Delay(5);
}
 800108e:	b02a      	add	sp, #168	; 0xa8
 8001090:	ecbd 8b02 	vpop	{d8}
 8001094:	bd10      	pop	{r4, pc}
 8001096:	bf00      	nop
 8001098:	20000218 	.word	0x20000218
 800109c:	447a0000 	.word	0x447a0000
 80010a0:	0800b378 	.word	0x0800b378
 80010a4:	200006e0 	.word	0x200006e0

080010a8 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 80010a8:	b510      	push	{r4, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	460c      	mov	r4, r1
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 80010ae:	f101 0308 	add.w	r3, r1, #8
 80010b2:	466a      	mov	r2, sp
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	f003 fc83 	bl	80049c0 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80010ba:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
  switch (rx_header.DataLength) {
 80010be:	9b03      	ldr	r3, [sp, #12]
  rx_frame->id = rx_header.Identifier;
 80010c0:	9800      	ldr	r0, [sp, #0]
 80010c2:	6020      	str	r0, [r4, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80010c4:	3900      	subs	r1, #0
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80010c6:	fab2 f282 	clz	r2, r2
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80010ca:	bf18      	it	ne
 80010cc:	2101      	movne	r1, #1
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80010ce:	0952      	lsrs	r2, r2, #5
  switch (rx_header.DataLength) {
 80010d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80010d4:	7121      	strb	r1, [r4, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80010d6:	7162      	strb	r2, [r4, #5]
  switch (rx_header.DataLength) {
 80010d8:	d036      	beq.n	8001148 <CAN_getRxFrame+0xa0>
 80010da:	d814      	bhi.n	8001106 <CAN_getRxFrame+0x5e>
 80010dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80010e0:	d026      	beq.n	8001130 <CAN_getRxFrame+0x88>
 80010e2:	d906      	bls.n	80010f2 <CAN_getRxFrame+0x4a>
 80010e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010e8:	d11e      	bne.n	8001128 <CAN_getRxFrame+0x80>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 80010ea:	2304      	movs	r3, #4
 80010ec:	80e3      	strh	r3, [r4, #6]
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
    default:
      rx_frame->size = 0;
  }
}
 80010ee:	b00a      	add	sp, #40	; 0x28
 80010f0:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 80010f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f6:	d01f      	beq.n	8001138 <CAN_getRxFrame+0x90>
 80010f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010fc:	d114      	bne.n	8001128 <CAN_getRxFrame+0x80>
      rx_frame->size = 2; break;
 80010fe:	2302      	movs	r3, #2
 8001100:	80e3      	strh	r3, [r4, #6]
}
 8001102:	b00a      	add	sp, #40	; 0x28
 8001104:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 8001106:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800110a:	d019      	beq.n	8001140 <CAN_getRxFrame+0x98>
 800110c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001110:	d103      	bne.n	800111a <CAN_getRxFrame+0x72>
      rx_frame->size = 8; break;
 8001112:	2308      	movs	r3, #8
 8001114:	80e3      	strh	r3, [r4, #6]
}
 8001116:	b00a      	add	sp, #40	; 0x28
 8001118:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 800111a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800111e:	d103      	bne.n	8001128 <CAN_getRxFrame+0x80>
      rx_frame->size = 6; break;
 8001120:	2306      	movs	r3, #6
 8001122:	80e3      	strh	r3, [r4, #6]
}
 8001124:	b00a      	add	sp, #40	; 0x28
 8001126:	bd10      	pop	{r4, pc}
      rx_frame->size = 0; break;
 8001128:	2300      	movs	r3, #0
 800112a:	80e3      	strh	r3, [r4, #6]
}
 800112c:	b00a      	add	sp, #40	; 0x28
 800112e:	bd10      	pop	{r4, pc}
      rx_frame->size = 3; break;
 8001130:	2303      	movs	r3, #3
 8001132:	80e3      	strh	r3, [r4, #6]
}
 8001134:	b00a      	add	sp, #40	; 0x28
 8001136:	bd10      	pop	{r4, pc}
      rx_frame->size = 1; break;
 8001138:	2301      	movs	r3, #1
 800113a:	80e3      	strh	r3, [r4, #6]
}
 800113c:	b00a      	add	sp, #40	; 0x28
 800113e:	bd10      	pop	{r4, pc}
      rx_frame->size = 7; break;
 8001140:	2307      	movs	r3, #7
 8001142:	80e3      	strh	r3, [r4, #6]
}
 8001144:	b00a      	add	sp, #40	; 0x28
 8001146:	bd10      	pop	{r4, pc}
      rx_frame->size = 5; break;
 8001148:	2305      	movs	r3, #5
 800114a:	80e3      	strh	r3, [r4, #6]
}
 800114c:	b00a      	add	sp, #40	; 0x28
 800114e:	bd10      	pop	{r4, pc}

08001150 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8001150:	b530      	push	{r4, r5, lr}
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001152:	790b      	ldrb	r3, [r1, #4]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001154:	794c      	ldrb	r4, [r1, #5]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001156:	2b00      	cmp	r3, #0
  switch (tx_frame->size) {
 8001158:	88cb      	ldrh	r3, [r1, #6]
HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 800115a:	b08b      	sub	sp, #44	; 0x2c
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800115c:	bf0c      	ite	eq
 800115e:	2200      	moveq	r2, #0
 8001160:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001164:	2c01      	cmp	r4, #1
  tx_header.Identifier = tx_frame->id;
 8001166:	680c      	ldr	r4, [r1, #0]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001168:	bf0c      	ite	eq
 800116a:	2500      	moveq	r5, #0
 800116c:	f04f 5500 	movne.w	r5, #536870912	; 0x20000000
  switch (tx_frame->size) {
 8001170:	3b01      	subs	r3, #1
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001172:	e9cd 4201 	strd	r4, r2, [sp, #4]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001176:	9503      	str	r5, [sp, #12]
  switch (tx_frame->size) {
 8001178:	2b07      	cmp	r3, #7
 800117a:	d833      	bhi.n	80011e4 <CAN_putTxFrame+0x94>
 800117c:	e8df f003 	tbb	[pc, r3]
 8001180:	221e1a16 	.word	0x221e1a16
 8001184:	042e2a26 	.word	0x042e2a26
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 8001188:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800118c:	9304      	str	r3, [sp, #16]
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800118e:	2300      	movs	r3, #0
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  tx_header.MessageMarker = 0;

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001190:	f101 0208 	add.w	r2, r1, #8
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8001194:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001198:	a901      	add	r1, sp, #4
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800119a:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800119e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  tx_header.MessageMarker = 0;
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 80011a4:	f003 fba6 	bl	80048f4 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80011a8:	b00b      	add	sp, #44	; 0x2c
 80011aa:	bd30      	pop	{r4, r5, pc}
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	9304      	str	r3, [sp, #16]
 80011b2:	e7ec      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80011b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b8:	9304      	str	r3, [sp, #16]
 80011ba:	e7e8      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80011bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011c0:	9304      	str	r3, [sp, #16]
 80011c2:	e7e4      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 80011c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011c8:	9304      	str	r3, [sp, #16]
 80011ca:	e7e0      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 80011cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011d0:	9304      	str	r3, [sp, #16]
 80011d2:	e7dc      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 80011d4:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	e7d8      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 80011dc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80011e0:	9304      	str	r3, [sp, #16]
 80011e2:	e7d4      	b.n	800118e <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80011e4:	2300      	movs	r3, #0
 80011e6:	9304      	str	r3, [sp, #16]
 80011e8:	e7d1      	b.n	800118e <CAN_putTxFrame+0x3e>
 80011ea:	bf00      	nop

080011ec <CurrentController_init>:
//  controller->i_d_ki = 0.003;

  controller->i_kp = 0.0348;
  controller->i_ki = 33;

  controller->i_filter_alpha = 0.1;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <CurrentController_init+0x1c>)
  controller->i_kp = 0.0348;
 80011ee:	f8df c020 	ldr.w	ip, [pc, #32]	; 8001210 <CurrentController_init+0x24>
  controller->i_ki = 33;
 80011f2:	4906      	ldr	r1, [pc, #24]	; (800120c <CurrentController_init+0x20>)
  controller->i_kp = 0.0348;
 80011f4:	f8c0 c004 	str.w	ip, [r0, #4]
  controller->i_limit = 0.1;

  controller->i_q_measured = 0;
 80011f8:	2300      	movs	r3, #0
  controller->i_ki = 33;
 80011fa:	6081      	str	r1, [r0, #8]
  controller->i_filter_alpha = 0.1;
 80011fc:	6002      	str	r2, [r0, #0]
  controller->i_limit = 0.1;
 80011fe:	60c2      	str	r2, [r0, #12]
  controller->i_q_measured = 0;
 8001200:	6503      	str	r3, [r0, #80]	; 0x50
  controller->i_d_measured = 0;
 8001202:	6543      	str	r3, [r0, #84]	; 0x54
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	3dcccccd 	.word	0x3dcccccd
 800120c:	42040000 	.word	0x42040000
 8001210:	3d0e8a72 	.word	0x3d0e8a72

08001214 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 8001214:	b530      	push	{r4, r5, lr}
 8001216:	ed2d 8b04 	vpush	{d8-d9}
 800121a:	4604      	mov	r4, r0
 800121c:	b083      	sub	sp, #12
 800121e:	eef0 8a40 	vmov.f32	s17, s0
 8001222:	eeb0 9a60 	vmov.f32	s18, s1
  FOC_clarkTransform(
 8001226:	ed90 0a04 	vldr	s0, [r0, #16]
 800122a:	edd0 0a05 	vldr	s1, [r0, #20]
void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 800122e:	460d      	mov	r5, r1
 8001230:	eeb0 8a41 	vmov.f32	s16, s2
  FOC_clarkTransform(
 8001234:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8001238:	ed90 1a06 	vldr	s2, [r0, #24]
 800123c:	3028      	adds	r0, #40	; 0x28
 800123e:	f000 f9a3 	bl	8001588 <FOC_clarkTransform>
      controller->i_c_measured);

  float i_q_measured_current;
  float i_d_measured_current;

  FOC_parkTransform(
 8001242:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
 8001246:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 800124a:	eef0 1a49 	vmov.f32	s3, s18
 800124e:	eeb0 1a68 	vmov.f32	s2, s17
 8001252:	a901      	add	r1, sp, #4
 8001254:	4668      	mov	r0, sp
 8001256:	f000 f9b3 	bl	80015c0 <FOC_parkTransform>
      &i_d_measured_current,
      controller->i_alpha_measured,
      controller->i_beta_measured,
      sin_theta, cos_theta);

  if (mode != MODE_IQD_OVERRIDE) {
 800125a:	2d23      	cmp	r5, #35	; 0x23
 800125c:	f000 80e6 	beq.w	800142c <CurrentController_update+0x218>
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001260:	edd4 5a14 	vldr	s11, [r4, #80]	; 0x50
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001264:	ed94 6a15 	vldr	s12, [r4, #84]	; 0x54
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001268:	ed9d 7a00 	vldr	s14, [sp]
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 800126c:	eddd 7a01 	vldr	s15, [sp, #4]
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001270:	edd4 6a00 	vldr	s13, [r4]
 8001274:	ee37 7a65 	vsub.f32	s14, s14, s11
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001278:	ee77 7ac6 	vsub.f32	s15, s15, s12
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 800127c:	ee27 7a26 	vmul.f32	s14, s14, s13
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001280:	ee67 7aa6 	vmul.f32	s15, s15, s13
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001284:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001288:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
    controller->i_d_measured = 0;
  }

  controller->i_q_setpoint = clampf(
      controller->i_q_target,
      -controller->i_limit,
 800128c:	edd4 7a03 	vldr	s15, [r4, #12]
  controller->i_q_setpoint = clampf(
 8001290:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
static inline int32_t min(int32_t a, int32_t b) {
  return a < b ? a : b;
}

static inline float clampf(float value, float min, float max) {
  return (value > max) ? max : ((value < min) ? min : value);
 8001294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	eeb1 6a67 	vneg.f32	s12, s15
 80012a0:	f300 8092 	bgt.w	80013c8 <CurrentController_update+0x1b4>
 80012a4:	eeb4 7a46 	vcmp.f32	s14, s12
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	bf48      	it	mi
 80012ae:	eeb0 7a46 	vmovmi.f32	s14, s12
      controller->i_limit);
  controller->i_d_setpoint = clampf(
 80012b2:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
  controller->i_q_setpoint = clampf(
 80012b6:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 80012ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d408      	bmi.n	80012d6 <CurrentController_update+0xc2>
 80012c4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	bfd4      	ite	le
 80012ce:	eef0 7a66 	vmovle.f32	s15, s13
 80012d2:	eef0 7a46 	vmovgt.f32	s15, s12
      controller->i_d_target,
      -controller->i_limit,
      controller->i_limit);

  if (mode != MODE_VQD_OVERRIDE) {
 80012d6:	2d22      	cmp	r5, #34	; 0x22
  controller->i_d_setpoint = clampf(
 80012d8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
  if (mode != MODE_VQD_OVERRIDE) {
 80012dc:	f000 808c 	beq.w	80013f8 <CurrentController_update+0x1e4>
    float i_q_error = controller->i_kp * (controller->i_q_setpoint - controller->i_q_measured);
 80012e0:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 80012e4:	ed94 6a01 	vldr	s12, [r4, #4]
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);

    controller->v_q_target = i_q_error + controller->i_q_integrator;
 80012e8:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);
 80012ec:	edd4 5a15 	vldr	s11, [r4, #84]	; 0x54
    controller->v_d_target = i_d_error + controller->i_d_integrator;

    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_ki * i_q_error, -10.f, 10.f);
 80012f0:	edd4 4a02 	vldr	s9, [r4, #8]
    float i_q_error = controller->i_kp * (controller->i_q_setpoint - controller->i_q_measured);
 80012f4:	ee37 7a40 	vsub.f32	s14, s14, s0
    controller->i_q_integrator = clampf(
 80012f8:	eeb0 5a66 	vmov.f32	s10, s13
    float i_q_error = controller->i_kp * (controller->i_q_setpoint - controller->i_q_measured);
 80012fc:	ee27 7a06 	vmul.f32	s14, s14, s12
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);
 8001300:	ee77 7ae5 	vsub.f32	s15, s15, s11
    controller->i_q_integrator = clampf(
 8001304:	eea4 5a87 	vfma.f32	s10, s9, s14
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);
 8001308:	ee67 7a86 	vmul.f32	s15, s15, s12
    controller->v_d_target = i_d_error + controller->i_d_integrator;
 800130c:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
    controller->v_q_target = i_q_error + controller->i_q_integrator;
 8001310:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001314:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    controller->v_d_target = i_d_error + controller->i_d_integrator;
 8001318:	ee76 0a27 	vadd.f32	s1, s12, s15
 800131c:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->v_q_target = i_q_error + controller->i_q_integrator;
 8001324:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    controller->v_d_target = i_d_error + controller->i_d_integrator;
 8001328:	edc4 0a0f 	vstr	s1, [r4, #60]	; 0x3c
 800132c:	dc4f      	bgt.n	80013ce <CurrentController_update+0x1ba>
 800132e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001332:	eeb4 5a66 	vcmp.f32	s10, s13
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	bf48      	it	mi
 800133c:	eeb0 5a66 	vmovmi.f32	s10, s13
    controller->i_d_integrator = clampf(
 8001340:	eef0 6a46 	vmov.f32	s13, s12
 8001344:	eee4 6aa7 	vfma.f32	s13, s9, s15
 8001348:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800134c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->i_q_integrator = clampf(
 8001354:	ed84 5a18 	vstr	s10, [r4, #96]	; 0x60
 8001358:	dc6c      	bgt.n	8001434 <CurrentController_update+0x220>
 800135a:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 800135e:	eef4 6a67 	vcmp.f32	s13, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	bf48      	it	mi
 8001368:	eef0 6a67 	vmovmi.f32	s13, s15
    // user controls `controller->v_q_target` and `controller->v_d_target`
  }

  float k = 1.f;
  // clamp voltage
  if (v_bus > 0.f) {
 800136c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->i_d_integrator = clampf(
 8001374:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
  if (v_bus > 0.f) {
 8001378:	dd0e      	ble.n	8001398 <CurrentController_update+0x184>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15f;
    float v_norm = (
        (controller->v_q_target * controller->v_q_target)
        + (controller->v_d_target * controller->v_d_target)
 800137a:	ee60 7aa0 	vmul.f32	s15, s1, s1
    float v_max_sq = v_bus * v_bus * 1.15f;
 800137e:	ee28 8a08 	vmul.f32	s16, s16, s16
    float v_norm = (
 8001382:	eee7 7a07 	vfma.f32	s15, s14, s14
    float v_max_sq = v_bus * v_bus * 1.15f;
 8001386:	eddf 6a39 	vldr	s13, [pc, #228]	; 800146c <CurrentController_update+0x258>
 800138a:	ee28 8a26 	vmul.f32	s16, s16, s13
        );
    if (v_norm > v_max_sq) {
 800138e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d450      	bmi.n	800143a <CurrentController_update+0x226>
  }
  controller->v_q_setpoint = k * controller->v_q_target;
  controller->v_d_setpoint = k * controller->v_d_target;


  if (mode != MODE_VALPHABETA_OVERRIDE && mode != MODE_CALIBRATION) {
 8001398:	2d21      	cmp	r5, #33	; 0x21
  controller->v_q_setpoint = k * controller->v_q_target;
 800139a:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
  controller->v_d_setpoint = k * controller->v_d_target;
 800139e:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
  if (mode != MODE_VALPHABETA_OVERRIDE && mode != MODE_CALIBRATION) {
 80013a2:	d001      	beq.n	80013a8 <CurrentController_update+0x194>
 80013a4:	2d05      	cmp	r5, #5
 80013a6:	d115      	bne.n	80013d4 <CurrentController_update+0x1c0>
        controller->v_d_setpoint,
        sin_theta, cos_theta);
  }

  if (mode != MODE_VABC_OVERRIDE) {
    FOC_invClarkSVPWM(
 80013a8:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 80013ac:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80013b0:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80013b4:	f104 0120 	add.w	r1, r4, #32
 80013b8:	f104 001c 	add.w	r0, r4, #28
 80013bc:	f000 f91c 	bl	80015f8 <FOC_invClarkSVPWM>
        &controller->v_b_setpoint,
        &controller->v_c_setpoint,
        controller->v_alpha_setpoint,
        controller->v_beta_setpoint);
  }
}
 80013c0:	b003      	add	sp, #12
 80013c2:	ecbd 8b04 	vpop	{d8-d9}
 80013c6:	bd30      	pop	{r4, r5, pc}
 80013c8:	eeb0 7a67 	vmov.f32	s14, s15
 80013cc:	e771      	b.n	80012b2 <CurrentController_update+0x9e>
 80013ce:	eeb0 5a66 	vmov.f32	s10, s13
 80013d2:	e7b5      	b.n	8001340 <CurrentController_update+0x12c>
    FOC_invParkTransform(
 80013d4:	eef0 1a49 	vmov.f32	s3, s18
 80013d8:	eeb0 1a68 	vmov.f32	s2, s17
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80013e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80013e8:	f000 f8f8 	bl	80015dc <FOC_invParkTransform>
  if (mode != MODE_VABC_OVERRIDE) {
 80013ec:	2d20      	cmp	r5, #32
 80013ee:	d1db      	bne.n	80013a8 <CurrentController_update+0x194>
}
 80013f0:	b003      	add	sp, #12
 80013f2:	ecbd 8b04 	vpop	{d8-d9}
 80013f6:	bd30      	pop	{r4, r5, pc}
  if (v_bus > 0.f) {
 80013f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        (controller->v_q_target * controller->v_q_target)
 8001400:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
        + (controller->v_d_target * controller->v_d_target)
 8001404:	edd4 0a0f 	vldr	s1, [r4, #60]	; 0x3c
  if (v_bus > 0.f) {
 8001408:	dcb7      	bgt.n	800137a <CurrentController_update+0x166>
    FOC_invParkTransform(
 800140a:	eef0 1a49 	vmov.f32	s3, s18
 800140e:	eeb0 1a68 	vmov.f32	s2, s17
 8001412:	eeb0 0a47 	vmov.f32	s0, s14
  controller->v_q_setpoint = k * controller->v_q_target;
 8001416:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
  controller->v_d_setpoint = k * controller->v_d_target;
 800141a:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
    FOC_invParkTransform(
 800141e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8001422:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001426:	f000 f8d9 	bl	80015dc <FOC_invParkTransform>
  if (mode != MODE_VABC_OVERRIDE) {
 800142a:	e7bd      	b.n	80013a8 <CurrentController_update+0x194>
    controller->i_q_measured = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	6523      	str	r3, [r4, #80]	; 0x50
    controller->i_d_measured = 0;
 8001430:	6563      	str	r3, [r4, #84]	; 0x54
 8001432:	e72b      	b.n	800128c <CurrentController_update+0x78>
 8001434:	eef0 6a67 	vmov.f32	s13, s15
 8001438:	e798      	b.n	800136c <CurrentController_update+0x158>
      k = sqrtf(fabsf(v_norm / v_max_sq));
 800143a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800143e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d406      	bmi.n	8001456 <CurrentController_update+0x242>
 8001448:	eef1 7ac0 	vsqrt.f32	s15, s0
  controller->v_q_setpoint = k * controller->v_q_target;
 800144c:	ee27 7a27 	vmul.f32	s14, s14, s15
  controller->v_d_setpoint = k * controller->v_d_target;
 8001450:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001454:	e7a0      	b.n	8001398 <CurrentController_update+0x184>
      k = sqrtf(fabsf(v_norm / v_max_sq));
 8001456:	f009 f9c9 	bl	800a7ec <sqrtf>
  controller->v_q_setpoint = k * controller->v_q_target;
 800145a:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
  controller->v_d_setpoint = k * controller->v_d_target;
 800145e:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
  controller->v_q_setpoint = k * controller->v_q_target;
 8001462:	ee20 7a07 	vmul.f32	s14, s0, s14
  controller->v_d_setpoint = k * controller->v_d_target;
 8001466:	ee60 0a25 	vmul.f32	s1, s0, s11
 800146a:	e795      	b.n	8001398 <CurrentController_update+0x184>
 800146c:	3f933333 	.word	0x3f933333

08001470 <Encoder_init>:
void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi) {
  encoder->hspi = hspi;

  encoder->cpr = -1 * (1 << 14);  // 14 bit precision

  encoder->position_offset = 0.f;
 8001470:	2300      	movs	r3, #0
void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi) {
 8001472:	b410      	push	{r4}
  Encoder_setFilterBandwidth(encoder, 2e4f / 20e6f);

  encoder->position_raw = 0;
 8001474:	2200      	movs	r2, #0
  encoder->cpr = -1 * (1 << 14);  // 14 bit precision
 8001476:	4c07      	ldr	r4, [pc, #28]	; (8001494 <Encoder_init+0x24>)
  encoder->position = 0.f;
  encoder->velocity = 0.f;
}

void Encoder_setFilterBandwidth(Encoder *encoder, float bandwidth) {
  encoder->filter_alpha = clampf(1 - pow(M_E, -2 * M_PI * bandwidth), 0, 1);
 8001478:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8001498 <Encoder_init+0x28>
  encoder->cpr = -1 * (1 << 14);  // 14 bit precision
 800147c:	6084      	str	r4, [r0, #8]
  encoder->hspi = hspi;
 800147e:	6001      	str	r1, [r0, #0]
}
 8001480:	f85d 4b04 	ldr.w	r4, [sp], #4
  encoder->position_offset = 0.f;
 8001484:	60c3      	str	r3, [r0, #12]
  encoder->filter_alpha = clampf(1 - pow(M_E, -2 * M_PI * bandwidth), 0, 1);
 8001486:	f8c0 c010 	str.w	ip, [r0, #16]
  encoder->position_raw = 0;
 800148a:	8282      	strh	r2, [r0, #20]
  encoder->n_rotations = 0;
 800148c:	6182      	str	r2, [r0, #24]
  encoder->position = 0.f;
 800148e:	61c3      	str	r3, [r0, #28]
  encoder->velocity = 0.f;
 8001490:	6203      	str	r3, [r0, #32]
}
 8001492:	4770      	bx	lr
 8001494:	ffffc000 	.word	0xffffc000
 8001498:	3bcd3df1 	.word	0x3bcd3df1

0800149c <Encoder_update>:
//  float w3db = (1. / 8000.) * 2 * M_PI * encoder->filter_bandwidth;
//  encoder->filter_k_p = .5 * (2 * w3db);
//  encoder->filter_k_i = .5 * (w3db * w3db);
}

void Encoder_update(Encoder *encoder, float dt) {
 800149c:	b510      	push	{r4, lr}
 800149e:	ed2d 8b02 	vpush	{d8}
  encoder->spi_tx_buffer = 0x3FFF | (1 << 14);
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
void Encoder_update(Encoder *encoder, float dt) {
 80014a6:	4604      	mov	r4, r0
 80014a8:	b082      	sub	sp, #8
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 80014aa:	8083      	strh	r3, [r0, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
void Encoder_update(Encoder *encoder, float dt) {
 80014b6:	eeb0 8a40 	vmov.f32	s16, s0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80014ba:	f003 fead 	bl	8005218 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1, 100);
 80014be:	4621      	mov	r1, r4
 80014c0:	2264      	movs	r2, #100	; 0x64
 80014c2:	f851 0b04 	ldr.w	r0, [r1], #4
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	1da2      	adds	r2, r4, #6
 80014cc:	f004 fe38 	bl	8006140 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f003 fe9d 	bl	8005218 <HAL_GPIO_WritePin>

  // reading is center aligned with range [-cpr/2, cpr/2)
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 80014de:	68a0      	ldr	r0, [r4, #8]
 80014e0:	88e3      	ldrh	r3, [r4, #6]

  // handle multi-rotation crossing
  int16_t reading_delta = encoder->position_raw - reading;
 80014e2:	8aa2      	ldrh	r2, [r4, #20]
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 80014e4:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 80014e8:	1049      	asrs	r1, r1, #1
 80014ea:	2900      	cmp	r1, #0
 80014ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014f0:	bfb8      	it	lt
 80014f2:	4249      	neglt	r1, r1
 80014f4:	fa1f fc81 	uxth.w	ip, r1
  int16_t reading_delta = encoder->position_raw - reading;
 80014f8:	1ad2      	subs	r2, r2, r3
 80014fa:	4462      	add	r2, ip
 80014fc:	b212      	sxth	r2, r2
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 80014fe:	eba3 030c 	sub.w	r3, r3, ip
  if (abs(reading_delta) > abs(encoder->cpr / 2)) {
 8001502:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 8001506:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 800150a:	fa1f fc8c 	uxth.w	ip, ip
 800150e:	4561      	cmp	r1, ip
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 8001510:	b21b      	sxth	r3, r3
  if (abs(reading_delta) > abs(encoder->cpr / 2)) {
 8001512:	db2e      	blt.n	8001572 <Encoder_update+0xd6>
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
  }
  encoder->position_raw = reading;

  float position = (((float)reading / (float)encoder->cpr) + encoder->n_rotations) * (M_2PI_F);
 8001514:	69a2      	ldr	r2, [r4, #24]

  float delta_position = position - encoder->position;
 8001516:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8001584 <Encoder_update+0xe8>
  encoder->position_raw = reading;
 800151a:	82a3      	strh	r3, [r4, #20]
  float position = (((float)reading / (float)encoder->cpr) + encoder->n_rotations) * (M_2PI_F);
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001524:	ee07 0a90 	vmov	s15, r0
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ee07 2a10 	vmov	s14, r2
 8001530:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001534:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  float delta_position = position - encoder->position;
 8001538:	edd4 7a07 	vldr	s15, [r4, #28]
  delta_position *= encoder->filter_alpha;
 800153c:	ed94 6a04 	vldr	s12, [r4, #16]
  float position = (((float)reading / (float)encoder->cpr) + encoder->n_rotations) * (M_2PI_F);
 8001540:	ee76 6a87 	vadd.f32	s13, s13, s14
  float delta_position = position - encoder->position;
 8001544:	eeb0 7a67 	vmov.f32	s14, s15
 8001548:	ee96 7aa5 	vfnms.f32	s14, s13, s11
  encoder->position += delta_position;

  // subtract the offset to get "true" revolution
//  encoder->position_relative = wrapTo2Pi(encoder->position);

  if (dt > 0) {
 800154c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  delta_position *= encoder->filter_alpha;
 8001550:	ee27 7a06 	vmul.f32	s14, s14, s12
  if (dt > 0) {
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  encoder->position += delta_position;
 8001558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800155c:	edc4 7a07 	vstr	s15, [r4, #28]
    encoder->velocity = (delta_position / dt);
 8001560:	bfc4      	itt	gt
 8001562:	eec7 7a08 	vdivgt.f32	s15, s14, s16
 8001566:	edc4 7a08 	vstrgt	s15, [r4, #32]
  }
}
 800156a:	b002      	add	sp, #8
 800156c:	ecbd 8b02 	vpop	{d8}
 8001570:	bd10      	pop	{r4, pc}
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
 8001572:	2a00      	cmp	r2, #0
 8001574:	69a1      	ldr	r1, [r4, #24]
 8001576:	bfcc      	ite	gt
 8001578:	f04f 32ff 	movgt.w	r2, #4294967295
 800157c:	2201      	movle	r2, #1
 800157e:	440a      	add	r2, r1
 8001580:	61a2      	str	r2, [r4, #24]
 8001582:	e7c8      	b.n	8001516 <Encoder_update+0x7a>
 8001584:	40c90fdb 	.word	0x40c90fdb

08001588 <FOC_clarkTransform>:
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001588:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800158c:	eef0 7a60 	vmov.f32	s15, s1
 8001590:	eed0 7a07 	vfnms.f32	s15, s0, s14
 8001594:	eddf 6a08 	vldr	s13, [pc, #32]	; 80015b8 <FOC_clarkTransform+0x30>
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001598:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80015bc <FOC_clarkTransform+0x34>
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 800159c:	ee77 7ac1 	vsub.f32	s15, s15, s2
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 80015a0:	ee70 0ac1 	vsub.f32	s1, s1, s2
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 80015a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 80015a8:	ee60 0a87 	vmul.f32	s1, s1, s14
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 80015ac:	edc0 7a00 	vstr	s15, [r0]
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 80015b0:	edc1 0a00 	vstr	s1, [r1]
}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	3eaaaaab 	.word	0x3eaaaaab
 80015bc:	3f13cd3a 	.word	0x3f13cd3a

080015c0 <FOC_parkTransform>:

void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 80015c0:	ee60 7a41 	vnmul.f32	s15, s0, s2
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 80015c4:	ee20 1a81 	vmul.f32	s2, s1, s2
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 80015c8:	eee1 7aa0 	vfma.f32	s15, s3, s1
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 80015cc:	eea1 1a80 	vfma.f32	s2, s3, s0
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 80015d0:	edc0 7a00 	vstr	s15, [r0]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 80015d4:	ed81 1a00 	vstr	s2, [r1]
}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <FOC_invParkTransform>:
 80015dc:	ee61 7a40 	vnmul.f32	s15, s2, s0
 80015e0:	ee20 1a81 	vmul.f32	s2, s1, s2
 80015e4:	eee0 7aa1 	vfma.f32	s15, s1, s3
 80015e8:	eea0 1a21 	vfma.f32	s2, s0, s3
 80015ec:	edc0 7a00 	vstr	s15, [r0]
 80015f0:	ed81 1a00 	vstr	s2, [r1]
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <FOC_invClarkSVPWM>:
  *v_beta   =  (cos_theta * v_q) + (sin_theta * v_d);
}

void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
  float v_a_phase = v_alpha;
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 80015f8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800169c <FOC_invClarkSVPWM+0xa4>
 80015fc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001600:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001604:	eef0 7a60 	vmov.f32	s15, s1
 8001608:	eee0 7a07 	vfma.f32	s15, s0, s14
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 800160c:	eed0 0a07 	vfnms.f32	s1, s0, s14
static inline float fast_fminf(float a, float b) {
  return a < b ? a : b;
}

static inline float fast_fmaxf3(float a, float b, float c) {
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 8001610:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	dd27      	ble.n	800166a <FOC_invClarkSVPWM+0x72>
 800161a:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

static inline float fast_fminf3(float a, float b, float c) {
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 8001622:	eeb4 0ae7 	vcmpe.f32	s0, s15
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 8001626:	bfd4      	ite	le
 8001628:	eeb0 7a60 	vmovle.f32	s14, s1
 800162c:	eeb0 7a40 	vmovgt.f32	s14, s0
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	d527      	bpl.n	8001686 <FOC_invClarkSVPWM+0x8e>
 8001636:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	bf54      	ite	pl
 8001640:	eef0 6a60 	vmovpl.f32	s13, s1
 8001644:	eef0 6a40 	vmovmi.f32	s13, s0

  float v_neutral = .5f * (fast_fmaxf3(v_a_phase, v_b_phase, v_c_phase) + fast_fminf3(v_a_phase, v_b_phase, v_c_phase));
 8001648:	ee37 7a26 	vadd.f32	s14, s14, s13

  *v_a = v_a_phase - v_neutral;
 800164c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001650:	eea7 0a66 	vfms.f32	s0, s14, s13
  *v_b = v_b_phase - v_neutral;
 8001654:	eee7 7a66 	vfms.f32	s15, s14, s13
  *v_c = v_c_phase - v_neutral;
 8001658:	eee7 0a66 	vfms.f32	s1, s14, s13
  *v_a = v_a_phase - v_neutral;
 800165c:	ed80 0a00 	vstr	s0, [r0]
  *v_b = v_b_phase - v_neutral;
 8001660:	edc1 7a00 	vstr	s15, [r1]
  *v_c = v_c_phase - v_neutral;
 8001664:	edc2 0a00 	vstr	s1, [r2]
}
 8001668:	4770      	bx	lr
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 800166a:	eef4 7ae0 	vcmpe.f32	s15, s1
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 8001672:	eeb4 0ae7 	vcmpe.f32	s0, s15
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 8001676:	bfd4      	ite	le
 8001678:	eeb0 7a60 	vmovle.f32	s14, s1
 800167c:	eeb0 7a67 	vmovgt.f32	s14, s15
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d4d7      	bmi.n	8001636 <FOC_invClarkSVPWM+0x3e>
 8001686:	eef4 7ae0 	vcmpe.f32	s15, s1
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	bf54      	ite	pl
 8001690:	eef0 6a60 	vmovpl.f32	s13, s1
 8001694:	eef0 6a67 	vmovmi.f32	s13, s15
 8001698:	e7d6      	b.n	8001648 <FOC_invClarkSVPWM+0x50>
 800169a:	bf00      	nop
 800169c:	3f5db3d7 	.word	0x3f5db3d7

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a4:	2238      	movs	r2, #56	; 0x38
 80016a6:	2100      	movs	r1, #0
 80016a8:	a806      	add	r0, sp, #24
 80016aa:	f006 f90b 	bl	80078c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	2000      	movs	r0, #0
 80016b0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80016b4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80016b8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016ba:	f003 fe53 	bl	8005364 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016be:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c2:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c6:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016cc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 20;
 80016ce:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 20;
 80016d4:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016de:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f003 febe 	bl	8005460 <HAL_RCC_OscConfig>
 80016e4:	b108      	cbz	r0, 80016ea <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ea:	2104      	movs	r1, #4
 80016ec:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f2:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	f004 f932 	bl	8005968 <HAL_RCC_ClockConfig>
 8001704:	b108      	cbz	r0, 800170a <SystemClock_Config+0x6a>
 8001706:	b672      	cpsid	i
  while (1)
 8001708:	e7fe      	b.n	8001708 <SystemClock_Config+0x68>
}
 800170a:	b014      	add	sp, #80	; 0x50
 800170c:	bd10      	pop	{r4, pc}
 800170e:	bf00      	nop

08001710 <main>:
{
 8001710:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	2400      	movs	r4, #0
{
 8001716:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8001718:	f002 f99e 	bl	8003a58 <HAL_Init>
  SystemClock_Config();
 800171c:	f7ff ffc0 	bl	80016a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8001724:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4ba9      	ldr	r3, [pc, #676]	; (80019d0 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800172e:	48a9      	ldr	r0, [pc, #676]	; (80019d4 <main+0x2c4>)
  hadc1.Instance = ADC1;
 8001730:	4da9      	ldr	r5, [pc, #676]	; (80019d8 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	f042 0204 	orr.w	r2, r2, #4
 8001736:	64da      	str	r2, [r3, #76]	; 0x4c
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	f002 0204 	and.w	r2, r2, #4
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001744:	f042 0220 	orr.w	r2, r2, #32
 8001748:	64da      	str	r2, [r3, #76]	; 0x4c
 800174a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174c:	f002 0220 	and.w	r2, r2, #32
 8001750:	9202      	str	r2, [sp, #8]
 8001752:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
 800175c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800175e:	f002 0201 	and.w	r2, r2, #1
 8001762:	9203      	str	r2, [sp, #12]
 8001764:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001768:	f042 0202 	orr.w	r2, r2, #2
 800176c:	64da      	str	r2, [r3, #76]	; 0x4c
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001774:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001778:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800177a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800177e:	f003 fd4b 	bl	8005218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001782:	4622      	mov	r2, r4
 8001784:	2104      	movs	r1, #4
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f003 fd45 	bl	8005218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f003 fd3e 	bl	8005218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800179c:	488f      	ldr	r0, [pc, #572]	; (80019dc <main+0x2cc>)
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	2201      	movs	r2, #1
 80017a2:	f003 fd39 	bl	8005218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80017a6:	4622      	mov	r2, r4
 80017a8:	488c      	ldr	r0, [pc, #560]	; (80019dc <main+0x2cc>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	f003 fd34 	bl	8005218 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	4888      	ldr	r0, [pc, #544]	; (80019d4 <main+0x2c4>)
 80017b4:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017b6:	f44f 4840 	mov.w	r8, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	e9cd 8613 	strd	r8, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c2:	f04f 0b04 	mov.w	fp, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f003 fc29 	bl	800501c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	a913      	add	r1, sp, #76	; 0x4c
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	e9cd b613 	strd	fp, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f003 fc1f 	bl	800501c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	a913      	add	r1, sp, #76	; 0x4c
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017e8:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f0:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f003 fc12 	bl	800501c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	4878      	ldr	r0, [pc, #480]	; (80019dc <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	9716      	str	r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001802:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001806:	f04f 0a80 	mov.w	sl, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f003 fc07 	bl	800501c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	4873      	ldr	r0, [pc, #460]	; (80019dc <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001818:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f003 fbfe 	bl	800501c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	486d      	ldr	r0, [pc, #436]	; (80019dc <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001826:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182a:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f003 fbf5 	bl	800501c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001832:	223c      	movs	r2, #60	; 0x3c
 8001834:	4621      	mov	r1, r4
 8001836:	a813      	add	r0, sp, #76	; 0x4c
  ADC_MultiModeTypeDef multimode = {0};
 8001838:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800183c:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800183e:	f006 f841 	bl	80078c4 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001842:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001846:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 800184a:	e9c5 c300 	strd	ip, r3, [r5]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800184e:	2308      	movs	r3, #8
 8001850:	61ab      	str	r3, [r5, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001852:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001858:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800185a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800185e:	e9c5 4604 	strd	r4, r6, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 8001862:	622e      	str	r6, [r5, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001864:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001868:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800186c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001870:	63eb      	str	r3, [r5, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001872:	f002 f925 	bl	8003ac0 <HAL_ADC_Init>
 8001876:	b108      	cbz	r0, 800187c <main+0x16c>
 8001878:	b672      	cpsid	i
  while (1)
 800187a:	e7fe      	b.n	800187a <main+0x16a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800187c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800187e:	a90c      	add	r1, sp, #48	; 0x30
 8001880:	4628      	mov	r0, r5
 8001882:	f002 fde1 	bl	8004448 <HAL_ADCEx_MultiModeConfigChannel>
 8001886:	b108      	cbz	r0, 800188c <main+0x17c>
 8001888:	b672      	cpsid	i
  while (1)
 800188a:	e7fe      	b.n	800188a <main+0x17a>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800188c:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigInjected.InjectedOffset = 0;
 800188e:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001890:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001894:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001898:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800189c:	4850      	ldr	r0, [pc, #320]	; (80019e0 <main+0x2d0>)
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800189e:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80018a2:	2309      	movs	r3, #9
 80018a4:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80018a8:	237f      	movs	r3, #127	; 0x7f
 80018aa:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80018ac:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedNbrOfConversion = 3;
 80018ae:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80018b0:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80018b2:	e9cd aa1d 	strd	sl, sl, [sp, #116]	; 0x74
  sConfigInjected.InjectedNbrOfConversion = 3;
 80018b6:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80018b8:	f002 facc 	bl	8003e54 <HAL_ADCEx_InjectedConfigChannel>
 80018bc:	b108      	cbz	r0, 80018c2 <main+0x1b2>
 80018be:	b672      	cpsid	i
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <main+0x1b0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80018c2:	4948      	ldr	r1, [pc, #288]	; (80019e4 <main+0x2d4>)
 80018c4:	f240 130f 	movw	r3, #271	; 0x10f
 80018c8:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80018cc:	4628      	mov	r0, r5
 80018ce:	a913      	add	r1, sp, #76	; 0x4c
 80018d0:	f002 fac0 	bl	8003e54 <HAL_ADCEx_InjectedConfigChannel>
 80018d4:	b108      	cbz	r0, 80018da <main+0x1ca>
 80018d6:	b672      	cpsid	i
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <main+0x1c8>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80018da:	4a43      	ldr	r2, [pc, #268]	; (80019e8 <main+0x2d8>)
 80018dc:	f240 2315 	movw	r3, #533	; 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80018e0:	4628      	mov	r0, r5
 80018e2:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80018e4:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80018e8:	f002 fab4 	bl	8003e54 <HAL_ADCEx_InjectedConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b108      	cbz	r0, 80018f4 <main+0x1e4>
 80018f0:	b672      	cpsid	i
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <main+0x1e2>
  hfdcan1.Instance = FDCAN1;
 80018f4:	483d      	ldr	r0, [pc, #244]	; (80019ec <main+0x2dc>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.ExtFiltersNbr = 0;
 80018fa:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018fe:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001900:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001902:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001904:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Instance = FDCAN1;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <main+0x2e0>)
 8001908:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800190a:	2407      	movs	r4, #7
  hfdcan1.Init.NominalPrescaler = 16;
 800190c:	2310      	movs	r3, #16
 800190e:	6143      	str	r3, [r0, #20]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001910:	e9c0 6609 	strd	r6, r6, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001914:	e9c0 660b 	strd	r6, r6, [r0, #44]	; 0x2c
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001918:	6207      	str	r7, [r0, #32]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800191a:	6186      	str	r6, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800191c:	61c4      	str	r4, [r0, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800191e:	f002 feb1 	bl	8004684 <HAL_FDCAN_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	b108      	cbz	r0, 800192a <main+0x21a>
 8001926:	b672      	cpsid	i
  while (1)
 8001928:	e7fe      	b.n	8001928 <main+0x218>
  hopamp1.Instance = OPAMP1;
 800192a:	4832      	ldr	r0, [pc, #200]	; (80019f4 <main+0x2e4>)
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800192c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001930:	e9c0 3901 	strd	r3, r9, [r0, #4]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001934:	e9c0 830a 	strd	r8, r3, [r0, #40]	; 0x28
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001938:	6103      	str	r3, [r0, #16]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800193a:	6183      	str	r3, [r0, #24]
  hopamp1.Instance = OPAMP1;
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <main+0x2e8>)
 800193e:	6003      	str	r3, [r0, #0]
  hopamp1.Init.InternalOutput = ENABLE;
 8001940:	7506      	strb	r6, [r0, #20]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001942:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001944:	f003 fc6e 	bl	8005224 <HAL_OPAMP_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	b108      	cbz	r0, 8001950 <main+0x240>
 800194c:	b672      	cpsid	i
  while (1)
 800194e:	e7fe      	b.n	800194e <main+0x23e>
  hopamp2.Instance = OPAMP2;
 8001950:	482a      	ldr	r0, [pc, #168]	; (80019fc <main+0x2ec>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001952:	e9c0 3901 	strd	r3, r9, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001956:	6103      	str	r3, [r0, #16]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001958:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800195a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <main+0x2f0>)
 800195e:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001960:	e9c0 5809 	strd	r5, r8, [r0, #36]	; 0x24
  hopamp2.Init.InternalOutput = ENABLE;
 8001964:	7506      	strb	r6, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001966:	f003 fc5d 	bl	8005224 <HAL_OPAMP_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	b108      	cbz	r0, 8001972 <main+0x262>
 800196e:	b672      	cpsid	i
  while (1)
 8001970:	e7fe      	b.n	8001970 <main+0x260>
  hopamp3.Instance = OPAMP3;
 8001972:	4824      	ldr	r0, [pc, #144]	; (8001a04 <main+0x2f4>)
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001974:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001976:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001978:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800197a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp3.Instance = OPAMP3;
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <main+0x2f8>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800197e:	f8c0 9008 	str.w	r9, [r0, #8]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001982:	e9c0 5809 	strd	r5, r8, [r0, #36]	; 0x24
  hopamp3.Init.InternalOutput = ENABLE;
 8001986:	7506      	strb	r6, [r0, #20]
  hopamp3.Instance = OPAMP3;
 8001988:	6003      	str	r3, [r0, #0]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800198a:	f003 fc4b 	bl	8005224 <HAL_OPAMP_Init>
 800198e:	4602      	mov	r2, r0
 8001990:	b108      	cbz	r0, 8001996 <main+0x286>
 8001992:	b672      	cpsid	i
  while (1)
 8001994:	e7fe      	b.n	8001994 <main+0x284>
  hspi1.Instance = SPI1;
 8001996:	481d      	ldr	r0, [pc, #116]	; (8001a0c <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001998:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001a10 <main+0x300>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800199c:	6082      	str	r2, [r0, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019a2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a6:	6102      	str	r2, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a8:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ae:	e9c0 8200 	strd	r8, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80019b2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019b6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019b8:	f44f 7a00 	mov.w	sl, #512	; 0x200
 80019bc:	2218      	movs	r2, #24
 80019be:	e9c0 a206 	strd	sl, r2, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019c2:	6146      	str	r6, [r0, #20]
  hspi1.Init.CRCPolynomial = 7;
 80019c4:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c6:	f004 fb3d 	bl	8006044 <HAL_SPI_Init>
 80019ca:	b318      	cbz	r0, 8001a14 <main+0x304>
 80019cc:	b672      	cpsid	i
  while (1)
 80019ce:	e7fe      	b.n	80019ce <main+0x2be>
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000800 	.word	0x48000800
 80019d8:	20000334 	.word	0x20000334
 80019dc:	48000400 	.word	0x48000400
 80019e0:	b6902000 	.word	0xb6902000
 80019e4:	04300002 	.word	0x04300002
 80019e8:	2e300800 	.word	0x2e300800
 80019ec:	20000434 	.word	0x20000434
 80019f0:	40006400 	.word	0x40006400
 80019f4:	20000498 	.word	0x20000498
 80019f8:	40010300 	.word	0x40010300
 80019fc:	200004d4 	.word	0x200004d4
 8001a00:	40010304 	.word	0x40010304
 8001a04:	20000510 	.word	0x20000510
 8001a08:	40010308 	.word	0x40010308
 8001a0c:	2000054c 	.word	0x2000054c
 8001a10:	40013000 	.word	0x40013000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a14:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8001a16:	4da4      	ldr	r5, [pc, #656]	; (8001ca8 <main+0x598>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a18:	9408      	str	r4, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a1a:	2234      	movs	r2, #52	; 0x34
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	a813      	add	r0, sp, #76	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a20:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001a24:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001a28:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001a34:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a36:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a38:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3a:	f005 ff43 	bl	80078c4 <memset>
  htim1.Instance = TIM1;
 8001a3e:	4b9b      	ldr	r3, [pc, #620]	; (8001cac <main+0x59c>)
 8001a40:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 3999;
 8001a42:	f04f 0e20 	mov.w	lr, #32
 8001a46:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001a4a:	e9c5 e302 	strd	lr, r3, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a4e:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 1;
 8001a50:	2301      	movs	r3, #1
  htim1.Init.Prescaler = 0;
 8001a52:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	612c      	str	r4, [r5, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = 1;
 8001a58:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a5a:	f005 f927 	bl	8006cac <HAL_TIM_Base_Init>
 8001a5e:	b108      	cbz	r0, 8001a64 <main+0x354>
 8001a60:	b672      	cpsid	i
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <main+0x352>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a68:	a908      	add	r1, sp, #32
 8001a6a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a6e:	f004 fedf 	bl	8006830 <HAL_TIM_ConfigClockSource>
 8001a72:	b108      	cbz	r0, 8001a78 <main+0x368>
 8001a74:	b672      	cpsid	i
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <main+0x366>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f005 f949 	bl	8006d10 <HAL_TIM_PWM_Init>
 8001a7e:	b108      	cbz	r0, 8001a84 <main+0x374>
 8001a80:	b672      	cpsid	i
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <main+0x372>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	e9cd 0006 	strd	r0, r0, [sp, #24]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001a88:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8a:	a905      	add	r1, sp, #20
 8001a8c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001a8e:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a90:	f005 faa6 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	b108      	cbz	r0, 8001a9a <main+0x38a>
 8001a96:	b672      	cpsid	i
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <main+0x388>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa2:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	a90c      	add	r1, sp, #48	; 0x30
 8001aac:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aae:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	f005 f9a0 	bl	8006df4 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	b108      	cbz	r0, 8001aba <main+0x3aa>
 8001ab6:	b672      	cpsid	i
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <main+0x3a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aba:	2204      	movs	r2, #4
 8001abc:	a90c      	add	r1, sp, #48	; 0x30
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f005 f998 	bl	8006df4 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	b108      	cbz	r0, 8001aca <main+0x3ba>
 8001ac6:	b672      	cpsid	i
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <main+0x3b8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aca:	2208      	movs	r2, #8
 8001acc:	a90c      	add	r1, sp, #48	; 0x30
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f005 f990 	bl	8006df4 <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	b108      	cbz	r0, 8001ada <main+0x3ca>
 8001ad6:	b672      	cpsid	i
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <main+0x3c8>
  sConfigOC.Pulse = 3998;
 8001ada:	f640 739e 	movw	r3, #3998	; 0xf9e
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	a90c      	add	r1, sp, #48	; 0x30
 8001ae2:	4628      	mov	r0, r5
  sConfigOC.Pulse = 3998;
 8001ae4:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae6:	f005 f985 	bl	8006df4 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	b108      	cbz	r0, 8001af0 <main+0x3e0>
 8001aec:	b672      	cpsid	i
  while (1)
 8001aee:	e7fe      	b.n	8001aee <main+0x3de>
  sBreakDeadTimeConfig.DeadTime = 128;
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	e9cd 0315 	strd	r0, r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	e9cd 0317 	strd	r0, r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b02:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b06:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b0a:	e9cd 031b 	strd	r0, r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b0e:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b12:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b14:	a913      	add	r1, sp, #76	; 0x4c
 8001b16:	4628      	mov	r0, r5
 8001b18:	f005 faac 	bl	8007074 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	b108      	cbz	r0, 8001b24 <main+0x414>
 8001b20:	b672      	cpsid	i
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <main+0x412>
  HAL_TIM_MspPostInit(&htim1);
 8001b24:	4628      	mov	r0, r5
 8001b26:	f001 fe0b 	bl	8003740 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 1000000;
 8001b2a:	4f61      	ldr	r7, [pc, #388]	; (8001cb0 <main+0x5a0>)
  huart3.Instance = USART3;
 8001b2c:	4861      	ldr	r0, [pc, #388]	; (8001cb4 <main+0x5a4>)
  huart3.Init.BaudRate = 1000000;
 8001b2e:	4a62      	ldr	r2, [pc, #392]	; (8001cb8 <main+0x5a8>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b30:	6284      	str	r4, [r0, #40]	; 0x28
  huart3.Init.BaudRate = 1000000;
 8001b32:	e9c0 7200 	strd	r7, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b36:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b38:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	e9c0 4204 	strd	r4, r2, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b44:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b48:	f005 fdcc 	bl	80076e4 <HAL_UART_Init>
 8001b4c:	b108      	cbz	r0, 8001b52 <main+0x442>
 8001b4e:	b672      	cpsid	i
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <main+0x440>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4857      	ldr	r0, [pc, #348]	; (8001cb4 <main+0x5a4>)
 8001b56:	f005 fe37 	bl	80077c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	b108      	cbz	r0, 8001b62 <main+0x452>
 8001b5e:	b672      	cpsid	i
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <main+0x450>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b62:	4854      	ldr	r0, [pc, #336]	; (8001cb4 <main+0x5a4>)
 8001b64:	f005 fe5a 	bl	800781c <HAL_UARTEx_SetRxFifoThreshold>
 8001b68:	b108      	cbz	r0, 8001b6e <main+0x45e>
 8001b6a:	b672      	cpsid	i
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <main+0x45c>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b6e:	4851      	ldr	r0, [pc, #324]	; (8001cb4 <main+0x5a4>)
 8001b70:	f005 fe0c 	bl	800778c <HAL_UARTEx_DisableFifoMode>
 8001b74:	4605      	mov	r5, r0
 8001b76:	b108      	cbz	r0, 8001b7c <main+0x46c>
 8001b78:	b672      	cpsid	i
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <main+0x46a>
  hadc2.Instance = ADC2;
 8001b7c:	4c4f      	ldr	r4, [pc, #316]	; (8001cbc <main+0x5ac>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b7e:	4e50      	ldr	r6, [pc, #320]	; (8001cc0 <main+0x5b0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001b80:	4601      	mov	r1, r0
 8001b82:	223c      	movs	r2, #60	; 0x3c
 8001b84:	a813      	add	r0, sp, #76	; 0x4c
 8001b86:	f005 fe9d 	bl	80078c4 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b8a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b8e:	e9c4 6300 	strd	r6, r3, [r4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 8001b98:	6223      	str	r3, [r4, #32]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b9a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b9e:	2308      	movs	r3, #8
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ba0:	83a5      	strh	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ba2:	4620      	mov	r0, r4
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba4:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ba8:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bac:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001bb0:	63e6      	str	r6, [r4, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001bb2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bb6:	61a3      	str	r3, [r4, #24]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bb8:	f001 ff82 	bl	8003ac0 <HAL_ADC_Init>
 8001bbc:	b108      	cbz	r0, 8001bc2 <main+0x4b2>
 8001bbe:	b672      	cpsid	i
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x4b0>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001bc2:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bc4:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigInjected.InjectedOffset = 0;
 8001bc6:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001bc8:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001bcc:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001bd0:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001bd4:	483b      	ldr	r0, [pc, #236]	; (8001cc4 <main+0x5b4>)
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001bd6:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001bda:	2309      	movs	r3, #9
 8001bdc:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001be0:	257f      	movs	r5, #127	; 0x7f
 8001be2:	2304      	movs	r3, #4
 8001be4:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001be8:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001bea:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001bec:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001bee:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001bf0:	f002 f930 	bl	8003e54 <HAL_ADCEx_InjectedConfigChannel>
 8001bf4:	b108      	cbz	r0, 8001bfa <main+0x4ea>
 8001bf6:	b672      	cpsid	i
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <main+0x4e8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <main+0x5b8>)
 8001bfc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001bfe:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001c00:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c04:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001c06:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c08:	f002 f924 	bl	8003e54 <HAL_ADCEx_InjectedConfigChannel>
 8001c0c:	b108      	cbz	r0, 8001c12 <main+0x502>
 8001c0e:	b672      	cpsid	i
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <main+0x500>
  htim2.Instance = TIM2;
 8001c12:	4c2e      	ldr	r4, [pc, #184]	; (8001ccc <main+0x5bc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	900e      	str	r0, [sp, #56]	; 0x38
  htim2.Init.Prescaler = 15999;
 8001c16:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8001c22:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim2.Init.Prescaler = 15999;
 8001c2a:	e9c4 2300 	strd	r2, r3, [r4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	61a0      	str	r0, [r4, #24]
  htim2.Init.Period = 9999;
 8001c34:	f242 730f 	movw	r3, #9999	; 0x270f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c38:	4620      	mov	r0, r4
  htim2.Init.Period = 9999;
 8001c3a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c3c:	f005 f836 	bl	8006cac <HAL_TIM_Base_Init>
 8001c40:	b108      	cbz	r0, 8001c46 <main+0x536>
 8001c42:	b672      	cpsid	i
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <main+0x534>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c46:	a913      	add	r1, sp, #76	; 0x4c
 8001c48:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4a:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c4c:	f004 fdf0 	bl	8006830 <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b108      	cbz	r0, 8001c58 <main+0x548>
 8001c54:	b672      	cpsid	i
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <main+0x546>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c58:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c60:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c62:	f005 f9bd 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b108      	cbz	r0, 8001c6e <main+0x55e>
 8001c6a:	b672      	cpsid	i
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <main+0x55c>
  htim6.Instance = TIM6;
 8001c6e:	4818      	ldr	r0, [pc, #96]	; (8001cd0 <main+0x5c0>)
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <main+0x5c4>)
 8001c72:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 159;
 8001c74:	229f      	movs	r2, #159	; 0x9f
 8001c76:	6042      	str	r2, [r0, #4]
  htim6.Init.Period = 65535;
 8001c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  htim6.Init.Period = 65535;
 8001c80:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	9315      	str	r3, [sp, #84]	; 0x54
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c88:	f005 f810 	bl	8006cac <HAL_TIM_Base_Init>
 8001c8c:	b108      	cbz	r0, 8001c92 <main+0x582>
 8001c8e:	b672      	cpsid	i
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <main+0x580>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c94:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <main+0x5c0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c98:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c9c:	f005 f9a0 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	b1d0      	cbz	r0, 8001cd8 <main+0x5c8>
 8001ca2:	b672      	cpsid	i
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x594>
 8001ca6:	bf00      	nop
 8001ca8:	200005b0 	.word	0x200005b0
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40004800 	.word	0x40004800
 8001cb4:	200006e0 	.word	0x200006e0
 8001cb8:	000f4240 	.word	0x000f4240
 8001cbc:	200003a0 	.word	0x200003a0
 8001cc0:	50000100 	.word	0x50000100
 8001cc4:	c3290000 	.word	0xc3290000
 8001cc8:	cb8c0000 	.word	0xcb8c0000
 8001ccc:	200005fc 	.word	0x200005fc
 8001cd0:	20000694 	.word	0x20000694
 8001cd4:	40001000 	.word	0x40001000
  hcordic.Instance = CORDIC;
 8001cd8:	4826      	ldr	r0, [pc, #152]	; (8001d74 <main+0x664>)
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <main+0x668>)
 8001cdc:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001cde:	f002 fc19 	bl	8004514 <HAL_CORDIC_Init>
 8001ce2:	b108      	cbz	r0, 8001ce8 <main+0x5d8>
 8001ce4:	b672      	cpsid	i
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <main+0x5d6>
  htim3.Instance = TIM3;
 8001ce8:	4c24      	ldr	r4, [pc, #144]	; (8001d7c <main+0x66c>)
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <main+0x670>)
 8001cec:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 15999;
 8001cee:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001cf2:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 9999;
 8001cf4:	f242 730f 	movw	r3, #9999	; 0x270f
 8001cf8:	e9c4 0302 	strd	r0, r3, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	2380      	movs	r3, #128	; 0x80
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d02:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8001d06:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8001d0a:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0e:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d10:	9019      	str	r0, [sp, #100]	; 0x64
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d12:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d14:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d16:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d18:	f004 fffa 	bl	8006d10 <HAL_TIM_PWM_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b108      	cbz	r0, 8001d24 <main+0x614>
 8001d20:	b672      	cpsid	i
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <main+0x612>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d24:	a90c      	add	r1, sp, #48	; 0x30
 8001d26:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d28:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2c:	f005 f958 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	b108      	cbz	r0, 8001d36 <main+0x626>
 8001d32:	b672      	cpsid	i
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <main+0x624>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d36:	2260      	movs	r2, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001d38:	e9cd 2013 	strd	r2, r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001d3c:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3e:	4602      	mov	r2, r0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d40:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d42:	a913      	add	r1, sp, #76	; 0x4c
 8001d44:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001d46:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d48:	f005 f854 	bl	8006df4 <HAL_TIM_PWM_ConfigChannel>
 8001d4c:	b108      	cbz	r0, 8001d52 <main+0x642>
 8001d4e:	b672      	cpsid	i
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <main+0x640>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d52:	2204      	movs	r2, #4
 8001d54:	a913      	add	r1, sp, #76	; 0x4c
 8001d56:	4620      	mov	r0, r4
 8001d58:	f005 f84c 	bl	8006df4 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	b108      	cbz	r0, 8001d62 <main+0x652>
 8001d5e:	b672      	cpsid	i
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <main+0x650>
  HAL_TIM_MspPostInit(&htim3);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f001 fcec 	bl	8003740 <HAL_TIM_MspPostInit>
  APP_init();
 8001d68:	f7ff f936 	bl	8000fd8 <APP_init>
    APP_main();
 8001d6c:	f7ff f940 	bl	8000ff0 <APP_main>
  while (1)
 8001d70:	e7fc      	b.n	8001d6c <main+0x65c>
 8001d72:	bf00      	nop
 8001d74:	2000040c 	.word	0x2000040c
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	20000648 	.word	0x20000648
 8001d80:	40000400 	.word	0x40000400

08001d84 <Error_Handler>:
 8001d84:	b672      	cpsid	i
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <Error_Handler+0x2>

08001d88 <Motor_init>:

void Motor_init(Motor *motor) {
  motor->pole_pairs = 14;
  motor->kv_rating = 150;

  motor->flux_angle_offset = 1.560145f;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <Motor_init+0x10>)
 8001d8a:	6083      	str	r3, [r0, #8]
  motor->kv_rating = 150;
 8001d8c:	210e      	movs	r1, #14
 8001d8e:	2296      	movs	r2, #150	; 0x96
 8001d90:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	3fc7b2d5 	.word	0x3fc7b2d5

08001d9c <MotorController_setFluxAngle>:

Mode MotorController_getMode(MotorController *controller) {
  return controller->mode;
}

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	ed2d 8b04 	vpush	{d8-d9}
  value = fmodf(value, M_2PI_F);
 8001da2:	ed9f 9a17 	vldr	s18, [pc, #92]	; 8001e00 <MotorController_setFluxAngle+0x64>
 8001da6:	eeb0 8a60 	vmov.f32	s16, s1
 8001daa:	eef0 0a49 	vmov.f32	s1, s18
 8001dae:	4604      	mov	r4, r0
 8001db0:	f008 fcfc 	bl	800a7ac <fmodf>
  return value >= 0.f ? value : (value + M_2PI_F);
 8001db4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  value = fmodf(value, M_2PI_F);
 8001dbc:	eef0 8a40 	vmov.f32	s17, s0
  return value >= 0.f ? value : (value + M_2PI_F);
 8001dc0:	bfb8      	it	lt
 8001dc2:	ee70 8a09 	vaddlt.f32	s17, s0, s18
  float theta = wrapTo2Pi(angle_setpoint);
  float sin_theta = sinf(theta);
 8001dc6:	eeb0 0a68 	vmov.f32	s0, s17
 8001dca:	f008 fca9 	bl	800a720 <sinf>
 8001dce:	eef0 7a40 	vmov.f32	s15, s0
  float cos_theta = cosf(theta);
 8001dd2:	eeb0 0a68 	vmov.f32	s0, s17
  float sin_theta = sinf(theta);
 8001dd6:	eef0 8a67 	vmov.f32	s17, s15
  float cos_theta = cosf(theta);
 8001dda:	f008 fc5d 	bl	800a698 <cosf>
  float v_q = 0.0;
  float v_d = voltage_setpoint;

  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8001dde:	ee68 7a88 	vmul.f32	s15, s17, s16
  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8001de2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001e04 <MotorController_setFluxAngle+0x68>
 8001de6:	ee20 8a08 	vmul.f32	s16, s0, s16
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8001dea:	eee0 7a07 	vfma.f32	s15, s0, s14
  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8001dee:	eea8 8ac7 	vfms.f32	s16, s17, s14
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8001df2:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8001df6:	ed84 8a22 	vstr	s16, [r4, #136]	; 0x88
}
 8001dfa:	ecbd 8b04 	vpop	{d8-d9}
 8001dfe:	bd10      	pop	{r4, pc}
 8001e00:	40c90fdb 	.word	0x40c90fdb
 8001e04:	00000000 	.word	0x00000000

08001e08 <MotorController_storeConfig>:
  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
#endif
}

uint32_t MotorController_storeConfig(MotorController *controller) {
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	b09c      	sub	sp, #112	; 0x70

  config.firmware_version                     = controller->firmware_version;
  config.device_id                            = controller->device_id;

  config.encoder_cpr                          = controller->encoder.cpr;
  config.encoder_position_offset              = controller->encoder.position_offset;
 8001e0c:	68c1      	ldr	r1, [r0, #12]
  config.encoder_filter_alpha                 = controller->encoder.filter_alpha;

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8001e0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8001e10:	6b82      	ldr	r2, [r0, #56]	; 0x38
  config.firmware_version                     = controller->firmware_version;
 8001e12:	f8d0 5110 	ldr.w	r5, [r0, #272]	; 0x110
  config.encoder_position_offset              = controller->encoder.position_offset;
 8001e16:	9109      	str	r1, [sp, #36]	; 0x24
  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8001e18:	930b      	str	r3, [sp, #44]	; 0x2c

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
  config.motor_kv_rating                      = controller->motor.kv_rating;
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8001e1a:	6d41      	ldr	r1, [r0, #84]	; 0x54

  config.current_controller_i_filter_alpha  = controller->current_controller.i_filter_alpha;
  config.current_controller_i_kp            = controller->current_controller.i_kp;
 8001e1c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  config.encoder_filter_alpha                 = controller->encoder.filter_alpha;
 8001e1e:	6904      	ldr	r4, [r0, #16]
  config.firmware_version                     = controller->firmware_version;
 8001e20:	9507      	str	r5, [sp, #28]
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8001e22:	910f      	str	r1, [sp, #60]	; 0x3c
  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8001e24:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  config.current_controller_i_filter_alpha  = controller->current_controller.i_filter_alpha;
 8001e26:	6d81      	ldr	r1, [r0, #88]	; 0x58
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8001e28:	920c      	str	r2, [sp, #48]	; 0x30
  config.current_controller_i_kp            = controller->current_controller.i_kp;
 8001e2a:	9311      	str	r3, [sp, #68]	; 0x44
  config.current_controller_i_ki            = controller->current_controller.i_ki;

  config.position_controller_position_kp      = controller->position_controller.position_kp;
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8001e2c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
  config.position_controller_velocity_kp      = controller->position_controller.velocity_kp;
 8001e30:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8001e34:	950d      	str	r5, [sp, #52]	; 0x34
  config.encoder_filter_alpha                 = controller->encoder.filter_alpha;
 8001e36:	940a      	str	r4, [sp, #40]	; 0x28
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8001e38:	6d05      	ldr	r5, [r0, #80]	; 0x50
  config.current_controller_i_ki            = controller->current_controller.i_ki;
 8001e3a:	6e04      	ldr	r4, [r0, #96]	; 0x60
  config.current_controller_i_filter_alpha  = controller->current_controller.i_filter_alpha;
 8001e3c:	9110      	str	r1, [sp, #64]	; 0x40
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8001e3e:	9214      	str	r2, [sp, #80]	; 0x50
  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8001e40:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
  config.device_id                            = controller->device_id;
 8001e44:	f890 2114 	ldrb.w	r2, [r0, #276]	; 0x114
  config.position_controller_velocity_kp      = controller->position_controller.velocity_kp;
 8001e48:	9315      	str	r3, [sp, #84]	; 0x54
  config.encoder_cpr                          = controller->encoder.cpr;
 8001e4a:	6883      	ldr	r3, [r0, #8]
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8001e4c:	950e      	str	r5, [sp, #56]	; 0x38
  config.current_controller_i_ki            = controller->current_controller.i_ki;
 8001e4e:	9412      	str	r4, [sp, #72]	; 0x48
  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8001e50:	9113      	str	r1, [sp, #76]	; 0x4c
  config.device_id                            = controller->device_id;
 8001e52:	9206      	str	r2, [sp, #24]
  config.encoder_cpr                          = controller->encoder.cpr;
 8001e54:	9308      	str	r3, [sp, #32]
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
  config.position_controller_torque_limit       = controller->position_controller.torque_limit;
 8001e56:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
  config.position_controller_velocity_limit     = controller->position_controller.velocity_limit;
 8001e5a:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8001e5e:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8001e62:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
 8001e66:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
  config.position_controller_torque_limit       = controller->position_controller.torque_limit;
 8001e6a:	9417      	str	r4, [sp, #92]	; 0x5c
  config.position_controller_velocity_limit     = controller->position_controller.velocity_limit;
 8001e6c:	9119      	str	r1, [sp, #100]	; 0x64
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8001e6e:	921a      	str	r2, [sp, #104]	; 0x68
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8001e70:	931b      	str	r3, [sp, #108]	; 0x6c
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
 8001e72:	9516      	str	r5, [sp, #88]	; 0x58

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001e74:	2400      	movs	r4, #0
  HAL_FLASH_Unlock();
 8001e76:	f002 ff73 	bl	8004d60 <HAL_FLASH_Unlock>
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8001e7a:	2301      	movs	r3, #1
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8001e7c:	223f      	movs	r2, #63	; 0x3f
  erase_init_struct.NbPages = 1;

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8001e7e:	a901      	add	r1, sp, #4
 8001e80:	a802      	add	r0, sp, #8
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8001e82:	e9cd 4302 	strd	r4, r3, [sp, #8]
  erase_init_struct.NbPages = 1;
 8001e86:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8001e8a:	f003 f841 	bl	8004f10 <HAL_FLASHEx_Erase>
 8001e8e:	b9a0      	cbnz	r0, 8001eba <MotorController_storeConfig+0xb2>
 8001e90:	4c0c      	ldr	r4, [pc, #48]	; (8001ec4 <MotorController_storeConfig+0xbc>)
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8001e92:	4e0d      	ldr	r6, [pc, #52]	; (8001ec8 <MotorController_storeConfig+0xc0>)
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <MotorController_storeConfig+0xc4>)
 8001e96:	446b      	add	r3, sp
 8001e98:	4423      	add	r3, r4

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f002 ffad 	bl	8004e00 <HAL_FLASH_Program>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8001ea6:	3408      	adds	r4, #8
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8001ea8:	4605      	mov	r5, r0
 8001eaa:	b930      	cbnz	r0, 8001eba <MotorController_storeConfig+0xb2>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8001eac:	42b4      	cmp	r4, r6
 8001eae:	d1f1      	bne.n	8001e94 <MotorController_storeConfig+0x8c>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8001eb0:	f002 ff6a 	bl	8004d88 <HAL_FLASH_Lock>

  return HAL_OK;
 8001eb4:	4628      	mov	r0, r5
}
 8001eb6:	b01c      	add	sp, #112	; 0x70
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_FLASH_GetError();
 8001eba:	f002 ff71 	bl	8004da0 <HAL_FLASH_GetError>
}
 8001ebe:	b01c      	add	sp, #112	; 0x70
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	bf00      	nop
 8001ec4:	0801f800 	.word	0x0801f800
 8001ec8:	0801f858 	.word	0x0801f858
 8001ecc:	f7fe0818 	.word	0xf7fe0818

08001ed0 <MotorController_setMode>:
  if (READ_BITS(controller->error, ERROR_ESTOP)) {
    MotorController_setMode(controller, MODE_IDLE);
  }
}

void MotorController_setMode(MotorController *controller, Mode mode) {
 8001ed0:	b530      	push	{r4, r5, lr}
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	4604      	mov	r4, r0
  switch (mode) {
 8001ed8:	2923      	cmp	r1, #35	; 0x23
 8001eda:	d813      	bhi.n	8001f04 <MotorController_setMode+0x34>
 8001edc:	e8df f001 	tbb	[pc, r1]
 8001ee0:	126f1284 	.word	0x126f1284
 8001ee4:	12125312 	.word	0x12125312
 8001ee8:	12121212 	.word	0x12121212
 8001eec:	12121212 	.word	0x12121212
 8001ef0:	21212121 	.word	0x21212121
 8001ef4:	12121212 	.word	0x12121212
 8001ef8:	12121212 	.word	0x12121212
 8001efc:	12121212 	.word	0x12121212
 8001f00:	21212121 	.word	0x21212121
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // blue
      }
      break;

    default:
      PowerStage_disablePWM(&controller->powerstage);
 8001f04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f08:	f001 f8ac 	bl	8003064 <PowerStage_disablePWM>
      controller->mode = MODE_IDLE;
      SET_BITS(controller->error, ERROR_INVALID_MODE);
 8001f0c:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
      controller->mode = MODE_IDLE;
 8001f10:	2202      	movs	r2, #2
      SET_BITS(controller->error, ERROR_INVALID_MODE);
 8001f12:	f043 0320 	orr.w	r3, r3, #32
      controller->mode = MODE_IDLE;
 8001f16:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
      SET_BITS(controller->error, ERROR_INVALID_MODE);
 8001f1a:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
      return;  // return directly, do not update mode
  }

  controller->mode = mode;
}
 8001f1e:	b003      	add	sp, #12
 8001f20:	bd30      	pop	{r4, r5, pc}
      if (mode != controller->mode) {
 8001f22:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8001f26:	428b      	cmp	r3, r1
 8001f28:	f000 808c 	beq.w	8002044 <MotorController_setMode+0x174>
        if (controller->mode != MODE_IDLE) {
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d1e9      	bne.n	8001f04 <MotorController_setMode+0x34>
        controller->position_controller.position_setpoint = controller->position_controller.position_measured;
 8001f30:	f8d0 10fc 	ldr.w	r1, [r0, #252]	; 0xfc
        controller->position_controller.velocity_setpoint = controller->position_controller.velocity_measured;
 8001f34:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
        controller->position_controller.position_setpoint = controller->position_controller.position_measured;
 8001f38:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
        controller->position_controller.position_integrator = 0.f;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
        controller->position_controller.velocity_setpoint = controller->position_controller.velocity_measured;
 8001f42:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
        PowerStage_reset(&controller->powerstage);
 8001f46:	3024      	adds	r0, #36	; 0x24
        controller->position_controller.velocity_integrator = 0.f;
 8001f48:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        controller->current_controller.i_q_integrator = 0.f;
 8001f4c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        controller->current_controller.i_d_integrator = 0.f;
 8001f50:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
        controller->current_controller.v_q_setpoint = 0.f;
 8001f54:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        controller->current_controller.v_d_setpoint = 0.f;
 8001f58:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        controller->current_controller.v_alpha_setpoint = 0.f;
 8001f5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        controller->current_controller.v_beta_setpoint = 0.f;
 8001f60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        controller->current_controller.v_a_setpoint = 0.f;
 8001f64:	6763      	str	r3, [r4, #116]	; 0x74
        controller->current_controller.v_b_setpoint = 0.f;
 8001f66:	67a3      	str	r3, [r4, #120]	; 0x78
        controller->current_controller.v_c_setpoint = 0.f;
 8001f68:	67e3      	str	r3, [r4, #124]	; 0x7c
        PowerStage_reset(&controller->powerstage);
 8001f6a:	9001      	str	r0, [sp, #4]
 8001f6c:	f001 f83e 	bl	8002fec <PowerStage_reset>
 8001f70:	9801      	ldr	r0, [sp, #4]
      PowerStage_enableGateDriver(&controller->powerstage);
 8001f72:	9001      	str	r0, [sp, #4]
 8001f74:	f001 f86e 	bl	8003054 <PowerStage_enableGateDriver>
      PowerStage_enablePWM(&controller->powerstage);
 8001f78:	9801      	ldr	r0, [sp, #4]
 8001f7a:	f001 f87b 	bl	8003074 <PowerStage_enablePWM>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8001f7e:	4932      	ldr	r1, [pc, #200]	; (8002048 <MotorController_setMode+0x178>)
 8001f80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f84:	e025      	b.n	8001fd2 <MotorController_setMode+0x102>
      if (mode != controller->mode) {
 8001f86:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8001f8a:	2b05      	cmp	r3, #5
        PowerStage_reset(&controller->powerstage);
 8001f8c:	f100 0024 	add.w	r0, r0, #36	; 0x24
      if (mode != controller->mode) {
 8001f90:	d143      	bne.n	800201a <MotorController_setMode+0x14a>
      PowerStage_enableGateDriver(&controller->powerstage);
 8001f92:	9001      	str	r0, [sp, #4]
 8001f94:	f001 f85e 	bl	8003054 <PowerStage_enableGateDriver>
      PowerStage_enablePWM(&controller->powerstage);
 8001f98:	9801      	ldr	r0, [sp, #4]
 8001f9a:	f001 f86b 	bl	8003074 <PowerStage_enablePWM>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8001f9e:	492a      	ldr	r1, [pc, #168]	; (8002048 <MotorController_setMode+0x178>)
 8001fa0:	680b      	ldr	r3, [r1, #0]
 8001fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa8:	60ca      	str	r2, [r1, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3) / 4);  // red
 8001faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fac:	0892      	lsrs	r2, r2, #2
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 4);  // blue
 8001fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb2:	0892      	lsrs	r2, r2, #2
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
  controller->mode = mode;
 8001fb6:	f884 510c 	strb.w	r5, [r4, #268]	; 0x10c
}
 8001fba:	b003      	add	sp, #12
 8001fbc:	bd30      	pop	{r4, r5, pc}
      PowerStage_disablePWM(&controller->powerstage);
 8001fbe:	3024      	adds	r0, #36	; 0x24
 8001fc0:	9001      	str	r0, [sp, #4]
 8001fc2:	f001 f84f 	bl	8003064 <PowerStage_disablePWM>
      PowerStage_enableGateDriver(&controller->powerstage);
 8001fc6:	9801      	ldr	r0, [sp, #4]
 8001fc8:	f001 f844 	bl	8003054 <PowerStage_enableGateDriver>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 9999);
 8001fcc:	491e      	ldr	r1, [pc, #120]	; (8002048 <MotorController_setMode+0x178>)
 8001fce:	f242 720f 	movw	r2, #9999	; 0x270f
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8001fd2:	680b      	ldr	r3, [r1, #0]
 8001fd4:	60ca      	str	r2, [r1, #12]
      if (controller->error == ERROR_NO_ERROR) {
 8001fd6:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
      if (controller->error == ERROR_NO_ERROR) {
 8001fdc:	b9b9      	cbnz	r1, 800200e <MotorController_setMode+0x13e>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 8001fde:	6359      	str	r1, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2);  // blue
 8001fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe2:	0852      	lsrs	r2, r2, #1
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8001fe6:	e7e6      	b.n	8001fb6 <MotorController_setMode+0xe6>
      PowerStage_disablePWM(&controller->powerstage);
 8001fe8:	3024      	adds	r0, #36	; 0x24
 8001fea:	9001      	str	r0, [sp, #4]
 8001fec:	f001 f83a 	bl	8003064 <PowerStage_disablePWM>
      PowerStage_disableGateDriver(&controller->powerstage);
 8001ff0:	9801      	ldr	r0, [sp, #4]
 8001ff2:	f001 f827 	bl	8003044 <PowerStage_disableGateDriver>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 8001ff6:	4914      	ldr	r1, [pc, #80]	; (8002048 <MotorController_setMode+0x178>)
 8001ff8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ffc:	680b      	ldr	r3, [r1, #0]
 8001ffe:	60ca      	str	r2, [r1, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 8002000:	2100      	movs	r1, #0
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 8002004:	6359      	str	r1, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 32);  // blue
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	0952      	lsrs	r2, r2, #5
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 800200c:	e7d3      	b.n	8001fb6 <MotorController_setMode+0xe6>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2);  // red
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // blue
 8002010:	2100      	movs	r1, #0
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2);  // red
 8002012:	0852      	lsrs	r2, r2, #1
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // blue
 8002016:	6399      	str	r1, [r3, #56]	; 0x38
 8002018:	e7cd      	b.n	8001fb6 <MotorController_setMode+0xe6>
        PowerStage_reset(&controller->powerstage);
 800201a:	9001      	str	r0, [sp, #4]
 800201c:	f000 ffe6 	bl	8002fec <PowerStage_reset>
        controller->current_controller.i_q_integrator = 0;
 8002020:	2300      	movs	r3, #0
        controller->current_controller.v_c_setpoint = 0.f;
 8002022:	9801      	ldr	r0, [sp, #4]
        controller->current_controller.i_q_integrator = 0;
 8002024:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        controller->current_controller.i_d_integrator = 0;
 8002028:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
        controller->current_controller.v_q_setpoint = 0.f;
 800202c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        controller->current_controller.v_d_setpoint = 0.f;
 8002030:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        controller->current_controller.v_alpha_setpoint = 0.f;
 8002034:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        controller->current_controller.v_beta_setpoint = 0.f;
 8002038:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        controller->current_controller.v_a_setpoint = 0.f;
 800203c:	6763      	str	r3, [r4, #116]	; 0x74
        controller->current_controller.v_b_setpoint = 0.f;
 800203e:	67a3      	str	r3, [r4, #120]	; 0x78
        controller->current_controller.v_c_setpoint = 0.f;
 8002040:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002042:	e7a6      	b.n	8001f92 <MotorController_setMode+0xc2>
      PowerStage_disablePWM(&controller->powerstage);
 8002044:	3024      	adds	r0, #36	; 0x24
 8002046:	e794      	b.n	8001f72 <MotorController_setMode+0xa2>
 8002048:	20000648 	.word	0x20000648

0800204c <MotorController_init>:
void MotorController_init(MotorController *controller) {
 800204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  controller->firmware_version = FIRMWARE_VERSION;
 8002050:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <MotorController_init+0x194>)
  Encoder_init(&controller->encoder, &hspi1);
 8002052:	4c64      	ldr	r4, [pc, #400]	; (80021e4 <MotorController_init+0x198>)
  controller->firmware_version = FIRMWARE_VERSION;
 8002054:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
  controller->mode = MODE_DISABLED;
 8002058:	2600      	movs	r6, #0
  controller->device_id = DEVICE_CAN_ID;
 800205a:	f04f 0801 	mov.w	r8, #1
  controller->error = ERROR_INITIALIZATION_ERROR;
 800205e:	f04f 0a04 	mov.w	sl, #4
void MotorController_init(MotorController *controller) {
 8002062:	b091      	sub	sp, #68	; 0x44
 8002064:	4605      	mov	r5, r0
  controller->mode = MODE_DISABLED;
 8002066:	f880 610c 	strb.w	r6, [r0, #268]	; 0x10c
  controller->error = ERROR_INITIALIZATION_ERROR;
 800206a:	f8a0 a10e 	strh.w	sl, [r0, #270]	; 0x10e
  controller->device_id = DEVICE_CAN_ID;
 800206e:	f880 8114 	strb.w	r8, [r0, #276]	; 0x114
  Motor_init(&controller->motor);
 8002072:	304c      	adds	r0, #76	; 0x4c
 8002074:	f7ff fe88 	bl	8001d88 <Motor_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2, &hspi1);
 8002078:	f105 0924 	add.w	r9, r5, #36	; 0x24
  Encoder_init(&controller->encoder, &hspi1);
 800207c:	4621      	mov	r1, r4
 800207e:	4628      	mov	r0, r5
 8002080:	f7ff f9f6 	bl	8001470 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2, &hspi1);
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <MotorController_init+0x19c>)
 8002086:	4959      	ldr	r1, [pc, #356]	; (80021ec <MotorController_init+0x1a0>)
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <MotorController_init+0x1a4>)
 800208a:	9400      	str	r4, [sp, #0]
 800208c:	4648      	mov	r0, r9
 800208e:	f000 ff95 	bl	8002fbc <PowerStage_init>
  CurrentController_init(&controller->current_controller);
 8002092:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8002096:	f7ff f8a9 	bl	80011ec <CurrentController_init>
  PositionController_init(&controller->position_controller);
 800209a:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 800209e:	f000 ff01 	bl	8002ea4 <PositionController_init>
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 80020a2:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <MotorController_init+0x1a8>)
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 80020a4:	4f54      	ldr	r7, [pc, #336]	; (80021f8 <MotorController_init+0x1ac>)
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	656b      	str	r3, [r5, #84]	; 0x54
  MotorController_storeConfig(controller);
 80020aa:	4628      	mov	r0, r5
 80020ac:	f7ff feac 	bl	8001e08 <MotorController_storeConfig>
  filter_config.FilterID1 = controller->device_id;    // filter
 80020b0:	f895 3114 	ldrb.w	r3, [r5, #276]	; 0x114
 80020b4:	9307      	str	r3, [sp, #28]
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 80020b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020ba:	2350      	movs	r3, #80	; 0x50
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 80020bc:	a909      	add	r1, sp, #36	; 0x24
 80020be:	484f      	ldr	r0, [pc, #316]	; (80021fc <MotorController_init+0x1b0>)
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80020c0:	f8cd 8018 	str.w	r8, [sp, #24]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80020c4:	f04f 0b02 	mov.w	fp, #2
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 80020c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  filter_config.FilterIndex = 0;
 80020cc:	e9cd 6603 	strd	r6, r6, [sp, #12]
  cordic_config.Function = CORDIC_FUNCTION_COSINE; // ouput : cosine, then sine
 80020d0:	e9cd 6608 	strd	r6, r6, [sp, #32]
  cordic_config.InSize = CORDIC_INSIZE_32BITS; // q31
 80020d4:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  cordic_config.NbWrite = CORDIC_NBWRITE_1; // ARG2 is 1 default
 80020d8:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80020dc:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 80020e0:	f002 fa32 	bl	8004548 <HAL_CORDIC_Configure>
  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80020e4:	a903      	add	r1, sp, #12
 80020e6:	4846      	ldr	r0, [pc, #280]	; (8002200 <MotorController_init+0x1b4>)
 80020e8:	f002 fbba 	bl	8004860 <HAL_FDCAN_ConfigFilter>
 80020ec:	4604      	mov	r4, r0
  status |= HAL_FDCAN_Start(&hfdcan1);
 80020ee:	4844      	ldr	r0, [pc, #272]	; (8002200 <MotorController_init+0x1b4>)
 80020f0:	f002 fbe8 	bl	80048c4 <HAL_FDCAN_Start>
 80020f4:	4320      	orrs	r0, r4
  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80020f6:	4632      	mov	r2, r6
 80020f8:	4641      	mov	r1, r8
  status |= HAL_FDCAN_Start(&hfdcan1);
 80020fa:	b2c4      	uxtb	r4, r0
  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80020fc:	4840      	ldr	r0, [pc, #256]	; (8002200 <MotorController_init+0x1b4>)
 80020fe:	f002 fce3 	bl	8004ac8 <HAL_FDCAN_ActivateNotification>
 8002102:	4304      	orrs	r4, r0
  status |= HAL_OPAMP_Start(&hopamp1);
 8002104:	483f      	ldr	r0, [pc, #252]	; (8002204 <MotorController_init+0x1b8>)
 8002106:	f003 f915 	bl	8005334 <HAL_OPAMP_Start>
  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800210a:	b2e4      	uxtb	r4, r4
  status |= HAL_OPAMP_Start(&hopamp1);
 800210c:	4304      	orrs	r4, r0
  status |= HAL_OPAMP_Start(&hopamp2);
 800210e:	483e      	ldr	r0, [pc, #248]	; (8002208 <MotorController_init+0x1bc>)
 8002110:	f003 f910 	bl	8005334 <HAL_OPAMP_Start>
  status |= HAL_OPAMP_Start(&hopamp1);
 8002114:	b2e4      	uxtb	r4, r4
  status |= HAL_OPAMP_Start(&hopamp2);
 8002116:	4304      	orrs	r4, r0
  status |= HAL_OPAMP_Start(&hopamp3);
 8002118:	483c      	ldr	r0, [pc, #240]	; (800220c <MotorController_init+0x1c0>)
 800211a:	f003 f90b 	bl	8005334 <HAL_OPAMP_Start>
  status |= HAL_OPAMP_Start(&hopamp2);
 800211e:	b2e4      	uxtb	r4, r4
  status |= HAL_OPAMP_Start(&hopamp3);
 8002120:	4304      	orrs	r4, r0
  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002122:	4831      	ldr	r0, [pc, #196]	; (80021e8 <MotorController_init+0x19c>)
 8002124:	f001 fe0c 	bl	8003d40 <HAL_ADCEx_InjectedStart>
  status |= HAL_OPAMP_Start(&hopamp3);
 8002128:	b2e4      	uxtb	r4, r4
  status |= HAL_ADCEx_InjectedStart(&hadc1);
 800212a:	4304      	orrs	r4, r0
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 800212c:	4830      	ldr	r0, [pc, #192]	; (80021f0 <MotorController_init+0x1a4>)
 800212e:	f001 fe07 	bl	8003d40 <HAL_ADCEx_InjectedStart>
  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002132:	b2e4      	uxtb	r4, r4
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002134:	4304      	orrs	r4, r0
  status |= HAL_TIM_Base_Start_IT(&htim2);                  // safety watchdog timer
 8002136:	4836      	ldr	r0, [pc, #216]	; (8002210 <MotorController_init+0x1c4>)
 8002138:	f004 faac 	bl	8006694 <HAL_TIM_Base_Start_IT>
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 800213c:	b2e4      	uxtb	r4, r4
  status |= HAL_TIM_Base_Start_IT(&htim2);                  // safety watchdog timer
 800213e:	4304      	orrs	r4, r0
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 8002140:	4631      	mov	r1, r6
 8002142:	4638      	mov	r0, r7
 8002144:	f004 fb72 	bl	800682c <HAL_TIM_PWM_Start>
  status |= HAL_TIM_Base_Start_IT(&htim2);                  // safety watchdog timer
 8002148:	b2e4      	uxtb	r4, r4
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 800214a:	4651      	mov	r1, sl
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 800214c:	4304      	orrs	r4, r0
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 800214e:	4638      	mov	r0, r7
 8002150:	f004 fb6c 	bl	800682c <HAL_TIM_PWM_Start>
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 8002154:	b2e4      	uxtb	r4, r4
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 8002156:	4304      	orrs	r4, r0
  status |= HAL_TIM_Base_Start(&htim6);                     // time keeper timer
 8002158:	482e      	ldr	r0, [pc, #184]	; (8002214 <MotorController_init+0x1c8>)
 800215a:	f004 fa67 	bl	800662c <HAL_TIM_Base_Start>
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 800215e:	b2e4      	uxtb	r4, r4
  __HAL_TIM_SET_AUTORELOAD(&htim3, 9999);
 8002160:	683b      	ldr	r3, [r7, #0]
  status |= HAL_TIM_Base_Start(&htim6);                     // time keeper timer
 8002162:	4304      	orrs	r4, r0
  __HAL_TIM_SET_AUTORELOAD(&htim3, 9999);
 8002164:	f242 700f 	movw	r0, #9999	; 0x270f
 8002168:	62d8      	str	r0, [r3, #44]	; 0x2c
 800216a:	60f8      	str	r0, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3));   // red
 800216c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800216e:	6358      	str	r0, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3));   // blue
 8002170:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002172:	6398      	str	r0, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8002174:	4642      	mov	r2, r8
 8002176:	4651      	mov	r1, sl
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	f003 f84c 	bl	8005218 <HAL_GPIO_WritePin>
  PowerStage_start(&controller->powerstage);
 8002180:	4648      	mov	r0, r9
 8002182:	f000 ff3b 	bl	8002ffc <PowerStage_start>
  HAL_Delay(100);
 8002186:	2064      	movs	r0, #100	; 0x64
 8002188:	f001 fc88 	bl	8003a9c <HAL_Delay>
  status |= HAL_TIM_Base_Start(&htim6);                     // time keeper timer
 800218c:	b2e4      	uxtb	r4, r4
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 800218e:	4648      	mov	r0, r9
 8002190:	f001 f82c 	bl	80031ec <PowerStage_calibratePhaseCurrentOffset>
  if (status != HAL_OK) {
 8002194:	b1cc      	cbz	r4, 80021ca <MotorController_init+0x17e>
    SET_BITS(controller->error, ERROR_INITIALIZATION_ERROR);
 8002196:	f8b5 310e 	ldrh.w	r3, [r5, #270]	; 0x10e
    controller->mode = MODE_DISABLED;
 800219a:	f885 610c 	strb.w	r6, [r5, #268]	; 0x10c
    SET_BITS(controller->error, ERROR_INITIALIZATION_ERROR);
 800219e:	ea43 030a 	orr.w	r3, r3, sl
 80021a2:	f8a5 310e 	strh.w	r3, [r5, #270]	; 0x10e
      PowerStage_disablePWM(&controller->powerstage);
 80021a6:	4648      	mov	r0, r9
 80021a8:	f000 ff5c 	bl	8003064 <PowerStage_disablePWM>
      PowerStage_disableGateDriver(&controller->powerstage);
 80021ac:	4648      	mov	r0, r9
 80021ae:	f000 ff49 	bl	8003044 <PowerStage_disableGateDriver>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 80021ba:	635e      	str	r6, [r3, #52]	; 0x34
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 80021bc:	60fa      	str	r2, [r7, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 32);  // blue
 80021be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c0:	0952      	lsrs	r2, r2, #5
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
  controller->mode = mode;
 80021c4:	f885 610c 	strb.w	r6, [r5, #268]	; 0x10c
    while (1) {
 80021c8:	e7fe      	b.n	80021c8 <MotorController_init+0x17c>
  controller->error = ERROR_NO_ERROR;
 80021ca:	f8a5 410e 	strh.w	r4, [r5, #270]	; 0x10e
  controller->mode = MODE_IDLE;
 80021ce:	f885 b10c 	strb.w	fp, [r5, #268]	; 0x10c
  MotorController_setMode(controller, MODE_IDLE);
 80021d2:	4659      	mov	r1, fp
 80021d4:	4628      	mov	r0, r5
 80021d6:	f7ff fe7b 	bl	8001ed0 <MotorController_setMode>
}
 80021da:	b011      	add	sp, #68	; 0x44
 80021dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e0:	00200100 	.word	0x00200100
 80021e4:	2000054c 	.word	0x2000054c
 80021e8:	20000334 	.word	0x20000334
 80021ec:	200005b0 	.word	0x200005b0
 80021f0:	200003a0 	.word	0x200003a0
 80021f4:	0801f800 	.word	0x0801f800
 80021f8:	20000648 	.word	0x20000648
 80021fc:	2000040c 	.word	0x2000040c
 8002200:	20000434 	.word	0x20000434
 8002204:	20000498 	.word	0x20000498
 8002208:	200004d4 	.word	0x200004d4
 800220c:	20000510 	.word	0x20000510
 8002210:	200005fc 	.word	0x200005fc
 8002214:	20000694 	.word	0x20000694

08002218 <MotorController_updateCommutation>:

void MotorController_updateCommutation(MotorController *controller) {
 8002218:	b510      	push	{r4, lr}
//  float position_measured = Encoder_getRelativePosition(&controller->encoder);
  float position_measured = Encoder_getPositionMeasured(&controller->encoder);

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 800221a:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 800221e:	ed90 7a07 	vldr	s14, [r0, #28]
 8002222:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
void MotorController_updateCommutation(MotorController *controller) {
 8002226:	ed2d 8b02 	vpush	{d8}
  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 800222a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  value = fmodf(value, M_2PI_F);
 800222e:	eddf 8a25 	vldr	s17, [pc, #148]	; 80022c4 <MotorController_updateCommutation+0xac>
 8002232:	ee97 0a87 	vfnms.f32	s0, s15, s14
void MotorController_updateCommutation(MotorController *controller) {
 8002236:	4604      	mov	r4, r0
 8002238:	eef0 0a68 	vmov.f32	s1, s17
 800223c:	f008 fab6 	bl	800a7ac <fmodf>
  return value >= 0.f ? value : (value + M_2PI_F);
 8002240:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  value = fmodf(value, M_2PI_F);
 8002248:	eeb0 8a40 	vmov.f32	s16, s0
  return value >= 0.f ? value : (value + M_2PI_F);
 800224c:	bfb8      	it	lt
 800224e:	ee30 8a28 	vaddlt.f32	s16, s0, s17

//  controller->debug_buffer = theta;

  float sin_theta = sinf(theta);
 8002252:	eeb0 0a48 	vmov.f32	s0, s16
 8002256:	f008 fa63 	bl	800a720 <sinf>
 800225a:	eef0 7a40 	vmov.f32	s15, s0
  float cos_theta = cosf(theta);
 800225e:	eeb0 0a48 	vmov.f32	s0, s16
  float sin_theta = sinf(theta);
 8002262:	eeb0 8a67 	vmov.f32	s16, s15
  float cos_theta = cosf(theta);
 8002266:	f008 fa17 	bl	800a698 <cosf>

  CurrentController_update(&controller->current_controller,
 800226a:	ed94 1a12 	vldr	s2, [r4, #72]	; 0x48
 800226e:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
  float cos_theta = cosf(theta);
 8002272:	eef0 0a40 	vmov.f32	s1, s0
  CurrentController_update(&controller->current_controller,
 8002276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800227a:	eeb0 0a48 	vmov.f32	s0, s16
 800227e:	f7fe ffc9 	bl	8001214 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 8002282:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002286:	2b02      	cmp	r3, #2
 8002288:	d00d      	beq.n	80022a6 <MotorController_updateCommutation+0x8e>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 800228a:	ecbd 8b02 	vpop	{d8}
    PowerStage_setBridgeOutput(&controller->powerstage,
 800228e:	ed94 1a1f 	vldr	s2, [r4, #124]	; 0x7c
 8002292:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
 8002296:	ed94 0a1d 	vldr	s0, [r4, #116]	; 0x74
 800229a:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
 800229e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PowerStage_setBridgeOutput(&controller->powerstage,
 80022a2:	f000 bf15 	b.w	80030d0 <PowerStage_setBridgeOutput>
}
 80022a6:	ecbd 8b02 	vpop	{d8}
    PowerStage_setBridgeOutput(&controller->powerstage,
 80022aa:	ed9f 1a07 	vldr	s2, [pc, #28]	; 80022c8 <MotorController_updateCommutation+0xb0>
 80022ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022b2:	eef0 0a41 	vmov.f32	s1, s2
}
 80022b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PowerStage_setBridgeOutput(&controller->powerstage,
 80022ba:	eeb0 0a41 	vmov.f32	s0, s2
 80022be:	f000 bf07 	b.w	80030d0 <PowerStage_setBridgeOutput>
 80022c2:	bf00      	nop
 80022c4:	40c90fdb 	.word	0x40c90fdb
 80022c8:	00000000 	.word	0x00000000

080022cc <MotorController_update>:
void MotorController_update(MotorController *controller) {
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4604      	mov	r4, r0
 80022d0:	ed2d 8b02 	vpush	{d8}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80022d4:	4838      	ldr	r0, [pc, #224]	; (80023b8 <MotorController_update+0xec>)
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 80022d6:	ed9f 8a39 	vldr	s16, [pc, #228]	; 80023bc <MotorController_update+0xf0>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  PowerStage_updatePhaseCurrent(&controller->powerstage,
 80022e0:	f104 0524 	add.w	r5, r4, #36	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80022e4:	f002 ff98 	bl	8005218 <HAL_GPIO_WritePin>
  PowerStage_updatePhaseCurrent(&controller->powerstage,
 80022e8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80022ec:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80022f0:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 ffb3 	bl	8003260 <PowerStage_updatePhaseCurrent>
  Encoder_update(&controller->encoder, 1.f / 20000.f);
 80022fa:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80023c0 <MotorController_update+0xf4>
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff f8cc 	bl	800149c <Encoder_update>
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8002304:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8002308:	edd4 6a2a 	vldr	s13, [r4, #168]	; 0xa8
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 800230c:	6a23      	ldr	r3, [r4, #32]
 800230e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8002312:	ee66 6a88 	vmul.f32	s13, s13, s16
 8002316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
static inline float Encoder_getPositionMeasured(Encoder *encoder) {
  return encoder->position;
}

static inline float Encoder_getPosition(Encoder *encoder) {
  return encoder->position + encoder->position_offset;
 800231a:	edd4 7a07 	vldr	s15, [r4, #28]
 800231e:	ee86 6a87 	vdiv.f32	s12, s13, s14
  PowerStage_updateBusVoltage(&controller->powerstage);
 8002322:	4628      	mov	r0, r5
 8002324:	ed94 7a03 	vldr	s14, [r4, #12]
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8002328:	ed84 6a39 	vstr	s12, [r4, #228]	; 0xe4
 800232c:	ee77 7a87 	vadd.f32	s15, s15, s14
  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 8002330:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
  PowerStage_updateBusVoltage(&controller->powerstage);
 8002334:	f000 ffd4 	bl	80032e0 <PowerStage_updateBusVoltage>
  PositionController_update(&controller->position_controller, controller->mode);
 8002338:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 800233c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002340:	f000 fdd4 	bl	8002eec <PositionController_update>
      || controller->mode == MODE_TORQUE) {
 8002344:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
  if (controller->mode == MODE_POSITION
 8002348:	3b11      	subs	r3, #17
 800234a:	2b02      	cmp	r3, #2
 800234c:	d80e      	bhi.n	800236c <MotorController_update+0xa0>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3f;
 800234e:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8002352:	ed94 7a3a 	vldr	s14, [r4, #232]	; 0xe8
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
    controller->current_controller.i_d_target = 0.f;
 800235a:	2300      	movs	r3, #0
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3f;
 800235c:	ee67 7a87 	vmul.f32	s15, s15, s14
    controller->current_controller.i_d_target = 0.f;
 8002360:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3f;
 8002364:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8002368:	ed84 7a28 	vstr	s14, [r4, #160]	; 0xa0
  if (PowerStage_updateErrorStatus(&controller->powerstage)) {
 800236c:	4628      	mov	r0, r5
 800236e:	f000 fe89 	bl	8003084 <PowerStage_updateErrorStatus>
    SET_BITS(controller->error, ERROR_POWERSTAGE_ERROR);
 8002372:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
  if (PowerStage_updateErrorStatus(&controller->powerstage)) {
 8002376:	b190      	cbz	r0, 800239e <MotorController_update+0xd2>
    SET_BITS(controller->error, ERROR_POWERSTAGE_ERROR);
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
  if (READ_BITS(controller->error, ERROR_ESTOP)) {
 8002380:	079b      	lsls	r3, r3, #30
 8002382:	d413      	bmi.n	80023ac <MotorController_update+0xe0>
  MotorController_updateCommutation(controller);
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ff47 	bl	8002218 <MotorController_updateCommutation>
}
 800238a:	ecbd 8b02 	vpop	{d8}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 800238e:	480a      	ldr	r0, [pc, #40]	; (80023b8 <MotorController_update+0xec>)
}
 8002390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239a:	f002 bf3d 	b.w	8005218 <HAL_GPIO_WritePin>
    CLEAR_BITS(controller->error, ERROR_POWERSTAGE_ERROR);
 800239e:	f023 0310 	bic.w	r3, r3, #16
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
  if (READ_BITS(controller->error, ERROR_ESTOP)) {
 80023a8:	079b      	lsls	r3, r3, #30
 80023aa:	d5eb      	bpl.n	8002384 <MotorController_update+0xb8>
    MotorController_setMode(controller, MODE_IDLE);
 80023ac:	2102      	movs	r1, #2
 80023ae:	4620      	mov	r0, r4
 80023b0:	f7ff fd8e 	bl	8001ed0 <MotorController_setMode>
 80023b4:	e7e6      	b.n	8002384 <MotorController_update+0xb8>
 80023b6:	bf00      	nop
 80023b8:	48000800 	.word	0x48000800
 80023bc:	4104cccd 	.word	0x4104cccd
 80023c0:	3851b717 	.word	0x3851b717
 80023c4:	00000000 	.word	0x00000000

080023c8 <MotorController_runCalibrationSequence>:
    MotorController_runCalibrationSequence(controller);
    return;
  }
}

void MotorController_runCalibrationSequence(MotorController *controller) {
 80023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023cc:	ed2d 8b04 	vpush	{d8-d9}
  MotorController_setMode(controller, MODE_CALIBRATION);
 80023d0:	2105      	movs	r1, #5
void MotorController_runCalibrationSequence(MotorController *controller) {
 80023d2:	b0a5      	sub	sp, #148	; 0x94
 80023d4:	4604      	mov	r4, r0
  MotorController_setMode(controller, MODE_CALIBRATION);
 80023d6:	f7ff fd7b 	bl	8001ed0 <MotorController_setMode>

  HAL_Delay(10);  // wait for state machine to switch
 80023da:	200a      	movs	r0, #10
 80023dc:	f001 fb5e 	bl	8003a9c <HAL_Delay>

  // open loop calibration
  float flux_angle_setpoint = 0;
  float voltage_setpoint = 0.2;

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80023e0:	eddf 0ae1 	vldr	s1, [pc, #900]	; 8002768 <MotorController_runCalibrationSequence+0x3a0>
 80023e4:	ed9f 0ae1 	vldr	s0, [pc, #900]	; 800276c <MotorController_runCalibrationSequence+0x3a4>
  float voltage_setpoint = 0.2;
 80023e8:	ed9f 8adf 	vldr	s16, [pc, #892]	; 8002768 <MotorController_runCalibrationSequence+0x3a0>

  float phase_current = 0;

  while (phase_current < CALIBRATION_CURRENT) {
    HAL_Delay(100);
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80023ec:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800276c <MotorController_runCalibrationSequence+0x3a4>
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fcd3 	bl	8001d9c <MotorController_setFluxAngle>
  HAL_Delay(500);
 80023f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023fa:	f001 fb4f 	bl	8003a9c <HAL_Delay>

    voltage_setpoint += 0.1;
 80023fe:	f20f 3950 	addw	r9, pc, #848	; 0x350
 8002402:	e9d9 8900 	ldrd	r8, r9, [r9]
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 8002406:	f20f 3b50 	addw	fp, pc, #848	; 0x350
 800240a:	e9db ab00 	ldrd	sl, fp, [fp]
  HAL_Delay(500);
 800240e:	25ee      	movs	r5, #238	; 0xee
    HAL_Delay(100);
 8002410:	2064      	movs	r0, #100	; 0x64
 8002412:	f001 fb43 	bl	8003a9c <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002416:	eef0 0a48 	vmov.f32	s1, s16
 800241a:	eeb0 0a49 	vmov.f32	s0, s18
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fcbc 	bl	8001d9c <MotorController_setFluxAngle>
    voltage_setpoint += 0.1;
 8002424:	ee18 0a10 	vmov	r0, s16
 8002428:	f7fe f8b6 	bl	8000598 <__aeabi_f2d>
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	f7fd ff54 	bl	80002dc <__adddf3>
 8002434:	f7fe fbe0 	bl	8000bf8 <__aeabi_d2f>
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 8002438:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800243c:	eef0 7ae7 	vabs.f32	s15, s15
    voltage_setpoint += 0.1;
 8002440:	ee08 0a10 	vmov	s16, r0
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 8002444:	ee17 0a90 	vmov	r0, s15
 8002448:	f7fe f8a6 	bl	8000598 <__aeabi_f2d>
 800244c:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
 8002450:	eef0 7ae7 	vabs.f32	s15, s15
 8002454:	4606      	mov	r6, r0
 8002456:	ee17 0a90 	vmov	r0, s15
 800245a:	460f      	mov	r7, r1
 800245c:	f7fe f89c 	bl	8000598 <__aeabi_f2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4630      	mov	r0, r6
 8002466:	4639      	mov	r1, r7
 8002468:	f7fd ff38 	bl	80002dc <__adddf3>
 800246c:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 8002470:	eef0 7ae7 	vabs.f32	s15, s15
 8002474:	4606      	mov	r6, r0
 8002476:	ee17 0a90 	vmov	r0, s15
 800247a:	460f      	mov	r7, r1
 800247c:	f7fe f88c 	bl	8000598 <__aeabi_f2d>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4630      	mov	r0, r6
 8002486:	4639      	mov	r1, r7
 8002488:	f7fd ff28 	bl	80002dc <__adddf3>
 800248c:	4652      	mov	r2, sl
 800248e:	465b      	mov	r3, fp
 8002490:	f7fe f8da 	bl	8000648 <__aeabi_dmul>
 8002494:	f7fe fbb0 	bl	8000bf8 <__aeabi_d2f>
 8002498:	4603      	mov	r3, r0
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 800249a:	ee18 0a10 	vmov	r0, s16
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 800249e:	ee08 3a90 	vmov	s17, r3
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 80024a2:	f7fe f879 	bl	8000598 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ee18 0a90 	vmov	r0, s17
 80024ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024b2:	f7fe f871 	bl	8000598 <__aeabi_f2d>
 80024b6:	4606      	mov	r6, r0
 80024b8:	460f      	mov	r7, r1
 80024ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80024be:	49ac      	ldr	r1, [pc, #688]	; (8002770 <MotorController_runCalibrationSequence+0x3a8>)
 80024c0:	e9cd 6700 	strd	r6, r7, [sp]
 80024c4:	a804      	add	r0, sp, #16
 80024c6:	f005 fe6f 	bl	80081a8 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80024ca:	a804      	add	r0, sp, #16
 80024cc:	f7fd fea8 	bl	8000220 <strlen>
 80024d0:	4602      	mov	r2, r0
 80024d2:	230a      	movs	r3, #10
 80024d4:	48a7      	ldr	r0, [pc, #668]	; (8002774 <MotorController_runCalibrationSequence+0x3ac>)
 80024d6:	b292      	uxth	r2, r2
 80024d8:	a904      	add	r1, sp, #16
 80024da:	f005 f85b 	bl	8007594 <HAL_UART_Transmit>
    }

    if (voltage_setpoint > 24) {
 80024de:	3d01      	subs	r5, #1
  while (phase_current < CALIBRATION_CURRENT) {
 80024e0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    if (voltage_setpoint > 24) {
 80024e4:	f000 8168 	beq.w	80027b8 <MotorController_runCalibrationSequence+0x3f0>
  while (phase_current < CALIBRATION_CURRENT) {
 80024e8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	d48e      	bmi.n	8002410 <MotorController_runCalibrationSequence+0x48>
      MotorController_setMode(controller, MODE_IDLE);
      return;
    }
  }

  HAL_Delay(500);
 80024f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024f6:	f001 fad1 	bl	8003a9c <HAL_Delay>
 80024fa:	edd4 9a03 	vldr	s19, [r4, #12]
 80024fe:	edd4 7a07 	vldr	s15, [r4, #28]

  float start_position = Encoder_getPosition(&controller->encoder);

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8002502:	eddf 8a9d 	vldr	s17, [pc, #628]	; 8002778 <MotorController_runCalibrationSequence+0x3b0>
 8002506:	a796      	add	r7, pc, #600	; (adr r7, 8002760 <MotorController_runCalibrationSequence+0x398>)
 8002508:	e9d7 6700 	ldrd	r6, r7, [r7]
 800250c:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8002510:	2500      	movs	r5, #0
 8002512:	b22b      	sxth	r3, r5
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int16_t i=0; i<=500; i+=1) {
 800251c:	3501      	adds	r5, #1
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 800251e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
 8002522:	ee17 0a90 	vmov	r0, s15
 8002526:	f7fe f837 	bl	8000598 <__aeabi_f2d>
 800252a:	463b      	mov	r3, r7
 800252c:	4632      	mov	r2, r6
 800252e:	f7fe f88b 	bl	8000648 <__aeabi_dmul>
 8002532:	f7fe fb61 	bl	8000bf8 <__aeabi_d2f>

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002536:	eef0 0a48 	vmov.f32	s1, s16
 800253a:	ee00 0a10 	vmov	s0, r0
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff fc2c 	bl	8001d9c <MotorController_setFluxAngle>
    HAL_Delay(2);
 8002544:	2002      	movs	r0, #2
 8002546:	f001 faa9 	bl	8003a9c <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 800254a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800254e:	429d      	cmp	r5, r3
 8002550:	d1df      	bne.n	8002512 <MotorController_runCalibrationSequence+0x14a>
  }
  HAL_Delay(500);
 8002552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002556:	f001 faa1 	bl	8003a9c <HAL_Delay>
 800255a:	ed94 9a07 	vldr	s18, [r4, #28]
 800255e:	edd4 7a03 	vldr	s15, [r4, #12]

  float end_position = Encoder_getPosition(&controller->encoder);

  for (int16_t i=500; i>=0; i-=1) {
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8002562:	eddf 8a85 	vldr	s17, [pc, #532]	; 8002778 <MotorController_runCalibrationSequence+0x3b0>
 8002566:	a77e      	add	r7, pc, #504	; (adr r7, 8002760 <MotorController_runCalibrationSequence+0x398>)
 8002568:	e9d7 6700 	ldrd	r6, r7, [r7]
 800256c:	ee39 9a27 	vadd.f32	s18, s18, s15
  for (int16_t i=500; i>=0; i-=1) {
 8002570:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8002574:	ee07 5a90 	vmov	s15, r5
 8002578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257c:	3d01      	subs	r5, #1
 800257e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
 8002582:	b22d      	sxth	r5, r5
 8002584:	ee17 0a90 	vmov	r0, s15
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	463b      	mov	r3, r7
 800258e:	4632      	mov	r2, r6
 8002590:	f7fe f85a 	bl	8000648 <__aeabi_dmul>
 8002594:	f7fe fb30 	bl	8000bf8 <__aeabi_d2f>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002598:	eef0 0a48 	vmov.f32	s1, s16
 800259c:	ee00 0a10 	vmov	s0, r0
 80025a0:	4620      	mov	r0, r4
 80025a2:	f7ff fbfb 	bl	8001d9c <MotorController_setFluxAngle>
    HAL_Delay(2);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f001 fa78 	bl	8003a9c <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 80025ac:	1c6b      	adds	r3, r5, #1
 80025ae:	d1e1      	bne.n	8002574 <MotorController_runCalibrationSequence+0x1ac>
  }

  flux_angle_setpoint = 0;
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80025b0:	eef0 0a48 	vmov.f32	s1, s16
 80025b4:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800276c <MotorController_runCalibrationSequence+0x3a4>
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff fbef 	bl	8001d9c <MotorController_setFluxAngle>
  HAL_Delay(500);
 80025be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025c2:	f001 fa6b 	bl	8003a9c <HAL_Delay>
 80025c6:	ed94 7a07 	vldr	s14, [r4, #28]
 80025ca:	edd4 7a03 	vldr	s15, [r4, #12]

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	ee17 0a90 	vmov	r0, s15
 80025d6:	f7fd ffdf 	bl	8000598 <__aeabi_f2d>
 80025da:	4b68      	ldr	r3, [pc, #416]	; (800277c <MotorController_runCalibrationSequence+0x3b4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f7fe f833 	bl	8000648 <__aeabi_dmul>
 80025e2:	4606      	mov	r6, r0
 80025e4:	ee19 0a90 	vmov	r0, s19
 80025e8:	460f      	mov	r7, r1
 80025ea:	f7fd ffd5 	bl	8000598 <__aeabi_f2d>
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <MotorController_runCalibrationSequence+0x3b4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	f7fe f829 	bl	8000648 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4630      	mov	r0, r6
 80025fc:	4639      	mov	r1, r7
 80025fe:	f7fd fe6d 	bl	80002dc <__adddf3>
 8002602:	f7fe faf9 	bl	8000bf8 <__aeabi_d2f>
 8002606:	4603      	mov	r3, r0
 8002608:	ee08 3a10 	vmov	s16, r3
  HAL_Delay(500);
 800260c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002610:	f001 fa44 	bl	8003a9c <HAL_Delay>

  // release motor
  PowerStage_disablePWM(&controller->powerstage);
 8002614:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002618:	f000 fd24 	bl	8003064 <PowerStage_disablePWM>

  float delta_position = end_position - start_position;

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 800261c:	ee18 0a10 	vmov	r0, s16
 8002620:	f7fd ffba 	bl	8000598 <__aeabi_f2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	a804      	add	r0, sp, #16
 800262a:	4955      	ldr	r1, [pc, #340]	; (8002780 <MotorController_runCalibrationSequence+0x3b8>)
 800262c:	f005 fdbc 	bl	80081a8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002630:	a804      	add	r0, sp, #16
 8002632:	f7fd fdf5 	bl	8000220 <strlen>
 8002636:	230a      	movs	r3, #10
 8002638:	b282      	uxth	r2, r0
 800263a:	a904      	add	r1, sp, #16
 800263c:	484d      	ldr	r0, [pc, #308]	; (8002774 <MotorController_runCalibrationSequence+0x3ac>)
 800263e:	f004 ffa9 	bl	8007594 <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 8002642:	ee19 0a10 	vmov	r0, s18
 8002646:	f7fd ffa7 	bl	8000598 <__aeabi_f2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	a804      	add	r0, sp, #16
 8002650:	494c      	ldr	r1, [pc, #304]	; (8002784 <MotorController_runCalibrationSequence+0x3bc>)
 8002652:	f005 fda9 	bl	80081a8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002656:	a804      	add	r0, sp, #16
 8002658:	f7fd fde2 	bl	8000220 <strlen>
  float delta_position = end_position - start_position;
 800265c:	ee79 8a48 	vsub.f32	s17, s18, s16
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002660:	b282      	uxth	r2, r0
 8002662:	230a      	movs	r3, #10
 8002664:	a904      	add	r1, sp, #16
 8002666:	4843      	ldr	r0, [pc, #268]	; (8002774 <MotorController_runCalibrationSequence+0x3ac>)
 8002668:	f004 ff94 	bl	8007594 <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 800266c:	ee18 0a90 	vmov	r0, s17
 8002670:	f7fd ff92 	bl	8000598 <__aeabi_f2d>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	a804      	add	r0, sp, #16
 800267a:	4943      	ldr	r1, [pc, #268]	; (8002788 <MotorController_runCalibrationSequence+0x3c0>)
 800267c:	f005 fd94 	bl	80081a8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002680:	a804      	add	r0, sp, #16
 8002682:	f7fd fdcd 	bl	8000220 <strlen>
  }


  if (fabsf(delta_position) < 0.1) {
 8002686:	eef0 9ae8 	vabs.f32	s19, s17
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800268a:	b282      	uxth	r2, r0
 800268c:	230a      	movs	r3, #10
 800268e:	a904      	add	r1, sp, #16
 8002690:	4838      	ldr	r0, [pc, #224]	; (8002774 <MotorController_runCalibrationSequence+0x3ac>)
 8002692:	f004 ff7f 	bl	8007594 <HAL_UART_Transmit>
  if (fabsf(delta_position) < 0.1) {
 8002696:	ee19 0a90 	vmov	r0, s19
 800269a:	f7fd ff7d 	bl	8000598 <__aeabi_f2d>
 800269e:	a32c      	add	r3, pc, #176	; (adr r3, 8002750 <MotorController_runCalibrationSequence+0x388>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fe fa42 	bl	8000b2c <__aeabi_dcmplt>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d173      	bne.n	8002794 <MotorController_runCalibrationSequence+0x3cc>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 80026ac:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 80026b0:	eef8 8a67 	vcvt.f32.u32	s17, s15
 80026b4:	ee69 7aa8 	vmul.f32	s15, s19, s17
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	f7fd ff6c 	bl	8000598 <__aeabi_f2d>
 80026c0:	a327      	add	r3, pc, #156	; (adr r3, 8002760 <MotorController_runCalibrationSequence+0x398>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd fe07 	bl	80002d8 <__aeabi_dsub>
 80026ca:	f7fe fa95 	bl	8000bf8 <__aeabi_d2f>
 80026ce:	ee07 0a90 	vmov	s15, r0
 80026d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026d6:	eef0 7ae7 	vabs.f32	s15, s15
 80026da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	dc5e      	bgt.n	80027a2 <MotorController_runCalibrationSequence+0x3da>
  value = fmodf(value, M_2PI_F);
 80026e4:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800278c <MotorController_runCalibrationSequence+0x3c4>
 80026e8:	ee28 0a28 	vmul.f32	s0, s16, s17
 80026ec:	eef0 0a49 	vmov.f32	s1, s18
 80026f0:	f008 f85c 	bl	800a7ac <fmodf>
  return value >= 0.f ? value : (value + M_2PI_F);
 80026f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	bfb8      	it	lt
 80026fe:	ee30 0a09 	vaddlt.f32	s0, s0, s18
  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 8002702:	ee10 0a10 	vmov	r0, s0
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 8002706:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 800270a:	f7fd ff45 	bl	8000598 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	a804      	add	r0, sp, #16
 8002714:	491e      	ldr	r1, [pc, #120]	; (8002790 <MotorController_runCalibrationSequence+0x3c8>)
 8002716:	f005 fd47 	bl	80081a8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800271a:	a804      	add	r0, sp, #16
 800271c:	f7fd fd80 	bl	8000220 <strlen>
 8002720:	a904      	add	r1, sp, #16
 8002722:	b282      	uxth	r2, r0
 8002724:	230a      	movs	r3, #10
 8002726:	4813      	ldr	r0, [pc, #76]	; (8002774 <MotorController_runCalibrationSequence+0x3ac>)
 8002728:	f004 ff34 	bl	8007594 <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff fb6b 	bl	8001e08 <MotorController_storeConfig>

  HAL_Delay(1000);
 8002732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002736:	f001 f9b1 	bl	8003a9c <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 800273a:	2102      	movs	r1, #2
 800273c:	4620      	mov	r0, r4
}
 800273e:	b025      	add	sp, #148	; 0x94
 8002740:	ecbd 8b04 	vpop	{d8-d9}
 8002744:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MotorController_setMode(controller, MODE_IDLE);
 8002748:	f7ff bbc2 	b.w	8001ed0 <MotorController_setMode>
 800274c:	f3af 8000 	nop.w
 8002750:	9999999a 	.word	0x9999999a
 8002754:	3fb99999 	.word	0x3fb99999
 8002758:	55555555 	.word	0x55555555
 800275c:	3fd55555 	.word	0x3fd55555
 8002760:	54442d18 	.word	0x54442d18
 8002764:	401921fb 	.word	0x401921fb
 8002768:	3e4ccccd 	.word	0x3e4ccccd
 800276c:	00000000 	.word	0x00000000
 8002770:	0800b3ac 	.word	0x0800b3ac
 8002774:	200006e0 	.word	0x200006e0
 8002778:	43fa0000 	.word	0x43fa0000
 800277c:	3fe00000 	.word	0x3fe00000
 8002780:	0800b3cc 	.word	0x0800b3cc
 8002784:	0800b3e8 	.word	0x0800b3e8
 8002788:	0800b400 	.word	0x0800b400
 800278c:	40c90fdb 	.word	0x40c90fdb
 8002790:	0800b454 	.word	0x0800b454
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <MotorController_runCalibrationSequence+0x400>)
 8002796:	480d      	ldr	r0, [pc, #52]	; (80027cc <MotorController_runCalibrationSequence+0x404>)
 8002798:	230a      	movs	r3, #10
 800279a:	221b      	movs	r2, #27
 800279c:	f004 fefa 	bl	8007594 <HAL_UART_Transmit>
 80027a0:	e784      	b.n	80026ac <MotorController_runCalibrationSequence+0x2e4>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 80027a2:	490b      	ldr	r1, [pc, #44]	; (80027d0 <MotorController_runCalibrationSequence+0x408>)
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <MotorController_runCalibrationSequence+0x404>)
 80027a6:	230a      	movs	r3, #10
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	f004 fef3 	bl	8007594 <HAL_UART_Transmit>
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 80027ae:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 80027b2:	eef8 8a67 	vcvt.f32.u32	s17, s15
 80027b6:	e795      	b.n	80026e4 <MotorController_runCalibrationSequence+0x31c>
      SET_BITS(controller->error, ERROR_CALIBRATION_ERROR);
 80027b8:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 80027bc:	f043 0308 	orr.w	r3, r3, #8
      MotorController_setMode(controller, MODE_IDLE);
 80027c0:	2102      	movs	r1, #2
      SET_BITS(controller->error, ERROR_CALIBRATION_ERROR);
 80027c2:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
      MotorController_setMode(controller, MODE_IDLE);
 80027c6:	e7b9      	b.n	800273c <MotorController_runCalibrationSequence+0x374>
 80027c8:	0800b414 	.word	0x0800b414
 80027cc:	200006e0 	.word	0x200006e0
 80027d0:	0800b430 	.word	0x0800b430

080027d4 <MotorController_updateService>:
  if (controller->mode == MODE_CALIBRATION) {
 80027d4:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d000      	beq.n	80027de <MotorController_updateService+0xa>
}
 80027dc:	4770      	bx	lr
    MotorController_runCalibrationSequence(controller);
 80027de:	f7ff bdf3 	b.w	80023c8 <MotorController_runCalibrationSequence>
 80027e2:	bf00      	nop

080027e4 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 80027e4:	b510      	push	{r4, lr}
  uint16_t device_id = (rx_frame->id) & 0b1111;
 80027e6:	680b      	ldr	r3, [r1, #0]
  if (device_id && device_id != controller->device_id) {
 80027e8:	f013 020f 	ands.w	r2, r3, #15
void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 80027ec:	b086      	sub	sp, #24
  if (device_id && device_id != controller->device_id) {
 80027ee:	d005      	beq.n	80027fc <MotorController_handleCANMessage+0x18>
 80027f0:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 80027f4:	4294      	cmp	r4, r2
 80027f6:	d001      	beq.n	80027fc <MotorController_handleCANMessage+0x18>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
        break;
    }
  }
}
 80027f8:	b006      	add	sp, #24
 80027fa:	bd10      	pop	{r4, pc}
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 80027fc:	794c      	ldrb	r4, [r1, #5]
  uint16_t func_id = (rx_frame->id) >> 4;
 80027fe:	091a      	lsrs	r2, r3, #4
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 8002800:	2c00      	cmp	r4, #0
 8002802:	f040 808b 	bne.w	800291c <MotorController_handleCANMessage+0x138>
    tx_frame.id_type = CAN_ID_STANDARD;
 8002806:	4944      	ldr	r1, [pc, #272]	; (8002918 <MotorController_handleCANMessage+0x134>)
    switch (func_id) {
 8002808:	b292      	uxth	r2, r2
    tx_frame.id_type = CAN_ID_STANDARD;
 800280a:	e9cd 3102 	strd	r3, r1, [sp, #8]
    switch (func_id) {
 800280e:	2a7f      	cmp	r2, #127	; 0x7f
 8002810:	f200 8195 	bhi.w	8002b3e <MotorController_handleCANMessage+0x35a>
 8002814:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002818:	018c02f7 	.word	0x018c02f7
 800281c:	02e202da 	.word	0x02e202da
 8002820:	01930193 	.word	0x01930193
 8002824:	019302bc 	.word	0x019302bc
 8002828:	01930193 	.word	0x01930193
 800282c:	01930193 	.word	0x01930193
 8002830:	01930193 	.word	0x01930193
 8002834:	01930193 	.word	0x01930193
 8002838:	019302c4 	.word	0x019302c4
 800283c:	02d002ca 	.word	0x02d002ca
 8002840:	021a0214 	.word	0x021a0214
 8002844:	01930226 	.word	0x01930226
 8002848:	01930193 	.word	0x01930193
 800284c:	01930193 	.word	0x01930193
 8002850:	01930193 	.word	0x01930193
 8002854:	01930193 	.word	0x01930193
 8002858:	0231022c 	.word	0x0231022c
 800285c:	024b023b 	.word	0x024b023b
 8002860:	01930193 	.word	0x01930193
 8002864:	01930193 	.word	0x01930193
 8002868:	01930193 	.word	0x01930193
 800286c:	01930193 	.word	0x01930193
 8002870:	01930193 	.word	0x01930193
 8002874:	01930193 	.word	0x01930193
 8002878:	02570251 	.word	0x02570251
 800287c:	0193025d 	.word	0x0193025d
 8002880:	01930193 	.word	0x01930193
 8002884:	01930193 	.word	0x01930193
 8002888:	01930193 	.word	0x01930193
 800288c:	01930193 	.word	0x01930193
 8002890:	01930193 	.word	0x01930193
 8002894:	01930193 	.word	0x01930193
 8002898:	02690263 	.word	0x02690263
 800289c:	026e0193 	.word	0x026e0193
 80028a0:	02790273 	.word	0x02790273
 80028a4:	0284027e 	.word	0x0284027e
 80028a8:	0193028b 	.word	0x0193028b
 80028ac:	02990292 	.word	0x02990292
 80028b0:	02a702a0 	.word	0x02a702a0
 80028b4:	019302ae 	.word	0x019302ae
 80028b8:	030902b5 	.word	0x030902b5
 80028bc:	01930310 	.word	0x01930310
 80028c0:	031e0317 	.word	0x031e0317
 80028c4:	032c0325 	.word	0x032c0325
 80028c8:	033a0333 	.word	0x033a0333
 80028cc:	019302f0 	.word	0x019302f0
 80028d0:	01930193 	.word	0x01930193
 80028d4:	01930193 	.word	0x01930193
 80028d8:	01930193 	.word	0x01930193
 80028dc:	01930193 	.word	0x01930193
 80028e0:	01930193 	.word	0x01930193
 80028e4:	01930193 	.word	0x01930193
 80028e8:	01930193 	.word	0x01930193
 80028ec:	01930193 	.word	0x01930193
 80028f0:	01930193 	.word	0x01930193
 80028f4:	01930193 	.word	0x01930193
 80028f8:	01930193 	.word	0x01930193
 80028fc:	01930193 	.word	0x01930193
 8002900:	01930193 	.word	0x01930193
 8002904:	01930193 	.word	0x01930193
 8002908:	01930193 	.word	0x01930193
 800290c:	01930193 	.word	0x01930193
 8002910:	01930193 	.word	0x01930193
 8002914:	018c0193 	.word	0x018c0193
 8002918:	00080100 	.word	0x00080100
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 800291c:	88cc      	ldrh	r4, [r1, #6]
 800291e:	2c00      	cmp	r4, #0
 8002920:	f43f af71 	beq.w	8002806 <MotorController_handleCANMessage+0x22>
    switch (func_id) {
 8002924:	b292      	uxth	r2, r2
 8002926:	2a7e      	cmp	r2, #126	; 0x7e
 8002928:	f63f af66 	bhi.w	80027f8 <MotorController_handleCANMessage+0x14>
 800292c:	a301      	add	r3, pc, #4	; (adr r3, 8002934 <MotorController_handleCANMessage+0x150>)
 800292e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002b4b 	.word	0x08002b4b
 8002938:	08002b63 	.word	0x08002b63
 800293c:	080027f9 	.word	0x080027f9
 8002940:	080027f9 	.word	0x080027f9
 8002944:	08002b6b 	.word	0x08002b6b
 8002948:	080027f9 	.word	0x080027f9
 800294c:	08002b7b 	.word	0x08002b7b
 8002950:	080027f9 	.word	0x080027f9
 8002954:	080027f9 	.word	0x080027f9
 8002958:	080027f9 	.word	0x080027f9
 800295c:	080027f9 	.word	0x080027f9
 8002960:	080027f9 	.word	0x080027f9
 8002964:	080027f9 	.word	0x080027f9
 8002968:	080027f9 	.word	0x080027f9
 800296c:	080027f9 	.word	0x080027f9
 8002970:	080027f9 	.word	0x080027f9
 8002974:	08002b87 	.word	0x08002b87
 8002978:	080027f9 	.word	0x080027f9
 800297c:	08002b8d 	.word	0x08002b8d
 8002980:	080027f9 	.word	0x080027f9
 8002984:	080027f9 	.word	0x080027f9
 8002988:	080027f9 	.word	0x080027f9
 800298c:	080027f9 	.word	0x080027f9
 8002990:	080027f9 	.word	0x080027f9
 8002994:	080027f9 	.word	0x080027f9
 8002998:	080027f9 	.word	0x080027f9
 800299c:	080027f9 	.word	0x080027f9
 80029a0:	080027f9 	.word	0x080027f9
 80029a4:	080027f9 	.word	0x080027f9
 80029a8:	080027f9 	.word	0x080027f9
 80029ac:	080027f9 	.word	0x080027f9
 80029b0:	080027f9 	.word	0x080027f9
 80029b4:	08002b93 	.word	0x08002b93
 80029b8:	080027f9 	.word	0x080027f9
 80029bc:	080027f9 	.word	0x080027f9
 80029c0:	080027f9 	.word	0x080027f9
 80029c4:	080027f9 	.word	0x080027f9
 80029c8:	080027f9 	.word	0x080027f9
 80029cc:	080027f9 	.word	0x080027f9
 80029d0:	080027f9 	.word	0x080027f9
 80029d4:	080027f9 	.word	0x080027f9
 80029d8:	080027f9 	.word	0x080027f9
 80029dc:	080027f9 	.word	0x080027f9
 80029e0:	080027f9 	.word	0x080027f9
 80029e4:	080027f9 	.word	0x080027f9
 80029e8:	080027f9 	.word	0x080027f9
 80029ec:	080027f9 	.word	0x080027f9
 80029f0:	080027f9 	.word	0x080027f9
 80029f4:	080027f9 	.word	0x080027f9
 80029f8:	080027f9 	.word	0x080027f9
 80029fc:	080027f9 	.word	0x080027f9
 8002a00:	080027f9 	.word	0x080027f9
 8002a04:	080027f9 	.word	0x080027f9
 8002a08:	080027f9 	.word	0x080027f9
 8002a0c:	080027f9 	.word	0x080027f9
 8002a10:	080027f9 	.word	0x080027f9
 8002a14:	080027f9 	.word	0x080027f9
 8002a18:	080027f9 	.word	0x080027f9
 8002a1c:	080027f9 	.word	0x080027f9
 8002a20:	080027f9 	.word	0x080027f9
 8002a24:	080027f9 	.word	0x080027f9
 8002a28:	080027f9 	.word	0x080027f9
 8002a2c:	080027f9 	.word	0x080027f9
 8002a30:	080027f9 	.word	0x080027f9
 8002a34:	08002b9d 	.word	0x08002b9d
 8002a38:	08002ba3 	.word	0x08002ba3
 8002a3c:	080027f9 	.word	0x080027f9
 8002a40:	080027f9 	.word	0x080027f9
 8002a44:	080027f9 	.word	0x080027f9
 8002a48:	08002bad 	.word	0x08002bad
 8002a4c:	08002bb7 	.word	0x08002bb7
 8002a50:	080027f9 	.word	0x080027f9
 8002a54:	08002bbd 	.word	0x08002bbd
 8002a58:	080027f9 	.word	0x080027f9
 8002a5c:	08002bcb 	.word	0x08002bcb
 8002a60:	080027f9 	.word	0x080027f9
 8002a64:	080027f9 	.word	0x080027f9
 8002a68:	08002bd9 	.word	0x08002bd9
 8002a6c:	080027f9 	.word	0x080027f9
 8002a70:	080027f9 	.word	0x080027f9
 8002a74:	08002be7 	.word	0x08002be7
 8002a78:	08002bf5 	.word	0x08002bf5
 8002a7c:	08002c03 	.word	0x08002c03
 8002a80:	080027f9 	.word	0x080027f9
 8002a84:	08002c11 	.word	0x08002c11
 8002a88:	08002c1f 	.word	0x08002c1f
 8002a8c:	080027f9 	.word	0x080027f9
 8002a90:	08002c27 	.word	0x08002c27
 8002a94:	080027f9 	.word	0x080027f9
 8002a98:	08002c2f 	.word	0x08002c2f
 8002a9c:	080027f9 	.word	0x080027f9
 8002aa0:	080027f9 	.word	0x080027f9
 8002aa4:	080027f9 	.word	0x080027f9
 8002aa8:	080027f9 	.word	0x080027f9
 8002aac:	080027f9 	.word	0x080027f9
 8002ab0:	080027f9 	.word	0x080027f9
 8002ab4:	080027f9 	.word	0x080027f9
 8002ab8:	080027f9 	.word	0x080027f9
 8002abc:	080027f9 	.word	0x080027f9
 8002ac0:	080027f9 	.word	0x080027f9
 8002ac4:	080027f9 	.word	0x080027f9
 8002ac8:	080027f9 	.word	0x080027f9
 8002acc:	080027f9 	.word	0x080027f9
 8002ad0:	080027f9 	.word	0x080027f9
 8002ad4:	080027f9 	.word	0x080027f9
 8002ad8:	080027f9 	.word	0x080027f9
 8002adc:	080027f9 	.word	0x080027f9
 8002ae0:	080027f9 	.word	0x080027f9
 8002ae4:	080027f9 	.word	0x080027f9
 8002ae8:	080027f9 	.word	0x080027f9
 8002aec:	080027f9 	.word	0x080027f9
 8002af0:	080027f9 	.word	0x080027f9
 8002af4:	080027f9 	.word	0x080027f9
 8002af8:	080027f9 	.word	0x080027f9
 8002afc:	080027f9 	.word	0x080027f9
 8002b00:	080027f9 	.word	0x080027f9
 8002b04:	080027f9 	.word	0x080027f9
 8002b08:	080027f9 	.word	0x080027f9
 8002b0c:	080027f9 	.word	0x080027f9
 8002b10:	080027f9 	.word	0x080027f9
 8002b14:	080027f9 	.word	0x080027f9
 8002b18:	080027f9 	.word	0x080027f9
 8002b1c:	080027f9 	.word	0x080027f9
 8002b20:	080027f9 	.word	0x080027f9
 8002b24:	080027f9 	.word	0x080027f9
 8002b28:	080027f9 	.word	0x080027f9
 8002b2c:	08002c37 	.word	0x08002c37
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8002b30:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
 8002b34:	f88d 3010 	strb.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f8ad 200e 	strh.w	r2, [sp, #14]
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8002b3e:	a902      	add	r1, sp, #8
 8002b40:	48aa      	ldr	r0, [pc, #680]	; (8002dec <MotorController_handleCANMessage+0x608>)
 8002b42:	f7fe fb05 	bl	8001150 <CAN_putTxFrame>
}
 8002b46:	b006      	add	sp, #24
 8002b48:	bd10      	pop	{r4, pc}
        MotorController_setMode(controller, MODE_IDLE);
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	9001      	str	r0, [sp, #4]
 8002b4e:	f7ff f9bf 	bl	8001ed0 <MotorController_setMode>
        SET_BITS(controller->error, ERROR_ESTOP);
 8002b52:	9801      	ldr	r0, [sp, #4]
 8002b54:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	f8a0 310e 	strh.w	r3, [r0, #270]	; 0x10e
        break;
 8002b60:	e64a      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->device_id = *((uint8_t *)rx_frame->data);
 8002b62:	7a0b      	ldrb	r3, [r1, #8]
 8002b64:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
        break;
 8002b68:	e646      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        if (*((uint8_t *)rx_frame->data)) {
 8002b6a:	7a0b      	ldrb	r3, [r1, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 8194 	bne.w	8002e9a <MotorController_handleCANMessage+0x6b6>
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 8002b72:	4b9f      	ldr	r3, [pc, #636]	; (8002df0 <MotorController_handleCANMessage+0x60c>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002b78:	e63e      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 8002b7a:	7a09      	ldrb	r1, [r1, #8]
}
 8002b7c:	b006      	add	sp, #24
 8002b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 8002b82:	f7ff b9a5 	b.w	8001ed0 <MotorController_setMode>
        controller->encoder.cpr = *((int32_t *)rx_frame->data);
 8002b86:	688b      	ldr	r3, [r1, #8]
 8002b88:	6083      	str	r3, [r0, #8]
        break;
 8002b8a:	e635      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->encoder.position_offset = *((float *)rx_frame->data);
 8002b8c:	688b      	ldr	r3, [r1, #8]
 8002b8e:	60c3      	str	r3, [r0, #12]
        break;
 8002b90:	e632      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 8002b92:	688b      	ldr	r3, [r1, #8]
 8002b94:	6343      	str	r3, [r0, #52]	; 0x34
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 8002b96:	68cb      	ldr	r3, [r1, #12]
 8002b98:	6383      	str	r3, [r0, #56]	; 0x38
        break;
 8002b9a:	e62d      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.i_filter_alpha = *((float *)rx_frame->data);
 8002b9c:	688b      	ldr	r3, [r1, #8]
 8002b9e:	6583      	str	r3, [r0, #88]	; 0x58
        break;
 8002ba0:	e62a      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.i_kp = *((float *)rx_frame->data);
 8002ba2:	688b      	ldr	r3, [r1, #8]
 8002ba4:	65c3      	str	r3, [r0, #92]	; 0x5c
        controller->current_controller.i_ki = *((float *)rx_frame->data + 1);
 8002ba6:	68cb      	ldr	r3, [r1, #12]
 8002ba8:	6603      	str	r3, [r0, #96]	; 0x60
        break;
 8002baa:	e625      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_a_setpoint = *((float *)rx_frame->data);
 8002bac:	688b      	ldr	r3, [r1, #8]
 8002bae:	6743      	str	r3, [r0, #116]	; 0x74
        controller->current_controller.v_b_setpoint = *((float *)rx_frame->data + 1);
 8002bb0:	68cb      	ldr	r3, [r1, #12]
 8002bb2:	6783      	str	r3, [r0, #120]	; 0x78
        break;
 8002bb4:	e620      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_c_setpoint = *((float *)rx_frame->data);
 8002bb6:	688b      	ldr	r3, [r1, #8]
 8002bb8:	67c3      	str	r3, [r0, #124]	; 0x7c
        break;
 8002bba:	e61d      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_alpha_setpoint = *((float *)rx_frame->data);
 8002bbc:	688b      	ldr	r3, [r1, #8]
 8002bbe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        controller->current_controller.v_beta_setpoint = *((float *)rx_frame->data + 1);
 8002bc2:	68cb      	ldr	r3, [r1, #12]
 8002bc4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        break;
 8002bc8:	e616      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_q_setpoint = *((float *)rx_frame->data);
 8002bca:	688b      	ldr	r3, [r1, #8]
 8002bcc:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
        controller->current_controller.v_d_setpoint = *((float *)rx_frame->data + 1);
 8002bd0:	68cb      	ldr	r3, [r1, #12]
 8002bd2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        break;
 8002bd6:	e60f      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->current_controller.i_q_setpoint = *((float *)rx_frame->data);
 8002bd8:	688b      	ldr	r3, [r1, #8]
 8002bda:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        controller->current_controller.i_d_setpoint = *((float *)rx_frame->data + 1);
 8002bde:	68cb      	ldr	r3, [r1, #12]
 8002be0:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        break;
 8002be4:	e608      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 8002be6:	688b      	ldr	r3, [r1, #8]
 8002be8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 8002bec:	68cb      	ldr	r3, [r1, #12]
 8002bee:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
        break;
 8002bf2:	e601      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.velocity_kp = *((float *)rx_frame->data);
 8002bf4:	688b      	ldr	r3, [r1, #8]
 8002bf6:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        controller->position_controller.velocity_ki = *((float *)rx_frame->data + 1);
 8002bfa:	68cb      	ldr	r3, [r1, #12]
 8002bfc:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
        break;
 8002c00:	e5fa      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.torque_limit = *((float *)rx_frame->data);
 8002c02:	688b      	ldr	r3, [r1, #8]
 8002c04:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        controller->position_controller.velocity_limit = *((float *)rx_frame->data + 1);
 8002c08:	68cb      	ldr	r3, [r1, #12]
 8002c0a:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
        break;
 8002c0e:	e5f3      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 8002c10:	688b      	ldr	r3, [r1, #8]
 8002c12:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8002c16:	68cb      	ldr	r3, [r1, #12]
 8002c18:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        break;
 8002c1c:	e5ec      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8002c1e:	688b      	ldr	r3, [r1, #8]
 8002c20:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
        break;
 8002c24:	e5e8      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8002c26:	688b      	ldr	r3, [r1, #8]
 8002c28:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
        break;
 8002c2c:	e5e4      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        controller->position_controller.position_target = *((float *)rx_frame->data);
 8002c2e:	688b      	ldr	r3, [r1, #8]
 8002c30:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        break;
 8002c34:	e5e0      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002c36:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <MotorController_handleCANMessage+0x610>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8002c3e:	e5db      	b.n	80027f8 <MotorController_handleCANMessage+0x14>
        *((float *)tx_frame.data) = Encoder_getPositionMeasured(&controller->encoder);
 8002c40:	69c3      	ldr	r3, [r0, #28]
 8002c42:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002c44:	2204      	movs	r2, #4
 8002c46:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002c4a:	e778      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
 8002c4c:	edd0 7a07 	vldr	s15, [r0, #28]
 8002c50:	ed90 7a03 	vldr	s14, [r0, #12]
 8002c54:	ee77 7a87 	vadd.f32	s15, s15, s14
        tx_frame.size = 4;
 8002c58:	2304      	movs	r3, #4
 8002c5a:	f8ad 300e 	strh.w	r3, [sp, #14]
        *((float *)tx_frame.data) = Encoder_getPosition(&controller->encoder);
 8002c5e:	edcd 7a04 	vstr	s15, [sp, #16]
        break;
 8002c62:	e76c      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = Encoder_getVelocity(&controller->encoder);
 8002c64:	6a03      	ldr	r3, [r0, #32]
 8002c66:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002c68:	2204      	movs	r2, #4
 8002c6a:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002c6e:	e766      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8002c70:	6b42      	ldr	r2, [r0, #52]	; 0x34
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8002c72:	6b83      	ldr	r3, [r0, #56]	; 0x38
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8002c74:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8002c76:	9305      	str	r3, [sp, #20]
        break;
 8002c78:	e761      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8002c7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8002c7c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8002c80:	9204      	str	r2, [sp, #16]
        tx_frame.size = 6;
 8002c82:	2106      	movs	r1, #6
 8002c84:	f8ad 100e 	strh.w	r1, [sp, #14]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8002c88:	f8ad 3014 	strh.w	r3, [sp, #20]
        break;
 8002c8c:	e757      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8002c8e:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8002c92:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8002c96:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8002c9a:	f8ad 1010 	strh.w	r1, [sp, #16]
        tx_frame.size = 6;
 8002c9e:	2006      	movs	r0, #6
 8002ca0:	f8ad 000e 	strh.w	r0, [sp, #14]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8002ca4:	f8ad 2012 	strh.w	r2, [sp, #18]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8002ca8:	f8ad 3014 	strh.w	r3, [sp, #20]
        break;
 8002cac:	e747      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8002cae:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002cb0:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002cb8:	e741      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8002cba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002cbc:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002cc4:	e73b      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8002cc6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002cc8:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002cca:	2204      	movs	r2, #4
 8002ccc:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002cd0:	e735      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8002cd2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cd4:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002cdc:	e72f      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_filter_alpha;
 8002cde:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002ce0:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002ce8:	e729      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_kp;
 8002cea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
        *((float *)tx_frame.data + 1) = controller->current_controller.i_ki;
 8002cec:	6e03      	ldr	r3, [r0, #96]	; 0x60
        *((float *)tx_frame.data) = controller->current_controller.i_kp;
 8002cee:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_ki;
 8002cf0:	9305      	str	r3, [sp, #20]
        break;
 8002cf2:	e724      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_a_measured;
 8002cf4:	6e82      	ldr	r2, [r0, #104]	; 0x68
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8002cf6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
        *((float *)tx_frame.data) = controller->current_controller.i_a_measured;
 8002cf8:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8002cfa:	9305      	str	r3, [sp, #20]
        break;
 8002cfc:	e71f      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8002cfe:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002d00:	9305      	str	r3, [sp, #20]
        tx_frame.size = 4;
 8002d02:	2204      	movs	r2, #4
 8002d04:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d08:	e719      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8002d0a:	6f42      	ldr	r2, [r0, #116]	; 0x74
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8002d0c:	6f83      	ldr	r3, [r0, #120]	; 0x78
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8002d0e:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8002d10:	9305      	str	r3, [sp, #20]
        break;
 8002d12:	e714      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8002d14:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002d16:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d18:	2204      	movs	r2, #4
 8002d1a:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d1e:	e70e      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_alpha_measured;
 8002d20:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8002d24:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
        *((float *)tx_frame.data) = controller->current_controller.i_alpha_measured;
 8002d28:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8002d2a:	9305      	str	r3, [sp, #20]
        break;
 8002d2c:	e707      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8002d2e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8002d32:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8002d36:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8002d38:	9305      	str	r3, [sp, #20]
        break;
 8002d3a:	e700      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8002d3c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8002d40:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8002d44:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8002d46:	9305      	str	r3, [sp, #20]
        break;
 8002d48:	e6f9      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_measured;
 8002d4a:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8002d4e:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
        *((float *)tx_frame.data) = controller->current_controller.i_q_measured;
 8002d52:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8002d54:	9305      	str	r3, [sp, #20]
        break;
 8002d56:	e6f2      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8002d58:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_target;
 8002d5c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8002d60:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_target;
 8002d62:	9305      	str	r3, [sp, #20]
        break;
 8002d64:	e6eb      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8002d66:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8002d6a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8002d6e:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8002d70:	9305      	str	r3, [sp, #20]
        break;
 8002d72:	e6e4      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8002d74:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8002d78:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8002d7c:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8002d7e:	9305      	str	r3, [sp, #20]
        break;
 8002d80:	e6dd      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8002d82:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8002d86:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8002d8a:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8002d8c:	9305      	str	r3, [sp, #20]
        break;
 8002d8e:	e6d6      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((uint8_t *)tx_frame.data) = (uint8_t)MotorController_getMode(controller);
 8002d90:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8002d94:	f88d 3010 	strb.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d9e:	e6ce      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((int32_t *)tx_frame.data) = controller->encoder.cpr;
 8002da0:	6883      	ldr	r3, [r0, #8]
 8002da2:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002da4:	2204      	movs	r2, #4
 8002da6:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002daa:	e6c8      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = Encoder_getPositionOffset(&controller->encoder);
 8002dac:	68c3      	ldr	r3, [r0, #12]
 8002dae:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002db0:	2204      	movs	r2, #4
 8002db2:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002db6:	e6c2      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8002db8:	edd0 7a06 	vldr	s15, [r0, #24]
 8002dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        tx_frame.size = 4;
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f8ad 300e 	strh.w	r3, [sp, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8002dc6:	edcd 7a04 	vstr	s15, [sp, #16]
        break;
 8002dca:	e6b8      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8002dcc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8002dd0:	f88d 3010 	strb.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002dda:	e6b0      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((uint16_t *)tx_frame.data) = (uint16_t)controller->error;
 8002ddc:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
 8002de0:	f8ad 3010 	strh.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002de4:	2201      	movs	r2, #1
 8002de6:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002dea:	e6a8      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
 8002dec:	20000434 	.word	0x20000434
 8002df0:	0801f800 	.word	0x0801f800
 8002df4:	200005fc 	.word	0x200005fc
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8002df8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8002dfc:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002dfe:	2204      	movs	r2, #4
 8002e00:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e04:	e69b      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        MotorController_setMode(controller, MODE_IDLE);
 8002e06:	2102      	movs	r1, #2
 8002e08:	9001      	str	r0, [sp, #4]
 8002e0a:	f7ff f861 	bl	8001ed0 <MotorController_setMode>
        SET_BITS(controller->error, ERROR_ESTOP);
 8002e0e:	9801      	ldr	r0, [sp, #4]
 8002e10:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
        tx_frame.size = 1;
 8002e14:	2101      	movs	r1, #1
        SET_BITS(controller->error, ERROR_ESTOP);
 8002e16:	f043 0302 	orr.w	r3, r3, #2
        *((uint8_t *)tx_frame.data) = 0xAC;
 8002e1a:	22ac      	movs	r2, #172	; 0xac
        SET_BITS(controller->error, ERROR_ESTOP);
 8002e1c:	f8a0 310e 	strh.w	r3, [r0, #270]	; 0x10e
        tx_frame.size = 1;
 8002e20:	f8ad 100e 	strh.w	r1, [sp, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8002e24:	f88d 2010 	strb.w	r2, [sp, #16]
        break;
 8002e28:	e689      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.velocity_kp;
 8002e2a:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_ki;
 8002e2e:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
        *((float *)tx_frame.data) = controller->position_controller.velocity_kp;
 8002e32:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_ki;
 8002e34:	9305      	str	r3, [sp, #20]
        break;
 8002e36:	e682      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.torque_limit;
 8002e38:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit;
 8002e3c:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
        *((float *)tx_frame.data) = controller->position_controller.torque_limit;
 8002e40:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit;
 8002e42:	9305      	str	r3, [sp, #20]
        break;
 8002e44:	e67b      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8002e46:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8002e4a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8002e4e:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8002e50:	9305      	str	r3, [sp, #20]
        break;
 8002e52:	e674      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8002e54:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8002e58:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8002e5c:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8002e5e:	9305      	str	r3, [sp, #20]
        break;
 8002e60:	e66d      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 8002e62:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8002e66:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002e68:	2204      	movs	r2, #4
 8002e6a:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e6e:	e666      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8002e70:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8002e74:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8002e78:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8002e7a:	9305      	str	r3, [sp, #20]
        break;
 8002e7c:	e65f      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 8002e7e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 8002e82:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002e84:	2204      	movs	r2, #4
 8002e86:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e8a:	e658      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8002e8c:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8002e90:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8002e94:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8002e96:	9305      	str	r3, [sp, #20]
        break;
 8002e98:	e651      	b.n	8002b3e <MotorController_handleCANMessage+0x35a>
}
 8002e9a:	b006      	add	sp, #24
 8002e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          MotorController_storeConfig(controller);
 8002ea0:	f7fe bfb2 	b.w	8001e08 <MotorController_storeConfig>

08002ea4 <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 8002ea4:	b500      	push	{lr}
  //  controller->position_kp = 0.f;
  controller->position_kp = 0.01f;
  controller->position_ki = 0.f;
//  controller->velocity_kp = 0.f;
  controller->velocity_kp = 0.0001f;
 8002ea6:	490d      	ldr	r1, [pc, #52]	; (8002edc <PositionController_init+0x38>)

  controller->torque_limit = 1;

  controller->velocity_limit = 20;

  controller->position_limit_lower = -INFINITY;
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <PositionController_init+0x3c>)
  controller->position_kp = 0.01f;
 8002eaa:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8002ee8 <PositionController_init+0x44>
  controller->position_limit_lower = -INFINITY;
 8002eae:	61c2      	str	r2, [r0, #28]
  controller->position_ki = 0.f;
 8002eb0:	2300      	movs	r3, #0
  controller->torque_limit = 1;
 8002eb2:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
  controller->position_limit_upper = INFINITY;
 8002eb6:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
  controller->velocity_kp = 0.0001f;
 8002eba:	6081      	str	r1, [r0, #8]
  controller->velocity_limit = 20;
 8002ebc:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <PositionController_init+0x40>)
  controller->torque_limit = 1;
 8002ebe:	f8c0 e010 	str.w	lr, [r0, #16]
  controller->position_kp = 0.01f;
 8002ec2:	f8c0 c000 	str.w	ip, [r0]
  controller->position_ki = 0.f;
 8002ec6:	6043      	str	r3, [r0, #4]
  controller->velocity_ki = 0.f;
 8002ec8:	60c3      	str	r3, [r0, #12]
  controller->velocity_limit = 20;
 8002eca:	6141      	str	r1, [r0, #20]
  controller->position_limit_upper = INFINITY;
 8002ecc:	6182      	str	r2, [r0, #24]

  controller->velocity_setpoint = 0;
 8002ece:	6343      	str	r3, [r0, #52]	; 0x34
  controller->position_setpoint = 0;
 8002ed0:	6403      	str	r3, [r0, #64]	; 0x40

  controller->position_integrator = 0;
 8002ed2:	6443      	str	r3, [r0, #68]	; 0x44
  controller->velocity_integrator = 0;
 8002ed4:	6483      	str	r3, [r0, #72]	; 0x48
}
 8002ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eda:	bf00      	nop
 8002edc:	38d1b717 	.word	0x38d1b717
 8002ee0:	ff800000 	.word	0xff800000
 8002ee4:	41a00000 	.word	0x41a00000
 8002ee8:	3c23d70a 	.word	0x3c23d70a

08002eec <PositionController_update>:

void PositionController_update(PositionController *controller, Mode mode) {
  if (mode == MODE_POSITION) {
 8002eec:	2913      	cmp	r1, #19
 8002eee:	d014      	beq.n	8002f1a <PositionController_update+0x2e>
//        controller->velocity_integrator,
//        -2.f * controller->velocity_limit,
//        2.f * controller->velocity_limit);
  }

  controller->torque_setpoint = clampf(
 8002ef0:	edd0 7a08 	vldr	s15, [r0, #32]
      controller->torque_target,
      -controller->torque_limit,
 8002ef4:	ed90 7a04 	vldr	s14, [r0, #16]
  return (value > max) ? max : ((value < min) ? min : value);
 8002ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	d408      	bmi.n	8002f14 <PositionController_update+0x28>
  controller->torque_setpoint = clampf(
 8002f02:	eeb1 7a47 	vneg.f32	s14, s14
 8002f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	bfd8      	it	le
 8002f10:	eeb0 7a67 	vmovle.f32	s14, s15
 8002f14:	ed80 7a0a 	vstr	s14, [r0, #40]	; 0x28
      controller->torque_limit);
}
 8002f18:	4770      	bx	lr
    float position_setpoint = controller->position_target;
 8002f1a:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
    controller->position_setpoint = clampf(
 8002f1e:	ed90 6a06 	vldr	s12, [r0, #24]
 8002f22:	ed90 7a07 	vldr	s14, [r0, #28]
 8002f26:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	d535      	bpl.n	8002f9c <PositionController_update+0xb0>
    float velocity_error = 0.f - controller->velocity_measured;
 8002f30:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8002f34:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002fb0 <PositionController_update+0xc4>
    float position_error = controller->position_setpoint - controller->position_measured;
 8002f38:	edd0 6a0f 	vldr	s13, [r0, #60]	; 0x3c
        controller->position_integrator;
 8002f3c:	edd0 5a11 	vldr	s11, [r0, #68]	; 0x44
    controller->position_integrator = clampf(
 8002f40:	edd0 4a01 	vldr	s9, [r0, #4]
 8002f44:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8002fb4 <PositionController_update+0xc8>
    controller->position_setpoint = clampf(
 8002f48:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    float velocity_error = 0.f - controller->velocity_measured;
 8002f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        controller->velocity_kp * velocity_error +
 8002f50:	ed90 7a02 	vldr	s14, [r0, #8]
    float position_error = controller->position_setpoint - controller->position_measured;
 8002f54:	ee76 6a66 	vsub.f32	s13, s12, s13
        controller->velocity_kp * velocity_error +
 8002f58:	ee67 7a87 	vmul.f32	s15, s15, s14
        controller->position_kp * position_error +
 8002f5c:	ed90 7a00 	vldr	s14, [r0]
 8002f60:	eee7 7a26 	vfma.f32	s15, s14, s13
    controller->position_integrator = clampf(
 8002f64:	eeb0 7a65 	vmov.f32	s14, s11
 8002f68:	eea4 7aa6 	vfma.f32	s14, s9, s13
        controller->velocity_kp * velocity_error +
 8002f6c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002f70:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->torque_target =
 8002f78:	edc0 7a08 	vstr	s15, [r0, #32]
 8002f7c:	dc0b      	bgt.n	8002f96 <PositionController_update+0xaa>
 8002f7e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002fb8 <PositionController_update+0xcc>
 8002f82:	eeb4 7a66 	vcmp.f32	s14, s13
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	bf48      	it	mi
 8002f8c:	eeb0 7a66 	vmovmi.f32	s14, s13
    controller->position_integrator = clampf(
 8002f90:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
 8002f94:	e7ae      	b.n	8002ef4 <PositionController_update+0x8>
 8002f96:	eeb0 7a45 	vmov.f32	s14, s10
 8002f9a:	e7f9      	b.n	8002f90 <PositionController_update+0xa4>
 8002f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	bfd4      	ite	le
 8002fa6:	eeb0 6a67 	vmovle.f32	s12, s15
 8002faa:	eeb0 6a47 	vmovgt.f32	s12, s14
 8002fae:	e7bf      	b.n	8002f30 <PositionController_update+0x44>
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	3dcccccd 	.word	0x3dcccccd
 8002fb8:	bdcccccd 	.word	0xbdcccccd

08002fbc <PowerStage_init>:
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2, SPI_HandleTypeDef *hspi) {
  powerstage->htim = htim;
 8002fbc:	6001      	str	r1, [r0, #0]
uint8_t PowerStage_isPWMEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disablePWM(PowerStage *powerstage) {
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8002fbe:	6809      	ldr	r1, [r1, #0]
  powerstage->hadc1 = hadc1;
 8002fc0:	6042      	str	r2, [r0, #4]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8002fc2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  powerstage->bus_voltage_measured = 24.;
 8002fc4:	f8df c020 	ldr.w	ip, [pc, #32]	; 8002fe8 <PowerStage_init+0x2c>
  powerstage->hadc2 = hadc2;
 8002fc8:	6083      	str	r3, [r0, #8]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  powerstage->hspi = hspi;
 8002fce:	9b00      	ldr	r3, [sp, #0]
  powerstage->bus_voltage_measured = 24.;
 8002fd0:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  powerstage->hspi = hspi;
 8002fd4:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8002fd6:	644a      	str	r2, [r1, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <PowerStage_init+0x28>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	f002 b91b 	b.w	8005218 <HAL_GPIO_WritePin>
 8002fe2:	bf00      	nop
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	41c00000 	.word	0x41c00000

08002fec <PowerStage_reset>:
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, 0U);
 8002fec:	6803      	ldr	r3, [r0, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, 0U);
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, 0U);
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <PowerStage_start>:
void PowerStage_start(PowerStage *powerstage) {
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4604      	mov	r4, r0
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, 0U);
 8003000:	6800      	ldr	r0, [r0, #0]
 8003002:	6803      	ldr	r3, [r0, #0]
 8003004:	2500      	movs	r5, #0
 8003006:	635d      	str	r5, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 8003008:	4629      	mov	r1, r5
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, 0U);
 800300a:	639d      	str	r5, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, 0U);
 800300c:	63dd      	str	r5, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 800300e:	f003 fc0d 	bl	800682c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 8003012:	4629      	mov	r1, r5
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	f003 ffe1 	bl	8006fdc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	2104      	movs	r1, #4
 800301e:	f003 fc05 	bl	800682c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	2104      	movs	r1, #4
 8003026:	f003 ffd9 	bl	8006fdc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	2108      	movs	r1, #8
 800302e:	f003 fbfd 	bl	800682c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	2108      	movs	r1, #8
 8003036:	f003 ffd1 	bl	8006fdc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(powerstage->htim);
 800303a:	6820      	ldr	r0, [r4, #0]
}
 800303c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_TIM_Base_Start_IT(powerstage->htim);
 8003040:	f003 bb28 	b.w	8006694 <HAL_TIM_Base_Start_IT>

08003044 <PowerStage_disableGateDriver>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <PowerStage_disableGateDriver+0xc>)
 8003046:	2200      	movs	r2, #0
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	f002 b8e5 	b.w	8005218 <HAL_GPIO_WritePin>
 800304e:	bf00      	nop
 8003050:	48000400 	.word	0x48000400

08003054 <PowerStage_enableGateDriver>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <PowerStage_enableGateDriver+0xc>)
 8003056:	2201      	movs	r2, #1
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	f002 b8dd 	b.w	8005218 <HAL_GPIO_WritePin>
 800305e:	bf00      	nop
 8003060:	48000400 	.word	0x48000400

08003064 <PowerStage_disablePWM>:
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8003064:	6803      	ldr	r3, [r0, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800306a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800306e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <PowerStage_enablePWM>:

void PowerStage_enablePWM(PowerStage *powerstage) {
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 8003074:	6803      	ldr	r3, [r0, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800307a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop

08003084 <PowerStage_updateErrorStatus>:

ErrorCode PowerStage_updateErrorStatus(PowerStage *powerstage) {
 8003084:	b530      	push	{r4, r5, lr}
 8003086:	4604      	mov	r4, r0
 8003088:	b085      	sub	sp, #20
  uint16_t tx_buffer[2];
  uint16_t rx_buffer[2];

  tx_buffer[0] = (1 << 15) | (0x00 << 11);
 800308a:	f44f 4300 	mov.w	r3, #32768	; 0x8000

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800308e:	480f      	ldr	r0, [pc, #60]	; (80030cc <PowerStage_updateErrorStatus+0x48>)
  tx_buffer[0] = (1 << 15) | (0x00 << 11);
 8003090:	f8ad 3008 	strh.w	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2140      	movs	r1, #64	; 0x40
  HAL_SPI_TransmitReceive(powerstage->hspi, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 8003098:	2564      	movs	r5, #100	; 0x64
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800309a:	f002 f8bd 	bl	8005218 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(powerstage->hspi, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 800309e:	2301      	movs	r3, #1
 80030a0:	68e0      	ldr	r0, [r4, #12]
 80030a2:	9500      	str	r5, [sp, #0]
 80030a4:	aa03      	add	r2, sp, #12
 80030a6:	a902      	add	r1, sp, #8
 80030a8:	f003 f84a 	bl	8006140 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	4807      	ldr	r0, [pc, #28]	; (80030cc <PowerStage_updateErrorStatus+0x48>)
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	f002 f8b1 	bl	8005218 <HAL_GPIO_WritePin>
//
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
//  HAL_SPI_TransmitReceive(powerstage->hspi, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);

  if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 80030b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ba:	4804      	ldr	r0, [pc, #16]	; (80030cc <PowerStage_updateErrorStatus+0x48>)
 80030bc:	f002 f8a6 	bl	800520c <HAL_GPIO_ReadPin>
    return ERROR_POWERSTAGE_ERROR;
 80030c0:	2800      	cmp	r0, #0
  }
  return ERROR_NO_ERROR;
}
 80030c2:	bf0c      	ite	eq
 80030c4:	2010      	moveq	r0, #16
 80030c6:	2000      	movne	r0, #0
 80030c8:	b005      	add	sp, #20
 80030ca:	bd30      	pop	{r4, r5, pc}
 80030cc:	48000400 	.word	0x48000400

080030d0 <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 80030d0:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 80030d4:	eddf 4a43 	vldr	s9, [pc, #268]	; 80031e4 <PowerStage_setBridgeOutput+0x114>
 80030d8:	eec0 6a27 	vdiv.f32	s13, s0, s15
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 80030dc:	eec1 5a27 	vdiv.f32	s11, s2, s15
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 80030e0:	ee80 7aa7 	vdiv.f32	s14, s1, s15
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 80030e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80030e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80030f0:	ee26 5a86 	vmul.f32	s10, s13, s12
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 80030f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f8:	eeb4 5ae4 	vcmpe.f32	s10, s9
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 80030fc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8003104:	ee67 5a06 	vmul.f32	s11, s14, s12
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8003108:	ee27 6a86 	vmul.f32	s12, s15, s12
 800310c:	dc55      	bgt.n	80031ba <PowerStage_setBridgeOutput+0xea>
 800310e:	eddf 7a36 	vldr	s15, [pc, #216]	; 80031e8 <PowerStage_setBridgeOutput+0x118>
 8003112:	eeb4 5a67 	vcmp.f32	s10, s15
 8003116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311a:	bf48      	it	mi
 800311c:	eeb0 5a67 	vmovmi.f32	s10, s15
 8003120:	eddf 7a30 	vldr	s15, [pc, #192]	; 80031e4 <PowerStage_setBridgeOutput+0x114>
 8003124:	eef4 5ae7 	vcmpe.f32	s11, s15
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	dc4e      	bgt.n	80031cc <PowerStage_setBridgeOutput+0xfc>
 800312e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80031e8 <PowerStage_setBridgeOutput+0x118>
 8003132:	eef4 5a67 	vcmp.f32	s11, s15
 8003136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313a:	bf48      	it	mi
 800313c:	eef0 5a67 	vmovmi.f32	s11, s15
 8003140:	eddf 7a28 	vldr	s15, [pc, #160]	; 80031e4 <PowerStage_setBridgeOutput+0x114>
 8003144:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	dc47      	bgt.n	80031de <PowerStage_setBridgeOutput+0x10e>
 800314e:	eddf 7a26 	vldr	s15, [pc, #152]	; 80031e8 <PowerStage_setBridgeOutput+0x118>
 8003152:	eeb4 6a67 	vcmp.f32	s12, s15
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	bf48      	it	mi
 800315c:	eeb0 6a67 	vmovmi.f32	s12, s15

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
  v_c = clampf(v_c, 0.02f, 0.98f);

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 8003166:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 8003168:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 800316a:	3101      	adds	r1, #1
 800316c:	ee06 1a90 	vmov	s13, r1
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 8003170:	3201      	adds	r2, #1
 8003172:	ee07 2a10 	vmov	s14, r2
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 8003176:	eef8 6a66 	vcvt.f32.u32	s13, s13
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 800317a:	3301      	adds	r3, #1
 800317c:	ee07 3a90 	vmov	s15, r3
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 8003180:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 8003184:	ee66 6a85 	vmul.f32	s13, s13, s10
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 8003188:	eef8 7a67 	vcvt.f32.u32	s15, s15
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 800318c:	ee27 7a25 	vmul.f32	s14, s14, s11
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 8003190:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 8003194:	ee67 7a86 	vmul.f32	s15, s15, s12

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 8003198:	ee16 3a90 	vmov	r3, s13
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 800319c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80031a0:	b299      	uxth	r1, r3
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80031a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 80031a6:	ee17 3a10 	vmov	r3, s14
 80031aa:	b29a      	uxth	r2, r3
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 80031ac:	ee17 3a90 	vmov	r3, s15
 80031b0:	b29b      	uxth	r3, r3
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80031b2:	6341      	str	r1, [r0, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 80031b4:	6382      	str	r2, [r0, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 80031b6:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 80031b8:	4770      	bx	lr
 80031ba:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80031e4 <PowerStage_setBridgeOutput+0x114>
 80031be:	eef4 5ae7 	vcmpe.f32	s11, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	eeb0 5a64 	vmov.f32	s10, s9
 80031ca:	ddb0      	ble.n	800312e <PowerStage_setBridgeOutput+0x5e>
 80031cc:	eef0 5a67 	vmov.f32	s11, s15
 80031d0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80031e4 <PowerStage_setBridgeOutput+0x114>
 80031d4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	ddb7      	ble.n	800314e <PowerStage_setBridgeOutput+0x7e>
 80031de:	eeb0 6a67 	vmov.f32	s12, s15
 80031e2:	e7bd      	b.n	8003160 <PowerStage_setBridgeOutput+0x90>
 80031e4:	3f7ae148 	.word	0x3f7ae148
 80031e8:	3ca3d70a 	.word	0x3ca3d70a

080031ec <PowerStage_calibratePhaseCurrentOffset>:

void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t adc_reading_0 = 0;
  int32_t adc_reading_1 = 0;
  int32_t adc_reading_2 = 0;
 80031f0:	2600      	movs	r6, #0
void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 80031f2:	4605      	mov	r5, r0
 80031f4:	240a      	movs	r4, #10
  int32_t adc_reading_1 = 0;
 80031f6:	4637      	mov	r7, r6
  int32_t adc_reading_0 = 0;
 80031f8:	46b0      	mov	r8, r6
  for (uint16_t i=0; i<10; i+=1) {
    adc_reading_0 += HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80031fa:	2109      	movs	r1, #9
 80031fc:	6868      	ldr	r0, [r5, #4]
 80031fe:	f000 fe0d 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003202:	2109      	movs	r1, #9
    adc_reading_0 += HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8003204:	4603      	mov	r3, r0
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003206:	68a8      	ldr	r0, [r5, #8]
    adc_reading_0 += HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8003208:	4498      	add	r8, r3
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800320a:	f000 fe07 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800320e:	f240 110f 	movw	r1, #271	; 0x10f
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003212:	4603      	mov	r3, r0
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003214:	68a8      	ldr	r0, [r5, #8]
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003216:	441f      	add	r7, r3
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003218:	f000 fe00 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>
  for (uint16_t i=0; i<10; i+=1) {
 800321c:	3c01      	subs	r4, #1
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800321e:	4603      	mov	r3, r0
  for (uint16_t i=0; i<10; i+=1) {
 8003220:	b2a4      	uxth	r4, r4
    HAL_Delay(10);
 8003222:	200a      	movs	r0, #10
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003224:	441e      	add	r6, r3
    HAL_Delay(10);
 8003226:	f000 fc39 	bl	8003a9c <HAL_Delay>
  for (uint16_t i=0; i<10; i+=1) {
 800322a:	2c00      	cmp	r4, #0
 800322c:	d1e5      	bne.n	80031fa <PowerStage_calibratePhaseCurrentOffset+0xe>
  }
  powerstage->adc_reading_offset[0] = adc_reading_0 / 10;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <PowerStage_calibratePhaseCurrentOffset+0x70>)
 8003230:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8003234:	fb83 1808 	smull	r1, r8, r3, r8
 8003238:	ebc2 08a8 	rsb	r8, r2, r8, asr #2
  powerstage->adc_reading_offset[1] = adc_reading_1 / 10;
 800323c:	fb83 1207 	smull	r1, r2, r3, r7
 8003240:	17ff      	asrs	r7, r7, #31
 8003242:	ebc7 07a2 	rsb	r7, r7, r2, asr #2
  powerstage->adc_reading_offset[2] = adc_reading_2 / 10;
 8003246:	fb83 2306 	smull	r2, r3, r3, r6
 800324a:	17f6      	asrs	r6, r6, #31
 800324c:	ebc6 06a3 	rsb	r6, r6, r3, asr #2
  powerstage->adc_reading_offset[0] = adc_reading_0 / 10;
 8003250:	f8a5 801e 	strh.w	r8, [r5, #30]
  powerstage->adc_reading_offset[1] = adc_reading_1 / 10;
 8003254:	842f      	strh	r7, [r5, #32]
  powerstage->adc_reading_offset[2] = adc_reading_2 / 10;
 8003256:	846e      	strh	r6, [r5, #34]	; 0x22
}
 8003258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800325c:	66666667 	.word	0x66666667

08003260 <PowerStage_updatePhaseCurrent>:

void PowerStage_updatePhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	460f      	mov	r7, r1
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8003266:	6840      	ldr	r0, [r0, #4]
 8003268:	2109      	movs	r1, #9
void PowerStage_updatePhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 800326a:	461d      	mov	r5, r3
 800326c:	4616      	mov	r6, r2
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 800326e:	f000 fdd5 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003272:	2109      	movs	r1, #9
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8003274:	8320      	strh	r0, [r4, #24]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003276:	68a0      	ldr	r0, [r4, #8]
 8003278:	f000 fdd0 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800327c:	f240 110f 	movw	r1, #271	; 0x10f
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003280:	8360      	strh	r0, [r4, #26]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003282:	68a0      	ldr	r0, [r4, #8]
 8003284:	f000 fdca 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8003288:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800328c:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8003290:	eddf 6a12 	vldr	s13, [pc, #72]	; 80032dc <PowerStage_updatePhaseCurrent+0x7c>
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8003294:	8b61      	ldrh	r1, [r4, #26]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003296:	83a0      	strh	r0, [r4, #28]
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8003298:	ebac 0303 	sub.w	r3, ip, r3
 800329c:	ee07 3a10 	vmov	s14, r3
 80032a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032a4:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032a8:	ee27 7a66 	vnmul.f32	s14, s14, s13
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032ac:	1acb      	subs	r3, r1, r3
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032ae:	ed87 7a00 	vstr	s14, [r7]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032b2:	ee07 3a10 	vmov	s14, r3
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032b6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80032ba:	b280      	uxth	r0, r0
 80032bc:	1ac0      	subs	r0, r0, r3
 80032be:	ee07 0a90 	vmov	s15, r0
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032ca:	ee27 7a66 	vnmul.f32	s14, s14, s13
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032ce:	ee67 7ae6 	vnmul.f32	s15, s15, s13
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032d2:	ed86 7a00 	vstr	s14, [r6]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032d6:	edc5 7a00 	vstr	s15, [r5]
}
 80032da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032dc:	3c898000 	.word	0x3c898000

080032e0 <PowerStage_updateBusVoltage>:

void PowerStage_updateBusVoltage(PowerStage *powerstage) {
 80032e0:	b510      	push	{r4, lr}
  powerstage->bus_voltage_measured += 0.1f * ((HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT) - powerstage->bus_voltage_measured);
 80032e2:	f240 110f 	movw	r1, #271	; 0x10f
void PowerStage_updateBusVoltage(PowerStage *powerstage) {
 80032e6:	4604      	mov	r4, r0
  powerstage->bus_voltage_measured += 0.1f * ((HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT) - powerstage->bus_voltage_measured);
 80032e8:	6840      	ldr	r0, [r0, #4]
 80032ea:	f000 fd97 	bl	8003e1c <HAL_ADCEx_InjectedGetValue>
 80032ee:	ee07 0a10 	vmov	s14, r0
 80032f2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80032f6:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003314 <PowerStage_updateBusVoltage+0x34>
 80032fa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003318 <PowerStage_updateBusVoltage+0x38>
 80032fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003302:	eeb0 6a67 	vmov.f32	s12, s15
 8003306:	ee97 6a25 	vfnms.f32	s12, s14, s11
 800330a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800330e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8003312:	bd10      	pop	{r4, pc}
 8003314:	3c97cccd 	.word	0x3c97cccd
 8003318:	3dcccccd 	.word	0x3dcccccd

0800331c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_MspInit+0x2c>)
 800331e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	661a      	str	r2, [r3, #96]	; 0x60
 8003326:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003328:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	f002 0201 	and.w	r2, r2, #1
 800332e:	9200      	str	r2, [sp, #0]
 8003330:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003338:	659a      	str	r2, [r3, #88]	; 0x58
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003344:	b002      	add	sp, #8
 8003346:	4770      	bx	lr
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800334c:	b530      	push	{r4, r5, lr}
 800334e:	4604      	mov	r4, r0
 8003350:	b09b      	sub	sp, #108	; 0x6c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003352:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003354:	2244      	movs	r2, #68	; 0x44
 8003356:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800335c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003360:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003362:	f004 faaf 	bl	80078c4 <memset>
  if(hadc->Instance==ADC1)
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800336c:	d004      	beq.n	8003378 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800336e:	4a35      	ldr	r2, [pc, #212]	; (8003444 <HAL_ADC_MspInit+0xf8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d045      	beq.n	8003400 <HAL_ADC_MspInit+0xb4>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003374:	b01b      	add	sp, #108	; 0x6c
 8003376:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003378:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800337c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003380:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003382:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003384:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003386:	f002 fc25 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 800338a:	2800      	cmp	r0, #0
 800338c:	d153      	bne.n	8003436 <HAL_ADC_MspInit+0xea>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_ADC_MspInit+0xfc>)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003394:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003396:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003398:	d109      	bne.n	80033ae <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800339a:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_ADC_MspInit+0x100>)
 800339c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800339e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_ADC_MspInit+0x100>)
 80033b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80033b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ba:	f002 0201 	and.w	r2, r2, #1
 80033be:	9201      	str	r2, [sp, #4]
 80033c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c4:	f042 0202 	orr.w	r2, r2, #2
 80033c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d2:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033d8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f001 fe19 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80033ea:	f241 0302 	movw	r3, #4098	; 0x1002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ee:	4818      	ldr	r0, [pc, #96]	; (8003450 <HAL_ADC_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f4:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	f001 fe10 	bl	800501c <HAL_GPIO_Init>
}
 80033fc:	b01b      	add	sp, #108	; 0x6c
 80033fe:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003400:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003404:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003408:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800340a:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800340c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800340e:	f002 fbe1 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 8003412:	b998      	cbnz	r0, 800343c <HAL_ADC_MspInit+0xf0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <HAL_ADC_MspInit+0xfc>)
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800341a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800341c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800341e:	d1a9      	bne.n	8003374 <HAL_ADC_MspInit+0x28>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_ADC_MspInit+0x100>)
 8003422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003428:	64da      	str	r2, [r3, #76]	; 0x4c
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003430:	9303      	str	r3, [sp, #12]
 8003432:	9b03      	ldr	r3, [sp, #12]
}
 8003434:	e79e      	b.n	8003374 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 8003436:	f7fe fca5 	bl	8001d84 <Error_Handler>
 800343a:	e7a8      	b.n	800338e <HAL_ADC_MspInit+0x42>
      Error_Handler();
 800343c:	f7fe fca2 	bl	8001d84 <Error_Handler>
 8003440:	e7e8      	b.n	8003414 <HAL_ADC_MspInit+0xc8>
 8003442:	bf00      	nop
 8003444:	50000100 	.word	0x50000100
 8003448:	20000770 	.word	0x20000770
 800344c:	40021000 	.word	0x40021000
 8003450:	48000400 	.word	0x48000400

08003454 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_CORDIC_MspInit+0x2c>)
 8003456:	6802      	ldr	r2, [r0, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d000      	beq.n	800345e <HAL_CORDIC_MspInit+0xa>
 800345c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800345e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003462:	f042 0208 	orr.w	r2, r2, #8
 8003466:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800346a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800346e:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800347a:	b002      	add	sp, #8
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40020c00 	.word	0x40020c00

08003484 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003484:	b530      	push	{r4, r5, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	b099      	sub	sp, #100	; 0x64
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800348c:	2244      	movs	r2, #68	; 0x44
 800348e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003494:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003498:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800349a:	f004 fa13 	bl	80078c4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_FDCAN_MspInit+0xac>)
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_FDCAN_MspInit+0x26>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80034a6:	b019      	add	sp, #100	; 0x64
 80034a8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80034ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b2:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034b4:	9207      	str	r2, [sp, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80034b6:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b8:	f002 fb8c 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d133      	bne.n	8003528 <HAL_FDCAN_MspInit+0xa4>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80034c0:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_FDCAN_MspInit+0xb0>)
 80034c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80034c8:	659a      	str	r2, [r3, #88]	; 0x58
 80034ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034cc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80034d0:	9200      	str	r2, [sp, #0]
 80034d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034e4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80034f2:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80034f8:	e9cd 4305 	strd	r4, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fc:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f001 fd8c 	bl	800501c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8003504:	4622      	mov	r2, r4
 8003506:	2104      	movs	r1, #4
 8003508:	2015      	movs	r0, #21
 800350a:	f001 f855 	bl	80045b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800350e:	2015      	movs	r0, #21
 8003510:	f001 f890 	bl	8004634 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8003514:	4622      	mov	r2, r4
 8003516:	2104      	movs	r1, #4
 8003518:	2016      	movs	r0, #22
 800351a:	f001 f84d 	bl	80045b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800351e:	2016      	movs	r0, #22
 8003520:	f001 f888 	bl	8004634 <HAL_NVIC_EnableIRQ>
}
 8003524:	b019      	add	sp, #100	; 0x64
 8003526:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003528:	f7fe fc2c 	bl	8001d84 <Error_Handler>
 800352c:	e7c8      	b.n	80034c0 <HAL_FDCAN_MspInit+0x3c>
 800352e:	bf00      	nop
 8003530:	40006400 	.word	0x40006400
 8003534:	40021000 	.word	0x40021000

08003538 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003538:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 800353a:	6802      	ldr	r2, [r0, #0]
 800353c:	492b      	ldr	r1, [pc, #172]	; (80035ec <HAL_OPAMP_MspInit+0xb4>)
{
 800353e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8003542:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003548:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800354c:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP1)
 800354e:	d007      	beq.n	8003560 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_OPAMP_MspInit+0xb8>)
 8003552:	429a      	cmp	r2, r3
 8003554:	d01c      	beq.n	8003590 <HAL_OPAMP_MspInit+0x58>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_OPAMP_MspInit+0xbc>)
 8003558:	429a      	cmp	r2, r3
 800355a:	d030      	beq.n	80035be <HAL_OPAMP_MspInit+0x86>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 800355c:	b009      	add	sp, #36	; 0x24
 800355e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003564:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003568:	250a      	movs	r5, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	64da      	str	r2, [r3, #76]	; 0x4c
 8003572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800357a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	a903      	add	r1, sp, #12
 800357e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003582:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003588:	f001 fd48 	bl	800501c <HAL_GPIO_Init>
}
 800358c:	b009      	add	sp, #36	; 0x24
 800358e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003590:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003594:	33fc      	adds	r3, #252	; 0xfc
 8003596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	64da      	str	r2, [r3, #76]	; 0x4c
 800359e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80035a6:	25a0      	movs	r5, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a8:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	a903      	add	r1, sp, #12
 80035ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b0:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	f001 fd31 	bl	800501c <HAL_GPIO_Init>
}
 80035ba:	b009      	add	sp, #36	; 0x24
 80035bc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80035c2:	33f8      	adds	r3, #248	; 0xf8
 80035c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	480c      	ldr	r0, [pc, #48]	; (80035f8 <HAL_OPAMP_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	f042 0202 	orr.w	r2, r2, #2
 80035cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80035d6:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d8:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035dc:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	f001 fd1b 	bl	800501c <HAL_GPIO_Init>
}
 80035e6:	b009      	add	sp, #36	; 0x24
 80035e8:	bd30      	pop	{r4, r5, pc}
 80035ea:	bf00      	nop
 80035ec:	40010300 	.word	0x40010300
 80035f0:	40010304 	.word	0x40010304
 80035f4:	40010308 	.word	0x40010308
 80035f8:	48000400 	.word	0x48000400

080035fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035fc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80035fe:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <HAL_SPI_MspInit+0x74>)
 8003600:	6801      	ldr	r1, [r0, #0]
{
 8003602:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8003606:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800360c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003610:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003612:	d001      	beq.n	8003618 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003614:	b009      	add	sp, #36	; 0x24
 8003616:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800361c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003622:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800362a:	661a      	str	r2, [r3, #96]	; 0x60
 800362c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800362e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003632:	9201      	str	r2, [sp, #4]
 8003634:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003638:	4322      	orrs	r2, r4
 800363a:	64da      	str	r2, [r3, #76]	; 0x4c
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003640:	4023      	ands	r3, r4
 8003642:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003644:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003646:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003648:	2328      	movs	r3, #40	; 0x28
 800364a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800364c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003650:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	f001 fce3 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003656:	2210      	movs	r2, #16
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003658:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365a:	4806      	ldr	r0, [pc, #24]	; (8003674 <HAL_SPI_MspInit+0x78>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800365c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	e9cd 2403 	strd	r2, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003664:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003668:	f001 fcd8 	bl	800501c <HAL_GPIO_Init>
}
 800366c:	b009      	add	sp, #36	; 0x24
 800366e:	bd30      	pop	{r4, r5, pc}
 8003670:	40013000 	.word	0x40013000
 8003674:	48000400 	.word	0x48000400

08003678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003678:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <HAL_TIM_Base_MspInit+0x90>)
 800367c:	6803      	ldr	r3, [r0, #0]
 800367e:	4293      	cmp	r3, r2
{
 8003680:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8003682:	d015      	beq.n	80036b0 <HAL_TIM_Base_MspInit+0x38>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d027      	beq.n	80036da <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 800368a:	4a20      	ldr	r2, [pc, #128]	; (800370c <HAL_TIM_Base_MspInit+0x94>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d002      	beq.n	8003696 <HAL_TIM_Base_MspInit+0x1e>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003690:	b005      	add	sp, #20
 8003692:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003696:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HAL_TIM_Base_MspInit+0x98>)
 8003698:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800369a:	f042 0210 	orr.w	r2, r2, #16
 800369e:	659a      	str	r2, [r3, #88]	; 0x58
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	9303      	str	r3, [sp, #12]
 80036a8:	9b03      	ldr	r3, [sp, #12]
}
 80036aa:	b005      	add	sp, #20
 80036ac:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_TIM_Base_MspInit+0x98>)
 80036b2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036b4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80036b8:	6619      	str	r1, [r3, #96]	; 0x60
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80036c2:	2019      	movs	r0, #25
 80036c4:	2200      	movs	r2, #0
 80036c6:	2101      	movs	r1, #1
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80036ca:	f000 ff75 	bl	80045b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80036ce:	2019      	movs	r0, #25
}
 80036d0:	b005      	add	sp, #20
 80036d2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d6:	f000 bfad 	b.w	8004634 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036de:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036e0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80036e2:	f041 0101 	orr.w	r1, r1, #1
 80036e6:	6599      	str	r1, [r3, #88]	; 0x58
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036f0:	201c      	movs	r0, #28
 80036f2:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036f6:	f000 ff5f 	bl	80045b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036fa:	201c      	movs	r0, #28
}
 80036fc:	b005      	add	sp, #20
 80036fe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003702:	f000 bf97 	b.w	8004634 <HAL_NVIC_EnableIRQ>
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40001000 	.word	0x40001000
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_TIM_PWM_MspInit+0x28>)
 8003716:	6802      	ldr	r2, [r0, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d000      	beq.n	800371e <HAL_TIM_PWM_MspInit+0xa>
 800371c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800371e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
{
 8003722:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003726:	f042 0202 	orr.w	r2, r2, #2
 800372a:	659a      	str	r2, [r3, #88]	; 0x58
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003736:	b002      	add	sp, #8
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40000400 	.word	0x40000400

08003740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003740:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003742:	6803      	ldr	r3, [r0, #0]
 8003744:	4a2d      	ldr	r2, [pc, #180]	; (80037fc <HAL_TIM_MspPostInit+0xbc>)
{
 8003746:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 800374a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003750:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003754:	9407      	str	r4, [sp, #28]
  if(htim->Instance==TIM1)
 8003756:	d004      	beq.n	8003762 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <HAL_TIM_MspPostInit+0xc0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d037      	beq.n	80037ce <HAL_TIM_MspPostInit+0x8e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800375e:	b008      	add	sp, #32
 8003760:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003764:	4828      	ldr	r0, [pc, #160]	; (8003808 <HAL_TIM_MspPostInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376a:	432a      	orrs	r2, r5
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
 800376e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003770:	402a      	ands	r2, r5
 8003772:	9200      	str	r2, [sp, #0]
 8003774:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	64da      	str	r2, [r3, #76]	; 0x4c
 800377e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003788:	2606      	movs	r6, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800378c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003790:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003792:	9607      	str	r6, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003794:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003796:	f001 fc41 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80037a2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a4:	4818      	ldr	r0, [pc, #96]	; (8003808 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80037a6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ae:	f001 fc35 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80037b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b6:	a903      	add	r1, sp, #12
 80037b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037c0:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80037c4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f001 fc29 	bl	800501c <HAL_GPIO_Init>
}
 80037ca:	b008      	add	sp, #32
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_TIM_MspPostInit+0xc4>)
 80037d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80037e2:	2550      	movs	r5, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	a903      	add	r1, sp, #12
 80037e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037f0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f001 fc13 	bl	800501c <HAL_GPIO_Init>
}
 80037f6:	b008      	add	sp, #32
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
 80037fa:	bf00      	nop
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40021000 	.word	0x40021000
 8003808:	48000400 	.word	0x48000400

0800380c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800380c:	b530      	push	{r4, r5, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	b099      	sub	sp, #100	; 0x64
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003812:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003814:	2244      	movs	r2, #68	; 0x44
 8003816:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800381c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003820:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003822:	f004 f84f 	bl	80078c4 <memset>
  if(huart->Instance==USART3)
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_UART_MspInit+0x80>)
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800382e:	b019      	add	sp, #100	; 0x64
 8003830:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003832:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003834:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003836:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003838:	f002 f9cc 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 800383c:	bb10      	cbnz	r0, 8003884 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART3_CLK_ENABLE();
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_UART_MspInit+0x84>)
 8003840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003842:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003846:	659a      	str	r2, [r3, #88]	; 0x58
 8003848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800384a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800384e:	9200      	str	r2, [sp, #0]
 8003850:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003854:	f042 0202 	orr.w	r2, r2, #2
 8003858:	64da      	str	r2, [r3, #76]	; 0x4c
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800385c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003868:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800386c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386e:	4809      	ldr	r0, [pc, #36]	; (8003894 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003870:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003872:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	e9cd 2403 	strd	r2, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003878:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387c:	f001 fbce 	bl	800501c <HAL_GPIO_Init>
}
 8003880:	b019      	add	sp, #100	; 0x64
 8003882:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003884:	f7fe fa7e 	bl	8001d84 <Error_Handler>
 8003888:	e7d9      	b.n	800383e <HAL_UART_MspInit+0x32>
 800388a:	bf00      	nop
 800388c:	40004800 	.word	0x40004800
 8003890:	40021000 	.word	0x40021000
 8003894:	48000400 	.word	0x48000400

08003898 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <NMI_Handler>
 800389a:	bf00      	nop

0800389c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800389c:	e7fe      	b.n	800389c <HardFault_Handler>
 800389e:	bf00      	nop

080038a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <MemManage_Handler>
 80038a2:	bf00      	nop

080038a4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <BusFault_Handler>
 80038a6:	bf00      	nop

080038a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <UsageFault_Handler>
 80038aa:	bf00      	nop

080038ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <DebugMon_Handler>:
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop

080038b4 <PendSV_Handler>:
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop

080038b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038b8:	f000 b8de 	b.w	8003a78 <HAL_IncTick>

080038bc <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <FDCAN1_IT0_IRQHandler+0x8>)
 80038be:	f001 b98b 	b.w	8004bd8 <HAL_FDCAN_IRQHandler>
 80038c2:	bf00      	nop
 80038c4:	20000434 	.word	0x20000434

080038c8 <FDCAN1_IT1_IRQHandler>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <FDCAN1_IT1_IRQHandler+0x8>)
 80038ca:	f001 b985 	b.w	8004bd8 <HAL_FDCAN_IRQHandler>
 80038ce:	bf00      	nop
 80038d0:	20000434 	.word	0x20000434

080038d4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <TIM1_UP_TIM16_IRQHandler+0x8>)
 80038d6:	f003 b887 	b.w	80069e8 <HAL_TIM_IRQHandler>
 80038da:	bf00      	nop
 80038dc:	200005b0 	.word	0x200005b0

080038e0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <TIM2_IRQHandler+0x8>)
 80038e2:	f003 b881 	b.w	80069e8 <HAL_TIM_IRQHandler>
 80038e6:	bf00      	nop
 80038e8:	200005fc 	.word	0x200005fc

080038ec <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80038ec:	2001      	movs	r0, #1
 80038ee:	4770      	bx	lr

080038f0 <_kill>:

int _kill(int pid, int sig)
{
 80038f0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80038f2:	f003 ffbd 	bl	8007870 <__errno>
 80038f6:	2316      	movs	r3, #22
 80038f8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80038fa:	f04f 30ff 	mov.w	r0, #4294967295
 80038fe:	bd08      	pop	{r3, pc}

08003900 <_exit>:

void _exit (int status)
{
 8003900:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003902:	f003 ffb5 	bl	8007870 <__errno>
 8003906:	2316      	movs	r3, #22
 8003908:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800390a:	e7fe      	b.n	800390a <_exit+0xa>

0800390c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800390c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390e:	1e16      	subs	r6, r2, #0
 8003910:	dd07      	ble.n	8003922 <_read+0x16>
 8003912:	460c      	mov	r4, r1
 8003914:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003916:	f3af 8000 	nop.w
 800391a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391e:	42a5      	cmp	r5, r4
 8003920:	d1f9      	bne.n	8003916 <_read+0xa>
	}

return len;
}
 8003922:	4630      	mov	r0, r6
 8003924:	bd70      	pop	{r4, r5, r6, pc}
 8003926:	bf00      	nop

08003928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003928:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392a:	1e16      	subs	r6, r2, #0
 800392c:	dd07      	ble.n	800393e <_write+0x16>
 800392e:	460c      	mov	r4, r1
 8003930:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003932:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003936:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393a:	42a5      	cmp	r5, r4
 800393c:	d1f9      	bne.n	8003932 <_write+0xa>
	}
	return len;
}
 800393e:	4630      	mov	r0, r6
 8003940:	bd70      	pop	{r4, r5, r6, pc}
 8003942:	bf00      	nop

08003944 <_close>:

int _close(int file)
{
	return -1;
}
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop

0800394c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800394c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003950:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003952:	2000      	movs	r0, #0
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop

08003958 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003958:	2001      	movs	r0, #1
 800395a:	4770      	bx	lr

0800395c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800395c:	2000      	movs	r0, #0
 800395e:	4770      	bx	lr

08003960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003960:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003962:	4c0c      	ldr	r4, [pc, #48]	; (8003994 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <_sbrk+0x38>)
 8003966:	490d      	ldr	r1, [pc, #52]	; (800399c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003968:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800396a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 800396c:	b12a      	cbz	r2, 800397a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800396e:	4410      	add	r0, r2
 8003970:	4288      	cmp	r0, r1
 8003972:	d807      	bhi.n	8003984 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003974:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8003976:	4610      	mov	r0, r2
 8003978:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <_sbrk+0x40>)
 800397c:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4410      	add	r0, r2
 8003980:	4288      	cmp	r0, r1
 8003982:	d9f7      	bls.n	8003974 <_sbrk+0x14>
    errno = ENOMEM;
 8003984:	f003 ff74 	bl	8007870 <__errno>
 8003988:	230c      	movs	r3, #12
    return (void *)-1;
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800398e:	6003      	str	r3, [r0, #0]
}
 8003990:	4610      	mov	r0, r2
 8003992:	bd10      	pop	{r4, pc}
 8003994:	20000774 	.word	0x20000774
 8003998:	20008000 	.word	0x20008000
 800399c:	00000400 	.word	0x00000400
 80039a0:	20000790 	.word	0x20000790

080039a4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039a4:	4a03      	ldr	r2, [pc, #12]	; (80039b4 <SystemInit+0x10>)
 80039a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039bc:	480d      	ldr	r0, [pc, #52]	; (80039f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <LoopForever+0xe>)
  movs r3, #0
 80039c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80039c4:	e002      	b.n	80039cc <LoopCopyDataInit>

080039c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ca:	3304      	adds	r3, #4

080039cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d0:	d3f9      	bcc.n	80039c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039d2:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039d4:	4c0b      	ldr	r4, [pc, #44]	; (8003a04 <LoopForever+0x16>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d8:	e001      	b.n	80039de <LoopFillZerobss>

080039da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039dc:	3204      	adds	r2, #4

080039de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e0:	d3fb      	bcc.n	80039da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039e2:	f7ff ffdf 	bl	80039a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039e6:	f003 ff49 	bl	800787c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039ea:	f7fd fe91 	bl	8001710 <main>

080039ee <LoopForever>:

LoopForever:
    b LoopForever
 80039ee:	e7fe      	b.n	80039ee <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80039f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80039f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039f8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80039fc:	0800bc8c 	.word	0x0800bc8c
  ldr r2, =_sbss
 8003a00:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003a04:	2000078c 	.word	0x2000078c

08003a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a08:	e7fe      	b.n	8003a08 <ADC1_2_IRQHandler>
	...

08003a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a0c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_InitTick+0x40>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b90b      	cbnz	r3, 8003a18 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a14:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a18:	490d      	ldr	r1, [pc, #52]	; (8003a50 <HAL_InitTick+0x44>)
 8003a1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a1e:	4605      	mov	r5, r0
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	6808      	ldr	r0, [r1, #0]
 8003a26:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a2a:	f000 fe11 	bl	8004650 <HAL_SYSTICK_Config>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d1ef      	bne.n	8003a14 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a34:	2d0f      	cmp	r5, #15
 8003a36:	d8ed      	bhi.n	8003a14 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	f000 fdba 	bl	80045b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <HAL_InitTick+0x48>)
 8003a46:	4620      	mov	r0, r4
 8003a48:	601d      	str	r5, [r3, #0]
}
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	20000004 	.word	0x20000004
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000008 	.word	0x20000008

08003a58 <HAL_Init>:
{
 8003a58:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a5a:	2003      	movs	r0, #3
 8003a5c:	f000 fd9a 	bl	8004594 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a60:	200f      	movs	r0, #15
 8003a62:	f7ff ffd3 	bl	8003a0c <HAL_InitTick>
 8003a66:	b110      	cbz	r0, 8003a6e <HAL_Init+0x16>
    status = HAL_ERROR;
 8003a68:	2401      	movs	r4, #1
}
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003a70:	f7ff fc54 	bl	800331c <HAL_MspInit>
}
 8003a74:	4620      	mov	r0, r4
 8003a76:	bd10      	pop	{r4, pc}

08003a78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a78:	4a03      	ldr	r2, [pc, #12]	; (8003a88 <HAL_IncTick+0x10>)
 8003a7a:	4904      	ldr	r1, [pc, #16]	; (8003a8c <HAL_IncTick+0x14>)
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	6809      	ldr	r1, [r1, #0]
 8003a80:	440b      	add	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000778 	.word	0x20000778
 8003a8c:	20000004 	.word	0x20000004

08003a90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a90:	4b01      	ldr	r3, [pc, #4]	; (8003a98 <HAL_GetTick+0x8>)
 8003a92:	6818      	ldr	r0, [r3, #0]
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000778 	.word	0x20000778

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7ff fff6 	bl	8003a90 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003aa6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003aa8:	d002      	beq.n	8003ab0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aaa:	4b04      	ldr	r3, [pc, #16]	; (8003abc <HAL_Delay+0x20>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ab0:	f7ff ffee 	bl	8003a90 <HAL_GetTick>
 8003ab4:	1b43      	subs	r3, r0, r5
 8003ab6:	42a3      	cmp	r3, r4
 8003ab8:	d3fa      	bcc.n	8003ab0 <HAL_Delay+0x14>
  {
  }
}
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ac0:	b530      	push	{r4, r5, lr}
 8003ac2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f000 80c9 	beq.w	8003c60 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ace:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	f000 8092 	beq.w	8003bfc <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ad8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ada:	6893      	ldr	r3, [r2, #8]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	d505      	bpl.n	8003aec <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ae0:	6893      	ldr	r3, [r2, #8]
 8003ae2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ae6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aea:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003aec:	6893      	ldr	r3, [r2, #8]
 8003aee:	00dd      	lsls	r5, r3, #3
 8003af0:	d419      	bmi.n	8003b26 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af2:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_ADC_Init+0x1f4>)
 8003af4:	4870      	ldr	r0, [pc, #448]	; (8003cb8 <HAL_ADC_Init+0x1f8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003af8:	6891      	ldr	r1, [r2, #8]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	fba0 0303 	umull	r0, r3, r0, r3
 8003b00:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003b12:	6091      	str	r1, [r2, #8]
 8003b14:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	b12b      	cbz	r3, 8003b26 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003b1a:	9b01      	ldr	r3, [sp, #4]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f9      	bne.n	8003b1a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b26:	6893      	ldr	r3, [r2, #8]
 8003b28:	00d8      	lsls	r0, r3, #3
 8003b2a:	d459      	bmi.n	8003be0 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b2e:	f043 0310 	orr.w	r3, r3, #16
 8003b32:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b34:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b36:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b38:	4303      	orrs	r3, r0
 8003b3a:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3c:	6893      	ldr	r3, [r2, #8]
 8003b3e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b44:	d153      	bne.n	8003bee <HAL_ADC_Init+0x12e>
 8003b46:	06d9      	lsls	r1, r3, #27
 8003b48:	d451      	bmi.n	8003bee <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b56:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b58:	07db      	lsls	r3, r3, #31
 8003b5a:	d40e      	bmi.n	8003b7a <HAL_ADC_Init+0xba>
 8003b5c:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_ADC_Init+0x1fc>)
 8003b5e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003b62:	6889      	ldr	r1, [r1, #8]
 8003b64:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	07dd      	lsls	r5, r3, #31
 8003b6a:	d406      	bmi.n	8003b7a <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b6c:	4954      	ldr	r1, [pc, #336]	; (8003cc0 <HAL_ADC_Init+0x200>)
 8003b6e:	6865      	ldr	r5, [r4, #4]
 8003b70:	688b      	ldr	r3, [r1, #8]
 8003b72:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003b76:	432b      	orrs	r3, r5
 8003b78:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003b7a:	68e5      	ldr	r5, [r4, #12]
 8003b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b7e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003b82:	432b      	orrs	r3, r5
 8003b84:	68a5      	ldr	r5, [r4, #8]
 8003b86:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b88:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b8a:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003b8c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b94:	d05f      	beq.n	8003c56 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b98:	b121      	cbz	r1, 8003ba4 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003b9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b9c:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ba0:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ba2:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ba4:	68d5      	ldr	r5, [r2, #12]
 8003ba6:	4947      	ldr	r1, [pc, #284]	; (8003cc4 <HAL_ADC_Init+0x204>)
 8003ba8:	4029      	ands	r1, r5
 8003baa:	430b      	orrs	r3, r1
 8003bac:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bae:	6913      	ldr	r3, [r2, #16]
 8003bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bb2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bba:	6893      	ldr	r3, [r2, #8]
 8003bbc:	0759      	lsls	r1, r3, #29
 8003bbe:	d523      	bpl.n	8003c08 <HAL_ADC_Init+0x148>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bc0:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bc2:	6963      	ldr	r3, [r4, #20]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d04e      	beq.n	8003c66 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bd0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003bdc:	b003      	add	sp, #12
 8003bde:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003be0:	6893      	ldr	r3, [r2, #8]
 8003be2:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be6:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bec:	d0ab      	beq.n	8003b46 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003bf0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf2:	f043 0310 	orr.w	r3, r3, #16
 8003bf6:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003bf8:	b003      	add	sp, #12
 8003bfa:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003bfc:	f7ff fba6 	bl	800334c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c00:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003c02:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003c06:	e767      	b.n	8003ad8 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c08:	6893      	ldr	r3, [r2, #8]
 8003c0a:	071b      	lsls	r3, r3, #28
 8003c0c:	d4d9      	bmi.n	8003bc2 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c0e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c14:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c16:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c1a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c1c:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c20:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c24:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003c26:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c28:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c2a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003c2c:	bb19      	cbnz	r1, 8003c76 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c34:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003c38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003c44:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d021      	beq.n	8003c90 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c4c:	6913      	ldr	r3, [r2, #16]
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6113      	str	r3, [r2, #16]
 8003c54:	e7b5      	b.n	8003bc2 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c58:	3901      	subs	r1, #1
 8003c5a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003c5e:	e79a      	b.n	8003b96 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
}
 8003c62:	b003      	add	sp, #12
 8003c64:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c68:	6a23      	ldr	r3, [r4, #32]
 8003c6a:	f021 010f 	bic.w	r1, r1, #15
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6313      	str	r3, [r2, #48]	; 0x30
 8003c74:	e7ac      	b.n	8003bd0 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c7c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003c80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003c8e:	e7d9      	b.n	8003c44 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c90:	6911      	ldr	r1, [r2, #16]
 8003c92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c94:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003c96:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003c9a:	f021 0104 	bic.w	r1, r1, #4
 8003c9e:	432b      	orrs	r3, r5
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6113      	str	r3, [r2, #16]
 8003cb0:	e787      	b.n	8003bc2 <HAL_ADC_Init+0x102>
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	053e2d63 	.word	0x053e2d63
 8003cbc:	50000100 	.word	0x50000100
 8003cc0:	50000300 	.word	0x50000300
 8003cc4:	fff04007 	.word	0xfff04007

08003cc8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	07d2      	lsls	r2, r2, #31
 8003cce:	d501      	bpl.n	8003cd4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
}
 8003cd2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <ADC_Enable+0x70>)
 8003cd8:	4211      	tst	r1, r2
{
 8003cda:	b570      	push	{r4, r5, r6, lr}
 8003cdc:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cde:	d008      	beq.n	8003cf2 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce0:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003ce2:	f043 0310 	orr.w	r3, r3, #16
 8003ce6:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce8:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8003cea:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cec:	4303      	orrs	r3, r0
 8003cee:	6633      	str	r3, [r6, #96]	; 0x60
}
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4d11      	ldr	r5, [pc, #68]	; (8003d3c <ADC_Enable+0x74>)
 8003cf6:	402a      	ands	r2, r5
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003cfe:	f7ff fec7 	bl	8003a90 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d02:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d04:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	07d0      	lsls	r0, r2, #31
 8003d0a:	d413      	bmi.n	8003d34 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d0c:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0e:	07d1      	lsls	r1, r2, #31
 8003d10:	d404      	bmi.n	8003d1c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	402a      	ands	r2, r5
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d1c:	f7ff feb8 	bl	8003a90 <HAL_GetTick>
 8003d20:	1b03      	subs	r3, r0, r4
 8003d22:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d24:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	d9ee      	bls.n	8003d06 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	07d2      	lsls	r2, r2, #31
 8003d2c:	d5d8      	bpl.n	8003ce0 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	07d0      	lsls	r0, r2, #31
 8003d32:	d5eb      	bpl.n	8003d0c <ADC_Enable+0x44>
  return HAL_OK;
 8003d34:	2000      	movs	r0, #0
}
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	8000003f 	.word	0x8000003f
 8003d3c:	7fffffc0 	.word	0x7fffffc0

08003d40 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003d40:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_ADCEx_InjectedStart+0xd4>)
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d44:	6803      	ldr	r3, [r0, #0]
 8003d46:	6895      	ldr	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	0711      	lsls	r1, r2, #28
 8003d4c:	d43a      	bmi.n	8003dc4 <HAL_ADCEx_InjectedStart+0x84>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003d4e:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8003d56:	4604      	mov	r4, r0
 8003d58:	d036      	beq.n	8003dc8 <HAL_ADCEx_InjectedStart+0x88>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003d5a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d030      	beq.n	8003dc4 <HAL_ADCEx_InjectedStart+0x84>
 8003d62:	2301      	movs	r3, #1
 8003d64:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff ffad 	bl	8003cc8 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d132      	bne.n	8003dd8 <HAL_ADCEx_InjectedStart+0x98>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003d72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d74:	05da      	lsls	r2, r3, #23
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d76:	bf49      	itett	mi
 8003d78:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d7a:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d7c:	f023 0308 	bicmi.w	r3, r3, #8
 8003d80:	6623      	strmi	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003d82:	6de3      	ldr	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d84:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d92:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_ADCEx_InjectedStart+0xd8>)
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d022      	beq.n	8003de0 <HAL_ADCEx_InjectedStart+0xa0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003da0:	65e3      	str	r3, [r4, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003da2:	2160      	movs	r1, #96	; 0x60

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003da4:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003da6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003da8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003dac:	68d3      	ldr	r3, [r2, #12]
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003dae:	019b      	lsls	r3, r3, #6
 8003db0:	d407      	bmi.n	8003dc2 <HAL_ADCEx_InjectedStart+0x82>
  MODIFY_REG(ADCx->CR,
 8003db2:	6893      	ldr	r3, [r2, #8]
 8003db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	6093      	str	r3, [r2, #8]
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003dc4:	2002      	movs	r0, #2
}
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
        && (tmp_config_injected_queue == 0UL)
 8003dc8:	2a00      	cmp	r2, #0
 8003dca:	dbc6      	blt.n	8003d5a <HAL_ADCEx_InjectedStart+0x1a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dcc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003dce:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 8003dd2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd4:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003de0:	f015 051f 	ands.w	r5, r5, #31
 8003de4:	d00d      	beq.n	8003e02 <HAL_ADCEx_InjectedStart+0xc2>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003de6:	2360      	movs	r3, #96	; 0x60
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003de8:	3d06      	subs	r5, #6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003dea:	6013      	str	r3, [r2, #0]
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003dec:	2d01      	cmp	r5, #1
      __HAL_UNLOCK(hadc);
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003df6:	d9d9      	bls.n	8003dac <HAL_ADCEx_InjectedStart+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003df8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfe:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e08:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003e0a:	2360      	movs	r3, #96	; 0x60
 8003e0c:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003e0e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e12:	e7cb      	b.n	8003dac <HAL_ADCEx_InjectedStart+0x6c>
 8003e14:	50000300 	.word	0x50000300
 8003e18:	50000100 	.word	0x50000100

08003e1c <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003e1c:	f240 2315 	movw	r3, #533	; 0x215
 8003e20:	4299      	cmp	r1, r3
 8003e22:	d00b      	beq.n	8003e3c <HAL_ADCEx_InjectedGetValue+0x20>
 8003e24:	f240 331b 	movw	r3, #795	; 0x31b
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	d00f      	beq.n	8003e4c <HAL_ADCEx_InjectedGetValue+0x30>
 8003e2c:	f240 130f 	movw	r3, #271	; 0x10f
 8003e30:	4299      	cmp	r1, r3
 8003e32:	d007      	beq.n	8003e44 <HAL_ADCEx_InjectedGetValue+0x28>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
      break;
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003e34:	6803      	ldr	r3, [r0, #0]
 8003e36:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
      break;
  }

  /* Return ADC converted value */
  return tmp_jdr;
}
 8003e3a:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8003e3c:	6803      	ldr	r3, [r0, #0]
 8003e3e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8003e42:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8003e44:	6803      	ldr	r3, [r0, #0]
 8003e46:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8003e4a:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8003e4c:	6803      	ldr	r3, [r0, #0]
 8003e4e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e58:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8003e5c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003e5e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003e60:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003e62:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e64:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8003e66:	f000 8166 	beq.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003e70:	b1e2      	cbz	r2, 8003eac <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003e72:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d019      	beq.n	8003eac <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003e78:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003e7a:	2c00      	cmp	r4, #0
 8003e7c:	f040 8119 	bne.w	80040b2 <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003e80:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	f000 8222 	beq.w	80042cc <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e88:	1e5d      	subs	r5, r3, #1
 8003e8a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e8c:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8003e90:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e92:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003e94:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003e98:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003e9a:	f004 051f 	and.w	r5, r4, #31
 8003e9e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8003ea2:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003ea4:	431c      	orrs	r4, r3
 8003ea6:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003ea8:	6803      	ldr	r3, [r0, #0]
 8003eaa:	e005      	b.n	8003eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003eac:	684b      	ldr	r3, [r1, #4]
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	f000 80eb 	beq.w	800408a <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003eb4:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003eb6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb8:	689c      	ldr	r4, [r3, #8]
 8003eba:	0727      	lsls	r7, r4, #28
 8003ebc:	d410      	bmi.n	8003ee0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003ebe:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	f040 80d8 	bne.w	8004078 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003ec8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003ecc:	68dd      	ldr	r5, [r3, #12]
 8003ece:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003ed2:	0524      	lsls	r4, r4, #20
 8003ed4:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003ed8:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003edc:	432c      	orrs	r4, r5
 8003ede:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ee0:	689c      	ldr	r4, [r3, #8]
 8003ee2:	f014 0404 	ands.w	r4, r4, #4
 8003ee6:	d058      	beq.n	8003f9a <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ee8:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eea:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eec:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eee:	07ee      	lsls	r6, r5, #31
 8003ef0:	d40c      	bmi.n	8003f0c <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003ef2:	4dac      	ldr	r5, [pc, #688]	; (80041a4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003ef4:	68ce      	ldr	r6, [r1, #12]
 8003ef6:	42ae      	cmp	r6, r5
 8003ef8:	f000 8100 	beq.w	80040fc <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8003efc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003f00:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003f04:	ea21 0105 	bic.w	r1, r1, r5
 8003f08:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003f0c:	49a6      	ldr	r1, [pc, #664]	; (80041a8 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003f0e:	420a      	tst	r2, r1
 8003f10:	d019      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f12:	4ea6      	ldr	r6, [pc, #664]	; (80041ac <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003f14:	4da6      	ldr	r5, [pc, #664]	; (80041b0 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8003f16:	68b1      	ldr	r1, [r6, #8]
 8003f18:	42aa      	cmp	r2, r5
 8003f1a:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003f1e:	d019      	beq.n	8003f54 <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f20:	4da4      	ldr	r5, [pc, #656]	; (80041b4 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8003f22:	42aa      	cmp	r2, r5
 8003f24:	d016      	beq.n	8003f54 <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003f26:	4da4      	ldr	r5, [pc, #656]	; (80041b8 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8003f28:	42aa      	cmp	r2, r5
 8003f2a:	f040 810d 	bne.w	8004148 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f2e:	01cd      	lsls	r5, r1, #7
 8003f30:	d409      	bmi.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f32:	4aa2      	ldr	r2, [pc, #648]	; (80041bc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d006      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f38:	68b3      	ldr	r3, [r6, #8]
 8003f3a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003f3e:	431f      	orrs	r7, r3
 8003f40:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003f44:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f46:	2300      	movs	r3, #0
 8003f48:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	b002      	add	sp, #8
 8003f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f54:	020a      	lsls	r2, r1, #8
 8003f56:	d4f6      	bmi.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f5c:	d1f3      	bne.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003f5e:	4a93      	ldr	r2, [pc, #588]	; (80041ac <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8003f60:	6893      	ldr	r3, [r2, #8]
 8003f62:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003f66:	431f      	orrs	r7, r3
 8003f68:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003f6c:	4b94      	ldr	r3, [pc, #592]	; (80041c0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8003f6e:	6097      	str	r7, [r2, #8]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a94      	ldr	r2, [pc, #592]	; (80041c4 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3318      	adds	r3, #24
 8003f84:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003f86:	9b01      	ldr	r3, [sp, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0dc      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8003f8c:	9b01      	ldr	r3, [sp, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003f92:	9b01      	ldr	r3, [sp, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f9      	bne.n	8003f8c <HAL_ADCEx_InjectedConfigChannel+0x138>
 8003f98:	e7d5      	b.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f9a:	689d      	ldr	r5, [r3, #8]
 8003f9c:	f015 0508 	ands.w	r5, r5, #8
 8003fa0:	d1a4      	bne.n	8003eec <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003fa2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	f040 809a 	bne.w	80040de <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003faa:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003fae:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003fb0:	68dc      	ldr	r4, [r3, #12]
 8003fb2:	bf0c      	ite	eq
 8003fb4:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003fb8:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8003fbc:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fbe:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003fc0:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8003fc4:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8003fc6:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003fc8:	f000 80e0 	beq.w	800418c <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003fcc:	f026 0602 	bic.w	r6, r6, #2
 8003fd0:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fd2:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fd4:	0dd7      	lsrs	r7, r2, #23
 8003fd6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003fda:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003fde:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003fe2:	f000 80c4 	beq.w	800416e <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fe6:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8003fea:	f04f 0e07 	mov.w	lr, #7
 8003fee:	4096      	lsls	r6, r2
 8003ff0:	fa0e fe02 	lsl.w	lr, lr, r2
 8003ff4:	f857 200c 	ldr.w	r2, [r7, ip]
 8003ff8:	ea22 020e 	bic.w	r2, r2, lr
 8003ffc:	4316      	orrs	r6, r2
 8003ffe:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004008:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800400a:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800400c:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800400e:	2f04      	cmp	r7, #4
 8004010:	f000 80e0 	beq.w	80041d4 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004014:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004018:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800401c:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8004020:	680e      	ldr	r6, [r1, #0]
 8004022:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8004026:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 800402a:	4e67      	ldr	r6, [pc, #412]	; (80041c8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 800402c:	ea08 0606 	and.w	r6, r8, r6
 8004030:	ea4c 0c06 	orr.w	ip, ip, r6
 8004034:	694e      	ldr	r6, [r1, #20]
 8004036:	fa06 f60e 	lsl.w	r6, r6, lr
 800403a:	ea46 060c 	orr.w	r6, r6, ip
 800403e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004042:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004046:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 800404a:	698f      	ldr	r7, [r1, #24]
 800404c:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8004050:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004054:	433e      	orrs	r6, r7
 8004056:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800405a:	7f0e      	ldrb	r6, [r1, #28]
 800405c:	690f      	ldr	r7, [r1, #16]
 800405e:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8004060:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004064:	bf08      	it	eq
 8004066:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800406a:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 800406e:	4335      	orrs	r5, r6
 8004070:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004074:	680a      	ldr	r2, [r1, #0]
}
 8004076:	e739      	b.n	8003eec <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004078:	68dc      	ldr	r4, [r3, #12]
 800407a:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800407e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004082:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004086:	60dc      	str	r4, [r3, #12]
 8004088:	e72a      	b.n	8003ee0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800408a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800408c:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800408e:	2b00      	cmp	r3, #0
 8004090:	d056      	beq.n	8004140 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004092:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004094:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004098:	0c55      	lsrs	r5, r2, #17
 800409a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800409e:	4323      	orrs	r3, r4
 80040a0:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	4e49      	ldr	r6, [pc, #292]	; (80041cc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 80040a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80040a8:	4034      	ands	r4, r6
 80040aa:	432c      	orrs	r4, r5
 80040ac:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80040ae:	6645      	str	r5, [r0, #100]	; 0x64
 80040b0:	e702      	b.n	8003eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80040b2:	680a      	ldr	r2, [r1, #0]
 80040b4:	684b      	ldr	r3, [r1, #4]
 80040b6:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80040c0:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 80040c2:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80040c4:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 80040c6:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80040c8:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80040ca:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80040cc:	2c00      	cmp	r4, #0
 80040ce:	f47f aef3 	bne.w	8003eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80040d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80040d4:	4e3d      	ldr	r6, [pc, #244]	; (80041cc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 80040d6:	4034      	ands	r4, r6
 80040d8:	4325      	orrs	r5, r4
 80040da:	64dd      	str	r5, [r3, #76]	; 0x4c
 80040dc:	e6ec      	b.n	8003eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80040de:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80040e0:	2c00      	cmp	r4, #0
 80040e2:	f43f af62 	beq.w	8003faa <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040e6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80040ea:	2c01      	cmp	r4, #1
 80040ec:	f000 815c 	beq.w	80043a8 <HAL_ADCEx_InjectedConfigChannel+0x554>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040f0:	68dc      	ldr	r4, [r3, #12]
 80040f2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80040f6:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f8:	462c      	mov	r4, r5
 80040fa:	e761      	b.n	8003fc0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 80040fc:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004100:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8004104:	4335      	orrs	r5, r6
 8004106:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800410a:	2e00      	cmp	r6, #0
 800410c:	f040 80a7 	bne.w	800425e <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004110:	0e92      	lsrs	r2, r2, #26
 8004112:	1c55      	adds	r5, r2, #1
 8004114:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004118:	f1bc 0f09 	cmp.w	ip, #9
 800411c:	f200 80d9 	bhi.w	80042d2 <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004120:	06ad      	lsls	r5, r5, #26
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f20c 	lsl.w	r2, r2, ip
 8004128:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800412c:	4315      	orrs	r5, r2
 800412e:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004132:	0512      	lsls	r2, r2, #20
 8004134:	e0db      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8004136:	2402      	movs	r4, #2
}
 8004138:	4620      	mov	r0, r4
 800413a:	b002      	add	sp, #8
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004140:	0c55      	lsrs	r5, r2, #17
 8004142:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004146:	e7ac      	b.n	80040a2 <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004148:	4d21      	ldr	r5, [pc, #132]	; (80041d0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800414a:	42aa      	cmp	r2, r5
 800414c:	f47f aefb 	bne.w	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004150:	0249      	lsls	r1, r1, #9
 8004152:	f53f aef8 	bmi.w	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f43f aef4 	beq.w	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800415e:	68b3      	ldr	r3, [r6, #8]
 8004160:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004164:	431f      	orrs	r7, r3
 8004166:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800416a:	60b7      	str	r7, [r6, #8]
}
 800416c:	e6eb      	b.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800416e:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004172:	f04f 0c07 	mov.w	ip, #7
 8004176:	fa0c fc02 	lsl.w	ip, ip, r2
 800417a:	59ba      	ldr	r2, [r7, r6]
 800417c:	ea22 020c 	bic.w	r2, r2, ip
 8004180:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004188:	615a      	str	r2, [r3, #20]
}
 800418a:	e73e      	b.n	800400a <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 800418c:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8004190:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8004194:	433e      	orrs	r6, r7
 8004196:	ea46 060c 	orr.w	r6, r6, ip
 800419a:	f046 0602 	orr.w	r6, r6, #2
 800419e:	611e      	str	r6, [r3, #16]
 80041a0:	e717      	b.n	8003fd2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 80041a2:	bf00      	nop
 80041a4:	407f0000 	.word	0x407f0000
 80041a8:	80080000 	.word	0x80080000
 80041ac:	50000300 	.word	0x50000300
 80041b0:	c3210000 	.word	0xc3210000
 80041b4:	90c00010 	.word	0x90c00010
 80041b8:	c7520000 	.word	0xc7520000
 80041bc:	50000100 	.word	0x50000100
 80041c0:	20000000 	.word	0x20000000
 80041c4:	053e2d63 	.word	0x053e2d63
 80041c8:	03fff000 	.word	0x03fff000
 80041cc:	04104000 	.word	0x04104000
 80041d0:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80041d6:	680a      	ldr	r2, [r1, #0]
 80041d8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80041da:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041de:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80041e2:	2e00      	cmp	r6, #0
 80041e4:	f000 809a 	beq.w	800431c <HAL_ADCEx_InjectedConfigChannel+0x4c8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	fa92 f6a2 	rbit	r6, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ec:	b126      	cbz	r6, 80041f8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80041ee:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041f2:	42b5      	cmp	r5, r6
 80041f4:	f000 80dd 	beq.w	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80041f8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80041fa:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041fc:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004200:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004204:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 800420c:	b127      	cbz	r7, 8004218 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 800420e:	fab7 f787 	clz	r7, r7
 8004212:	42be      	cmp	r6, r7
 8004214:	f000 80e2 	beq.w	80043dc <HAL_ADCEx_InjectedConfigChannel+0x588>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004218:	68ae      	ldr	r6, [r5, #8]
 800421a:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800421c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004220:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004228:	b127      	cbz	r7, 8004234 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 800422a:	fab7 f787 	clz	r7, r7
 800422e:	42be      	cmp	r6, r7
 8004230:	f000 80e7 	beq.w	8004402 <HAL_ADCEx_InjectedConfigChannel+0x5ae>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004234:	68ee      	ldr	r6, [r5, #12]
 8004236:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004238:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800423a:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004242:	2f00      	cmp	r7, #0
 8004244:	f43f ae52 	beq.w	8003eec <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004248:	fab7 f787 	clz	r7, r7
 800424c:	42b7      	cmp	r7, r6
 800424e:	f47f ae4d 	bne.w	8003eec <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004252:	682a      	ldr	r2, [r5, #0]
 8004254:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004258:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800425a:	680a      	ldr	r2, [r1, #0]
}
 800425c:	e646      	b.n	8003eec <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004262:	2d00      	cmp	r5, #0
 8004264:	d07a      	beq.n	800435c <HAL_ADCEx_InjectedConfigChannel+0x508>
  return __builtin_clz(value);
 8004266:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426a:	3501      	adds	r5, #1
 800426c:	f005 051f 	and.w	r5, r5, #31
 8004270:	2d09      	cmp	r5, #9
 8004272:	d973      	bls.n	800435c <HAL_ADCEx_InjectedConfigChannel+0x508>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004278:	2d00      	cmp	r5, #0
 800427a:	f000 80e0 	beq.w	800443e <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 800427e:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004282:	3501      	adds	r5, #1
 8004284:	06ad      	lsls	r5, r5, #26
 8004286:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800428e:	2e00      	cmp	r6, #0
 8004290:	f000 80d3 	beq.w	800443a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8004294:	fab6 f686 	clz	r6, r6
 8004298:	3601      	adds	r6, #1
 800429a:	f006 061f 	and.w	r6, r6, #31
 800429e:	2701      	movs	r7, #1
 80042a0:	fa07 f606 	lsl.w	r6, r7, r6
 80042a4:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	f000 80c3 	beq.w	8004436 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 80042b0:	fab2 f282 	clz	r2, r2
 80042b4:	3201      	adds	r2, #1
 80042b6:	f002 061f 	and.w	r6, r2, #31
 80042ba:	f06f 071d 	mvn.w	r7, #29
 80042be:	2203      	movs	r2, #3
 80042c0:	fb12 7206 	smlabb	r2, r2, r6, r7
 80042c4:	0512      	lsls	r2, r2, #20
 80042c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042ca:	e010      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80042cc:	3b01      	subs	r3, #1
 80042ce:	461d      	mov	r5, r3
 80042d0:	e5e0      	b.n	8003e94 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80042d2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80042d6:	06ad      	lsls	r5, r5, #26
 80042d8:	3a1e      	subs	r2, #30
 80042da:	2601      	movs	r6, #1
 80042dc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80042e0:	0512      	lsls	r2, r2, #20
 80042e2:	fa06 fc0c 	lsl.w	ip, r6, ip
 80042e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042ea:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ee:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042f0:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 80042f2:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042f4:	f007 0704 	and.w	r7, r7, #4
 80042f8:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80042fc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004300:	fa05 fc02 	lsl.w	ip, r5, r2
 8004304:	f04f 0e07 	mov.w	lr, #7
 8004308:	59bd      	ldr	r5, [r7, r6]
 800430a:	fa0e f202 	lsl.w	r2, lr, r2
 800430e:	ea25 0202 	bic.w	r2, r5, r2
 8004312:	ea42 020c 	orr.w	r2, r2, ip
 8004316:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004318:	680a      	ldr	r2, [r1, #0]
}
 800431a:	e5f7      	b.n	8003f0c <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800431c:	f3c2 6784 	ubfx	r7, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004320:	42bd      	cmp	r5, r7
 8004322:	d046      	beq.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004324:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004326:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004328:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800432c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004330:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004334:	42be      	cmp	r6, r7
 8004336:	d051      	beq.n	80043dc <HAL_ADCEx_InjectedConfigChannel+0x588>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004338:	68ae      	ldr	r6, [r5, #8]
 800433a:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800433c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004340:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004344:	f3c2 6784 	ubfx	r7, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004348:	42b7      	cmp	r7, r6
 800434a:	d05a      	beq.n	8004402 <HAL_ADCEx_InjectedConfigChannel+0x5ae>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800434c:	68ee      	ldr	r6, [r5, #12]
 800434e:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004350:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004352:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004356:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800435a:	e777      	b.n	800424c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004360:	2d00      	cmp	r5, #0
 8004362:	d062      	beq.n	800442a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004364:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004368:	3501      	adds	r5, #1
 800436a:	06ad      	lsls	r5, r5, #26
 800436c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004374:	2e00      	cmp	r6, #0
 8004376:	d056      	beq.n	8004426 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004378:	fab6 f686 	clz	r6, r6
 800437c:	3601      	adds	r6, #1
 800437e:	f006 061f 	and.w	r6, r6, #31
 8004382:	2701      	movs	r7, #1
 8004384:	fa07 f606 	lsl.w	r6, r7, r6
 8004388:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800438e:	2a00      	cmp	r2, #0
 8004390:	d04e      	beq.n	8004430 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8004392:	fab2 fc82 	clz	ip, r2
 8004396:	f10c 0c01 	add.w	ip, ip, #1
 800439a:	f00c 0c1f 	and.w	ip, ip, #31
 800439e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80043a2:	ea4f 520c 	mov.w	r2, ip, lsl #20
 80043a6:	e7a2      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a8:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80043aa:	f046 0620 	orr.w	r6, r6, #32
 80043ae:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80043b0:	e606      	b.n	8003fc0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 80043b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043b4:	461d      	mov	r5, r3
 80043b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043ba:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043c0:	680a      	ldr	r2, [r1, #0]
 80043c2:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80043c4:	f3c2 0712 	ubfx	r7, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043c8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043cc:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f47f af19 	bne.w	8004208 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 80043d6:	f3c2 6784 	ubfx	r7, r2, #26, #5
 80043da:	e7ab      	b.n	8004334 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 80043dc:	f8dc 2000 	ldr.w	r2, [ip]
 80043e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043e4:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043e8:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043ea:	680a      	ldr	r2, [r1, #0]
 80043ec:	68ae      	ldr	r6, [r5, #8]
 80043ee:	f3c2 0712 	ubfx	r7, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043f2:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f6:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043fa:	2f00      	cmp	r7, #0
 80043fc:	f47f af12 	bne.w	8004224 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 8004400:	e7a0      	b.n	8004344 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 8004402:	f8dc 2000 	ldr.w	r2, [ip]
 8004406:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800440a:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800440e:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004410:	680a      	ldr	r2, [r1, #0]
 8004412:	68ee      	ldr	r6, [r5, #12]
 8004414:	f3c2 0712 	ubfx	r7, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004418:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800441a:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800441e:	2f00      	cmp	r7, #0
 8004420:	f47f af0d 	bne.w	800423e <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8004424:	e797      	b.n	8004356 <HAL_ADCEx_InjectedConfigChannel+0x502>
 8004426:	2602      	movs	r6, #2
 8004428:	e7ae      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800442a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800442e:	e79f      	b.n	8004370 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004430:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004434:	e75b      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
 8004436:	4a03      	ldr	r2, [pc, #12]	; (8004444 <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 8004438:	e759      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
 800443a:	2602      	movs	r6, #2
 800443c:	e732      	b.n	80042a4 <HAL_ADCEx_InjectedConfigChannel+0x450>
 800443e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004442:	e722      	b.n	800428a <HAL_ADCEx_InjectedConfigChannel+0x436>
 8004444:	fe500000 	.word	0xfe500000

08004448 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004448:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800444a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800444e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004450:	2a01      	cmp	r2, #1
{
 8004452:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004454:	d04f      	beq.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004456:	6804      	ldr	r4, [r0, #0]
 8004458:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800445a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800445c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800445e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004462:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004464:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004468:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800446a:	d008      	beq.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800446e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004472:	f041 0120 	orr.w	r1, r1, #32
 8004476:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004478:	b01c      	add	sp, #112	; 0x70
 800447a:	bcf0      	pop	{r4, r5, r6, r7}
 800447c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800447e:	4a23      	ldr	r2, [pc, #140]	; (800450c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004480:	6890      	ldr	r0, [r2, #8]
 8004482:	0740      	lsls	r0, r0, #29
 8004484:	d50b      	bpl.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004486:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800448a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800448e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004498:	b01c      	add	sp, #112	; 0x70
 800449a:	bcf0      	pop	{r4, r5, r6, r7}
 800449c:	4770      	bx	lr
 800449e:	68a0      	ldr	r0, [r4, #8]
 80044a0:	0746      	lsls	r6, r0, #29
 80044a2:	d4f1      	bmi.n	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044a4:	b1d5      	cbz	r5, 80044dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044a6:	4e1a      	ldr	r6, [pc, #104]	; (8004510 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80044a8:	684f      	ldr	r7, [r1, #4]
 80044aa:	68b0      	ldr	r0, [r6, #8]
 80044ac:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80044b0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80044b4:	4338      	orrs	r0, r7
 80044b6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80044ba:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044bc:	68a4      	ldr	r4, [r4, #8]
 80044be:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c0:	4320      	orrs	r0, r4
 80044c2:	f010 0001 	ands.w	r0, r0, #1
 80044c6:	d114      	bne.n	80044f2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	4315      	orrs	r5, r2
 80044cc:	68b2      	ldr	r2, [r6, #8]
 80044ce:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80044d2:	f022 020f 	bic.w	r2, r2, #15
 80044d6:	4315      	orrs	r5, r2
 80044d8:	60b5      	str	r5, [r6, #8]
 80044da:	e7da      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044dc:	4d0c      	ldr	r5, [pc, #48]	; (8004510 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80044de:	68a9      	ldr	r1, [r5, #8]
 80044e0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80044e4:	60a9      	str	r1, [r5, #8]
 80044e6:	68a1      	ldr	r1, [r4, #8]
 80044e8:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ea:	4308      	orrs	r0, r1
 80044ec:	f010 0001 	ands.w	r0, r0, #1
 80044f0:	d005      	beq.n	80044fe <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7cd      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80044f6:	2002      	movs	r0, #2
}
 80044f8:	b01c      	add	sp, #112	; 0x70
 80044fa:	bcf0      	pop	{r4, r5, r6, r7}
 80044fc:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044fe:	68aa      	ldr	r2, [r5, #8]
 8004500:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004504:	f022 020f 	bic.w	r2, r2, #15
 8004508:	60aa      	str	r2, [r5, #8]
 800450a:	e7c2      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800450c:	50000100 	.word	0x50000100
 8004510:	50000300 	.word	0x50000300

08004514 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004514:	b1b0      	cbz	r0, 8004544 <HAL_CORDIC_Init+0x30>
{
 8004516:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004518:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800451c:	4604      	mov	r4, r0
 800451e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004522:	b153      	cbz	r3, 800453a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004524:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004526:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004528:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800452a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800452e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004532:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004536:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004538:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800453a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800453e:	f7fe ff89 	bl	8003454 <HAL_CORDIC_MspInit>
 8004542:	e7ef      	b.n	8004524 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004544:	2001      	movs	r0, #1
}
 8004546:	4770      	bx	lr

08004548 <HAL_CORDIC_Configure>:
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004548:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800454c:	2a01      	cmp	r2, #1
{
 800454e:	4603      	mov	r3, r0
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004550:	d005      	beq.n	800455e <HAL_CORDIC_Configure+0x16>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004552:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004554:	f042 0202 	orr.w	r2, r2, #2

    /* Return error status */
    status = HAL_ERROR;
 8004558:	2001      	movs	r0, #1
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Return function status */
  return status;
}
 800455c:	4770      	bx	lr
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 800455e:	6988      	ldr	r0, [r1, #24]
 8004560:	680a      	ldr	r2, [r1, #0]
{
 8004562:	b410      	push	{r4}
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8004564:	684c      	ldr	r4, [r1, #4]
 8004566:	4302      	orrs	r2, r0
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	ea42 0304 	orr.w	r3, r2, r4
 800456e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 8004572:	4323      	orrs	r3, r4
 8004574:	4313      	orrs	r3, r2
 8004576:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 800457a:	6804      	ldr	r4, [r0, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <HAL_CORDIC_Configure+0x48>)
 8004580:	430b      	orrs	r3, r1
 8004582:	4022      	ands	r2, r4
 8004584:	4313      	orrs	r3, r2
 8004586:	6003      	str	r3, [r0, #0]
}
 8004588:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2000      	movs	r0, #0
}
 800458e:	4770      	bx	lr
 8004590:	ff87f800 	.word	0xff87f800

08004594 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004594:	4907      	ldr	r1, [pc, #28]	; (80045b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004596:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004598:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800459a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800459e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80045ae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_NVIC_SetPriority+0x74>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c2:	f1c3 0e07 	rsb	lr, r3, #7
 80045c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ce:	bf28      	it	cs
 80045d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d4:	f1bc 0f06 	cmp.w	ip, #6
 80045d8:	d91b      	bls.n	8004612 <HAL_NVIC_SetPriority+0x5a>
 80045da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 3cff 	mov.w	ip, #4294967295
 80045e0:	fa0c fc03 	lsl.w	ip, ip, r3
 80045e4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e8:	f04f 3cff 	mov.w	ip, #4294967295
 80045ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 80045f0:	ea21 010c 	bic.w	r1, r1, ip
 80045f4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80045f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80045fc:	db0c      	blt.n	8004618 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004602:	0109      	lsls	r1, r1, #4
 8004604:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004608:	b2c9      	uxtb	r1, r1
 800460a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800460e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004612:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004614:	4613      	mov	r3, r2
 8004616:	e7e7      	b.n	80045e8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_NVIC_SetPriority+0x78>)
 800461a:	f000 000f 	and.w	r0, r0, #15
 800461e:	0109      	lsls	r1, r1, #4
 8004620:	4403      	add	r3, r0
 8004622:	b2c9      	uxtb	r1, r1
 8004624:	7619      	strb	r1, [r3, #24]
 8004626:	f85d fb04 	ldr.w	pc, [sp], #4
 800462a:	bf00      	nop
 800462c:	e000ed00 	.word	0xe000ed00
 8004630:	e000ecfc 	.word	0xe000ecfc

08004634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004634:	2800      	cmp	r0, #0
 8004636:	db08      	blt.n	800464a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004638:	4a04      	ldr	r2, [pc, #16]	; (800464c <HAL_NVIC_EnableIRQ+0x18>)
 800463a:	0941      	lsrs	r1, r0, #5
 800463c:	2301      	movs	r3, #1
 800463e:	f000 001f 	and.w	r0, r0, #31
 8004642:	fa03 f000 	lsl.w	r0, r3, r0
 8004646:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800464a:	4770      	bx	lr
 800464c:	e000e100 	.word	0xe000e100

08004650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004650:	3801      	subs	r0, #1
 8004652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004656:	d210      	bcs.n	800467a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004658:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800465a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465e:	4c08      	ldr	r4, [pc, #32]	; (8004680 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004660:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004666:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800466a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800466c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800466e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004670:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004672:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004676:	6119      	str	r1, [r3, #16]
 8004678:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2001      	movs	r0, #1
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004684:	2800      	cmp	r0, #0
 8004686:	f000 80d9 	beq.w	800483c <HAL_FDCAN_Init+0x1b8>
{
 800468a:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800468c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004690:	4604      	mov	r4, r0
 8004692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004696:	2b00      	cmp	r3, #0
 8004698:	d071      	beq.n	800477e <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	6993      	ldr	r3, [r2, #24]
 800469e:	f023 0310 	bic.w	r3, r3, #16
 80046a2:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a4:	f7ff f9f4 	bl	8003a90 <HAL_GetTick>
 80046a8:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046aa:	e004      	b.n	80046b6 <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046ac:	f7ff f9f0 	bl	8003a90 <HAL_GetTick>
 80046b0:	1b43      	subs	r3, r0, r5
 80046b2:	2b0a      	cmp	r3, #10
 80046b4:	d85a      	bhi.n	800476c <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	0711      	lsls	r1, r2, #28
 80046bc:	d4f6      	bmi.n	80046ac <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c6:	f7ff f9e3 	bl	8003a90 <HAL_GetTick>
 80046ca:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046cc:	e004      	b.n	80046d8 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046ce:	f7ff f9df 	bl	8003a90 <HAL_GetTick>
 80046d2:	1b40      	subs	r0, r0, r5
 80046d4:	280a      	cmp	r0, #10
 80046d6:	d849      	bhi.n	800476c <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	07d2      	lsls	r2, r2, #31
 80046de:	d5f6      	bpl.n	80046ce <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046e0:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046e2:	4959      	ldr	r1, [pc, #356]	; (8004848 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046e4:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 80046e8:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046ea:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80046ec:	f000 80a1 	beq.w	8004832 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80046f0:	7c22      	ldrb	r2, [r4, #16]
 80046f2:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	bf0c      	ite	eq
 80046f8:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046fc:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8004700:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004702:	7c62      	ldrb	r2, [r4, #17]
 8004704:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	bf0c      	ite	eq
 800470a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800470e:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8004712:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004714:	7ca2      	ldrb	r2, [r4, #18]
 8004716:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	bf0c      	ite	eq
 800471c:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004720:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8004724:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800472a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800472c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004730:	4302      	orrs	r2, r0
 8004732:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800473a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800473c:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800473e:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004740:	f022 0210 	bic.w	r2, r2, #16
 8004744:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004746:	d01f      	beq.n	8004788 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004748:	b311      	cbz	r1, 8004790 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800474a:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800474c:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800474e:	d077      	beq.n	8004840 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004754:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004756:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004758:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800475a:	f042 0210 	orr.w	r2, r2, #16
 800475e:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004760:	d116      	bne.n	8004790 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	f042 0220 	orr.w	r2, r2, #32
 8004768:	619a      	str	r2, [r3, #24]
 800476a:	e011      	b.n	8004790 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800476c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800476e:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004776:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800477a:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800477c:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 800477e:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8004782:	f7fe fe7f 	bl	8003484 <HAL_FDCAN_MspInit>
 8004786:	e788      	b.n	800469a <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	f042 0204 	orr.w	r2, r2, #4
 800478e:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004790:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004794:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004796:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004798:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800479a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800479e:	6a21      	ldr	r1, [r4, #32]
 80047a0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047a2:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047a4:	6961      	ldr	r1, [r4, #20]
 80047a6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047ac:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047b0:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047b2:	d10e      	bne.n	80047d2 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047b4:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047ba:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047bc:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047be:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047c0:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80047c6:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80047c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047ca:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047d0:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80047d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80047d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80047da:	4302      	orrs	r2, r0
 80047dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80047e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80047e4:	4819      	ldr	r0, [pc, #100]	; (800484c <HAL_FDCAN_Init+0x1c8>)
 80047e6:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80047e8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80047ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80047f4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80047f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004802:	4913      	ldr	r1, [pc, #76]	; (8004850 <HAL_FDCAN_Init+0x1cc>)
 8004804:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800480c:	4a12      	ldr	r2, [pc, #72]	; (8004858 <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800480e:	3140      	adds	r1, #64	; 0x40
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004810:	e9c4 1312 	strd	r1, r3, [r4, #72]	; 0x48

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004814:	33f0      	adds	r3, #240	; 0xf0
 8004816:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800481a:	2100      	movs	r1, #0
 800481c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004820:	f003 f850 	bl	80078c4 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8004824:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004826:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004828:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800482a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 800482e:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8004830:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_FDCAN_Init+0x1d8>)
 8004834:	6861      	ldr	r1, [r4, #4]
 8004836:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 800483a:	e759      	b.n	80046f0 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 800483c:	2001      	movs	r0, #1
}
 800483e:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004840:	f042 0220 	orr.w	r2, r2, #32
 8004844:	619a      	str	r2, [r3, #24]
 8004846:	e7a3      	b.n	8004790 <HAL_FDCAN_Init+0x10c>
 8004848:	40006400 	.word	0x40006400
 800484c:	4000a400 	.word	0x4000a400
 8004850:	4000a470 	.word	0x4000a470
 8004854:	4000a588 	.word	0x4000a588
 8004858:	4000a660 	.word	0x4000a660
 800485c:	40006000 	.word	0x40006000

08004860 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004860:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004864:	3a01      	subs	r2, #1
 8004866:	2a01      	cmp	r2, #1
{
 8004868:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800486a:	d905      	bls.n	8004878 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800486c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800486e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8004872:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004874:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004876:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004878:	6808      	ldr	r0, [r1, #0]
{
 800487a:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800487c:	b978      	cbnz	r0, 800489e <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 800487e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8004882:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004884:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 8004888:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800488a:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800488c:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800488e:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8004890:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8004896:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 800489a:	bc30      	pop	{r4, r5}
 800489c:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800489e:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048a0:	688a      	ldr	r2, [r1, #8]
 80048a2:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80048a4:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048a6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80048aa:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80048ae:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80048b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 80048b6:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 80048ba:	2000      	movs	r0, #0
}
 80048bc:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 80048be:	f8cc 3004 	str.w	r3, [ip, #4]
}
 80048c2:	4770      	bx	lr

080048c4 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048c4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80048c8:	2a01      	cmp	r2, #1
{
 80048ca:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048cc:	d005      	beq.n	80048da <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048ce:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80048d0:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 80048d4:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048d8:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048da:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048e2:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048e4:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 80048ec:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048ee:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop

080048f4 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80048f6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80048fa:	2b02      	cmp	r3, #2
{
 80048fc:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80048fe:	d10c      	bne.n	800491a <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004900:	6805      	ldr	r5, [r0, #0]
 8004902:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8004906:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 800490a:	d00d      	beq.n	8004928 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800490c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800490e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004914:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8004918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800491a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800491c:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004922:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8004926:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004928:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800492c:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800492e:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004932:	2b00      	cmp	r3, #0
 8004934:	d13a      	bne.n	80049ac <HAL_FDCAN_AddMessageToTxFifoQ+0xb8>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8004936:	688b      	ldr	r3, [r1, #8]
 8004938:	690f      	ldr	r7, [r1, #16]
 800493a:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 800493c:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800493e:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004942:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8004946:	694c      	ldr	r4, [r1, #20]
 8004948:	4303      	orrs	r3, r0
 800494a:	68c8      	ldr	r0, [r1, #12]
 800494c:	4323      	orrs	r3, r4
 800494e:	6a0c      	ldr	r4, [r1, #32]
 8004950:	4303      	orrs	r3, r0
 8004952:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004956:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 800495a:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800495e:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004962:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004966:	4c15      	ldr	r4, [pc, #84]	; (80049bc <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8004968:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800496a:	89cb      	ldrh	r3, [r1, #14]
 800496c:	5ce3      	ldrb	r3, [r4, r3]
 800496e:	b1a3      	cbz	r3, 800499a <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004970:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004972:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004974:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004976:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800497a:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800497c:	433b      	orrs	r3, r7
 800497e:	7857      	ldrb	r7, [r2, #1]
 8004980:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004984:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004988:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800498c:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800498e:	89cb      	ldrh	r3, [r1, #14]
 8004990:	5ce3      	ldrb	r3, [r4, r3]
 8004992:	459c      	cmp	ip, r3
 8004994:	f102 0204 	add.w	r2, r2, #4
 8004998:	d3ea      	bcc.n	8004970 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800499a:	2301      	movs	r3, #1
 800499c:	fa03 f606 	lsl.w	r6, r3, r6
 80049a0:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    return HAL_OK;
 80049a4:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80049a6:	f8ce 6058 	str.w	r6, [lr, #88]	; 0x58
}
 80049aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 80049ac:	690b      	ldr	r3, [r1, #16]
 80049ae:	680f      	ldr	r7, [r1, #0]
 80049b0:	431f      	orrs	r7, r3
 80049b2:	688b      	ldr	r3, [r1, #8]
 80049b4:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049b6:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 80049ba:	e7c2      	b.n	8004942 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 80049bc:	0800b480 	.word	0x0800b480

080049c0 <HAL_FDCAN_GetRxMessage>:
{
 80049c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c2:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80049c4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 80049c8:	2802      	cmp	r0, #2
 80049ca:	d10d      	bne.n	80049e8 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80049cc:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80049ce:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80049d2:	d00f      	beq.n	80049f4 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80049d4:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 80049d8:	0700      	lsls	r0, r0, #28
 80049da:	d15f      	bne.n	8004a9c <HAL_FDCAN_GetRxMessage+0xdc>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 80049e2:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049e4:	6623      	str	r3, [r4, #96]	; 0x60
}
 80049e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80049e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049ea:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 80049ee:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80049f0:	6623      	str	r3, [r4, #96]	; 0x60
}
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80049f4:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 80049f8:	0705      	lsls	r5, r0, #28
 80049fa:	d0ef      	beq.n	80049dc <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80049fc:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004a00:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004a02:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004a06:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8004a0a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a0e:	6828      	ldr	r0, [r5, #0]
 8004a10:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8004a14:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d14f      	bne.n	8004aba <HAL_FDCAN_GetRxMessage+0xfa>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004a1a:	6828      	ldr	r0, [r5, #0]
 8004a1c:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8004a20:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a22:	6828      	ldr	r0, [r5, #0]
 8004a24:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8004a28:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004a2a:	6828      	ldr	r0, [r5, #0]
 8004a2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004a30:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004a32:	88a8      	ldrh	r0, [r5, #4]
 8004a34:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004a36:	6868      	ldr	r0, [r5, #4]
 8004a38:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8004a3c:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004a3e:	686e      	ldr	r6, [r5, #4]
 8004a40:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8004a44:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004a46:	686e      	ldr	r6, [r5, #4]
 8004a48:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8004a4c:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004a4e:	79ee      	ldrb	r6, [r5, #7]
 8004a50:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004a54:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004a56:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004a58:	4e1a      	ldr	r6, [pc, #104]	; (8004ac4 <HAL_FDCAN_GetRxMessage+0x104>)
 8004a5a:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004a5e:	6868      	ldr	r0, [r5, #4]
 8004a60:	0fc0      	lsrs	r0, r0, #31
 8004a62:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004a64:	f1be 0f00 	cmp.w	lr, #0
 8004a68:	d010      	beq.n	8004a8c <HAL_FDCAN_GetRxMessage+0xcc>
 8004a6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8004a6e:	f105 0c07 	add.w	ip, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8004a72:	4663      	mov	r3, ip
 8004a74:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8004a78:	f80e 0f01 	strb.w	r0, [lr, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004a7c:	89d0      	ldrh	r0, [r2, #14]
 8004a7e:	3b06      	subs	r3, #6
 8004a80:	5c30      	ldrb	r0, [r6, r0]
 8004a82:	1b5b      	subs	r3, r3, r5
 8004a84:	4298      	cmp	r0, r3
 8004a86:	d8f4      	bhi.n	8004a72 <HAL_FDCAN_GetRxMessage+0xb2>
 8004a88:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a8c:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8004a8e:	bf0c      	ite	eq
 8004a90:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8004a94:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8004a98:	2000      	movs	r0, #0
}
 8004a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004a9c:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004aa0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004aa2:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004aa6:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8004aaa:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004aae:	6828      	ldr	r0, [r5, #0]
 8004ab0:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8004ab4:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d0af      	beq.n	8004a1a <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004aba:	6828      	ldr	r0, [r5, #0]
 8004abc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8004ac0:	e7ae      	b.n	8004a20 <HAL_FDCAN_GetRxMessage+0x60>
 8004ac2:	bf00      	nop
 8004ac4:	0800b480 	.word	0x0800b480

08004ac8 <HAL_FDCAN_ActivateNotification>:
{
 8004ac8:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004aca:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ace:	3801      	subs	r0, #1
 8004ad0:	2801      	cmp	r0, #1
 8004ad2:	d905      	bls.n	8004ae0 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ad6:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8004ada:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004ade:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004ae0:	681b      	ldr	r3, [r3, #0]
{
 8004ae2:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004ae4:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004ae8:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004aea:	d03d      	beq.n	8004b68 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004aec:	07c4      	lsls	r4, r0, #31
 8004aee:	d43b      	bmi.n	8004b68 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004af0:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8004af2:	f044 0401 	orr.w	r4, r4, #1
 8004af6:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004af8:	b1cd      	cbz	r5, 8004b2e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004afa:	07c5      	lsls	r5, r0, #31
 8004afc:	d517      	bpl.n	8004b2e <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004afe:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004b00:	f040 0002 	orr.w	r0, r0, #2
 8004b04:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004b06:	060c      	lsls	r4, r1, #24
 8004b08:	d504      	bpl.n	8004b14 <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004b0a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8004b0e:	4310      	orrs	r0, r2
 8004b10:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b14:	05c8      	lsls	r0, r1, #23
 8004b16:	d504      	bpl.n	8004b22 <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004b18:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004b1c:	4302      	orrs	r2, r0
 8004b1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b24:	4311      	orrs	r1, r2
    return HAL_OK;
 8004b26:	2000      	movs	r0, #0
}
 8004b28:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b2a:	6559      	str	r1, [r3, #84]	; 0x54
}
 8004b2c:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004b2e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8004b32:	d001      	beq.n	8004b38 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004b34:	0784      	lsls	r4, r0, #30
 8004b36:	d4e2      	bmi.n	8004afe <HAL_FDCAN_ActivateNotification+0x36>
 8004b38:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8004b3c:	d131      	bne.n	8004ba2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004b3e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8004b42:	d001      	beq.n	8004b48 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004b44:	0704      	lsls	r4, r0, #28
 8004b46:	d4da      	bmi.n	8004afe <HAL_FDCAN_ActivateNotification+0x36>
 8004b48:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8004b4c:	d001      	beq.n	8004b52 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004b4e:	06c5      	lsls	r5, r0, #27
 8004b50:	d4d5      	bmi.n	8004afe <HAL_FDCAN_ActivateNotification+0x36>
 8004b52:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8004b56:	d001      	beq.n	8004b5c <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004b58:	0684      	lsls	r4, r0, #26
 8004b5a:	d4d0      	bmi.n	8004afe <HAL_FDCAN_ActivateNotification+0x36>
 8004b5c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8004b60:	d0d1      	beq.n	8004b06 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004b62:	0645      	lsls	r5, r0, #25
 8004b64:	d5cf      	bpl.n	8004b06 <HAL_FDCAN_ActivateNotification+0x3e>
 8004b66:	e7ca      	b.n	8004afe <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004b68:	f011 0f38 	tst.w	r1, #56	; 0x38
 8004b6c:	d001      	beq.n	8004b72 <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004b6e:	0784      	lsls	r4, r0, #30
 8004b70:	d5be      	bpl.n	8004af0 <HAL_FDCAN_ActivateNotification+0x28>
 8004b72:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8004b76:	d117      	bne.n	8004ba8 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004b78:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8004b7c:	d001      	beq.n	8004b82 <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004b7e:	0704      	lsls	r4, r0, #28
 8004b80:	d5b6      	bpl.n	8004af0 <HAL_FDCAN_ActivateNotification+0x28>
 8004b82:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8004b86:	d001      	beq.n	8004b8c <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004b88:	06c4      	lsls	r4, r0, #27
 8004b8a:	d5b1      	bpl.n	8004af0 <HAL_FDCAN_ActivateNotification+0x28>
 8004b8c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8004b90:	d001      	beq.n	8004b96 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004b92:	0684      	lsls	r4, r0, #26
 8004b94:	d5ac      	bpl.n	8004af0 <HAL_FDCAN_ActivateNotification+0x28>
 8004b96:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8004b9a:	d0ad      	beq.n	8004af8 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004b9c:	0644      	lsls	r4, r0, #25
 8004b9e:	d4ab      	bmi.n	8004af8 <HAL_FDCAN_ActivateNotification+0x30>
 8004ba0:	e7a6      	b.n	8004af0 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004ba2:	0745      	lsls	r5, r0, #29
 8004ba4:	d4ab      	bmi.n	8004afe <HAL_FDCAN_ActivateNotification+0x36>
 8004ba6:	e7ca      	b.n	8004b3e <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004ba8:	0744      	lsls	r4, r0, #29
 8004baa:	d5a1      	bpl.n	8004af0 <HAL_FDCAN_ActivateNotification+0x28>
 8004bac:	e7e4      	b.n	8004b78 <HAL_FDCAN_ActivateNotification+0xb0>
 8004bae:	bf00      	nop

08004bb0 <HAL_FDCAN_TxEventFifoCallback>:
}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <HAL_FDCAN_RxFifo1Callback>:
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <HAL_FDCAN_TxFifoEmptyCallback>:
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <HAL_FDCAN_TxBufferCompleteCallback>:
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop

08004bc0 <HAL_FDCAN_TxBufferAbortCallback>:
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <HAL_FDCAN_TimestampWraparoundCallback>:
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <HAL_FDCAN_TimeoutOccurredCallback>:
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop

08004bcc <HAL_FDCAN_HighPriorityMessageCallback>:
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop

08004bd0 <HAL_FDCAN_ErrorCallback>:
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop

08004bd4 <HAL_FDCAN_ErrorStatusCallback>:
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop

08004bd8 <HAL_FDCAN_IRQHandler>:
{
 8004bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004bdc:	6803      	ldr	r3, [r0, #0]
 8004bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004be2:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004bea:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004bec:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004bf2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004bf4:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8004bf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004bf8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8004bfa:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfe:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c02:	0652      	lsls	r2, r2, #25
{
 8004c04:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c06:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c0a:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c0e:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8004c12:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c16:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c1a:	d502      	bpl.n	8004c22 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c1e:	0651      	lsls	r1, r2, #25
 8004c20:	d473      	bmi.n	8004d0a <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c24:	05d2      	lsls	r2, r2, #23
 8004c26:	d502      	bpl.n	8004c2e <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c2a:	05d0      	lsls	r0, r2, #23
 8004c2c:	d45d      	bmi.n	8004cea <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8004c2e:	f1b9 0f00 	cmp.w	r9, #0
 8004c32:	d14a      	bne.n	8004cca <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8004c34:	f1b8 0f00 	cmp.w	r8, #0
 8004c38:	d137      	bne.n	8004caa <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	d13e      	bne.n	8004cbc <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c40:	0591      	lsls	r1, r2, #22
 8004c42:	d502      	bpl.n	8004c4a <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c46:	0592      	lsls	r2, r2, #22
 8004c48:	d475      	bmi.n	8004d36 <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c4c:	0617      	lsls	r7, r2, #24
 8004c4e:	d502      	bpl.n	8004c56 <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c52:	0610      	lsls	r0, r2, #24
 8004c54:	d477      	bmi.n	8004d46 <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c58:	0491      	lsls	r1, r2, #18
 8004c5a:	d502      	bpl.n	8004c62 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5e:	0492      	lsls	r2, r2, #18
 8004c60:	d459      	bmi.n	8004d16 <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c64:	0417      	lsls	r7, r2, #16
 8004c66:	d502      	bpl.n	8004c6e <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6a:	0410      	lsls	r0, r2, #16
 8004c6c:	d45b      	bmi.n	8004d26 <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c70:	0451      	lsls	r1, r2, #17
 8004c72:	d509      	bpl.n	8004c88 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c76:	0452      	lsls	r2, r2, #17
 8004c78:	d506      	bpl.n	8004c88 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004c80:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c86:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8004c88:	b94e      	cbnz	r6, 8004c9e <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8004c8a:	b125      	cbz	r5, 8004c96 <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8004c90:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c92:	431d      	orrs	r5, r3
 8004c94:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004c96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004c98:	bb13      	cbnz	r3, 8004ce0 <HAL_FDCAN_IRQHandler+0x108>
}
 8004c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004c9e:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff ff96 	bl	8004bd4 <HAL_FDCAN_ErrorStatusCallback>
 8004ca8:	e7ef      	b.n	8004c8a <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004caa:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004cae:	4641      	mov	r1, r8
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7fc f973 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004cb6:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8004cb8:	2f00      	cmp	r7, #0
 8004cba:	d0c0      	beq.n	8004c3e <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004cbc:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff ff77 	bl	8004bb4 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	e7b9      	b.n	8004c3e <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004cca:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004cce:	4649      	mov	r1, r9
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7ff ff6d 	bl	8004bb0 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004cd6:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8004cd8:	f1b8 0f00 	cmp.w	r8, #0
 8004cdc:	d0ad      	beq.n	8004c3a <HAL_FDCAN_IRQHandler+0x62>
 8004cde:	e7e4      	b.n	8004caa <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7ff ff75 	bl	8004bd0 <HAL_FDCAN_ErrorCallback>
}
 8004ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004cea:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004cee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004cf2:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7ff ff60 	bl	8004bc0 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d00:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8004d02:	f1b9 0f00 	cmp.w	r9, #0
 8004d06:	d095      	beq.n	8004c34 <HAL_FDCAN_IRQHandler+0x5c>
 8004d08:	e7df      	b.n	8004cca <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d0e:	f7ff ff5d 	bl	8004bcc <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	e785      	b.n	8004c22 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d1a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7ff ff51 	bl	8004bc4 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	e79d      	b.n	8004c62 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004d26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d2a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff ff4b 	bl	8004bc8 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	e79b      	b.n	8004c6e <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f7ff ff3b 	bl	8004bb8 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	e781      	b.n	8004c4a <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d46:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d4a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d4e:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff ff31 	bl	8004bbc <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	e77b      	b.n	8004c56 <HAL_FDCAN_IRQHandler+0x7e>
 8004d5e:	bf00      	nop

08004d60 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_FLASH_Unlock+0x1c>)
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	2a00      	cmp	r2, #0
 8004d66:	db01      	blt.n	8004d6c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004d68:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004d6a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d70:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d72:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d74:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	0fc0      	lsrs	r0, r0, #31
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40022000 	.word	0x40022000
 8004d80:	45670123 	.word	0x45670123
 8004d84:	cdef89ab 	.word	0xcdef89ab

08004d88 <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_FLASH_Lock+0x14>)
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d90:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d92:	6958      	ldr	r0, [r3, #20]
  {
    status = HAL_OK;
  }

  return status;
}
 8004d94:	43c0      	mvns	r0, r0
 8004d96:	0fc0      	lsrs	r0, r0, #31
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40022000 	.word	0x40022000

08004da0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
  return pFlash.ErrorCode;
 8004da0:	4b01      	ldr	r3, [pc, #4]	; (8004da8 <HAL_FLASH_GetError+0x8>)
 8004da2:	6858      	ldr	r0, [r3, #4]
}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000000c 	.word	0x2000000c

08004dac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7fe fe6e 	bl	8003a90 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004db4:	4e10      	ldr	r6, [pc, #64]	; (8004df8 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8004db6:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004db8:	e004      	b.n	8004dc4 <FLASH_WaitForLastOperation+0x18>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8004dba:	f7fe fe69 	bl	8003a90 <HAL_GetTick>
 8004dbe:	1b03      	subs	r3, r0, r4
 8004dc0:	42ab      	cmp	r3, r5
 8004dc2:	d80f      	bhi.n	8004de4 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004dc4:	6933      	ldr	r3, [r6, #16]
 8004dc6:	03db      	lsls	r3, r3, #15
 8004dc8:	d4f7      	bmi.n	8004dba <FLASH_WaitForLastOperation+0xe>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004dca:	6933      	ldr	r3, [r6, #16]
 8004dcc:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d109      	bne.n	8004de8 <FLASH_WaitForLastOperation+0x3c>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004dd4:	6930      	ldr	r0, [r6, #16]
 8004dd6:	f010 0001 	ands.w	r0, r0, #1
 8004dda:	d002      	beq.n	8004de2 <FLASH_WaitForLastOperation+0x36>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ddc:	2201      	movs	r2, #1
 8004dde:	6132      	str	r2, [r6, #16]
 8004de0:	4618      	mov	r0, r3
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8004de4:	2003      	movs	r0, #3
}
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8004de8:	4904      	ldr	r1, [pc, #16]	; (8004dfc <FLASH_WaitForLastOperation+0x50>)
 8004dea:	684a      	ldr	r2, [r1, #4]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8004df0:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8004df2:	6133      	str	r3, [r6, #16]
}
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	bf00      	nop
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	2000000c 	.word	0x2000000c

08004e00 <HAL_FLASH_Program>:
{
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8004e04:	4d28      	ldr	r5, [pc, #160]	; (8004ea8 <HAL_FLASH_Program+0xa8>)
{
 8004e06:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8004e08:	782a      	ldrb	r2, [r5, #0]
 8004e0a:	2a01      	cmp	r2, #1
 8004e0c:	d017      	beq.n	8004e3e <HAL_FLASH_Program+0x3e>
 8004e0e:	4607      	mov	r7, r0
 8004e10:	4698      	mov	r8, r3
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  __HAL_LOCK(&pFlash);
 8004e16:	2301      	movs	r3, #1
 8004e18:	460e      	mov	r6, r1
 8004e1a:	702b      	strb	r3, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e1c:	f7ff ffc6 	bl	8004dac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004e20:	b118      	cbz	r0, 8004e2a <HAL_FLASH_Program+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004e22:	2300      	movs	r3, #0
 8004e24:	702b      	strb	r3, [r5, #0]
}
 8004e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e2a:	6068      	str	r0, [r5, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004e2c:	b157      	cbz	r7, 8004e44 <HAL_FLASH_Program+0x44>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004e2e:	1e7b      	subs	r3, r7, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d91c      	bls.n	8004e6e <HAL_FLASH_Program+0x6e>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e38:	f7ff ffb8 	bl	8004dac <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8004e3c:	e7f1      	b.n	8004e22 <HAL_FLASH_Program+0x22>
  __HAL_LOCK(&pFlash);
 8004e3e:	2002      	movs	r0, #2
}
 8004e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_FLASH_Program+0xac>)
 8004e46:	6953      	ldr	r3, [r2, #20]
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004e4e:	6034      	str	r4, [r6, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e50:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004e58:	f8c6 8004 	str.w	r8, [r6, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e5c:	f7ff ffa6 	bl	8004dac <FLASH_WaitForLastOperation>
 8004e60:	f06f 0101 	mvn.w	r1, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <HAL_FLASH_Program+0xac>)
 8004e66:	6953      	ldr	r3, [r2, #20]
 8004e68:	400b      	ands	r3, r1
 8004e6a:	6153      	str	r3, [r2, #20]
 8004e6c:	e7d9      	b.n	8004e22 <HAL_FLASH_Program+0x22>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e6e:	490f      	ldr	r1, [pc, #60]	; (8004eac <HAL_FLASH_Program+0xac>)
 8004e70:	694b      	ldr	r3, [r1, #20]
 8004e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8004e76:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e78:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004e7e:	b672      	cpsid	i
 8004e80:	1ab1      	subs	r1, r6, r2
 8004e82:	f502 7080 	add.w	r0, r2, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 8004e8a:	3204      	adds	r2, #4
    row_index--;
  }
  while (row_index != 0U);
 8004e8c:	4282      	cmp	r2, r0
 8004e8e:	d1fa      	bne.n	8004e86 <HAL_FLASH_Program+0x86>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	f384 8810 	msr	PRIMASK, r4
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004e94:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004e9a:	d1cd      	bne.n	8004e38 <HAL_FLASH_Program+0x38>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e9c:	f7ff ff86 	bl	8004dac <FLASH_WaitForLastOperation>
 8004ea0:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
 8004ea4:	e7de      	b.n	8004e64 <HAL_FLASH_Program+0x64>
 8004ea6:	bf00      	nop
 8004ea8:	2000000c 	.word	0x2000000c
 8004eac:	40022000 	.word	0x40022000

08004eb0 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004eb0:	4915      	ldr	r1, [pc, #84]	; (8004f08 <FLASH_FlushCaches+0x58>)
 8004eb2:	7f0b      	ldrb	r3, [r1, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004eb4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8004eb8:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004eba:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004ebc:	d110      	bne.n	8004ee0 <FLASH_FlushCaches+0x30>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004ebe:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <FLASH_FlushCaches+0x5c>)
 8004ec0:	6810      	ldr	r0, [r2, #0]
 8004ec2:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8004ec6:	6010      	str	r0, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ec8:	6810      	ldr	r0, [r2, #0]
 8004eca:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8004ece:	6010      	str	r0, [r2, #0]
 8004ed0:	6810      	ldr	r0, [r2, #0]
 8004ed2:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8004ed6:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ed8:	6810      	ldr	r0, [r2, #0]
 8004eda:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004ede:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004ee0:	3b02      	subs	r3, #2
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d80c      	bhi.n	8004f00 <FLASH_FlushCaches+0x50>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <FLASH_FlushCaches+0x5c>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ef6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004f00:	2300      	movs	r3, #0
 8004f02:	770b      	strb	r3, [r1, #28]
}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	2000000c 	.word	0x2000000c
 8004f0c:	40022000 	.word	0x40022000

08004f10 <HAL_FLASHEx_Erase>:
{
 8004f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8004f14:	4f3f      	ldr	r7, [pc, #252]	; (8005014 <HAL_FLASHEx_Erase+0x104>)
 8004f16:	783b      	ldrb	r3, [r7, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d052      	beq.n	8004fc2 <HAL_FLASHEx_Erase+0xb2>
 8004f1c:	4681      	mov	r9, r0
 8004f1e:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f24:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8004f26:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f28:	f7ff ff40 	bl	8004dac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	b120      	cbz	r0, 8004f3a <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004f30:	2300      	movs	r3, #0
 8004f32:	703b      	strb	r3, [r7, #0]
}
 8004f34:	4630      	mov	r0, r6
 8004f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004f3a:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_FLASHEx_Erase+0x108>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f3c:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	f412 7f00 	tst.w	r2, #512	; 0x200
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004f44:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004f46:	d140      	bne.n	8004fca <HAL_FLASHEx_Erase+0xba>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004f48:	0552      	lsls	r2, r2, #21
 8004f4a:	d549      	bpl.n	8004fe0 <HAL_FLASHEx_Erase+0xd0>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004f54:	2302      	movs	r3, #2
 8004f56:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f58:	f8d9 3000 	ldr.w	r3, [r9]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d041      	beq.n	8004fe4 <HAL_FLASHEx_Erase+0xd4>
      *PageError = 0xFFFFFFFFU;
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004f68:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8004f6c:	442b      	add	r3, r5
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	d924      	bls.n	8004fbc <HAL_FLASHEx_Erase+0xac>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004f72:	4c29      	ldr	r4, [pc, #164]	; (8005018 <HAL_FLASHEx_Erase+0x108>)
 8004f74:	e005      	b.n	8004f82 <HAL_FLASHEx_Erase+0x72>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004f76:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8004f7a:	3501      	adds	r5, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	42ab      	cmp	r3, r5
 8004f80:	d91c      	bls.n	8004fbc <HAL_FLASHEx_Erase+0xac>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004f82:	6962      	ldr	r2, [r4, #20]
 8004f84:	00eb      	lsls	r3, r5, #3
 8004f86:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8004f8a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004f92:	6963      	ldr	r3, [r4, #20]
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004f9a:	6963      	ldr	r3, [r4, #20]
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fa6:	f7ff ff01 	bl	8004dac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004faa:	6963      	ldr	r3, [r4, #20]
 8004fac:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8004fb0:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d0df      	beq.n	8004f76 <HAL_FLASHEx_Erase+0x66>
          *PageError = page_index;
 8004fb6:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fba:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8004fbc:	f7ff ff78 	bl	8004eb0 <FLASH_FlushCaches>
 8004fc0:	e7b6      	b.n	8004f30 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8004fc2:	2602      	movs	r6, #2
}
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004fca:	0551      	lsls	r1, r2, #21
 8004fcc:	d506      	bpl.n	8004fdc <HAL_FLASHEx_Erase+0xcc>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd4:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	773b      	strb	r3, [r7, #28]
 8004fda:	e7bd      	b.n	8004f58 <HAL_FLASHEx_Erase+0x48>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004fdc:	773c      	strb	r4, [r7, #28]
 8004fde:	e7bb      	b.n	8004f58 <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004fe0:	7738      	strb	r0, [r7, #28]
 8004fe2:	e7b9      	b.n	8004f58 <HAL_FLASHEx_Erase+0x48>
    if ((Banks & FLASH_BANK_1) != 0U)
 8004fe4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004fe8:	07db      	lsls	r3, r3, #31
 8004fea:	d504      	bpl.n	8004ff6 <HAL_FLASHEx_Erase+0xe6>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004fec:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <HAL_FLASHEx_Erase+0x108>)
 8004fee:	6953      	ldr	r3, [r2, #20]
 8004ff0:	f043 0304 	orr.w	r3, r3, #4
 8004ff4:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004ff6:	4c08      	ldr	r4, [pc, #32]	; (8005018 <HAL_FLASHEx_Erase+0x108>)
 8004ff8:	6963      	ldr	r3, [r4, #20]
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005004:	f7ff fed2 	bl	8004dac <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005008:	6963      	ldr	r3, [r4, #20]
 800500a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800500e:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005010:	6163      	str	r3, [r4, #20]
 8005012:	e7d3      	b.n	8004fbc <HAL_FLASHEx_Erase+0xac>
 8005014:	2000000c 	.word	0x2000000c
 8005018:	40022000 	.word	0x40022000

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005020:	680c      	ldr	r4, [r1, #0]
{
 8005022:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005024:	2c00      	cmp	r4, #0
 8005026:	f000 8083 	beq.w	8005130 <HAL_GPIO_Init+0x114>
 800502a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005208 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8005032:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005034:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005038:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800503a:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 800503e:	ea15 0804 	ands.w	r8, r5, r4
 8005042:	d06f      	beq.n	8005124 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005044:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8005048:	f007 0203 	and.w	r2, r7, #3
 800504c:	1e51      	subs	r1, r2, #1
 800504e:	2901      	cmp	r1, #1
 8005050:	d971      	bls.n	8005136 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005052:	2a03      	cmp	r2, #3
 8005054:	f040 80b0 	bne.w	80051b8 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005058:	fa02 f20c 	lsl.w	r2, r2, ip
 800505c:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 800505e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005060:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005062:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005064:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005068:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800506a:	d05b      	beq.n	8005124 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506c:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8005078:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800507c:	f002 0201 	and.w	r2, r2, #1
 8005080:	9203      	str	r2, [sp, #12]
 8005082:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800508c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005090:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005094:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005096:	00ad      	lsls	r5, r5, #2
 8005098:	260f      	movs	r6, #15
 800509a:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800509e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050a2:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050a6:	d019      	beq.n	80050dc <HAL_GPIO_Init+0xc0>
 80050a8:	4e51      	ldr	r6, [pc, #324]	; (80051f0 <HAL_GPIO_Init+0x1d4>)
 80050aa:	42b0      	cmp	r0, r6
 80050ac:	f000 808f 	beq.w	80051ce <HAL_GPIO_Init+0x1b2>
 80050b0:	4e50      	ldr	r6, [pc, #320]	; (80051f4 <HAL_GPIO_Init+0x1d8>)
 80050b2:	42b0      	cmp	r0, r6
 80050b4:	f000 808f 	beq.w	80051d6 <HAL_GPIO_Init+0x1ba>
 80050b8:	4e4f      	ldr	r6, [pc, #316]	; (80051f8 <HAL_GPIO_Init+0x1dc>)
 80050ba:	42b0      	cmp	r0, r6
 80050bc:	f000 8081 	beq.w	80051c2 <HAL_GPIO_Init+0x1a6>
 80050c0:	4e4e      	ldr	r6, [pc, #312]	; (80051fc <HAL_GPIO_Init+0x1e0>)
 80050c2:	42b0      	cmp	r0, r6
 80050c4:	f000 808d 	beq.w	80051e2 <HAL_GPIO_Init+0x1c6>
 80050c8:	4e4d      	ldr	r6, [pc, #308]	; (8005200 <HAL_GPIO_Init+0x1e4>)
 80050ca:	42b0      	cmp	r0, r6
 80050cc:	bf0c      	ite	eq
 80050ce:	f04f 0e05 	moveq.w	lr, #5
 80050d2:	f04f 0e06 	movne.w	lr, #6
 80050d6:	fa0e f505 	lsl.w	r5, lr, r5
 80050da:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050dc:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050de:	4a49      	ldr	r2, [pc, #292]	; (8005204 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80050e0:	4948      	ldr	r1, [pc, #288]	; (8005204 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 80050e2:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80050e4:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050e8:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 80050ea:	bf54      	ite	pl
 80050ec:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80050ee:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 80050f2:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 80050f4:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050f6:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80050f8:	4942      	ldr	r1, [pc, #264]	; (8005204 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80050fa:	bf54      	ite	pl
 80050fc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80050fe:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8005102:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8005104:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005106:	4a3f      	ldr	r2, [pc, #252]	; (8005204 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005108:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 800510a:	bf54      	ite	pl
 800510c:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800510e:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8005112:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005114:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005116:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005118:	493a      	ldr	r1, [pc, #232]	; (8005204 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800511a:	bf54      	ite	pl
 800511c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800511e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8005122:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8005124:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005126:	fa34 f203 	lsrs.w	r2, r4, r3
 800512a:	f10c 0c02 	add.w	ip, ip, #2
 800512e:	d184      	bne.n	800503a <HAL_GPIO_Init+0x1e>
  }
}
 8005130:	b005      	add	sp, #20
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005136:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005138:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800513c:	f04f 0e03 	mov.w	lr, #3
 8005140:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005144:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005148:	fa06 f60c 	lsl.w	r6, r6, ip
 800514c:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 800514e:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005150:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8005154:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005158:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515c:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8005160:	409d      	lsls	r5, r3
 8005162:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8005166:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005168:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800516a:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800516e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005172:	fa05 f50c 	lsl.w	r5, r5, ip
 8005176:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800517c:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517e:	fa02 f20c 	lsl.w	r2, r2, ip
 8005182:	f47f af6c 	bne.w	800505e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8005186:	08dd      	lsrs	r5, r3, #3
 8005188:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800518c:	9501      	str	r5, [sp, #4]
 800518e:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005190:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005194:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005196:	f003 0e07 	and.w	lr, r3, #7
 800519a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800519e:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051a0:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051a4:	fa06 fe0e 	lsl.w	lr, r6, lr
 80051a8:	9e00      	ldr	r6, [sp, #0]
 80051aa:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80051ae:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051b0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80051b4:	6235      	str	r5, [r6, #32]
 80051b6:	e752      	b.n	800505e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051b8:	2103      	movs	r1, #3
 80051ba:	fa01 f10c 	lsl.w	r1, r1, ip
 80051be:	43c9      	mvns	r1, r1
 80051c0:	e7d2      	b.n	8005168 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051c2:	f04f 0e03 	mov.w	lr, #3
 80051c6:	fa0e f505 	lsl.w	r5, lr, r5
 80051ca:	4329      	orrs	r1, r5
 80051cc:	e786      	b.n	80050dc <HAL_GPIO_Init+0xc0>
 80051ce:	fa0b f505 	lsl.w	r5, fp, r5
 80051d2:	4329      	orrs	r1, r5
 80051d4:	e782      	b.n	80050dc <HAL_GPIO_Init+0xc0>
 80051d6:	f04f 0e02 	mov.w	lr, #2
 80051da:	fa0e f505 	lsl.w	r5, lr, r5
 80051de:	4329      	orrs	r1, r5
 80051e0:	e77c      	b.n	80050dc <HAL_GPIO_Init+0xc0>
 80051e2:	f04f 0e04 	mov.w	lr, #4
 80051e6:	fa0e f505 	lsl.w	r5, lr, r5
 80051ea:	4329      	orrs	r1, r5
 80051ec:	e776      	b.n	80050dc <HAL_GPIO_Init+0xc0>
 80051ee:	bf00      	nop
 80051f0:	48000400 	.word	0x48000400
 80051f4:	48000800 	.word	0x48000800
 80051f8:	48000c00 	.word	0x48000c00
 80051fc:	48001000 	.word	0x48001000
 8005200:	48001400 	.word	0x48001400
 8005204:	40010400 	.word	0x40010400
 8005208:	40021000 	.word	0x40021000

0800520c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800520c:	6903      	ldr	r3, [r0, #16]
 800520e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005210:	bf14      	ite	ne
 8005212:	2001      	movne	r0, #1
 8005214:	2000      	moveq	r0, #0
 8005216:	4770      	bx	lr

08005218 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005218:	b10a      	cbz	r2, 800521e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800521a:	6181      	str	r1, [r0, #24]
 800521c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800521e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop

08005224 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005224:	2800      	cmp	r0, #0
 8005226:	d07f      	beq.n	8005328 <HAL_OPAMP_Init+0x104>
{
 8005228:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800522a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800522e:	2b05      	cmp	r3, #5
{
 8005230:	b083      	sub	sp, #12
 8005232:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005234:	d057      	beq.n	80052e6 <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005236:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800523a:	2b02      	cmp	r3, #2
 800523c:	d053      	beq.n	80052e6 <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523e:	4b3b      	ldr	r3, [pc, #236]	; (800532c <HAL_OPAMP_Init+0x108>)
 8005240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	661a      	str	r2, [r3, #96]	; 0x60
 8005248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005252:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800525a:	b90b      	cbnz	r3, 8005260 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800525c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005260:	4620      	mov	r0, r4
 8005262:	f7fe f969 	bl	8003538 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005266:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005268:	6821      	ldr	r1, [r4, #0]
 800526a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800526c:	f023 0220 	bic.w	r2, r3, #32
 8005270:	2a40      	cmp	r2, #64	; 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8005272:	680a      	ldr	r2, [r1, #0]
 8005274:	f022 0210 	bic.w	r2, r2, #16
 8005278:	ea42 0200 	orr.w	r2, r2, r0
 800527c:	600a      	str	r2, [r1, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800527e:	d035      	beq.n	80052ec <HAL_OPAMP_Init+0xc8>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005280:	6808      	ldr	r0, [r1, #0]
 8005282:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <HAL_OPAMP_Init+0x10c>)
 8005284:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005286:	4002      	ands	r2, r0
 8005288:	6860      	ldr	r0, [r4, #4]
 800528a:	4303      	orrs	r3, r0
 800528c:	68e0      	ldr	r0, [r4, #12]
 800528e:	4303      	orrs	r3, r0
 8005290:	6920      	ldr	r0, [r4, #16]
 8005292:	4303      	orrs	r3, r0
 8005294:	432b      	orrs	r3, r5
 8005296:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005298:	7d20      	ldrb	r0, [r4, #20]
 800529a:	432b      	orrs	r3, r5
 800529c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800529e:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 80052a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80052a4:	2801      	cmp	r0, #1
 80052a6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80052aa:	bf0c      	ite	eq
 80052ac:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80052b0:	2000      	movne	r0, #0
 80052b2:	4313      	orrs	r3, r2
 80052b4:	4303      	orrs	r3, r0
 80052b6:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80052b8:	698b      	ldr	r3, [r1, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db09      	blt.n	80052d2 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80052be:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80052c2:	698a      	ldr	r2, [r1, #24]
 80052c4:	4303      	orrs	r3, r0
 80052c6:	6a20      	ldr	r0, [r4, #32]
 80052c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80052cc:	4303      	orrs	r3, r0
 80052ce:	4313      	orrs	r3, r2
 80052d0:	618b      	str	r3, [r1, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80052d2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80052d6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80052da:	bb13      	cbnz	r3, 8005322 <HAL_OPAMP_Init+0xfe>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80052dc:	2301      	movs	r3, #1
 80052de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 80052e2:	b003      	add	sp, #12
 80052e4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80052e6:	2001      	movs	r0, #1
}
 80052e8:	b003      	add	sp, #12
 80052ea:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 80052ec:	680a      	ldr	r2, [r1, #0]
 80052ee:	4810      	ldr	r0, [pc, #64]	; (8005330 <HAL_OPAMP_Init+0x10c>)
 80052f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80052f2:	4010      	ands	r0, r2
 80052f4:	6862      	ldr	r2, [r4, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	6922      	ldr	r2, [r4, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	432b      	orrs	r3, r5
 80052fe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005300:	7d22      	ldrb	r2, [r4, #20]
 8005302:	432b      	orrs	r3, r5
 8005304:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005306:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 800530a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800530c:	2a01      	cmp	r2, #1
 800530e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005312:	bf0c      	ite	eq
 8005314:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8005318:	2200      	movne	r2, #0
 800531a:	4303      	orrs	r3, r0
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
 8005320:	e7ca      	b.n	80052b8 <HAL_OPAMP_Init+0x94>
    return status;
 8005322:	2000      	movs	r0, #0
}
 8005324:	b003      	add	sp, #12
 8005326:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005328:	2001      	movs	r0, #1
}
 800532a:	4770      	bx	lr
 800532c:	40021000 	.word	0x40021000
 8005330:	e0003e11 	.word	0xe0003e11

08005334 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005334:	4603      	mov	r3, r0
 8005336:	b138      	cbz	r0, 8005348 <HAL_OPAMP_Start+0x14>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005338:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800533c:	2a05      	cmp	r2, #5
 800533e:	d003      	beq.n	8005348 <HAL_OPAMP_Start+0x14>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005340:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8005344:	2a01      	cmp	r2, #1
 8005346:	d001      	beq.n	800534c <HAL_OPAMP_Start+0x18>
    status = HAL_ERROR;
 8005348:	2001      	movs	r0, #1
    }


  }
  return status;
}
 800534a:	4770      	bx	lr
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800534c:	6801      	ldr	r1, [r0, #0]
 800534e:	680a      	ldr	r2, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005350:	f04f 0c04 	mov.w	ip, #4
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2000      	movs	r0, #0
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800535c:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop

08005364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005364:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005366:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005368:	b970      	cbnz	r0, 8005388 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005374:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005378:	d023      	beq.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800537a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800537e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005382:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005386:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005388:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800538c:	d009      	beq.n	80053a2 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800538e:	6813      	ldr	r3, [r2, #0]
}
 8005390:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 800539c:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053ac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053b0:	d02f      	beq.n	8005412 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80053b6:	2000      	movs	r0, #0
}
 80053b8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80053c0:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ca:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053cc:	4c22      	ldr	r4, [pc, #136]	; (8005458 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80053ce:	4823      	ldr	r0, [pc, #140]	; (800545c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053d0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80053d4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80053d8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	2132      	movs	r1, #50	; 0x32
 80053de:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053e4:	fba0 0303 	umull	r0, r3, r0, r3
 80053e8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ea:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ec:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053f0:	d506      	bpl.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80053f2:	e000      	b.n	80053f6 <HAL_PWREx_ControlVoltageScaling+0x92>
 80053f4:	b123      	cbz	r3, 8005400 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80053f6:	6951      	ldr	r1, [r2, #20]
 80053f8:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80053fa:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053fe:	d4f9      	bmi.n	80053f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8005406:	bf54      	ite	pl
 8005408:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800540a:	2003      	movmi	r0, #3
}
 800540c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005410:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005416:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800541a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800541c:	4c0e      	ldr	r4, [pc, #56]	; (8005458 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800541e:	480f      	ldr	r0, [pc, #60]	; (800545c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005420:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005424:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005428:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	2132      	movs	r1, #50	; 0x32
 800542e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005432:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005434:	fba0 0303 	umull	r0, r3, r0, r3
 8005438:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800543a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800543c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005440:	d5de      	bpl.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005442:	e001      	b.n	8005448 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0db      	beq.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005448:	6951      	ldr	r1, [r2, #20]
 800544a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800544c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005450:	d5d6      	bpl.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005452:	e7f7      	b.n	8005444 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8005454:	40007000 	.word	0x40007000
 8005458:	20000000 	.word	0x20000000
 800545c:	431bde83 	.word	0x431bde83

08005460 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005460:	2800      	cmp	r0, #0
 8005462:	f000 81c3 	beq.w	80057ec <HAL_RCC_OscConfig+0x38c>
{
 8005466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	6803      	ldr	r3, [r0, #0]
 800546c:	07d9      	lsls	r1, r3, #31
{
 800546e:	b082      	sub	sp, #8
 8005470:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005472:	d52d      	bpl.n	80054d0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005474:	49a6      	ldr	r1, [pc, #664]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 8005476:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005478:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800547e:	2a0c      	cmp	r2, #12
 8005480:	f000 810a 	beq.w	8005698 <HAL_RCC_OscConfig+0x238>
 8005484:	2a08      	cmp	r2, #8
 8005486:	f000 810c 	beq.w	80056a2 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800548a:	6863      	ldr	r3, [r4, #4]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	f000 8133 	beq.w	80056fa <HAL_RCC_OscConfig+0x29a>
 8005494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005498:	f000 819b 	beq.w	80057d2 <HAL_RCC_OscConfig+0x372>
 800549c:	4d9c      	ldr	r5, [pc, #624]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 800549e:	682a      	ldr	r2, [r5, #0]
 80054a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054a4:	602a      	str	r2, [r5, #0]
 80054a6:	682a      	ldr	r2, [r5, #0]
 80054a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054ac:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 8128 	bne.w	8005704 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fe faec 	bl	8003a90 <HAL_GetTick>
 80054b8:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ba:	e005      	b.n	80054c8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fe fae8 	bl	8003a90 <HAL_GetTick>
 80054c0:	1b80      	subs	r0, r0, r6
 80054c2:	2864      	cmp	r0, #100	; 0x64
 80054c4:	f200 8142 	bhi.w	800574c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	039f      	lsls	r7, r3, #14
 80054cc:	d4f6      	bmi.n	80054bc <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	079e      	lsls	r6, r3, #30
 80054d2:	d528      	bpl.n	8005526 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d4:	4a8e      	ldr	r2, [pc, #568]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80054d6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054da:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	f000 80ec 	beq.w	80056bc <HAL_RCC_OscConfig+0x25c>
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	f000 80ee 	beq.w	80056c6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ea:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ec:	4d88      	ldr	r5, [pc, #544]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 811d 	beq.w	800572e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fa:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fe fac8 	bl	8003a90 <HAL_GetTick>
 8005500:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005502:	e005      	b.n	8005510 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005504:	f7fe fac4 	bl	8003a90 <HAL_GetTick>
 8005508:	1b80      	subs	r0, r0, r6
 800550a:	2802      	cmp	r0, #2
 800550c:	f200 811e 	bhi.w	800574c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	0558      	lsls	r0, r3, #21
 8005514:	d5f6      	bpl.n	8005504 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	686b      	ldr	r3, [r5, #4]
 8005518:	6922      	ldr	r2, [r4, #16]
 800551a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800551e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005522:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	071a      	lsls	r2, r3, #28
 8005528:	d519      	bpl.n	800555e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552c:	4d78      	ldr	r5, [pc, #480]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 809e 	beq.w	8005670 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005534:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005540:	f7fe faa6 	bl	8003a90 <HAL_GetTick>
 8005544:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005546:	e005      	b.n	8005554 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005548:	f7fe faa2 	bl	8003a90 <HAL_GetTick>
 800554c:	1b80      	subs	r0, r0, r6
 800554e:	2802      	cmp	r0, #2
 8005550:	f200 80fc 	bhi.w	800574c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005554:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005558:	079f      	lsls	r7, r3, #30
 800555a:	d5f5      	bpl.n	8005548 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	0759      	lsls	r1, r3, #29
 8005560:	d541      	bpl.n	80055e6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005562:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 8005564:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005566:	00d2      	lsls	r2, r2, #3
 8005568:	f100 80f4 	bmi.w	8005754 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800556e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005572:	659a      	str	r2, [r3, #88]	; 0x58
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557a:	9301      	str	r3, [sp, #4]
 800557c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800557e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005580:	4e64      	ldr	r6, [pc, #400]	; (8005714 <HAL_RCC_OscConfig+0x2b4>)
 8005582:	6833      	ldr	r3, [r6, #0]
 8005584:	05df      	lsls	r7, r3, #23
 8005586:	f140 8113 	bpl.w	80057b0 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558a:	68a3      	ldr	r3, [r4, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	f000 80e3 	beq.w	8005758 <HAL_RCC_OscConfig+0x2f8>
 8005592:	2b05      	cmp	r3, #5
 8005594:	f000 8169 	beq.w	800586a <HAL_RCC_OscConfig+0x40a>
 8005598:	4e5d      	ldr	r6, [pc, #372]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 800559a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80055a6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80055aa:	f022 0204 	bic.w	r2, r2, #4
 80055ae:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 80d7 	bne.w	8005766 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fe fa6a 	bl	8003a90 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80055c0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c2:	e005      	b.n	80055d0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7fe fa64 	bl	8003a90 <HAL_GetTick>
 80055c8:	1bc0      	subs	r0, r0, r7
 80055ca:	4540      	cmp	r0, r8
 80055cc:	f200 80be 	bhi.w	800574c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055d0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80055d4:	079a      	lsls	r2, r3, #30
 80055d6:	d4f5      	bmi.n	80055c4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055d8:	b125      	cbz	r5, 80055e4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055da:	4a4d      	ldr	r2, [pc, #308]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80055dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	069b      	lsls	r3, r3, #26
 80055e8:	d518      	bpl.n	800561c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055ea:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055ec:	4d48      	ldr	r5, [pc, #288]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80ca 	beq.w	8005788 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80055f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fe fa46 	bl	8003a90 <HAL_GetTick>
 8005604:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005606:	e005      	b.n	8005614 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005608:	f7fe fa42 	bl	8003a90 <HAL_GetTick>
 800560c:	1b80      	subs	r0, r0, r6
 800560e:	2802      	cmp	r0, #2
 8005610:	f200 809c 	bhi.w	800574c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005614:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005618:	079f      	lsls	r7, r3, #30
 800561a:	d5f5      	bpl.n	8005608 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800561c:	69e0      	ldr	r0, [r4, #28]
 800561e:	b318      	cbz	r0, 8005668 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005620:	4d3b      	ldr	r5, [pc, #236]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 8005622:	68ab      	ldr	r3, [r5, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b0c      	cmp	r3, #12
 800562a:	f000 812c 	beq.w	8005886 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005630:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005636:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005638:	f000 80da 	beq.w	80057f0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800563c:	68eb      	ldr	r3, [r5, #12]
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005644:	68eb      	ldr	r3, [r5, #12]
 8005646:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800564a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fe fa1e 	bl	8003a90 <HAL_GetTick>
 8005654:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005656:	e004      	b.n	8005662 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005658:	f7fe fa1a 	bl	8003a90 <HAL_GetTick>
 800565c:	1b00      	subs	r0, r0, r4
 800565e:	2802      	cmp	r0, #2
 8005660:	d874      	bhi.n	800574c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	d4f7      	bmi.n	8005658 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005668:	2000      	movs	r0, #0
}
 800566a:	b002      	add	sp, #8
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005670:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800567c:	f7fe fa08 	bl	8003a90 <HAL_GetTick>
 8005680:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005682:	e004      	b.n	800568e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005684:	f7fe fa04 	bl	8003a90 <HAL_GetTick>
 8005688:	1b80      	subs	r0, r0, r6
 800568a:	2802      	cmp	r0, #2
 800568c:	d85e      	bhi.n	800574c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800568e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005692:	0798      	lsls	r0, r3, #30
 8005694:	d4f6      	bmi.n	8005684 <HAL_RCC_OscConfig+0x224>
 8005696:	e761      	b.n	800555c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005698:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800569c:	2903      	cmp	r1, #3
 800569e:	f47f aef4 	bne.w	800548a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	0392      	lsls	r2, r2, #14
 80056a8:	f57f af12 	bpl.w	80054d0 <HAL_RCC_OscConfig+0x70>
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	f47f af0e 	bne.w	80054d0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80056b4:	2001      	movs	r0, #1
}
 80056b6:	b002      	add	sp, #8
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056bc:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056c0:	2a02      	cmp	r2, #2
 80056c2:	f47f af12 	bne.w	80054ea <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	055d      	lsls	r5, r3, #21
 80056cc:	d502      	bpl.n	80056d4 <HAL_RCC_OscConfig+0x274>
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0ef      	beq.n	80056b4 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d4:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80056d6:	6920      	ldr	r0, [r4, #16]
 80056d8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056da:	490f      	ldr	r1, [pc, #60]	; (8005718 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80056e4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056e6:	6808      	ldr	r0, [r1, #0]
 80056e8:	f7fe f990 	bl	8003a0c <HAL_InitTick>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d1e1      	bne.n	80056b4 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	071a      	lsls	r2, r3, #28
 80056f4:	f57f af33 	bpl.w	800555e <HAL_RCC_OscConfig+0xfe>
 80056f8:	e717      	b.n	800552a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
 80056fc:	6813      	ldr	r3, [r2, #0]
 80056fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005702:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005704:	f7fe f9c4 	bl	8003a90 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005708:	4e01      	ldr	r6, [pc, #4]	; (8005710 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800570a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570c:	e00b      	b.n	8005726 <HAL_RCC_OscConfig+0x2c6>
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	40007000 	.word	0x40007000
 8005718:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800571c:	f7fe f9b8 	bl	8003a90 <HAL_GetTick>
 8005720:	1b40      	subs	r0, r0, r5
 8005722:	2864      	cmp	r0, #100	; 0x64
 8005724:	d812      	bhi.n	800574c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005726:	6833      	ldr	r3, [r6, #0]
 8005728:	039b      	lsls	r3, r3, #14
 800572a:	d5f7      	bpl.n	800571c <HAL_RCC_OscConfig+0x2bc>
 800572c:	e6cf      	b.n	80054ce <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800572e:	682b      	ldr	r3, [r5, #0]
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005736:	f7fe f9ab 	bl	8003a90 <HAL_GetTick>
 800573a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	0559      	lsls	r1, r3, #21
 8005740:	d5d6      	bpl.n	80056f0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005742:	f7fe f9a5 	bl	8003a90 <HAL_GetTick>
 8005746:	1b80      	subs	r0, r0, r6
 8005748:	2802      	cmp	r0, #2
 800574a:	d9f7      	bls.n	800573c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 800574c:	2003      	movs	r0, #3
}
 800574e:	b002      	add	sp, #8
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005754:	2500      	movs	r5, #0
 8005756:	e713      	b.n	8005580 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005758:	4a65      	ldr	r2, [pc, #404]	; (80058f0 <HAL_RCC_OscConfig+0x490>)
 800575a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005766:	f7fe f993 	bl	8003a90 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576a:	4f61      	ldr	r7, [pc, #388]	; (80058f0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800576c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005772:	e004      	b.n	800577e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fe f98c 	bl	8003a90 <HAL_GetTick>
 8005778:	1b80      	subs	r0, r0, r6
 800577a:	4540      	cmp	r0, r8
 800577c:	d8e6      	bhi.n	800574c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005782:	0799      	lsls	r1, r3, #30
 8005784:	d5f6      	bpl.n	8005774 <HAL_RCC_OscConfig+0x314>
 8005786:	e727      	b.n	80055d8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005788:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005794:	f7fe f97c 	bl	8003a90 <HAL_GetTick>
 8005798:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800579a:	e004      	b.n	80057a6 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800579c:	f7fe f978 	bl	8003a90 <HAL_GetTick>
 80057a0:	1b80      	subs	r0, r0, r6
 80057a2:	2802      	cmp	r0, #2
 80057a4:	d8d2      	bhi.n	800574c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057a6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80057aa:	0798      	lsls	r0, r3, #30
 80057ac:	d4f6      	bmi.n	800579c <HAL_RCC_OscConfig+0x33c>
 80057ae:	e735      	b.n	800561c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b0:	6833      	ldr	r3, [r6, #0]
 80057b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80057b8:	f7fe f96a 	bl	8003a90 <HAL_GetTick>
 80057bc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057be:	6833      	ldr	r3, [r6, #0]
 80057c0:	05d8      	lsls	r0, r3, #23
 80057c2:	f53f aee2 	bmi.w	800558a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7fe f963 	bl	8003a90 <HAL_GetTick>
 80057ca:	1bc0      	subs	r0, r0, r7
 80057cc:	2802      	cmp	r0, #2
 80057ce:	d9f6      	bls.n	80057be <HAL_RCC_OscConfig+0x35e>
 80057d0:	e7bc      	b.n	800574c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057d6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057e8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ea:	e78b      	b.n	8005704 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80057ec:	2001      	movs	r0, #1
}
 80057ee:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80057f0:	f7fe f94e 	bl	8003a90 <HAL_GetTick>
 80057f4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f6:	e004      	b.n	8005802 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fe f94a 	bl	8003a90 <HAL_GetTick>
 80057fc:	1b80      	subs	r0, r0, r6
 80057fe:	2802      	cmp	r0, #2
 8005800:	d8a4      	bhi.n	800574c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	0199      	lsls	r1, r3, #6
 8005806:	d4f7      	bmi.n	80057f8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005808:	68e9      	ldr	r1, [r5, #12]
 800580a:	4b3a      	ldr	r3, [pc, #232]	; (80058f4 <HAL_RCC_OscConfig+0x494>)
 800580c:	6a22      	ldr	r2, [r4, #32]
 800580e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005810:	4e37      	ldr	r6, [pc, #220]	; (80058f0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005812:	400b      	ands	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800581a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800581e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005822:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005826:	3801      	subs	r0, #1
 8005828:	0849      	lsrs	r1, r1, #1
 800582a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800582e:	3901      	subs	r1, #1
 8005830:	0852      	lsrs	r2, r2, #1
 8005832:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005836:	3a01      	subs	r2, #1
 8005838:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800583c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800583e:	682b      	ldr	r3, [r5, #0]
 8005840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005844:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005846:	68eb      	ldr	r3, [r5, #12]
 8005848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800584c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800584e:	f7fe f91f 	bl	8003a90 <HAL_GetTick>
 8005852:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005854:	e005      	b.n	8005862 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005856:	f7fe f91b 	bl	8003a90 <HAL_GetTick>
 800585a:	1b00      	subs	r0, r0, r4
 800585c:	2802      	cmp	r0, #2
 800585e:	f63f af75 	bhi.w	800574c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005862:	6833      	ldr	r3, [r6, #0]
 8005864:	019a      	lsls	r2, r3, #6
 8005866:	d5f6      	bpl.n	8005856 <HAL_RCC_OscConfig+0x3f6>
 8005868:	e6fe      	b.n	8005668 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800586a:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <HAL_RCC_OscConfig+0x490>)
 800586c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005870:	f042 0204 	orr.w	r2, r2, #4
 8005874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005878:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005884:	e76f      	b.n	8005766 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005886:	2801      	cmp	r0, #1
 8005888:	f43f aeef 	beq.w	800566a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800588c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588e:	6a22      	ldr	r2, [r4, #32]
 8005890:	f003 0103 	and.w	r1, r3, #3
 8005894:	4291      	cmp	r1, r2
 8005896:	f47f af0d 	bne.w	80056b4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800589a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800589c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058a0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80058a6:	f47f af05 	bne.w	80056b4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058b0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80058b4:	f47f aefe 	bne.w	80056b4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80058ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058be:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80058c2:	f47f aef7 	bne.w	80056b4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80058c8:	0852      	lsrs	r2, r2, #1
 80058ca:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80058ce:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058d0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80058d4:	f47f aeee 	bne.w	80056b4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80058da:	0852      	lsrs	r2, r2, #1
 80058dc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80058e0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80058e6:	bf14      	ite	ne
 80058e8:	2001      	movne	r0, #1
 80058ea:	2000      	moveq	r0, #0
 80058ec:	e6bd      	b.n	800566a <HAL_RCC_OscConfig+0x20a>
 80058ee:	bf00      	nop
 80058f0:	40021000 	.word	0x40021000
 80058f4:	019f800c 	.word	0x019f800c

080058f8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058f8:	4b18      	ldr	r3, [pc, #96]	; (800595c <HAL_RCC_GetSysClockFreq+0x64>)
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	f002 020c 	and.w	r2, r2, #12
 8005900:	2a04      	cmp	r2, #4
 8005902:	d027      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	f002 020c 	and.w	r2, r2, #12
 800590a:	2a08      	cmp	r2, #8
 800590c:	d024      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	f002 020c 	and.w	r2, r2, #12
 8005914:	2a0c      	cmp	r2, #12
 8005916:	d001      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005918:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800591a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800591c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800591e:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005920:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005924:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005926:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800592a:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800592e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005930:	bf0c      	ite	eq
 8005932:	4b0b      	ldreq	r3, [pc, #44]	; (8005960 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005934:	4b0b      	ldrne	r3, [pc, #44]	; (8005964 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005936:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800593a:	4b08      	ldr	r3, [pc, #32]	; (800595c <HAL_RCC_GetSysClockFreq+0x64>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005942:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005946:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005948:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800594c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800594e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005952:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005954:	4803      	ldr	r0, [pc, #12]	; (8005964 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005956:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <HAL_RCC_GetSysClockFreq+0x68>)
 800595a:	4770      	bx	lr
 800595c:	40021000 	.word	0x40021000
 8005960:	007a1200 	.word	0x007a1200
 8005964:	00f42400 	.word	0x00f42400

08005968 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005968:	2800      	cmp	r0, #0
 800596a:	f000 80ee 	beq.w	8005b4a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800596e:	4a7f      	ldr	r2, [pc, #508]	; (8005b6c <HAL_RCC_ClockConfig+0x204>)
{
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	6813      	ldr	r3, [r2, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	428b      	cmp	r3, r1
 800597c:	460d      	mov	r5, r1
 800597e:	4604      	mov	r4, r0
 8005980:	d20c      	bcs.n	800599c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	f023 030f 	bic.w	r3, r3, #15
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	428b      	cmp	r3, r1
 8005994:	d002      	beq.n	800599c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005996:	2001      	movs	r0, #1
}
 8005998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07df      	lsls	r7, r3, #31
 80059a0:	d563      	bpl.n	8005a6a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a2:	6862      	ldr	r2, [r4, #4]
 80059a4:	2a03      	cmp	r2, #3
 80059a6:	f000 809a 	beq.w	8005ade <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059aa:	4b71      	ldr	r3, [pc, #452]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ac:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ae:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b0:	f000 8091 	beq.w	8005ad6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b4:	055b      	lsls	r3, r3, #21
 80059b6:	d5ee      	bpl.n	8005996 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059b8:	f7ff ff9e 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80059bc:	4b6d      	ldr	r3, [pc, #436]	; (8005b74 <HAL_RCC_ClockConfig+0x20c>)
 80059be:	4298      	cmp	r0, r3
 80059c0:	f200 80c5 	bhi.w	8005b4e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059c4:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059c6:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4e69      	ldr	r6, [pc, #420]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 80059cc:	68b3      	ldr	r3, [r6, #8]
 80059ce:	f023 0303 	bic.w	r3, r3, #3
 80059d2:	431a      	orrs	r2, r3
 80059d4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80059d6:	f7fe f85b 	bl	8003a90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059da:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80059de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e0:	e004      	b.n	80059ec <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e2:	f7fe f855 	bl	8003a90 <HAL_GetTick>
 80059e6:	1bc0      	subs	r0, r0, r7
 80059e8:	4540      	cmp	r0, r8
 80059ea:	d871      	bhi.n	8005ad0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ec:	68b3      	ldr	r3, [r6, #8]
 80059ee:	6862      	ldr	r2, [r4, #4]
 80059f0:	f003 030c 	and.w	r3, r3, #12
 80059f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80059f8:	d1f3      	bne.n	80059e2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	079f      	lsls	r7, r3, #30
 80059fe:	d436      	bmi.n	8005a6e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8005a00:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8005a04:	d103      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a06:	68b3      	ldr	r3, [r6, #8]
 8005a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a0e:	4e57      	ldr	r6, [pc, #348]	; (8005b6c <HAL_RCC_ClockConfig+0x204>)
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	42ab      	cmp	r3, r5
 8005a18:	d846      	bhi.n	8005aa8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	075a      	lsls	r2, r3, #29
 8005a1e:	d506      	bpl.n	8005a2e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a20:	4953      	ldr	r1, [pc, #332]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005a22:	68e0      	ldr	r0, [r4, #12]
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a2a:	4302      	orrs	r2, r0
 8005a2c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2e:	071b      	lsls	r3, r3, #28
 8005a30:	d507      	bpl.n	8005a42 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a32:	4a4f      	ldr	r2, [pc, #316]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005a34:	6921      	ldr	r1, [r4, #16]
 8005a36:	6893      	ldr	r3, [r2, #8]
 8005a38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005a3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005a40:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a42:	f7ff ff59 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 8005a46:	4a4a      	ldr	r2, [pc, #296]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005a48:	4c4b      	ldr	r4, [pc, #300]	; (8005b78 <HAL_RCC_ClockConfig+0x210>)
 8005a4a:	6892      	ldr	r2, [r2, #8]
 8005a4c:	494b      	ldr	r1, [pc, #300]	; (8005b7c <HAL_RCC_ClockConfig+0x214>)
 8005a4e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005a52:	4603      	mov	r3, r0
 8005a54:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005a56:	484a      	ldr	r0, [pc, #296]	; (8005b80 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a58:	f002 021f 	and.w	r2, r2, #31
 8005a5c:	40d3      	lsrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005a60:	6800      	ldr	r0, [r0, #0]
}
 8005a62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005a66:	f7fd bfd1 	b.w	8003a0c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6a:	079e      	lsls	r6, r3, #30
 8005a6c:	d5cf      	bpl.n	8005a0e <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6e:	0758      	lsls	r0, r3, #29
 8005a70:	d504      	bpl.n	8005a7c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a72:	493f      	ldr	r1, [pc, #252]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005a7a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	0719      	lsls	r1, r3, #28
 8005a7e:	d506      	bpl.n	8005a8e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a80:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005a82:	6893      	ldr	r3, [r2, #8]
 8005a84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a8c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8e:	4a38      	ldr	r2, [pc, #224]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005a90:	68a1      	ldr	r1, [r4, #8]
 8005a92:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a94:	4e35      	ldr	r6, [pc, #212]	; (8005b6c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9e:	6833      	ldr	r3, [r6, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	42ab      	cmp	r3, r5
 8005aa6:	d9b8      	bls.n	8005a1a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa8:	6833      	ldr	r3, [r6, #0]
 8005aaa:	f023 030f 	bic.w	r3, r3, #15
 8005aae:	432b      	orrs	r3, r5
 8005ab0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005ab2:	f7fd ffed 	bl	8003a90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005aba:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	42ab      	cmp	r3, r5
 8005ac4:	d0a9      	beq.n	8005a1a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac6:	f7fd ffe3 	bl	8003a90 <HAL_GetTick>
 8005aca:	1bc0      	subs	r0, r0, r7
 8005acc:	4540      	cmp	r0, r8
 8005ace:	d9f5      	bls.n	8005abc <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005ad0:	2003      	movs	r0, #3
}
 8005ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ad6:	039a      	lsls	r2, r3, #14
 8005ad8:	f53f af6e 	bmi.w	80059b8 <HAL_RCC_ClockConfig+0x50>
 8005adc:	e75b      	b.n	8005996 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ade:	4924      	ldr	r1, [pc, #144]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005ae0:	6808      	ldr	r0, [r1, #0]
 8005ae2:	0180      	lsls	r0, r0, #6
 8005ae4:	f57f af57 	bpl.w	8005996 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ae8:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aea:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aec:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8005aee:	4f21      	ldr	r7, [pc, #132]	; (8005b74 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005af0:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8005af4:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005af6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005afa:	bf0c      	ite	eq
 8005afc:	4e21      	ldreq	r6, [pc, #132]	; (8005b84 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005afe:	4e22      	ldrne	r6, [pc, #136]	; (8005b88 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b00:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b02:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b06:	4e1a      	ldr	r6, [pc, #104]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b08:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005b0c:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b10:	68f0      	ldr	r0, [r6, #12]
 8005b12:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005b16:	3001      	adds	r0, #1
 8005b18:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005b1a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005b1e:	42b9      	cmp	r1, r7
 8005b20:	d920      	bls.n	8005b64 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b22:	68b1      	ldr	r1, [r6, #8]
 8005b24:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005b28:	d005      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x1ce>
 8005b2a:	f013 0902 	ands.w	r9, r3, #2
 8005b2e:	f43f af4c 	beq.w	80059ca <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	b9b3      	cbnz	r3, 8005b64 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b36:	490e      	ldr	r1, [pc, #56]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005b38:	688b      	ldr	r3, [r1, #8]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b42:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b44:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005b48:	e73f      	b.n	80059ca <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8005b4a:	2001      	movs	r0, #1
}
 8005b4c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b4e:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <HAL_RCC_ClockConfig+0x208>)
 8005b50:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b52:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5a:	ea43 0309 	orr.w	r3, r3, r9
 8005b5e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b60:	6862      	ldr	r2, [r4, #4]
 8005b62:	e732      	b.n	80059ca <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b64:	f04f 0900 	mov.w	r9, #0
 8005b68:	e72f      	b.n	80059ca <HAL_RCC_ClockConfig+0x62>
 8005b6a:	bf00      	nop
 8005b6c:	40022000 	.word	0x40022000
 8005b70:	40021000 	.word	0x40021000
 8005b74:	04c4b400 	.word	0x04c4b400
 8005b78:	0800b468 	.word	0x0800b468
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	20000008 	.word	0x20000008
 8005b84:	007a1200 	.word	0x007a1200
 8005b88:	00f42400 	.word	0x00f42400

08005b8c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005b90:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005b92:	4906      	ldr	r1, [pc, #24]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b94:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005b98:	6808      	ldr	r0, [r1, #0]
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	f003 031f 	and.w	r3, r3, #31
}
 8005ba0:	40d8      	lsrs	r0, r3
 8005ba2:	4770      	bx	lr
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	0800b478 	.word	0x0800b478
 8005bac:	20000000 	.word	0x20000000

08005bb0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005bb2:	4a06      	ldr	r2, [pc, #24]	; (8005bcc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005bb6:	4906      	ldr	r1, [pc, #24]	; (8005bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bb8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005bbc:	6808      	ldr	r0, [r1, #0]
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
}
 8005bc4:	40d8      	lsrs	r0, r3
 8005bc6:	4770      	bx	lr
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	0800b478 	.word	0x0800b478
 8005bd0:	20000000 	.word	0x20000000

08005bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd8:	6803      	ldr	r3, [r0, #0]
{
 8005bda:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bdc:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005be0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be2:	d056      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be4:	4b9f      	ldr	r3, [pc, #636]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005be8:	00d5      	lsls	r5, r2, #3
 8005bea:	f140 810c 	bpl.w	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005bee:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf0:	4d9d      	ldr	r5, [pc, #628]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bfa:	f7fd ff49 	bl	8003a90 <HAL_GetTick>
 8005bfe:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c00:	e005      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c02:	f7fd ff45 	bl	8003a90 <HAL_GetTick>
 8005c06:	1b83      	subs	r3, r0, r6
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	f200 8107 	bhi.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	05d8      	lsls	r0, r3, #23
 8005c12:	d5f6      	bpl.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c14:	4d93      	ldr	r5, [pc, #588]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c16:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005c1e:	d027      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005c20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d025      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c26:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c2a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c32:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c36:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c42:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c46:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005c48:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c4c:	f140 8108 	bpl.w	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fd ff1e 	bl	8003a90 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005c58:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5a:	e005      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fd ff18 	bl	8003a90 <HAL_GetTick>
 8005c60:	1b80      	subs	r0, r0, r6
 8005c62:	4540      	cmp	r0, r8
 8005c64:	f200 80da 	bhi.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c68:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005c6c:	079b      	lsls	r3, r3, #30
 8005c6e:	d5f5      	bpl.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c72:	497c      	ldr	r1, [pc, #496]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c82:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c84:	b127      	cbz	r7, 8005c90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c86:	4a77      	ldr	r2, [pc, #476]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c88:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	07de      	lsls	r6, r3, #31
 8005c94:	d508      	bpl.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c96:	4973      	ldr	r1, [pc, #460]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c98:	6865      	ldr	r5, [r4, #4]
 8005c9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005c9e:	f022 0203 	bic.w	r2, r2, #3
 8005ca2:	432a      	orrs	r2, r5
 8005ca4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ca8:	079d      	lsls	r5, r3, #30
 8005caa:	d508      	bpl.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cac:	496d      	ldr	r1, [pc, #436]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cae:	68a5      	ldr	r5, [r4, #8]
 8005cb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cb4:	f022 020c 	bic.w	r2, r2, #12
 8005cb8:	432a      	orrs	r2, r5
 8005cba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cbe:	0759      	lsls	r1, r3, #29
 8005cc0:	d508      	bpl.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc2:	4968      	ldr	r1, [pc, #416]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cc4:	68e5      	ldr	r5, [r4, #12]
 8005cc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cca:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005cce:	432a      	orrs	r2, r5
 8005cd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cd4:	071a      	lsls	r2, r3, #28
 8005cd6:	d508      	bpl.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cd8:	4962      	ldr	r1, [pc, #392]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cda:	6925      	ldr	r5, [r4, #16]
 8005cdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ce0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ce4:	432a      	orrs	r2, r5
 8005ce6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cea:	069f      	lsls	r7, r3, #26
 8005cec:	d508      	bpl.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cee:	495d      	ldr	r1, [pc, #372]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cf0:	6965      	ldr	r5, [r4, #20]
 8005cf2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cfa:	432a      	orrs	r2, r5
 8005cfc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d00:	065e      	lsls	r6, r3, #25
 8005d02:	d508      	bpl.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d04:	4957      	ldr	r1, [pc, #348]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d06:	69a5      	ldr	r5, [r4, #24]
 8005d08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005d10:	432a      	orrs	r2, r5
 8005d12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d16:	061d      	lsls	r5, r3, #24
 8005d18:	d508      	bpl.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d1a:	4952      	ldr	r1, [pc, #328]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d1c:	69e5      	ldr	r5, [r4, #28]
 8005d1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d26:	432a      	orrs	r2, r5
 8005d28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d2c:	05d9      	lsls	r1, r3, #23
 8005d2e:	d508      	bpl.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d30:	494c      	ldr	r1, [pc, #304]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d32:	6a25      	ldr	r5, [r4, #32]
 8005d34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005d3c:	432a      	orrs	r2, r5
 8005d3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d42:	059a      	lsls	r2, r3, #22
 8005d44:	d508      	bpl.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d46:	4947      	ldr	r1, [pc, #284]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d4e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005d52:	432a      	orrs	r2, r5
 8005d54:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d58:	055f      	lsls	r7, r3, #21
 8005d5a:	d50b      	bpl.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d5c:	4941      	ldr	r1, [pc, #260]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d5e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005d60:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005d68:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d6a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d72:	d055      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d74:	051e      	lsls	r6, r3, #20
 8005d76:	d50b      	bpl.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d78:	493a      	ldr	r1, [pc, #232]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d7a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005d7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d80:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005d84:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d86:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d8e:	d04c      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d90:	04dd      	lsls	r5, r3, #19
 8005d92:	d50b      	bpl.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d94:	4933      	ldr	r1, [pc, #204]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d96:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005d98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005da0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005da2:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005da6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005daa:	d043      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dac:	0499      	lsls	r1, r3, #18
 8005dae:	d50b      	bpl.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db0:	492c      	ldr	r1, [pc, #176]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005db2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005db4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005db8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dbc:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dbe:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dc2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dc6:	d03a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dc8:	045a      	lsls	r2, r3, #17
 8005dca:	d50b      	bpl.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dcc:	4925      	ldr	r1, [pc, #148]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005dd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dd4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dd8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dda:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dde:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005de2:	d031      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005de4:	041b      	lsls	r3, r3, #16
 8005de6:	d50b      	bpl.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005de8:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005dec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005df0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005df4:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005df6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005dfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005dfe:	d028      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8005e00:	b002      	add	sp, #8
 8005e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e0c:	659a      	str	r2, [r3, #88]	; 0x58
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e18:	2701      	movs	r7, #1
 8005e1a:	e6e9      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005e1c:	2003      	movs	r0, #3
 8005e1e:	e731      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e20:	68ca      	ldr	r2, [r1, #12]
 8005e22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e26:	60ca      	str	r2, [r1, #12]
 8005e28:	e7a4      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e2a:	68ca      	ldr	r2, [r1, #12]
 8005e2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e30:	60ca      	str	r2, [r1, #12]
 8005e32:	e7ad      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e34:	68ca      	ldr	r2, [r1, #12]
 8005e36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e3a:	60ca      	str	r2, [r1, #12]
 8005e3c:	e7b6      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e3e:	68ca      	ldr	r2, [r1, #12]
 8005e40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e44:	60ca      	str	r2, [r1, #12]
 8005e46:	e7bf      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e48:	68ca      	ldr	r2, [r1, #12]
 8005e4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e4e:	60ca      	str	r2, [r1, #12]
 8005e50:	e7c8      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e52:	68d3      	ldr	r3, [r2, #12]
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	60d3      	str	r3, [r2, #12]
}
 8005e5a:	b002      	add	sp, #8
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e60:	4613      	mov	r3, r2
 8005e62:	e706      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40007000 	.word	0x40007000

08005e6c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e70:	b083      	sub	sp, #12
 8005e72:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e74:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e76:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8005e78:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e80:	f7fd fe06 	bl	8003a90 <HAL_GetTick>
 8005e84:	44a8      	add	r8, r5
 8005e86:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005e8a:	f7fd fe01 	bl	8003a90 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e90:	f8d6 9000 	ldr.w	r9, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005e9e:	0d1b      	lsrs	r3, r3, #20
 8005ea0:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8005ea4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ea6:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ea8:	464a      	mov	r2, r9
 8005eaa:	e001      	b.n	8005eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8005eac:	1c6b      	adds	r3, r5, #1
 8005eae:	d10e      	bne.n	8005ece <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  while ((hspi->Instance->SR & Fifo) != State)
 8005eb0:	6893      	ldr	r3, [r2, #8]
 8005eb2:	4023      	ands	r3, r4
 8005eb4:	d01d      	beq.n	8005ef2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005eb6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8005eba:	d1f7      	bne.n	8005eac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      tmpreg8 = *ptmpreg8;
 8005ebc:	f899 300c 	ldrb.w	r3, [r9, #12]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005ec6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8005eca:	1c6b      	adds	r3, r5, #1
 8005ecc:	d0f0      	beq.n	8005eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ece:	f7fd fddf 	bl	8003a90 <HAL_GetTick>
 8005ed2:	eba0 0008 	sub.w	r0, r0, r8
 8005ed6:	42b8      	cmp	r0, r7
 8005ed8:	d20f      	bcs.n	8005efa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eda:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005edc:	6832      	ldr	r2, [r6, #0]
      {
        tmp_timeout = 0U;
 8005ede:	2b00      	cmp	r3, #0
      }
      count--;
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ee6:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ee8:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 8005eea:	bf08      	it	eq
 8005eec:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8005eee:	4023      	ands	r3, r4
 8005ef0:	d1e1      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
    }
  }

  return HAL_OK;
 8005ef2:	4618      	mov	r0, r3
}
 8005ef4:	b003      	add	sp, #12
 8005ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005efa:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005efe:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f00:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f08:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f0a:	d014      	beq.n	8005f36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xca>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f0c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005f0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005f12:	d007      	beq.n	8005f24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8005f14:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005f16:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005f18:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005f1c:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005f20:	2003      	movs	r0, #3
 8005f22:	e7e7      	b.n	8005ef4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e7ee      	b.n	8005f14 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f36:	68b2      	ldr	r2, [r6, #8]
 8005f38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005f3c:	d002      	beq.n	8005f44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f3e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005f42:	d1e3      	bne.n	8005f0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e7de      	b.n	8005f0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
 8005f4e:	bf00      	nop
 8005f50:	20000000 	.word	0x20000000

08005f54 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f56:	b083      	sub	sp, #12
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4615      	mov	r5, r2
 8005f5c:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f5e:	f7fd fd97 	bl	8003a90 <HAL_GetTick>
 8005f62:	4425      	add	r5, r4
 8005f64:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005f66:	f7fd fd93 	bl	8003a90 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f6a:	4b25      	ldr	r3, [pc, #148]	; (8006000 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005f72:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8005f76:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f78:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7a:	6832      	ldr	r2, [r6, #0]
 8005f7c:	e001      	b.n	8005f82 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	1c63      	adds	r3, r4, #1
 8005f80:	d106      	bne.n	8005f90 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f82:	6893      	ldr	r3, [r2, #8]
 8005f84:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005f88:	d1f9      	bne.n	8005f7e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
  return HAL_OK;
 8005f8a:	4618      	mov	r0, r3
}
 8005f8c:	b003      	add	sp, #12
 8005f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f90:	f7fd fd7e 	bl	8003a90 <HAL_GetTick>
 8005f94:	1bc0      	subs	r0, r0, r7
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	d208      	bcs.n	8005fac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 8005f9a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005f9c:	2b00      	cmp	r3, #0
      count--;
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005fa4:	bf08      	it	eq
 8005fa6:	2500      	moveq	r5, #0
      count--;
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	e7e6      	b.n	8005f7a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fac:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fb0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fbc:	d014      	beq.n	8005fe8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fbe:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005fc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005fc4:	d007      	beq.n	8005fd6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 8005fc6:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005fc8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005fca:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005fce:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005fd2:	2003      	movs	r0, #3
 8005fd4:	e7da      	b.n	8005f8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e7ee      	b.n	8005fc6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe8:	68b2      	ldr	r2, [r6, #8]
 8005fea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005fee:	d002      	beq.n	8005ff6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005ff4:	d1e3      	bne.n	8005fbe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e7de      	b.n	8005fbe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8006000:	20000000 	.word	0x20000000

08006004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006006:	4613      	mov	r3, r2
{
 8006008:	460d      	mov	r5, r1
 800600a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800600c:	460a      	mov	r2, r1
 800600e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8006012:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006014:	f7ff ff2a 	bl	8005e6c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006018:	b970      	cbnz	r0, 8006038 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800601a:	4632      	mov	r2, r6
 800601c:	4629      	mov	r1, r5
 800601e:	4620      	mov	r0, r4
 8006020:	f7ff ff98 	bl	8005f54 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006024:	b940      	cbnz	r0, 8006038 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006026:	4633      	mov	r3, r6
 8006028:	462a      	mov	r2, r5
 800602a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff ff1c 	bl	8005e6c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006034:	b900      	cbnz	r0, 8006038 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006036:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006038:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800603a:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 800603e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006040:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006042:	bd70      	pop	{r4, r5, r6, pc}

08006044 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006044:	2800      	cmp	r0, #0
 8006046:	d077      	beq.n	8006138 <HAL_SPI_Init+0xf4>
{
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800604c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800604e:	4604      	mov	r4, r0
 8006050:	2e00      	cmp	r6, #0
 8006052:	d058      	beq.n	8006106 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006054:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006056:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800605a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800605e:	2200      	movs	r2, #0
 8006060:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006066:	2b00      	cmp	r3, #0
 8006068:	d059      	beq.n	800611e <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 800606a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800606c:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800606e:	2302      	movs	r3, #2
 8006070:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006074:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006076:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800607a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800607e:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006080:	d947      	bls.n	8006112 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006082:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8006086:	d159      	bne.n	800613c <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800608a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800608c:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8006090:	68a3      	ldr	r3, [r4, #8]
 8006092:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006094:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006098:	6862      	ldr	r2, [r4, #4]
 800609a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800609e:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80060a2:	431a      	orrs	r2, r3
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	431a      	orrs	r2, r3
 80060ac:	6963      	ldr	r3, [r4, #20]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	f006 0c10 	and.w	ip, r6, #16
 80060be:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c2:	69a6      	ldr	r6, [r4, #24]
 80060c4:	69e3      	ldr	r3, [r4, #28]
 80060c6:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80060ca:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80060d4:	ea43 0308 	orr.w	r3, r3, r8
 80060d8:	433b      	orrs	r3, r7
 80060da:	432b      	orrs	r3, r5
 80060dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060de:	0c33      	lsrs	r3, r6, #16
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	ea4e 0303 	orr.w	r3, lr, r3
 80060e8:	ea43 030c 	orr.w	r3, r3, ip
 80060ec:	4303      	orrs	r3, r0
 80060ee:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060f0:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060f2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80060f8:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060fa:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060fc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060fe:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8006102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006106:	6843      	ldr	r3, [r0, #4]
 8006108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610c:	d0a5      	beq.n	800605a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800610e:	61c6      	str	r6, [r0, #28]
 8006110:	e7a3      	b.n	800605a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006112:	d00b      	beq.n	800612c <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006114:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006118:	2500      	movs	r5, #0
 800611a:	62a5      	str	r5, [r4, #40]	; 0x28
 800611c:	e7b8      	b.n	8006090 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 800611e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006122:	4620      	mov	r0, r4
 8006124:	f7fd fa6a 	bl	80035fc <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800612a:	e79e      	b.n	800606a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800612c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800612e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006132:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8006136:	e7ab      	b.n	8006090 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8006138:	2001      	movs	r0, #1
}
 800613a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800613c:	2000      	movs	r0, #0
 800613e:	e7eb      	b.n	8006118 <HAL_SPI_Init+0xd4>

08006140 <HAL_SPI_TransmitReceive>:
{
 8006140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006144:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006146:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800614a:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 800614c:	2801      	cmp	r0, #1
 800614e:	f000 8097 	beq.w	8006280 <HAL_SPI_TransmitReceive+0x140>
 8006152:	461f      	mov	r7, r3
 8006154:	2301      	movs	r3, #1
 8006156:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800615a:	4689      	mov	r9, r1
 800615c:	4690      	mov	r8, r2
 800615e:	f7fd fc97 	bl	8003a90 <HAL_GetTick>
 8006162:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8006164:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006168:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800616a:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800616c:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800616e:	d010      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x52>
 8006170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006174:	d008      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8006176:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006178:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800617a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800617c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006180:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006188:	68a2      	ldr	r2, [r4, #8]
 800618a:	2a00      	cmp	r2, #0
 800618c:	d1f3      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x36>
 800618e:	2904      	cmp	r1, #4
 8006190:	d1f1      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006192:	f1b9 0f00 	cmp.w	r9, #0
 8006196:	d076      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x146>
 8006198:	f1b8 0f00 	cmp.w	r8, #0
 800619c:	d073      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x146>
 800619e:	2f00      	cmp	r7, #0
 80061a0:	d071      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061a2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061a6:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061a8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061ac:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061ae:	bf1c      	itt	ne
 80061b0:	2205      	movne	r2, #5
 80061b2:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b6:	2200      	movs	r2, #0
 80061b8:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80061ba:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061be:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 80061c0:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80061c8:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ca:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 80061cc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061d0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061d4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061d6:	d858      	bhi.n	800628a <HAL_SPI_TransmitReceive+0x14a>
 80061d8:	2f01      	cmp	r7, #1
 80061da:	f000 80ee 	beq.w	80063ba <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061de:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80061e2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e4:	6811      	ldr	r1, [r2, #0]
 80061e6:	0649      	lsls	r1, r1, #25
 80061e8:	f100 80a9 	bmi.w	800633e <HAL_SPI_TransmitReceive+0x1fe>
    __HAL_SPI_ENABLE(hspi);
 80061ec:	6811      	ldr	r1, [r2, #0]
 80061ee:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80061f2:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80a5 	beq.w	8006344 <HAL_SPI_TransmitReceive+0x204>
 80061fa:	2f01      	cmp	r7, #1
 80061fc:	f000 80a2 	beq.w	8006344 <HAL_SPI_TransmitReceive+0x204>
        txallowed = 1U;
 8006200:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006202:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	b92b      	cbnz	r3, 8006214 <HAL_SPI_TransmitReceive+0xd4>
 8006208:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8086 	beq.w	8006320 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006214:	6822      	ldr	r2, [r4, #0]
 8006216:	6893      	ldr	r3, [r2, #8]
 8006218:	0799      	lsls	r1, r3, #30
 800621a:	d505      	bpl.n	8006228 <HAL_SPI_TransmitReceive+0xe8>
 800621c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	b113      	cbz	r3, 8006228 <HAL_SPI_TransmitReceive+0xe8>
 8006222:	2f00      	cmp	r7, #0
 8006224:	f040 80ae 	bne.w	8006384 <HAL_SPI_TransmitReceive+0x244>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	f013 0301 	ands.w	r3, r3, #1
 800622e:	d01e      	beq.n	800626e <HAL_SPI_TransmitReceive+0x12e>
 8006230:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006234:	b289      	uxth	r1, r1
 8006236:	b1d1      	cbz	r1, 800626e <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8006238:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800623c:	b289      	uxth	r1, r1
 800623e:	2901      	cmp	r1, #1
 8006240:	f240 8092 	bls.w	8006368 <HAL_SPI_TransmitReceive+0x228>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006244:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006246:	68d0      	ldr	r0, [r2, #12]
 8006248:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800624c:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800624e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006252:	3902      	subs	r1, #2
 8006254:	b289      	uxth	r1, r1
 8006256:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800625a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800625e:	b289      	uxth	r1, r1
 8006260:	2901      	cmp	r1, #1
        txallowed = 1U;
 8006262:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8006264:	d803      	bhi.n	800626e <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006266:	6853      	ldr	r3, [r2, #4]
 8006268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800626c:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800626e:	f7fd fc0f 	bl	8003a90 <HAL_GetTick>
 8006272:	1b80      	subs	r0, r0, r6
 8006274:	42a8      	cmp	r0, r5
 8006276:	d373      	bcc.n	8006360 <HAL_SPI_TransmitReceive+0x220>
 8006278:	1c6b      	adds	r3, r5, #1
 800627a:	d0c2      	beq.n	8006202 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 800627c:	2003      	movs	r0, #3
 800627e:	e77b      	b.n	8006178 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8006280:	2002      	movs	r0, #2
}
 8006282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8006286:	2001      	movs	r0, #1
 8006288:	e776      	b.n	8006178 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800628a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800628e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006290:	6811      	ldr	r1, [r2, #0]
 8006292:	0648      	lsls	r0, r1, #25
 8006294:	d403      	bmi.n	800629e <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 8006296:	6811      	ldr	r1, [r2, #0]
 8006298:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800629c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d14a      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x1f8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a2:	4649      	mov	r1, r9
 80062a4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80062a8:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80062aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ac:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80062b4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b91b      	cbnz	r3, 80062c4 <HAL_SPI_TransmitReceive+0x184>
 80062bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	b36b      	cbz	r3, 8006320 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	6893      	ldr	r3, [r2, #8]
 80062c8:	079b      	lsls	r3, r3, #30
 80062ca:	d50d      	bpl.n	80062e8 <HAL_SPI_TransmitReceive+0x1a8>
 80062cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	b153      	cbz	r3, 80062e8 <HAL_SPI_TransmitReceive+0x1a8>
 80062d2:	b14f      	cbz	r7, 80062e8 <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062d6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80062da:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80062de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80062e4:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80062e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062e8:	6893      	ldr	r3, [r2, #8]
 80062ea:	f013 0301 	ands.w	r3, r3, #1
 80062ee:	d00f      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x1d0>
 80062f0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80062f4:	b289      	uxth	r1, r1
 80062f6:	b159      	cbz	r1, 8006310 <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 80062f8:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fc:	68d2      	ldr	r2, [r2, #12]
 80062fe:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006302:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006304:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006308:	3b01      	subs	r3, #1
 800630a:	b29b      	uxth	r3, r3
 800630c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006310:	f7fd fbbe 	bl	8003a90 <HAL_GetTick>
 8006314:	1b80      	subs	r0, r0, r6
 8006316:	42a8      	cmp	r0, r5
 8006318:	d3cd      	bcc.n	80062b6 <HAL_SPI_TransmitReceive+0x176>
 800631a:	1c68      	adds	r0, r5, #1
 800631c:	d0cb      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x176>
 800631e:	e7ad      	b.n	800627c <HAL_SPI_TransmitReceive+0x13c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006320:	4632      	mov	r2, r6
 8006322:	4629      	mov	r1, r5
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff fe6d 	bl	8006004 <SPI_EndRxTxTransaction>
 800632a:	2800      	cmp	r0, #0
 800632c:	f43f af24 	beq.w	8006178 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006330:	2320      	movs	r3, #32
 8006332:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006334:	2001      	movs	r0, #1
 8006336:	e71f      	b.n	8006178 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006338:	2f01      	cmp	r7, #1
 800633a:	d1bb      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x174>
 800633c:	e7b1      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633e:	2b00      	cmp	r3, #0
 8006340:	f47f af5e 	bne.w	8006200 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8006344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d93e      	bls.n	80063ca <HAL_SPI_TransmitReceive+0x28a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634c:	4649      	mov	r1, r9
 800634e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006352:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8006354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006356:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006358:	3b02      	subs	r3, #2
 800635a:	b29b      	uxth	r3, r3
 800635c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800635e:	e74f      	b.n	8006200 <HAL_SPI_TransmitReceive+0xc0>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006360:	2d00      	cmp	r5, #0
 8006362:	f47f af4e 	bne.w	8006202 <HAL_SPI_TransmitReceive+0xc2>
 8006366:	e789      	b.n	800627c <HAL_SPI_TransmitReceive+0x13c>
        txallowed = 1U;
 8006368:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800636a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800636c:	7b12      	ldrb	r2, [r2, #12]
 800636e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006372:	3301      	adds	r3, #1
 8006374:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8006376:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800637a:	3b01      	subs	r3, #1
 800637c:	b29b      	uxth	r3, r3
 800637e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8006382:	e774      	b.n	800626e <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8006384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800638c:	d909      	bls.n	80063a2 <HAL_SPI_TransmitReceive+0x262>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006392:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006394:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006396:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006398:	3b02      	subs	r3, #2
 800639a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800639c:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 800639e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80063a0:	e742      	b.n	8006228 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80063a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80063a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80063aa:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80063ac:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80063ae:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80063b0:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80063b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063b4:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80063b6:	2700      	movs	r7, #0
 80063b8:	e736      	b.n	8006228 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063ba:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80063be:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c0:	6811      	ldr	r1, [r2, #0]
 80063c2:	0649      	lsls	r1, r1, #25
 80063c4:	f57f af12 	bpl.w	80061ec <HAL_SPI_TransmitReceive+0xac>
 80063c8:	e7bc      	b.n	8006344 <HAL_SPI_TransmitReceive+0x204>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063ca:	f899 3000 	ldrb.w	r3, [r9]
 80063ce:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80063d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80063d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80063d4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80063d6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80063d8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80063da:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80063dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80063de:	e70f      	b.n	8006200 <HAL_SPI_TransmitReceive+0xc0>

080063e0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e0:	6a03      	ldr	r3, [r0, #32]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e8:	6a03      	ldr	r3, [r0, #32]
{
 80063ea:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80063f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80063fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80063fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006402:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006404:	4d13      	ldr	r5, [pc, #76]	; (8006454 <TIM_OC1_SetConfig+0x74>)
 8006406:	42a8      	cmp	r0, r5
 8006408:	d00f      	beq.n	800642a <TIM_OC1_SetConfig+0x4a>
 800640a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800640e:	42a8      	cmp	r0, r5
 8006410:	d00b      	beq.n	800642a <TIM_OC1_SetConfig+0x4a>
 8006412:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006416:	42a8      	cmp	r0, r5
 8006418:	d007      	beq.n	800642a <TIM_OC1_SetConfig+0x4a>
 800641a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800641e:	42a8      	cmp	r0, r5
 8006420:	d003      	beq.n	800642a <TIM_OC1_SetConfig+0x4a>
 8006422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006426:	42a8      	cmp	r0, r5
 8006428:	d10d      	bne.n	8006446 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800642a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800642c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006430:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006432:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006436:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800643a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800643e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006442:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006446:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006448:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800644a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800644c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800644e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006450:	6203      	str	r3, [r0, #32]
}
 8006452:	4770      	bx	lr
 8006454:	40012c00 	.word	0x40012c00

08006458 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006458:	6a03      	ldr	r3, [r0, #32]
 800645a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800645e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006460:	6a03      	ldr	r3, [r0, #32]
{
 8006462:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006466:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006468:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800646a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800646e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006472:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006474:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006476:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800647a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800647e:	4d15      	ldr	r5, [pc, #84]	; (80064d4 <TIM_OC3_SetConfig+0x7c>)
 8006480:	42a8      	cmp	r0, r5
 8006482:	d010      	beq.n	80064a6 <TIM_OC3_SetConfig+0x4e>
 8006484:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006488:	42a8      	cmp	r0, r5
 800648a:	d00c      	beq.n	80064a6 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006490:	42a8      	cmp	r0, r5
 8006492:	d00f      	beq.n	80064b4 <TIM_OC3_SetConfig+0x5c>
 8006494:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006498:	42a8      	cmp	r0, r5
 800649a:	d00b      	beq.n	80064b4 <TIM_OC3_SetConfig+0x5c>
 800649c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064a0:	42a8      	cmp	r0, r5
 80064a2:	d10f      	bne.n	80064c4 <TIM_OC3_SetConfig+0x6c>
 80064a4:	e006      	b.n	80064b4 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80064a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80064b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064b4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064b8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064bc:	ea46 0c05 	orr.w	ip, r6, r5
 80064c0:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064c4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80064c6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80064c8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80064ca:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80064cc:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80064ce:	6203      	str	r3, [r0, #32]
}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40012c00 	.word	0x40012c00

080064d8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064d8:	6a03      	ldr	r3, [r0, #32]
 80064da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064de:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e0:	6a03      	ldr	r3, [r0, #32]
{
 80064e2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064e6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064ea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80064ee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80064f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006500:	4d14      	ldr	r5, [pc, #80]	; (8006554 <TIM_OC4_SetConfig+0x7c>)
 8006502:	42a8      	cmp	r0, r5
 8006504:	d010      	beq.n	8006528 <TIM_OC4_SetConfig+0x50>
 8006506:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800650a:	42a8      	cmp	r0, r5
 800650c:	d00c      	beq.n	8006528 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006512:	42a8      	cmp	r0, r5
 8006514:	d00f      	beq.n	8006536 <TIM_OC4_SetConfig+0x5e>
 8006516:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800651a:	42a8      	cmp	r0, r5
 800651c:	d00b      	beq.n	8006536 <TIM_OC4_SetConfig+0x5e>
 800651e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006522:	42a8      	cmp	r0, r5
 8006524:	d10f      	bne.n	8006546 <TIM_OC4_SetConfig+0x6e>
 8006526:	e006      	b.n	8006536 <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006528:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800652a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800652e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006536:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800653a:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800653e:	ea46 0c05 	orr.w	ip, r6, r5
 8006542:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006546:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006548:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800654a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800654c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800654e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006550:	6203      	str	r3, [r0, #32]
}
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00

08006558 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006558:	6a03      	ldr	r3, [r0, #32]
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006560:	6a03      	ldr	r3, [r0, #32]
{
 8006562:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006566:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800656a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800656e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006572:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006574:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006576:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800657a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657e:	4d0f      	ldr	r5, [pc, #60]	; (80065bc <TIM_OC5_SetConfig+0x64>)
 8006580:	42a8      	cmp	r0, r5
 8006582:	d00f      	beq.n	80065a4 <TIM_OC5_SetConfig+0x4c>
 8006584:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006588:	42a8      	cmp	r0, r5
 800658a:	d00b      	beq.n	80065a4 <TIM_OC5_SetConfig+0x4c>
 800658c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006590:	42a8      	cmp	r0, r5
 8006592:	d007      	beq.n	80065a4 <TIM_OC5_SetConfig+0x4c>
 8006594:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006598:	42a8      	cmp	r0, r5
 800659a:	d003      	beq.n	80065a4 <TIM_OC5_SetConfig+0x4c>
 800659c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80065a0:	42a8      	cmp	r0, r5
 80065a2:	d104      	bne.n	80065ae <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065a4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065a6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065aa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80065b2:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80065b4:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 80065b6:	6481      	str	r1, [r0, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80065b8:	6203      	str	r3, [r0, #32]
}
 80065ba:	4770      	bx	lr
 80065bc:	40012c00 	.word	0x40012c00

080065c0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065c0:	6a03      	ldr	r3, [r0, #32]
 80065c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c8:	6a03      	ldr	r3, [r0, #32]
{
 80065ca:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ce:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80065d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065de:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065e4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e8:	4d0f      	ldr	r5, [pc, #60]	; (8006628 <TIM_OC6_SetConfig+0x68>)
 80065ea:	42a8      	cmp	r0, r5
 80065ec:	d00f      	beq.n	800660e <TIM_OC6_SetConfig+0x4e>
 80065ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80065f2:	42a8      	cmp	r0, r5
 80065f4:	d00b      	beq.n	800660e <TIM_OC6_SetConfig+0x4e>
 80065f6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80065fa:	42a8      	cmp	r0, r5
 80065fc:	d007      	beq.n	800660e <TIM_OC6_SetConfig+0x4e>
 80065fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006602:	42a8      	cmp	r0, r5
 8006604:	d003      	beq.n	800660e <TIM_OC6_SetConfig+0x4e>
 8006606:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800660a:	42a8      	cmp	r0, r5
 800660c:	d104      	bne.n	8006618 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800660e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006610:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006614:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006618:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800661a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800661c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800661e:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 8006620:	64c1      	str	r1, [r0, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006622:	6203      	str	r3, [r0, #32]
}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40012c00 	.word	0x40012c00

0800662c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800662c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006630:	2b01      	cmp	r3, #1
 8006632:	d11f      	bne.n	8006674 <HAL_TIM_Base_Start+0x48>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006634:	6803      	ldr	r3, [r0, #0]
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <HAL_TIM_Base_Start+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800663a:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	d01a      	beq.n	8006678 <HAL_TIM_Base_Start+0x4c>
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d017      	beq.n	8006678 <HAL_TIM_Base_Start+0x4c>
 8006648:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_TIM_Base_Start+0x4c>
 8006650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006654:	4293      	cmp	r3, r2
 8006656:	d00f      	beq.n	8006678 <HAL_TIM_Base_Start+0x4c>
 8006658:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <HAL_TIM_Base_Start+0x4c>
 8006660:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <HAL_TIM_Base_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800666e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	4770      	bx	lr
    return HAL_ERROR;
 8006674:	2001      	movs	r0, #1
 8006676:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006678:	6899      	ldr	r1, [r3, #8]
 800667a:	4a05      	ldr	r2, [pc, #20]	; (8006690 <HAL_TIM_Base_Start+0x64>)
 800667c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667e:	2a06      	cmp	r2, #6
 8006680:	d002      	beq.n	8006688 <HAL_TIM_Base_Start+0x5c>
 8006682:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006686:	d1ef      	bne.n	8006668 <HAL_TIM_Base_Start+0x3c>
  return HAL_OK;
 8006688:	2000      	movs	r0, #0
}
 800668a:	4770      	bx	lr
 800668c:	40012c00 	.word	0x40012c00
 8006690:	00010007 	.word	0x00010007

08006694 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006694:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006698:	2b01      	cmp	r3, #1
 800669a:	d122      	bne.n	80066e2 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800669c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669e:	4917      	ldr	r1, [pc, #92]	; (80066fc <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	2202      	movs	r2, #2
 80066a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066a6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b0:	d019      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x52>
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d016      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x52>
 80066b8:	4a11      	ldr	r2, [pc, #68]	; (8006700 <HAL_TIM_Base_Start_IT+0x6c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x52>
 80066be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00f      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x52>
 80066c6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x52>
 80066ce:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80066dc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	4770      	bx	lr
    return HAL_ERROR;
 80066e2:	2001      	movs	r0, #1
 80066e4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e6:	6899      	ldr	r1, [r3, #8]
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <HAL_TIM_Base_Start_IT+0x70>)
 80066ea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	2a06      	cmp	r2, #6
 80066ee:	d002      	beq.n	80066f6 <HAL_TIM_Base_Start_IT+0x62>
 80066f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80066f4:	d1ef      	bne.n	80066d6 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 80066f6:	2000      	movs	r0, #0
}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40000400 	.word	0x40000400
 8006704:	00010007 	.word	0x00010007

08006708 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006708:	2900      	cmp	r1, #0
 800670a:	d14a      	bne.n	80067a2 <HAL_TIM_OC_Start+0x9a>
 800670c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006710:	2b01      	cmp	r3, #1
 8006712:	d150      	bne.n	80067b6 <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006714:	2302      	movs	r3, #2
 8006716:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800671a:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800671c:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800671e:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006720:	f001 011f 	and.w	r1, r1, #31
 8006724:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8006728:	ea20 0001 	bic.w	r0, r0, r1
 800672c:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800672e:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006730:	4a3b      	ldr	r2, [pc, #236]	; (8006820 <HAL_TIM_OC_Start+0x118>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006732:	4301      	orrs	r1, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006734:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006736:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006738:	d051      	beq.n	80067de <HAL_TIM_OC_Start+0xd6>
 800673a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673e:	4293      	cmp	r3, r2
 8006740:	d00b      	beq.n	800675a <HAL_TIM_OC_Start+0x52>
 8006742:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <HAL_TIM_OC_Start+0x52>
 800674a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <HAL_TIM_OC_Start+0x52>
 8006752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006756:	4293      	cmp	r3, r2
 8006758:	d103      	bne.n	8006762 <HAL_TIM_OC_Start+0x5a>
    __HAL_TIM_MOE_ENABLE(htim);
 800675a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006760:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006766:	d00e      	beq.n	8006786 <HAL_TIM_OC_Start+0x7e>
 8006768:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <HAL_TIM_OC_Start+0x11c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00b      	beq.n	8006786 <HAL_TIM_OC_Start+0x7e>
 800676e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006772:	4293      	cmp	r3, r2
 8006774:	d007      	beq.n	8006786 <HAL_TIM_OC_Start+0x7e>
 8006776:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <HAL_TIM_OC_Start+0x7e>
 800677e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006782:	4293      	cmp	r3, r2
 8006784:	d107      	bne.n	8006796 <HAL_TIM_OC_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006786:	6899      	ldr	r1, [r3, #8]
 8006788:	4a27      	ldr	r2, [pc, #156]	; (8006828 <HAL_TIM_OC_Start+0x120>)
 800678a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	2a06      	cmp	r2, #6
 800678e:	d014      	beq.n	80067ba <HAL_TIM_OC_Start+0xb2>
 8006790:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006794:	d011      	beq.n	80067ba <HAL_TIM_OC_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800679c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067a2:	2904      	cmp	r1, #4
 80067a4:	d020      	beq.n	80067e8 <HAL_TIM_OC_Start+0xe0>
 80067a6:	2908      	cmp	r1, #8
 80067a8:	d026      	beq.n	80067f8 <HAL_TIM_OC_Start+0xf0>
 80067aa:	290c      	cmp	r1, #12
 80067ac:	d107      	bne.n	80067be <HAL_TIM_OC_Start+0xb6>
 80067ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d028      	beq.n	8006808 <HAL_TIM_OC_Start+0x100>
    return HAL_ERROR;
 80067b6:	2001      	movs	r0, #1
 80067b8:	4770      	bx	lr
  return HAL_OK;
 80067ba:	2000      	movs	r0, #0
}
 80067bc:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	2910      	cmp	r1, #16
 80067c0:	d026      	beq.n	8006810 <HAL_TIM_OC_Start+0x108>
 80067c2:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d1f5      	bne.n	80067b6 <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ca:	2908      	cmp	r1, #8
 80067cc:	d018      	beq.n	8006800 <HAL_TIM_OC_Start+0xf8>
 80067ce:	290c      	cmp	r1, #12
 80067d0:	d01a      	beq.n	8006808 <HAL_TIM_OC_Start+0x100>
 80067d2:	2910      	cmp	r1, #16
 80067d4:	d020      	beq.n	8006818 <HAL_TIM_OC_Start+0x110>
 80067d6:	2302      	movs	r3, #2
 80067d8:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80067dc:	e79d      	b.n	800671a <HAL_TIM_OC_Start+0x12>
    __HAL_TIM_MOE_ENABLE(htim);
 80067de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e6:	e7ce      	b.n	8006786 <HAL_TIM_OC_Start+0x7e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067e8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d1e2      	bne.n	80067b6 <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f0:	2302      	movs	r3, #2
 80067f2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80067f6:	e790      	b.n	800671a <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d1da      	bne.n	80067b6 <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006800:	2302      	movs	r3, #2
 8006802:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006806:	e788      	b.n	800671a <HAL_TIM_OC_Start+0x12>
 8006808:	2302      	movs	r3, #2
 800680a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800680e:	e784      	b.n	800671a <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006810:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006814:	2b01      	cmp	r3, #1
 8006816:	d1ce      	bne.n	80067b6 <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006818:	2302      	movs	r3, #2
 800681a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800681e:	e77c      	b.n	800671a <HAL_TIM_OC_Start+0x12>
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40000400 	.word	0x40000400
 8006828:	00010007 	.word	0x00010007

0800682c <HAL_TIM_PWM_Start>:
 800682c:	f7ff bf6c 	b.w	8006708 <HAL_TIM_OC_Start>

08006830 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006834:	2b01      	cmp	r3, #1
 8006836:	f000 8089 	beq.w	800694c <HAL_TIM_ConfigClockSource+0x11c>
{
 800683a:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800683e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006844:	2201      	movs	r2, #1
 8006846:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800684a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684c:	4b5f      	ldr	r3, [pc, #380]	; (80069cc <HAL_TIM_ConfigClockSource+0x19c>)
 800684e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006850:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006852:	680b      	ldr	r3, [r1, #0]
 8006854:	2b70      	cmp	r3, #112	; 0x70
 8006856:	f000 80a8 	beq.w	80069aa <HAL_TIM_ConfigClockSource+0x17a>
 800685a:	d828      	bhi.n	80068ae <HAL_TIM_ConfigClockSource+0x7e>
 800685c:	2b50      	cmp	r3, #80	; 0x50
 800685e:	d078      	beq.n	8006952 <HAL_TIM_ConfigClockSource+0x122>
 8006860:	d93e      	bls.n	80068e0 <HAL_TIM_ConfigClockSource+0xb0>
 8006862:	2b60      	cmp	r3, #96	; 0x60
 8006864:	d11a      	bne.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006866:	68cb      	ldr	r3, [r1, #12]
 8006868:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686a:	6a21      	ldr	r1, [r4, #32]
 800686c:	f021 0110 	bic.w	r1, r1, #16
 8006870:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006874:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006878:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 800687c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800687e:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006884:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006888:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800688a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800688c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006894:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006898:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 800689a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800689c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800689e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80068a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80068a8:	bc70      	pop	{r4, r5, r6}
 80068aa:	4610      	mov	r0, r2
 80068ac:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	d069      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x158>
 80068b4:	d938      	bls.n	8006928 <HAL_TIM_ConfigClockSource+0xf8>
 80068b6:	4946      	ldr	r1, [pc, #280]	; (80069d0 <HAL_TIM_ConfigClockSource+0x1a0>)
 80068b8:	428b      	cmp	r3, r1
 80068ba:	d006      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 80068bc:	d92d      	bls.n	800691a <HAL_TIM_ConfigClockSource+0xea>
 80068be:	4945      	ldr	r1, [pc, #276]	; (80069d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 80068c0:	428b      	cmp	r3, r1
 80068c2:	d002      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 80068c4:	3130      	adds	r1, #48	; 0x30
 80068c6:	428b      	cmp	r3, r1
 80068c8:	d1e8      	bne.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80068ca:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80068cc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80068d0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d4:	430b      	orrs	r3, r1
 80068d6:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80068dc:	60a3      	str	r3, [r4, #8]
}
 80068de:	e7dd      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d126      	bne.n	8006932 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e4:	684a      	ldr	r2, [r1, #4]
 80068e6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80068e8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ea:	6a25      	ldr	r5, [r4, #32]
 80068ec:	f025 0501 	bic.w	r5, r5, #1
 80068f0:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f2:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80068fc:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068fe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006902:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006904:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006906:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006908:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006910:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8006916:	60a3      	str	r3, [r4, #8]
}
 8006918:	e7c0      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800691a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800691e:	d0d4      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 8006920:	3910      	subs	r1, #16
 8006922:	428b      	cmp	r3, r1
 8006924:	d0d1      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 8006926:	e7b9      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8006928:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 800692c:	bf18      	it	ne
 800692e:	2201      	movne	r2, #1
 8006930:	e7b4      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006932:	d8b3      	bhi.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d0c8      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 8006938:	d903      	bls.n	8006942 <HAL_TIM_ConfigClockSource+0x112>
 800693a:	2b30      	cmp	r3, #48	; 0x30
 800693c:	d0c5      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 800693e:	2201      	movs	r2, #1
 8006940:	e7ac      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
 8006942:	f033 0210 	bics.w	r2, r3, #16
 8006946:	d0c0      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x9a>
 8006948:	2201      	movs	r2, #1
 800694a:	e7a7      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 800694c:	2202      	movs	r2, #2
}
 800694e:	4610      	mov	r0, r2
 8006950:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006952:	684a      	ldr	r2, [r1, #4]
 8006954:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006956:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006958:	6a25      	ldr	r5, [r4, #32]
 800695a:	f025 0501 	bic.w	r5, r5, #1
 800695e:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006960:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800696a:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800696c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006970:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006972:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006974:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006976:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800697e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8006982:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8006984:	60a3      	str	r3, [r4, #8]
}
 8006986:	e789      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006988:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800698c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800698e:	68c9      	ldr	r1, [r1, #12]
 8006990:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006992:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006996:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800699a:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800699c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800699e:	68a3      	ldr	r3, [r4, #8]
 80069a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80069a4:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069a6:	60a3      	str	r3, [r4, #8]
      break;
 80069a8:	e778      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069aa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80069ae:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069b0:	68c9      	ldr	r1, [r1, #12]
 80069b2:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069bc:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80069be:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80069c0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 80069c8:	60a3      	str	r3, [r4, #8]
      break;
 80069ca:	e767      	b.n	800689c <HAL_TIM_ConfigClockSource+0x6c>
 80069cc:	ffce0088 	.word	0xffce0088
 80069d0:	00100030 	.word	0x00100030
 80069d4:	00100040 	.word	0x00100040

080069d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <HAL_TIM_IC_CaptureCallback>:
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop

080069e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <HAL_TIM_TriggerCallback>:
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e8:	6803      	ldr	r3, [r0, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	0791      	lsls	r1, r2, #30
{
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069f2:	d503      	bpl.n	80069fc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	0792      	lsls	r2, r2, #30
 80069f8:	f100 808a 	bmi.w	8006b10 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	0752      	lsls	r2, r2, #29
 8006a00:	d502      	bpl.n	8006a08 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	0750      	lsls	r0, r2, #29
 8006a06:	d470      	bmi.n	8006aea <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	0711      	lsls	r1, r2, #28
 8006a0c:	d502      	bpl.n	8006a14 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	0712      	lsls	r2, r2, #28
 8006a12:	d458      	bmi.n	8006ac6 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	06d1      	lsls	r1, r2, #27
 8006a18:	d502      	bpl.n	8006a20 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	06d2      	lsls	r2, r2, #27
 8006a1e:	d43e      	bmi.n	8006a9e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	07d0      	lsls	r0, r2, #31
 8006a24:	d503      	bpl.n	8006a2e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	07d1      	lsls	r1, r2, #31
 8006a2a:	f100 808a 	bmi.w	8006b42 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	0612      	lsls	r2, r2, #24
 8006a32:	d503      	bpl.n	8006a3c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	0610      	lsls	r0, r2, #24
 8006a38:	f100 808b 	bmi.w	8006b52 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	05d1      	lsls	r1, r2, #23
 8006a40:	d503      	bpl.n	8006a4a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	0612      	lsls	r2, r2, #24
 8006a46:	f100 808c 	bmi.w	8006b62 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	0650      	lsls	r0, r2, #25
 8006a4e:	d503      	bpl.n	8006a58 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	0651      	lsls	r1, r2, #25
 8006a54:	f100 808d 	bmi.w	8006b72 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	0692      	lsls	r2, r2, #26
 8006a5c:	d503      	bpl.n	8006a66 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	0690      	lsls	r0, r2, #26
 8006a62:	f100 808e 	bmi.w	8006b82 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	02d1      	lsls	r1, r2, #11
 8006a6a:	d503      	bpl.n	8006a74 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	02d2      	lsls	r2, r2, #11
 8006a70:	f100 808f 	bmi.w	8006b92 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	0290      	lsls	r0, r2, #10
 8006a78:	d503      	bpl.n	8006a82 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	0291      	lsls	r1, r2, #10
 8006a7e:	f100 8090 	bmi.w	8006ba2 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	0252      	lsls	r2, r2, #9
 8006a86:	d503      	bpl.n	8006a90 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	0250      	lsls	r0, r2, #9
 8006a8c:	f100 8091 	bmi.w	8006bb2 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	0211      	lsls	r1, r2, #8
 8006a94:	d502      	bpl.n	8006a9c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	0212      	lsls	r2, r2, #8
 8006a9a:	d44a      	bmi.n	8006b32 <HAL_TIM_IRQHandler+0x14a>
}
 8006a9c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a9e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa2:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aa4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ab0:	f040 8090 	bne.w	8006bd4 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab4:	f7ff ff90 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff ff91 	bl	80069e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ac0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	7722      	strb	r2, [r4, #28]
 8006ac4:	e7ac      	b.n	8006a20 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ac6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aca:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006acc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ace:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad6:	d17a      	bne.n	8006bce <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad8:	f7ff ff7e 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	4620      	mov	r0, r4
 8006ade:	f7ff ff7f 	bl	80069e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	7722      	strb	r2, [r4, #28]
 8006ae8:	e794      	b.n	8006a14 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aea:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aee:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006af0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006af2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006afc:	d164      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afe:	f7ff ff6b 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b02:	4620      	mov	r0, r4
 8006b04:	f7ff ff6c 	bl	80069e0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b08:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b0a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0c:	7722      	strb	r2, [r4, #28]
 8006b0e:	e77b      	b.n	8006a08 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b10:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b14:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b16:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b18:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	0799      	lsls	r1, r3, #30
 8006b1e:	d150      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b20:	f7ff ff5a 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7ff ff5b 	bl	80069e0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b2c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	7722      	strb	r2, [r4, #28]
 8006b30:	e764      	b.n	80069fc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b38:	611a      	str	r2, [r3, #16]
}
 8006b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b3e:	f000 baf3 	b.w	8007128 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b42:	f06f 0201 	mvn.w	r2, #1
 8006b46:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7fa fa39 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	e76d      	b.n	8006a2e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fadb 	bl	8007114 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	e76c      	b.n	8006a3c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 fad5 	bl	8007118 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	e76b      	b.n	8006a4a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff ff33 	bl	80069e4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	e76a      	b.n	8006a58 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b82:	f06f 0220 	mvn.w	r2, #32
 8006b86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fac1 	bl	8007110 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	e769      	b.n	8006a66 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b92:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fabf 	bl	800711c <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	e768      	b.n	8006a74 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006ba2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006ba6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fab9 	bl	8007120 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	e767      	b.n	8006a82 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006bb2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fab3 	bl	8007124 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	e766      	b.n	8006a90 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	f7ff ff0b 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
 8006bc6:	e7b0      	b.n	8006b2a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc8:	f7ff ff08 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
 8006bcc:	e79c      	b.n	8006b08 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	f7ff ff05 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
 8006bd2:	e786      	b.n	8006ae2 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd4:	f7ff ff02 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e771      	b.n	8006abe <HAL_TIM_IRQHandler+0xd6>
 8006bda:	bf00      	nop

08006bdc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	4a32      	ldr	r2, [pc, #200]	; (8006ca8 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8006bde:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be0:	4290      	cmp	r0, r2
{
 8006be2:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be4:	d039      	beq.n	8006c5a <TIM_Base_SetConfig+0x7e>
 8006be6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006bea:	d021      	beq.n	8006c30 <TIM_Base_SetConfig+0x54>
 8006bec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006bf0:	4290      	cmp	r0, r2
 8006bf2:	d01d      	beq.n	8006c30 <TIM_Base_SetConfig+0x54>
 8006bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bf8:	4290      	cmp	r0, r2
 8006bfa:	d019      	beq.n	8006c30 <TIM_Base_SetConfig+0x54>
 8006bfc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006c00:	4290      	cmp	r0, r2
 8006c02:	d041      	beq.n	8006c88 <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c04:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006c08:	4290      	cmp	r0, r2
 8006c0a:	d047      	beq.n	8006c9c <TIM_Base_SetConfig+0xc0>
 8006c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c10:	4290      	cmp	r0, r2
 8006c12:	d043      	beq.n	8006c9c <TIM_Base_SetConfig+0xc0>
 8006c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c18:	4290      	cmp	r0, r2
 8006c1a:	d03f      	beq.n	8006c9c <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c1c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8006c20:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c26:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006c28:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c2a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c2c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2e:	e010      	b.n	8006c52 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8006c30:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c38:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c40:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c46:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c48:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006c4a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8006c4c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c4e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c50:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006c52:	2301      	movs	r3, #1
}
 8006c54:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006c56:	6143      	str	r3, [r0, #20]
}
 8006c58:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006c5a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c62:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c6a:	694a      	ldr	r2, [r1, #20]
 8006c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c70:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006c72:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c74:	688b      	ldr	r3, [r1, #8]
 8006c76:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c78:	680b      	ldr	r3, [r1, #0]
 8006c7a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006c7c:	690b      	ldr	r3, [r1, #16]
 8006c7e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006c80:	2301      	movs	r3, #1
}
 8006c82:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006c84:	6143      	str	r3, [r0, #20]
}
 8006c86:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006c88:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c90:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c96:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c98:	694a      	ldr	r2, [r1, #20]
 8006c9a:	e7e7      	b.n	8006c6c <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c9e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca4:	4323      	orrs	r3, r4
 8006ca6:	e7e1      	b.n	8006c6c <TIM_Base_SetConfig+0x90>
 8006ca8:	40012c00 	.word	0x40012c00

08006cac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006cac:	b370      	cbz	r0, 8006d0c <HAL_TIM_Base_Init+0x60>
{
 8006cae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006cba:	b313      	cbz	r3, 8006d02 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cbc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc4:	f851 0b04 	ldr.w	r0, [r1], #4
 8006cc8:	f7ff ff88 	bl	8006bdc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006cd6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006cda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006cde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006ce2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cf2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006cf6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006cfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006cfe:	2000      	movs	r0, #0
}
 8006d00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006d02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006d06:	f7fc fcb7 	bl	8003678 <HAL_TIM_Base_MspInit>
 8006d0a:	e7d7      	b.n	8006cbc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8006d0c:	2001      	movs	r0, #1
}
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006d10:	b370      	cbz	r0, 8006d70 <HAL_TIM_PWM_Init+0x60>
{
 8006d12:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d18:	4604      	mov	r4, r0
 8006d1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d1e:	b313      	cbz	r3, 8006d66 <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d20:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006d22:	2302      	movs	r3, #2
 8006d24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d28:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d2c:	f7ff ff56 	bl	8006bdc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006d3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006d5a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006d5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006d62:	2000      	movs	r0, #0
}
 8006d64:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006d66:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006d6a:	f7fc fcd3 	bl	8003714 <HAL_TIM_PWM_MspInit>
 8006d6e:	e7d7      	b.n	8006d20 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8006d70:	2001      	movs	r0, #1
}
 8006d72:	4770      	bx	lr

08006d74 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d74:	6a03      	ldr	r3, [r0, #32]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006d7c:	6a03      	ldr	r3, [r0, #32]
{
 8006d7e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006d80:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006d82:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006d8a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006d94:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d9c:	4d14      	ldr	r5, [pc, #80]	; (8006df0 <TIM_OC2_SetConfig+0x7c>)
 8006d9e:	42a8      	cmp	r0, r5
 8006da0:	d010      	beq.n	8006dc4 <TIM_OC2_SetConfig+0x50>
 8006da2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006da6:	42a8      	cmp	r0, r5
 8006da8:	d00c      	beq.n	8006dc4 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006daa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006dae:	42a8      	cmp	r0, r5
 8006db0:	d00f      	beq.n	8006dd2 <TIM_OC2_SetConfig+0x5e>
 8006db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006db6:	42a8      	cmp	r0, r5
 8006db8:	d00b      	beq.n	8006dd2 <TIM_OC2_SetConfig+0x5e>
 8006dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dbe:	42a8      	cmp	r0, r5
 8006dc0:	d10f      	bne.n	8006de2 <TIM_OC2_SetConfig+0x6e>
 8006dc2:	e006      	b.n	8006dd2 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dc4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dd2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dda:	ea46 0c05 	orr.w	ip, r6, r5
 8006dde:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006de2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006de4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006de6:	6182      	str	r2, [r0, #24]
}
 8006de8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006dea:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006dec:	6203      	str	r3, [r0, #32]
}
 8006dee:	4770      	bx	lr
 8006df0:	40012c00 	.word	0x40012c00

08006df4 <HAL_TIM_PWM_ConfigChannel>:
{
 8006df4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006df6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	f000 8088 	beq.w	8006f10 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4604      	mov	r4, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006e0a:	2a14      	cmp	r2, #20
 8006e0c:	d80c      	bhi.n	8006e28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e0e:	e8df f002 	tbb	[pc, r2]
 8006e12:	0b23      	.short	0x0b23
 8006e14:	0b350b0b 	.word	0x0b350b0b
 8006e18:	0b480b0b 	.word	0x0b480b0b
 8006e1c:	0b5a0b0b 	.word	0x0b5a0b0b
 8006e20:	0b6d0b0b 	.word	0x0b6d0b0b
 8006e24:	0b0b      	.short	0x0b0b
 8006e26:	10          	.byte	0x10
 8006e27:	00          	.byte	0x00
 8006e28:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e32:	6800      	ldr	r0, [r0, #0]
 8006e34:	f7ff fbc4 	bl	80065c0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e38:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e3a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e3e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006e42:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e46:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006e4a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e4e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006e52:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8006e54:	2000      	movs	r0, #0
      break;
 8006e56:	e7e8      	b.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e58:	6800      	ldr	r0, [r0, #0]
 8006e5a:	f7ff fac1 	bl	80063e0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e5e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e60:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e62:	6999      	ldr	r1, [r3, #24]
 8006e64:	f041 0108 	orr.w	r1, r1, #8
 8006e68:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e6a:	6999      	ldr	r1, [r3, #24]
 8006e6c:	f021 0104 	bic.w	r1, r1, #4
 8006e70:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e72:	699a      	ldr	r2, [r3, #24]
 8006e74:	4302      	orrs	r2, r0
 8006e76:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006e78:	2000      	movs	r0, #0
      break;
 8006e7a:	e7d6      	b.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f7ff ff79 	bl	8006d74 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e82:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e84:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e86:	6999      	ldr	r1, [r3, #24]
 8006e88:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006e8c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e8e:	6999      	ldr	r1, [r3, #24]
 8006e90:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006e94:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006e9c:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006e9e:	2000      	movs	r0, #0
      break;
 8006ea0:	e7c3      	b.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ea2:	6800      	ldr	r0, [r0, #0]
 8006ea4:	f7ff fad8 	bl	8006458 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ea8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eaa:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eac:	69d9      	ldr	r1, [r3, #28]
 8006eae:	f041 0108 	orr.w	r1, r1, #8
 8006eb2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eb4:	69d9      	ldr	r1, [r3, #28]
 8006eb6:	f021 0104 	bic.w	r1, r1, #4
 8006eba:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ebc:	69da      	ldr	r2, [r3, #28]
 8006ebe:	4302      	orrs	r2, r0
 8006ec0:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec2:	2000      	movs	r0, #0
      break;
 8006ec4:	e7b1      	b.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	f7ff fb06 	bl	80064d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ecc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ece:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ed0:	69d9      	ldr	r1, [r3, #28]
 8006ed2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006ed6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ed8:	69d9      	ldr	r1, [r3, #28]
 8006eda:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006ede:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006ee6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee8:	2000      	movs	r0, #0
      break;
 8006eea:	e79e      	b.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006eec:	6800      	ldr	r0, [r0, #0]
 8006eee:	f7ff fb33 	bl	8006558 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ef2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ef4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ef6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ef8:	f041 0108 	orr.w	r1, r1, #8
 8006efc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006efe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f00:	f021 0104 	bic.w	r1, r1, #4
 8006f04:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f08:	4302      	orrs	r2, r0
 8006f0a:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8006f0c:	2000      	movs	r0, #0
      break;
 8006f0e:	e78c      	b.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8006f10:	2002      	movs	r0, #2
}
 8006f12:	bd38      	pop	{r3, r4, r5, pc}

08006f14 <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f14:	2900      	cmp	r1, #0
 8006f16:	d13a      	bne.n	8006f8e <HAL_TIMEx_OCN_Start+0x7a>
 8006f18:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d13e      	bne.n	8006f9e <HAL_TIMEx_OCN_Start+0x8a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f20:	2302      	movs	r3, #2
 8006f22:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006f26:	6803      	ldr	r3, [r0, #0]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f28:	2204      	movs	r2, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006f2a:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f2c:	f001 011f 	and.w	r1, r1, #31
 8006f30:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &=  ~tmp;
 8006f34:	ea20 0001 	bic.w	r0, r0, r1
 8006f38:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3c:	4824      	ldr	r0, [pc, #144]	; (8006fd0 <HAL_TIMEx_OCN_Start+0xbc>)
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f3e:	4311      	orrs	r1, r2
 8006f40:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8006f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f44:	4283      	cmp	r3, r0
  __HAL_TIM_MOE_ENABLE(htim);
 8006f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f4c:	d011      	beq.n	8006f72 <HAL_TIMEx_OCN_Start+0x5e>
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIMEx_OCN_Start+0x5e>
 8006f54:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <HAL_TIMEx_OCN_Start+0xc0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <HAL_TIMEx_OCN_Start+0x5e>
 8006f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <HAL_TIMEx_OCN_Start+0x5e>
 8006f62:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <HAL_TIMEx_OCN_Start+0x5e>
 8006f6a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d107      	bne.n	8006f82 <HAL_TIMEx_OCN_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f72:	6899      	ldr	r1, [r3, #8]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIMEx_OCN_Start+0xc4>)
 8006f76:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f78:	2a06      	cmp	r2, #6
 8006f7a:	d012      	beq.n	8006fa2 <HAL_TIMEx_OCN_Start+0x8e>
 8006f7c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006f80:	d00f      	beq.n	8006fa2 <HAL_TIMEx_OCN_Start+0x8e>
    __HAL_TIM_ENABLE(htim);
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8006f88:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f8e:	2904      	cmp	r1, #4
 8006f90:	d00d      	beq.n	8006fae <HAL_TIMEx_OCN_Start+0x9a>
 8006f92:	2908      	cmp	r1, #8
 8006f94:	d013      	beq.n	8006fbe <HAL_TIMEx_OCN_Start+0xaa>
 8006f96:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIMEx_OCN_Start+0x92>
    return HAL_ERROR;
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	4770      	bx	lr
  return HAL_OK;
 8006fa2:	2000      	movs	r0, #0
}
 8006fa4:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8006fac:	e7bb      	b.n	8006f26 <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fae:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d1f3      	bne.n	8006f9e <HAL_TIMEx_OCN_Start+0x8a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8006fbc:	e7b3      	b.n	8006f26 <HAL_TIMEx_OCN_Start+0x12>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fbe:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d1eb      	bne.n	8006f9e <HAL_TIMEx_OCN_Start+0x8a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8006fcc:	e7ab      	b.n	8006f26 <HAL_TIMEx_OCN_Start+0x12>
 8006fce:	bf00      	nop
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	00010007 	.word	0x00010007

08006fdc <HAL_TIMEx_PWMN_Start>:
 8006fdc:	f7ff bf9a 	b.w	8006f14 <HAL_TIMEx_OCN_Start>

08006fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8006fe0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d03e      	beq.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006fe8:	b470      	push	{r4, r5, r6}
  tmpcr2 = htim->Instance->CR2;
 8006fea:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fec:	4d1f      	ldr	r5, [pc, #124]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ff4:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006ff6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ffa:	d028      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ffc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007000:	42aa      	cmp	r2, r5
 8007002:	d024      	beq.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007004:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007006:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800700e:	4333      	orrs	r3, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007010:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007014:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007016:	d00c      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007018:	4b15      	ldr	r3, [pc, #84]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800701a:	429a      	cmp	r2, r3
 800701c:	d009      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800701e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007022:	429a      	cmp	r2, r3
 8007024:	d005      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007026:	42aa      	cmp	r2, r5
 8007028:	d003      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800702a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800702e:	429a      	cmp	r2, r3
 8007030:	d104      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007032:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007034:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007038:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 800703a:	6094      	str	r4, [r2, #8]
  __HAL_UNLOCK(htim);
 800703c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800703e:	2201      	movs	r2, #1
 8007040:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007044:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007048:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800704a:	4618      	mov	r0, r3
}
 800704c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800704e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007050:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007054:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8007056:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800705a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007060:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007062:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007064:	e7e5      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8007066:	2002      	movs	r0, #2
}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40000400 	.word	0x40000400

08007074 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8007074:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d045      	beq.n	8007108 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 800707c:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800707e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007086:	4602      	mov	r2, r0
 8007088:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800708a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800708c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800708e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007092:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007098:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800709a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800709c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070a8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070aa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070b0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070b2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070b4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80070b8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80070be:	4c13      	ldr	r4, [pc, #76]	; (800710c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80070c0:	42a0      	cmp	r0, r4
 80070c2:	d00b      	beq.n	80070dc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80070c4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d007      	beq.n	80070dc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  __HAL_UNLOCK(htim);
 80070cc:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80070ce:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80070d0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 80070d4:	4608      	mov	r0, r1
}
 80070d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070da:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80070dc:	69cc      	ldr	r4, [r1, #28]
 80070de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070e2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80070e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070ea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070ee:	6a0c      	ldr	r4, [r1, #32]
 80070f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070f4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070f8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80070fe:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007100:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007104:	430b      	orrs	r3, r1
 8007106:	e7e1      	b.n	80070cc <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007108:	2002      	movs	r0, #2
}
 800710a:	4770      	bx	lr
 800710c:	40012c00 	.word	0x40012c00

08007110 <HAL_TIMEx_CommutCallback>:
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop

08007114 <HAL_TIMEx_BreakCallback>:
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <HAL_TIMEx_Break2Callback>:
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop

0800711c <HAL_TIMEx_EncoderIndexCallback>:
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <HAL_TIMEx_DirectionChangeCallback>:
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <HAL_TIMEx_IndexErrorCallback>:
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop

08007128 <HAL_TIMEx_TransitionErrorCallback>:
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop

0800712c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007130:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007132:	6882      	ldr	r2, [r0, #8]
 8007134:	6900      	ldr	r0, [r0, #16]
 8007136:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007138:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800713a:	4302      	orrs	r2, r0
 800713c:	430a      	orrs	r2, r1
 800713e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007140:	49a5      	ldr	r1, [pc, #660]	; (80073d8 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007142:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007144:	4029      	ands	r1, r5
 8007146:	430a      	orrs	r2, r1
 8007148:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68e1      	ldr	r1, [r4, #12]
 800714e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007152:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007154:	49a1      	ldr	r1, [pc, #644]	; (80073dc <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007156:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007158:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715a:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800715c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800715e:	d06b      	beq.n	8007238 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8007160:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007162:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007166:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800716a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800716c:	430a      	orrs	r2, r1
 800716e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007174:	f022 020f 	bic.w	r2, r2, #15
 8007178:	430a      	orrs	r2, r1
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800717c:	4a98      	ldr	r2, [pc, #608]	; (80073e0 <UART_SetConfig+0x2b4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d012      	beq.n	80071a8 <UART_SetConfig+0x7c>
 8007182:	4a98      	ldr	r2, [pc, #608]	; (80073e4 <UART_SetConfig+0x2b8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d035      	beq.n	80071f4 <UART_SetConfig+0xc8>
 8007188:	4a97      	ldr	r2, [pc, #604]	; (80073e8 <UART_SetConfig+0x2bc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	f000 80f8 	beq.w	8007380 <UART_SetConfig+0x254>
 8007190:	4a96      	ldr	r2, [pc, #600]	; (80073ec <UART_SetConfig+0x2c0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	f000 80a4 	beq.w	80072e0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8007198:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800719a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800719c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80071a0:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80071a4:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a8:	4b91      	ldr	r3, [pc, #580]	; (80073f0 <UART_SetConfig+0x2c4>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	f240 808d 	bls.w	80072d4 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80071be:	f000 80fc 	beq.w	80073ba <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c2:	f7fe fcf5 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d054      	beq.n	8007274 <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071cc:	6862      	ldr	r2, [r4, #4]
 80071ce:	4b89      	ldr	r3, [pc, #548]	; (80073f4 <UART_SetConfig+0x2c8>)
 80071d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80071d4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d8:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071dc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80071e0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e4:	f1a3 0210 	sub.w	r2, r3, #16
 80071e8:	428a      	cmp	r2, r1
 80071ea:	d8d5      	bhi.n	8007198 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	2000      	movs	r0, #0
 80071f0:	60d3      	str	r3, [r2, #12]
 80071f2:	e7d2      	b.n	800719a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071f4:	4b7e      	ldr	r3, [pc, #504]	; (80073f0 <UART_SetConfig+0x2c4>)
 80071f6:	4a80      	ldr	r2, [pc, #512]	; (80073f8 <UART_SetConfig+0x2cc>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007202:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007206:	d07d      	beq.n	8007304 <UART_SetConfig+0x1d8>
    switch (clocksource)
 8007208:	2b08      	cmp	r3, #8
 800720a:	d8c5      	bhi.n	8007198 <UART_SetConfig+0x6c>
 800720c:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <UART_SetConfig+0xe8>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	0800733b 	.word	0x0800733b
 8007218:	080071c3 	.word	0x080071c3
 800721c:	080073b7 	.word	0x080073b7
 8007220:	08007199 	.word	0x08007199
 8007224:	080072ff 	.word	0x080072ff
 8007228:	08007199 	.word	0x08007199
 800722c:	08007199 	.word	0x08007199
 8007230:	08007199 	.word	0x08007199
 8007234:	080073a7 	.word	0x080073a7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007238:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800723c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007240:	430a      	orrs	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007248:	4869      	ldr	r0, [pc, #420]	; (80073f0 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800724a:	f022 020f 	bic.w	r2, r2, #15
 800724e:	430a      	orrs	r2, r1
 8007250:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007252:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007256:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800725a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800725e:	f000 80a8 	beq.w	80073b2 <UART_SetConfig+0x286>
 8007262:	d809      	bhi.n	8007278 <UART_SetConfig+0x14c>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d038      	beq.n	80072da <UART_SetConfig+0x1ae>
 8007268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726c:	d194      	bne.n	8007198 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 800726e:	f7fe fb43 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007272:	b930      	cbnz	r0, 8007282 <UART_SetConfig+0x156>
 8007274:	2000      	movs	r0, #0
 8007276:	e790      	b.n	800719a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800727c:	d18c      	bne.n	8007198 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 800727e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007282:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007284:	4b5b      	ldr	r3, [pc, #364]	; (80073f4 <UART_SetConfig+0x2c8>)
 8007286:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007288:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800728c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007290:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007294:	4299      	cmp	r1, r3
 8007296:	f63f af7f 	bhi.w	8007198 <UART_SetConfig+0x6c>
 800729a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800729e:	f63f af7b 	bhi.w	8007198 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a2:	2300      	movs	r3, #0
 80072a4:	4619      	mov	r1, r3
 80072a6:	f7f9 fcf7 	bl	8000c98 <__aeabi_uldivmod>
 80072aa:	0209      	lsls	r1, r1, #8
 80072ac:	0203      	lsls	r3, r0, #8
 80072ae:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80072b2:	0868      	lsrs	r0, r5, #1
 80072b4:	1818      	adds	r0, r3, r0
 80072b6:	462a      	mov	r2, r5
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	f141 0100 	adc.w	r1, r1, #0
 80072c0:	f7f9 fcea 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072c4:	4a4d      	ldr	r2, [pc, #308]	; (80073fc <UART_SetConfig+0x2d0>)
 80072c6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80072ca:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072cc:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ce:	f63f af63 	bhi.w	8007198 <UART_SetConfig+0x6c>
 80072d2:	e78b      	b.n	80071ec <UART_SetConfig+0xc0>
 80072d4:	4a4a      	ldr	r2, [pc, #296]	; (8007400 <UART_SetConfig+0x2d4>)
 80072d6:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80072d8:	e793      	b.n	8007202 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80072da:	f7fe fc57 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
        break;
 80072de:	e7c8      	b.n	8007272 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072e0:	4b43      	ldr	r3, [pc, #268]	; (80073f0 <UART_SetConfig+0x2c4>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d06d      	beq.n	80073ca <UART_SetConfig+0x29e>
 80072ee:	d85d      	bhi.n	80073ac <UART_SetConfig+0x280>
 80072f0:	b303      	cbz	r3, 8007334 <UART_SetConfig+0x208>
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	f47f af50 	bne.w	8007198 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80072fc:	d020      	beq.n	8007340 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 80072fe:	f7fe fafb 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
        break;
 8007302:	e760      	b.n	80071c6 <UART_SetConfig+0x9a>
    switch (clocksource)
 8007304:	2b08      	cmp	r3, #8
 8007306:	f63f af47 	bhi.w	8007198 <UART_SetConfig+0x6c>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0x1e4>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	080073c1 	.word	0x080073c1
 8007314:	080073bb 	.word	0x080073bb
 8007318:	080073c7 	.word	0x080073c7
 800731c:	08007199 	.word	0x08007199
 8007320:	08007341 	.word	0x08007341
 8007324:	08007199 	.word	0x08007199
 8007328:	08007199 	.word	0x08007199
 800732c:	08007199 	.word	0x08007199
 8007330:	0800734b 	.word	0x0800734b
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007334:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007338:	d042      	beq.n	80073c0 <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 800733a:	f7fe fc27 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
        break;
 800733e:	e742      	b.n	80071c6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007340:	f7fe fada 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007344:	2800      	cmp	r0, #0
 8007346:	d095      	beq.n	8007274 <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007348:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800734a:	6862      	ldr	r2, [r4, #4]
 800734c:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <UART_SetConfig+0x2c8>)
 800734e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007352:	fbb0 f0f1 	udiv	r0, r0, r1
 8007356:	0853      	lsrs	r3, r2, #1
 8007358:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735c:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007360:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007364:	f1a0 0210 	sub.w	r2, r0, #16
 8007368:	429a      	cmp	r2, r3
 800736a:	f63f af15 	bhi.w	8007198 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800736e:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8007372:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007374:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007376:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800737a:	4318      	orrs	r0, r3
 800737c:	60d0      	str	r0, [r2, #12]
 800737e:	e779      	b.n	8007274 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <UART_SetConfig+0x2c4>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007386:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800738a:	2b20      	cmp	r3, #32
 800738c:	d01d      	beq.n	80073ca <UART_SetConfig+0x29e>
 800738e:	d804      	bhi.n	800739a <UART_SetConfig+0x26e>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0cf      	beq.n	8007334 <UART_SetConfig+0x208>
 8007394:	2b10      	cmp	r3, #16
 8007396:	d0af      	beq.n	80072f8 <UART_SetConfig+0x1cc>
 8007398:	e6fe      	b.n	8007198 <UART_SetConfig+0x6c>
 800739a:	2b30      	cmp	r3, #48	; 0x30
 800739c:	f47f aefc 	bne.w	8007198 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073a4:	d0d1      	beq.n	800734a <UART_SetConfig+0x21e>
    switch (clocksource)
 80073a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80073aa:	e70f      	b.n	80071cc <UART_SetConfig+0xa0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ac:	2bc0      	cmp	r3, #192	; 0xc0
 80073ae:	d0f7      	beq.n	80073a0 <UART_SetConfig+0x274>
 80073b0:	e6f2      	b.n	8007198 <UART_SetConfig+0x6c>
 80073b2:	4814      	ldr	r0, [pc, #80]	; (8007404 <UART_SetConfig+0x2d8>)
 80073b4:	e765      	b.n	8007282 <UART_SetConfig+0x156>
        pclk = (uint32_t) HSI_VALUE;
 80073b6:	4813      	ldr	r0, [pc, #76]	; (8007404 <UART_SetConfig+0x2d8>)
 80073b8:	e708      	b.n	80071cc <UART_SetConfig+0xa0>
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ba:	f7fe fbf9 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
        break;
 80073be:	e7c1      	b.n	8007344 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fe fbe4 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
        break;
 80073c4:	e7be      	b.n	8007344 <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 80073c6:	480f      	ldr	r0, [pc, #60]	; (8007404 <UART_SetConfig+0x2d8>)
 80073c8:	e7bf      	b.n	800734a <UART_SetConfig+0x21e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80073ce:	480d      	ldr	r0, [pc, #52]	; (8007404 <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d0:	f47f aefc 	bne.w	80071cc <UART_SetConfig+0xa0>
 80073d4:	e7b9      	b.n	800734a <UART_SetConfig+0x21e>
 80073d6:	bf00      	nop
 80073d8:	cfff69f3 	.word	0xcfff69f3
 80073dc:	40008000 	.word	0x40008000
 80073e0:	40013800 	.word	0x40013800
 80073e4:	40004400 	.word	0x40004400
 80073e8:	40004800 	.word	0x40004800
 80073ec:	40004c00 	.word	0x40004c00
 80073f0:	40021000 	.word	0x40021000
 80073f4:	0800b4a4 	.word	0x0800b4a4
 80073f8:	0800b494 	.word	0x0800b494
 80073fc:	000ffcff 	.word	0x000ffcff
 8007400:	0800b490 	.word	0x0800b490
 8007404:	00f42400 	.word	0x00f42400

08007408 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007408:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800740a:	07da      	lsls	r2, r3, #31
{
 800740c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800740e:	d506      	bpl.n	800741e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007410:	6801      	ldr	r1, [r0, #0]
 8007412:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007414:	684a      	ldr	r2, [r1, #4]
 8007416:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800741a:	4322      	orrs	r2, r4
 800741c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741e:	079c      	lsls	r4, r3, #30
 8007420:	d506      	bpl.n	8007430 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007422:	6801      	ldr	r1, [r0, #0]
 8007424:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007426:	684a      	ldr	r2, [r1, #4]
 8007428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800742c:	4322      	orrs	r2, r4
 800742e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007430:	0759      	lsls	r1, r3, #29
 8007432:	d506      	bpl.n	8007442 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007434:	6801      	ldr	r1, [r0, #0]
 8007436:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007438:	684a      	ldr	r2, [r1, #4]
 800743a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800743e:	4322      	orrs	r2, r4
 8007440:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007442:	071a      	lsls	r2, r3, #28
 8007444:	d506      	bpl.n	8007454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007446:	6801      	ldr	r1, [r0, #0]
 8007448:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800744a:	684a      	ldr	r2, [r1, #4]
 800744c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007450:	4322      	orrs	r2, r4
 8007452:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007454:	06dc      	lsls	r4, r3, #27
 8007456:	d506      	bpl.n	8007466 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007458:	6801      	ldr	r1, [r0, #0]
 800745a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800745c:	688a      	ldr	r2, [r1, #8]
 800745e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007462:	4322      	orrs	r2, r4
 8007464:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007466:	0699      	lsls	r1, r3, #26
 8007468:	d506      	bpl.n	8007478 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800746a:	6801      	ldr	r1, [r0, #0]
 800746c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800746e:	688a      	ldr	r2, [r1, #8]
 8007470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007474:	4322      	orrs	r2, r4
 8007476:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007478:	065a      	lsls	r2, r3, #25
 800747a:	d509      	bpl.n	8007490 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800747c:	6801      	ldr	r1, [r0, #0]
 800747e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007480:	684a      	ldr	r2, [r1, #4]
 8007482:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007486:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007488:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800748c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748e:	d00b      	beq.n	80074a8 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007490:	061b      	lsls	r3, r3, #24
 8007492:	d506      	bpl.n	80074a2 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007494:	6802      	ldr	r2, [r0, #0]
 8007496:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007498:	6853      	ldr	r3, [r2, #4]
 800749a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800749e:	430b      	orrs	r3, r1
 80074a0:	6053      	str	r3, [r2, #4]
  }
}
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a8:	684a      	ldr	r2, [r1, #4]
 80074aa:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80074ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80074b0:	4322      	orrs	r2, r4
 80074b2:	604a      	str	r2, [r1, #4]
 80074b4:	e7ec      	b.n	8007490 <UART_AdvFeatureConfig+0x88>
 80074b6:	bf00      	nop

080074b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c0:	6805      	ldr	r5, [r0, #0]
{
 80074c2:	4681      	mov	r9, r0
 80074c4:	460f      	mov	r7, r1
 80074c6:	4616      	mov	r6, r2
 80074c8:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ca:	e002      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80074d0:	d10c      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d2:	69ec      	ldr	r4, [r5, #28]
 80074d4:	ea37 0304 	bics.w	r3, r7, r4
 80074d8:	bf0c      	ite	eq
 80074da:	f04f 0c01 	moveq.w	ip, #1
 80074de:	f04f 0c00 	movne.w	ip, #0
 80074e2:	45b4      	cmp	ip, r6
 80074e4:	d0f2      	beq.n	80074cc <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80074e6:	2000      	movs	r0, #0
}
 80074e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ec:	f7fc fad0 	bl	8003a90 <HAL_GetTick>
 80074f0:	eba0 000a 	sub.w	r0, r0, sl
 80074f4:	4540      	cmp	r0, r8
 80074f6:	d82d      	bhi.n	8007554 <UART_WaitOnFlagUntilTimeout+0x9c>
 80074f8:	f1b8 0f00 	cmp.w	r8, #0
 80074fc:	d02a      	beq.n	8007554 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074fe:	f8d9 5000 	ldr.w	r5, [r9]
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	0759      	lsls	r1, r3, #29
 8007506:	462a      	mov	r2, r5
 8007508:	d5e3      	bpl.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800750a:	69eb      	ldr	r3, [r5, #28]
 800750c:	051b      	lsls	r3, r3, #20
 800750e:	d5e0      	bpl.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007514:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800751a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	e842 3100 	strex	r1, r3, [r2]
 8007522:	2900      	cmp	r1, #0
 8007524:	d1f7      	bne.n	8007516 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	f102 0308 	add.w	r3, r2, #8
 800752a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	f102 0008 	add.w	r0, r2, #8
 8007536:	e840 3100 	strex	r1, r3, [r0]
 800753a:	2900      	cmp	r1, #0
 800753c:	d1f3      	bne.n	8007526 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 800753e:	2320      	movs	r3, #32
 8007540:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007544:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007548:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          return HAL_TIMEOUT;
 800754c:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800754e:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007552:	e7c9      	b.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007554:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800755c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	e842 3100 	strex	r1, r3, [r2]
 8007564:	2900      	cmp	r1, #0
 8007566:	d1f7      	bne.n	8007558 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	f102 0308 	add.w	r3, r2, #8
 800756c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	f102 0008 	add.w	r0, r2, #8
 8007578:	e840 3100 	strex	r1, r3, [r0]
 800757c:	2900      	cmp	r1, #0
 800757e:	d1f3      	bne.n	8007568 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8007580:	2320      	movs	r3, #32
 8007582:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8007586:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800758a:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 800758e:	2003      	movs	r0, #3
 8007590:	e7aa      	b.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007592:	bf00      	nop

08007594 <HAL_UART_Transmit>:
{
 8007594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007598:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800759a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800759e:	2820      	cmp	r0, #32
{
 80075a0:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80075a2:	d14a      	bne.n	800763a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80075a4:	460d      	mov	r5, r1
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d043      	beq.n	8007632 <HAL_UART_Transmit+0x9e>
 80075aa:	4617      	mov	r7, r2
 80075ac:	2a00      	cmp	r2, #0
 80075ae:	d040      	beq.n	8007632 <HAL_UART_Transmit+0x9e>
 80075b0:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80075b2:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d03f      	beq.n	800763a <HAL_UART_Transmit+0xa6>
 80075ba:	2301      	movs	r3, #1
 80075bc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075c4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 80075ce:	f7fc fa5f 	bl	8003a90 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80075d4:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80075dc:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    tickstart = HAL_GetTick();
 80075e0:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	d02e      	beq.n	8007642 <HAL_UART_Transmit+0xae>
    while (huart->TxXferCount > 0U)
 80075e4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80075e8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80075ea:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80075ec:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80075f0:	b973      	cbnz	r3, 8007610 <HAL_UART_Transmit+0x7c>
 80075f2:	e030      	b.n	8007656 <HAL_UART_Transmit+0xc2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80075fa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80075fc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8007600:	3a01      	subs	r2, #1
 8007602:	b292      	uxth	r2, r2
 8007604:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007608:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800760c:	b292      	uxth	r2, r2
 800760e:	b312      	cbz	r2, 8007656 <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007610:	9600      	str	r6, [sp, #0]
 8007612:	4643      	mov	r3, r8
 8007614:	2200      	movs	r2, #0
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	4620      	mov	r0, r4
 800761a:	f7ff ff4d 	bl	80074b8 <UART_WaitOnFlagUntilTimeout>
 800761e:	b9b0      	cbnz	r0, 800764e <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 8007620:	2d00      	cmp	r5, #0
 8007622:	d1e7      	bne.n	80075f4 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007624:	f839 3b02 	ldrh.w	r3, [r9], #2
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8007630:	e7e4      	b.n	80075fc <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8007632:	2001      	movs	r0, #1
}
 8007634:	b003      	add	sp, #12
 8007636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800763a:	2002      	movs	r0, #2
}
 800763c:	b003      	add	sp, #12
 800763e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1cd      	bne.n	80075e4 <HAL_UART_Transmit+0x50>
 8007648:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800764a:	461d      	mov	r5, r3
 800764c:	e7ca      	b.n	80075e4 <HAL_UART_Transmit+0x50>
        return HAL_TIMEOUT;
 800764e:	2003      	movs	r0, #3
}
 8007650:	b003      	add	sp, #12
 8007652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007656:	9600      	str	r6, [sp, #0]
 8007658:	4643      	mov	r3, r8
 800765a:	2200      	movs	r2, #0
 800765c:	2140      	movs	r1, #64	; 0x40
 800765e:	4620      	mov	r0, r4
 8007660:	f7ff ff2a 	bl	80074b8 <UART_WaitOnFlagUntilTimeout>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1f2      	bne.n	800764e <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 8007668:	2320      	movs	r3, #32
 800766a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800766e:	e7e1      	b.n	8007634 <HAL_UART_Transmit+0xa0>

08007670 <UART_CheckIdleState>:
{
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	2600      	movs	r6, #0
{
 8007676:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800767c:	f7fc fa08 	bl	8003a90 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007686:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007688:	d40e      	bmi.n	80076a8 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	075b      	lsls	r3, r3, #29
 800768e:	d41a      	bmi.n	80076c6 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007690:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007692:	2220      	movs	r2, #32
  return HAL_OK;
 8007694:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007696:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800769a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800769e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80076a4:	b002      	add	sp, #8
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4632      	mov	r2, r6
 80076b0:	4603      	mov	r3, r0
 80076b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff fefe 	bl	80074b8 <UART_WaitOnFlagUntilTimeout>
 80076bc:	b978      	cbnz	r0, 80076de <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	075b      	lsls	r3, r3, #29
 80076c4:	d5e4      	bpl.n	8007690 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	2200      	movs	r2, #0
 80076ce:	462b      	mov	r3, r5
 80076d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff feef 	bl	80074b8 <UART_WaitOnFlagUntilTimeout>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d0d8      	beq.n	8007690 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80076de:	2003      	movs	r0, #3
}
 80076e0:	b002      	add	sp, #8
 80076e2:	bd70      	pop	{r4, r5, r6, pc}

080076e4 <HAL_UART_Init>:
  if (huart == NULL)
 80076e4:	b380      	cbz	r0, 8007748 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80076e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80076ea:	b510      	push	{r4, lr}
 80076ec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80076ee:	b333      	cbz	r3, 800773e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 80076f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80076f2:	2324      	movs	r3, #36	; 0x24
 80076f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80076f8:	6813      	ldr	r3, [r2, #0]
 80076fa:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076fe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007700:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007702:	f7ff fd13 	bl	800712c <UART_SetConfig>
 8007706:	2801      	cmp	r0, #1
 8007708:	d017      	beq.n	800773a <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800770a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800770c:	b98b      	cbnz	r3, 8007732 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800771e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007726:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007728:	601a      	str	r2, [r3, #0]
}
 800772a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800772e:	f7ff bf9f 	b.w	8007670 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8007732:	4620      	mov	r0, r4
 8007734:	f7ff fe68 	bl	8007408 <UART_AdvFeatureConfig>
 8007738:	e7e9      	b.n	800770e <HAL_UART_Init+0x2a>
}
 800773a:	2001      	movs	r0, #1
 800773c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800773e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007742:	f7fc f863 	bl	800380c <HAL_UART_MspInit>
 8007746:	e7d3      	b.n	80076f0 <HAL_UART_Init+0xc>
}
 8007748:	2001      	movs	r0, #1
 800774a:	4770      	bx	lr

0800774c <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800774c:	6803      	ldr	r3, [r0, #0]
 800774e:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007750:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8007752:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007754:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007758:	4d0a      	ldr	r5, [pc, #40]	; (8007784 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800775a:	4c0b      	ldr	r4, [pc, #44]	; (8007788 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800775c:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007760:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007764:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007766:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007768:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800776c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800776e:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007772:	00db      	lsls	r3, r3, #3
  }
}
 8007774:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007776:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800777a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800777e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8007782:	4770      	bx	lr
 8007784:	0800b4c4 	.word	0x0800b4c4
 8007788:	0800b4bc 	.word	0x0800b4bc

0800778c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800778c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007790:	2b01      	cmp	r3, #1
 8007792:	d017      	beq.n	80077c4 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007794:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007796:	2324      	movs	r3, #36	; 0x24
{
 8007798:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800779a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779e:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80077a0:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077a2:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80077a4:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077a8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80077ac:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077ae:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b0:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 80077b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80077b6:	2220      	movs	r2, #32
 80077b8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 80077bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80077c0:	4618      	mov	r0, r3
}
 80077c2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80077c4:	2002      	movs	r0, #2
}
 80077c6:	4770      	bx	lr

080077c8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80077c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80077ca:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d022      	beq.n	8007818 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80077d2:	2201      	movs	r2, #1
 80077d4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d8:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80077da:	2224      	movs	r2, #36	; 0x24
 80077dc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	f022 0201 	bic.w	r2, r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80077f0:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f2:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077f4:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f6:	4604      	mov	r4, r0
 80077f8:	b152      	cbz	r2, 8007810 <HAL_UARTEx_SetTxFifoThreshold+0x48>
 80077fa:	f7ff ffa7 	bl	800774c <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077fe:	6803      	ldr	r3, [r0, #0]
 8007800:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8007802:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007804:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8007806:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800780a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 800780e:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007810:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007814:	6682      	str	r2, [r0, #104]	; 0x68
 8007816:	e7f3      	b.n	8007800 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8007818:	2002      	movs	r0, #2
}
 800781a:	bd38      	pop	{r3, r4, r5, pc}

0800781c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800781c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800781e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007822:	2b01      	cmp	r3, #1
 8007824:	d022      	beq.n	800786c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8007826:	2201      	movs	r2, #1
 8007828:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800782c:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800782e:	2224      	movs	r2, #36	; 0x24
 8007830:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007834:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007844:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007846:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007848:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800784a:	4604      	mov	r4, r0
 800784c:	b152      	cbz	r2, 8007864 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 800784e:	f7ff ff7d 	bl	800774c <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007852:	6803      	ldr	r3, [r0, #0]
 8007854:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8007856:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007858:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800785a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800785e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8007862:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007864:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007868:	6682      	str	r2, [r0, #104]	; 0x68
 800786a:	e7f3      	b.n	8007854 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800786c:	2002      	movs	r0, #2
}
 800786e:	bd38      	pop	{r3, r4, r5, pc}

08007870 <__errno>:
 8007870:	4b01      	ldr	r3, [pc, #4]	; (8007878 <__errno+0x8>)
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000002c 	.word	0x2000002c

0800787c <__libc_init_array>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4d0d      	ldr	r5, [pc, #52]	; (80078b4 <__libc_init_array+0x38>)
 8007880:	4c0d      	ldr	r4, [pc, #52]	; (80078b8 <__libc_init_array+0x3c>)
 8007882:	1b64      	subs	r4, r4, r5
 8007884:	10a4      	asrs	r4, r4, #2
 8007886:	2600      	movs	r6, #0
 8007888:	42a6      	cmp	r6, r4
 800788a:	d109      	bne.n	80078a0 <__libc_init_array+0x24>
 800788c:	4d0b      	ldr	r5, [pc, #44]	; (80078bc <__libc_init_array+0x40>)
 800788e:	4c0c      	ldr	r4, [pc, #48]	; (80078c0 <__libc_init_array+0x44>)
 8007890:	f003 fd66 	bl	800b360 <_init>
 8007894:	1b64      	subs	r4, r4, r5
 8007896:	10a4      	asrs	r4, r4, #2
 8007898:	2600      	movs	r6, #0
 800789a:	42a6      	cmp	r6, r4
 800789c:	d105      	bne.n	80078aa <__libc_init_array+0x2e>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a4:	4798      	blx	r3
 80078a6:	3601      	adds	r6, #1
 80078a8:	e7ee      	b.n	8007888 <__libc_init_array+0xc>
 80078aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ae:	4798      	blx	r3
 80078b0:	3601      	adds	r6, #1
 80078b2:	e7f2      	b.n	800789a <__libc_init_array+0x1e>
 80078b4:	0800bc84 	.word	0x0800bc84
 80078b8:	0800bc84 	.word	0x0800bc84
 80078bc:	0800bc84 	.word	0x0800bc84
 80078c0:	0800bc88 	.word	0x0800bc88

080078c4 <memset>:
 80078c4:	4402      	add	r2, r0
 80078c6:	4603      	mov	r3, r0
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d100      	bne.n	80078ce <memset+0xa>
 80078cc:	4770      	bx	lr
 80078ce:	f803 1b01 	strb.w	r1, [r3], #1
 80078d2:	e7f9      	b.n	80078c8 <memset+0x4>

080078d4 <__cvt>:
 80078d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	ec55 4b10 	vmov	r4, r5, d0
 80078dc:	2d00      	cmp	r5, #0
 80078de:	460e      	mov	r6, r1
 80078e0:	4619      	mov	r1, r3
 80078e2:	462b      	mov	r3, r5
 80078e4:	bfbb      	ittet	lt
 80078e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078ea:	461d      	movlt	r5, r3
 80078ec:	2300      	movge	r3, #0
 80078ee:	232d      	movlt	r3, #45	; 0x2d
 80078f0:	700b      	strb	r3, [r1, #0]
 80078f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078f8:	4691      	mov	r9, r2
 80078fa:	f023 0820 	bic.w	r8, r3, #32
 80078fe:	bfbc      	itt	lt
 8007900:	4622      	movlt	r2, r4
 8007902:	4614      	movlt	r4, r2
 8007904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007908:	d005      	beq.n	8007916 <__cvt+0x42>
 800790a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800790e:	d100      	bne.n	8007912 <__cvt+0x3e>
 8007910:	3601      	adds	r6, #1
 8007912:	2102      	movs	r1, #2
 8007914:	e000      	b.n	8007918 <__cvt+0x44>
 8007916:	2103      	movs	r1, #3
 8007918:	ab03      	add	r3, sp, #12
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	ab02      	add	r3, sp, #8
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	ec45 4b10 	vmov	d0, r4, r5
 8007924:	4653      	mov	r3, sl
 8007926:	4632      	mov	r2, r6
 8007928:	f000 fcea 	bl	8008300 <_dtoa_r>
 800792c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007930:	4607      	mov	r7, r0
 8007932:	d102      	bne.n	800793a <__cvt+0x66>
 8007934:	f019 0f01 	tst.w	r9, #1
 8007938:	d022      	beq.n	8007980 <__cvt+0xac>
 800793a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800793e:	eb07 0906 	add.w	r9, r7, r6
 8007942:	d110      	bne.n	8007966 <__cvt+0x92>
 8007944:	783b      	ldrb	r3, [r7, #0]
 8007946:	2b30      	cmp	r3, #48	; 0x30
 8007948:	d10a      	bne.n	8007960 <__cvt+0x8c>
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f9 f8e1 	bl	8000b18 <__aeabi_dcmpeq>
 8007956:	b918      	cbnz	r0, 8007960 <__cvt+0x8c>
 8007958:	f1c6 0601 	rsb	r6, r6, #1
 800795c:	f8ca 6000 	str.w	r6, [sl]
 8007960:	f8da 3000 	ldr.w	r3, [sl]
 8007964:	4499      	add	r9, r3
 8007966:	2200      	movs	r2, #0
 8007968:	2300      	movs	r3, #0
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f9 f8d3 	bl	8000b18 <__aeabi_dcmpeq>
 8007972:	b108      	cbz	r0, 8007978 <__cvt+0xa4>
 8007974:	f8cd 900c 	str.w	r9, [sp, #12]
 8007978:	2230      	movs	r2, #48	; 0x30
 800797a:	9b03      	ldr	r3, [sp, #12]
 800797c:	454b      	cmp	r3, r9
 800797e:	d307      	bcc.n	8007990 <__cvt+0xbc>
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007984:	1bdb      	subs	r3, r3, r7
 8007986:	4638      	mov	r0, r7
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	b004      	add	sp, #16
 800798c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007990:	1c59      	adds	r1, r3, #1
 8007992:	9103      	str	r1, [sp, #12]
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	e7f0      	b.n	800797a <__cvt+0xa6>

08007998 <__exponent>:
 8007998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799a:	4603      	mov	r3, r0
 800799c:	2900      	cmp	r1, #0
 800799e:	bfb8      	it	lt
 80079a0:	4249      	neglt	r1, r1
 80079a2:	f803 2b02 	strb.w	r2, [r3], #2
 80079a6:	bfb4      	ite	lt
 80079a8:	222d      	movlt	r2, #45	; 0x2d
 80079aa:	222b      	movge	r2, #43	; 0x2b
 80079ac:	2909      	cmp	r1, #9
 80079ae:	7042      	strb	r2, [r0, #1]
 80079b0:	dd2a      	ble.n	8007a08 <__exponent+0x70>
 80079b2:	f10d 0407 	add.w	r4, sp, #7
 80079b6:	46a4      	mov	ip, r4
 80079b8:	270a      	movs	r7, #10
 80079ba:	46a6      	mov	lr, r4
 80079bc:	460a      	mov	r2, r1
 80079be:	fb91 f6f7 	sdiv	r6, r1, r7
 80079c2:	fb07 1516 	mls	r5, r7, r6, r1
 80079c6:	3530      	adds	r5, #48	; 0x30
 80079c8:	2a63      	cmp	r2, #99	; 0x63
 80079ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80079ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079d2:	4631      	mov	r1, r6
 80079d4:	dcf1      	bgt.n	80079ba <__exponent+0x22>
 80079d6:	3130      	adds	r1, #48	; 0x30
 80079d8:	f1ae 0502 	sub.w	r5, lr, #2
 80079dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079e0:	1c44      	adds	r4, r0, #1
 80079e2:	4629      	mov	r1, r5
 80079e4:	4561      	cmp	r1, ip
 80079e6:	d30a      	bcc.n	80079fe <__exponent+0x66>
 80079e8:	f10d 0209 	add.w	r2, sp, #9
 80079ec:	eba2 020e 	sub.w	r2, r2, lr
 80079f0:	4565      	cmp	r5, ip
 80079f2:	bf88      	it	hi
 80079f4:	2200      	movhi	r2, #0
 80079f6:	4413      	add	r3, r2
 80079f8:	1a18      	subs	r0, r3, r0
 80079fa:	b003      	add	sp, #12
 80079fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a06:	e7ed      	b.n	80079e4 <__exponent+0x4c>
 8007a08:	2330      	movs	r3, #48	; 0x30
 8007a0a:	3130      	adds	r1, #48	; 0x30
 8007a0c:	7083      	strb	r3, [r0, #2]
 8007a0e:	70c1      	strb	r1, [r0, #3]
 8007a10:	1d03      	adds	r3, r0, #4
 8007a12:	e7f1      	b.n	80079f8 <__exponent+0x60>

08007a14 <_printf_float>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	ed2d 8b02 	vpush	{d8}
 8007a1c:	b08d      	sub	sp, #52	; 0x34
 8007a1e:	460c      	mov	r4, r1
 8007a20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a24:	4616      	mov	r6, r2
 8007a26:	461f      	mov	r7, r3
 8007a28:	4605      	mov	r5, r0
 8007a2a:	f001 fa57 	bl	8008edc <_localeconv_r>
 8007a2e:	f8d0 a000 	ldr.w	sl, [r0]
 8007a32:	4650      	mov	r0, sl
 8007a34:	f7f8 fbf4 	bl	8000220 <strlen>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	9305      	str	r3, [sp, #20]
 8007a40:	f8d8 3000 	ldr.w	r3, [r8]
 8007a44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a48:	3307      	adds	r3, #7
 8007a4a:	f023 0307 	bic.w	r3, r3, #7
 8007a4e:	f103 0208 	add.w	r2, r3, #8
 8007a52:	f8c8 2000 	str.w	r2, [r8]
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a6c:	ee08 0a10 	vmov	s16, r0
 8007a70:	4b9f      	ldr	r3, [pc, #636]	; (8007cf0 <_printf_float+0x2dc>)
 8007a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a76:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7a:	f7f9 f87f 	bl	8000b7c <__aeabi_dcmpun>
 8007a7e:	bb88      	cbnz	r0, 8007ae4 <_printf_float+0xd0>
 8007a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a84:	4b9a      	ldr	r3, [pc, #616]	; (8007cf0 <_printf_float+0x2dc>)
 8007a86:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8a:	f7f9 f859 	bl	8000b40 <__aeabi_dcmple>
 8007a8e:	bb48      	cbnz	r0, 8007ae4 <_printf_float+0xd0>
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f9 f848 	bl	8000b2c <__aeabi_dcmplt>
 8007a9c:	b110      	cbz	r0, 8007aa4 <_printf_float+0x90>
 8007a9e:	232d      	movs	r3, #45	; 0x2d
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa4:	4b93      	ldr	r3, [pc, #588]	; (8007cf4 <_printf_float+0x2e0>)
 8007aa6:	4894      	ldr	r0, [pc, #592]	; (8007cf8 <_printf_float+0x2e4>)
 8007aa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007aac:	bf94      	ite	ls
 8007aae:	4698      	movls	r8, r3
 8007ab0:	4680      	movhi	r8, r0
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	9b05      	ldr	r3, [sp, #20]
 8007ab8:	f023 0204 	bic.w	r2, r3, #4
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	f04f 0900 	mov.w	r9, #0
 8007ac2:	9700      	str	r7, [sp, #0]
 8007ac4:	4633      	mov	r3, r6
 8007ac6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 f9d8 	bl	8007e80 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f040 8090 	bne.w	8007bf6 <_printf_float+0x1e2>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	b00d      	add	sp, #52	; 0x34
 8007adc:	ecbd 8b02 	vpop	{d8}
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f9 f846 	bl	8000b7c <__aeabi_dcmpun>
 8007af0:	b140      	cbz	r0, 8007b04 <_printf_float+0xf0>
 8007af2:	464b      	mov	r3, r9
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfbc      	itt	lt
 8007af8:	232d      	movlt	r3, #45	; 0x2d
 8007afa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007afe:	487f      	ldr	r0, [pc, #508]	; (8007cfc <_printf_float+0x2e8>)
 8007b00:	4b7f      	ldr	r3, [pc, #508]	; (8007d00 <_printf_float+0x2ec>)
 8007b02:	e7d1      	b.n	8007aa8 <_printf_float+0x94>
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b0a:	9206      	str	r2, [sp, #24]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	d13f      	bne.n	8007b90 <_printf_float+0x17c>
 8007b10:	2306      	movs	r3, #6
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	9b05      	ldr	r3, [sp, #20]
 8007b16:	6861      	ldr	r1, [r4, #4]
 8007b18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9303      	str	r3, [sp, #12]
 8007b20:	ab0a      	add	r3, sp, #40	; 0x28
 8007b22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b26:	ab09      	add	r3, sp, #36	; 0x24
 8007b28:	ec49 8b10 	vmov	d0, r8, r9
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7ff fecd 	bl	80078d4 <__cvt>
 8007b3a:	9b06      	ldr	r3, [sp, #24]
 8007b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b3e:	2b47      	cmp	r3, #71	; 0x47
 8007b40:	4680      	mov	r8, r0
 8007b42:	d108      	bne.n	8007b56 <_printf_float+0x142>
 8007b44:	1cc8      	adds	r0, r1, #3
 8007b46:	db02      	blt.n	8007b4e <_printf_float+0x13a>
 8007b48:	6863      	ldr	r3, [r4, #4]
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	dd41      	ble.n	8007bd2 <_printf_float+0x1be>
 8007b4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b52:	fa5f fb8b 	uxtb.w	fp, fp
 8007b56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b5a:	d820      	bhi.n	8007b9e <_printf_float+0x18a>
 8007b5c:	3901      	subs	r1, #1
 8007b5e:	465a      	mov	r2, fp
 8007b60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b64:	9109      	str	r1, [sp, #36]	; 0x24
 8007b66:	f7ff ff17 	bl	8007998 <__exponent>
 8007b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b6c:	1813      	adds	r3, r2, r0
 8007b6e:	2a01      	cmp	r2, #1
 8007b70:	4681      	mov	r9, r0
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	dc02      	bgt.n	8007b7c <_printf_float+0x168>
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	07d2      	lsls	r2, r2, #31
 8007b7a:	d501      	bpl.n	8007b80 <_printf_float+0x16c>
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d09c      	beq.n	8007ac2 <_printf_float+0xae>
 8007b88:	232d      	movs	r3, #45	; 0x2d
 8007b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8e:	e798      	b.n	8007ac2 <_printf_float+0xae>
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	2a47      	cmp	r2, #71	; 0x47
 8007b94:	d1be      	bne.n	8007b14 <_printf_float+0x100>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1bc      	bne.n	8007b14 <_printf_float+0x100>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7b9      	b.n	8007b12 <_printf_float+0xfe>
 8007b9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ba2:	d118      	bne.n	8007bd6 <_printf_float+0x1c2>
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	dd0b      	ble.n	8007bc2 <_printf_float+0x1ae>
 8007baa:	6121      	str	r1, [r4, #16]
 8007bac:	b913      	cbnz	r3, 8007bb4 <_printf_float+0x1a0>
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	07d0      	lsls	r0, r2, #31
 8007bb2:	d502      	bpl.n	8007bba <_printf_float+0x1a6>
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	440b      	add	r3, r1
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bbc:	f04f 0900 	mov.w	r9, #0
 8007bc0:	e7de      	b.n	8007b80 <_printf_float+0x16c>
 8007bc2:	b913      	cbnz	r3, 8007bca <_printf_float+0x1b6>
 8007bc4:	6822      	ldr	r2, [r4, #0]
 8007bc6:	07d2      	lsls	r2, r2, #31
 8007bc8:	d501      	bpl.n	8007bce <_printf_float+0x1ba>
 8007bca:	3302      	adds	r3, #2
 8007bcc:	e7f4      	b.n	8007bb8 <_printf_float+0x1a4>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e7f2      	b.n	8007bb8 <_printf_float+0x1a4>
 8007bd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	db05      	blt.n	8007be8 <_printf_float+0x1d4>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	6121      	str	r1, [r4, #16]
 8007be0:	07d8      	lsls	r0, r3, #31
 8007be2:	d5ea      	bpl.n	8007bba <_printf_float+0x1a6>
 8007be4:	1c4b      	adds	r3, r1, #1
 8007be6:	e7e7      	b.n	8007bb8 <_printf_float+0x1a4>
 8007be8:	2900      	cmp	r1, #0
 8007bea:	bfd4      	ite	le
 8007bec:	f1c1 0202 	rsble	r2, r1, #2
 8007bf0:	2201      	movgt	r2, #1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	e7e0      	b.n	8007bb8 <_printf_float+0x1a4>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	055a      	lsls	r2, r3, #21
 8007bfa:	d407      	bmi.n	8007c0c <_printf_float+0x1f8>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	4642      	mov	r2, r8
 8007c00:	4631      	mov	r1, r6
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	d12c      	bne.n	8007c64 <_printf_float+0x250>
 8007c0a:	e764      	b.n	8007ad6 <_printf_float+0xc2>
 8007c0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c10:	f240 80e0 	bls.w	8007dd4 <_printf_float+0x3c0>
 8007c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f7f8 ff7c 	bl	8000b18 <__aeabi_dcmpeq>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d034      	beq.n	8007c8e <_printf_float+0x27a>
 8007c24:	4a37      	ldr	r2, [pc, #220]	; (8007d04 <_printf_float+0x2f0>)
 8007c26:	2301      	movs	r3, #1
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f af51 	beq.w	8007ad6 <_printf_float+0xc2>
 8007c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	db02      	blt.n	8007c42 <_printf_float+0x22e>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	07d8      	lsls	r0, r3, #31
 8007c40:	d510      	bpl.n	8007c64 <_printf_float+0x250>
 8007c42:	ee18 3a10 	vmov	r3, s16
 8007c46:	4652      	mov	r2, sl
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f af41 	beq.w	8007ad6 <_printf_float+0xc2>
 8007c54:	f04f 0800 	mov.w	r8, #0
 8007c58:	f104 091a 	add.w	r9, r4, #26
 8007c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	4543      	cmp	r3, r8
 8007c62:	dc09      	bgt.n	8007c78 <_printf_float+0x264>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	079b      	lsls	r3, r3, #30
 8007c68:	f100 8105 	bmi.w	8007e76 <_printf_float+0x462>
 8007c6c:	68e0      	ldr	r0, [r4, #12]
 8007c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c70:	4298      	cmp	r0, r3
 8007c72:	bfb8      	it	lt
 8007c74:	4618      	movlt	r0, r3
 8007c76:	e730      	b.n	8007ada <_printf_float+0xc6>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	464a      	mov	r2, r9
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f af27 	beq.w	8007ad6 <_printf_float+0xc2>
 8007c88:	f108 0801 	add.w	r8, r8, #1
 8007c8c:	e7e6      	b.n	8007c5c <_printf_float+0x248>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dc39      	bgt.n	8007d08 <_printf_float+0x2f4>
 8007c94:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <_printf_float+0x2f0>)
 8007c96:	2301      	movs	r3, #1
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af19 	beq.w	8007ad6 <_printf_float+0xc2>
 8007ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	d102      	bne.n	8007cb2 <_printf_float+0x29e>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	d5d8      	bpl.n	8007c64 <_printf_float+0x250>
 8007cb2:	ee18 3a10 	vmov	r3, s16
 8007cb6:	4652      	mov	r2, sl
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f af09 	beq.w	8007ad6 <_printf_float+0xc2>
 8007cc4:	f04f 0900 	mov.w	r9, #0
 8007cc8:	f104 0a1a 	add.w	sl, r4, #26
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	425b      	negs	r3, r3
 8007cd0:	454b      	cmp	r3, r9
 8007cd2:	dc01      	bgt.n	8007cd8 <_printf_float+0x2c4>
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd6:	e792      	b.n	8007bfe <_printf_float+0x1ea>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4652      	mov	r2, sl
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f aef7 	beq.w	8007ad6 <_printf_float+0xc2>
 8007ce8:	f109 0901 	add.w	r9, r9, #1
 8007cec:	e7ee      	b.n	8007ccc <_printf_float+0x2b8>
 8007cee:	bf00      	nop
 8007cf0:	7fefffff 	.word	0x7fefffff
 8007cf4:	0800b4d0 	.word	0x0800b4d0
 8007cf8:	0800b4d4 	.word	0x0800b4d4
 8007cfc:	0800b4dc 	.word	0x0800b4dc
 8007d00:	0800b4d8 	.word	0x0800b4d8
 8007d04:	0800b4e0 	.word	0x0800b4e0
 8007d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	bfa8      	it	ge
 8007d10:	461a      	movge	r2, r3
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	4691      	mov	r9, r2
 8007d16:	dc37      	bgt.n	8007d88 <_printf_float+0x374>
 8007d18:	f04f 0b00 	mov.w	fp, #0
 8007d1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d20:	f104 021a 	add.w	r2, r4, #26
 8007d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d26:	9305      	str	r3, [sp, #20]
 8007d28:	eba3 0309 	sub.w	r3, r3, r9
 8007d2c:	455b      	cmp	r3, fp
 8007d2e:	dc33      	bgt.n	8007d98 <_printf_float+0x384>
 8007d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d34:	429a      	cmp	r2, r3
 8007d36:	db3b      	blt.n	8007db0 <_printf_float+0x39c>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	07da      	lsls	r2, r3, #31
 8007d3c:	d438      	bmi.n	8007db0 <_printf_float+0x39c>
 8007d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d40:	9a05      	ldr	r2, [sp, #20]
 8007d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d44:	1a9a      	subs	r2, r3, r2
 8007d46:	eba3 0901 	sub.w	r9, r3, r1
 8007d4a:	4591      	cmp	r9, r2
 8007d4c:	bfa8      	it	ge
 8007d4e:	4691      	movge	r9, r2
 8007d50:	f1b9 0f00 	cmp.w	r9, #0
 8007d54:	dc35      	bgt.n	8007dc2 <_printf_float+0x3ae>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d5e:	f104 0a1a 	add.w	sl, r4, #26
 8007d62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	eba3 0309 	sub.w	r3, r3, r9
 8007d6c:	4543      	cmp	r3, r8
 8007d6e:	f77f af79 	ble.w	8007c64 <_printf_float+0x250>
 8007d72:	2301      	movs	r3, #1
 8007d74:	4652      	mov	r2, sl
 8007d76:	4631      	mov	r1, r6
 8007d78:	4628      	mov	r0, r5
 8007d7a:	47b8      	blx	r7
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	f43f aeaa 	beq.w	8007ad6 <_printf_float+0xc2>
 8007d82:	f108 0801 	add.w	r8, r8, #1
 8007d86:	e7ec      	b.n	8007d62 <_printf_float+0x34e>
 8007d88:	4613      	mov	r3, r2
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	d1c0      	bne.n	8007d18 <_printf_float+0x304>
 8007d96:	e69e      	b.n	8007ad6 <_printf_float+0xc2>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	9205      	str	r2, [sp, #20]
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f ae97 	beq.w	8007ad6 <_printf_float+0xc2>
 8007da8:	9a05      	ldr	r2, [sp, #20]
 8007daa:	f10b 0b01 	add.w	fp, fp, #1
 8007dae:	e7b9      	b.n	8007d24 <_printf_float+0x310>
 8007db0:	ee18 3a10 	vmov	r3, s16
 8007db4:	4652      	mov	r2, sl
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d1be      	bne.n	8007d3e <_printf_float+0x32a>
 8007dc0:	e689      	b.n	8007ad6 <_printf_float+0xc2>
 8007dc2:	9a05      	ldr	r2, [sp, #20]
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	4442      	add	r2, r8
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d1c1      	bne.n	8007d56 <_printf_float+0x342>
 8007dd2:	e680      	b.n	8007ad6 <_printf_float+0xc2>
 8007dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	dc01      	bgt.n	8007dde <_printf_float+0x3ca>
 8007dda:	07db      	lsls	r3, r3, #31
 8007ddc:	d538      	bpl.n	8007e50 <_printf_float+0x43c>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4642      	mov	r2, r8
 8007de2:	4631      	mov	r1, r6
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b8      	blx	r7
 8007de8:	3001      	adds	r0, #1
 8007dea:	f43f ae74 	beq.w	8007ad6 <_printf_float+0xc2>
 8007dee:	ee18 3a10 	vmov	r3, s16
 8007df2:	4652      	mov	r2, sl
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f ae6b 	beq.w	8007ad6 <_printf_float+0xc2>
 8007e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e04:	2200      	movs	r2, #0
 8007e06:	2300      	movs	r3, #0
 8007e08:	f7f8 fe86 	bl	8000b18 <__aeabi_dcmpeq>
 8007e0c:	b9d8      	cbnz	r0, 8007e46 <_printf_float+0x432>
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e10:	f108 0201 	add.w	r2, r8, #1
 8007e14:	3b01      	subs	r3, #1
 8007e16:	4631      	mov	r1, r6
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b8      	blx	r7
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d10e      	bne.n	8007e3e <_printf_float+0x42a>
 8007e20:	e659      	b.n	8007ad6 <_printf_float+0xc2>
 8007e22:	2301      	movs	r3, #1
 8007e24:	4652      	mov	r2, sl
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f43f ae52 	beq.w	8007ad6 <_printf_float+0xc2>
 8007e32:	f108 0801 	add.w	r8, r8, #1
 8007e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	4543      	cmp	r3, r8
 8007e3c:	dcf1      	bgt.n	8007e22 <_printf_float+0x40e>
 8007e3e:	464b      	mov	r3, r9
 8007e40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e44:	e6dc      	b.n	8007c00 <_printf_float+0x1ec>
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	f104 0a1a 	add.w	sl, r4, #26
 8007e4e:	e7f2      	b.n	8007e36 <_printf_float+0x422>
 8007e50:	2301      	movs	r3, #1
 8007e52:	4642      	mov	r2, r8
 8007e54:	e7df      	b.n	8007e16 <_printf_float+0x402>
 8007e56:	2301      	movs	r3, #1
 8007e58:	464a      	mov	r2, r9
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae38 	beq.w	8007ad6 <_printf_float+0xc2>
 8007e66:	f108 0801 	add.w	r8, r8, #1
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e6e:	1a5b      	subs	r3, r3, r1
 8007e70:	4543      	cmp	r3, r8
 8007e72:	dcf0      	bgt.n	8007e56 <_printf_float+0x442>
 8007e74:	e6fa      	b.n	8007c6c <_printf_float+0x258>
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	f104 0919 	add.w	r9, r4, #25
 8007e7e:	e7f4      	b.n	8007e6a <_printf_float+0x456>

08007e80 <_printf_common>:
 8007e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e84:	4616      	mov	r6, r2
 8007e86:	4699      	mov	r9, r3
 8007e88:	688a      	ldr	r2, [r1, #8]
 8007e8a:	690b      	ldr	r3, [r1, #16]
 8007e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	bfb8      	it	lt
 8007e94:	4613      	movlt	r3, r2
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_printf_common+0x26>
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	0699      	lsls	r1, r3, #26
 8007eaa:	bf42      	ittt	mi
 8007eac:	6833      	ldrmi	r3, [r6, #0]
 8007eae:	3302      	addmi	r3, #2
 8007eb0:	6033      	strmi	r3, [r6, #0]
 8007eb2:	6825      	ldr	r5, [r4, #0]
 8007eb4:	f015 0506 	ands.w	r5, r5, #6
 8007eb8:	d106      	bne.n	8007ec8 <_printf_common+0x48>
 8007eba:	f104 0a19 	add.w	sl, r4, #25
 8007ebe:	68e3      	ldr	r3, [r4, #12]
 8007ec0:	6832      	ldr	r2, [r6, #0]
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dc26      	bgt.n	8007f16 <_printf_common+0x96>
 8007ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ecc:	1e13      	subs	r3, r2, #0
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	bf18      	it	ne
 8007ed2:	2301      	movne	r3, #1
 8007ed4:	0692      	lsls	r2, r2, #26
 8007ed6:	d42b      	bmi.n	8007f30 <_printf_common+0xb0>
 8007ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007edc:	4649      	mov	r1, r9
 8007ede:	4638      	mov	r0, r7
 8007ee0:	47c0      	blx	r8
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d01e      	beq.n	8007f24 <_printf_common+0xa4>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	68e5      	ldr	r5, [r4, #12]
 8007eea:	6832      	ldr	r2, [r6, #0]
 8007eec:	f003 0306 	and.w	r3, r3, #6
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	bf08      	it	eq
 8007ef4:	1aad      	subeq	r5, r5, r2
 8007ef6:	68a3      	ldr	r3, [r4, #8]
 8007ef8:	6922      	ldr	r2, [r4, #16]
 8007efa:	bf0c      	ite	eq
 8007efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f00:	2500      	movne	r5, #0
 8007f02:	4293      	cmp	r3, r2
 8007f04:	bfc4      	itt	gt
 8007f06:	1a9b      	subgt	r3, r3, r2
 8007f08:	18ed      	addgt	r5, r5, r3
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	341a      	adds	r4, #26
 8007f0e:	42b5      	cmp	r5, r6
 8007f10:	d11a      	bne.n	8007f48 <_printf_common+0xc8>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e008      	b.n	8007f28 <_printf_common+0xa8>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4652      	mov	r2, sl
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	47c0      	blx	r8
 8007f20:	3001      	adds	r0, #1
 8007f22:	d103      	bne.n	8007f2c <_printf_common+0xac>
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	e7c6      	b.n	8007ebe <_printf_common+0x3e>
 8007f30:	18e1      	adds	r1, r4, r3
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	2030      	movs	r0, #48	; 0x30
 8007f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f3a:	4422      	add	r2, r4
 8007f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f44:	3302      	adds	r3, #2
 8007f46:	e7c7      	b.n	8007ed8 <_printf_common+0x58>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	4638      	mov	r0, r7
 8007f50:	47c0      	blx	r8
 8007f52:	3001      	adds	r0, #1
 8007f54:	d0e6      	beq.n	8007f24 <_printf_common+0xa4>
 8007f56:	3601      	adds	r6, #1
 8007f58:	e7d9      	b.n	8007f0e <_printf_common+0x8e>
	...

08007f5c <_printf_i>:
 8007f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	7e0f      	ldrb	r7, [r1, #24]
 8007f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f64:	2f78      	cmp	r7, #120	; 0x78
 8007f66:	4691      	mov	r9, r2
 8007f68:	4680      	mov	r8, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	469a      	mov	sl, r3
 8007f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f72:	d807      	bhi.n	8007f84 <_printf_i+0x28>
 8007f74:	2f62      	cmp	r7, #98	; 0x62
 8007f76:	d80a      	bhi.n	8007f8e <_printf_i+0x32>
 8007f78:	2f00      	cmp	r7, #0
 8007f7a:	f000 80d8 	beq.w	800812e <_printf_i+0x1d2>
 8007f7e:	2f58      	cmp	r7, #88	; 0x58
 8007f80:	f000 80a3 	beq.w	80080ca <_printf_i+0x16e>
 8007f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f8c:	e03a      	b.n	8008004 <_printf_i+0xa8>
 8007f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f92:	2b15      	cmp	r3, #21
 8007f94:	d8f6      	bhi.n	8007f84 <_printf_i+0x28>
 8007f96:	a101      	add	r1, pc, #4	; (adr r1, 8007f9c <_printf_i+0x40>)
 8007f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f9c:	08007ff5 	.word	0x08007ff5
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	08007f85 	.word	0x08007f85
 8007fa8:	08007f85 	.word	0x08007f85
 8007fac:	08007f85 	.word	0x08007f85
 8007fb0:	08007f85 	.word	0x08007f85
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08007f85 	.word	0x08007f85
 8007fbc:	08007f85 	.word	0x08007f85
 8007fc0:	08007f85 	.word	0x08007f85
 8007fc4:	08007f85 	.word	0x08007f85
 8007fc8:	08008115 	.word	0x08008115
 8007fcc:	08008039 	.word	0x08008039
 8007fd0:	080080f7 	.word	0x080080f7
 8007fd4:	08007f85 	.word	0x08007f85
 8007fd8:	08007f85 	.word	0x08007f85
 8007fdc:	08008137 	.word	0x08008137
 8007fe0:	08007f85 	.word	0x08007f85
 8007fe4:	08008039 	.word	0x08008039
 8007fe8:	08007f85 	.word	0x08007f85
 8007fec:	08007f85 	.word	0x08007f85
 8007ff0:	080080ff 	.word	0x080080ff
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	1d1a      	adds	r2, r3, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	602a      	str	r2, [r5, #0]
 8007ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008004:	2301      	movs	r3, #1
 8008006:	e0a3      	b.n	8008150 <_printf_i+0x1f4>
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	6829      	ldr	r1, [r5, #0]
 800800c:	0606      	lsls	r6, r0, #24
 800800e:	f101 0304 	add.w	r3, r1, #4
 8008012:	d50a      	bpl.n	800802a <_printf_i+0xce>
 8008014:	680e      	ldr	r6, [r1, #0]
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	2e00      	cmp	r6, #0
 800801a:	da03      	bge.n	8008024 <_printf_i+0xc8>
 800801c:	232d      	movs	r3, #45	; 0x2d
 800801e:	4276      	negs	r6, r6
 8008020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008024:	485e      	ldr	r0, [pc, #376]	; (80081a0 <_printf_i+0x244>)
 8008026:	230a      	movs	r3, #10
 8008028:	e019      	b.n	800805e <_printf_i+0x102>
 800802a:	680e      	ldr	r6, [r1, #0]
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008032:	bf18      	it	ne
 8008034:	b236      	sxthne	r6, r6
 8008036:	e7ef      	b.n	8008018 <_printf_i+0xbc>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	1d19      	adds	r1, r3, #4
 800803e:	6029      	str	r1, [r5, #0]
 8008040:	0601      	lsls	r1, r0, #24
 8008042:	d501      	bpl.n	8008048 <_printf_i+0xec>
 8008044:	681e      	ldr	r6, [r3, #0]
 8008046:	e002      	b.n	800804e <_printf_i+0xf2>
 8008048:	0646      	lsls	r6, r0, #25
 800804a:	d5fb      	bpl.n	8008044 <_printf_i+0xe8>
 800804c:	881e      	ldrh	r6, [r3, #0]
 800804e:	4854      	ldr	r0, [pc, #336]	; (80081a0 <_printf_i+0x244>)
 8008050:	2f6f      	cmp	r7, #111	; 0x6f
 8008052:	bf0c      	ite	eq
 8008054:	2308      	moveq	r3, #8
 8008056:	230a      	movne	r3, #10
 8008058:	2100      	movs	r1, #0
 800805a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800805e:	6865      	ldr	r5, [r4, #4]
 8008060:	60a5      	str	r5, [r4, #8]
 8008062:	2d00      	cmp	r5, #0
 8008064:	bfa2      	ittt	ge
 8008066:	6821      	ldrge	r1, [r4, #0]
 8008068:	f021 0104 	bicge.w	r1, r1, #4
 800806c:	6021      	strge	r1, [r4, #0]
 800806e:	b90e      	cbnz	r6, 8008074 <_printf_i+0x118>
 8008070:	2d00      	cmp	r5, #0
 8008072:	d04d      	beq.n	8008110 <_printf_i+0x1b4>
 8008074:	4615      	mov	r5, r2
 8008076:	fbb6 f1f3 	udiv	r1, r6, r3
 800807a:	fb03 6711 	mls	r7, r3, r1, r6
 800807e:	5dc7      	ldrb	r7, [r0, r7]
 8008080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008084:	4637      	mov	r7, r6
 8008086:	42bb      	cmp	r3, r7
 8008088:	460e      	mov	r6, r1
 800808a:	d9f4      	bls.n	8008076 <_printf_i+0x11a>
 800808c:	2b08      	cmp	r3, #8
 800808e:	d10b      	bne.n	80080a8 <_printf_i+0x14c>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	07de      	lsls	r6, r3, #31
 8008094:	d508      	bpl.n	80080a8 <_printf_i+0x14c>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	6861      	ldr	r1, [r4, #4]
 800809a:	4299      	cmp	r1, r3
 800809c:	bfde      	ittt	le
 800809e:	2330      	movle	r3, #48	; 0x30
 80080a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080a8:	1b52      	subs	r2, r2, r5
 80080aa:	6122      	str	r2, [r4, #16]
 80080ac:	f8cd a000 	str.w	sl, [sp]
 80080b0:	464b      	mov	r3, r9
 80080b2:	aa03      	add	r2, sp, #12
 80080b4:	4621      	mov	r1, r4
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7ff fee2 	bl	8007e80 <_printf_common>
 80080bc:	3001      	adds	r0, #1
 80080be:	d14c      	bne.n	800815a <_printf_i+0x1fe>
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	b004      	add	sp, #16
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ca:	4835      	ldr	r0, [pc, #212]	; (80081a0 <_printf_i+0x244>)
 80080cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080d0:	6829      	ldr	r1, [r5, #0]
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80080d8:	6029      	str	r1, [r5, #0]
 80080da:	061d      	lsls	r5, r3, #24
 80080dc:	d514      	bpl.n	8008108 <_printf_i+0x1ac>
 80080de:	07df      	lsls	r7, r3, #31
 80080e0:	bf44      	itt	mi
 80080e2:	f043 0320 	orrmi.w	r3, r3, #32
 80080e6:	6023      	strmi	r3, [r4, #0]
 80080e8:	b91e      	cbnz	r6, 80080f2 <_printf_i+0x196>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	f023 0320 	bic.w	r3, r3, #32
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	2310      	movs	r3, #16
 80080f4:	e7b0      	b.n	8008058 <_printf_i+0xfc>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	f043 0320 	orr.w	r3, r3, #32
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	2378      	movs	r3, #120	; 0x78
 8008100:	4828      	ldr	r0, [pc, #160]	; (80081a4 <_printf_i+0x248>)
 8008102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008106:	e7e3      	b.n	80080d0 <_printf_i+0x174>
 8008108:	0659      	lsls	r1, r3, #25
 800810a:	bf48      	it	mi
 800810c:	b2b6      	uxthmi	r6, r6
 800810e:	e7e6      	b.n	80080de <_printf_i+0x182>
 8008110:	4615      	mov	r5, r2
 8008112:	e7bb      	b.n	800808c <_printf_i+0x130>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	6826      	ldr	r6, [r4, #0]
 8008118:	6961      	ldr	r1, [r4, #20]
 800811a:	1d18      	adds	r0, r3, #4
 800811c:	6028      	str	r0, [r5, #0]
 800811e:	0635      	lsls	r5, r6, #24
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	d501      	bpl.n	8008128 <_printf_i+0x1cc>
 8008124:	6019      	str	r1, [r3, #0]
 8008126:	e002      	b.n	800812e <_printf_i+0x1d2>
 8008128:	0670      	lsls	r0, r6, #25
 800812a:	d5fb      	bpl.n	8008124 <_printf_i+0x1c8>
 800812c:	8019      	strh	r1, [r3, #0]
 800812e:	2300      	movs	r3, #0
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	4615      	mov	r5, r2
 8008134:	e7ba      	b.n	80080ac <_printf_i+0x150>
 8008136:	682b      	ldr	r3, [r5, #0]
 8008138:	1d1a      	adds	r2, r3, #4
 800813a:	602a      	str	r2, [r5, #0]
 800813c:	681d      	ldr	r5, [r3, #0]
 800813e:	6862      	ldr	r2, [r4, #4]
 8008140:	2100      	movs	r1, #0
 8008142:	4628      	mov	r0, r5
 8008144:	f7f8 f874 	bl	8000230 <memchr>
 8008148:	b108      	cbz	r0, 800814e <_printf_i+0x1f2>
 800814a:	1b40      	subs	r0, r0, r5
 800814c:	6060      	str	r0, [r4, #4]
 800814e:	6863      	ldr	r3, [r4, #4]
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	2300      	movs	r3, #0
 8008154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008158:	e7a8      	b.n	80080ac <_printf_i+0x150>
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	462a      	mov	r2, r5
 800815e:	4649      	mov	r1, r9
 8008160:	4640      	mov	r0, r8
 8008162:	47d0      	blx	sl
 8008164:	3001      	adds	r0, #1
 8008166:	d0ab      	beq.n	80080c0 <_printf_i+0x164>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	079b      	lsls	r3, r3, #30
 800816c:	d413      	bmi.n	8008196 <_printf_i+0x23a>
 800816e:	68e0      	ldr	r0, [r4, #12]
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	4298      	cmp	r0, r3
 8008174:	bfb8      	it	lt
 8008176:	4618      	movlt	r0, r3
 8008178:	e7a4      	b.n	80080c4 <_printf_i+0x168>
 800817a:	2301      	movs	r3, #1
 800817c:	4632      	mov	r2, r6
 800817e:	4649      	mov	r1, r9
 8008180:	4640      	mov	r0, r8
 8008182:	47d0      	blx	sl
 8008184:	3001      	adds	r0, #1
 8008186:	d09b      	beq.n	80080c0 <_printf_i+0x164>
 8008188:	3501      	adds	r5, #1
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	9903      	ldr	r1, [sp, #12]
 800818e:	1a5b      	subs	r3, r3, r1
 8008190:	42ab      	cmp	r3, r5
 8008192:	dcf2      	bgt.n	800817a <_printf_i+0x21e>
 8008194:	e7eb      	b.n	800816e <_printf_i+0x212>
 8008196:	2500      	movs	r5, #0
 8008198:	f104 0619 	add.w	r6, r4, #25
 800819c:	e7f5      	b.n	800818a <_printf_i+0x22e>
 800819e:	bf00      	nop
 80081a0:	0800b4e2 	.word	0x0800b4e2
 80081a4:	0800b4f3 	.word	0x0800b4f3

080081a8 <siprintf>:
 80081a8:	b40e      	push	{r1, r2, r3}
 80081aa:	b500      	push	{lr}
 80081ac:	b09c      	sub	sp, #112	; 0x70
 80081ae:	ab1d      	add	r3, sp, #116	; 0x74
 80081b0:	9002      	str	r0, [sp, #8]
 80081b2:	9006      	str	r0, [sp, #24]
 80081b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081b8:	4809      	ldr	r0, [pc, #36]	; (80081e0 <siprintf+0x38>)
 80081ba:	9107      	str	r1, [sp, #28]
 80081bc:	9104      	str	r1, [sp, #16]
 80081be:	4909      	ldr	r1, [pc, #36]	; (80081e4 <siprintf+0x3c>)
 80081c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c4:	9105      	str	r1, [sp, #20]
 80081c6:	6800      	ldr	r0, [r0, #0]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	a902      	add	r1, sp, #8
 80081cc:	f001 fb76 	bl	80098bc <_svfiprintf_r>
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	b01c      	add	sp, #112	; 0x70
 80081d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081dc:	b003      	add	sp, #12
 80081de:	4770      	bx	lr
 80081e0:	2000002c 	.word	0x2000002c
 80081e4:	ffff0208 	.word	0xffff0208

080081e8 <quorem>:
 80081e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	6903      	ldr	r3, [r0, #16]
 80081ee:	690c      	ldr	r4, [r1, #16]
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	4607      	mov	r7, r0
 80081f4:	f2c0 8081 	blt.w	80082fa <quorem+0x112>
 80081f8:	3c01      	subs	r4, #1
 80081fa:	f101 0814 	add.w	r8, r1, #20
 80081fe:	f100 0514 	add.w	r5, r0, #20
 8008202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800820c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008210:	3301      	adds	r3, #1
 8008212:	429a      	cmp	r2, r3
 8008214:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008218:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800821c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008220:	d331      	bcc.n	8008286 <quorem+0x9e>
 8008222:	f04f 0e00 	mov.w	lr, #0
 8008226:	4640      	mov	r0, r8
 8008228:	46ac      	mov	ip, r5
 800822a:	46f2      	mov	sl, lr
 800822c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008230:	b293      	uxth	r3, r2
 8008232:	fb06 e303 	mla	r3, r6, r3, lr
 8008236:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800823a:	b29b      	uxth	r3, r3
 800823c:	ebaa 0303 	sub.w	r3, sl, r3
 8008240:	f8dc a000 	ldr.w	sl, [ip]
 8008244:	0c12      	lsrs	r2, r2, #16
 8008246:	fa13 f38a 	uxtah	r3, r3, sl
 800824a:	fb06 e202 	mla	r2, r6, r2, lr
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	9b00      	ldr	r3, [sp, #0]
 8008252:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008256:	b292      	uxth	r2, r2
 8008258:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800825c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008260:	f8bd 3000 	ldrh.w	r3, [sp]
 8008264:	4581      	cmp	r9, r0
 8008266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800826a:	f84c 3b04 	str.w	r3, [ip], #4
 800826e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008272:	d2db      	bcs.n	800822c <quorem+0x44>
 8008274:	f855 300b 	ldr.w	r3, [r5, fp]
 8008278:	b92b      	cbnz	r3, 8008286 <quorem+0x9e>
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	3b04      	subs	r3, #4
 800827e:	429d      	cmp	r5, r3
 8008280:	461a      	mov	r2, r3
 8008282:	d32e      	bcc.n	80082e2 <quorem+0xfa>
 8008284:	613c      	str	r4, [r7, #16]
 8008286:	4638      	mov	r0, r7
 8008288:	f001 f8c4 	bl	8009414 <__mcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	db24      	blt.n	80082da <quorem+0xf2>
 8008290:	3601      	adds	r6, #1
 8008292:	4628      	mov	r0, r5
 8008294:	f04f 0c00 	mov.w	ip, #0
 8008298:	f858 2b04 	ldr.w	r2, [r8], #4
 800829c:	f8d0 e000 	ldr.w	lr, [r0]
 80082a0:	b293      	uxth	r3, r2
 80082a2:	ebac 0303 	sub.w	r3, ip, r3
 80082a6:	0c12      	lsrs	r2, r2, #16
 80082a8:	fa13 f38e 	uxtah	r3, r3, lr
 80082ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ba:	45c1      	cmp	r9, r8
 80082bc:	f840 3b04 	str.w	r3, [r0], #4
 80082c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082c4:	d2e8      	bcs.n	8008298 <quorem+0xb0>
 80082c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082ce:	b922      	cbnz	r2, 80082da <quorem+0xf2>
 80082d0:	3b04      	subs	r3, #4
 80082d2:	429d      	cmp	r5, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	d30a      	bcc.n	80082ee <quorem+0x106>
 80082d8:	613c      	str	r4, [r7, #16]
 80082da:	4630      	mov	r0, r6
 80082dc:	b003      	add	sp, #12
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d1cc      	bne.n	8008284 <quorem+0x9c>
 80082ea:	3c01      	subs	r4, #1
 80082ec:	e7c7      	b.n	800827e <quorem+0x96>
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	d1f0      	bne.n	80082d8 <quorem+0xf0>
 80082f6:	3c01      	subs	r4, #1
 80082f8:	e7eb      	b.n	80082d2 <quorem+0xea>
 80082fa:	2000      	movs	r0, #0
 80082fc:	e7ee      	b.n	80082dc <quorem+0xf4>
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	ed2d 8b04 	vpush	{d8-d9}
 8008308:	ec57 6b10 	vmov	r6, r7, d0
 800830c:	b093      	sub	sp, #76	; 0x4c
 800830e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008310:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008314:	9106      	str	r1, [sp, #24]
 8008316:	ee10 aa10 	vmov	sl, s0
 800831a:	4604      	mov	r4, r0
 800831c:	9209      	str	r2, [sp, #36]	; 0x24
 800831e:	930c      	str	r3, [sp, #48]	; 0x30
 8008320:	46bb      	mov	fp, r7
 8008322:	b975      	cbnz	r5, 8008342 <_dtoa_r+0x42>
 8008324:	2010      	movs	r0, #16
 8008326:	f000 fddd 	bl	8008ee4 <malloc>
 800832a:	4602      	mov	r2, r0
 800832c:	6260      	str	r0, [r4, #36]	; 0x24
 800832e:	b920      	cbnz	r0, 800833a <_dtoa_r+0x3a>
 8008330:	4ba7      	ldr	r3, [pc, #668]	; (80085d0 <_dtoa_r+0x2d0>)
 8008332:	21ea      	movs	r1, #234	; 0xea
 8008334:	48a7      	ldr	r0, [pc, #668]	; (80085d4 <_dtoa_r+0x2d4>)
 8008336:	f001 fbd1 	bl	8009adc <__assert_func>
 800833a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800833e:	6005      	str	r5, [r0, #0]
 8008340:	60c5      	str	r5, [r0, #12]
 8008342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008344:	6819      	ldr	r1, [r3, #0]
 8008346:	b151      	cbz	r1, 800835e <_dtoa_r+0x5e>
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	604a      	str	r2, [r1, #4]
 800834c:	2301      	movs	r3, #1
 800834e:	4093      	lsls	r3, r2
 8008350:	608b      	str	r3, [r1, #8]
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fe1c 	bl	8008f90 <_Bfree>
 8008358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	1e3b      	subs	r3, r7, #0
 8008360:	bfaa      	itet	ge
 8008362:	2300      	movge	r3, #0
 8008364:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008368:	f8c8 3000 	strge.w	r3, [r8]
 800836c:	4b9a      	ldr	r3, [pc, #616]	; (80085d8 <_dtoa_r+0x2d8>)
 800836e:	bfbc      	itt	lt
 8008370:	2201      	movlt	r2, #1
 8008372:	f8c8 2000 	strlt.w	r2, [r8]
 8008376:	ea33 030b 	bics.w	r3, r3, fp
 800837a:	d11b      	bne.n	80083b4 <_dtoa_r+0xb4>
 800837c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800837e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008388:	4333      	orrs	r3, r6
 800838a:	f000 8592 	beq.w	8008eb2 <_dtoa_r+0xbb2>
 800838e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008390:	b963      	cbnz	r3, 80083ac <_dtoa_r+0xac>
 8008392:	4b92      	ldr	r3, [pc, #584]	; (80085dc <_dtoa_r+0x2dc>)
 8008394:	e022      	b.n	80083dc <_dtoa_r+0xdc>
 8008396:	4b92      	ldr	r3, [pc, #584]	; (80085e0 <_dtoa_r+0x2e0>)
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	3308      	adds	r3, #8
 800839c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	9801      	ldr	r0, [sp, #4]
 80083a2:	b013      	add	sp, #76	; 0x4c
 80083a4:	ecbd 8b04 	vpop	{d8-d9}
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ac:	4b8b      	ldr	r3, [pc, #556]	; (80085dc <_dtoa_r+0x2dc>)
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	3303      	adds	r3, #3
 80083b2:	e7f3      	b.n	800839c <_dtoa_r+0x9c>
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	4650      	mov	r0, sl
 80083ba:	4659      	mov	r1, fp
 80083bc:	f7f8 fbac 	bl	8000b18 <__aeabi_dcmpeq>
 80083c0:	ec4b ab19 	vmov	d9, sl, fp
 80083c4:	4680      	mov	r8, r0
 80083c6:	b158      	cbz	r0, 80083e0 <_dtoa_r+0xe0>
 80083c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ca:	2301      	movs	r3, #1
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 856b 	beq.w	8008eac <_dtoa_r+0xbac>
 80083d6:	4883      	ldr	r0, [pc, #524]	; (80085e4 <_dtoa_r+0x2e4>)
 80083d8:	6018      	str	r0, [r3, #0]
 80083da:	1e43      	subs	r3, r0, #1
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	e7df      	b.n	80083a0 <_dtoa_r+0xa0>
 80083e0:	ec4b ab10 	vmov	d0, sl, fp
 80083e4:	aa10      	add	r2, sp, #64	; 0x40
 80083e6:	a911      	add	r1, sp, #68	; 0x44
 80083e8:	4620      	mov	r0, r4
 80083ea:	f001 f8b9 	bl	8009560 <__d2b>
 80083ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083f2:	ee08 0a10 	vmov	s16, r0
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	f000 8084 	beq.w	8008504 <_dtoa_r+0x204>
 80083fc:	ee19 3a90 	vmov	r3, s19
 8008400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008404:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008408:	4656      	mov	r6, sl
 800840a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800840e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008412:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008416:	4b74      	ldr	r3, [pc, #464]	; (80085e8 <_dtoa_r+0x2e8>)
 8008418:	2200      	movs	r2, #0
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f7 ff5b 	bl	80002d8 <__aeabi_dsub>
 8008422:	a365      	add	r3, pc, #404	; (adr r3, 80085b8 <_dtoa_r+0x2b8>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f8 f90e 	bl	8000648 <__aeabi_dmul>
 800842c:	a364      	add	r3, pc, #400	; (adr r3, 80085c0 <_dtoa_r+0x2c0>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f7 ff53 	bl	80002dc <__adddf3>
 8008436:	4606      	mov	r6, r0
 8008438:	4628      	mov	r0, r5
 800843a:	460f      	mov	r7, r1
 800843c:	f7f8 f89a 	bl	8000574 <__aeabi_i2d>
 8008440:	a361      	add	r3, pc, #388	; (adr r3, 80085c8 <_dtoa_r+0x2c8>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f8 f8ff 	bl	8000648 <__aeabi_dmul>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f7 ff43 	bl	80002dc <__adddf3>
 8008456:	4606      	mov	r6, r0
 8008458:	460f      	mov	r7, r1
 800845a:	f7f8 fba5 	bl	8000ba8 <__aeabi_d2iz>
 800845e:	2200      	movs	r2, #0
 8008460:	9000      	str	r0, [sp, #0]
 8008462:	2300      	movs	r3, #0
 8008464:	4630      	mov	r0, r6
 8008466:	4639      	mov	r1, r7
 8008468:	f7f8 fb60 	bl	8000b2c <__aeabi_dcmplt>
 800846c:	b150      	cbz	r0, 8008484 <_dtoa_r+0x184>
 800846e:	9800      	ldr	r0, [sp, #0]
 8008470:	f7f8 f880 	bl	8000574 <__aeabi_i2d>
 8008474:	4632      	mov	r2, r6
 8008476:	463b      	mov	r3, r7
 8008478:	f7f8 fb4e 	bl	8000b18 <__aeabi_dcmpeq>
 800847c:	b910      	cbnz	r0, 8008484 <_dtoa_r+0x184>
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	3b01      	subs	r3, #1
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	9b00      	ldr	r3, [sp, #0]
 8008486:	2b16      	cmp	r3, #22
 8008488:	d85a      	bhi.n	8008540 <_dtoa_r+0x240>
 800848a:	9a00      	ldr	r2, [sp, #0]
 800848c:	4b57      	ldr	r3, [pc, #348]	; (80085ec <_dtoa_r+0x2ec>)
 800848e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	ec51 0b19 	vmov	r0, r1, d9
 800849a:	f7f8 fb47 	bl	8000b2c <__aeabi_dcmplt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d050      	beq.n	8008544 <_dtoa_r+0x244>
 80084a2:	9b00      	ldr	r3, [sp, #0]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ae:	1b5d      	subs	r5, r3, r5
 80084b0:	1e6b      	subs	r3, r5, #1
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	bf45      	ittet	mi
 80084b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80084ba:	9304      	strmi	r3, [sp, #16]
 80084bc:	2300      	movpl	r3, #0
 80084be:	2300      	movmi	r3, #0
 80084c0:	bf4c      	ite	mi
 80084c2:	9305      	strmi	r3, [sp, #20]
 80084c4:	9304      	strpl	r3, [sp, #16]
 80084c6:	9b00      	ldr	r3, [sp, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	db3d      	blt.n	8008548 <_dtoa_r+0x248>
 80084cc:	9b05      	ldr	r3, [sp, #20]
 80084ce:	9a00      	ldr	r2, [sp, #0]
 80084d0:	920a      	str	r2, [sp, #40]	; 0x28
 80084d2:	4413      	add	r3, r2
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	9b06      	ldr	r3, [sp, #24]
 80084dc:	2b09      	cmp	r3, #9
 80084de:	f200 8089 	bhi.w	80085f4 <_dtoa_r+0x2f4>
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	bfc4      	itt	gt
 80084e6:	3b04      	subgt	r3, #4
 80084e8:	9306      	strgt	r3, [sp, #24]
 80084ea:	9b06      	ldr	r3, [sp, #24]
 80084ec:	f1a3 0302 	sub.w	r3, r3, #2
 80084f0:	bfcc      	ite	gt
 80084f2:	2500      	movgt	r5, #0
 80084f4:	2501      	movle	r5, #1
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	f200 8087 	bhi.w	800860a <_dtoa_r+0x30a>
 80084fc:	e8df f003 	tbb	[pc, r3]
 8008500:	59383a2d 	.word	0x59383a2d
 8008504:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008508:	441d      	add	r5, r3
 800850a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800850e:	2b20      	cmp	r3, #32
 8008510:	bfc1      	itttt	gt
 8008512:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008516:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800851a:	fa0b f303 	lslgt.w	r3, fp, r3
 800851e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008522:	bfda      	itte	le
 8008524:	f1c3 0320 	rsble	r3, r3, #32
 8008528:	fa06 f003 	lslle.w	r0, r6, r3
 800852c:	4318      	orrgt	r0, r3
 800852e:	f7f8 f811 	bl	8000554 <__aeabi_ui2d>
 8008532:	2301      	movs	r3, #1
 8008534:	4606      	mov	r6, r0
 8008536:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800853a:	3d01      	subs	r5, #1
 800853c:	930e      	str	r3, [sp, #56]	; 0x38
 800853e:	e76a      	b.n	8008416 <_dtoa_r+0x116>
 8008540:	2301      	movs	r3, #1
 8008542:	e7b2      	b.n	80084aa <_dtoa_r+0x1aa>
 8008544:	900b      	str	r0, [sp, #44]	; 0x2c
 8008546:	e7b1      	b.n	80084ac <_dtoa_r+0x1ac>
 8008548:	9b04      	ldr	r3, [sp, #16]
 800854a:	9a00      	ldr	r2, [sp, #0]
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	9304      	str	r3, [sp, #16]
 8008550:	4253      	negs	r3, r2
 8008552:	9307      	str	r3, [sp, #28]
 8008554:	2300      	movs	r3, #0
 8008556:	930a      	str	r3, [sp, #40]	; 0x28
 8008558:	e7bf      	b.n	80084da <_dtoa_r+0x1da>
 800855a:	2300      	movs	r3, #0
 800855c:	9308      	str	r3, [sp, #32]
 800855e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	dc55      	bgt.n	8008610 <_dtoa_r+0x310>
 8008564:	2301      	movs	r3, #1
 8008566:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800856a:	461a      	mov	r2, r3
 800856c:	9209      	str	r2, [sp, #36]	; 0x24
 800856e:	e00c      	b.n	800858a <_dtoa_r+0x28a>
 8008570:	2301      	movs	r3, #1
 8008572:	e7f3      	b.n	800855c <_dtoa_r+0x25c>
 8008574:	2300      	movs	r3, #0
 8008576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008578:	9308      	str	r3, [sp, #32]
 800857a:	9b00      	ldr	r3, [sp, #0]
 800857c:	4413      	add	r3, r2
 800857e:	9302      	str	r3, [sp, #8]
 8008580:	3301      	adds	r3, #1
 8008582:	2b01      	cmp	r3, #1
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	bfb8      	it	lt
 8008588:	2301      	movlt	r3, #1
 800858a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800858c:	2200      	movs	r2, #0
 800858e:	6042      	str	r2, [r0, #4]
 8008590:	2204      	movs	r2, #4
 8008592:	f102 0614 	add.w	r6, r2, #20
 8008596:	429e      	cmp	r6, r3
 8008598:	6841      	ldr	r1, [r0, #4]
 800859a:	d93d      	bls.n	8008618 <_dtoa_r+0x318>
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fcb7 	bl	8008f10 <_Balloc>
 80085a2:	9001      	str	r0, [sp, #4]
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d13b      	bne.n	8008620 <_dtoa_r+0x320>
 80085a8:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <_dtoa_r+0x2f0>)
 80085aa:	4602      	mov	r2, r0
 80085ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085b0:	e6c0      	b.n	8008334 <_dtoa_r+0x34>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e7df      	b.n	8008576 <_dtoa_r+0x276>
 80085b6:	bf00      	nop
 80085b8:	636f4361 	.word	0x636f4361
 80085bc:	3fd287a7 	.word	0x3fd287a7
 80085c0:	8b60c8b3 	.word	0x8b60c8b3
 80085c4:	3fc68a28 	.word	0x3fc68a28
 80085c8:	509f79fb 	.word	0x509f79fb
 80085cc:	3fd34413 	.word	0x3fd34413
 80085d0:	0800b511 	.word	0x0800b511
 80085d4:	0800b528 	.word	0x0800b528
 80085d8:	7ff00000 	.word	0x7ff00000
 80085dc:	0800b50d 	.word	0x0800b50d
 80085e0:	0800b504 	.word	0x0800b504
 80085e4:	0800b4e1 	.word	0x0800b4e1
 80085e8:	3ff80000 	.word	0x3ff80000
 80085ec:	0800b618 	.word	0x0800b618
 80085f0:	0800b583 	.word	0x0800b583
 80085f4:	2501      	movs	r5, #1
 80085f6:	2300      	movs	r3, #0
 80085f8:	9306      	str	r3, [sp, #24]
 80085fa:	9508      	str	r5, [sp, #32]
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008600:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	2312      	movs	r3, #18
 8008608:	e7b0      	b.n	800856c <_dtoa_r+0x26c>
 800860a:	2301      	movs	r3, #1
 800860c:	9308      	str	r3, [sp, #32]
 800860e:	e7f5      	b.n	80085fc <_dtoa_r+0x2fc>
 8008610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008612:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008616:	e7b8      	b.n	800858a <_dtoa_r+0x28a>
 8008618:	3101      	adds	r1, #1
 800861a:	6041      	str	r1, [r0, #4]
 800861c:	0052      	lsls	r2, r2, #1
 800861e:	e7b8      	b.n	8008592 <_dtoa_r+0x292>
 8008620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008622:	9a01      	ldr	r2, [sp, #4]
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	2b0e      	cmp	r3, #14
 800862a:	f200 809d 	bhi.w	8008768 <_dtoa_r+0x468>
 800862e:	2d00      	cmp	r5, #0
 8008630:	f000 809a 	beq.w	8008768 <_dtoa_r+0x468>
 8008634:	9b00      	ldr	r3, [sp, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	dd32      	ble.n	80086a0 <_dtoa_r+0x3a0>
 800863a:	4ab7      	ldr	r2, [pc, #732]	; (8008918 <_dtoa_r+0x618>)
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008644:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008648:	9b00      	ldr	r3, [sp, #0]
 800864a:	05d8      	lsls	r0, r3, #23
 800864c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008650:	d516      	bpl.n	8008680 <_dtoa_r+0x380>
 8008652:	4bb2      	ldr	r3, [pc, #712]	; (800891c <_dtoa_r+0x61c>)
 8008654:	ec51 0b19 	vmov	r0, r1, d9
 8008658:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800865c:	f7f8 f91e 	bl	800089c <__aeabi_ddiv>
 8008660:	f007 070f 	and.w	r7, r7, #15
 8008664:	4682      	mov	sl, r0
 8008666:	468b      	mov	fp, r1
 8008668:	2503      	movs	r5, #3
 800866a:	4eac      	ldr	r6, [pc, #688]	; (800891c <_dtoa_r+0x61c>)
 800866c:	b957      	cbnz	r7, 8008684 <_dtoa_r+0x384>
 800866e:	4642      	mov	r2, r8
 8008670:	464b      	mov	r3, r9
 8008672:	4650      	mov	r0, sl
 8008674:	4659      	mov	r1, fp
 8008676:	f7f8 f911 	bl	800089c <__aeabi_ddiv>
 800867a:	4682      	mov	sl, r0
 800867c:	468b      	mov	fp, r1
 800867e:	e028      	b.n	80086d2 <_dtoa_r+0x3d2>
 8008680:	2502      	movs	r5, #2
 8008682:	e7f2      	b.n	800866a <_dtoa_r+0x36a>
 8008684:	07f9      	lsls	r1, r7, #31
 8008686:	d508      	bpl.n	800869a <_dtoa_r+0x39a>
 8008688:	4640      	mov	r0, r8
 800868a:	4649      	mov	r1, r9
 800868c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008690:	f7f7 ffda 	bl	8000648 <__aeabi_dmul>
 8008694:	3501      	adds	r5, #1
 8008696:	4680      	mov	r8, r0
 8008698:	4689      	mov	r9, r1
 800869a:	107f      	asrs	r7, r7, #1
 800869c:	3608      	adds	r6, #8
 800869e:	e7e5      	b.n	800866c <_dtoa_r+0x36c>
 80086a0:	f000 809b 	beq.w	80087da <_dtoa_r+0x4da>
 80086a4:	9b00      	ldr	r3, [sp, #0]
 80086a6:	4f9d      	ldr	r7, [pc, #628]	; (800891c <_dtoa_r+0x61c>)
 80086a8:	425e      	negs	r6, r3
 80086aa:	4b9b      	ldr	r3, [pc, #620]	; (8008918 <_dtoa_r+0x618>)
 80086ac:	f006 020f 	and.w	r2, r6, #15
 80086b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	ec51 0b19 	vmov	r0, r1, d9
 80086bc:	f7f7 ffc4 	bl	8000648 <__aeabi_dmul>
 80086c0:	1136      	asrs	r6, r6, #4
 80086c2:	4682      	mov	sl, r0
 80086c4:	468b      	mov	fp, r1
 80086c6:	2300      	movs	r3, #0
 80086c8:	2502      	movs	r5, #2
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d17a      	bne.n	80087c4 <_dtoa_r+0x4c4>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1d3      	bne.n	800867a <_dtoa_r+0x37a>
 80086d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 8082 	beq.w	80087de <_dtoa_r+0x4de>
 80086da:	4b91      	ldr	r3, [pc, #580]	; (8008920 <_dtoa_r+0x620>)
 80086dc:	2200      	movs	r2, #0
 80086de:	4650      	mov	r0, sl
 80086e0:	4659      	mov	r1, fp
 80086e2:	f7f8 fa23 	bl	8000b2c <__aeabi_dcmplt>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d079      	beq.n	80087de <_dtoa_r+0x4de>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d076      	beq.n	80087de <_dtoa_r+0x4de>
 80086f0:	9b02      	ldr	r3, [sp, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd36      	ble.n	8008764 <_dtoa_r+0x464>
 80086f6:	9b00      	ldr	r3, [sp, #0]
 80086f8:	4650      	mov	r0, sl
 80086fa:	4659      	mov	r1, fp
 80086fc:	1e5f      	subs	r7, r3, #1
 80086fe:	2200      	movs	r2, #0
 8008700:	4b88      	ldr	r3, [pc, #544]	; (8008924 <_dtoa_r+0x624>)
 8008702:	f7f7 ffa1 	bl	8000648 <__aeabi_dmul>
 8008706:	9e02      	ldr	r6, [sp, #8]
 8008708:	4682      	mov	sl, r0
 800870a:	468b      	mov	fp, r1
 800870c:	3501      	adds	r5, #1
 800870e:	4628      	mov	r0, r5
 8008710:	f7f7 ff30 	bl	8000574 <__aeabi_i2d>
 8008714:	4652      	mov	r2, sl
 8008716:	465b      	mov	r3, fp
 8008718:	f7f7 ff96 	bl	8000648 <__aeabi_dmul>
 800871c:	4b82      	ldr	r3, [pc, #520]	; (8008928 <_dtoa_r+0x628>)
 800871e:	2200      	movs	r2, #0
 8008720:	f7f7 fddc 	bl	80002dc <__adddf3>
 8008724:	46d0      	mov	r8, sl
 8008726:	46d9      	mov	r9, fp
 8008728:	4682      	mov	sl, r0
 800872a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800872e:	2e00      	cmp	r6, #0
 8008730:	d158      	bne.n	80087e4 <_dtoa_r+0x4e4>
 8008732:	4b7e      	ldr	r3, [pc, #504]	; (800892c <_dtoa_r+0x62c>)
 8008734:	2200      	movs	r2, #0
 8008736:	4640      	mov	r0, r8
 8008738:	4649      	mov	r1, r9
 800873a:	f7f7 fdcd 	bl	80002d8 <__aeabi_dsub>
 800873e:	4652      	mov	r2, sl
 8008740:	465b      	mov	r3, fp
 8008742:	4680      	mov	r8, r0
 8008744:	4689      	mov	r9, r1
 8008746:	f7f8 fa0f 	bl	8000b68 <__aeabi_dcmpgt>
 800874a:	2800      	cmp	r0, #0
 800874c:	f040 8295 	bne.w	8008c7a <_dtoa_r+0x97a>
 8008750:	4652      	mov	r2, sl
 8008752:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008756:	4640      	mov	r0, r8
 8008758:	4649      	mov	r1, r9
 800875a:	f7f8 f9e7 	bl	8000b2c <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	f040 8289 	bne.w	8008c76 <_dtoa_r+0x976>
 8008764:	ec5b ab19 	vmov	sl, fp, d9
 8008768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800876a:	2b00      	cmp	r3, #0
 800876c:	f2c0 8148 	blt.w	8008a00 <_dtoa_r+0x700>
 8008770:	9a00      	ldr	r2, [sp, #0]
 8008772:	2a0e      	cmp	r2, #14
 8008774:	f300 8144 	bgt.w	8008a00 <_dtoa_r+0x700>
 8008778:	4b67      	ldr	r3, [pc, #412]	; (8008918 <_dtoa_r+0x618>)
 800877a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800877e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	f280 80d5 	bge.w	8008934 <_dtoa_r+0x634>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f300 80d1 	bgt.w	8008934 <_dtoa_r+0x634>
 8008792:	f040 826f 	bne.w	8008c74 <_dtoa_r+0x974>
 8008796:	4b65      	ldr	r3, [pc, #404]	; (800892c <_dtoa_r+0x62c>)
 8008798:	2200      	movs	r2, #0
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 ff53 	bl	8000648 <__aeabi_dmul>
 80087a2:	4652      	mov	r2, sl
 80087a4:	465b      	mov	r3, fp
 80087a6:	f7f8 f9d5 	bl	8000b54 <__aeabi_dcmpge>
 80087aa:	9e03      	ldr	r6, [sp, #12]
 80087ac:	4637      	mov	r7, r6
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f040 8245 	bne.w	8008c3e <_dtoa_r+0x93e>
 80087b4:	9d01      	ldr	r5, [sp, #4]
 80087b6:	2331      	movs	r3, #49	; 0x31
 80087b8:	f805 3b01 	strb.w	r3, [r5], #1
 80087bc:	9b00      	ldr	r3, [sp, #0]
 80087be:	3301      	adds	r3, #1
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	e240      	b.n	8008c46 <_dtoa_r+0x946>
 80087c4:	07f2      	lsls	r2, r6, #31
 80087c6:	d505      	bpl.n	80087d4 <_dtoa_r+0x4d4>
 80087c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087cc:	f7f7 ff3c 	bl	8000648 <__aeabi_dmul>
 80087d0:	3501      	adds	r5, #1
 80087d2:	2301      	movs	r3, #1
 80087d4:	1076      	asrs	r6, r6, #1
 80087d6:	3708      	adds	r7, #8
 80087d8:	e777      	b.n	80086ca <_dtoa_r+0x3ca>
 80087da:	2502      	movs	r5, #2
 80087dc:	e779      	b.n	80086d2 <_dtoa_r+0x3d2>
 80087de:	9f00      	ldr	r7, [sp, #0]
 80087e0:	9e03      	ldr	r6, [sp, #12]
 80087e2:	e794      	b.n	800870e <_dtoa_r+0x40e>
 80087e4:	9901      	ldr	r1, [sp, #4]
 80087e6:	4b4c      	ldr	r3, [pc, #304]	; (8008918 <_dtoa_r+0x618>)
 80087e8:	4431      	add	r1, r6
 80087ea:	910d      	str	r1, [sp, #52]	; 0x34
 80087ec:	9908      	ldr	r1, [sp, #32]
 80087ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087f6:	2900      	cmp	r1, #0
 80087f8:	d043      	beq.n	8008882 <_dtoa_r+0x582>
 80087fa:	494d      	ldr	r1, [pc, #308]	; (8008930 <_dtoa_r+0x630>)
 80087fc:	2000      	movs	r0, #0
 80087fe:	f7f8 f84d 	bl	800089c <__aeabi_ddiv>
 8008802:	4652      	mov	r2, sl
 8008804:	465b      	mov	r3, fp
 8008806:	f7f7 fd67 	bl	80002d8 <__aeabi_dsub>
 800880a:	9d01      	ldr	r5, [sp, #4]
 800880c:	4682      	mov	sl, r0
 800880e:	468b      	mov	fp, r1
 8008810:	4649      	mov	r1, r9
 8008812:	4640      	mov	r0, r8
 8008814:	f7f8 f9c8 	bl	8000ba8 <__aeabi_d2iz>
 8008818:	4606      	mov	r6, r0
 800881a:	f7f7 feab 	bl	8000574 <__aeabi_i2d>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4640      	mov	r0, r8
 8008824:	4649      	mov	r1, r9
 8008826:	f7f7 fd57 	bl	80002d8 <__aeabi_dsub>
 800882a:	3630      	adds	r6, #48	; 0x30
 800882c:	f805 6b01 	strb.w	r6, [r5], #1
 8008830:	4652      	mov	r2, sl
 8008832:	465b      	mov	r3, fp
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	f7f8 f978 	bl	8000b2c <__aeabi_dcmplt>
 800883c:	2800      	cmp	r0, #0
 800883e:	d163      	bne.n	8008908 <_dtoa_r+0x608>
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	4936      	ldr	r1, [pc, #216]	; (8008920 <_dtoa_r+0x620>)
 8008846:	2000      	movs	r0, #0
 8008848:	f7f7 fd46 	bl	80002d8 <__aeabi_dsub>
 800884c:	4652      	mov	r2, sl
 800884e:	465b      	mov	r3, fp
 8008850:	f7f8 f96c 	bl	8000b2c <__aeabi_dcmplt>
 8008854:	2800      	cmp	r0, #0
 8008856:	f040 80b5 	bne.w	80089c4 <_dtoa_r+0x6c4>
 800885a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885c:	429d      	cmp	r5, r3
 800885e:	d081      	beq.n	8008764 <_dtoa_r+0x464>
 8008860:	4b30      	ldr	r3, [pc, #192]	; (8008924 <_dtoa_r+0x624>)
 8008862:	2200      	movs	r2, #0
 8008864:	4650      	mov	r0, sl
 8008866:	4659      	mov	r1, fp
 8008868:	f7f7 feee 	bl	8000648 <__aeabi_dmul>
 800886c:	4b2d      	ldr	r3, [pc, #180]	; (8008924 <_dtoa_r+0x624>)
 800886e:	4682      	mov	sl, r0
 8008870:	468b      	mov	fp, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	2200      	movs	r2, #0
 8008878:	f7f7 fee6 	bl	8000648 <__aeabi_dmul>
 800887c:	4680      	mov	r8, r0
 800887e:	4689      	mov	r9, r1
 8008880:	e7c6      	b.n	8008810 <_dtoa_r+0x510>
 8008882:	4650      	mov	r0, sl
 8008884:	4659      	mov	r1, fp
 8008886:	f7f7 fedf 	bl	8000648 <__aeabi_dmul>
 800888a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800888c:	9d01      	ldr	r5, [sp, #4]
 800888e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008890:	4682      	mov	sl, r0
 8008892:	468b      	mov	fp, r1
 8008894:	4649      	mov	r1, r9
 8008896:	4640      	mov	r0, r8
 8008898:	f7f8 f986 	bl	8000ba8 <__aeabi_d2iz>
 800889c:	4606      	mov	r6, r0
 800889e:	f7f7 fe69 	bl	8000574 <__aeabi_i2d>
 80088a2:	3630      	adds	r6, #48	; 0x30
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f7 fd14 	bl	80002d8 <__aeabi_dsub>
 80088b0:	f805 6b01 	strb.w	r6, [r5], #1
 80088b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b6:	429d      	cmp	r5, r3
 80088b8:	4680      	mov	r8, r0
 80088ba:	4689      	mov	r9, r1
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	d124      	bne.n	800890c <_dtoa_r+0x60c>
 80088c2:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <_dtoa_r+0x630>)
 80088c4:	4650      	mov	r0, sl
 80088c6:	4659      	mov	r1, fp
 80088c8:	f7f7 fd08 	bl	80002dc <__adddf3>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f8 f948 	bl	8000b68 <__aeabi_dcmpgt>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d173      	bne.n	80089c4 <_dtoa_r+0x6c4>
 80088dc:	4652      	mov	r2, sl
 80088de:	465b      	mov	r3, fp
 80088e0:	4913      	ldr	r1, [pc, #76]	; (8008930 <_dtoa_r+0x630>)
 80088e2:	2000      	movs	r0, #0
 80088e4:	f7f7 fcf8 	bl	80002d8 <__aeabi_dsub>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4640      	mov	r0, r8
 80088ee:	4649      	mov	r1, r9
 80088f0:	f7f8 f91c 	bl	8000b2c <__aeabi_dcmplt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f43f af35 	beq.w	8008764 <_dtoa_r+0x464>
 80088fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088fc:	1e6b      	subs	r3, r5, #1
 80088fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008900:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008904:	2b30      	cmp	r3, #48	; 0x30
 8008906:	d0f8      	beq.n	80088fa <_dtoa_r+0x5fa>
 8008908:	9700      	str	r7, [sp, #0]
 800890a:	e049      	b.n	80089a0 <_dtoa_r+0x6a0>
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <_dtoa_r+0x624>)
 800890e:	f7f7 fe9b 	bl	8000648 <__aeabi_dmul>
 8008912:	4680      	mov	r8, r0
 8008914:	4689      	mov	r9, r1
 8008916:	e7bd      	b.n	8008894 <_dtoa_r+0x594>
 8008918:	0800b618 	.word	0x0800b618
 800891c:	0800b5f0 	.word	0x0800b5f0
 8008920:	3ff00000 	.word	0x3ff00000
 8008924:	40240000 	.word	0x40240000
 8008928:	401c0000 	.word	0x401c0000
 800892c:	40140000 	.word	0x40140000
 8008930:	3fe00000 	.word	0x3fe00000
 8008934:	9d01      	ldr	r5, [sp, #4]
 8008936:	4656      	mov	r6, sl
 8008938:	465f      	mov	r7, fp
 800893a:	4642      	mov	r2, r8
 800893c:	464b      	mov	r3, r9
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 ffab 	bl	800089c <__aeabi_ddiv>
 8008946:	f7f8 f92f 	bl	8000ba8 <__aeabi_d2iz>
 800894a:	4682      	mov	sl, r0
 800894c:	f7f7 fe12 	bl	8000574 <__aeabi_i2d>
 8008950:	4642      	mov	r2, r8
 8008952:	464b      	mov	r3, r9
 8008954:	f7f7 fe78 	bl	8000648 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008964:	f7f7 fcb8 	bl	80002d8 <__aeabi_dsub>
 8008968:	f805 6b01 	strb.w	r6, [r5], #1
 800896c:	9e01      	ldr	r6, [sp, #4]
 800896e:	9f03      	ldr	r7, [sp, #12]
 8008970:	1bae      	subs	r6, r5, r6
 8008972:	42b7      	cmp	r7, r6
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	d135      	bne.n	80089e6 <_dtoa_r+0x6e6>
 800897a:	f7f7 fcaf 	bl	80002dc <__adddf3>
 800897e:	4642      	mov	r2, r8
 8008980:	464b      	mov	r3, r9
 8008982:	4606      	mov	r6, r0
 8008984:	460f      	mov	r7, r1
 8008986:	f7f8 f8ef 	bl	8000b68 <__aeabi_dcmpgt>
 800898a:	b9d0      	cbnz	r0, 80089c2 <_dtoa_r+0x6c2>
 800898c:	4642      	mov	r2, r8
 800898e:	464b      	mov	r3, r9
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f8 f8c0 	bl	8000b18 <__aeabi_dcmpeq>
 8008998:	b110      	cbz	r0, 80089a0 <_dtoa_r+0x6a0>
 800899a:	f01a 0f01 	tst.w	sl, #1
 800899e:	d110      	bne.n	80089c2 <_dtoa_r+0x6c2>
 80089a0:	4620      	mov	r0, r4
 80089a2:	ee18 1a10 	vmov	r1, s16
 80089a6:	f000 faf3 	bl	8008f90 <_Bfree>
 80089aa:	2300      	movs	r3, #0
 80089ac:	9800      	ldr	r0, [sp, #0]
 80089ae:	702b      	strb	r3, [r5, #0]
 80089b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089b2:	3001      	adds	r0, #1
 80089b4:	6018      	str	r0, [r3, #0]
 80089b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f43f acf1 	beq.w	80083a0 <_dtoa_r+0xa0>
 80089be:	601d      	str	r5, [r3, #0]
 80089c0:	e4ee      	b.n	80083a0 <_dtoa_r+0xa0>
 80089c2:	9f00      	ldr	r7, [sp, #0]
 80089c4:	462b      	mov	r3, r5
 80089c6:	461d      	mov	r5, r3
 80089c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089cc:	2a39      	cmp	r2, #57	; 0x39
 80089ce:	d106      	bne.n	80089de <_dtoa_r+0x6de>
 80089d0:	9a01      	ldr	r2, [sp, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d1f7      	bne.n	80089c6 <_dtoa_r+0x6c6>
 80089d6:	9901      	ldr	r1, [sp, #4]
 80089d8:	2230      	movs	r2, #48	; 0x30
 80089da:	3701      	adds	r7, #1
 80089dc:	700a      	strb	r2, [r1, #0]
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	3201      	adds	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	e790      	b.n	8008908 <_dtoa_r+0x608>
 80089e6:	4ba6      	ldr	r3, [pc, #664]	; (8008c80 <_dtoa_r+0x980>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	f7f7 fe2d 	bl	8000648 <__aeabi_dmul>
 80089ee:	2200      	movs	r2, #0
 80089f0:	2300      	movs	r3, #0
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	f7f8 f88f 	bl	8000b18 <__aeabi_dcmpeq>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d09d      	beq.n	800893a <_dtoa_r+0x63a>
 80089fe:	e7cf      	b.n	80089a0 <_dtoa_r+0x6a0>
 8008a00:	9a08      	ldr	r2, [sp, #32]
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	f000 80d7 	beq.w	8008bb6 <_dtoa_r+0x8b6>
 8008a08:	9a06      	ldr	r2, [sp, #24]
 8008a0a:	2a01      	cmp	r2, #1
 8008a0c:	f300 80ba 	bgt.w	8008b84 <_dtoa_r+0x884>
 8008a10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	f000 80b2 	beq.w	8008b7c <_dtoa_r+0x87c>
 8008a18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a1c:	9e07      	ldr	r6, [sp, #28]
 8008a1e:	9d04      	ldr	r5, [sp, #16]
 8008a20:	9a04      	ldr	r2, [sp, #16]
 8008a22:	441a      	add	r2, r3
 8008a24:	9204      	str	r2, [sp, #16]
 8008a26:	9a05      	ldr	r2, [sp, #20]
 8008a28:	2101      	movs	r1, #1
 8008a2a:	441a      	add	r2, r3
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	9205      	str	r2, [sp, #20]
 8008a30:	f000 fb66 	bl	8009100 <__i2b>
 8008a34:	4607      	mov	r7, r0
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	dd0c      	ble.n	8008a54 <_dtoa_r+0x754>
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dd09      	ble.n	8008a54 <_dtoa_r+0x754>
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	9a04      	ldr	r2, [sp, #16]
 8008a44:	bfa8      	it	ge
 8008a46:	462b      	movge	r3, r5
 8008a48:	1ad2      	subs	r2, r2, r3
 8008a4a:	9204      	str	r2, [sp, #16]
 8008a4c:	9a05      	ldr	r2, [sp, #20]
 8008a4e:	1aed      	subs	r5, r5, r3
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	b31b      	cbz	r3, 8008aa0 <_dtoa_r+0x7a0>
 8008a58:	9b08      	ldr	r3, [sp, #32]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 80af 	beq.w	8008bbe <_dtoa_r+0x8be>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd13      	ble.n	8008a8c <_dtoa_r+0x78c>
 8008a64:	4639      	mov	r1, r7
 8008a66:	4632      	mov	r2, r6
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fc09 	bl	8009280 <__pow5mult>
 8008a6e:	ee18 2a10 	vmov	r2, s16
 8008a72:	4601      	mov	r1, r0
 8008a74:	4607      	mov	r7, r0
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 fb58 	bl	800912c <__multiply>
 8008a7c:	ee18 1a10 	vmov	r1, s16
 8008a80:	4680      	mov	r8, r0
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fa84 	bl	8008f90 <_Bfree>
 8008a88:	ee08 8a10 	vmov	s16, r8
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	1b9a      	subs	r2, r3, r6
 8008a90:	d006      	beq.n	8008aa0 <_dtoa_r+0x7a0>
 8008a92:	ee18 1a10 	vmov	r1, s16
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 fbf2 	bl	8009280 <__pow5mult>
 8008a9c:	ee08 0a10 	vmov	s16, r0
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fb2c 	bl	8009100 <__i2b>
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	4606      	mov	r6, r0
 8008aae:	f340 8088 	ble.w	8008bc2 <_dtoa_r+0x8c2>
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 fbe2 	bl	8009280 <__pow5mult>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	f340 8081 	ble.w	8008bc8 <_dtoa_r+0x8c8>
 8008ac6:	f04f 0800 	mov.w	r8, #0
 8008aca:	6933      	ldr	r3, [r6, #16]
 8008acc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ad0:	6918      	ldr	r0, [r3, #16]
 8008ad2:	f000 fac5 	bl	8009060 <__hi0bits>
 8008ad6:	f1c0 0020 	rsb	r0, r0, #32
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	4418      	add	r0, r3
 8008ade:	f010 001f 	ands.w	r0, r0, #31
 8008ae2:	f000 8092 	beq.w	8008c0a <_dtoa_r+0x90a>
 8008ae6:	f1c0 0320 	rsb	r3, r0, #32
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	f340 808a 	ble.w	8008c04 <_dtoa_r+0x904>
 8008af0:	f1c0 001c 	rsb	r0, r0, #28
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	4403      	add	r3, r0
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	9b05      	ldr	r3, [sp, #20]
 8008afc:	4403      	add	r3, r0
 8008afe:	4405      	add	r5, r0
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd07      	ble.n	8008b18 <_dtoa_r+0x818>
 8008b08:	ee18 1a10 	vmov	r1, s16
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fc10 	bl	8009334 <__lshift>
 8008b14:	ee08 0a10 	vmov	s16, r0
 8008b18:	9b05      	ldr	r3, [sp, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	dd05      	ble.n	8008b2a <_dtoa_r+0x82a>
 8008b1e:	4631      	mov	r1, r6
 8008b20:	461a      	mov	r2, r3
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 fc06 	bl	8009334 <__lshift>
 8008b28:	4606      	mov	r6, r0
 8008b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d06e      	beq.n	8008c0e <_dtoa_r+0x90e>
 8008b30:	ee18 0a10 	vmov	r0, s16
 8008b34:	4631      	mov	r1, r6
 8008b36:	f000 fc6d 	bl	8009414 <__mcmp>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	da67      	bge.n	8008c0e <_dtoa_r+0x90e>
 8008b3e:	9b00      	ldr	r3, [sp, #0]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	ee18 1a10 	vmov	r1, s16
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	220a      	movs	r2, #10
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fa41 	bl	8008fd4 <__multadd>
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	ee08 0a10 	vmov	s16, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 81b1 	beq.w	8008ec0 <_dtoa_r+0xbc0>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	4639      	mov	r1, r7
 8008b62:	220a      	movs	r2, #10
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fa35 	bl	8008fd4 <__multadd>
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	4607      	mov	r7, r0
 8008b70:	f300 808e 	bgt.w	8008c90 <_dtoa_r+0x990>
 8008b74:	9b06      	ldr	r3, [sp, #24]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	dc51      	bgt.n	8008c1e <_dtoa_r+0x91e>
 8008b7a:	e089      	b.n	8008c90 <_dtoa_r+0x990>
 8008b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b82:	e74b      	b.n	8008a1c <_dtoa_r+0x71c>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	1e5e      	subs	r6, r3, #1
 8008b88:	9b07      	ldr	r3, [sp, #28]
 8008b8a:	42b3      	cmp	r3, r6
 8008b8c:	bfbf      	itttt	lt
 8008b8e:	9b07      	ldrlt	r3, [sp, #28]
 8008b90:	9607      	strlt	r6, [sp, #28]
 8008b92:	1af2      	sublt	r2, r6, r3
 8008b94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b96:	bfb6      	itet	lt
 8008b98:	189b      	addlt	r3, r3, r2
 8008b9a:	1b9e      	subge	r6, r3, r6
 8008b9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b9e:	9b03      	ldr	r3, [sp, #12]
 8008ba0:	bfb8      	it	lt
 8008ba2:	2600      	movlt	r6, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bfb7      	itett	lt
 8008ba8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008bb0:	1a9d      	sublt	r5, r3, r2
 8008bb2:	2300      	movlt	r3, #0
 8008bb4:	e734      	b.n	8008a20 <_dtoa_r+0x720>
 8008bb6:	9e07      	ldr	r6, [sp, #28]
 8008bb8:	9d04      	ldr	r5, [sp, #16]
 8008bba:	9f08      	ldr	r7, [sp, #32]
 8008bbc:	e73b      	b.n	8008a36 <_dtoa_r+0x736>
 8008bbe:	9a07      	ldr	r2, [sp, #28]
 8008bc0:	e767      	b.n	8008a92 <_dtoa_r+0x792>
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	dc18      	bgt.n	8008bfa <_dtoa_r+0x8fa>
 8008bc8:	f1ba 0f00 	cmp.w	sl, #0
 8008bcc:	d115      	bne.n	8008bfa <_dtoa_r+0x8fa>
 8008bce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd2:	b993      	cbnz	r3, 8008bfa <_dtoa_r+0x8fa>
 8008bd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bd8:	0d1b      	lsrs	r3, r3, #20
 8008bda:	051b      	lsls	r3, r3, #20
 8008bdc:	b183      	cbz	r3, 8008c00 <_dtoa_r+0x900>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	3301      	adds	r3, #1
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	9b05      	ldr	r3, [sp, #20]
 8008be6:	3301      	adds	r3, #1
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	f04f 0801 	mov.w	r8, #1
 8008bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f47f af6a 	bne.w	8008aca <_dtoa_r+0x7ca>
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	e76f      	b.n	8008ada <_dtoa_r+0x7da>
 8008bfa:	f04f 0800 	mov.w	r8, #0
 8008bfe:	e7f6      	b.n	8008bee <_dtoa_r+0x8ee>
 8008c00:	4698      	mov	r8, r3
 8008c02:	e7f4      	b.n	8008bee <_dtoa_r+0x8ee>
 8008c04:	f43f af7d 	beq.w	8008b02 <_dtoa_r+0x802>
 8008c08:	4618      	mov	r0, r3
 8008c0a:	301c      	adds	r0, #28
 8008c0c:	e772      	b.n	8008af4 <_dtoa_r+0x7f4>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dc37      	bgt.n	8008c84 <_dtoa_r+0x984>
 8008c14:	9b06      	ldr	r3, [sp, #24]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	dd34      	ble.n	8008c84 <_dtoa_r+0x984>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	9302      	str	r3, [sp, #8]
 8008c1e:	9b02      	ldr	r3, [sp, #8]
 8008c20:	b96b      	cbnz	r3, 8008c3e <_dtoa_r+0x93e>
 8008c22:	4631      	mov	r1, r6
 8008c24:	2205      	movs	r2, #5
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 f9d4 	bl	8008fd4 <__multadd>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	4606      	mov	r6, r0
 8008c30:	ee18 0a10 	vmov	r0, s16
 8008c34:	f000 fbee 	bl	8009414 <__mcmp>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f73f adbb 	bgt.w	80087b4 <_dtoa_r+0x4b4>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c40:	9d01      	ldr	r5, [sp, #4]
 8008c42:	43db      	mvns	r3, r3
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 f99f 	bl	8008f90 <_Bfree>
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	f43f aea4 	beq.w	80089a0 <_dtoa_r+0x6a0>
 8008c58:	f1b8 0f00 	cmp.w	r8, #0
 8008c5c:	d005      	beq.n	8008c6a <_dtoa_r+0x96a>
 8008c5e:	45b8      	cmp	r8, r7
 8008c60:	d003      	beq.n	8008c6a <_dtoa_r+0x96a>
 8008c62:	4641      	mov	r1, r8
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 f993 	bl	8008f90 <_Bfree>
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 f98f 	bl	8008f90 <_Bfree>
 8008c72:	e695      	b.n	80089a0 <_dtoa_r+0x6a0>
 8008c74:	2600      	movs	r6, #0
 8008c76:	4637      	mov	r7, r6
 8008c78:	e7e1      	b.n	8008c3e <_dtoa_r+0x93e>
 8008c7a:	9700      	str	r7, [sp, #0]
 8008c7c:	4637      	mov	r7, r6
 8008c7e:	e599      	b.n	80087b4 <_dtoa_r+0x4b4>
 8008c80:	40240000 	.word	0x40240000
 8008c84:	9b08      	ldr	r3, [sp, #32]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80ca 	beq.w	8008e20 <_dtoa_r+0xb20>
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	9302      	str	r3, [sp, #8]
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	dd05      	ble.n	8008ca0 <_dtoa_r+0x9a0>
 8008c94:	4639      	mov	r1, r7
 8008c96:	462a      	mov	r2, r5
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fb4b 	bl	8009334 <__lshift>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d05b      	beq.n	8008d5e <_dtoa_r+0xa5e>
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 f931 	bl	8008f10 <_Balloc>
 8008cae:	4605      	mov	r5, r0
 8008cb0:	b928      	cbnz	r0, 8008cbe <_dtoa_r+0x9be>
 8008cb2:	4b87      	ldr	r3, [pc, #540]	; (8008ed0 <_dtoa_r+0xbd0>)
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cba:	f7ff bb3b 	b.w	8008334 <_dtoa_r+0x34>
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	f107 010c 	add.w	r1, r7, #12
 8008cc8:	300c      	adds	r0, #12
 8008cca:	f000 f913 	bl	8008ef4 <memcpy>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 fb2e 	bl	8009334 <__lshift>
 8008cd8:	9b01      	ldr	r3, [sp, #4]
 8008cda:	f103 0901 	add.w	r9, r3, #1
 8008cde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	9305      	str	r3, [sp, #20]
 8008ce6:	f00a 0301 	and.w	r3, sl, #1
 8008cea:	46b8      	mov	r8, r7
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	4607      	mov	r7, r0
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	ee18 0a10 	vmov	r0, s16
 8008cf6:	f7ff fa77 	bl	80081e8 <quorem>
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	9002      	str	r0, [sp, #8]
 8008cfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d02:	ee18 0a10 	vmov	r0, s16
 8008d06:	f000 fb85 	bl	8009414 <__mcmp>
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	9003      	str	r0, [sp, #12]
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fb9b 	bl	800944c <__mdiff>
 8008d16:	68c2      	ldr	r2, [r0, #12]
 8008d18:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	bb02      	cbnz	r2, 8008d62 <_dtoa_r+0xa62>
 8008d20:	4601      	mov	r1, r0
 8008d22:	ee18 0a10 	vmov	r0, s16
 8008d26:	f000 fb75 	bl	8009414 <__mcmp>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4620      	mov	r0, r4
 8008d30:	9207      	str	r2, [sp, #28]
 8008d32:	f000 f92d 	bl	8008f90 <_Bfree>
 8008d36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d3a:	ea43 0102 	orr.w	r1, r3, r2
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	430b      	orrs	r3, r1
 8008d42:	464d      	mov	r5, r9
 8008d44:	d10f      	bne.n	8008d66 <_dtoa_r+0xa66>
 8008d46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d4a:	d02a      	beq.n	8008da2 <_dtoa_r+0xaa2>
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd02      	ble.n	8008d58 <_dtoa_r+0xa58>
 8008d52:	9b02      	ldr	r3, [sp, #8]
 8008d54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d58:	f88b a000 	strb.w	sl, [fp]
 8008d5c:	e775      	b.n	8008c4a <_dtoa_r+0x94a>
 8008d5e:	4638      	mov	r0, r7
 8008d60:	e7ba      	b.n	8008cd8 <_dtoa_r+0x9d8>
 8008d62:	2201      	movs	r2, #1
 8008d64:	e7e2      	b.n	8008d2c <_dtoa_r+0xa2c>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	db04      	blt.n	8008d76 <_dtoa_r+0xa76>
 8008d6c:	9906      	ldr	r1, [sp, #24]
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	9904      	ldr	r1, [sp, #16]
 8008d72:	430b      	orrs	r3, r1
 8008d74:	d122      	bne.n	8008dbc <_dtoa_r+0xabc>
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	ddee      	ble.n	8008d58 <_dtoa_r+0xa58>
 8008d7a:	ee18 1a10 	vmov	r1, s16
 8008d7e:	2201      	movs	r2, #1
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fad7 	bl	8009334 <__lshift>
 8008d86:	4631      	mov	r1, r6
 8008d88:	ee08 0a10 	vmov	s16, r0
 8008d8c:	f000 fb42 	bl	8009414 <__mcmp>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	dc03      	bgt.n	8008d9c <_dtoa_r+0xa9c>
 8008d94:	d1e0      	bne.n	8008d58 <_dtoa_r+0xa58>
 8008d96:	f01a 0f01 	tst.w	sl, #1
 8008d9a:	d0dd      	beq.n	8008d58 <_dtoa_r+0xa58>
 8008d9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008da0:	d1d7      	bne.n	8008d52 <_dtoa_r+0xa52>
 8008da2:	2339      	movs	r3, #57	; 0x39
 8008da4:	f88b 3000 	strb.w	r3, [fp]
 8008da8:	462b      	mov	r3, r5
 8008daa:	461d      	mov	r5, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008db2:	2a39      	cmp	r2, #57	; 0x39
 8008db4:	d071      	beq.n	8008e9a <_dtoa_r+0xb9a>
 8008db6:	3201      	adds	r2, #1
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	e746      	b.n	8008c4a <_dtoa_r+0x94a>
 8008dbc:	2a00      	cmp	r2, #0
 8008dbe:	dd07      	ble.n	8008dd0 <_dtoa_r+0xad0>
 8008dc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dc4:	d0ed      	beq.n	8008da2 <_dtoa_r+0xaa2>
 8008dc6:	f10a 0301 	add.w	r3, sl, #1
 8008dca:	f88b 3000 	strb.w	r3, [fp]
 8008dce:	e73c      	b.n	8008c4a <_dtoa_r+0x94a>
 8008dd0:	9b05      	ldr	r3, [sp, #20]
 8008dd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dd6:	4599      	cmp	r9, r3
 8008dd8:	d047      	beq.n	8008e6a <_dtoa_r+0xb6a>
 8008dda:	ee18 1a10 	vmov	r1, s16
 8008dde:	2300      	movs	r3, #0
 8008de0:	220a      	movs	r2, #10
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f8f6 	bl	8008fd4 <__multadd>
 8008de8:	45b8      	cmp	r8, r7
 8008dea:	ee08 0a10 	vmov	s16, r0
 8008dee:	f04f 0300 	mov.w	r3, #0
 8008df2:	f04f 020a 	mov.w	r2, #10
 8008df6:	4641      	mov	r1, r8
 8008df8:	4620      	mov	r0, r4
 8008dfa:	d106      	bne.n	8008e0a <_dtoa_r+0xb0a>
 8008dfc:	f000 f8ea 	bl	8008fd4 <__multadd>
 8008e00:	4680      	mov	r8, r0
 8008e02:	4607      	mov	r7, r0
 8008e04:	f109 0901 	add.w	r9, r9, #1
 8008e08:	e772      	b.n	8008cf0 <_dtoa_r+0x9f0>
 8008e0a:	f000 f8e3 	bl	8008fd4 <__multadd>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4680      	mov	r8, r0
 8008e12:	2300      	movs	r3, #0
 8008e14:	220a      	movs	r2, #10
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f8dc 	bl	8008fd4 <__multadd>
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	e7f1      	b.n	8008e04 <_dtoa_r+0xb04>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	9302      	str	r3, [sp, #8]
 8008e24:	9d01      	ldr	r5, [sp, #4]
 8008e26:	ee18 0a10 	vmov	r0, s16
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	f7ff f9dc 	bl	80081e8 <quorem>
 8008e30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e34:	9b01      	ldr	r3, [sp, #4]
 8008e36:	f805 ab01 	strb.w	sl, [r5], #1
 8008e3a:	1aea      	subs	r2, r5, r3
 8008e3c:	9b02      	ldr	r3, [sp, #8]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	dd09      	ble.n	8008e56 <_dtoa_r+0xb56>
 8008e42:	ee18 1a10 	vmov	r1, s16
 8008e46:	2300      	movs	r3, #0
 8008e48:	220a      	movs	r2, #10
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 f8c2 	bl	8008fd4 <__multadd>
 8008e50:	ee08 0a10 	vmov	s16, r0
 8008e54:	e7e7      	b.n	8008e26 <_dtoa_r+0xb26>
 8008e56:	9b02      	ldr	r3, [sp, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	bfc8      	it	gt
 8008e5c:	461d      	movgt	r5, r3
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	bfd8      	it	le
 8008e62:	2501      	movle	r5, #1
 8008e64:	441d      	add	r5, r3
 8008e66:	f04f 0800 	mov.w	r8, #0
 8008e6a:	ee18 1a10 	vmov	r1, s16
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 fa5f 	bl	8009334 <__lshift>
 8008e76:	4631      	mov	r1, r6
 8008e78:	ee08 0a10 	vmov	s16, r0
 8008e7c:	f000 faca 	bl	8009414 <__mcmp>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	dc91      	bgt.n	8008da8 <_dtoa_r+0xaa8>
 8008e84:	d102      	bne.n	8008e8c <_dtoa_r+0xb8c>
 8008e86:	f01a 0f01 	tst.w	sl, #1
 8008e8a:	d18d      	bne.n	8008da8 <_dtoa_r+0xaa8>
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	461d      	mov	r5, r3
 8008e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e94:	2a30      	cmp	r2, #48	; 0x30
 8008e96:	d0fa      	beq.n	8008e8e <_dtoa_r+0xb8e>
 8008e98:	e6d7      	b.n	8008c4a <_dtoa_r+0x94a>
 8008e9a:	9a01      	ldr	r2, [sp, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d184      	bne.n	8008daa <_dtoa_r+0xaaa>
 8008ea0:	9b00      	ldr	r3, [sp, #0]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2331      	movs	r3, #49	; 0x31
 8008ea8:	7013      	strb	r3, [r2, #0]
 8008eaa:	e6ce      	b.n	8008c4a <_dtoa_r+0x94a>
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <_dtoa_r+0xbd4>)
 8008eae:	f7ff ba95 	b.w	80083dc <_dtoa_r+0xdc>
 8008eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f47f aa6e 	bne.w	8008396 <_dtoa_r+0x96>
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <_dtoa_r+0xbd8>)
 8008ebc:	f7ff ba8e 	b.w	80083dc <_dtoa_r+0xdc>
 8008ec0:	9b02      	ldr	r3, [sp, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dcae      	bgt.n	8008e24 <_dtoa_r+0xb24>
 8008ec6:	9b06      	ldr	r3, [sp, #24]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	f73f aea8 	bgt.w	8008c1e <_dtoa_r+0x91e>
 8008ece:	e7a9      	b.n	8008e24 <_dtoa_r+0xb24>
 8008ed0:	0800b583 	.word	0x0800b583
 8008ed4:	0800b4e0 	.word	0x0800b4e0
 8008ed8:	0800b504 	.word	0x0800b504

08008edc <_localeconv_r>:
 8008edc:	4800      	ldr	r0, [pc, #0]	; (8008ee0 <_localeconv_r+0x4>)
 8008ede:	4770      	bx	lr
 8008ee0:	20000180 	.word	0x20000180

08008ee4 <malloc>:
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <malloc+0xc>)
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f000 bc17 	b.w	800971c <_malloc_r>
 8008eee:	bf00      	nop
 8008ef0:	2000002c 	.word	0x2000002c

08008ef4 <memcpy>:
 8008ef4:	440a      	add	r2, r1
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008efc:	d100      	bne.n	8008f00 <memcpy+0xc>
 8008efe:	4770      	bx	lr
 8008f00:	b510      	push	{r4, lr}
 8008f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	d1f9      	bne.n	8008f02 <memcpy+0xe>
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <_Balloc>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	b976      	cbnz	r6, 8008f38 <_Balloc+0x28>
 8008f1a:	2010      	movs	r0, #16
 8008f1c:	f7ff ffe2 	bl	8008ee4 <malloc>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6260      	str	r0, [r4, #36]	; 0x24
 8008f24:	b920      	cbnz	r0, 8008f30 <_Balloc+0x20>
 8008f26:	4b18      	ldr	r3, [pc, #96]	; (8008f88 <_Balloc+0x78>)
 8008f28:	4818      	ldr	r0, [pc, #96]	; (8008f8c <_Balloc+0x7c>)
 8008f2a:	2166      	movs	r1, #102	; 0x66
 8008f2c:	f000 fdd6 	bl	8009adc <__assert_func>
 8008f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f34:	6006      	str	r6, [r0, #0]
 8008f36:	60c6      	str	r6, [r0, #12]
 8008f38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f3a:	68f3      	ldr	r3, [r6, #12]
 8008f3c:	b183      	cbz	r3, 8008f60 <_Balloc+0x50>
 8008f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f46:	b9b8      	cbnz	r0, 8008f78 <_Balloc+0x68>
 8008f48:	2101      	movs	r1, #1
 8008f4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f4e:	1d72      	adds	r2, r6, #5
 8008f50:	0092      	lsls	r2, r2, #2
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fb60 	bl	8009618 <_calloc_r>
 8008f58:	b160      	cbz	r0, 8008f74 <_Balloc+0x64>
 8008f5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f5e:	e00e      	b.n	8008f7e <_Balloc+0x6e>
 8008f60:	2221      	movs	r2, #33	; 0x21
 8008f62:	2104      	movs	r1, #4
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fb57 	bl	8009618 <_calloc_r>
 8008f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f6c:	60f0      	str	r0, [r6, #12]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e4      	bne.n	8008f3e <_Balloc+0x2e>
 8008f74:	2000      	movs	r0, #0
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	6802      	ldr	r2, [r0, #0]
 8008f7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f84:	e7f7      	b.n	8008f76 <_Balloc+0x66>
 8008f86:	bf00      	nop
 8008f88:	0800b511 	.word	0x0800b511
 8008f8c:	0800b594 	.word	0x0800b594

08008f90 <_Bfree>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b976      	cbnz	r6, 8008fb8 <_Bfree+0x28>
 8008f9a:	2010      	movs	r0, #16
 8008f9c:	f7ff ffa2 	bl	8008ee4 <malloc>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6268      	str	r0, [r5, #36]	; 0x24
 8008fa4:	b920      	cbnz	r0, 8008fb0 <_Bfree+0x20>
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <_Bfree+0x3c>)
 8008fa8:	4809      	ldr	r0, [pc, #36]	; (8008fd0 <_Bfree+0x40>)
 8008faa:	218a      	movs	r1, #138	; 0x8a
 8008fac:	f000 fd96 	bl	8009adc <__assert_func>
 8008fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb4:	6006      	str	r6, [r0, #0]
 8008fb6:	60c6      	str	r6, [r0, #12]
 8008fb8:	b13c      	cbz	r4, 8008fca <_Bfree+0x3a>
 8008fba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fbc:	6862      	ldr	r2, [r4, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fc4:	6021      	str	r1, [r4, #0]
 8008fc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	0800b511 	.word	0x0800b511
 8008fd0:	0800b594 	.word	0x0800b594

08008fd4 <__multadd>:
 8008fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd8:	690d      	ldr	r5, [r1, #16]
 8008fda:	4607      	mov	r7, r0
 8008fdc:	460c      	mov	r4, r1
 8008fde:	461e      	mov	r6, r3
 8008fe0:	f101 0c14 	add.w	ip, r1, #20
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	f8dc 3000 	ldr.w	r3, [ip]
 8008fea:	b299      	uxth	r1, r3
 8008fec:	fb02 6101 	mla	r1, r2, r1, r6
 8008ff0:	0c1e      	lsrs	r6, r3, #16
 8008ff2:	0c0b      	lsrs	r3, r1, #16
 8008ff4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ff8:	b289      	uxth	r1, r1
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009000:	4285      	cmp	r5, r0
 8009002:	f84c 1b04 	str.w	r1, [ip], #4
 8009006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800900a:	dcec      	bgt.n	8008fe6 <__multadd+0x12>
 800900c:	b30e      	cbz	r6, 8009052 <__multadd+0x7e>
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	42ab      	cmp	r3, r5
 8009012:	dc19      	bgt.n	8009048 <__multadd+0x74>
 8009014:	6861      	ldr	r1, [r4, #4]
 8009016:	4638      	mov	r0, r7
 8009018:	3101      	adds	r1, #1
 800901a:	f7ff ff79 	bl	8008f10 <_Balloc>
 800901e:	4680      	mov	r8, r0
 8009020:	b928      	cbnz	r0, 800902e <__multadd+0x5a>
 8009022:	4602      	mov	r2, r0
 8009024:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <__multadd+0x84>)
 8009026:	480d      	ldr	r0, [pc, #52]	; (800905c <__multadd+0x88>)
 8009028:	21b5      	movs	r1, #181	; 0xb5
 800902a:	f000 fd57 	bl	8009adc <__assert_func>
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	3202      	adds	r2, #2
 8009032:	f104 010c 	add.w	r1, r4, #12
 8009036:	0092      	lsls	r2, r2, #2
 8009038:	300c      	adds	r0, #12
 800903a:	f7ff ff5b 	bl	8008ef4 <memcpy>
 800903e:	4621      	mov	r1, r4
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa5 	bl	8008f90 <_Bfree>
 8009046:	4644      	mov	r4, r8
 8009048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800904c:	3501      	adds	r5, #1
 800904e:	615e      	str	r6, [r3, #20]
 8009050:	6125      	str	r5, [r4, #16]
 8009052:	4620      	mov	r0, r4
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	0800b583 	.word	0x0800b583
 800905c:	0800b594 	.word	0x0800b594

08009060 <__hi0bits>:
 8009060:	0c03      	lsrs	r3, r0, #16
 8009062:	041b      	lsls	r3, r3, #16
 8009064:	b9d3      	cbnz	r3, 800909c <__hi0bits+0x3c>
 8009066:	0400      	lsls	r0, r0, #16
 8009068:	2310      	movs	r3, #16
 800906a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800906e:	bf04      	itt	eq
 8009070:	0200      	lsleq	r0, r0, #8
 8009072:	3308      	addeq	r3, #8
 8009074:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009078:	bf04      	itt	eq
 800907a:	0100      	lsleq	r0, r0, #4
 800907c:	3304      	addeq	r3, #4
 800907e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009082:	bf04      	itt	eq
 8009084:	0080      	lsleq	r0, r0, #2
 8009086:	3302      	addeq	r3, #2
 8009088:	2800      	cmp	r0, #0
 800908a:	db05      	blt.n	8009098 <__hi0bits+0x38>
 800908c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009090:	f103 0301 	add.w	r3, r3, #1
 8009094:	bf08      	it	eq
 8009096:	2320      	moveq	r3, #32
 8009098:	4618      	mov	r0, r3
 800909a:	4770      	bx	lr
 800909c:	2300      	movs	r3, #0
 800909e:	e7e4      	b.n	800906a <__hi0bits+0xa>

080090a0 <__lo0bits>:
 80090a0:	6803      	ldr	r3, [r0, #0]
 80090a2:	f013 0207 	ands.w	r2, r3, #7
 80090a6:	4601      	mov	r1, r0
 80090a8:	d00b      	beq.n	80090c2 <__lo0bits+0x22>
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d423      	bmi.n	80090f6 <__lo0bits+0x56>
 80090ae:	0798      	lsls	r0, r3, #30
 80090b0:	bf49      	itett	mi
 80090b2:	085b      	lsrmi	r3, r3, #1
 80090b4:	089b      	lsrpl	r3, r3, #2
 80090b6:	2001      	movmi	r0, #1
 80090b8:	600b      	strmi	r3, [r1, #0]
 80090ba:	bf5c      	itt	pl
 80090bc:	600b      	strpl	r3, [r1, #0]
 80090be:	2002      	movpl	r0, #2
 80090c0:	4770      	bx	lr
 80090c2:	b298      	uxth	r0, r3
 80090c4:	b9a8      	cbnz	r0, 80090f2 <__lo0bits+0x52>
 80090c6:	0c1b      	lsrs	r3, r3, #16
 80090c8:	2010      	movs	r0, #16
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	b90a      	cbnz	r2, 80090d2 <__lo0bits+0x32>
 80090ce:	3008      	adds	r0, #8
 80090d0:	0a1b      	lsrs	r3, r3, #8
 80090d2:	071a      	lsls	r2, r3, #28
 80090d4:	bf04      	itt	eq
 80090d6:	091b      	lsreq	r3, r3, #4
 80090d8:	3004      	addeq	r0, #4
 80090da:	079a      	lsls	r2, r3, #30
 80090dc:	bf04      	itt	eq
 80090de:	089b      	lsreq	r3, r3, #2
 80090e0:	3002      	addeq	r0, #2
 80090e2:	07da      	lsls	r2, r3, #31
 80090e4:	d403      	bmi.n	80090ee <__lo0bits+0x4e>
 80090e6:	085b      	lsrs	r3, r3, #1
 80090e8:	f100 0001 	add.w	r0, r0, #1
 80090ec:	d005      	beq.n	80090fa <__lo0bits+0x5a>
 80090ee:	600b      	str	r3, [r1, #0]
 80090f0:	4770      	bx	lr
 80090f2:	4610      	mov	r0, r2
 80090f4:	e7e9      	b.n	80090ca <__lo0bits+0x2a>
 80090f6:	2000      	movs	r0, #0
 80090f8:	4770      	bx	lr
 80090fa:	2020      	movs	r0, #32
 80090fc:	4770      	bx	lr
	...

08009100 <__i2b>:
 8009100:	b510      	push	{r4, lr}
 8009102:	460c      	mov	r4, r1
 8009104:	2101      	movs	r1, #1
 8009106:	f7ff ff03 	bl	8008f10 <_Balloc>
 800910a:	4602      	mov	r2, r0
 800910c:	b928      	cbnz	r0, 800911a <__i2b+0x1a>
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <__i2b+0x24>)
 8009110:	4805      	ldr	r0, [pc, #20]	; (8009128 <__i2b+0x28>)
 8009112:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009116:	f000 fce1 	bl	8009adc <__assert_func>
 800911a:	2301      	movs	r3, #1
 800911c:	6144      	str	r4, [r0, #20]
 800911e:	6103      	str	r3, [r0, #16]
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	0800b583 	.word	0x0800b583
 8009128:	0800b594 	.word	0x0800b594

0800912c <__multiply>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4691      	mov	r9, r2
 8009132:	690a      	ldr	r2, [r1, #16]
 8009134:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009138:	429a      	cmp	r2, r3
 800913a:	bfb8      	it	lt
 800913c:	460b      	movlt	r3, r1
 800913e:	460c      	mov	r4, r1
 8009140:	bfbc      	itt	lt
 8009142:	464c      	movlt	r4, r9
 8009144:	4699      	movlt	r9, r3
 8009146:	6927      	ldr	r7, [r4, #16]
 8009148:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800914c:	68a3      	ldr	r3, [r4, #8]
 800914e:	6861      	ldr	r1, [r4, #4]
 8009150:	eb07 060a 	add.w	r6, r7, sl
 8009154:	42b3      	cmp	r3, r6
 8009156:	b085      	sub	sp, #20
 8009158:	bfb8      	it	lt
 800915a:	3101      	addlt	r1, #1
 800915c:	f7ff fed8 	bl	8008f10 <_Balloc>
 8009160:	b930      	cbnz	r0, 8009170 <__multiply+0x44>
 8009162:	4602      	mov	r2, r0
 8009164:	4b44      	ldr	r3, [pc, #272]	; (8009278 <__multiply+0x14c>)
 8009166:	4845      	ldr	r0, [pc, #276]	; (800927c <__multiply+0x150>)
 8009168:	f240 115d 	movw	r1, #349	; 0x15d
 800916c:	f000 fcb6 	bl	8009adc <__assert_func>
 8009170:	f100 0514 	add.w	r5, r0, #20
 8009174:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009178:	462b      	mov	r3, r5
 800917a:	2200      	movs	r2, #0
 800917c:	4543      	cmp	r3, r8
 800917e:	d321      	bcc.n	80091c4 <__multiply+0x98>
 8009180:	f104 0314 	add.w	r3, r4, #20
 8009184:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009188:	f109 0314 	add.w	r3, r9, #20
 800918c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	1b3a      	subs	r2, r7, r4
 8009194:	3a15      	subs	r2, #21
 8009196:	f022 0203 	bic.w	r2, r2, #3
 800919a:	3204      	adds	r2, #4
 800919c:	f104 0115 	add.w	r1, r4, #21
 80091a0:	428f      	cmp	r7, r1
 80091a2:	bf38      	it	cc
 80091a4:	2204      	movcc	r2, #4
 80091a6:	9201      	str	r2, [sp, #4]
 80091a8:	9a02      	ldr	r2, [sp, #8]
 80091aa:	9303      	str	r3, [sp, #12]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d80c      	bhi.n	80091ca <__multiply+0x9e>
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	dd03      	ble.n	80091bc <__multiply+0x90>
 80091b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d05a      	beq.n	8009272 <__multiply+0x146>
 80091bc:	6106      	str	r6, [r0, #16]
 80091be:	b005      	add	sp, #20
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	f843 2b04 	str.w	r2, [r3], #4
 80091c8:	e7d8      	b.n	800917c <__multiply+0x50>
 80091ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80091ce:	f1ba 0f00 	cmp.w	sl, #0
 80091d2:	d024      	beq.n	800921e <__multiply+0xf2>
 80091d4:	f104 0e14 	add.w	lr, r4, #20
 80091d8:	46a9      	mov	r9, r5
 80091da:	f04f 0c00 	mov.w	ip, #0
 80091de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091e2:	f8d9 1000 	ldr.w	r1, [r9]
 80091e6:	fa1f fb82 	uxth.w	fp, r2
 80091ea:	b289      	uxth	r1, r1
 80091ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80091f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091f4:	f8d9 2000 	ldr.w	r2, [r9]
 80091f8:	4461      	add	r1, ip
 80091fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009202:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009206:	b289      	uxth	r1, r1
 8009208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800920c:	4577      	cmp	r7, lr
 800920e:	f849 1b04 	str.w	r1, [r9], #4
 8009212:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009216:	d8e2      	bhi.n	80091de <__multiply+0xb2>
 8009218:	9a01      	ldr	r2, [sp, #4]
 800921a:	f845 c002 	str.w	ip, [r5, r2]
 800921e:	9a03      	ldr	r2, [sp, #12]
 8009220:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009224:	3304      	adds	r3, #4
 8009226:	f1b9 0f00 	cmp.w	r9, #0
 800922a:	d020      	beq.n	800926e <__multiply+0x142>
 800922c:	6829      	ldr	r1, [r5, #0]
 800922e:	f104 0c14 	add.w	ip, r4, #20
 8009232:	46ae      	mov	lr, r5
 8009234:	f04f 0a00 	mov.w	sl, #0
 8009238:	f8bc b000 	ldrh.w	fp, [ip]
 800923c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009240:	fb09 220b 	mla	r2, r9, fp, r2
 8009244:	4492      	add	sl, r2
 8009246:	b289      	uxth	r1, r1
 8009248:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800924c:	f84e 1b04 	str.w	r1, [lr], #4
 8009250:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009254:	f8be 1000 	ldrh.w	r1, [lr]
 8009258:	0c12      	lsrs	r2, r2, #16
 800925a:	fb09 1102 	mla	r1, r9, r2, r1
 800925e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009262:	4567      	cmp	r7, ip
 8009264:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009268:	d8e6      	bhi.n	8009238 <__multiply+0x10c>
 800926a:	9a01      	ldr	r2, [sp, #4]
 800926c:	50a9      	str	r1, [r5, r2]
 800926e:	3504      	adds	r5, #4
 8009270:	e79a      	b.n	80091a8 <__multiply+0x7c>
 8009272:	3e01      	subs	r6, #1
 8009274:	e79c      	b.n	80091b0 <__multiply+0x84>
 8009276:	bf00      	nop
 8009278:	0800b583 	.word	0x0800b583
 800927c:	0800b594 	.word	0x0800b594

08009280 <__pow5mult>:
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	4615      	mov	r5, r2
 8009286:	f012 0203 	ands.w	r2, r2, #3
 800928a:	4606      	mov	r6, r0
 800928c:	460f      	mov	r7, r1
 800928e:	d007      	beq.n	80092a0 <__pow5mult+0x20>
 8009290:	4c25      	ldr	r4, [pc, #148]	; (8009328 <__pow5mult+0xa8>)
 8009292:	3a01      	subs	r2, #1
 8009294:	2300      	movs	r3, #0
 8009296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800929a:	f7ff fe9b 	bl	8008fd4 <__multadd>
 800929e:	4607      	mov	r7, r0
 80092a0:	10ad      	asrs	r5, r5, #2
 80092a2:	d03d      	beq.n	8009320 <__pow5mult+0xa0>
 80092a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092a6:	b97c      	cbnz	r4, 80092c8 <__pow5mult+0x48>
 80092a8:	2010      	movs	r0, #16
 80092aa:	f7ff fe1b 	bl	8008ee4 <malloc>
 80092ae:	4602      	mov	r2, r0
 80092b0:	6270      	str	r0, [r6, #36]	; 0x24
 80092b2:	b928      	cbnz	r0, 80092c0 <__pow5mult+0x40>
 80092b4:	4b1d      	ldr	r3, [pc, #116]	; (800932c <__pow5mult+0xac>)
 80092b6:	481e      	ldr	r0, [pc, #120]	; (8009330 <__pow5mult+0xb0>)
 80092b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092bc:	f000 fc0e 	bl	8009adc <__assert_func>
 80092c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092c4:	6004      	str	r4, [r0, #0]
 80092c6:	60c4      	str	r4, [r0, #12]
 80092c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092d0:	b94c      	cbnz	r4, 80092e6 <__pow5mult+0x66>
 80092d2:	f240 2171 	movw	r1, #625	; 0x271
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff ff12 	bl	8009100 <__i2b>
 80092dc:	2300      	movs	r3, #0
 80092de:	f8c8 0008 	str.w	r0, [r8, #8]
 80092e2:	4604      	mov	r4, r0
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	f04f 0900 	mov.w	r9, #0
 80092ea:	07eb      	lsls	r3, r5, #31
 80092ec:	d50a      	bpl.n	8009304 <__pow5mult+0x84>
 80092ee:	4639      	mov	r1, r7
 80092f0:	4622      	mov	r2, r4
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff ff1a 	bl	800912c <__multiply>
 80092f8:	4639      	mov	r1, r7
 80092fa:	4680      	mov	r8, r0
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff fe47 	bl	8008f90 <_Bfree>
 8009302:	4647      	mov	r7, r8
 8009304:	106d      	asrs	r5, r5, #1
 8009306:	d00b      	beq.n	8009320 <__pow5mult+0xa0>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	b938      	cbnz	r0, 800931c <__pow5mult+0x9c>
 800930c:	4622      	mov	r2, r4
 800930e:	4621      	mov	r1, r4
 8009310:	4630      	mov	r0, r6
 8009312:	f7ff ff0b 	bl	800912c <__multiply>
 8009316:	6020      	str	r0, [r4, #0]
 8009318:	f8c0 9000 	str.w	r9, [r0]
 800931c:	4604      	mov	r4, r0
 800931e:	e7e4      	b.n	80092ea <__pow5mult+0x6a>
 8009320:	4638      	mov	r0, r7
 8009322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009326:	bf00      	nop
 8009328:	0800b6e0 	.word	0x0800b6e0
 800932c:	0800b511 	.word	0x0800b511
 8009330:	0800b594 	.word	0x0800b594

08009334 <__lshift>:
 8009334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	460c      	mov	r4, r1
 800933a:	6849      	ldr	r1, [r1, #4]
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	4607      	mov	r7, r0
 8009346:	4691      	mov	r9, r2
 8009348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800934c:	f108 0601 	add.w	r6, r8, #1
 8009350:	42b3      	cmp	r3, r6
 8009352:	db0b      	blt.n	800936c <__lshift+0x38>
 8009354:	4638      	mov	r0, r7
 8009356:	f7ff fddb 	bl	8008f10 <_Balloc>
 800935a:	4605      	mov	r5, r0
 800935c:	b948      	cbnz	r0, 8009372 <__lshift+0x3e>
 800935e:	4602      	mov	r2, r0
 8009360:	4b2a      	ldr	r3, [pc, #168]	; (800940c <__lshift+0xd8>)
 8009362:	482b      	ldr	r0, [pc, #172]	; (8009410 <__lshift+0xdc>)
 8009364:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009368:	f000 fbb8 	bl	8009adc <__assert_func>
 800936c:	3101      	adds	r1, #1
 800936e:	005b      	lsls	r3, r3, #1
 8009370:	e7ee      	b.n	8009350 <__lshift+0x1c>
 8009372:	2300      	movs	r3, #0
 8009374:	f100 0114 	add.w	r1, r0, #20
 8009378:	f100 0210 	add.w	r2, r0, #16
 800937c:	4618      	mov	r0, r3
 800937e:	4553      	cmp	r3, sl
 8009380:	db37      	blt.n	80093f2 <__lshift+0xbe>
 8009382:	6920      	ldr	r0, [r4, #16]
 8009384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009388:	f104 0314 	add.w	r3, r4, #20
 800938c:	f019 091f 	ands.w	r9, r9, #31
 8009390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009398:	d02f      	beq.n	80093fa <__lshift+0xc6>
 800939a:	f1c9 0e20 	rsb	lr, r9, #32
 800939e:	468a      	mov	sl, r1
 80093a0:	f04f 0c00 	mov.w	ip, #0
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	fa02 f209 	lsl.w	r2, r2, r9
 80093aa:	ea42 020c 	orr.w	r2, r2, ip
 80093ae:	f84a 2b04 	str.w	r2, [sl], #4
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	4298      	cmp	r0, r3
 80093b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093bc:	d8f2      	bhi.n	80093a4 <__lshift+0x70>
 80093be:	1b03      	subs	r3, r0, r4
 80093c0:	3b15      	subs	r3, #21
 80093c2:	f023 0303 	bic.w	r3, r3, #3
 80093c6:	3304      	adds	r3, #4
 80093c8:	f104 0215 	add.w	r2, r4, #21
 80093cc:	4290      	cmp	r0, r2
 80093ce:	bf38      	it	cc
 80093d0:	2304      	movcc	r3, #4
 80093d2:	f841 c003 	str.w	ip, [r1, r3]
 80093d6:	f1bc 0f00 	cmp.w	ip, #0
 80093da:	d001      	beq.n	80093e0 <__lshift+0xac>
 80093dc:	f108 0602 	add.w	r6, r8, #2
 80093e0:	3e01      	subs	r6, #1
 80093e2:	4638      	mov	r0, r7
 80093e4:	612e      	str	r6, [r5, #16]
 80093e6:	4621      	mov	r1, r4
 80093e8:	f7ff fdd2 	bl	8008f90 <_Bfree>
 80093ec:	4628      	mov	r0, r5
 80093ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093f6:	3301      	adds	r3, #1
 80093f8:	e7c1      	b.n	800937e <__lshift+0x4a>
 80093fa:	3904      	subs	r1, #4
 80093fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009400:	f841 2f04 	str.w	r2, [r1, #4]!
 8009404:	4298      	cmp	r0, r3
 8009406:	d8f9      	bhi.n	80093fc <__lshift+0xc8>
 8009408:	e7ea      	b.n	80093e0 <__lshift+0xac>
 800940a:	bf00      	nop
 800940c:	0800b583 	.word	0x0800b583
 8009410:	0800b594 	.word	0x0800b594

08009414 <__mcmp>:
 8009414:	b530      	push	{r4, r5, lr}
 8009416:	6902      	ldr	r2, [r0, #16]
 8009418:	690c      	ldr	r4, [r1, #16]
 800941a:	1b12      	subs	r2, r2, r4
 800941c:	d10e      	bne.n	800943c <__mcmp+0x28>
 800941e:	f100 0314 	add.w	r3, r0, #20
 8009422:	3114      	adds	r1, #20
 8009424:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009428:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800942c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009430:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009434:	42a5      	cmp	r5, r4
 8009436:	d003      	beq.n	8009440 <__mcmp+0x2c>
 8009438:	d305      	bcc.n	8009446 <__mcmp+0x32>
 800943a:	2201      	movs	r2, #1
 800943c:	4610      	mov	r0, r2
 800943e:	bd30      	pop	{r4, r5, pc}
 8009440:	4283      	cmp	r3, r0
 8009442:	d3f3      	bcc.n	800942c <__mcmp+0x18>
 8009444:	e7fa      	b.n	800943c <__mcmp+0x28>
 8009446:	f04f 32ff 	mov.w	r2, #4294967295
 800944a:	e7f7      	b.n	800943c <__mcmp+0x28>

0800944c <__mdiff>:
 800944c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	460c      	mov	r4, r1
 8009452:	4606      	mov	r6, r0
 8009454:	4611      	mov	r1, r2
 8009456:	4620      	mov	r0, r4
 8009458:	4690      	mov	r8, r2
 800945a:	f7ff ffdb 	bl	8009414 <__mcmp>
 800945e:	1e05      	subs	r5, r0, #0
 8009460:	d110      	bne.n	8009484 <__mdiff+0x38>
 8009462:	4629      	mov	r1, r5
 8009464:	4630      	mov	r0, r6
 8009466:	f7ff fd53 	bl	8008f10 <_Balloc>
 800946a:	b930      	cbnz	r0, 800947a <__mdiff+0x2e>
 800946c:	4b3a      	ldr	r3, [pc, #232]	; (8009558 <__mdiff+0x10c>)
 800946e:	4602      	mov	r2, r0
 8009470:	f240 2132 	movw	r1, #562	; 0x232
 8009474:	4839      	ldr	r0, [pc, #228]	; (800955c <__mdiff+0x110>)
 8009476:	f000 fb31 	bl	8009adc <__assert_func>
 800947a:	2301      	movs	r3, #1
 800947c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	bfa4      	itt	ge
 8009486:	4643      	movge	r3, r8
 8009488:	46a0      	movge	r8, r4
 800948a:	4630      	mov	r0, r6
 800948c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009490:	bfa6      	itte	ge
 8009492:	461c      	movge	r4, r3
 8009494:	2500      	movge	r5, #0
 8009496:	2501      	movlt	r5, #1
 8009498:	f7ff fd3a 	bl	8008f10 <_Balloc>
 800949c:	b920      	cbnz	r0, 80094a8 <__mdiff+0x5c>
 800949e:	4b2e      	ldr	r3, [pc, #184]	; (8009558 <__mdiff+0x10c>)
 80094a0:	4602      	mov	r2, r0
 80094a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094a6:	e7e5      	b.n	8009474 <__mdiff+0x28>
 80094a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094ac:	6926      	ldr	r6, [r4, #16]
 80094ae:	60c5      	str	r5, [r0, #12]
 80094b0:	f104 0914 	add.w	r9, r4, #20
 80094b4:	f108 0514 	add.w	r5, r8, #20
 80094b8:	f100 0e14 	add.w	lr, r0, #20
 80094bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094c4:	f108 0210 	add.w	r2, r8, #16
 80094c8:	46f2      	mov	sl, lr
 80094ca:	2100      	movs	r1, #0
 80094cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80094d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094d4:	fa1f f883 	uxth.w	r8, r3
 80094d8:	fa11 f18b 	uxtah	r1, r1, fp
 80094dc:	0c1b      	lsrs	r3, r3, #16
 80094de:	eba1 0808 	sub.w	r8, r1, r8
 80094e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094ea:	fa1f f888 	uxth.w	r8, r8
 80094ee:	1419      	asrs	r1, r3, #16
 80094f0:	454e      	cmp	r6, r9
 80094f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094f6:	f84a 3b04 	str.w	r3, [sl], #4
 80094fa:	d8e7      	bhi.n	80094cc <__mdiff+0x80>
 80094fc:	1b33      	subs	r3, r6, r4
 80094fe:	3b15      	subs	r3, #21
 8009500:	f023 0303 	bic.w	r3, r3, #3
 8009504:	3304      	adds	r3, #4
 8009506:	3415      	adds	r4, #21
 8009508:	42a6      	cmp	r6, r4
 800950a:	bf38      	it	cc
 800950c:	2304      	movcc	r3, #4
 800950e:	441d      	add	r5, r3
 8009510:	4473      	add	r3, lr
 8009512:	469e      	mov	lr, r3
 8009514:	462e      	mov	r6, r5
 8009516:	4566      	cmp	r6, ip
 8009518:	d30e      	bcc.n	8009538 <__mdiff+0xec>
 800951a:	f10c 0203 	add.w	r2, ip, #3
 800951e:	1b52      	subs	r2, r2, r5
 8009520:	f022 0203 	bic.w	r2, r2, #3
 8009524:	3d03      	subs	r5, #3
 8009526:	45ac      	cmp	ip, r5
 8009528:	bf38      	it	cc
 800952a:	2200      	movcc	r2, #0
 800952c:	441a      	add	r2, r3
 800952e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009532:	b17b      	cbz	r3, 8009554 <__mdiff+0x108>
 8009534:	6107      	str	r7, [r0, #16]
 8009536:	e7a3      	b.n	8009480 <__mdiff+0x34>
 8009538:	f856 8b04 	ldr.w	r8, [r6], #4
 800953c:	fa11 f288 	uxtah	r2, r1, r8
 8009540:	1414      	asrs	r4, r2, #16
 8009542:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009546:	b292      	uxth	r2, r2
 8009548:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800954c:	f84e 2b04 	str.w	r2, [lr], #4
 8009550:	1421      	asrs	r1, r4, #16
 8009552:	e7e0      	b.n	8009516 <__mdiff+0xca>
 8009554:	3f01      	subs	r7, #1
 8009556:	e7ea      	b.n	800952e <__mdiff+0xe2>
 8009558:	0800b583 	.word	0x0800b583
 800955c:	0800b594 	.word	0x0800b594

08009560 <__d2b>:
 8009560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009564:	4689      	mov	r9, r1
 8009566:	2101      	movs	r1, #1
 8009568:	ec57 6b10 	vmov	r6, r7, d0
 800956c:	4690      	mov	r8, r2
 800956e:	f7ff fccf 	bl	8008f10 <_Balloc>
 8009572:	4604      	mov	r4, r0
 8009574:	b930      	cbnz	r0, 8009584 <__d2b+0x24>
 8009576:	4602      	mov	r2, r0
 8009578:	4b25      	ldr	r3, [pc, #148]	; (8009610 <__d2b+0xb0>)
 800957a:	4826      	ldr	r0, [pc, #152]	; (8009614 <__d2b+0xb4>)
 800957c:	f240 310a 	movw	r1, #778	; 0x30a
 8009580:	f000 faac 	bl	8009adc <__assert_func>
 8009584:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009588:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800958c:	bb35      	cbnz	r5, 80095dc <__d2b+0x7c>
 800958e:	2e00      	cmp	r6, #0
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	d028      	beq.n	80095e6 <__d2b+0x86>
 8009594:	4668      	mov	r0, sp
 8009596:	9600      	str	r6, [sp, #0]
 8009598:	f7ff fd82 	bl	80090a0 <__lo0bits>
 800959c:	9900      	ldr	r1, [sp, #0]
 800959e:	b300      	cbz	r0, 80095e2 <__d2b+0x82>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	f1c0 0320 	rsb	r3, r0, #32
 80095a6:	fa02 f303 	lsl.w	r3, r2, r3
 80095aa:	430b      	orrs	r3, r1
 80095ac:	40c2      	lsrs	r2, r0
 80095ae:	6163      	str	r3, [r4, #20]
 80095b0:	9201      	str	r2, [sp, #4]
 80095b2:	9b01      	ldr	r3, [sp, #4]
 80095b4:	61a3      	str	r3, [r4, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bf14      	ite	ne
 80095ba:	2202      	movne	r2, #2
 80095bc:	2201      	moveq	r2, #1
 80095be:	6122      	str	r2, [r4, #16]
 80095c0:	b1d5      	cbz	r5, 80095f8 <__d2b+0x98>
 80095c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095c6:	4405      	add	r5, r0
 80095c8:	f8c9 5000 	str.w	r5, [r9]
 80095cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095d0:	f8c8 0000 	str.w	r0, [r8]
 80095d4:	4620      	mov	r0, r4
 80095d6:	b003      	add	sp, #12
 80095d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095e0:	e7d5      	b.n	800958e <__d2b+0x2e>
 80095e2:	6161      	str	r1, [r4, #20]
 80095e4:	e7e5      	b.n	80095b2 <__d2b+0x52>
 80095e6:	a801      	add	r0, sp, #4
 80095e8:	f7ff fd5a 	bl	80090a0 <__lo0bits>
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	6163      	str	r3, [r4, #20]
 80095f0:	2201      	movs	r2, #1
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	3020      	adds	r0, #32
 80095f6:	e7e3      	b.n	80095c0 <__d2b+0x60>
 80095f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009600:	f8c9 0000 	str.w	r0, [r9]
 8009604:	6918      	ldr	r0, [r3, #16]
 8009606:	f7ff fd2b 	bl	8009060 <__hi0bits>
 800960a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800960e:	e7df      	b.n	80095d0 <__d2b+0x70>
 8009610:	0800b583 	.word	0x0800b583
 8009614:	0800b594 	.word	0x0800b594

08009618 <_calloc_r>:
 8009618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800961a:	fba1 2402 	umull	r2, r4, r1, r2
 800961e:	b94c      	cbnz	r4, 8009634 <_calloc_r+0x1c>
 8009620:	4611      	mov	r1, r2
 8009622:	9201      	str	r2, [sp, #4]
 8009624:	f000 f87a 	bl	800971c <_malloc_r>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	4605      	mov	r5, r0
 800962c:	b930      	cbnz	r0, 800963c <_calloc_r+0x24>
 800962e:	4628      	mov	r0, r5
 8009630:	b003      	add	sp, #12
 8009632:	bd30      	pop	{r4, r5, pc}
 8009634:	220c      	movs	r2, #12
 8009636:	6002      	str	r2, [r0, #0]
 8009638:	2500      	movs	r5, #0
 800963a:	e7f8      	b.n	800962e <_calloc_r+0x16>
 800963c:	4621      	mov	r1, r4
 800963e:	f7fe f941 	bl	80078c4 <memset>
 8009642:	e7f4      	b.n	800962e <_calloc_r+0x16>

08009644 <_free_r>:
 8009644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009646:	2900      	cmp	r1, #0
 8009648:	d044      	beq.n	80096d4 <_free_r+0x90>
 800964a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964e:	9001      	str	r0, [sp, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f1a1 0404 	sub.w	r4, r1, #4
 8009656:	bfb8      	it	lt
 8009658:	18e4      	addlt	r4, r4, r3
 800965a:	f000 fa9b 	bl	8009b94 <__malloc_lock>
 800965e:	4a1e      	ldr	r2, [pc, #120]	; (80096d8 <_free_r+0x94>)
 8009660:	9801      	ldr	r0, [sp, #4]
 8009662:	6813      	ldr	r3, [r2, #0]
 8009664:	b933      	cbnz	r3, 8009674 <_free_r+0x30>
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	6014      	str	r4, [r2, #0]
 800966a:	b003      	add	sp, #12
 800966c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009670:	f000 ba96 	b.w	8009ba0 <__malloc_unlock>
 8009674:	42a3      	cmp	r3, r4
 8009676:	d908      	bls.n	800968a <_free_r+0x46>
 8009678:	6825      	ldr	r5, [r4, #0]
 800967a:	1961      	adds	r1, r4, r5
 800967c:	428b      	cmp	r3, r1
 800967e:	bf01      	itttt	eq
 8009680:	6819      	ldreq	r1, [r3, #0]
 8009682:	685b      	ldreq	r3, [r3, #4]
 8009684:	1949      	addeq	r1, r1, r5
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	e7ed      	b.n	8009666 <_free_r+0x22>
 800968a:	461a      	mov	r2, r3
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	b10b      	cbz	r3, 8009694 <_free_r+0x50>
 8009690:	42a3      	cmp	r3, r4
 8009692:	d9fa      	bls.n	800968a <_free_r+0x46>
 8009694:	6811      	ldr	r1, [r2, #0]
 8009696:	1855      	adds	r5, r2, r1
 8009698:	42a5      	cmp	r5, r4
 800969a:	d10b      	bne.n	80096b4 <_free_r+0x70>
 800969c:	6824      	ldr	r4, [r4, #0]
 800969e:	4421      	add	r1, r4
 80096a0:	1854      	adds	r4, r2, r1
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	d1e0      	bne.n	800966a <_free_r+0x26>
 80096a8:	681c      	ldr	r4, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	6053      	str	r3, [r2, #4]
 80096ae:	4421      	add	r1, r4
 80096b0:	6011      	str	r1, [r2, #0]
 80096b2:	e7da      	b.n	800966a <_free_r+0x26>
 80096b4:	d902      	bls.n	80096bc <_free_r+0x78>
 80096b6:	230c      	movs	r3, #12
 80096b8:	6003      	str	r3, [r0, #0]
 80096ba:	e7d6      	b.n	800966a <_free_r+0x26>
 80096bc:	6825      	ldr	r5, [r4, #0]
 80096be:	1961      	adds	r1, r4, r5
 80096c0:	428b      	cmp	r3, r1
 80096c2:	bf04      	itt	eq
 80096c4:	6819      	ldreq	r1, [r3, #0]
 80096c6:	685b      	ldreq	r3, [r3, #4]
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	bf04      	itt	eq
 80096cc:	1949      	addeq	r1, r1, r5
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	6054      	str	r4, [r2, #4]
 80096d2:	e7ca      	b.n	800966a <_free_r+0x26>
 80096d4:	b003      	add	sp, #12
 80096d6:	bd30      	pop	{r4, r5, pc}
 80096d8:	2000077c 	.word	0x2000077c

080096dc <sbrk_aligned>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	4e0e      	ldr	r6, [pc, #56]	; (8009718 <sbrk_aligned+0x3c>)
 80096e0:	460c      	mov	r4, r1
 80096e2:	6831      	ldr	r1, [r6, #0]
 80096e4:	4605      	mov	r5, r0
 80096e6:	b911      	cbnz	r1, 80096ee <sbrk_aligned+0x12>
 80096e8:	f000 f9e8 	bl	8009abc <_sbrk_r>
 80096ec:	6030      	str	r0, [r6, #0]
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	f000 f9e3 	bl	8009abc <_sbrk_r>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d00a      	beq.n	8009710 <sbrk_aligned+0x34>
 80096fa:	1cc4      	adds	r4, r0, #3
 80096fc:	f024 0403 	bic.w	r4, r4, #3
 8009700:	42a0      	cmp	r0, r4
 8009702:	d007      	beq.n	8009714 <sbrk_aligned+0x38>
 8009704:	1a21      	subs	r1, r4, r0
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f9d8 	bl	8009abc <_sbrk_r>
 800970c:	3001      	adds	r0, #1
 800970e:	d101      	bne.n	8009714 <sbrk_aligned+0x38>
 8009710:	f04f 34ff 	mov.w	r4, #4294967295
 8009714:	4620      	mov	r0, r4
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	20000780 	.word	0x20000780

0800971c <_malloc_r>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	1ccd      	adds	r5, r1, #3
 8009722:	f025 0503 	bic.w	r5, r5, #3
 8009726:	3508      	adds	r5, #8
 8009728:	2d0c      	cmp	r5, #12
 800972a:	bf38      	it	cc
 800972c:	250c      	movcc	r5, #12
 800972e:	2d00      	cmp	r5, #0
 8009730:	4607      	mov	r7, r0
 8009732:	db01      	blt.n	8009738 <_malloc_r+0x1c>
 8009734:	42a9      	cmp	r1, r5
 8009736:	d905      	bls.n	8009744 <_malloc_r+0x28>
 8009738:	230c      	movs	r3, #12
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	2600      	movs	r6, #0
 800973e:	4630      	mov	r0, r6
 8009740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009744:	4e2e      	ldr	r6, [pc, #184]	; (8009800 <_malloc_r+0xe4>)
 8009746:	f000 fa25 	bl	8009b94 <__malloc_lock>
 800974a:	6833      	ldr	r3, [r6, #0]
 800974c:	461c      	mov	r4, r3
 800974e:	bb34      	cbnz	r4, 800979e <_malloc_r+0x82>
 8009750:	4629      	mov	r1, r5
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff ffc2 	bl	80096dc <sbrk_aligned>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	4604      	mov	r4, r0
 800975c:	d14d      	bne.n	80097fa <_malloc_r+0xde>
 800975e:	6834      	ldr	r4, [r6, #0]
 8009760:	4626      	mov	r6, r4
 8009762:	2e00      	cmp	r6, #0
 8009764:	d140      	bne.n	80097e8 <_malloc_r+0xcc>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	4631      	mov	r1, r6
 800976a:	4638      	mov	r0, r7
 800976c:	eb04 0803 	add.w	r8, r4, r3
 8009770:	f000 f9a4 	bl	8009abc <_sbrk_r>
 8009774:	4580      	cmp	r8, r0
 8009776:	d13a      	bne.n	80097ee <_malloc_r+0xd2>
 8009778:	6821      	ldr	r1, [r4, #0]
 800977a:	3503      	adds	r5, #3
 800977c:	1a6d      	subs	r5, r5, r1
 800977e:	f025 0503 	bic.w	r5, r5, #3
 8009782:	3508      	adds	r5, #8
 8009784:	2d0c      	cmp	r5, #12
 8009786:	bf38      	it	cc
 8009788:	250c      	movcc	r5, #12
 800978a:	4629      	mov	r1, r5
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff ffa5 	bl	80096dc <sbrk_aligned>
 8009792:	3001      	adds	r0, #1
 8009794:	d02b      	beq.n	80097ee <_malloc_r+0xd2>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	442b      	add	r3, r5
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	e00e      	b.n	80097bc <_malloc_r+0xa0>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	1b52      	subs	r2, r2, r5
 80097a2:	d41e      	bmi.n	80097e2 <_malloc_r+0xc6>
 80097a4:	2a0b      	cmp	r2, #11
 80097a6:	d916      	bls.n	80097d6 <_malloc_r+0xba>
 80097a8:	1961      	adds	r1, r4, r5
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	6025      	str	r5, [r4, #0]
 80097ae:	bf18      	it	ne
 80097b0:	6059      	strne	r1, [r3, #4]
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	bf08      	it	eq
 80097b6:	6031      	streq	r1, [r6, #0]
 80097b8:	5162      	str	r2, [r4, r5]
 80097ba:	604b      	str	r3, [r1, #4]
 80097bc:	4638      	mov	r0, r7
 80097be:	f104 060b 	add.w	r6, r4, #11
 80097c2:	f000 f9ed 	bl	8009ba0 <__malloc_unlock>
 80097c6:	f026 0607 	bic.w	r6, r6, #7
 80097ca:	1d23      	adds	r3, r4, #4
 80097cc:	1af2      	subs	r2, r6, r3
 80097ce:	d0b6      	beq.n	800973e <_malloc_r+0x22>
 80097d0:	1b9b      	subs	r3, r3, r6
 80097d2:	50a3      	str	r3, [r4, r2]
 80097d4:	e7b3      	b.n	800973e <_malloc_r+0x22>
 80097d6:	6862      	ldr	r2, [r4, #4]
 80097d8:	42a3      	cmp	r3, r4
 80097da:	bf0c      	ite	eq
 80097dc:	6032      	streq	r2, [r6, #0]
 80097de:	605a      	strne	r2, [r3, #4]
 80097e0:	e7ec      	b.n	80097bc <_malloc_r+0xa0>
 80097e2:	4623      	mov	r3, r4
 80097e4:	6864      	ldr	r4, [r4, #4]
 80097e6:	e7b2      	b.n	800974e <_malloc_r+0x32>
 80097e8:	4634      	mov	r4, r6
 80097ea:	6876      	ldr	r6, [r6, #4]
 80097ec:	e7b9      	b.n	8009762 <_malloc_r+0x46>
 80097ee:	230c      	movs	r3, #12
 80097f0:	603b      	str	r3, [r7, #0]
 80097f2:	4638      	mov	r0, r7
 80097f4:	f000 f9d4 	bl	8009ba0 <__malloc_unlock>
 80097f8:	e7a1      	b.n	800973e <_malloc_r+0x22>
 80097fa:	6025      	str	r5, [r4, #0]
 80097fc:	e7de      	b.n	80097bc <_malloc_r+0xa0>
 80097fe:	bf00      	nop
 8009800:	2000077c 	.word	0x2000077c

08009804 <__ssputs_r>:
 8009804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	688e      	ldr	r6, [r1, #8]
 800980a:	429e      	cmp	r6, r3
 800980c:	4682      	mov	sl, r0
 800980e:	460c      	mov	r4, r1
 8009810:	4690      	mov	r8, r2
 8009812:	461f      	mov	r7, r3
 8009814:	d838      	bhi.n	8009888 <__ssputs_r+0x84>
 8009816:	898a      	ldrh	r2, [r1, #12]
 8009818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800981c:	d032      	beq.n	8009884 <__ssputs_r+0x80>
 800981e:	6825      	ldr	r5, [r4, #0]
 8009820:	6909      	ldr	r1, [r1, #16]
 8009822:	eba5 0901 	sub.w	r9, r5, r1
 8009826:	6965      	ldr	r5, [r4, #20]
 8009828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800982c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009830:	3301      	adds	r3, #1
 8009832:	444b      	add	r3, r9
 8009834:	106d      	asrs	r5, r5, #1
 8009836:	429d      	cmp	r5, r3
 8009838:	bf38      	it	cc
 800983a:	461d      	movcc	r5, r3
 800983c:	0553      	lsls	r3, r2, #21
 800983e:	d531      	bpl.n	80098a4 <__ssputs_r+0xa0>
 8009840:	4629      	mov	r1, r5
 8009842:	f7ff ff6b 	bl	800971c <_malloc_r>
 8009846:	4606      	mov	r6, r0
 8009848:	b950      	cbnz	r0, 8009860 <__ssputs_r+0x5c>
 800984a:	230c      	movs	r3, #12
 800984c:	f8ca 3000 	str.w	r3, [sl]
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009860:	6921      	ldr	r1, [r4, #16]
 8009862:	464a      	mov	r2, r9
 8009864:	f7ff fb46 	bl	8008ef4 <memcpy>
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800986e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	6126      	str	r6, [r4, #16]
 8009876:	6165      	str	r5, [r4, #20]
 8009878:	444e      	add	r6, r9
 800987a:	eba5 0509 	sub.w	r5, r5, r9
 800987e:	6026      	str	r6, [r4, #0]
 8009880:	60a5      	str	r5, [r4, #8]
 8009882:	463e      	mov	r6, r7
 8009884:	42be      	cmp	r6, r7
 8009886:	d900      	bls.n	800988a <__ssputs_r+0x86>
 8009888:	463e      	mov	r6, r7
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	4632      	mov	r2, r6
 800988e:	4641      	mov	r1, r8
 8009890:	f000 f966 	bl	8009b60 <memmove>
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	1b9b      	subs	r3, r3, r6
 8009898:	60a3      	str	r3, [r4, #8]
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	4433      	add	r3, r6
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	2000      	movs	r0, #0
 80098a2:	e7db      	b.n	800985c <__ssputs_r+0x58>
 80098a4:	462a      	mov	r2, r5
 80098a6:	f000 f981 	bl	8009bac <_realloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d1e1      	bne.n	8009874 <__ssputs_r+0x70>
 80098b0:	6921      	ldr	r1, [r4, #16]
 80098b2:	4650      	mov	r0, sl
 80098b4:	f7ff fec6 	bl	8009644 <_free_r>
 80098b8:	e7c7      	b.n	800984a <__ssputs_r+0x46>
	...

080098bc <_svfiprintf_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	4698      	mov	r8, r3
 80098c2:	898b      	ldrh	r3, [r1, #12]
 80098c4:	061b      	lsls	r3, r3, #24
 80098c6:	b09d      	sub	sp, #116	; 0x74
 80098c8:	4607      	mov	r7, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	4614      	mov	r4, r2
 80098ce:	d50e      	bpl.n	80098ee <_svfiprintf_r+0x32>
 80098d0:	690b      	ldr	r3, [r1, #16]
 80098d2:	b963      	cbnz	r3, 80098ee <_svfiprintf_r+0x32>
 80098d4:	2140      	movs	r1, #64	; 0x40
 80098d6:	f7ff ff21 	bl	800971c <_malloc_r>
 80098da:	6028      	str	r0, [r5, #0]
 80098dc:	6128      	str	r0, [r5, #16]
 80098de:	b920      	cbnz	r0, 80098ea <_svfiprintf_r+0x2e>
 80098e0:	230c      	movs	r3, #12
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e0d1      	b.n	8009a8e <_svfiprintf_r+0x1d2>
 80098ea:	2340      	movs	r3, #64	; 0x40
 80098ec:	616b      	str	r3, [r5, #20]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9309      	str	r3, [sp, #36]	; 0x24
 80098f2:	2320      	movs	r3, #32
 80098f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fc:	2330      	movs	r3, #48	; 0x30
 80098fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009aa8 <_svfiprintf_r+0x1ec>
 8009902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009906:	f04f 0901 	mov.w	r9, #1
 800990a:	4623      	mov	r3, r4
 800990c:	469a      	mov	sl, r3
 800990e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009912:	b10a      	cbz	r2, 8009918 <_svfiprintf_r+0x5c>
 8009914:	2a25      	cmp	r2, #37	; 0x25
 8009916:	d1f9      	bne.n	800990c <_svfiprintf_r+0x50>
 8009918:	ebba 0b04 	subs.w	fp, sl, r4
 800991c:	d00b      	beq.n	8009936 <_svfiprintf_r+0x7a>
 800991e:	465b      	mov	r3, fp
 8009920:	4622      	mov	r2, r4
 8009922:	4629      	mov	r1, r5
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff ff6d 	bl	8009804 <__ssputs_r>
 800992a:	3001      	adds	r0, #1
 800992c:	f000 80aa 	beq.w	8009a84 <_svfiprintf_r+0x1c8>
 8009930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009932:	445a      	add	r2, fp
 8009934:	9209      	str	r2, [sp, #36]	; 0x24
 8009936:	f89a 3000 	ldrb.w	r3, [sl]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80a2 	beq.w	8009a84 <_svfiprintf_r+0x1c8>
 8009940:	2300      	movs	r3, #0
 8009942:	f04f 32ff 	mov.w	r2, #4294967295
 8009946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994a:	f10a 0a01 	add.w	sl, sl, #1
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009956:	931a      	str	r3, [sp, #104]	; 0x68
 8009958:	4654      	mov	r4, sl
 800995a:	2205      	movs	r2, #5
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	4851      	ldr	r0, [pc, #324]	; (8009aa8 <_svfiprintf_r+0x1ec>)
 8009962:	f7f6 fc65 	bl	8000230 <memchr>
 8009966:	9a04      	ldr	r2, [sp, #16]
 8009968:	b9d8      	cbnz	r0, 80099a2 <_svfiprintf_r+0xe6>
 800996a:	06d0      	lsls	r0, r2, #27
 800996c:	bf44      	itt	mi
 800996e:	2320      	movmi	r3, #32
 8009970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009974:	0711      	lsls	r1, r2, #28
 8009976:	bf44      	itt	mi
 8009978:	232b      	movmi	r3, #43	; 0x2b
 800997a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997e:	f89a 3000 	ldrb.w	r3, [sl]
 8009982:	2b2a      	cmp	r3, #42	; 0x2a
 8009984:	d015      	beq.n	80099b2 <_svfiprintf_r+0xf6>
 8009986:	9a07      	ldr	r2, [sp, #28]
 8009988:	4654      	mov	r4, sl
 800998a:	2000      	movs	r0, #0
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	4621      	mov	r1, r4
 8009992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009996:	3b30      	subs	r3, #48	; 0x30
 8009998:	2b09      	cmp	r3, #9
 800999a:	d94e      	bls.n	8009a3a <_svfiprintf_r+0x17e>
 800999c:	b1b0      	cbz	r0, 80099cc <_svfiprintf_r+0x110>
 800999e:	9207      	str	r2, [sp, #28]
 80099a0:	e014      	b.n	80099cc <_svfiprintf_r+0x110>
 80099a2:	eba0 0308 	sub.w	r3, r0, r8
 80099a6:	fa09 f303 	lsl.w	r3, r9, r3
 80099aa:	4313      	orrs	r3, r2
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	46a2      	mov	sl, r4
 80099b0:	e7d2      	b.n	8009958 <_svfiprintf_r+0x9c>
 80099b2:	9b03      	ldr	r3, [sp, #12]
 80099b4:	1d19      	adds	r1, r3, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	9103      	str	r1, [sp, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfbb      	ittet	lt
 80099be:	425b      	neglt	r3, r3
 80099c0:	f042 0202 	orrlt.w	r2, r2, #2
 80099c4:	9307      	strge	r3, [sp, #28]
 80099c6:	9307      	strlt	r3, [sp, #28]
 80099c8:	bfb8      	it	lt
 80099ca:	9204      	strlt	r2, [sp, #16]
 80099cc:	7823      	ldrb	r3, [r4, #0]
 80099ce:	2b2e      	cmp	r3, #46	; 0x2e
 80099d0:	d10c      	bne.n	80099ec <_svfiprintf_r+0x130>
 80099d2:	7863      	ldrb	r3, [r4, #1]
 80099d4:	2b2a      	cmp	r3, #42	; 0x2a
 80099d6:	d135      	bne.n	8009a44 <_svfiprintf_r+0x188>
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	1d1a      	adds	r2, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	9203      	str	r2, [sp, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfb8      	it	lt
 80099e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e8:	3402      	adds	r4, #2
 80099ea:	9305      	str	r3, [sp, #20]
 80099ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ab8 <_svfiprintf_r+0x1fc>
 80099f0:	7821      	ldrb	r1, [r4, #0]
 80099f2:	2203      	movs	r2, #3
 80099f4:	4650      	mov	r0, sl
 80099f6:	f7f6 fc1b 	bl	8000230 <memchr>
 80099fa:	b140      	cbz	r0, 8009a0e <_svfiprintf_r+0x152>
 80099fc:	2340      	movs	r3, #64	; 0x40
 80099fe:	eba0 000a 	sub.w	r0, r0, sl
 8009a02:	fa03 f000 	lsl.w	r0, r3, r0
 8009a06:	9b04      	ldr	r3, [sp, #16]
 8009a08:	4303      	orrs	r3, r0
 8009a0a:	3401      	adds	r4, #1
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a12:	4826      	ldr	r0, [pc, #152]	; (8009aac <_svfiprintf_r+0x1f0>)
 8009a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a18:	2206      	movs	r2, #6
 8009a1a:	f7f6 fc09 	bl	8000230 <memchr>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d038      	beq.n	8009a94 <_svfiprintf_r+0x1d8>
 8009a22:	4b23      	ldr	r3, [pc, #140]	; (8009ab0 <_svfiprintf_r+0x1f4>)
 8009a24:	bb1b      	cbnz	r3, 8009a6e <_svfiprintf_r+0x1b2>
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	3307      	adds	r3, #7
 8009a2a:	f023 0307 	bic.w	r3, r3, #7
 8009a2e:	3308      	adds	r3, #8
 8009a30:	9303      	str	r3, [sp, #12]
 8009a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a34:	4433      	add	r3, r6
 8009a36:	9309      	str	r3, [sp, #36]	; 0x24
 8009a38:	e767      	b.n	800990a <_svfiprintf_r+0x4e>
 8009a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3e:	460c      	mov	r4, r1
 8009a40:	2001      	movs	r0, #1
 8009a42:	e7a5      	b.n	8009990 <_svfiprintf_r+0xd4>
 8009a44:	2300      	movs	r3, #0
 8009a46:	3401      	adds	r4, #1
 8009a48:	9305      	str	r3, [sp, #20]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	f04f 0c0a 	mov.w	ip, #10
 8009a50:	4620      	mov	r0, r4
 8009a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a56:	3a30      	subs	r2, #48	; 0x30
 8009a58:	2a09      	cmp	r2, #9
 8009a5a:	d903      	bls.n	8009a64 <_svfiprintf_r+0x1a8>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0c5      	beq.n	80099ec <_svfiprintf_r+0x130>
 8009a60:	9105      	str	r1, [sp, #20]
 8009a62:	e7c3      	b.n	80099ec <_svfiprintf_r+0x130>
 8009a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a68:	4604      	mov	r4, r0
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e7f0      	b.n	8009a50 <_svfiprintf_r+0x194>
 8009a6e:	ab03      	add	r3, sp, #12
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	462a      	mov	r2, r5
 8009a74:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <_svfiprintf_r+0x1f8>)
 8009a76:	a904      	add	r1, sp, #16
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7fd ffcb 	bl	8007a14 <_printf_float>
 8009a7e:	1c42      	adds	r2, r0, #1
 8009a80:	4606      	mov	r6, r0
 8009a82:	d1d6      	bne.n	8009a32 <_svfiprintf_r+0x176>
 8009a84:	89ab      	ldrh	r3, [r5, #12]
 8009a86:	065b      	lsls	r3, r3, #25
 8009a88:	f53f af2c 	bmi.w	80098e4 <_svfiprintf_r+0x28>
 8009a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a8e:	b01d      	add	sp, #116	; 0x74
 8009a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a94:	ab03      	add	r3, sp, #12
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <_svfiprintf_r+0x1f8>)
 8009a9c:	a904      	add	r1, sp, #16
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f7fe fa5c 	bl	8007f5c <_printf_i>
 8009aa4:	e7eb      	b.n	8009a7e <_svfiprintf_r+0x1c2>
 8009aa6:	bf00      	nop
 8009aa8:	0800b6ec 	.word	0x0800b6ec
 8009aac:	0800b6f6 	.word	0x0800b6f6
 8009ab0:	08007a15 	.word	0x08007a15
 8009ab4:	08009805 	.word	0x08009805
 8009ab8:	0800b6f2 	.word	0x0800b6f2

08009abc <_sbrk_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4d06      	ldr	r5, [pc, #24]	; (8009ad8 <_sbrk_r+0x1c>)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	f7f9 ff4a 	bl	8003960 <_sbrk>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_sbrk_r+0x1a>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_sbrk_r+0x1a>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20000784 	.word	0x20000784

08009adc <__assert_func>:
 8009adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ade:	4614      	mov	r4, r2
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <__assert_func+0x2c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	68d8      	ldr	r0, [r3, #12]
 8009aea:	b14c      	cbz	r4, 8009b00 <__assert_func+0x24>
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <__assert_func+0x30>)
 8009aee:	9100      	str	r1, [sp, #0]
 8009af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009af4:	4906      	ldr	r1, [pc, #24]	; (8009b10 <__assert_func+0x34>)
 8009af6:	462b      	mov	r3, r5
 8009af8:	f000 f80e 	bl	8009b18 <fiprintf>
 8009afc:	f000 faac 	bl	800a058 <abort>
 8009b00:	4b04      	ldr	r3, [pc, #16]	; (8009b14 <__assert_func+0x38>)
 8009b02:	461c      	mov	r4, r3
 8009b04:	e7f3      	b.n	8009aee <__assert_func+0x12>
 8009b06:	bf00      	nop
 8009b08:	2000002c 	.word	0x2000002c
 8009b0c:	0800b6fd 	.word	0x0800b6fd
 8009b10:	0800b70a 	.word	0x0800b70a
 8009b14:	0800b738 	.word	0x0800b738

08009b18 <fiprintf>:
 8009b18:	b40e      	push	{r1, r2, r3}
 8009b1a:	b503      	push	{r0, r1, lr}
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	4805      	ldr	r0, [pc, #20]	; (8009b38 <fiprintf+0x20>)
 8009b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b26:	6800      	ldr	r0, [r0, #0]
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	f000 f897 	bl	8009c5c <_vfiprintf_r>
 8009b2e:	b002      	add	sp, #8
 8009b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b34:	b003      	add	sp, #12
 8009b36:	4770      	bx	lr
 8009b38:	2000002c 	.word	0x2000002c

08009b3c <__ascii_mbtowc>:
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	b901      	cbnz	r1, 8009b42 <__ascii_mbtowc+0x6>
 8009b40:	a901      	add	r1, sp, #4
 8009b42:	b142      	cbz	r2, 8009b56 <__ascii_mbtowc+0x1a>
 8009b44:	b14b      	cbz	r3, 8009b5a <__ascii_mbtowc+0x1e>
 8009b46:	7813      	ldrb	r3, [r2, #0]
 8009b48:	600b      	str	r3, [r1, #0]
 8009b4a:	7812      	ldrb	r2, [r2, #0]
 8009b4c:	1e10      	subs	r0, r2, #0
 8009b4e:	bf18      	it	ne
 8009b50:	2001      	movne	r0, #1
 8009b52:	b002      	add	sp, #8
 8009b54:	4770      	bx	lr
 8009b56:	4610      	mov	r0, r2
 8009b58:	e7fb      	b.n	8009b52 <__ascii_mbtowc+0x16>
 8009b5a:	f06f 0001 	mvn.w	r0, #1
 8009b5e:	e7f8      	b.n	8009b52 <__ascii_mbtowc+0x16>

08009b60 <memmove>:
 8009b60:	4288      	cmp	r0, r1
 8009b62:	b510      	push	{r4, lr}
 8009b64:	eb01 0402 	add.w	r4, r1, r2
 8009b68:	d902      	bls.n	8009b70 <memmove+0x10>
 8009b6a:	4284      	cmp	r4, r0
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	d807      	bhi.n	8009b80 <memmove+0x20>
 8009b70:	1e43      	subs	r3, r0, #1
 8009b72:	42a1      	cmp	r1, r4
 8009b74:	d008      	beq.n	8009b88 <memmove+0x28>
 8009b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b7e:	e7f8      	b.n	8009b72 <memmove+0x12>
 8009b80:	4402      	add	r2, r0
 8009b82:	4601      	mov	r1, r0
 8009b84:	428a      	cmp	r2, r1
 8009b86:	d100      	bne.n	8009b8a <memmove+0x2a>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b92:	e7f7      	b.n	8009b84 <memmove+0x24>

08009b94 <__malloc_lock>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__malloc_lock+0x8>)
 8009b96:	f000 bc1f 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20000788 	.word	0x20000788

08009ba0 <__malloc_unlock>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	; (8009ba8 <__malloc_unlock+0x8>)
 8009ba2:	f000 bc1a 	b.w	800a3da <__retarget_lock_release_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	20000788 	.word	0x20000788

08009bac <_realloc_r>:
 8009bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4614      	mov	r4, r2
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	b921      	cbnz	r1, 8009bc2 <_realloc_r+0x16>
 8009bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	f7ff bdad 	b.w	800971c <_malloc_r>
 8009bc2:	b92a      	cbnz	r2, 8009bd0 <_realloc_r+0x24>
 8009bc4:	f7ff fd3e 	bl	8009644 <_free_r>
 8009bc8:	4625      	mov	r5, r4
 8009bca:	4628      	mov	r0, r5
 8009bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd0:	f000 fc6a 	bl	800a4a8 <_malloc_usable_size_r>
 8009bd4:	4284      	cmp	r4, r0
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	d802      	bhi.n	8009be0 <_realloc_r+0x34>
 8009bda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bde:	d812      	bhi.n	8009c06 <_realloc_r+0x5a>
 8009be0:	4621      	mov	r1, r4
 8009be2:	4640      	mov	r0, r8
 8009be4:	f7ff fd9a 	bl	800971c <_malloc_r>
 8009be8:	4605      	mov	r5, r0
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d0ed      	beq.n	8009bca <_realloc_r+0x1e>
 8009bee:	42bc      	cmp	r4, r7
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	bf28      	it	cs
 8009bf6:	463a      	movcs	r2, r7
 8009bf8:	f7ff f97c 	bl	8008ef4 <memcpy>
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4640      	mov	r0, r8
 8009c00:	f7ff fd20 	bl	8009644 <_free_r>
 8009c04:	e7e1      	b.n	8009bca <_realloc_r+0x1e>
 8009c06:	4635      	mov	r5, r6
 8009c08:	e7df      	b.n	8009bca <_realloc_r+0x1e>

08009c0a <__sfputc_r>:
 8009c0a:	6893      	ldr	r3, [r2, #8]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	b410      	push	{r4}
 8009c12:	6093      	str	r3, [r2, #8]
 8009c14:	da08      	bge.n	8009c28 <__sfputc_r+0x1e>
 8009c16:	6994      	ldr	r4, [r2, #24]
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	db01      	blt.n	8009c20 <__sfputc_r+0x16>
 8009c1c:	290a      	cmp	r1, #10
 8009c1e:	d103      	bne.n	8009c28 <__sfputc_r+0x1e>
 8009c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c24:	f000 b94a 	b.w	8009ebc <__swbuf_r>
 8009c28:	6813      	ldr	r3, [r2, #0]
 8009c2a:	1c58      	adds	r0, r3, #1
 8009c2c:	6010      	str	r0, [r2, #0]
 8009c2e:	7019      	strb	r1, [r3, #0]
 8009c30:	4608      	mov	r0, r1
 8009c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <__sfputs_r>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	4614      	mov	r4, r2
 8009c40:	18d5      	adds	r5, r2, r3
 8009c42:	42ac      	cmp	r4, r5
 8009c44:	d101      	bne.n	8009c4a <__sfputs_r+0x12>
 8009c46:	2000      	movs	r0, #0
 8009c48:	e007      	b.n	8009c5a <__sfputs_r+0x22>
 8009c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4e:	463a      	mov	r2, r7
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff ffda 	bl	8009c0a <__sfputc_r>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d1f3      	bne.n	8009c42 <__sfputs_r+0xa>
 8009c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c5c <_vfiprintf_r>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	460d      	mov	r5, r1
 8009c62:	b09d      	sub	sp, #116	; 0x74
 8009c64:	4614      	mov	r4, r2
 8009c66:	4698      	mov	r8, r3
 8009c68:	4606      	mov	r6, r0
 8009c6a:	b118      	cbz	r0, 8009c74 <_vfiprintf_r+0x18>
 8009c6c:	6983      	ldr	r3, [r0, #24]
 8009c6e:	b90b      	cbnz	r3, 8009c74 <_vfiprintf_r+0x18>
 8009c70:	f000 fb14 	bl	800a29c <__sinit>
 8009c74:	4b89      	ldr	r3, [pc, #548]	; (8009e9c <_vfiprintf_r+0x240>)
 8009c76:	429d      	cmp	r5, r3
 8009c78:	d11b      	bne.n	8009cb2 <_vfiprintf_r+0x56>
 8009c7a:	6875      	ldr	r5, [r6, #4]
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8a:	f000 fba5 	bl	800a3d8 <__retarget_lock_acquire_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	071b      	lsls	r3, r3, #28
 8009c92:	d501      	bpl.n	8009c98 <_vfiprintf_r+0x3c>
 8009c94:	692b      	ldr	r3, [r5, #16]
 8009c96:	b9eb      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x78>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f000 f96e 	bl	8009f7c <__swsetup_r>
 8009ca0:	b1c0      	cbz	r0, 8009cd4 <_vfiprintf_r+0x78>
 8009ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca4:	07dc      	lsls	r4, r3, #31
 8009ca6:	d50e      	bpl.n	8009cc6 <_vfiprintf_r+0x6a>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	b01d      	add	sp, #116	; 0x74
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	4b7b      	ldr	r3, [pc, #492]	; (8009ea0 <_vfiprintf_r+0x244>)
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	d101      	bne.n	8009cbc <_vfiprintf_r+0x60>
 8009cb8:	68b5      	ldr	r5, [r6, #8]
 8009cba:	e7df      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cbc:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <_vfiprintf_r+0x248>)
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf08      	it	eq
 8009cc2:	68f5      	ldreq	r5, [r6, #12]
 8009cc4:	e7da      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	0598      	lsls	r0, r3, #22
 8009cca:	d4ed      	bmi.n	8009ca8 <_vfiprintf_r+0x4c>
 8009ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cce:	f000 fb84 	bl	800a3da <__retarget_lock_release_recursive>
 8009cd2:	e7e9      	b.n	8009ca8 <_vfiprintf_r+0x4c>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce2:	2330      	movs	r3, #48	; 0x30
 8009ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ea8 <_vfiprintf_r+0x24c>
 8009ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf8:	b10a      	cbz	r2, 8009cfe <_vfiprintf_r+0xa2>
 8009cfa:	2a25      	cmp	r2, #37	; 0x25
 8009cfc:	d1f9      	bne.n	8009cf2 <_vfiprintf_r+0x96>
 8009cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009d02:	d00b      	beq.n	8009d1c <_vfiprintf_r+0xc0>
 8009d04:	465b      	mov	r3, fp
 8009d06:	4622      	mov	r2, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ff94 	bl	8009c38 <__sfputs_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	f000 80aa 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d18:	445a      	add	r2, fp
 8009d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80a2 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	f10a 0a01 	add.w	sl, sl, #1
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2205      	movs	r2, #5
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	4858      	ldr	r0, [pc, #352]	; (8009ea8 <_vfiprintf_r+0x24c>)
 8009d48:	f7f6 fa72 	bl	8000230 <memchr>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	b9d8      	cbnz	r0, 8009d88 <_vfiprintf_r+0x12c>
 8009d50:	06d1      	lsls	r1, r2, #27
 8009d52:	bf44      	itt	mi
 8009d54:	2320      	movmi	r3, #32
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5a:	0713      	lsls	r3, r2, #28
 8009d5c:	bf44      	itt	mi
 8009d5e:	232b      	movmi	r3, #43	; 0x2b
 8009d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6a:	d015      	beq.n	8009d98 <_vfiprintf_r+0x13c>
 8009d6c:	9a07      	ldr	r2, [sp, #28]
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2000      	movs	r0, #0
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4621      	mov	r1, r4
 8009d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7c:	3b30      	subs	r3, #48	; 0x30
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d94e      	bls.n	8009e20 <_vfiprintf_r+0x1c4>
 8009d82:	b1b0      	cbz	r0, 8009db2 <_vfiprintf_r+0x156>
 8009d84:	9207      	str	r2, [sp, #28]
 8009d86:	e014      	b.n	8009db2 <_vfiprintf_r+0x156>
 8009d88:	eba0 0308 	sub.w	r3, r0, r8
 8009d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	46a2      	mov	sl, r4
 8009d96:	e7d2      	b.n	8009d3e <_vfiprintf_r+0xe2>
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	1d19      	adds	r1, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	9103      	str	r1, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfbb      	ittet	lt
 8009da4:	425b      	neglt	r3, r3
 8009da6:	f042 0202 	orrlt.w	r2, r2, #2
 8009daa:	9307      	strge	r3, [sp, #28]
 8009dac:	9307      	strlt	r3, [sp, #28]
 8009dae:	bfb8      	it	lt
 8009db0:	9204      	strlt	r2, [sp, #16]
 8009db2:	7823      	ldrb	r3, [r4, #0]
 8009db4:	2b2e      	cmp	r3, #46	; 0x2e
 8009db6:	d10c      	bne.n	8009dd2 <_vfiprintf_r+0x176>
 8009db8:	7863      	ldrb	r3, [r4, #1]
 8009dba:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbc:	d135      	bne.n	8009e2a <_vfiprintf_r+0x1ce>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d1a      	adds	r2, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9203      	str	r2, [sp, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfb8      	it	lt
 8009dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dce:	3402      	adds	r4, #2
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009eb8 <_vfiprintf_r+0x25c>
 8009dd6:	7821      	ldrb	r1, [r4, #0]
 8009dd8:	2203      	movs	r2, #3
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7f6 fa28 	bl	8000230 <memchr>
 8009de0:	b140      	cbz	r0, 8009df4 <_vfiprintf_r+0x198>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	eba0 000a 	sub.w	r0, r0, sl
 8009de8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	4303      	orrs	r3, r0
 8009df0:	3401      	adds	r4, #1
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	482c      	ldr	r0, [pc, #176]	; (8009eac <_vfiprintf_r+0x250>)
 8009dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfe:	2206      	movs	r2, #6
 8009e00:	f7f6 fa16 	bl	8000230 <memchr>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d03f      	beq.n	8009e88 <_vfiprintf_r+0x22c>
 8009e08:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <_vfiprintf_r+0x254>)
 8009e0a:	bb1b      	cbnz	r3, 8009e54 <_vfiprintf_r+0x1f8>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	3307      	adds	r3, #7
 8009e10:	f023 0307 	bic.w	r3, r3, #7
 8009e14:	3308      	adds	r3, #8
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	443b      	add	r3, r7
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	e767      	b.n	8009cf0 <_vfiprintf_r+0x94>
 8009e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e24:	460c      	mov	r4, r1
 8009e26:	2001      	movs	r0, #1
 8009e28:	e7a5      	b.n	8009d76 <_vfiprintf_r+0x11a>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f04f 0c0a 	mov.w	ip, #10
 8009e36:	4620      	mov	r0, r4
 8009e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e3c:	3a30      	subs	r2, #48	; 0x30
 8009e3e:	2a09      	cmp	r2, #9
 8009e40:	d903      	bls.n	8009e4a <_vfiprintf_r+0x1ee>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c5      	beq.n	8009dd2 <_vfiprintf_r+0x176>
 8009e46:	9105      	str	r1, [sp, #20]
 8009e48:	e7c3      	b.n	8009dd2 <_vfiprintf_r+0x176>
 8009e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4e:	4604      	mov	r4, r0
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7f0      	b.n	8009e36 <_vfiprintf_r+0x1da>
 8009e54:	ab03      	add	r3, sp, #12
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	462a      	mov	r2, r5
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7fd fdd8 	bl	8007a14 <_printf_float>
 8009e64:	4607      	mov	r7, r0
 8009e66:	1c78      	adds	r0, r7, #1
 8009e68:	d1d6      	bne.n	8009e18 <_vfiprintf_r+0x1bc>
 8009e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6c:	07d9      	lsls	r1, r3, #31
 8009e6e:	d405      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e70:	89ab      	ldrh	r3, [r5, #12]
 8009e72:	059a      	lsls	r2, r3, #22
 8009e74:	d402      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e78:	f000 faaf 	bl	800a3da <__retarget_lock_release_recursive>
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	065b      	lsls	r3, r3, #25
 8009e80:	f53f af12 	bmi.w	8009ca8 <_vfiprintf_r+0x4c>
 8009e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e86:	e711      	b.n	8009cac <_vfiprintf_r+0x50>
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7fe f862 	bl	8007f5c <_printf_i>
 8009e98:	e7e4      	b.n	8009e64 <_vfiprintf_r+0x208>
 8009e9a:	bf00      	nop
 8009e9c:	0800b864 	.word	0x0800b864
 8009ea0:	0800b884 	.word	0x0800b884
 8009ea4:	0800b844 	.word	0x0800b844
 8009ea8:	0800b6ec 	.word	0x0800b6ec
 8009eac:	0800b6f6 	.word	0x0800b6f6
 8009eb0:	08007a15 	.word	0x08007a15
 8009eb4:	08009c39 	.word	0x08009c39
 8009eb8:	0800b6f2 	.word	0x0800b6f2

08009ebc <__swbuf_r>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	b118      	cbz	r0, 8009ece <__swbuf_r+0x12>
 8009ec6:	6983      	ldr	r3, [r0, #24]
 8009ec8:	b90b      	cbnz	r3, 8009ece <__swbuf_r+0x12>
 8009eca:	f000 f9e7 	bl	800a29c <__sinit>
 8009ece:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <__swbuf_r+0x98>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	d12b      	bne.n	8009f2c <__swbuf_r+0x70>
 8009ed4:	686c      	ldr	r4, [r5, #4]
 8009ed6:	69a3      	ldr	r3, [r4, #24]
 8009ed8:	60a3      	str	r3, [r4, #8]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	071a      	lsls	r2, r3, #28
 8009ede:	d52f      	bpl.n	8009f40 <__swbuf_r+0x84>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	b36b      	cbz	r3, 8009f40 <__swbuf_r+0x84>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	1ac0      	subs	r0, r0, r3
 8009eea:	6963      	ldr	r3, [r4, #20]
 8009eec:	b2f6      	uxtb	r6, r6
 8009eee:	4283      	cmp	r3, r0
 8009ef0:	4637      	mov	r7, r6
 8009ef2:	dc04      	bgt.n	8009efe <__swbuf_r+0x42>
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f000 f93c 	bl	800a174 <_fflush_r>
 8009efc:	bb30      	cbnz	r0, 8009f4c <__swbuf_r+0x90>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	60a3      	str	r3, [r4, #8]
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	6022      	str	r2, [r4, #0]
 8009f0a:	701e      	strb	r6, [r3, #0]
 8009f0c:	6963      	ldr	r3, [r4, #20]
 8009f0e:	3001      	adds	r0, #1
 8009f10:	4283      	cmp	r3, r0
 8009f12:	d004      	beq.n	8009f1e <__swbuf_r+0x62>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	07db      	lsls	r3, r3, #31
 8009f18:	d506      	bpl.n	8009f28 <__swbuf_r+0x6c>
 8009f1a:	2e0a      	cmp	r6, #10
 8009f1c:	d104      	bne.n	8009f28 <__swbuf_r+0x6c>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 f927 	bl	800a174 <_fflush_r>
 8009f26:	b988      	cbnz	r0, 8009f4c <__swbuf_r+0x90>
 8009f28:	4638      	mov	r0, r7
 8009f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	; (8009f58 <__swbuf_r+0x9c>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swbuf_r+0x7a>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7cf      	b.n	8009ed6 <__swbuf_r+0x1a>
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <__swbuf_r+0xa0>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7ca      	b.n	8009ed6 <__swbuf_r+0x1a>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4628      	mov	r0, r5
 8009f44:	f000 f81a 	bl	8009f7c <__swsetup_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0cb      	beq.n	8009ee4 <__swbuf_r+0x28>
 8009f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f50:	e7ea      	b.n	8009f28 <__swbuf_r+0x6c>
 8009f52:	bf00      	nop
 8009f54:	0800b864 	.word	0x0800b864
 8009f58:	0800b884 	.word	0x0800b884
 8009f5c:	0800b844 	.word	0x0800b844

08009f60 <__ascii_wctomb>:
 8009f60:	b149      	cbz	r1, 8009f76 <__ascii_wctomb+0x16>
 8009f62:	2aff      	cmp	r2, #255	; 0xff
 8009f64:	bf85      	ittet	hi
 8009f66:	238a      	movhi	r3, #138	; 0x8a
 8009f68:	6003      	strhi	r3, [r0, #0]
 8009f6a:	700a      	strbls	r2, [r1, #0]
 8009f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f70:	bf98      	it	ls
 8009f72:	2001      	movls	r0, #1
 8009f74:	4770      	bx	lr
 8009f76:	4608      	mov	r0, r1
 8009f78:	4770      	bx	lr
	...

08009f7c <__swsetup_r>:
 8009f7c:	4b32      	ldr	r3, [pc, #200]	; (800a048 <__swsetup_r+0xcc>)
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	681d      	ldr	r5, [r3, #0]
 8009f82:	4606      	mov	r6, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	b125      	cbz	r5, 8009f92 <__swsetup_r+0x16>
 8009f88:	69ab      	ldr	r3, [r5, #24]
 8009f8a:	b913      	cbnz	r3, 8009f92 <__swsetup_r+0x16>
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f000 f985 	bl	800a29c <__sinit>
 8009f92:	4b2e      	ldr	r3, [pc, #184]	; (800a04c <__swsetup_r+0xd0>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d10f      	bne.n	8009fb8 <__swsetup_r+0x3c>
 8009f98:	686c      	ldr	r4, [r5, #4]
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fa0:	0719      	lsls	r1, r3, #28
 8009fa2:	d42c      	bmi.n	8009ffe <__swsetup_r+0x82>
 8009fa4:	06dd      	lsls	r5, r3, #27
 8009fa6:	d411      	bmi.n	8009fcc <__swsetup_r+0x50>
 8009fa8:	2309      	movs	r3, #9
 8009faa:	6033      	str	r3, [r6, #0]
 8009fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	e03e      	b.n	800a036 <__swsetup_r+0xba>
 8009fb8:	4b25      	ldr	r3, [pc, #148]	; (800a050 <__swsetup_r+0xd4>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d101      	bne.n	8009fc2 <__swsetup_r+0x46>
 8009fbe:	68ac      	ldr	r4, [r5, #8]
 8009fc0:	e7eb      	b.n	8009f9a <__swsetup_r+0x1e>
 8009fc2:	4b24      	ldr	r3, [pc, #144]	; (800a054 <__swsetup_r+0xd8>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	bf08      	it	eq
 8009fc8:	68ec      	ldreq	r4, [r5, #12]
 8009fca:	e7e6      	b.n	8009f9a <__swsetup_r+0x1e>
 8009fcc:	0758      	lsls	r0, r3, #29
 8009fce:	d512      	bpl.n	8009ff6 <__swsetup_r+0x7a>
 8009fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fd2:	b141      	cbz	r1, 8009fe6 <__swsetup_r+0x6a>
 8009fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	d002      	beq.n	8009fe2 <__swsetup_r+0x66>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff fb31 	bl	8009644 <_free_r>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f043 0308 	orr.w	r3, r3, #8
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	b94b      	cbnz	r3, 800a016 <__swsetup_r+0x9a>
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a00c:	d003      	beq.n	800a016 <__swsetup_r+0x9a>
 800a00e:	4621      	mov	r1, r4
 800a010:	4630      	mov	r0, r6
 800a012:	f000 fa09 	bl	800a428 <__smakebuf_r>
 800a016:	89a0      	ldrh	r0, [r4, #12]
 800a018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a01c:	f010 0301 	ands.w	r3, r0, #1
 800a020:	d00a      	beq.n	800a038 <__swsetup_r+0xbc>
 800a022:	2300      	movs	r3, #0
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	6963      	ldr	r3, [r4, #20]
 800a028:	425b      	negs	r3, r3
 800a02a:	61a3      	str	r3, [r4, #24]
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	b943      	cbnz	r3, 800a042 <__swsetup_r+0xc6>
 800a030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a034:	d1ba      	bne.n	8009fac <__swsetup_r+0x30>
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	0781      	lsls	r1, r0, #30
 800a03a:	bf58      	it	pl
 800a03c:	6963      	ldrpl	r3, [r4, #20]
 800a03e:	60a3      	str	r3, [r4, #8]
 800a040:	e7f4      	b.n	800a02c <__swsetup_r+0xb0>
 800a042:	2000      	movs	r0, #0
 800a044:	e7f7      	b.n	800a036 <__swsetup_r+0xba>
 800a046:	bf00      	nop
 800a048:	2000002c 	.word	0x2000002c
 800a04c:	0800b864 	.word	0x0800b864
 800a050:	0800b884 	.word	0x0800b884
 800a054:	0800b844 	.word	0x0800b844

0800a058 <abort>:
 800a058:	b508      	push	{r3, lr}
 800a05a:	2006      	movs	r0, #6
 800a05c:	f000 fa54 	bl	800a508 <raise>
 800a060:	2001      	movs	r0, #1
 800a062:	f7f9 fc4d 	bl	8003900 <_exit>
	...

0800a068 <__sflush_r>:
 800a068:	898a      	ldrh	r2, [r1, #12]
 800a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	4605      	mov	r5, r0
 800a070:	0710      	lsls	r0, r2, #28
 800a072:	460c      	mov	r4, r1
 800a074:	d458      	bmi.n	800a128 <__sflush_r+0xc0>
 800a076:	684b      	ldr	r3, [r1, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc05      	bgt.n	800a088 <__sflush_r+0x20>
 800a07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc02      	bgt.n	800a088 <__sflush_r+0x20>
 800a082:	2000      	movs	r0, #0
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d0f9      	beq.n	800a082 <__sflush_r+0x1a>
 800a08e:	2300      	movs	r3, #0
 800a090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a094:	682f      	ldr	r7, [r5, #0]
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	d032      	beq.n	800a100 <__sflush_r+0x98>
 800a09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	075a      	lsls	r2, r3, #29
 800a0a0:	d505      	bpl.n	800a0ae <__sflush_r+0x46>
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	1ac0      	subs	r0, r0, r3
 800a0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a8:	b10b      	cbz	r3, 800a0ae <__sflush_r+0x46>
 800a0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ac:	1ac0      	subs	r0, r0, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b4:	6a21      	ldr	r1, [r4, #32]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b0      	blx	r6
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	d106      	bne.n	800a0ce <__sflush_r+0x66>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	291d      	cmp	r1, #29
 800a0c4:	d82c      	bhi.n	800a120 <__sflush_r+0xb8>
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <__sflush_r+0x108>)
 800a0c8:	40ca      	lsrs	r2, r1
 800a0ca:	07d6      	lsls	r6, r2, #31
 800a0cc:	d528      	bpl.n	800a120 <__sflush_r+0xb8>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6062      	str	r2, [r4, #4]
 800a0d2:	04d9      	lsls	r1, r3, #19
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	6022      	str	r2, [r4, #0]
 800a0d8:	d504      	bpl.n	800a0e4 <__sflush_r+0x7c>
 800a0da:	1c42      	adds	r2, r0, #1
 800a0dc:	d101      	bne.n	800a0e2 <__sflush_r+0x7a>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b903      	cbnz	r3, 800a0e4 <__sflush_r+0x7c>
 800a0e2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e6:	602f      	str	r7, [r5, #0]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d0ca      	beq.n	800a082 <__sflush_r+0x1a>
 800a0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	d002      	beq.n	800a0fa <__sflush_r+0x92>
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f7ff faa5 	bl	8009644 <_free_r>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fe:	e7c1      	b.n	800a084 <__sflush_r+0x1c>
 800a100:	6a21      	ldr	r1, [r4, #32]
 800a102:	2301      	movs	r3, #1
 800a104:	4628      	mov	r0, r5
 800a106:	47b0      	blx	r6
 800a108:	1c41      	adds	r1, r0, #1
 800a10a:	d1c7      	bne.n	800a09c <__sflush_r+0x34>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0c4      	beq.n	800a09c <__sflush_r+0x34>
 800a112:	2b1d      	cmp	r3, #29
 800a114:	d001      	beq.n	800a11a <__sflush_r+0xb2>
 800a116:	2b16      	cmp	r3, #22
 800a118:	d101      	bne.n	800a11e <__sflush_r+0xb6>
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	e7b1      	b.n	800a082 <__sflush_r+0x1a>
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	e7ad      	b.n	800a084 <__sflush_r+0x1c>
 800a128:	690f      	ldr	r7, [r1, #16]
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	d0a9      	beq.n	800a082 <__sflush_r+0x1a>
 800a12e:	0793      	lsls	r3, r2, #30
 800a130:	680e      	ldr	r6, [r1, #0]
 800a132:	bf08      	it	eq
 800a134:	694b      	ldreq	r3, [r1, #20]
 800a136:	600f      	str	r7, [r1, #0]
 800a138:	bf18      	it	ne
 800a13a:	2300      	movne	r3, #0
 800a13c:	eba6 0807 	sub.w	r8, r6, r7
 800a140:	608b      	str	r3, [r1, #8]
 800a142:	f1b8 0f00 	cmp.w	r8, #0
 800a146:	dd9c      	ble.n	800a082 <__sflush_r+0x1a>
 800a148:	6a21      	ldr	r1, [r4, #32]
 800a14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a14c:	4643      	mov	r3, r8
 800a14e:	463a      	mov	r2, r7
 800a150:	4628      	mov	r0, r5
 800a152:	47b0      	blx	r6
 800a154:	2800      	cmp	r0, #0
 800a156:	dc06      	bgt.n	800a166 <__sflush_r+0xfe>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	e78e      	b.n	800a084 <__sflush_r+0x1c>
 800a166:	4407      	add	r7, r0
 800a168:	eba8 0800 	sub.w	r8, r8, r0
 800a16c:	e7e9      	b.n	800a142 <__sflush_r+0xda>
 800a16e:	bf00      	nop
 800a170:	20400001 	.word	0x20400001

0800a174 <_fflush_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b913      	cbnz	r3, 800a184 <_fflush_r+0x10>
 800a17e:	2500      	movs	r5, #0
 800a180:	4628      	mov	r0, r5
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	b118      	cbz	r0, 800a18e <_fflush_r+0x1a>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <_fflush_r+0x1a>
 800a18a:	f000 f887 	bl	800a29c <__sinit>
 800a18e:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <_fflush_r+0x6c>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d11b      	bne.n	800a1cc <_fflush_r+0x58>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0ef      	beq.n	800a17e <_fflush_r+0xa>
 800a19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a0:	07d0      	lsls	r0, r2, #31
 800a1a2:	d404      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a4:	0599      	lsls	r1, r3, #22
 800a1a6:	d402      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f000 f915 	bl	800a3d8 <__retarget_lock_acquire_recursive>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	f7ff ff59 	bl	800a068 <__sflush_r>
 800a1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b8:	07da      	lsls	r2, r3, #31
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	d4e0      	bmi.n	800a180 <_fflush_r+0xc>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	059b      	lsls	r3, r3, #22
 800a1c2:	d4dd      	bmi.n	800a180 <_fflush_r+0xc>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f000 f908 	bl	800a3da <__retarget_lock_release_recursive>
 800a1ca:	e7d9      	b.n	800a180 <_fflush_r+0xc>
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_fflush_r+0x70>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <_fflush_r+0x62>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7df      	b.n	800a196 <_fflush_r+0x22>
 800a1d6:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <_fflush_r+0x74>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7da      	b.n	800a196 <_fflush_r+0x22>
 800a1e0:	0800b864 	.word	0x0800b864
 800a1e4:	0800b884 	.word	0x0800b884
 800a1e8:	0800b844 	.word	0x0800b844

0800a1ec <std>:
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	b510      	push	{r4, lr}
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a1f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1fa:	6083      	str	r3, [r0, #8]
 800a1fc:	8181      	strh	r1, [r0, #12]
 800a1fe:	6643      	str	r3, [r0, #100]	; 0x64
 800a200:	81c2      	strh	r2, [r0, #14]
 800a202:	6183      	str	r3, [r0, #24]
 800a204:	4619      	mov	r1, r3
 800a206:	2208      	movs	r2, #8
 800a208:	305c      	adds	r0, #92	; 0x5c
 800a20a:	f7fd fb5b 	bl	80078c4 <memset>
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <std+0x38>)
 800a210:	6263      	str	r3, [r4, #36]	; 0x24
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <std+0x3c>)
 800a214:	62a3      	str	r3, [r4, #40]	; 0x28
 800a216:	4b05      	ldr	r3, [pc, #20]	; (800a22c <std+0x40>)
 800a218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <std+0x44>)
 800a21c:	6224      	str	r4, [r4, #32]
 800a21e:	6323      	str	r3, [r4, #48]	; 0x30
 800a220:	bd10      	pop	{r4, pc}
 800a222:	bf00      	nop
 800a224:	0800a541 	.word	0x0800a541
 800a228:	0800a563 	.word	0x0800a563
 800a22c:	0800a59b 	.word	0x0800a59b
 800a230:	0800a5bf 	.word	0x0800a5bf

0800a234 <_cleanup_r>:
 800a234:	4901      	ldr	r1, [pc, #4]	; (800a23c <_cleanup_r+0x8>)
 800a236:	f000 b8af 	b.w	800a398 <_fwalk_reent>
 800a23a:	bf00      	nop
 800a23c:	0800a175 	.word	0x0800a175

0800a240 <__sfmoreglue>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	2268      	movs	r2, #104	; 0x68
 800a244:	1e4d      	subs	r5, r1, #1
 800a246:	4355      	muls	r5, r2
 800a248:	460e      	mov	r6, r1
 800a24a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a24e:	f7ff fa65 	bl	800971c <_malloc_r>
 800a252:	4604      	mov	r4, r0
 800a254:	b140      	cbz	r0, 800a268 <__sfmoreglue+0x28>
 800a256:	2100      	movs	r1, #0
 800a258:	e9c0 1600 	strd	r1, r6, [r0]
 800a25c:	300c      	adds	r0, #12
 800a25e:	60a0      	str	r0, [r4, #8]
 800a260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a264:	f7fd fb2e 	bl	80078c4 <memset>
 800a268:	4620      	mov	r0, r4
 800a26a:	bd70      	pop	{r4, r5, r6, pc}

0800a26c <__sfp_lock_acquire>:
 800a26c:	4801      	ldr	r0, [pc, #4]	; (800a274 <__sfp_lock_acquire+0x8>)
 800a26e:	f000 b8b3 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 800a272:	bf00      	nop
 800a274:	20000789 	.word	0x20000789

0800a278 <__sfp_lock_release>:
 800a278:	4801      	ldr	r0, [pc, #4]	; (800a280 <__sfp_lock_release+0x8>)
 800a27a:	f000 b8ae 	b.w	800a3da <__retarget_lock_release_recursive>
 800a27e:	bf00      	nop
 800a280:	20000789 	.word	0x20000789

0800a284 <__sinit_lock_acquire>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__sinit_lock_acquire+0x8>)
 800a286:	f000 b8a7 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	2000078a 	.word	0x2000078a

0800a290 <__sinit_lock_release>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__sinit_lock_release+0x8>)
 800a292:	f000 b8a2 	b.w	800a3da <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	2000078a 	.word	0x2000078a

0800a29c <__sinit>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	4604      	mov	r4, r0
 800a2a0:	f7ff fff0 	bl	800a284 <__sinit_lock_acquire>
 800a2a4:	69a3      	ldr	r3, [r4, #24]
 800a2a6:	b11b      	cbz	r3, 800a2b0 <__sinit+0x14>
 800a2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ac:	f7ff bff0 	b.w	800a290 <__sinit_lock_release>
 800a2b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2b4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2b6:	4b13      	ldr	r3, [pc, #76]	; (800a304 <__sinit+0x68>)
 800a2b8:	4a13      	ldr	r2, [pc, #76]	; (800a308 <__sinit+0x6c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	bf04      	itt	eq
 800a2c2:	2301      	moveq	r3, #1
 800a2c4:	61a3      	streq	r3, [r4, #24]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 f820 	bl	800a30c <__sfp>
 800a2cc:	6060      	str	r0, [r4, #4]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 f81c 	bl	800a30c <__sfp>
 800a2d4:	60a0      	str	r0, [r4, #8]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f818 	bl	800a30c <__sfp>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	60e0      	str	r0, [r4, #12]
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	6860      	ldr	r0, [r4, #4]
 800a2e4:	f7ff ff82 	bl	800a1ec <std>
 800a2e8:	68a0      	ldr	r0, [r4, #8]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	2109      	movs	r1, #9
 800a2ee:	f7ff ff7d 	bl	800a1ec <std>
 800a2f2:	68e0      	ldr	r0, [r4, #12]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	2112      	movs	r1, #18
 800a2f8:	f7ff ff78 	bl	800a1ec <std>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	61a3      	str	r3, [r4, #24]
 800a300:	e7d2      	b.n	800a2a8 <__sinit+0xc>
 800a302:	bf00      	nop
 800a304:	0800b4cc 	.word	0x0800b4cc
 800a308:	0800a235 	.word	0x0800a235

0800a30c <__sfp>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	4607      	mov	r7, r0
 800a310:	f7ff ffac 	bl	800a26c <__sfp_lock_acquire>
 800a314:	4b1e      	ldr	r3, [pc, #120]	; (800a390 <__sfp+0x84>)
 800a316:	681e      	ldr	r6, [r3, #0]
 800a318:	69b3      	ldr	r3, [r6, #24]
 800a31a:	b913      	cbnz	r3, 800a322 <__sfp+0x16>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff ffbd 	bl	800a29c <__sinit>
 800a322:	3648      	adds	r6, #72	; 0x48
 800a324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a328:	3b01      	subs	r3, #1
 800a32a:	d503      	bpl.n	800a334 <__sfp+0x28>
 800a32c:	6833      	ldr	r3, [r6, #0]
 800a32e:	b30b      	cbz	r3, 800a374 <__sfp+0x68>
 800a330:	6836      	ldr	r6, [r6, #0]
 800a332:	e7f7      	b.n	800a324 <__sfp+0x18>
 800a334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a338:	b9d5      	cbnz	r5, 800a370 <__sfp+0x64>
 800a33a:	4b16      	ldr	r3, [pc, #88]	; (800a394 <__sfp+0x88>)
 800a33c:	60e3      	str	r3, [r4, #12]
 800a33e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a342:	6665      	str	r5, [r4, #100]	; 0x64
 800a344:	f000 f847 	bl	800a3d6 <__retarget_lock_init_recursive>
 800a348:	f7ff ff96 	bl	800a278 <__sfp_lock_release>
 800a34c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a354:	6025      	str	r5, [r4, #0]
 800a356:	61a5      	str	r5, [r4, #24]
 800a358:	2208      	movs	r2, #8
 800a35a:	4629      	mov	r1, r5
 800a35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a360:	f7fd fab0 	bl	80078c4 <memset>
 800a364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a36c:	4620      	mov	r0, r4
 800a36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a370:	3468      	adds	r4, #104	; 0x68
 800a372:	e7d9      	b.n	800a328 <__sfp+0x1c>
 800a374:	2104      	movs	r1, #4
 800a376:	4638      	mov	r0, r7
 800a378:	f7ff ff62 	bl	800a240 <__sfmoreglue>
 800a37c:	4604      	mov	r4, r0
 800a37e:	6030      	str	r0, [r6, #0]
 800a380:	2800      	cmp	r0, #0
 800a382:	d1d5      	bne.n	800a330 <__sfp+0x24>
 800a384:	f7ff ff78 	bl	800a278 <__sfp_lock_release>
 800a388:	230c      	movs	r3, #12
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	e7ee      	b.n	800a36c <__sfp+0x60>
 800a38e:	bf00      	nop
 800a390:	0800b4cc 	.word	0x0800b4cc
 800a394:	ffff0001 	.word	0xffff0001

0800a398 <_fwalk_reent>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	4606      	mov	r6, r0
 800a39e:	4688      	mov	r8, r1
 800a3a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3a4:	2700      	movs	r7, #0
 800a3a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ae:	d505      	bpl.n	800a3bc <_fwalk_reent+0x24>
 800a3b0:	6824      	ldr	r4, [r4, #0]
 800a3b2:	2c00      	cmp	r4, #0
 800a3b4:	d1f7      	bne.n	800a3a6 <_fwalk_reent+0xe>
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3bc:	89ab      	ldrh	r3, [r5, #12]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d907      	bls.n	800a3d2 <_fwalk_reent+0x3a>
 800a3c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	d003      	beq.n	800a3d2 <_fwalk_reent+0x3a>
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	47c0      	blx	r8
 800a3d0:	4307      	orrs	r7, r0
 800a3d2:	3568      	adds	r5, #104	; 0x68
 800a3d4:	e7e9      	b.n	800a3aa <_fwalk_reent+0x12>

0800a3d6 <__retarget_lock_init_recursive>:
 800a3d6:	4770      	bx	lr

0800a3d8 <__retarget_lock_acquire_recursive>:
 800a3d8:	4770      	bx	lr

0800a3da <__retarget_lock_release_recursive>:
 800a3da:	4770      	bx	lr

0800a3dc <__swhatbuf_r>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	460e      	mov	r6, r1
 800a3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	b096      	sub	sp, #88	; 0x58
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	461d      	mov	r5, r3
 800a3ec:	da08      	bge.n	800a400 <__swhatbuf_r+0x24>
 800a3ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	602a      	str	r2, [r5, #0]
 800a3f6:	061a      	lsls	r2, r3, #24
 800a3f8:	d410      	bmi.n	800a41c <__swhatbuf_r+0x40>
 800a3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fe:	e00e      	b.n	800a41e <__swhatbuf_r+0x42>
 800a400:	466a      	mov	r2, sp
 800a402:	f000 f903 	bl	800a60c <_fstat_r>
 800a406:	2800      	cmp	r0, #0
 800a408:	dbf1      	blt.n	800a3ee <__swhatbuf_r+0x12>
 800a40a:	9a01      	ldr	r2, [sp, #4]
 800a40c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a410:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a414:	425a      	negs	r2, r3
 800a416:	415a      	adcs	r2, r3
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	e7ee      	b.n	800a3fa <__swhatbuf_r+0x1e>
 800a41c:	2340      	movs	r3, #64	; 0x40
 800a41e:	2000      	movs	r0, #0
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	b016      	add	sp, #88	; 0x58
 800a424:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a428 <__smakebuf_r>:
 800a428:	898b      	ldrh	r3, [r1, #12]
 800a42a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a42c:	079d      	lsls	r5, r3, #30
 800a42e:	4606      	mov	r6, r0
 800a430:	460c      	mov	r4, r1
 800a432:	d507      	bpl.n	800a444 <__smakebuf_r+0x1c>
 800a434:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	6123      	str	r3, [r4, #16]
 800a43c:	2301      	movs	r3, #1
 800a43e:	6163      	str	r3, [r4, #20]
 800a440:	b002      	add	sp, #8
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	ab01      	add	r3, sp, #4
 800a446:	466a      	mov	r2, sp
 800a448:	f7ff ffc8 	bl	800a3dc <__swhatbuf_r>
 800a44c:	9900      	ldr	r1, [sp, #0]
 800a44e:	4605      	mov	r5, r0
 800a450:	4630      	mov	r0, r6
 800a452:	f7ff f963 	bl	800971c <_malloc_r>
 800a456:	b948      	cbnz	r0, 800a46c <__smakebuf_r+0x44>
 800a458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a45c:	059a      	lsls	r2, r3, #22
 800a45e:	d4ef      	bmi.n	800a440 <__smakebuf_r+0x18>
 800a460:	f023 0303 	bic.w	r3, r3, #3
 800a464:	f043 0302 	orr.w	r3, r3, #2
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	e7e3      	b.n	800a434 <__smakebuf_r+0xc>
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <__smakebuf_r+0x7c>)
 800a46e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	6020      	str	r0, [r4, #0]
 800a474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	9b00      	ldr	r3, [sp, #0]
 800a47c:	6163      	str	r3, [r4, #20]
 800a47e:	9b01      	ldr	r3, [sp, #4]
 800a480:	6120      	str	r0, [r4, #16]
 800a482:	b15b      	cbz	r3, 800a49c <__smakebuf_r+0x74>
 800a484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a488:	4630      	mov	r0, r6
 800a48a:	f000 f8d1 	bl	800a630 <_isatty_r>
 800a48e:	b128      	cbz	r0, 800a49c <__smakebuf_r+0x74>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f023 0303 	bic.w	r3, r3, #3
 800a496:	f043 0301 	orr.w	r3, r3, #1
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	89a0      	ldrh	r0, [r4, #12]
 800a49e:	4305      	orrs	r5, r0
 800a4a0:	81a5      	strh	r5, [r4, #12]
 800a4a2:	e7cd      	b.n	800a440 <__smakebuf_r+0x18>
 800a4a4:	0800a235 	.word	0x0800a235

0800a4a8 <_malloc_usable_size_r>:
 800a4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ac:	1f18      	subs	r0, r3, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bfbc      	itt	lt
 800a4b2:	580b      	ldrlt	r3, [r1, r0]
 800a4b4:	18c0      	addlt	r0, r0, r3
 800a4b6:	4770      	bx	lr

0800a4b8 <_raise_r>:
 800a4b8:	291f      	cmp	r1, #31
 800a4ba:	b538      	push	{r3, r4, r5, lr}
 800a4bc:	4604      	mov	r4, r0
 800a4be:	460d      	mov	r5, r1
 800a4c0:	d904      	bls.n	800a4cc <_raise_r+0x14>
 800a4c2:	2316      	movs	r3, #22
 800a4c4:	6003      	str	r3, [r0, #0]
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4ce:	b112      	cbz	r2, 800a4d6 <_raise_r+0x1e>
 800a4d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4d4:	b94b      	cbnz	r3, 800a4ea <_raise_r+0x32>
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 f830 	bl	800a53c <_getpid_r>
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4601      	mov	r1, r0
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4e6:	f000 b817 	b.w	800a518 <_kill_r>
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d00a      	beq.n	800a504 <_raise_r+0x4c>
 800a4ee:	1c59      	adds	r1, r3, #1
 800a4f0:	d103      	bne.n	800a4fa <_raise_r+0x42>
 800a4f2:	2316      	movs	r3, #22
 800a4f4:	6003      	str	r3, [r0, #0]
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	e7e7      	b.n	800a4ca <_raise_r+0x12>
 800a4fa:	2400      	movs	r4, #0
 800a4fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a500:	4628      	mov	r0, r5
 800a502:	4798      	blx	r3
 800a504:	2000      	movs	r0, #0
 800a506:	e7e0      	b.n	800a4ca <_raise_r+0x12>

0800a508 <raise>:
 800a508:	4b02      	ldr	r3, [pc, #8]	; (800a514 <raise+0xc>)
 800a50a:	4601      	mov	r1, r0
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	f7ff bfd3 	b.w	800a4b8 <_raise_r>
 800a512:	bf00      	nop
 800a514:	2000002c 	.word	0x2000002c

0800a518 <_kill_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4d07      	ldr	r5, [pc, #28]	; (800a538 <_kill_r+0x20>)
 800a51c:	2300      	movs	r3, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	4611      	mov	r1, r2
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	f7f9 f9e3 	bl	80038f0 <_kill>
 800a52a:	1c43      	adds	r3, r0, #1
 800a52c:	d102      	bne.n	800a534 <_kill_r+0x1c>
 800a52e:	682b      	ldr	r3, [r5, #0]
 800a530:	b103      	cbz	r3, 800a534 <_kill_r+0x1c>
 800a532:	6023      	str	r3, [r4, #0]
 800a534:	bd38      	pop	{r3, r4, r5, pc}
 800a536:	bf00      	nop
 800a538:	20000784 	.word	0x20000784

0800a53c <_getpid_r>:
 800a53c:	f7f9 b9d6 	b.w	80038ec <_getpid>

0800a540 <__sread>:
 800a540:	b510      	push	{r4, lr}
 800a542:	460c      	mov	r4, r1
 800a544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a548:	f000 f894 	bl	800a674 <_read_r>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	bfab      	itete	ge
 800a550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a552:	89a3      	ldrhlt	r3, [r4, #12]
 800a554:	181b      	addge	r3, r3, r0
 800a556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a55a:	bfac      	ite	ge
 800a55c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a55e:	81a3      	strhlt	r3, [r4, #12]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <__swrite>:
 800a562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	461f      	mov	r7, r3
 800a568:	898b      	ldrh	r3, [r1, #12]
 800a56a:	05db      	lsls	r3, r3, #23
 800a56c:	4605      	mov	r5, r0
 800a56e:	460c      	mov	r4, r1
 800a570:	4616      	mov	r6, r2
 800a572:	d505      	bpl.n	800a580 <__swrite+0x1e>
 800a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a578:	2302      	movs	r3, #2
 800a57a:	2200      	movs	r2, #0
 800a57c:	f000 f868 	bl	800a650 <_lseek_r>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	4632      	mov	r2, r6
 800a58e:	463b      	mov	r3, r7
 800a590:	4628      	mov	r0, r5
 800a592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	f000 b817 	b.w	800a5c8 <_write_r>

0800a59a <__sseek>:
 800a59a:	b510      	push	{r4, lr}
 800a59c:	460c      	mov	r4, r1
 800a59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a2:	f000 f855 	bl	800a650 <_lseek_r>
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	bf15      	itete	ne
 800a5ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5b6:	81a3      	strheq	r3, [r4, #12]
 800a5b8:	bf18      	it	ne
 800a5ba:	81a3      	strhne	r3, [r4, #12]
 800a5bc:	bd10      	pop	{r4, pc}

0800a5be <__sclose>:
 800a5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c2:	f000 b813 	b.w	800a5ec <_close_r>
	...

0800a5c8 <_write_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_write_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f9 f9a6 	bl	8003928 <_write>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_write_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_write_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20000784 	.word	0x20000784

0800a5ec <_close_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d06      	ldr	r5, [pc, #24]	; (800a608 <_close_r+0x1c>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	f7f9 f9a4 	bl	8003944 <_close>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_close_r+0x1a>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_close_r+0x1a>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20000784 	.word	0x20000784

0800a60c <_fstat_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	; (800a62c <_fstat_r+0x20>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7f9 f997 	bl	800394c <_fstat>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_fstat_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_fstat_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	20000784 	.word	0x20000784

0800a630 <_isatty_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	; (800a64c <_isatty_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f9 f98c 	bl	8003958 <_isatty>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_isatty_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_isatty_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20000784 	.word	0x20000784

0800a650 <_lseek_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d07      	ldr	r5, [pc, #28]	; (800a670 <_lseek_r+0x20>)
 800a654:	4604      	mov	r4, r0
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	602a      	str	r2, [r5, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f7f9 f97c 	bl	800395c <_lseek>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_lseek_r+0x1e>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_lseek_r+0x1e>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20000784 	.word	0x20000784

0800a674 <_read_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	; (800a694 <_read_r+0x20>)
 800a678:	4604      	mov	r4, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	602a      	str	r2, [r5, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7f9 f942 	bl	800390c <_read>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_read_r+0x1e>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_read_r+0x1e>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20000784 	.word	0x20000784

0800a698 <cosf>:
 800a698:	ee10 3a10 	vmov	r3, s0
 800a69c:	b507      	push	{r0, r1, r2, lr}
 800a69e:	4a1e      	ldr	r2, [pc, #120]	; (800a718 <cosf+0x80>)
 800a6a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	dc06      	bgt.n	800a6b6 <cosf+0x1e>
 800a6a8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a71c <cosf+0x84>
 800a6ac:	b003      	add	sp, #12
 800a6ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b2:	f000 ba7b 	b.w	800abac <__kernel_cosf>
 800a6b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6ba:	db04      	blt.n	800a6c6 <cosf+0x2e>
 800a6bc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a6c0:	b003      	add	sp, #12
 800a6c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6c6:	4668      	mov	r0, sp
 800a6c8:	f000 f930 	bl	800a92c <__ieee754_rem_pio2f>
 800a6cc:	f000 0003 	and.w	r0, r0, #3
 800a6d0:	2801      	cmp	r0, #1
 800a6d2:	d009      	beq.n	800a6e8 <cosf+0x50>
 800a6d4:	2802      	cmp	r0, #2
 800a6d6:	d010      	beq.n	800a6fa <cosf+0x62>
 800a6d8:	b9b0      	cbnz	r0, 800a708 <cosf+0x70>
 800a6da:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6de:	ed9d 0a00 	vldr	s0, [sp]
 800a6e2:	f000 fa63 	bl	800abac <__kernel_cosf>
 800a6e6:	e7eb      	b.n	800a6c0 <cosf+0x28>
 800a6e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6ec:	ed9d 0a00 	vldr	s0, [sp]
 800a6f0:	f000 fd32 	bl	800b158 <__kernel_sinf>
 800a6f4:	eeb1 0a40 	vneg.f32	s0, s0
 800a6f8:	e7e2      	b.n	800a6c0 <cosf+0x28>
 800a6fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6fe:	ed9d 0a00 	vldr	s0, [sp]
 800a702:	f000 fa53 	bl	800abac <__kernel_cosf>
 800a706:	e7f5      	b.n	800a6f4 <cosf+0x5c>
 800a708:	eddd 0a01 	vldr	s1, [sp, #4]
 800a70c:	ed9d 0a00 	vldr	s0, [sp]
 800a710:	2001      	movs	r0, #1
 800a712:	f000 fd21 	bl	800b158 <__kernel_sinf>
 800a716:	e7d3      	b.n	800a6c0 <cosf+0x28>
 800a718:	3f490fd8 	.word	0x3f490fd8
 800a71c:	00000000 	.word	0x00000000

0800a720 <sinf>:
 800a720:	ee10 3a10 	vmov	r3, s0
 800a724:	b507      	push	{r0, r1, r2, lr}
 800a726:	4a1f      	ldr	r2, [pc, #124]	; (800a7a4 <sinf+0x84>)
 800a728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a72c:	4293      	cmp	r3, r2
 800a72e:	dc07      	bgt.n	800a740 <sinf+0x20>
 800a730:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a7a8 <sinf+0x88>
 800a734:	2000      	movs	r0, #0
 800a736:	b003      	add	sp, #12
 800a738:	f85d eb04 	ldr.w	lr, [sp], #4
 800a73c:	f000 bd0c 	b.w	800b158 <__kernel_sinf>
 800a740:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a744:	db04      	blt.n	800a750 <sinf+0x30>
 800a746:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a74a:	b003      	add	sp, #12
 800a74c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a750:	4668      	mov	r0, sp
 800a752:	f000 f8eb 	bl	800a92c <__ieee754_rem_pio2f>
 800a756:	f000 0003 	and.w	r0, r0, #3
 800a75a:	2801      	cmp	r0, #1
 800a75c:	d00a      	beq.n	800a774 <sinf+0x54>
 800a75e:	2802      	cmp	r0, #2
 800a760:	d00f      	beq.n	800a782 <sinf+0x62>
 800a762:	b9c0      	cbnz	r0, 800a796 <sinf+0x76>
 800a764:	eddd 0a01 	vldr	s1, [sp, #4]
 800a768:	ed9d 0a00 	vldr	s0, [sp]
 800a76c:	2001      	movs	r0, #1
 800a76e:	f000 fcf3 	bl	800b158 <__kernel_sinf>
 800a772:	e7ea      	b.n	800a74a <sinf+0x2a>
 800a774:	eddd 0a01 	vldr	s1, [sp, #4]
 800a778:	ed9d 0a00 	vldr	s0, [sp]
 800a77c:	f000 fa16 	bl	800abac <__kernel_cosf>
 800a780:	e7e3      	b.n	800a74a <sinf+0x2a>
 800a782:	eddd 0a01 	vldr	s1, [sp, #4]
 800a786:	ed9d 0a00 	vldr	s0, [sp]
 800a78a:	2001      	movs	r0, #1
 800a78c:	f000 fce4 	bl	800b158 <__kernel_sinf>
 800a790:	eeb1 0a40 	vneg.f32	s0, s0
 800a794:	e7d9      	b.n	800a74a <sinf+0x2a>
 800a796:	eddd 0a01 	vldr	s1, [sp, #4]
 800a79a:	ed9d 0a00 	vldr	s0, [sp]
 800a79e:	f000 fa05 	bl	800abac <__kernel_cosf>
 800a7a2:	e7f5      	b.n	800a790 <sinf+0x70>
 800a7a4:	3f490fd8 	.word	0x3f490fd8
 800a7a8:	00000000 	.word	0x00000000

0800a7ac <fmodf>:
 800a7ac:	b508      	push	{r3, lr}
 800a7ae:	ed2d 8b02 	vpush	{d8}
 800a7b2:	eef0 8a40 	vmov.f32	s17, s0
 800a7b6:	eeb0 8a60 	vmov.f32	s16, s1
 800a7ba:	f000 f835 	bl	800a828 <__ieee754_fmodf>
 800a7be:	eef4 8a48 	vcmp.f32	s17, s16
 800a7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c6:	d60c      	bvs.n	800a7e2 <fmodf+0x36>
 800a7c8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a7e8 <fmodf+0x3c>
 800a7cc:	eeb4 8a68 	vcmp.f32	s16, s17
 800a7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d4:	d105      	bne.n	800a7e2 <fmodf+0x36>
 800a7d6:	f7fd f84b 	bl	8007870 <__errno>
 800a7da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a7de:	2321      	movs	r3, #33	; 0x21
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	ecbd 8b02 	vpop	{d8}
 800a7e6:	bd08      	pop	{r3, pc}
 800a7e8:	00000000 	.word	0x00000000

0800a7ec <sqrtf>:
 800a7ec:	b508      	push	{r3, lr}
 800a7ee:	ed2d 8b02 	vpush	{d8}
 800a7f2:	eeb0 8a40 	vmov.f32	s16, s0
 800a7f6:	f000 f9d5 	bl	800aba4 <__ieee754_sqrtf>
 800a7fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800a7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a802:	d60c      	bvs.n	800a81e <sqrtf+0x32>
 800a804:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a824 <sqrtf+0x38>
 800a808:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a810:	d505      	bpl.n	800a81e <sqrtf+0x32>
 800a812:	f7fd f82d 	bl	8007870 <__errno>
 800a816:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a81a:	2321      	movs	r3, #33	; 0x21
 800a81c:	6003      	str	r3, [r0, #0]
 800a81e:	ecbd 8b02 	vpop	{d8}
 800a822:	bd08      	pop	{r3, pc}
 800a824:	00000000 	.word	0x00000000

0800a828 <__ieee754_fmodf>:
 800a828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a82a:	ee10 5a90 	vmov	r5, s1
 800a82e:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a832:	d009      	beq.n	800a848 <__ieee754_fmodf+0x20>
 800a834:	ee10 2a10 	vmov	r2, s0
 800a838:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a83c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a840:	da02      	bge.n	800a848 <__ieee754_fmodf+0x20>
 800a842:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a846:	dd04      	ble.n	800a852 <__ieee754_fmodf+0x2a>
 800a848:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a84c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a852:	42a3      	cmp	r3, r4
 800a854:	dbfc      	blt.n	800a850 <__ieee754_fmodf+0x28>
 800a856:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a85a:	d105      	bne.n	800a868 <__ieee754_fmodf+0x40>
 800a85c:	4b32      	ldr	r3, [pc, #200]	; (800a928 <__ieee754_fmodf+0x100>)
 800a85e:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a862:	ed93 0a00 	vldr	s0, [r3]
 800a866:	e7f3      	b.n	800a850 <__ieee754_fmodf+0x28>
 800a868:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a86c:	d13f      	bne.n	800a8ee <__ieee754_fmodf+0xc6>
 800a86e:	0219      	lsls	r1, r3, #8
 800a870:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a874:	2900      	cmp	r1, #0
 800a876:	dc37      	bgt.n	800a8e8 <__ieee754_fmodf+0xc0>
 800a878:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a87c:	d13d      	bne.n	800a8fa <__ieee754_fmodf+0xd2>
 800a87e:	0227      	lsls	r7, r4, #8
 800a880:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a884:	2f00      	cmp	r7, #0
 800a886:	da35      	bge.n	800a8f4 <__ieee754_fmodf+0xcc>
 800a888:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a88c:	bfbb      	ittet	lt
 800a88e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a892:	1a12      	sublt	r2, r2, r0
 800a894:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a898:	4093      	lsllt	r3, r2
 800a89a:	bfa8      	it	ge
 800a89c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a8a0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a8a4:	bfb5      	itete	lt
 800a8a6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a8aa:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a8ae:	1a52      	sublt	r2, r2, r1
 800a8b0:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a8b4:	bfb8      	it	lt
 800a8b6:	4094      	lsllt	r4, r2
 800a8b8:	1a40      	subs	r0, r0, r1
 800a8ba:	1b1a      	subs	r2, r3, r4
 800a8bc:	bb00      	cbnz	r0, 800a900 <__ieee754_fmodf+0xd8>
 800a8be:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a8c2:	bf38      	it	cc
 800a8c4:	4613      	movcc	r3, r2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0c8      	beq.n	800a85c <__ieee754_fmodf+0x34>
 800a8ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8ce:	db1f      	blt.n	800a910 <__ieee754_fmodf+0xe8>
 800a8d0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a8d4:	db1f      	blt.n	800a916 <__ieee754_fmodf+0xee>
 800a8d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a8da:	317f      	adds	r1, #127	; 0x7f
 800a8dc:	4333      	orrs	r3, r6
 800a8de:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a8e2:	ee00 3a10 	vmov	s0, r3
 800a8e6:	e7b3      	b.n	800a850 <__ieee754_fmodf+0x28>
 800a8e8:	3801      	subs	r0, #1
 800a8ea:	0049      	lsls	r1, r1, #1
 800a8ec:	e7c2      	b.n	800a874 <__ieee754_fmodf+0x4c>
 800a8ee:	15d8      	asrs	r0, r3, #23
 800a8f0:	387f      	subs	r0, #127	; 0x7f
 800a8f2:	e7c1      	b.n	800a878 <__ieee754_fmodf+0x50>
 800a8f4:	3901      	subs	r1, #1
 800a8f6:	007f      	lsls	r7, r7, #1
 800a8f8:	e7c4      	b.n	800a884 <__ieee754_fmodf+0x5c>
 800a8fa:	15e1      	asrs	r1, r4, #23
 800a8fc:	397f      	subs	r1, #127	; 0x7f
 800a8fe:	e7c3      	b.n	800a888 <__ieee754_fmodf+0x60>
 800a900:	2a00      	cmp	r2, #0
 800a902:	da02      	bge.n	800a90a <__ieee754_fmodf+0xe2>
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	3801      	subs	r0, #1
 800a908:	e7d7      	b.n	800a8ba <__ieee754_fmodf+0x92>
 800a90a:	d0a7      	beq.n	800a85c <__ieee754_fmodf+0x34>
 800a90c:	0053      	lsls	r3, r2, #1
 800a90e:	e7fa      	b.n	800a906 <__ieee754_fmodf+0xde>
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	3901      	subs	r1, #1
 800a914:	e7d9      	b.n	800a8ca <__ieee754_fmodf+0xa2>
 800a916:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a91a:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a91e:	3182      	adds	r1, #130	; 0x82
 800a920:	410b      	asrs	r3, r1
 800a922:	4333      	orrs	r3, r6
 800a924:	e7dd      	b.n	800a8e2 <__ieee754_fmodf+0xba>
 800a926:	bf00      	nop
 800a928:	0800b8a4 	.word	0x0800b8a4

0800a92c <__ieee754_rem_pio2f>:
 800a92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a92e:	ee10 6a10 	vmov	r6, s0
 800a932:	4b8e      	ldr	r3, [pc, #568]	; (800ab6c <__ieee754_rem_pio2f+0x240>)
 800a934:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a938:	429d      	cmp	r5, r3
 800a93a:	b087      	sub	sp, #28
 800a93c:	eef0 7a40 	vmov.f32	s15, s0
 800a940:	4604      	mov	r4, r0
 800a942:	dc05      	bgt.n	800a950 <__ieee754_rem_pio2f+0x24>
 800a944:	2300      	movs	r3, #0
 800a946:	ed80 0a00 	vstr	s0, [r0]
 800a94a:	6043      	str	r3, [r0, #4]
 800a94c:	2000      	movs	r0, #0
 800a94e:	e01a      	b.n	800a986 <__ieee754_rem_pio2f+0x5a>
 800a950:	4b87      	ldr	r3, [pc, #540]	; (800ab70 <__ieee754_rem_pio2f+0x244>)
 800a952:	429d      	cmp	r5, r3
 800a954:	dc46      	bgt.n	800a9e4 <__ieee754_rem_pio2f+0xb8>
 800a956:	2e00      	cmp	r6, #0
 800a958:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ab74 <__ieee754_rem_pio2f+0x248>
 800a95c:	4b86      	ldr	r3, [pc, #536]	; (800ab78 <__ieee754_rem_pio2f+0x24c>)
 800a95e:	f025 050f 	bic.w	r5, r5, #15
 800a962:	dd1f      	ble.n	800a9a4 <__ieee754_rem_pio2f+0x78>
 800a964:	429d      	cmp	r5, r3
 800a966:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a96a:	d00e      	beq.n	800a98a <__ieee754_rem_pio2f+0x5e>
 800a96c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ab7c <__ieee754_rem_pio2f+0x250>
 800a970:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a974:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a978:	ed80 0a00 	vstr	s0, [r0]
 800a97c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a980:	2001      	movs	r0, #1
 800a982:	edc4 7a01 	vstr	s15, [r4, #4]
 800a986:	b007      	add	sp, #28
 800a988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ab80 <__ieee754_rem_pio2f+0x254>
 800a98e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ab84 <__ieee754_rem_pio2f+0x258>
 800a992:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a996:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a99a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a99e:	edc0 6a00 	vstr	s13, [r0]
 800a9a2:	e7eb      	b.n	800a97c <__ieee754_rem_pio2f+0x50>
 800a9a4:	429d      	cmp	r5, r3
 800a9a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9aa:	d00e      	beq.n	800a9ca <__ieee754_rem_pio2f+0x9e>
 800a9ac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ab7c <__ieee754_rem_pio2f+0x250>
 800a9b0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a9b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a9b8:	ed80 0a00 	vstr	s0, [r0]
 800a9bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	edc4 7a01 	vstr	s15, [r4, #4]
 800a9c8:	e7dd      	b.n	800a986 <__ieee754_rem_pio2f+0x5a>
 800a9ca:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ab80 <__ieee754_rem_pio2f+0x254>
 800a9ce:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ab84 <__ieee754_rem_pio2f+0x258>
 800a9d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a9da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a9de:	edc0 6a00 	vstr	s13, [r0]
 800a9e2:	e7eb      	b.n	800a9bc <__ieee754_rem_pio2f+0x90>
 800a9e4:	4b68      	ldr	r3, [pc, #416]	; (800ab88 <__ieee754_rem_pio2f+0x25c>)
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	dc72      	bgt.n	800aad0 <__ieee754_rem_pio2f+0x1a4>
 800a9ea:	f000 fbfd 	bl	800b1e8 <fabsf>
 800a9ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ab8c <__ieee754_rem_pio2f+0x260>
 800a9f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a9f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a9fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa02:	ee17 0a90 	vmov	r0, s15
 800aa06:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ab74 <__ieee754_rem_pio2f+0x248>
 800aa0a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800aa0e:	281f      	cmp	r0, #31
 800aa10:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ab7c <__ieee754_rem_pio2f+0x250>
 800aa14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa18:	eeb1 6a47 	vneg.f32	s12, s14
 800aa1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800aa20:	ee16 2a90 	vmov	r2, s13
 800aa24:	dc1c      	bgt.n	800aa60 <__ieee754_rem_pio2f+0x134>
 800aa26:	495a      	ldr	r1, [pc, #360]	; (800ab90 <__ieee754_rem_pio2f+0x264>)
 800aa28:	1e47      	subs	r7, r0, #1
 800aa2a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800aa2e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800aa32:	428b      	cmp	r3, r1
 800aa34:	d014      	beq.n	800aa60 <__ieee754_rem_pio2f+0x134>
 800aa36:	6022      	str	r2, [r4, #0]
 800aa38:	ed94 7a00 	vldr	s14, [r4]
 800aa3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aa40:	2e00      	cmp	r6, #0
 800aa42:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa46:	ed84 0a01 	vstr	s0, [r4, #4]
 800aa4a:	da9c      	bge.n	800a986 <__ieee754_rem_pio2f+0x5a>
 800aa4c:	eeb1 7a47 	vneg.f32	s14, s14
 800aa50:	eeb1 0a40 	vneg.f32	s0, s0
 800aa54:	ed84 7a00 	vstr	s14, [r4]
 800aa58:	ed84 0a01 	vstr	s0, [r4, #4]
 800aa5c:	4240      	negs	r0, r0
 800aa5e:	e792      	b.n	800a986 <__ieee754_rem_pio2f+0x5a>
 800aa60:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800aa64:	15eb      	asrs	r3, r5, #23
 800aa66:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800aa6a:	2d08      	cmp	r5, #8
 800aa6c:	dde3      	ble.n	800aa36 <__ieee754_rem_pio2f+0x10a>
 800aa6e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ab80 <__ieee754_rem_pio2f+0x254>
 800aa72:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ab84 <__ieee754_rem_pio2f+0x258>
 800aa76:	eef0 6a40 	vmov.f32	s13, s0
 800aa7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa7e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800aa82:	eea6 0a27 	vfma.f32	s0, s12, s15
 800aa86:	eef0 7a40 	vmov.f32	s15, s0
 800aa8a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800aa8e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800aa92:	ee15 2a90 	vmov	r2, s11
 800aa96:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800aa9a:	1a5b      	subs	r3, r3, r1
 800aa9c:	2b19      	cmp	r3, #25
 800aa9e:	dc04      	bgt.n	800aaaa <__ieee754_rem_pio2f+0x17e>
 800aaa0:	edc4 5a00 	vstr	s11, [r4]
 800aaa4:	eeb0 0a66 	vmov.f32	s0, s13
 800aaa8:	e7c6      	b.n	800aa38 <__ieee754_rem_pio2f+0x10c>
 800aaaa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ab94 <__ieee754_rem_pio2f+0x268>
 800aaae:	eeb0 0a66 	vmov.f32	s0, s13
 800aab2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800aab6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800aaba:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ab98 <__ieee754_rem_pio2f+0x26c>
 800aabe:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aac2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800aac6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aaca:	ed84 7a00 	vstr	s14, [r4]
 800aace:	e7b3      	b.n	800aa38 <__ieee754_rem_pio2f+0x10c>
 800aad0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800aad4:	db06      	blt.n	800aae4 <__ieee754_rem_pio2f+0x1b8>
 800aad6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aada:	edc0 7a01 	vstr	s15, [r0, #4]
 800aade:	edc0 7a00 	vstr	s15, [r0]
 800aae2:	e733      	b.n	800a94c <__ieee754_rem_pio2f+0x20>
 800aae4:	15ea      	asrs	r2, r5, #23
 800aae6:	3a86      	subs	r2, #134	; 0x86
 800aae8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aaf4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ab9c <__ieee754_rem_pio2f+0x270>
 800aaf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aafc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab00:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ab04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ab08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ab0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ab10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab14:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ab18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ab1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab24:	edcd 7a05 	vstr	s15, [sp, #20]
 800ab28:	d11e      	bne.n	800ab68 <__ieee754_rem_pio2f+0x23c>
 800ab2a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ab2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab32:	bf14      	ite	ne
 800ab34:	2302      	movne	r3, #2
 800ab36:	2301      	moveq	r3, #1
 800ab38:	4919      	ldr	r1, [pc, #100]	; (800aba0 <__ieee754_rem_pio2f+0x274>)
 800ab3a:	9101      	str	r1, [sp, #4]
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	9100      	str	r1, [sp, #0]
 800ab40:	a803      	add	r0, sp, #12
 800ab42:	4621      	mov	r1, r4
 800ab44:	f000 f892 	bl	800ac6c <__kernel_rem_pio2f>
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	f6bf af1c 	bge.w	800a986 <__ieee754_rem_pio2f+0x5a>
 800ab4e:	edd4 7a00 	vldr	s15, [r4]
 800ab52:	eef1 7a67 	vneg.f32	s15, s15
 800ab56:	edc4 7a00 	vstr	s15, [r4]
 800ab5a:	edd4 7a01 	vldr	s15, [r4, #4]
 800ab5e:	eef1 7a67 	vneg.f32	s15, s15
 800ab62:	edc4 7a01 	vstr	s15, [r4, #4]
 800ab66:	e779      	b.n	800aa5c <__ieee754_rem_pio2f+0x130>
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e7e5      	b.n	800ab38 <__ieee754_rem_pio2f+0x20c>
 800ab6c:	3f490fd8 	.word	0x3f490fd8
 800ab70:	4016cbe3 	.word	0x4016cbe3
 800ab74:	3fc90f80 	.word	0x3fc90f80
 800ab78:	3fc90fd0 	.word	0x3fc90fd0
 800ab7c:	37354443 	.word	0x37354443
 800ab80:	37354400 	.word	0x37354400
 800ab84:	2e85a308 	.word	0x2e85a308
 800ab88:	43490f80 	.word	0x43490f80
 800ab8c:	3f22f984 	.word	0x3f22f984
 800ab90:	0800b8ac 	.word	0x0800b8ac
 800ab94:	2e85a300 	.word	0x2e85a300
 800ab98:	248d3132 	.word	0x248d3132
 800ab9c:	43800000 	.word	0x43800000
 800aba0:	0800b92c 	.word	0x0800b92c

0800aba4 <__ieee754_sqrtf>:
 800aba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aba8:	4770      	bx	lr
	...

0800abac <__kernel_cosf>:
 800abac:	ee10 3a10 	vmov	r3, s0
 800abb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abb4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800abb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800abbc:	da05      	bge.n	800abca <__kernel_cosf+0x1e>
 800abbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800abc2:	ee17 2a90 	vmov	r2, s15
 800abc6:	2a00      	cmp	r2, #0
 800abc8:	d03d      	beq.n	800ac46 <__kernel_cosf+0x9a>
 800abca:	ee60 5a00 	vmul.f32	s11, s0, s0
 800abce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ac4c <__kernel_cosf+0xa0>
 800abd2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ac50 <__kernel_cosf+0xa4>
 800abd6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800ac54 <__kernel_cosf+0xa8>
 800abda:	4a1f      	ldr	r2, [pc, #124]	; (800ac58 <__kernel_cosf+0xac>)
 800abdc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800abe0:	4293      	cmp	r3, r2
 800abe2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ac5c <__kernel_cosf+0xb0>
 800abe6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800abea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800ac60 <__kernel_cosf+0xb4>
 800abee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800abf2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800ac64 <__kernel_cosf+0xb8>
 800abf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800abfa:	eeb0 7a66 	vmov.f32	s14, s13
 800abfe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ac02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ac06:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800ac0a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800ac0e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800ac12:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ac16:	dc04      	bgt.n	800ac22 <__kernel_cosf+0x76>
 800ac18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ac1c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800ac20:	4770      	bx	lr
 800ac22:	4a11      	ldr	r2, [pc, #68]	; (800ac68 <__kernel_cosf+0xbc>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	bfda      	itte	le
 800ac28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800ac2c:	ee06 3a90 	vmovle	s13, r3
 800ac30:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800ac34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac38:	ee36 0a66 	vsub.f32	s0, s12, s13
 800ac3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac40:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac44:	4770      	bx	lr
 800ac46:	eeb0 0a46 	vmov.f32	s0, s12
 800ac4a:	4770      	bx	lr
 800ac4c:	ad47d74e 	.word	0xad47d74e
 800ac50:	310f74f6 	.word	0x310f74f6
 800ac54:	3d2aaaab 	.word	0x3d2aaaab
 800ac58:	3e999999 	.word	0x3e999999
 800ac5c:	b493f27c 	.word	0xb493f27c
 800ac60:	37d00d01 	.word	0x37d00d01
 800ac64:	bab60b61 	.word	0xbab60b61
 800ac68:	3f480000 	.word	0x3f480000

0800ac6c <__kernel_rem_pio2f>:
 800ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac70:	ed2d 8b04 	vpush	{d8-d9}
 800ac74:	b0d9      	sub	sp, #356	; 0x164
 800ac76:	4688      	mov	r8, r1
 800ac78:	9002      	str	r0, [sp, #8]
 800ac7a:	49bb      	ldr	r1, [pc, #748]	; (800af68 <__kernel_rem_pio2f+0x2fc>)
 800ac7c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ac84:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800ac88:	1e59      	subs	r1, r3, #1
 800ac8a:	1d13      	adds	r3, r2, #4
 800ac8c:	db27      	blt.n	800acde <__kernel_rem_pio2f+0x72>
 800ac8e:	f1b2 0b03 	subs.w	fp, r2, #3
 800ac92:	bf48      	it	mi
 800ac94:	f102 0b04 	addmi.w	fp, r2, #4
 800ac98:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800ac9c:	1c45      	adds	r5, r0, #1
 800ac9e:	00ec      	lsls	r4, r5, #3
 800aca0:	1a47      	subs	r7, r0, r1
 800aca2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800aca6:	9403      	str	r4, [sp, #12]
 800aca8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800acac:	eb0a 0c01 	add.w	ip, sl, r1
 800acb0:	ae1c      	add	r6, sp, #112	; 0x70
 800acb2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800acb6:	2400      	movs	r4, #0
 800acb8:	4564      	cmp	r4, ip
 800acba:	dd12      	ble.n	800ace2 <__kernel_rem_pio2f+0x76>
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	ac1c      	add	r4, sp, #112	; 0x70
 800acc0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800acc4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800acc8:	f04f 0c00 	mov.w	ip, #0
 800accc:	45d4      	cmp	ip, sl
 800acce:	dc27      	bgt.n	800ad20 <__kernel_rem_pio2f+0xb4>
 800acd0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800acd4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800acd8:	4627      	mov	r7, r4
 800acda:	2600      	movs	r6, #0
 800acdc:	e016      	b.n	800ad0c <__kernel_rem_pio2f+0xa0>
 800acde:	2000      	movs	r0, #0
 800ace0:	e7dc      	b.n	800ac9c <__kernel_rem_pio2f+0x30>
 800ace2:	42e7      	cmn	r7, r4
 800ace4:	bf5d      	ittte	pl
 800ace6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800acea:	ee07 3a90 	vmovpl	s15, r3
 800acee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800acf2:	eef0 7a47 	vmovmi.f32	s15, s14
 800acf6:	ece6 7a01 	vstmia	r6!, {s15}
 800acfa:	3401      	adds	r4, #1
 800acfc:	e7dc      	b.n	800acb8 <__kernel_rem_pio2f+0x4c>
 800acfe:	ecf9 6a01 	vldmia	r9!, {s13}
 800ad02:	ed97 7a00 	vldr	s14, [r7]
 800ad06:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ad0a:	3601      	adds	r6, #1
 800ad0c:	428e      	cmp	r6, r1
 800ad0e:	f1a7 0704 	sub.w	r7, r7, #4
 800ad12:	ddf4      	ble.n	800acfe <__kernel_rem_pio2f+0x92>
 800ad14:	eceb 7a01 	vstmia	fp!, {s15}
 800ad18:	f10c 0c01 	add.w	ip, ip, #1
 800ad1c:	3404      	adds	r4, #4
 800ad1e:	e7d5      	b.n	800accc <__kernel_rem_pio2f+0x60>
 800ad20:	ab08      	add	r3, sp, #32
 800ad22:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ad26:	eddf 8a93 	vldr	s17, [pc, #588]	; 800af74 <__kernel_rem_pio2f+0x308>
 800ad2a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800af70 <__kernel_rem_pio2f+0x304>
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800ad34:	4656      	mov	r6, sl
 800ad36:	00b3      	lsls	r3, r6, #2
 800ad38:	9305      	str	r3, [sp, #20]
 800ad3a:	ab58      	add	r3, sp, #352	; 0x160
 800ad3c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ad40:	ac08      	add	r4, sp, #32
 800ad42:	ab44      	add	r3, sp, #272	; 0x110
 800ad44:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ad48:	46a4      	mov	ip, r4
 800ad4a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ad4e:	4637      	mov	r7, r6
 800ad50:	2f00      	cmp	r7, #0
 800ad52:	f1a0 0004 	sub.w	r0, r0, #4
 800ad56:	dc4f      	bgt.n	800adf8 <__kernel_rem_pio2f+0x18c>
 800ad58:	4628      	mov	r0, r5
 800ad5a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ad5e:	f000 fa8d 	bl	800b27c <scalbnf>
 800ad62:	eeb0 8a40 	vmov.f32	s16, s0
 800ad66:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ad6a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ad6e:	f000 fa43 	bl	800b1f8 <floorf>
 800ad72:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ad76:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ad80:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ad84:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ad88:	ee17 9a90 	vmov	r9, s15
 800ad8c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ad90:	dd44      	ble.n	800ae1c <__kernel_rem_pio2f+0x1b0>
 800ad92:	f106 3cff 	add.w	ip, r6, #4294967295
 800ad96:	ab08      	add	r3, sp, #32
 800ad98:	f1c5 0e08 	rsb	lr, r5, #8
 800ad9c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ada0:	fa47 f00e 	asr.w	r0, r7, lr
 800ada4:	4481      	add	r9, r0
 800ada6:	fa00 f00e 	lsl.w	r0, r0, lr
 800adaa:	1a3f      	subs	r7, r7, r0
 800adac:	f1c5 0007 	rsb	r0, r5, #7
 800adb0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800adb4:	4107      	asrs	r7, r0
 800adb6:	2f00      	cmp	r7, #0
 800adb8:	dd3f      	ble.n	800ae3a <__kernel_rem_pio2f+0x1ce>
 800adba:	f04f 0e00 	mov.w	lr, #0
 800adbe:	f109 0901 	add.w	r9, r9, #1
 800adc2:	4673      	mov	r3, lr
 800adc4:	4576      	cmp	r6, lr
 800adc6:	dc6b      	bgt.n	800aea0 <__kernel_rem_pio2f+0x234>
 800adc8:	2d00      	cmp	r5, #0
 800adca:	dd04      	ble.n	800add6 <__kernel_rem_pio2f+0x16a>
 800adcc:	2d01      	cmp	r5, #1
 800adce:	d078      	beq.n	800aec2 <__kernel_rem_pio2f+0x256>
 800add0:	2d02      	cmp	r5, #2
 800add2:	f000 8081 	beq.w	800aed8 <__kernel_rem_pio2f+0x26c>
 800add6:	2f02      	cmp	r7, #2
 800add8:	d12f      	bne.n	800ae3a <__kernel_rem_pio2f+0x1ce>
 800adda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800adde:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ade2:	b353      	cbz	r3, 800ae3a <__kernel_rem_pio2f+0x1ce>
 800ade4:	4628      	mov	r0, r5
 800ade6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800adea:	f000 fa47 	bl	800b27c <scalbnf>
 800adee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800adf2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800adf6:	e020      	b.n	800ae3a <__kernel_rem_pio2f+0x1ce>
 800adf8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800adfc:	3f01      	subs	r7, #1
 800adfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae06:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ae0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae0e:	ecac 0a01 	vstmia	ip!, {s0}
 800ae12:	ed90 0a00 	vldr	s0, [r0]
 800ae16:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ae1a:	e799      	b.n	800ad50 <__kernel_rem_pio2f+0xe4>
 800ae1c:	d105      	bne.n	800ae2a <__kernel_rem_pio2f+0x1be>
 800ae1e:	1e70      	subs	r0, r6, #1
 800ae20:	ab08      	add	r3, sp, #32
 800ae22:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ae26:	11ff      	asrs	r7, r7, #7
 800ae28:	e7c5      	b.n	800adb6 <__kernel_rem_pio2f+0x14a>
 800ae2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ae2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	da31      	bge.n	800ae9c <__kernel_rem_pio2f+0x230>
 800ae38:	2700      	movs	r7, #0
 800ae3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae42:	f040 809b 	bne.w	800af7c <__kernel_rem_pio2f+0x310>
 800ae46:	1e74      	subs	r4, r6, #1
 800ae48:	46a4      	mov	ip, r4
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	45d4      	cmp	ip, sl
 800ae4e:	da4a      	bge.n	800aee6 <__kernel_rem_pio2f+0x27a>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d07a      	beq.n	800af4a <__kernel_rem_pio2f+0x2de>
 800ae54:	ab08      	add	r3, sp, #32
 800ae56:	3d08      	subs	r5, #8
 800ae58:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8081 	beq.w	800af64 <__kernel_rem_pio2f+0x2f8>
 800ae62:	4628      	mov	r0, r5
 800ae64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae68:	00a5      	lsls	r5, r4, #2
 800ae6a:	f000 fa07 	bl	800b27c <scalbnf>
 800ae6e:	aa44      	add	r2, sp, #272	; 0x110
 800ae70:	1d2b      	adds	r3, r5, #4
 800ae72:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800af74 <__kernel_rem_pio2f+0x308>
 800ae76:	18d1      	adds	r1, r2, r3
 800ae78:	4622      	mov	r2, r4
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	f280 80ae 	bge.w	800afdc <__kernel_rem_pio2f+0x370>
 800ae80:	4622      	mov	r2, r4
 800ae82:	2a00      	cmp	r2, #0
 800ae84:	f2c0 80cc 	blt.w	800b020 <__kernel_rem_pio2f+0x3b4>
 800ae88:	a944      	add	r1, sp, #272	; 0x110
 800ae8a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ae8e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800af6c <__kernel_rem_pio2f+0x300>
 800ae92:	eddf 7a39 	vldr	s15, [pc, #228]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800ae96:	2000      	movs	r0, #0
 800ae98:	1aa1      	subs	r1, r4, r2
 800ae9a:	e0b6      	b.n	800b00a <__kernel_rem_pio2f+0x39e>
 800ae9c:	2702      	movs	r7, #2
 800ae9e:	e78c      	b.n	800adba <__kernel_rem_pio2f+0x14e>
 800aea0:	6820      	ldr	r0, [r4, #0]
 800aea2:	b94b      	cbnz	r3, 800aeb8 <__kernel_rem_pio2f+0x24c>
 800aea4:	b118      	cbz	r0, 800aeae <__kernel_rem_pio2f+0x242>
 800aea6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800aeaa:	6020      	str	r0, [r4, #0]
 800aeac:	2001      	movs	r0, #1
 800aeae:	f10e 0e01 	add.w	lr, lr, #1
 800aeb2:	3404      	adds	r4, #4
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	e785      	b.n	800adc4 <__kernel_rem_pio2f+0x158>
 800aeb8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800aebc:	6020      	str	r0, [r4, #0]
 800aebe:	4618      	mov	r0, r3
 800aec0:	e7f5      	b.n	800aeae <__kernel_rem_pio2f+0x242>
 800aec2:	1e74      	subs	r4, r6, #1
 800aec4:	a808      	add	r0, sp, #32
 800aec6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800aeca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800aece:	f10d 0c20 	add.w	ip, sp, #32
 800aed2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800aed6:	e77e      	b.n	800add6 <__kernel_rem_pio2f+0x16a>
 800aed8:	1e74      	subs	r4, r6, #1
 800aeda:	a808      	add	r0, sp, #32
 800aedc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800aee0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800aee4:	e7f3      	b.n	800aece <__kernel_rem_pio2f+0x262>
 800aee6:	ab08      	add	r3, sp, #32
 800aee8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800aeec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aef0:	4318      	orrs	r0, r3
 800aef2:	e7ab      	b.n	800ae4c <__kernel_rem_pio2f+0x1e0>
 800aef4:	f10c 0c01 	add.w	ip, ip, #1
 800aef8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800aefc:	2c00      	cmp	r4, #0
 800aefe:	d0f9      	beq.n	800aef4 <__kernel_rem_pio2f+0x288>
 800af00:	9b05      	ldr	r3, [sp, #20]
 800af02:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800af06:	eb0d 0003 	add.w	r0, sp, r3
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	18f4      	adds	r4, r6, r3
 800af0e:	ab1c      	add	r3, sp, #112	; 0x70
 800af10:	1c77      	adds	r7, r6, #1
 800af12:	384c      	subs	r0, #76	; 0x4c
 800af14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af18:	4466      	add	r6, ip
 800af1a:	42be      	cmp	r6, r7
 800af1c:	f6ff af0b 	blt.w	800ad36 <__kernel_rem_pio2f+0xca>
 800af20:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800af24:	f8dd e008 	ldr.w	lr, [sp, #8]
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af30:	f04f 0c00 	mov.w	ip, #0
 800af34:	ece4 7a01 	vstmia	r4!, {s15}
 800af38:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800af3c:	46a1      	mov	r9, r4
 800af3e:	458c      	cmp	ip, r1
 800af40:	dd07      	ble.n	800af52 <__kernel_rem_pio2f+0x2e6>
 800af42:	ece0 7a01 	vstmia	r0!, {s15}
 800af46:	3701      	adds	r7, #1
 800af48:	e7e7      	b.n	800af1a <__kernel_rem_pio2f+0x2ae>
 800af4a:	9804      	ldr	r0, [sp, #16]
 800af4c:	f04f 0c01 	mov.w	ip, #1
 800af50:	e7d2      	b.n	800aef8 <__kernel_rem_pio2f+0x28c>
 800af52:	ecfe 6a01 	vldmia	lr!, {s13}
 800af56:	ed39 7a01 	vldmdb	r9!, {s14}
 800af5a:	f10c 0c01 	add.w	ip, ip, #1
 800af5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800af62:	e7ec      	b.n	800af3e <__kernel_rem_pio2f+0x2d2>
 800af64:	3c01      	subs	r4, #1
 800af66:	e775      	b.n	800ae54 <__kernel_rem_pio2f+0x1e8>
 800af68:	0800bc70 	.word	0x0800bc70
 800af6c:	0800bc44 	.word	0x0800bc44
 800af70:	43800000 	.word	0x43800000
 800af74:	3b800000 	.word	0x3b800000
 800af78:	00000000 	.word	0x00000000
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	eeb0 0a48 	vmov.f32	s0, s16
 800af82:	1a98      	subs	r0, r3, r2
 800af84:	f000 f97a 	bl	800b27c <scalbnf>
 800af88:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800af70 <__kernel_rem_pio2f+0x304>
 800af8c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800af90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af94:	db19      	blt.n	800afca <__kernel_rem_pio2f+0x35e>
 800af96:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800af74 <__kernel_rem_pio2f+0x308>
 800af9a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800af9e:	aa08      	add	r2, sp, #32
 800afa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afa4:	1c74      	adds	r4, r6, #1
 800afa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afaa:	3508      	adds	r5, #8
 800afac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800afb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800afb8:	ee10 3a10 	vmov	r3, s0
 800afbc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800afc0:	ee17 3a90 	vmov	r3, s15
 800afc4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800afc8:	e74b      	b.n	800ae62 <__kernel_rem_pio2f+0x1f6>
 800afca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800afce:	aa08      	add	r2, sp, #32
 800afd0:	ee10 3a10 	vmov	r3, s0
 800afd4:	4634      	mov	r4, r6
 800afd6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800afda:	e742      	b.n	800ae62 <__kernel_rem_pio2f+0x1f6>
 800afdc:	a808      	add	r0, sp, #32
 800afde:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800afe2:	9001      	str	r0, [sp, #4]
 800afe4:	ee07 0a90 	vmov	s15, r0
 800afe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afec:	3a01      	subs	r2, #1
 800afee:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aff2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aff6:	ed61 7a01 	vstmdb	r1!, {s15}
 800affa:	e73e      	b.n	800ae7a <__kernel_rem_pio2f+0x20e>
 800affc:	ecfc 6a01 	vldmia	ip!, {s13}
 800b000:	ecb6 7a01 	vldmia	r6!, {s14}
 800b004:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b008:	3001      	adds	r0, #1
 800b00a:	4550      	cmp	r0, sl
 800b00c:	dc01      	bgt.n	800b012 <__kernel_rem_pio2f+0x3a6>
 800b00e:	4288      	cmp	r0, r1
 800b010:	ddf4      	ble.n	800affc <__kernel_rem_pio2f+0x390>
 800b012:	a858      	add	r0, sp, #352	; 0x160
 800b014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b018:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b01c:	3a01      	subs	r2, #1
 800b01e:	e730      	b.n	800ae82 <__kernel_rem_pio2f+0x216>
 800b020:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b022:	2a02      	cmp	r2, #2
 800b024:	dc09      	bgt.n	800b03a <__kernel_rem_pio2f+0x3ce>
 800b026:	2a00      	cmp	r2, #0
 800b028:	dc2a      	bgt.n	800b080 <__kernel_rem_pio2f+0x414>
 800b02a:	d043      	beq.n	800b0b4 <__kernel_rem_pio2f+0x448>
 800b02c:	f009 0007 	and.w	r0, r9, #7
 800b030:	b059      	add	sp, #356	; 0x164
 800b032:	ecbd 8b04 	vpop	{d8-d9}
 800b036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d1f5      	bne.n	800b02c <__kernel_rem_pio2f+0x3c0>
 800b040:	ab30      	add	r3, sp, #192	; 0xc0
 800b042:	442b      	add	r3, r5
 800b044:	461a      	mov	r2, r3
 800b046:	4619      	mov	r1, r3
 800b048:	4620      	mov	r0, r4
 800b04a:	2800      	cmp	r0, #0
 800b04c:	f1a1 0104 	sub.w	r1, r1, #4
 800b050:	dc51      	bgt.n	800b0f6 <__kernel_rem_pio2f+0x48a>
 800b052:	4621      	mov	r1, r4
 800b054:	2901      	cmp	r1, #1
 800b056:	f1a2 0204 	sub.w	r2, r2, #4
 800b05a:	dc5c      	bgt.n	800b116 <__kernel_rem_pio2f+0x4aa>
 800b05c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800b060:	3304      	adds	r3, #4
 800b062:	2c01      	cmp	r4, #1
 800b064:	dc67      	bgt.n	800b136 <__kernel_rem_pio2f+0x4ca>
 800b066:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b06a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b06e:	2f00      	cmp	r7, #0
 800b070:	d167      	bne.n	800b142 <__kernel_rem_pio2f+0x4d6>
 800b072:	edc8 6a00 	vstr	s13, [r8]
 800b076:	ed88 7a01 	vstr	s14, [r8, #4]
 800b07a:	edc8 7a02 	vstr	s15, [r8, #8]
 800b07e:	e7d5      	b.n	800b02c <__kernel_rem_pio2f+0x3c0>
 800b080:	aa30      	add	r2, sp, #192	; 0xc0
 800b082:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800b086:	4413      	add	r3, r2
 800b088:	4622      	mov	r2, r4
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	da24      	bge.n	800b0d8 <__kernel_rem_pio2f+0x46c>
 800b08e:	b34f      	cbz	r7, 800b0e4 <__kernel_rem_pio2f+0x478>
 800b090:	eef1 7a47 	vneg.f32	s15, s14
 800b094:	edc8 7a00 	vstr	s15, [r8]
 800b098:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b09c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0a0:	aa31      	add	r2, sp, #196	; 0xc4
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	da20      	bge.n	800b0ea <__kernel_rem_pio2f+0x47e>
 800b0a8:	b10f      	cbz	r7, 800b0ae <__kernel_rem_pio2f+0x442>
 800b0aa:	eef1 7a67 	vneg.f32	s15, s15
 800b0ae:	edc8 7a01 	vstr	s15, [r8, #4]
 800b0b2:	e7bb      	b.n	800b02c <__kernel_rem_pio2f+0x3c0>
 800b0b4:	aa30      	add	r2, sp, #192	; 0xc0
 800b0b6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800af78 <__kernel_rem_pio2f+0x30c>
 800b0ba:	4413      	add	r3, r2
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	da05      	bge.n	800b0cc <__kernel_rem_pio2f+0x460>
 800b0c0:	b10f      	cbz	r7, 800b0c6 <__kernel_rem_pio2f+0x45a>
 800b0c2:	eef1 7a67 	vneg.f32	s15, s15
 800b0c6:	edc8 7a00 	vstr	s15, [r8]
 800b0ca:	e7af      	b.n	800b02c <__kernel_rem_pio2f+0x3c0>
 800b0cc:	ed33 7a01 	vldmdb	r3!, {s14}
 800b0d0:	3c01      	subs	r4, #1
 800b0d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0d6:	e7f1      	b.n	800b0bc <__kernel_rem_pio2f+0x450>
 800b0d8:	ed73 7a01 	vldmdb	r3!, {s15}
 800b0dc:	3a01      	subs	r2, #1
 800b0de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0e2:	e7d2      	b.n	800b08a <__kernel_rem_pio2f+0x41e>
 800b0e4:	eef0 7a47 	vmov.f32	s15, s14
 800b0e8:	e7d4      	b.n	800b094 <__kernel_rem_pio2f+0x428>
 800b0ea:	ecb2 7a01 	vldmia	r2!, {s14}
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0f4:	e7d6      	b.n	800b0a4 <__kernel_rem_pio2f+0x438>
 800b0f6:	edd1 7a00 	vldr	s15, [r1]
 800b0fa:	edd1 6a01 	vldr	s13, [r1, #4]
 800b0fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b102:	3801      	subs	r0, #1
 800b104:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b108:	ed81 7a00 	vstr	s14, [r1]
 800b10c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b110:	edc1 7a01 	vstr	s15, [r1, #4]
 800b114:	e799      	b.n	800b04a <__kernel_rem_pio2f+0x3de>
 800b116:	edd2 7a00 	vldr	s15, [r2]
 800b11a:	edd2 6a01 	vldr	s13, [r2, #4]
 800b11e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b122:	3901      	subs	r1, #1
 800b124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b128:	ed82 7a00 	vstr	s14, [r2]
 800b12c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b130:	edc2 7a01 	vstr	s15, [r2, #4]
 800b134:	e78e      	b.n	800b054 <__kernel_rem_pio2f+0x3e8>
 800b136:	ed33 7a01 	vldmdb	r3!, {s14}
 800b13a:	3c01      	subs	r4, #1
 800b13c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b140:	e78f      	b.n	800b062 <__kernel_rem_pio2f+0x3f6>
 800b142:	eef1 6a66 	vneg.f32	s13, s13
 800b146:	eeb1 7a47 	vneg.f32	s14, s14
 800b14a:	edc8 6a00 	vstr	s13, [r8]
 800b14e:	ed88 7a01 	vstr	s14, [r8, #4]
 800b152:	eef1 7a67 	vneg.f32	s15, s15
 800b156:	e790      	b.n	800b07a <__kernel_rem_pio2f+0x40e>

0800b158 <__kernel_sinf>:
 800b158:	ee10 3a10 	vmov	r3, s0
 800b15c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b160:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b164:	da04      	bge.n	800b170 <__kernel_sinf+0x18>
 800b166:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b16a:	ee17 3a90 	vmov	r3, s15
 800b16e:	b35b      	cbz	r3, 800b1c8 <__kernel_sinf+0x70>
 800b170:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b174:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b1cc <__kernel_sinf+0x74>
 800b178:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b1d0 <__kernel_sinf+0x78>
 800b17c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b180:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b1d4 <__kernel_sinf+0x7c>
 800b184:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b188:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b1d8 <__kernel_sinf+0x80>
 800b18c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b190:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b1dc <__kernel_sinf+0x84>
 800b194:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b198:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b19c:	b930      	cbnz	r0, 800b1ac <__kernel_sinf+0x54>
 800b19e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b1e0 <__kernel_sinf+0x88>
 800b1a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b1a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b1aa:	4770      	bx	lr
 800b1ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b1b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b1b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b1b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b1bc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b1e4 <__kernel_sinf+0x8c>
 800b1c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b1c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	2f2ec9d3 	.word	0x2f2ec9d3
 800b1d0:	b2d72f34 	.word	0xb2d72f34
 800b1d4:	3638ef1b 	.word	0x3638ef1b
 800b1d8:	b9500d01 	.word	0xb9500d01
 800b1dc:	3c088889 	.word	0x3c088889
 800b1e0:	be2aaaab 	.word	0xbe2aaaab
 800b1e4:	3e2aaaab 	.word	0x3e2aaaab

0800b1e8 <fabsf>:
 800b1e8:	ee10 3a10 	vmov	r3, s0
 800b1ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1f0:	ee00 3a10 	vmov	s0, r3
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <floorf>:
 800b1f8:	ee10 3a10 	vmov	r3, s0
 800b1fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b200:	3a7f      	subs	r2, #127	; 0x7f
 800b202:	2a16      	cmp	r2, #22
 800b204:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b208:	dc2a      	bgt.n	800b260 <floorf+0x68>
 800b20a:	2a00      	cmp	r2, #0
 800b20c:	da11      	bge.n	800b232 <floorf+0x3a>
 800b20e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b270 <floorf+0x78>
 800b212:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b216:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21e:	dd05      	ble.n	800b22c <floorf+0x34>
 800b220:	2b00      	cmp	r3, #0
 800b222:	da23      	bge.n	800b26c <floorf+0x74>
 800b224:	4a13      	ldr	r2, [pc, #76]	; (800b274 <floorf+0x7c>)
 800b226:	2900      	cmp	r1, #0
 800b228:	bf18      	it	ne
 800b22a:	4613      	movne	r3, r2
 800b22c:	ee00 3a10 	vmov	s0, r3
 800b230:	4770      	bx	lr
 800b232:	4911      	ldr	r1, [pc, #68]	; (800b278 <floorf+0x80>)
 800b234:	4111      	asrs	r1, r2
 800b236:	420b      	tst	r3, r1
 800b238:	d0fa      	beq.n	800b230 <floorf+0x38>
 800b23a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b270 <floorf+0x78>
 800b23e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b242:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24a:	ddef      	ble.n	800b22c <floorf+0x34>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfbe      	ittt	lt
 800b250:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b254:	fa40 f202 	asrlt.w	r2, r0, r2
 800b258:	189b      	addlt	r3, r3, r2
 800b25a:	ea23 0301 	bic.w	r3, r3, r1
 800b25e:	e7e5      	b.n	800b22c <floorf+0x34>
 800b260:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b264:	d3e4      	bcc.n	800b230 <floorf+0x38>
 800b266:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b26a:	4770      	bx	lr
 800b26c:	2300      	movs	r3, #0
 800b26e:	e7dd      	b.n	800b22c <floorf+0x34>
 800b270:	7149f2ca 	.word	0x7149f2ca
 800b274:	bf800000 	.word	0xbf800000
 800b278:	007fffff 	.word	0x007fffff

0800b27c <scalbnf>:
 800b27c:	ee10 3a10 	vmov	r3, s0
 800b280:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b284:	d025      	beq.n	800b2d2 <scalbnf+0x56>
 800b286:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b28a:	d302      	bcc.n	800b292 <scalbnf+0x16>
 800b28c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b290:	4770      	bx	lr
 800b292:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b296:	d122      	bne.n	800b2de <scalbnf+0x62>
 800b298:	4b2a      	ldr	r3, [pc, #168]	; (800b344 <scalbnf+0xc8>)
 800b29a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b348 <scalbnf+0xcc>
 800b29e:	4298      	cmp	r0, r3
 800b2a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b2a4:	db16      	blt.n	800b2d4 <scalbnf+0x58>
 800b2a6:	ee10 3a10 	vmov	r3, s0
 800b2aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b2ae:	3a19      	subs	r2, #25
 800b2b0:	4402      	add	r2, r0
 800b2b2:	2afe      	cmp	r2, #254	; 0xfe
 800b2b4:	dd15      	ble.n	800b2e2 <scalbnf+0x66>
 800b2b6:	ee10 3a10 	vmov	r3, s0
 800b2ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b34c <scalbnf+0xd0>
 800b2be:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b350 <scalbnf+0xd4>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	eeb0 7a67 	vmov.f32	s14, s15
 800b2c8:	bfb8      	it	lt
 800b2ca:	eef0 7a66 	vmovlt.f32	s15, s13
 800b2ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b2d2:	4770      	bx	lr
 800b2d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b354 <scalbnf+0xd8>
 800b2d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b2dc:	4770      	bx	lr
 800b2de:	0dd2      	lsrs	r2, r2, #23
 800b2e0:	e7e6      	b.n	800b2b0 <scalbnf+0x34>
 800b2e2:	2a00      	cmp	r2, #0
 800b2e4:	dd06      	ble.n	800b2f4 <scalbnf+0x78>
 800b2e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b2ee:	ee00 3a10 	vmov	s0, r3
 800b2f2:	4770      	bx	lr
 800b2f4:	f112 0f16 	cmn.w	r2, #22
 800b2f8:	da1a      	bge.n	800b330 <scalbnf+0xb4>
 800b2fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2fe:	4298      	cmp	r0, r3
 800b300:	ee10 3a10 	vmov	r3, s0
 800b304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b308:	dd0a      	ble.n	800b320 <scalbnf+0xa4>
 800b30a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b34c <scalbnf+0xd0>
 800b30e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b350 <scalbnf+0xd4>
 800b312:	eef0 7a40 	vmov.f32	s15, s0
 800b316:	2b00      	cmp	r3, #0
 800b318:	bf18      	it	ne
 800b31a:	eeb0 0a47 	vmovne.f32	s0, s14
 800b31e:	e7db      	b.n	800b2d8 <scalbnf+0x5c>
 800b320:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b354 <scalbnf+0xd8>
 800b324:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b358 <scalbnf+0xdc>
 800b328:	eef0 7a40 	vmov.f32	s15, s0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	e7f3      	b.n	800b318 <scalbnf+0x9c>
 800b330:	3219      	adds	r2, #25
 800b332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b336:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b33a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b35c <scalbnf+0xe0>
 800b33e:	ee07 3a10 	vmov	s14, r3
 800b342:	e7c4      	b.n	800b2ce <scalbnf+0x52>
 800b344:	ffff3cb0 	.word	0xffff3cb0
 800b348:	4c000000 	.word	0x4c000000
 800b34c:	7149f2ca 	.word	0x7149f2ca
 800b350:	f149f2ca 	.word	0xf149f2ca
 800b354:	0da24260 	.word	0x0da24260
 800b358:	8da24260 	.word	0x8da24260
 800b35c:	33000000 	.word	0x33000000

0800b360 <_init>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	bf00      	nop
 800b364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b366:	bc08      	pop	{r3}
 800b368:	469e      	mov	lr, r3
 800b36a:	4770      	bx	lr

0800b36c <_fini>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr
