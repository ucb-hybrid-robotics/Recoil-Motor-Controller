
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b110  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800b2f0  0800b2f0  0001b2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbf4  0800bbf4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbf4  0800bbf4  0001bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbfc  0800bbfc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc00  0800bc00  0001bc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  200001fc  0800be00  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800be00  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032a3f  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005883  00000000  00000000  00052c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001f365  00000000  00000000  000584ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00077858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ae0  00000000  00000000  00078ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f9b  00000000  00000000  0007c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f726  00000000  00000000  000a1973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9d82  00000000  00000000  000d1099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bae1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc4  00000000  00000000  001bae6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b2d8 	.word	0x0800b2d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800b2d8 	.word	0x0800b2d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:
extern TIM_HandleTypeDef htim15;
extern UART_HandleTypeDef huart3;

MotorController controller;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b500      	push	{lr}
 8000f9e:	b085      	sub	sp, #20
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa0:	4669      	mov	r1, sp
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8000fa4:	f000 f8d4 	bl	8001150 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_FDCAN_RxFifo0Callback+0x20>)
 8000faa:	4669      	mov	r1, sp
 8000fac:	f001 fc66 	bl	800287c <MotorController_handleCANMessage>
}
 8000fb0:	b005      	add	sp, #20
 8000fb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb6:	bf00      	nop
 8000fb8:	20000434 	.word	0x20000434
 8000fbc:	20000218 	.word	0x20000218

08000fc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim == &htim1) {
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fc2:	4283      	cmp	r3, r0
 8000fc4:	d000      	beq.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x8>
      MotorController_setMode(&controller, MODE_ERROR);
      controller.error = ERROR_HEARTBEAT_TIMEOUT;
    }
    #endif
  }
}
 8000fc6:	4770      	bx	lr
    MotorController_update(&controller);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000fca:	f001 b9cd 	b.w	8002368 <MotorController_update>
 8000fce:	bf00      	nop
 8000fd0:	200005b0 	.word	0x200005b0
 8000fd4:	20000218 	.word	0x20000218

08000fd8 <APP_init>:
  // so putting it here
  // can also comment out this line and just power cycle to update the flash settings
  HAL_FLASH_OB_Launch();
}

void APP_init() {
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if FIRST_TIME_BOOTUP
  APP_initFlashOption();
  #endif

  MotorController_init(&controller);
 8000fda:	4c2c      	ldr	r4, [pc, #176]	; (800108c <APP_init+0xb4>)

  PowerStage_enableGateDriver(&controller.powerstage);

  tx_buffer[0] = (1 << 15) | (0x00 << 11);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000fdc:	4d2c      	ldr	r5, [pc, #176]	; (8001090 <APP_init+0xb8>)
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 8000fde:	4e2d      	ldr	r6, [pc, #180]	; (8001094 <APP_init+0xbc>)
void APP_init() {
 8000fe0:	b085      	sub	sp, #20
  MotorController_init(&controller);
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f001 f886 	bl	80020f4 <MotorController_init>
  PowerStage_enableGateDriver(&controller.powerstage);
 8000fe8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000fec:	f002 f854 	bl	8003098 <PowerStage_enableGateDriver>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 8000ff0:	2764      	movs	r7, #100	; 0x64
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000ff2:	4628      	mov	r0, r5
  tx_buffer[0] = (1 << 15) | (0x00 << 11);
 8000ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2140      	movs	r1, #64	; 0x40
  tx_buffer[0] = (1 << 15) | (0x00 << 11);
 8000ffc:	f8ad 3008 	strh.w	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001000:	f004 f92c 	bl	800525c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 8001004:	2301      	movs	r3, #1
 8001006:	aa03      	add	r2, sp, #12
 8001008:	a902      	add	r1, sp, #8
 800100a:	9700      	str	r7, [sp, #0]
 800100c:	4630      	mov	r0, r6
 800100e:	f005 f8b9 	bl	8006184 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001012:	4628      	mov	r0, r5
 8001014:	2201      	movs	r2, #1
 8001016:	2140      	movs	r1, #64	; 0x40
 8001018:	f004 f920 	bl	800525c <HAL_GPIO_WritePin>

  tx_buffer[0] = (1 << 15) | (0x03 << 11);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800101c:	4628      	mov	r0, r5
  tx_buffer[0] = (1 << 15) | (0x03 << 11);
 800101e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	; 0x40
  tx_buffer[0] = (1 << 15) | (0x03 << 11);
 8001026:	f8ad 3008 	strh.w	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800102a:	f004 f917 	bl	800525c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 800102e:	2301      	movs	r3, #1
 8001030:	aa03      	add	r2, sp, #12
 8001032:	a902      	add	r1, sp, #8
 8001034:	9700      	str	r7, [sp, #0]
 8001036:	4630      	mov	r0, r6
 8001038:	f005 f8a4 	bl	8006184 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800103c:	4628      	mov	r0, r5
 800103e:	2201      	movs	r2, #1
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	f004 f90b 	bl	800525c <HAL_GPIO_WritePin>

  tx_buffer[0] = (1 << 15) | (0x04 << 11);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001046:	4628      	mov	r0, r5
  tx_buffer[0] = (1 << 15) | (0x04 << 11);
 8001048:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2140      	movs	r1, #64	; 0x40
  tx_buffer[0] = (1 << 15) | (0x04 << 11);
 8001050:	f8ad 3008 	strh.w	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001054:	f004 f902 	bl	800525c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 8001058:	2301      	movs	r3, #1
 800105a:	aa03      	add	r2, sp, #12
 800105c:	a902      	add	r1, sp, #8
 800105e:	9700      	str	r7, [sp, #0]
 8001060:	4630      	mov	r0, r6
 8001062:	f005 f88f 	bl	8006184 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	4628      	mov	r0, r5
 800106c:	f004 f8f6 	bl	800525c <HAL_GPIO_WritePin>



  HAL_Delay(1000);
 8001070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001074:	f002 fd34 	bl	8003ae0 <HAL_Delay>

  MotorController_setMode(&controller, MODE_VABC_OVERRIDE);
 8001078:	2120      	movs	r1, #32
 800107a:	4620      	mov	r0, r4
 800107c:	f000 ff7c 	bl	8001f78 <MotorController_setMode>
  controller.current_controller.v_a_setpoint = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	6763      	str	r3, [r4, #116]	; 0x74
  controller.current_controller.v_b_setpoint = 0;
 8001084:	67a3      	str	r3, [r4, #120]	; 0x78
  controller.current_controller.v_c_setpoint = 0;
 8001086:	67e3      	str	r3, [r4, #124]	; 0x7c
//  MotorController_setMode(&controller, MODE_TORQUE);
//  controller.position_controller.torque_target = 0;
//  HAL_Delay(1000);
//  MotorController_setMode(&controller, MODE_POSITION);
//  controller.position_controller.position_target = 0;
}
 8001088:	b005      	add	sp, #20
 800108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108c:	20000218 	.word	0x20000218
 8001090:	48000400 	.word	0x48000400
 8001094:	2000054c 	.word	0x2000054c

08001098 <APP_main>:


void APP_main() {
 8001098:	b510      	push	{r4, lr}
 800109a:	ed2d 8b02 	vpush	{d8}
  MotorController_updateService(&controller);
 800109e:	4c28      	ldr	r4, [pc, #160]	; (8001140 <APP_main+0xa8>)
//        controller.current_controller.i_a_measured * 1000,
//        controller.current_controller.i_b_measured * 1000,
//        controller.current_controller.i_c_measured * 1000);

  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
      controller.current_controller.i_q_target * 1000,
 80010a0:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8001144 <APP_main+0xac>
void APP_main() {
 80010a4:	b0aa      	sub	sp, #168	; 0xa8
  MotorController_updateService(&controller);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f001 fbe0 	bl	800286c <MotorController_updateService>
      controller.current_controller.i_q_target * 1000,
 80010ac:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 80010b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010b4:	ee17 0a90 	vmov	r0, s15
 80010b8:	f7ff fa6e 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_q_setpoint * 1000,
      controller.current_controller.i_q_measured * 1000,
      controller.current_controller.i_d_setpoint * 1000,
      controller.current_controller.i_d_measured * 1000);
 80010bc:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 80010c0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	ee17 0a90 	vmov	r0, s15
 80010cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010d0:	f7ff fa62 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_d_setpoint * 1000,
 80010d4:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 80010d8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80010e0:	ee17 0a90 	vmov	r0, s15
 80010e4:	f7ff fa58 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_q_measured * 1000,
 80010e8:	edd4 7a2a 	vldr	s15, [r4, #168]	; 0xa8
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 80010ec:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_f2d>
      controller.current_controller.i_q_setpoint * 1000,
 80010fc:	edd4 7a2c 	vldr	s15, [r4, #176]	; 0xb0
  sprintf(str, "iq_tar:%f\tiq_set:%f\tiq_mea:%f\tid_set:%f\tid_mea:%f\r\n",
 8001100:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001108:	ee17 0a90 	vmov	r0, s15
 800110c:	f7ff fa44 	bl	8000598 <__aeabi_f2d>
 8001110:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001114:	e9cd 0100 	strd	r0, r1, [sp]
 8001118:	490b      	ldr	r1, [pc, #44]	; (8001148 <APP_main+0xb0>)
 800111a:	a80a      	add	r0, sp, #40	; 0x28
 800111c:	f007 f800 	bl	8008120 <siprintf>
//      controller.position_controller.torque_setpoint * 1000,
//      controller.position_controller.torque_measured * 1000,
//      controller.current_controller.i_q_setpoint);


  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 8001120:	a80a      	add	r0, sp, #40	; 0x28
 8001122:	f7ff f87d 	bl	8000220 <strlen>
 8001126:	4602      	mov	r2, r0
 8001128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112c:	b292      	uxth	r2, r2
 800112e:	a90a      	add	r1, sp, #40	; 0x28
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <APP_main+0xb4>)
 8001132:	f006 f9eb 	bl	800750c <HAL_UART_Transmit>
//  HAL_Delay(5);
}
 8001136:	b02a      	add	sp, #168	; 0xa8
 8001138:	ecbd 8b02 	vpop	{d8}
 800113c:	bd10      	pop	{r4, pc}
 800113e:	bf00      	nop
 8001140:	20000218 	.word	0x20000218
 8001144:	447a0000 	.word	0x447a0000
 8001148:	0800b2f0 	.word	0x0800b2f0
 800114c:	200006e0 	.word	0x200006e0

08001150 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8001150:	b510      	push	{r4, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	460c      	mov	r4, r1
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 8001156:	f101 0308 	add.w	r3, r1, #8
 800115a:	466a      	mov	r2, sp
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	f003 fc51 	bl	8004a04 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8001162:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
  switch (rx_header.DataLength) {
 8001166:	9b03      	ldr	r3, [sp, #12]
  rx_frame->id = rx_header.Identifier;
 8001168:	9800      	ldr	r0, [sp, #0]
 800116a:	6020      	str	r0, [r4, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 800116c:	3900      	subs	r1, #0
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 800116e:	fab2 f282 	clz	r2, r2
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8001172:	bf18      	it	ne
 8001174:	2101      	movne	r1, #1
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 8001176:	0952      	lsrs	r2, r2, #5
  switch (rx_header.DataLength) {
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 800117c:	7121      	strb	r1, [r4, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 800117e:	7162      	strb	r2, [r4, #5]
  switch (rx_header.DataLength) {
 8001180:	d036      	beq.n	80011f0 <CAN_getRxFrame+0xa0>
 8001182:	d814      	bhi.n	80011ae <CAN_getRxFrame+0x5e>
 8001184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001188:	d026      	beq.n	80011d8 <CAN_getRxFrame+0x88>
 800118a:	d906      	bls.n	800119a <CAN_getRxFrame+0x4a>
 800118c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001190:	d11e      	bne.n	80011d0 <CAN_getRxFrame+0x80>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 8001192:	2304      	movs	r3, #4
 8001194:	80e3      	strh	r3, [r4, #6]
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
    default:
      rx_frame->size = 0;
  }
}
 8001196:	b00a      	add	sp, #40	; 0x28
 8001198:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119e:	d01f      	beq.n	80011e0 <CAN_getRxFrame+0x90>
 80011a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011a4:	d114      	bne.n	80011d0 <CAN_getRxFrame+0x80>
      rx_frame->size = 2; break;
 80011a6:	2302      	movs	r3, #2
 80011a8:	80e3      	strh	r3, [r4, #6]
}
 80011aa:	b00a      	add	sp, #40	; 0x28
 80011ac:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 80011ae:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011b2:	d019      	beq.n	80011e8 <CAN_getRxFrame+0x98>
 80011b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011b8:	d103      	bne.n	80011c2 <CAN_getRxFrame+0x72>
      rx_frame->size = 8; break;
 80011ba:	2308      	movs	r3, #8
 80011bc:	80e3      	strh	r3, [r4, #6]
}
 80011be:	b00a      	add	sp, #40	; 0x28
 80011c0:	bd10      	pop	{r4, pc}
  switch (rx_header.DataLength) {
 80011c2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011c6:	d103      	bne.n	80011d0 <CAN_getRxFrame+0x80>
      rx_frame->size = 6; break;
 80011c8:	2306      	movs	r3, #6
 80011ca:	80e3      	strh	r3, [r4, #6]
}
 80011cc:	b00a      	add	sp, #40	; 0x28
 80011ce:	bd10      	pop	{r4, pc}
      rx_frame->size = 0; break;
 80011d0:	2300      	movs	r3, #0
 80011d2:	80e3      	strh	r3, [r4, #6]
}
 80011d4:	b00a      	add	sp, #40	; 0x28
 80011d6:	bd10      	pop	{r4, pc}
      rx_frame->size = 3; break;
 80011d8:	2303      	movs	r3, #3
 80011da:	80e3      	strh	r3, [r4, #6]
}
 80011dc:	b00a      	add	sp, #40	; 0x28
 80011de:	bd10      	pop	{r4, pc}
      rx_frame->size = 1; break;
 80011e0:	2301      	movs	r3, #1
 80011e2:	80e3      	strh	r3, [r4, #6]
}
 80011e4:	b00a      	add	sp, #40	; 0x28
 80011e6:	bd10      	pop	{r4, pc}
      rx_frame->size = 7; break;
 80011e8:	2307      	movs	r3, #7
 80011ea:	80e3      	strh	r3, [r4, #6]
}
 80011ec:	b00a      	add	sp, #40	; 0x28
 80011ee:	bd10      	pop	{r4, pc}
      rx_frame->size = 5; break;
 80011f0:	2305      	movs	r3, #5
 80011f2:	80e3      	strh	r3, [r4, #6]
}
 80011f4:	b00a      	add	sp, #40	; 0x28
 80011f6:	bd10      	pop	{r4, pc}

080011f8 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 80011f8:	b530      	push	{r4, r5, lr}
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 80011fa:	790b      	ldrb	r3, [r1, #4]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 80011fc:	794c      	ldrb	r4, [r1, #5]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 80011fe:	2b00      	cmp	r3, #0
  switch (tx_frame->size) {
 8001200:	88cb      	ldrh	r3, [r1, #6]
HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8001202:	b08b      	sub	sp, #44	; 0x2c
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001204:	bf0c      	ite	eq
 8001206:	2200      	moveq	r2, #0
 8001208:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800120c:	2c01      	cmp	r4, #1
  tx_header.Identifier = tx_frame->id;
 800120e:	680c      	ldr	r4, [r1, #0]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001210:	bf0c      	ite	eq
 8001212:	2500      	moveq	r5, #0
 8001214:	f04f 5500 	movne.w	r5, #536870912	; 0x20000000
  switch (tx_frame->size) {
 8001218:	3b01      	subs	r3, #1
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800121a:	e9cd 4201 	strd	r4, r2, [sp, #4]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800121e:	9503      	str	r5, [sp, #12]
  switch (tx_frame->size) {
 8001220:	2b07      	cmp	r3, #7
 8001222:	d833      	bhi.n	800128c <CAN_putTxFrame+0x94>
 8001224:	e8df f003 	tbb	[pc, r3]
 8001228:	221e1a16 	.word	0x221e1a16
 800122c:	042e2a26 	.word	0x042e2a26
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 8001230:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001234:	9304      	str	r3, [sp, #16]
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001236:	2300      	movs	r3, #0
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
  tx_header.MessageMarker = 0;

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001238:	f101 0208 	add.w	r2, r1, #8
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800123c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001240:	a901      	add	r1, sp, #4
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001242:	e9cd 4305 	strd	r4, r3, [sp, #20]
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001246:	e9cd 3307 	strd	r3, r3, [sp, #28]
  tx_header.MessageMarker = 0;
 800124a:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 800124c:	f003 fb74 	bl	8004938 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001250:	b00b      	add	sp, #44	; 0x2c
 8001252:	bd30      	pop	{r4, r5, pc}
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	9304      	str	r3, [sp, #16]
 800125a:	e7ec      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	e7e8      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 8001264:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001268:	9304      	str	r3, [sp, #16]
 800126a:	e7e4      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 800126c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001270:	9304      	str	r3, [sp, #16]
 8001272:	e7e0      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8001274:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001278:	9304      	str	r3, [sp, #16]
 800127a:	e7dc      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800127c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	e7d8      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8001284:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001288:	9304      	str	r3, [sp, #16]
 800128a:	e7d4      	b.n	8001236 <CAN_putTxFrame+0x3e>
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 800128c:	2300      	movs	r3, #0
 800128e:	9304      	str	r3, [sp, #16]
 8001290:	e7d1      	b.n	8001236 <CAN_putTxFrame+0x3e>
 8001292:	bf00      	nop

08001294 <CurrentController_init>:
//  controller->i_d_ki = 0.003;

  controller->i_kp = 0.0348;
  controller->i_ki = 33;

  controller->i_filter_alpha = 0.1;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <CurrentController_init+0x1c>)
  controller->i_kp = 0.0348;
 8001296:	f8df c020 	ldr.w	ip, [pc, #32]	; 80012b8 <CurrentController_init+0x24>
  controller->i_ki = 33;
 800129a:	4906      	ldr	r1, [pc, #24]	; (80012b4 <CurrentController_init+0x20>)
  controller->i_kp = 0.0348;
 800129c:	f8c0 c004 	str.w	ip, [r0, #4]
  controller->i_limit = 0.1;

  controller->i_q_measured = 0;
 80012a0:	2300      	movs	r3, #0
  controller->i_ki = 33;
 80012a2:	6081      	str	r1, [r0, #8]
  controller->i_filter_alpha = 0.1;
 80012a4:	6002      	str	r2, [r0, #0]
  controller->i_limit = 0.1;
 80012a6:	60c2      	str	r2, [r0, #12]
  controller->i_q_measured = 0;
 80012a8:	6503      	str	r3, [r0, #80]	; 0x50
  controller->i_d_measured = 0;
 80012aa:	6543      	str	r3, [r0, #84]	; 0x54
}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	3dcccccd 	.word	0x3dcccccd
 80012b4:	42040000 	.word	0x42040000
 80012b8:	3d0e8a72 	.word	0x3d0e8a72

080012bc <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 80012bc:	b530      	push	{r4, r5, lr}
 80012be:	ed2d 8b04 	vpush	{d8-d9}
 80012c2:	4604      	mov	r4, r0
 80012c4:	b083      	sub	sp, #12
 80012c6:	eef0 8a40 	vmov.f32	s17, s0
 80012ca:	eeb0 9a60 	vmov.f32	s18, s1
  FOC_clarkTransform(
 80012ce:	ed90 0a04 	vldr	s0, [r0, #16]
 80012d2:	edd0 0a05 	vldr	s1, [r0, #20]
void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 80012d6:	460d      	mov	r5, r1
 80012d8:	eeb0 8a41 	vmov.f32	s16, s2
  FOC_clarkTransform(
 80012dc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 80012e0:	ed90 1a06 	vldr	s2, [r0, #24]
 80012e4:	3028      	adds	r0, #40	; 0x28
 80012e6:	f000 f9a3 	bl	8001630 <FOC_clarkTransform>
      controller->i_c_measured);

  float i_q_measured_current;
  float i_d_measured_current;

  FOC_parkTransform(
 80012ea:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
 80012ee:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80012f2:	eef0 1a49 	vmov.f32	s3, s18
 80012f6:	eeb0 1a68 	vmov.f32	s2, s17
 80012fa:	a901      	add	r1, sp, #4
 80012fc:	4668      	mov	r0, sp
 80012fe:	f000 f9b3 	bl	8001668 <FOC_parkTransform>
      &i_d_measured_current,
      controller->i_alpha_measured,
      controller->i_beta_measured,
      sin_theta, cos_theta);

  if (mode != MODE_IQD_OVERRIDE) {
 8001302:	2d23      	cmp	r5, #35	; 0x23
 8001304:	f000 80e6 	beq.w	80014d4 <CurrentController_update+0x218>
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001308:	edd4 5a14 	vldr	s11, [r4, #80]	; 0x50
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 800130c:	ed94 6a15 	vldr	s12, [r4, #84]	; 0x54
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001310:	ed9d 7a00 	vldr	s14, [sp]
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001314:	eddd 7a01 	vldr	s15, [sp, #4]
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001318:	edd4 6a00 	vldr	s13, [r4]
 800131c:	ee37 7a65 	vsub.f32	s14, s14, s11
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001320:	ee77 7ac6 	vsub.f32	s15, s15, s12
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 8001324:	ee27 7a26 	vmul.f32	s14, s14, s13
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001328:	ee67 7aa6 	vmul.f32	s15, s15, s13
    controller->i_q_measured = controller->i_filter_alpha * (i_q_measured_current - controller->i_q_measured);
 800132c:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
    controller->i_d_measured = controller->i_filter_alpha * (i_d_measured_current - controller->i_d_measured);
 8001330:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
    controller->i_d_measured = 0;
  }

  controller->i_q_setpoint = clampf(
      controller->i_q_target,
      -controller->i_limit,
 8001334:	edd4 7a03 	vldr	s15, [r4, #12]
  controller->i_q_setpoint = clampf(
 8001338:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
static inline int32_t min(int32_t a, int32_t b) {
  return a < b ? a : b;
}

static inline float clampf(float value, float min, float max) {
  return (value > max) ? max : ((value < min) ? min : value);
 800133c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	eeb1 6a67 	vneg.f32	s12, s15
 8001348:	f300 8092 	bgt.w	8001470 <CurrentController_update+0x1b4>
 800134c:	eeb4 7a46 	vcmp.f32	s14, s12
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	bf48      	it	mi
 8001356:	eeb0 7a46 	vmovmi.f32	s14, s12
      controller->i_limit);
  controller->i_d_setpoint = clampf(
 800135a:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
  controller->i_q_setpoint = clampf(
 800135e:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 8001362:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d408      	bmi.n	800137e <CurrentController_update+0xc2>
 800136c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	bfd4      	ite	le
 8001376:	eef0 7a66 	vmovle.f32	s15, s13
 800137a:	eef0 7a46 	vmovgt.f32	s15, s12
      controller->i_d_target,
      -controller->i_limit,
      controller->i_limit);

  if (mode != MODE_VQD_OVERRIDE) {
 800137e:	2d22      	cmp	r5, #34	; 0x22
  controller->i_d_setpoint = clampf(
 8001380:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
  if (mode != MODE_VQD_OVERRIDE) {
 8001384:	f000 808c 	beq.w	80014a0 <CurrentController_update+0x1e4>
    float i_q_error = controller->i_kp * (controller->i_q_setpoint - controller->i_q_measured);
 8001388:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 800138c:	ed94 6a01 	vldr	s12, [r4, #4]
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);

    controller->v_q_target = i_q_error + controller->i_q_integrator;
 8001390:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);
 8001394:	edd4 5a15 	vldr	s11, [r4, #84]	; 0x54
    controller->v_d_target = i_d_error + controller->i_d_integrator;

    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_ki * i_q_error, -10.f, 10.f);
 8001398:	edd4 4a02 	vldr	s9, [r4, #8]
    float i_q_error = controller->i_kp * (controller->i_q_setpoint - controller->i_q_measured);
 800139c:	ee37 7a40 	vsub.f32	s14, s14, s0
    controller->i_q_integrator = clampf(
 80013a0:	eeb0 5a66 	vmov.f32	s10, s13
    float i_q_error = controller->i_kp * (controller->i_q_setpoint - controller->i_q_measured);
 80013a4:	ee27 7a06 	vmul.f32	s14, s14, s12
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);
 80013a8:	ee77 7ae5 	vsub.f32	s15, s15, s11
    controller->i_q_integrator = clampf(
 80013ac:	eea4 5a87 	vfma.f32	s10, s9, s14
    float i_d_error = controller->i_kp * (controller->i_d_setpoint - controller->i_d_measured);
 80013b0:	ee67 7a86 	vmul.f32	s15, s15, s12
    controller->v_d_target = i_d_error + controller->i_d_integrator;
 80013b4:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
    controller->v_q_target = i_q_error + controller->i_q_integrator;
 80013b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80013bc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    controller->v_d_target = i_d_error + controller->i_d_integrator;
 80013c0:	ee76 0a27 	vadd.f32	s1, s12, s15
 80013c4:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->v_q_target = i_q_error + controller->i_q_integrator;
 80013cc:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    controller->v_d_target = i_d_error + controller->i_d_integrator;
 80013d0:	edc4 0a0f 	vstr	s1, [r4, #60]	; 0x3c
 80013d4:	dc4f      	bgt.n	8001476 <CurrentController_update+0x1ba>
 80013d6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80013da:	eeb4 5a66 	vcmp.f32	s10, s13
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	bf48      	it	mi
 80013e4:	eeb0 5a66 	vmovmi.f32	s10, s13
    controller->i_d_integrator = clampf(
 80013e8:	eef0 6a46 	vmov.f32	s13, s12
 80013ec:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80013f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80013f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->i_q_integrator = clampf(
 80013fc:	ed84 5a18 	vstr	s10, [r4, #96]	; 0x60
 8001400:	dc6c      	bgt.n	80014dc <CurrentController_update+0x220>
 8001402:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 8001406:	eef4 6a67 	vcmp.f32	s13, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	bf48      	it	mi
 8001410:	eef0 6a67 	vmovmi.f32	s13, s15
    // user controls `controller->v_q_target` and `controller->v_d_target`
  }

  float k = 1.f;
  // clamp voltage
  if (v_bus > 0.f) {
 8001414:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->i_d_integrator = clampf(
 800141c:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
  if (v_bus > 0.f) {
 8001420:	dd0e      	ble.n	8001440 <CurrentController_update+0x184>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15f;
    float v_norm = (
        (controller->v_q_target * controller->v_q_target)
        + (controller->v_d_target * controller->v_d_target)
 8001422:	ee60 7aa0 	vmul.f32	s15, s1, s1
    float v_max_sq = v_bus * v_bus * 1.15f;
 8001426:	ee28 8a08 	vmul.f32	s16, s16, s16
    float v_norm = (
 800142a:	eee7 7a07 	vfma.f32	s15, s14, s14
    float v_max_sq = v_bus * v_bus * 1.15f;
 800142e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001514 <CurrentController_update+0x258>
 8001432:	ee28 8a26 	vmul.f32	s16, s16, s13
        );
    if (v_norm > v_max_sq) {
 8001436:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d450      	bmi.n	80014e2 <CurrentController_update+0x226>
  }
  controller->v_q_setpoint = k * controller->v_q_target;
  controller->v_d_setpoint = k * controller->v_d_target;


  if (mode != MODE_VALPHABETA_OVERRIDE && mode != MODE_CALIBRATION) {
 8001440:	2d21      	cmp	r5, #33	; 0x21
  controller->v_q_setpoint = k * controller->v_q_target;
 8001442:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
  controller->v_d_setpoint = k * controller->v_d_target;
 8001446:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
  if (mode != MODE_VALPHABETA_OVERRIDE && mode != MODE_CALIBRATION) {
 800144a:	d001      	beq.n	8001450 <CurrentController_update+0x194>
 800144c:	2d05      	cmp	r5, #5
 800144e:	d115      	bne.n	800147c <CurrentController_update+0x1c0>
        controller->v_d_setpoint,
        sin_theta, cos_theta);
  }

  if (mode != MODE_VABC_OVERRIDE) {
    FOC_invClarkSVPWM(
 8001450:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8001454:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8001458:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800145c:	f104 0120 	add.w	r1, r4, #32
 8001460:	f104 001c 	add.w	r0, r4, #28
 8001464:	f000 f91c 	bl	80016a0 <FOC_invClarkSVPWM>
        &controller->v_b_setpoint,
        &controller->v_c_setpoint,
        controller->v_alpha_setpoint,
        controller->v_beta_setpoint);
  }
}
 8001468:	b003      	add	sp, #12
 800146a:	ecbd 8b04 	vpop	{d8-d9}
 800146e:	bd30      	pop	{r4, r5, pc}
 8001470:	eeb0 7a67 	vmov.f32	s14, s15
 8001474:	e771      	b.n	800135a <CurrentController_update+0x9e>
 8001476:	eeb0 5a66 	vmov.f32	s10, s13
 800147a:	e7b5      	b.n	80013e8 <CurrentController_update+0x12c>
    FOC_invParkTransform(
 800147c:	eef0 1a49 	vmov.f32	s3, s18
 8001480:	eeb0 1a68 	vmov.f32	s2, s17
 8001484:	eeb0 0a47 	vmov.f32	s0, s14
 8001488:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800148c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001490:	f000 f8f8 	bl	8001684 <FOC_invParkTransform>
  if (mode != MODE_VABC_OVERRIDE) {
 8001494:	2d20      	cmp	r5, #32
 8001496:	d1db      	bne.n	8001450 <CurrentController_update+0x194>
}
 8001498:	b003      	add	sp, #12
 800149a:	ecbd 8b04 	vpop	{d8-d9}
 800149e:	bd30      	pop	{r4, r5, pc}
  if (v_bus > 0.f) {
 80014a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        (controller->v_q_target * controller->v_q_target)
 80014a8:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
        + (controller->v_d_target * controller->v_d_target)
 80014ac:	edd4 0a0f 	vldr	s1, [r4, #60]	; 0x3c
  if (v_bus > 0.f) {
 80014b0:	dcb7      	bgt.n	8001422 <CurrentController_update+0x166>
    FOC_invParkTransform(
 80014b2:	eef0 1a49 	vmov.f32	s3, s18
 80014b6:	eeb0 1a68 	vmov.f32	s2, s17
 80014ba:	eeb0 0a47 	vmov.f32	s0, s14
  controller->v_q_setpoint = k * controller->v_q_target;
 80014be:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
  controller->v_d_setpoint = k * controller->v_d_target;
 80014c2:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
    FOC_invParkTransform(
 80014c6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80014ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80014ce:	f000 f8d9 	bl	8001684 <FOC_invParkTransform>
  if (mode != MODE_VABC_OVERRIDE) {
 80014d2:	e7bd      	b.n	8001450 <CurrentController_update+0x194>
    controller->i_q_measured = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	6523      	str	r3, [r4, #80]	; 0x50
    controller->i_d_measured = 0;
 80014d8:	6563      	str	r3, [r4, #84]	; 0x54
 80014da:	e72b      	b.n	8001334 <CurrentController_update+0x78>
 80014dc:	eef0 6a67 	vmov.f32	s13, s15
 80014e0:	e798      	b.n	8001414 <CurrentController_update+0x158>
      k = sqrtf(fabsf(v_norm / v_max_sq));
 80014e2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80014e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d406      	bmi.n	80014fe <CurrentController_update+0x242>
 80014f0:	eef1 7ac0 	vsqrt.f32	s15, s0
  controller->v_q_setpoint = k * controller->v_q_target;
 80014f4:	ee27 7a27 	vmul.f32	s14, s14, s15
  controller->v_d_setpoint = k * controller->v_d_target;
 80014f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80014fc:	e7a0      	b.n	8001440 <CurrentController_update+0x184>
      k = sqrtf(fabsf(v_norm / v_max_sq));
 80014fe:	f009 f931 	bl	800a764 <sqrtf>
  controller->v_q_setpoint = k * controller->v_q_target;
 8001502:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
  controller->v_d_setpoint = k * controller->v_d_target;
 8001506:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
  controller->v_q_setpoint = k * controller->v_q_target;
 800150a:	ee20 7a07 	vmul.f32	s14, s0, s14
  controller->v_d_setpoint = k * controller->v_d_target;
 800150e:	ee60 0a25 	vmul.f32	s1, s0, s11
 8001512:	e795      	b.n	8001440 <CurrentController_update+0x184>
 8001514:	3f933333 	.word	0x3f933333

08001518 <Encoder_init>:
void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi) {
  encoder->hspi = hspi;

  encoder->cpr = -1 * (1 << 14);  // 14 bit precision

  encoder->position_offset = 0.f;
 8001518:	2300      	movs	r3, #0
void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi) {
 800151a:	b410      	push	{r4}
  Encoder_setFilterBandwidth(encoder, 2e4f / 20e6f);

  encoder->position_raw = 0;
 800151c:	2200      	movs	r2, #0
  encoder->cpr = -1 * (1 << 14);  // 14 bit precision
 800151e:	4c07      	ldr	r4, [pc, #28]	; (800153c <Encoder_init+0x24>)
  encoder->position = 0.f;
  encoder->velocity = 0.f;
}

void Encoder_setFilterBandwidth(Encoder *encoder, float bandwidth) {
  encoder->filter_alpha = clampf(1 - pow(M_E, -2 * M_PI * bandwidth), 0, 1);
 8001520:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8001540 <Encoder_init+0x28>
  encoder->cpr = -1 * (1 << 14);  // 14 bit precision
 8001524:	6084      	str	r4, [r0, #8]
  encoder->hspi = hspi;
 8001526:	6001      	str	r1, [r0, #0]
}
 8001528:	f85d 4b04 	ldr.w	r4, [sp], #4
  encoder->position_offset = 0.f;
 800152c:	60c3      	str	r3, [r0, #12]
  encoder->filter_alpha = clampf(1 - pow(M_E, -2 * M_PI * bandwidth), 0, 1);
 800152e:	f8c0 c010 	str.w	ip, [r0, #16]
  encoder->position_raw = 0;
 8001532:	8282      	strh	r2, [r0, #20]
  encoder->n_rotations = 0;
 8001534:	6182      	str	r2, [r0, #24]
  encoder->position = 0.f;
 8001536:	61c3      	str	r3, [r0, #28]
  encoder->velocity = 0.f;
 8001538:	6203      	str	r3, [r0, #32]
}
 800153a:	4770      	bx	lr
 800153c:	ffffc000 	.word	0xffffc000
 8001540:	3bcd3df1 	.word	0x3bcd3df1

08001544 <Encoder_update>:
//  float w3db = (1. / 8000.) * 2 * M_PI * encoder->filter_bandwidth;
//  encoder->filter_k_p = .5 * (2 * w3db);
//  encoder->filter_k_i = .5 * (w3db * w3db);
}

void Encoder_update(Encoder *encoder, float dt) {
 8001544:	b510      	push	{r4, lr}
 8001546:	ed2d 8b02 	vpush	{d8}
  encoder->spi_tx_buffer = 0x3FFF | (1 << 14);
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 800154a:	f64f 73ff 	movw	r3, #65535	; 0xffff
void Encoder_update(Encoder *encoder, float dt) {
 800154e:	4604      	mov	r4, r0
 8001550:	b082      	sub	sp, #8
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 8001552:	8083      	strh	r3, [r0, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
void Encoder_update(Encoder *encoder, float dt) {
 800155e:	eeb0 8a40 	vmov.f32	s16, s0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001562:	f003 fe7b 	bl	800525c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1, 100);
 8001566:	4621      	mov	r1, r4
 8001568:	2264      	movs	r2, #100	; 0x64
 800156a:	f851 0b04 	ldr.w	r0, [r1], #4
 800156e:	9200      	str	r2, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	1da2      	adds	r2, r4, #6
 8001574:	f004 fe06 	bl	8006184 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f003 fe6b 	bl	800525c <HAL_GPIO_WritePin>

  // reading is center aligned with range [-cpr/2, cpr/2)
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 8001586:	68a0      	ldr	r0, [r4, #8]
 8001588:	88e3      	ldrh	r3, [r4, #6]

  // handle multi-rotation crossing
  int16_t reading_delta = encoder->position_raw - reading;
 800158a:	8aa2      	ldrh	r2, [r4, #20]
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 800158c:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 8001590:	1049      	asrs	r1, r1, #1
 8001592:	2900      	cmp	r1, #0
 8001594:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001598:	bfb8      	it	lt
 800159a:	4249      	neglt	r1, r1
 800159c:	fa1f fc81 	uxth.w	ip, r1
  int16_t reading_delta = encoder->position_raw - reading;
 80015a0:	1ad2      	subs	r2, r2, r3
 80015a2:	4462      	add	r2, ip
 80015a4:	b212      	sxth	r2, r2
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 80015a6:	eba3 030c 	sub.w	r3, r3, ip
  if (abs(reading_delta) > abs(encoder->cpr / 2)) {
 80015aa:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 80015ae:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 80015b2:	fa1f fc8c 	uxth.w	ip, ip
 80015b6:	4561      	cmp	r1, ip
  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - abs(encoder->cpr / 2);
 80015b8:	b21b      	sxth	r3, r3
  if (abs(reading_delta) > abs(encoder->cpr / 2)) {
 80015ba:	db2e      	blt.n	800161a <Encoder_update+0xd6>
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
  }
  encoder->position_raw = reading;

  float position = (((float)reading / (float)encoder->cpr) + encoder->n_rotations) * (M_2PI_F);
 80015bc:	69a2      	ldr	r2, [r4, #24]

  float delta_position = position - encoder->position;
 80015be:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800162c <Encoder_update+0xe8>
  encoder->position_raw = reading;
 80015c2:	82a3      	strh	r3, [r4, #20]
  float position = (((float)reading / (float)encoder->cpr) + encoder->n_rotations) * (M_2PI_F);
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80015cc:	ee07 0a90 	vmov	s15, r0
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	ee07 2a10 	vmov	s14, r2
 80015d8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80015dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  float delta_position = position - encoder->position;
 80015e0:	edd4 7a07 	vldr	s15, [r4, #28]
  delta_position *= encoder->filter_alpha;
 80015e4:	ed94 6a04 	vldr	s12, [r4, #16]
  float position = (((float)reading / (float)encoder->cpr) + encoder->n_rotations) * (M_2PI_F);
 80015e8:	ee76 6a87 	vadd.f32	s13, s13, s14
  float delta_position = position - encoder->position;
 80015ec:	eeb0 7a67 	vmov.f32	s14, s15
 80015f0:	ee96 7aa5 	vfnms.f32	s14, s13, s11
  encoder->position += delta_position;

  // subtract the offset to get "true" revolution
//  encoder->position_relative = wrapTo2Pi(encoder->position);

  if (dt > 0) {
 80015f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  delta_position *= encoder->filter_alpha;
 80015f8:	ee27 7a06 	vmul.f32	s14, s14, s12
  if (dt > 0) {
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  encoder->position += delta_position;
 8001600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001604:	edc4 7a07 	vstr	s15, [r4, #28]
    encoder->velocity = (delta_position / dt);
 8001608:	bfc4      	itt	gt
 800160a:	eec7 7a08 	vdivgt.f32	s15, s14, s16
 800160e:	edc4 7a08 	vstrgt	s15, [r4, #32]
  }
}
 8001612:	b002      	add	sp, #8
 8001614:	ecbd 8b02 	vpop	{d8}
 8001618:	bd10      	pop	{r4, pc}
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
 800161a:	2a00      	cmp	r2, #0
 800161c:	69a1      	ldr	r1, [r4, #24]
 800161e:	bfcc      	ite	gt
 8001620:	f04f 32ff 	movgt.w	r2, #4294967295
 8001624:	2201      	movle	r2, #1
 8001626:	440a      	add	r2, r1
 8001628:	61a2      	str	r2, [r4, #24]
 800162a:	e7c8      	b.n	80015be <Encoder_update+0x7a>
 800162c:	40c90fdb 	.word	0x40c90fdb

08001630 <FOC_clarkTransform>:
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001630:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001634:	eef0 7a60 	vmov.f32	s15, s1
 8001638:	eed0 7a07 	vfnms.f32	s15, s0, s14
 800163c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001660 <FOC_clarkTransform+0x30>
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001640:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001664 <FOC_clarkTransform+0x34>
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001644:	ee77 7ac1 	vsub.f32	s15, s15, s2
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001648:	ee70 0ac1 	vsub.f32	s1, s1, s2
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 800164c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001650:	ee60 0a87 	vmul.f32	s1, s1, s14
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001654:	edc0 7a00 	vstr	s15, [r0]
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001658:	edc1 0a00 	vstr	s1, [r1]
}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	3eaaaaab 	.word	0x3eaaaaab
 8001664:	3f13cd3a 	.word	0x3f13cd3a

08001668 <FOC_parkTransform>:

void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001668:	ee60 7a41 	vnmul.f32	s15, s0, s2
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 800166c:	ee20 1a81 	vmul.f32	s2, s1, s2
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001670:	eee1 7aa0 	vfma.f32	s15, s3, s1
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8001674:	eea1 1a80 	vfma.f32	s2, s3, s0
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001678:	edc0 7a00 	vstr	s15, [r0]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 800167c:	ed81 1a00 	vstr	s2, [r1]
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <FOC_invParkTransform>:
 8001684:	ee61 7a40 	vnmul.f32	s15, s2, s0
 8001688:	ee20 1a81 	vmul.f32	s2, s1, s2
 800168c:	eee0 7aa1 	vfma.f32	s15, s1, s3
 8001690:	eea0 1a21 	vfma.f32	s2, s0, s3
 8001694:	edc0 7a00 	vstr	s15, [r0]
 8001698:	ed81 1a00 	vstr	s2, [r1]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <FOC_invClarkSVPWM>:
  *v_beta   =  (cos_theta * v_q) + (sin_theta * v_d);
}

void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
  float v_a_phase = v_alpha;
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 80016a0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001744 <FOC_invClarkSVPWM+0xa4>
 80016a4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80016a8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80016ac:	eef0 7a60 	vmov.f32	s15, s1
 80016b0:	eee0 7a07 	vfma.f32	s15, s0, s14
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 80016b4:	eed0 0a07 	vfnms.f32	s1, s0, s14
static inline float fast_fminf(float a, float b) {
  return a < b ? a : b;
}

static inline float fast_fmaxf3(float a, float b, float c) {
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 80016b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	dd27      	ble.n	8001712 <FOC_invClarkSVPWM+0x72>
 80016c2:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

static inline float fast_fminf3(float a, float b, float c) {
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 80016ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 80016ce:	bfd4      	ite	le
 80016d0:	eeb0 7a60 	vmovle.f32	s14, s1
 80016d4:	eeb0 7a40 	vmovgt.f32	s14, s0
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	d527      	bpl.n	800172e <FOC_invClarkSVPWM+0x8e>
 80016de:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	bf54      	ite	pl
 80016e8:	eef0 6a60 	vmovpl.f32	s13, s1
 80016ec:	eef0 6a40 	vmovmi.f32	s13, s0

  float v_neutral = .5f * (fast_fmaxf3(v_a_phase, v_b_phase, v_c_phase) + fast_fminf3(v_a_phase, v_b_phase, v_c_phase));
 80016f0:	ee37 7a26 	vadd.f32	s14, s14, s13

  *v_a = v_a_phase - v_neutral;
 80016f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016f8:	eea7 0a66 	vfms.f32	s0, s14, s13
  *v_b = v_b_phase - v_neutral;
 80016fc:	eee7 7a66 	vfms.f32	s15, s14, s13
  *v_c = v_c_phase - v_neutral;
 8001700:	eee7 0a66 	vfms.f32	s1, s14, s13
  *v_a = v_a_phase - v_neutral;
 8001704:	ed80 0a00 	vstr	s0, [r0]
  *v_b = v_b_phase - v_neutral;
 8001708:	edc1 7a00 	vstr	s15, [r1]
  *v_c = v_c_phase - v_neutral;
 800170c:	edc2 0a00 	vstr	s1, [r2]
}
 8001710:	4770      	bx	lr
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 8001712:	eef4 7ae0 	vcmpe.f32	s15, s1
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 800171a:	eeb4 0ae7 	vcmpe.f32	s0, s15
  return (a > b ? (a > c ? a : c) : (b > c ? b : c));
 800171e:	bfd4      	ite	le
 8001720:	eeb0 7a60 	vmovle.f32	s14, s1
 8001724:	eeb0 7a67 	vmovgt.f32	s14, s15
  return (a < b ? (a < c ? a : c) : (b < c ? b : c));
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	d4d7      	bmi.n	80016de <FOC_invClarkSVPWM+0x3e>
 800172e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	bf54      	ite	pl
 8001738:	eef0 6a60 	vmovpl.f32	s13, s1
 800173c:	eef0 6a67 	vmovmi.f32	s13, s15
 8001740:	e7d6      	b.n	80016f0 <FOC_invClarkSVPWM+0x50>
 8001742:	bf00      	nop
 8001744:	3f5db3d7 	.word	0x3f5db3d7

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b510      	push	{r4, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174c:	2238      	movs	r2, #56	; 0x38
 800174e:	2100      	movs	r1, #0
 8001750:	a806      	add	r0, sp, #24
 8001752:	f006 f873 	bl	800783c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001756:	2000      	movs	r0, #0
 8001758:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800175c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001760:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001762:	f003 fe21 	bl	80053a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176a:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176e:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001774:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001776:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001778:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 20;
 800177c:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001780:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001786:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001788:	f003 fe8c 	bl	80054a4 <HAL_RCC_OscConfig>
 800178c:	b108      	cbz	r0, 8001792 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001792:	2104      	movs	r1, #4
 8001794:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800179a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017a8:	f004 f900 	bl	80059ac <HAL_RCC_ClockConfig>
 80017ac:	b108      	cbz	r0, 80017b2 <SystemClock_Config+0x6a>
 80017ae:	b672      	cpsid	i
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <SystemClock_Config+0x68>
}
 80017b2:	b014      	add	sp, #80	; 0x50
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	bf00      	nop

080017b8 <main>:
{
 80017b8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	2400      	movs	r4, #0
{
 80017be:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 80017c0:	f002 f96c 	bl	8003a9c <HAL_Init>
  SystemClock_Config();
 80017c4:	f7ff ffc0 	bl	8001748 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80017cc:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d0:	4ba9      	ldr	r3, [pc, #676]	; (8001a78 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017d6:	48a9      	ldr	r0, [pc, #676]	; (8001a7c <main+0x2c4>)
  hadc1.Instance = ADC1;
 80017d8:	4da9      	ldr	r5, [pc, #676]	; (8001a80 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	f042 0204 	orr.w	r2, r2, #4
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e2:	f002 0204 	and.w	r2, r2, #4
 80017e6:	9201      	str	r2, [sp, #4]
 80017e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f4:	f002 0220 	and.w	r2, r2, #32
 80017f8:	9202      	str	r2, [sp, #8]
 80017fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	64da      	str	r2, [r3, #76]	; 0x4c
 8001804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001806:	f002 0201 	and.w	r2, r2, #1
 800180a:	9203      	str	r2, [sp, #12]
 800180c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001810:	f042 0202 	orr.w	r2, r2, #2
 8001814:	64da      	str	r2, [r3, #76]	; 0x4c
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800181c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001822:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001826:	f003 fd19 	bl	800525c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800182a:	4622      	mov	r2, r4
 800182c:	2104      	movs	r1, #4
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f003 fd13 	bl	800525c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f003 fd0c 	bl	800525c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001844:	488f      	ldr	r0, [pc, #572]	; (8001a84 <main+0x2cc>)
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	2201      	movs	r2, #1
 800184a:	f003 fd07 	bl	800525c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800184e:	4622      	mov	r2, r4
 8001850:	488c      	ldr	r0, [pc, #560]	; (8001a84 <main+0x2cc>)
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	f003 fd02 	bl	800525c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	4888      	ldr	r0, [pc, #544]	; (8001a7c <main+0x2c4>)
 800185c:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800185e:	f44f 4840 	mov.w	r8, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	e9cd 8613 	strd	r8, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800186a:	f04f 0b04 	mov.w	fp, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f003 fbf7 	bl	8005060 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	a913      	add	r1, sp, #76	; 0x4c
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	e9cd b613 	strd	fp, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f003 fbed 	bl	8005060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	a913      	add	r1, sp, #76	; 0x4c
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001890:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001896:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001898:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f003 fbe0 	bl	8005060 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	4878      	ldr	r0, [pc, #480]	; (8001a84 <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a2:	9716      	str	r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ae:	f04f 0a80 	mov.w	sl, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f003 fbd5 	bl	8005060 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	4873      	ldr	r0, [pc, #460]	; (8001a84 <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c0:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f003 fbcc 	bl	8005060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	486d      	ldr	r0, [pc, #436]	; (8001a84 <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ce:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d2:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f003 fbc3 	bl	8005060 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80018da:	223c      	movs	r2, #60	; 0x3c
 80018dc:	4621      	mov	r1, r4
 80018de:	a813      	add	r0, sp, #76	; 0x4c
  ADC_MultiModeTypeDef multimode = {0};
 80018e0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80018e4:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80018e6:	f005 ffa9 	bl	800783c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018ee:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 80018f2:	e9c5 c300 	strd	ip, r3, [r5]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018f6:	2308      	movs	r3, #8
 80018f8:	61ab      	str	r3, [r5, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018fa:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001900:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001902:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001906:	e9c5 4604 	strd	r4, r6, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 800190a:	622e      	str	r6, [r5, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800190c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001910:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001914:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001918:	63eb      	str	r3, [r5, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191a:	f002 f8f3 	bl	8003b04 <HAL_ADC_Init>
 800191e:	b108      	cbz	r0, 8001924 <main+0x16c>
 8001920:	b672      	cpsid	i
  while (1)
 8001922:	e7fe      	b.n	8001922 <main+0x16a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001924:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001926:	a90c      	add	r1, sp, #48	; 0x30
 8001928:	4628      	mov	r0, r5
 800192a:	f002 fdaf 	bl	800448c <HAL_ADCEx_MultiModeConfigChannel>
 800192e:	b108      	cbz	r0, 8001934 <main+0x17c>
 8001930:	b672      	cpsid	i
  while (1)
 8001932:	e7fe      	b.n	8001932 <main+0x17a>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001934:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigInjected.InjectedOffset = 0;
 8001936:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001938:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
  sConfigInjected.QueueInjectedContext = DISABLE;
 800193c:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001940:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001944:	4850      	ldr	r0, [pc, #320]	; (8001a88 <main+0x2d0>)
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001946:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800194a:	2309      	movs	r3, #9
 800194c:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001950:	237f      	movs	r3, #127	; 0x7f
 8001952:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001954:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001956:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001958:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800195a:	e9cd aa1d 	strd	sl, sl, [sp, #116]	; 0x74
  sConfigInjected.InjectedNbrOfConversion = 3;
 800195e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001960:	f002 fa9a 	bl	8003e98 <HAL_ADCEx_InjectedConfigChannel>
 8001964:	b108      	cbz	r0, 800196a <main+0x1b2>
 8001966:	b672      	cpsid	i
  while (1)
 8001968:	e7fe      	b.n	8001968 <main+0x1b0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800196a:	4948      	ldr	r1, [pc, #288]	; (8001a8c <main+0x2d4>)
 800196c:	f240 130f 	movw	r3, #271	; 0x10f
 8001970:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001974:	4628      	mov	r0, r5
 8001976:	a913      	add	r1, sp, #76	; 0x4c
 8001978:	f002 fa8e 	bl	8003e98 <HAL_ADCEx_InjectedConfigChannel>
 800197c:	b108      	cbz	r0, 8001982 <main+0x1ca>
 800197e:	b672      	cpsid	i
  while (1)
 8001980:	e7fe      	b.n	8001980 <main+0x1c8>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001982:	4a43      	ldr	r2, [pc, #268]	; (8001a90 <main+0x2d8>)
 8001984:	f240 2315 	movw	r3, #533	; 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001988:	4628      	mov	r0, r5
 800198a:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800198c:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001990:	f002 fa82 	bl	8003e98 <HAL_ADCEx_InjectedConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	b108      	cbz	r0, 800199c <main+0x1e4>
 8001998:	b672      	cpsid	i
  while (1)
 800199a:	e7fe      	b.n	800199a <main+0x1e2>
  hfdcan1.Instance = FDCAN1;
 800199c:	483d      	ldr	r0, [pc, #244]	; (8001a94 <main+0x2dc>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800199e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.ExtFiltersNbr = 0;
 80019a2:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80019a6:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80019a8:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 80019aa:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Instance = FDCAN1;
 80019ae:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <main+0x2e0>)
 80019b0:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80019b2:	2407      	movs	r4, #7
  hfdcan1.Init.NominalPrescaler = 16;
 80019b4:	2310      	movs	r3, #16
 80019b6:	6143      	str	r3, [r0, #20]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80019b8:	e9c0 6609 	strd	r6, r6, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 80019bc:	e9c0 660b 	strd	r6, r6, [r0, #44]	; 0x2c
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80019c0:	6207      	str	r7, [r0, #32]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80019c2:	6186      	str	r6, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80019c4:	61c4      	str	r4, [r0, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80019c6:	f002 fe7f 	bl	80046c8 <HAL_FDCAN_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b108      	cbz	r0, 80019d2 <main+0x21a>
 80019ce:	b672      	cpsid	i
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <main+0x218>
  hopamp1.Instance = OPAMP1;
 80019d2:	4832      	ldr	r0, [pc, #200]	; (8001a9c <main+0x2e4>)
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80019d4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80019d8:	e9c0 3901 	strd	r3, r9, [r0, #4]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80019dc:	e9c0 830a 	strd	r8, r3, [r0, #40]	; 0x28
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80019e0:	6103      	str	r3, [r0, #16]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80019e2:	6183      	str	r3, [r0, #24]
  hopamp1.Instance = OPAMP1;
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <main+0x2e8>)
 80019e6:	6003      	str	r3, [r0, #0]
  hopamp1.Init.InternalOutput = ENABLE;
 80019e8:	7506      	strb	r6, [r0, #20]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80019ea:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80019ec:	f003 fc3c 	bl	8005268 <HAL_OPAMP_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b108      	cbz	r0, 80019f8 <main+0x240>
 80019f4:	b672      	cpsid	i
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <main+0x23e>
  hopamp2.Instance = OPAMP2;
 80019f8:	482a      	ldr	r0, [pc, #168]	; (8001aa4 <main+0x2ec>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80019fa:	e9c0 3901 	strd	r3, r9, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80019fe:	6103      	str	r3, [r0, #16]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a00:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a02:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <main+0x2f0>)
 8001a06:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001a08:	e9c0 5809 	strd	r5, r8, [r0, #36]	; 0x24
  hopamp2.Init.InternalOutput = ENABLE;
 8001a0c:	7506      	strb	r6, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001a0e:	f003 fc2b 	bl	8005268 <HAL_OPAMP_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b108      	cbz	r0, 8001a1a <main+0x262>
 8001a16:	b672      	cpsid	i
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <main+0x260>
  hopamp3.Instance = OPAMP3;
 8001a1a:	4824      	ldr	r0, [pc, #144]	; (8001aac <main+0x2f4>)
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a1c:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a1e:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a20:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a22:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp3.Instance = OPAMP3;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <main+0x2f8>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001a26:	f8c0 9008 	str.w	r9, [r0, #8]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001a2a:	e9c0 5809 	strd	r5, r8, [r0, #36]	; 0x24
  hopamp3.Init.InternalOutput = ENABLE;
 8001a2e:	7506      	strb	r6, [r0, #20]
  hopamp3.Instance = OPAMP3;
 8001a30:	6003      	str	r3, [r0, #0]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001a32:	f003 fc19 	bl	8005268 <HAL_OPAMP_Init>
 8001a36:	4602      	mov	r2, r0
 8001a38:	b108      	cbz	r0, 8001a3e <main+0x286>
 8001a3a:	b672      	cpsid	i
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <main+0x284>
  hspi1.Instance = SPI1;
 8001a3e:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a40:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001ab8 <main+0x300>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a44:	6082      	str	r2, [r0, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a46:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a4a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4e:	6102      	str	r2, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a50:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a52:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a56:	e9c0 8200 	strd	r8, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a5a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001a5e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a60:	f44f 7a00 	mov.w	sl, #512	; 0x200
 8001a64:	2218      	movs	r2, #24
 8001a66:	e9c0 a206 	strd	sl, r2, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a6a:	6146      	str	r6, [r0, #20]
  hspi1.Init.CRCPolynomial = 7;
 8001a6c:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a6e:	f004 fb0b 	bl	8006088 <HAL_SPI_Init>
 8001a72:	b318      	cbz	r0, 8001abc <main+0x304>
 8001a74:	b672      	cpsid	i
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <main+0x2be>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	20000334 	.word	0x20000334
 8001a84:	48000400 	.word	0x48000400
 8001a88:	b6902000 	.word	0xb6902000
 8001a8c:	04300002 	.word	0x04300002
 8001a90:	2e300800 	.word	0x2e300800
 8001a94:	20000434 	.word	0x20000434
 8001a98:	40006400 	.word	0x40006400
 8001a9c:	20000498 	.word	0x20000498
 8001aa0:	40010300 	.word	0x40010300
 8001aa4:	200004d4 	.word	0x200004d4
 8001aa8:	40010304 	.word	0x40010304
 8001aac:	20000510 	.word	0x20000510
 8001ab0:	40010308 	.word	0x40010308
 8001ab4:	2000054c 	.word	0x2000054c
 8001ab8:	40013000 	.word	0x40013000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abc:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8001abe:	4da4      	ldr	r5, [pc, #656]	; (8001d50 <main+0x598>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac0:	9408      	str	r4, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac2:	2234      	movs	r2, #52	; 0x34
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	a813      	add	r0, sp, #76	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001acc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001ad0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001adc:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ade:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae0:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae2:	f005 feab 	bl	800783c <memset>
  htim1.Instance = TIM1;
 8001ae6:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <main+0x59c>)
 8001ae8:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 3999;
 8001aea:	f04f 0e20 	mov.w	lr, #32
 8001aee:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001af2:	e9c5 e302 	strd	lr, r3, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af6:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 1;
 8001af8:	2301      	movs	r3, #1
  htim1.Init.Prescaler = 0;
 8001afa:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	612c      	str	r4, [r5, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = 1;
 8001b00:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b02:	f005 f8f5 	bl	8006cf0 <HAL_TIM_Base_Init>
 8001b06:	b108      	cbz	r0, 8001b0c <main+0x354>
 8001b08:	b672      	cpsid	i
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <main+0x352>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b10:	a908      	add	r1, sp, #32
 8001b12:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b16:	f004 fead 	bl	8006874 <HAL_TIM_ConfigClockSource>
 8001b1a:	b108      	cbz	r0, 8001b20 <main+0x368>
 8001b1c:	b672      	cpsid	i
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <main+0x366>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b20:	4628      	mov	r0, r5
 8001b22:	f005 f917 	bl	8006d54 <HAL_TIM_PWM_Init>
 8001b26:	b108      	cbz	r0, 8001b2c <main+0x374>
 8001b28:	b672      	cpsid	i
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <main+0x372>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	e9cd 0006 	strd	r0, r0, [sp, #24]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001b30:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b32:	a905      	add	r1, sp, #20
 8001b34:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001b36:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b38:	f005 fa0e 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	b108      	cbz	r0, 8001b42 <main+0x38a>
 8001b3e:	b672      	cpsid	i
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <main+0x388>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b42:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b46:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4a:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	4602      	mov	r2, r0
 8001b52:	a90c      	add	r1, sp, #48	; 0x30
 8001b54:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	f005 f96e 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	b108      	cbz	r0, 8001b62 <main+0x3aa>
 8001b5e:	b672      	cpsid	i
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <main+0x3a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b62:	2204      	movs	r2, #4
 8001b64:	a90c      	add	r1, sp, #48	; 0x30
 8001b66:	4628      	mov	r0, r5
 8001b68:	f005 f966 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001b6c:	b108      	cbz	r0, 8001b72 <main+0x3ba>
 8001b6e:	b672      	cpsid	i
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <main+0x3b8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b72:	2208      	movs	r2, #8
 8001b74:	a90c      	add	r1, sp, #48	; 0x30
 8001b76:	4628      	mov	r0, r5
 8001b78:	f005 f95e 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	b108      	cbz	r0, 8001b82 <main+0x3ca>
 8001b7e:	b672      	cpsid	i
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <main+0x3c8>
  sConfigOC.Pulse = 3998;
 8001b82:	f640 739e 	movw	r3, #3998	; 0xf9e
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b86:	220c      	movs	r2, #12
 8001b88:	a90c      	add	r1, sp, #48	; 0x30
 8001b8a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 3998;
 8001b8c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b8e:	f005 f953 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	b108      	cbz	r0, 8001b98 <main+0x3e0>
 8001b94:	b672      	cpsid	i
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <main+0x3de>
  sBreakDeadTimeConfig.DeadTime = 128;
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	e9cd 0315 	strd	r0, r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba2:	e9cd 0317 	strd	r0, r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001baa:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bae:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb2:	e9cd 031b 	strd	r0, r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bb6:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bba:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bbc:	a913      	add	r1, sp, #76	; 0x4c
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f005 fa14 	bl	8006fec <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	b108      	cbz	r0, 8001bcc <main+0x414>
 8001bc8:	b672      	cpsid	i
  while (1)
 8001bca:	e7fe      	b.n	8001bca <main+0x412>
  HAL_TIM_MspPostInit(&htim1);
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f001 fdd9 	bl	8003784 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 1000000;
 8001bd2:	4f61      	ldr	r7, [pc, #388]	; (8001d58 <main+0x5a0>)
  huart3.Instance = USART3;
 8001bd4:	4861      	ldr	r0, [pc, #388]	; (8001d5c <main+0x5a4>)
  huart3.Init.BaudRate = 1000000;
 8001bd6:	4a62      	ldr	r2, [pc, #392]	; (8001d60 <main+0x5a8>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd8:	6284      	str	r4, [r0, #40]	; 0x28
  huart3.Init.BaudRate = 1000000;
 8001bda:	e9c0 7200 	strd	r7, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bde:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001be0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001be4:	e9c0 4204 	strd	r4, r2, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bec:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bf0:	f005 fd34 	bl	800765c <HAL_UART_Init>
 8001bf4:	b108      	cbz	r0, 8001bfa <main+0x442>
 8001bf6:	b672      	cpsid	i
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <main+0x440>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4857      	ldr	r0, [pc, #348]	; (8001d5c <main+0x5a4>)
 8001bfe:	f005 fd9f 	bl	8007740 <HAL_UARTEx_SetTxFifoThreshold>
 8001c02:	4601      	mov	r1, r0
 8001c04:	b108      	cbz	r0, 8001c0a <main+0x452>
 8001c06:	b672      	cpsid	i
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <main+0x450>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0a:	4854      	ldr	r0, [pc, #336]	; (8001d5c <main+0x5a4>)
 8001c0c:	f005 fdc2 	bl	8007794 <HAL_UARTEx_SetRxFifoThreshold>
 8001c10:	b108      	cbz	r0, 8001c16 <main+0x45e>
 8001c12:	b672      	cpsid	i
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <main+0x45c>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c16:	4851      	ldr	r0, [pc, #324]	; (8001d5c <main+0x5a4>)
 8001c18:	f005 fd74 	bl	8007704 <HAL_UARTEx_DisableFifoMode>
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	b108      	cbz	r0, 8001c24 <main+0x46c>
 8001c20:	b672      	cpsid	i
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <main+0x46a>
  hadc2.Instance = ADC2;
 8001c24:	4c4f      	ldr	r4, [pc, #316]	; (8001d64 <main+0x5ac>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c26:	4e50      	ldr	r6, [pc, #320]	; (8001d68 <main+0x5b0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001c28:	4601      	mov	r1, r0
 8001c2a:	223c      	movs	r2, #60	; 0x3c
 8001c2c:	a813      	add	r0, sp, #76	; 0x4c
 8001c2e:	f005 fe05 	bl	800783c <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c32:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c36:	e9c4 6300 	strd	r6, r3, [r4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 8001c40:	6223      	str	r3, [r4, #32]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c42:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c46:	2308      	movs	r3, #8
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001c48:	83a5      	strh	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c4a:	4620      	mov	r0, r4
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c4c:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c50:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001c54:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c58:	63e6      	str	r6, [r4, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001c5a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c5e:	61a3      	str	r3, [r4, #24]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c60:	f001 ff50 	bl	8003b04 <HAL_ADC_Init>
 8001c64:	b108      	cbz	r0, 8001c6a <main+0x4b2>
 8001c66:	b672      	cpsid	i
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <main+0x4b0>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001c6a:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c6c:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigInjected.InjectedOffset = 0;
 8001c6e:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001c70:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001c74:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001c78:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001c7c:	483b      	ldr	r0, [pc, #236]	; (8001d6c <main+0x5b4>)
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001c7e:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001c82:	2309      	movs	r3, #9
 8001c84:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001c88:	257f      	movs	r5, #127	; 0x7f
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c90:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001c92:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c94:	4620      	mov	r0, r4
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001c96:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001c98:	f002 f8fe 	bl	8003e98 <HAL_ADCEx_InjectedConfigChannel>
 8001c9c:	b108      	cbz	r0, 8001ca2 <main+0x4ea>
 8001c9e:	b672      	cpsid	i
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <main+0x4e8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <main+0x5b8>)
 8001ca4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ca6:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ca8:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001cac:	a913      	add	r1, sp, #76	; 0x4c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001cae:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001cb0:	f002 f8f2 	bl	8003e98 <HAL_ADCEx_InjectedConfigChannel>
 8001cb4:	b108      	cbz	r0, 8001cba <main+0x502>
 8001cb6:	b672      	cpsid	i
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <main+0x500>
  htim2.Instance = TIM2;
 8001cba:	4c2e      	ldr	r4, [pc, #184]	; (8001d74 <main+0x5bc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	900e      	str	r0, [sp, #56]	; 0x38
  htim2.Init.Prescaler = 15999;
 8001cbe:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8001cca:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim2.Init.Prescaler = 15999;
 8001cd2:	e9c4 2300 	strd	r2, r3, [r4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	61a0      	str	r0, [r4, #24]
  htim2.Init.Period = 9999;
 8001cdc:	f242 730f 	movw	r3, #9999	; 0x270f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ce0:	4620      	mov	r0, r4
  htim2.Init.Period = 9999;
 8001ce2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ce4:	f005 f804 	bl	8006cf0 <HAL_TIM_Base_Init>
 8001ce8:	b108      	cbz	r0, 8001cee <main+0x536>
 8001cea:	b672      	cpsid	i
  while (1)
 8001cec:	e7fe      	b.n	8001cec <main+0x534>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cee:	a913      	add	r1, sp, #76	; 0x4c
 8001cf0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf2:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cf4:	f004 fdbe 	bl	8006874 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b108      	cbz	r0, 8001d00 <main+0x548>
 8001cfc:	b672      	cpsid	i
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <main+0x546>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d00:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d02:	4620      	mov	r0, r4
 8001d04:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d06:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d08:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0a:	f005 f925 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b108      	cbz	r0, 8001d16 <main+0x55e>
 8001d12:	b672      	cpsid	i
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <main+0x55c>
  htim6.Instance = TIM6;
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <main+0x5c0>)
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <main+0x5c4>)
 8001d1a:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 159;
 8001d1c:	229f      	movs	r2, #159	; 0x9f
 8001d1e:	6042      	str	r2, [r0, #4]
  htim6.Init.Period = 65535;
 8001d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  htim6.Init.Period = 65535;
 8001d28:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	9315      	str	r3, [sp, #84]	; 0x54
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d30:	f004 ffde 	bl	8006cf0 <HAL_TIM_Base_Init>
 8001d34:	b108      	cbz	r0, 8001d3a <main+0x582>
 8001d36:	b672      	cpsid	i
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <main+0x580>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <main+0x5c0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d40:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d44:	f005 f908 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	b1d0      	cbz	r0, 8001d80 <main+0x5c8>
 8001d4a:	b672      	cpsid	i
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <main+0x594>
 8001d4e:	bf00      	nop
 8001d50:	200005b0 	.word	0x200005b0
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	40004800 	.word	0x40004800
 8001d5c:	200006e0 	.word	0x200006e0
 8001d60:	000f4240 	.word	0x000f4240
 8001d64:	200003a0 	.word	0x200003a0
 8001d68:	50000100 	.word	0x50000100
 8001d6c:	c3290000 	.word	0xc3290000
 8001d70:	cb8c0000 	.word	0xcb8c0000
 8001d74:	200005fc 	.word	0x200005fc
 8001d78:	20000694 	.word	0x20000694
 8001d7c:	40001000 	.word	0x40001000
  hcordic.Instance = CORDIC;
 8001d80:	4826      	ldr	r0, [pc, #152]	; (8001e1c <main+0x664>)
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <main+0x668>)
 8001d84:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001d86:	f002 fbe7 	bl	8004558 <HAL_CORDIC_Init>
 8001d8a:	b108      	cbz	r0, 8001d90 <main+0x5d8>
 8001d8c:	b672      	cpsid	i
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <main+0x5d6>
  htim3.Instance = TIM3;
 8001d90:	4c24      	ldr	r4, [pc, #144]	; (8001e24 <main+0x66c>)
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <main+0x670>)
 8001d94:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 15999;
 8001d96:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001d9a:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 9999;
 8001d9c:	f242 730f 	movw	r3, #9999	; 0x270f
 8001da0:	e9c4 0302 	strd	r0, r3, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	2380      	movs	r3, #128	; 0x80
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001daa:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8001dae:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 8001db2:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db8:	9019      	str	r0, [sp, #100]	; 0x64
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dbc:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dbe:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dc0:	f004 ffc8 	bl	8006d54 <HAL_TIM_PWM_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b108      	cbz	r0, 8001dcc <main+0x614>
 8001dc8:	b672      	cpsid	i
  while (1)
 8001dca:	e7fe      	b.n	8001dca <main+0x612>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dcc:	a90c      	add	r1, sp, #48	; 0x30
 8001dce:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd0:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd4:	f005 f8c0 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	b108      	cbz	r0, 8001dde <main+0x626>
 8001dda:	b672      	cpsid	i
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <main+0x624>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dde:	2260      	movs	r2, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001de0:	e9cd 2013 	strd	r2, r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001de4:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de6:	4602      	mov	r2, r0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de8:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dea:	a913      	add	r1, sp, #76	; 0x4c
 8001dec:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001dee:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	f005 f822 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	b108      	cbz	r0, 8001dfa <main+0x642>
 8001df6:	b672      	cpsid	i
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <main+0x640>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	a913      	add	r1, sp, #76	; 0x4c
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f005 f81a 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001e04:	b108      	cbz	r0, 8001e0a <main+0x652>
 8001e06:	b672      	cpsid	i
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <main+0x650>
  HAL_TIM_MspPostInit(&htim3);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f001 fcba 	bl	8003784 <HAL_TIM_MspPostInit>
  APP_init();
 8001e10:	f7ff f8e2 	bl	8000fd8 <APP_init>
    APP_main();
 8001e14:	f7ff f940 	bl	8001098 <APP_main>
  while (1)
 8001e18:	e7fc      	b.n	8001e14 <main+0x65c>
 8001e1a:	bf00      	nop
 8001e1c:	2000040c 	.word	0x2000040c
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	20000648 	.word	0x20000648
 8001e28:	40000400 	.word	0x40000400

08001e2c <Error_Handler>:
 8001e2c:	b672      	cpsid	i
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <Error_Handler+0x2>

08001e30 <Motor_init>:

void Motor_init(Motor *motor) {
  motor->pole_pairs = 14;
  motor->kv_rating = 150;

  motor->flux_angle_offset = 1.560145f;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <Motor_init+0x10>)
 8001e32:	6083      	str	r3, [r0, #8]
  motor->kv_rating = 150;
 8001e34:	210e      	movs	r1, #14
 8001e36:	2296      	movs	r2, #150	; 0x96
 8001e38:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	3fc7b2d5 	.word	0x3fc7b2d5

08001e44 <MotorController_setFluxAngle>:

Mode MotorController_getMode(MotorController *controller) {
  return controller->mode;
}

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8001e44:	b510      	push	{r4, lr}
 8001e46:	ed2d 8b04 	vpush	{d8-d9}
  value = fmodf(value, M_2PI_F);
 8001e4a:	ed9f 9a17 	vldr	s18, [pc, #92]	; 8001ea8 <MotorController_setFluxAngle+0x64>
 8001e4e:	eeb0 8a60 	vmov.f32	s16, s1
 8001e52:	eef0 0a49 	vmov.f32	s1, s18
 8001e56:	4604      	mov	r4, r0
 8001e58:	f008 fc64 	bl	800a724 <fmodf>
  return value >= 0.f ? value : (value + M_2PI_F);
 8001e5c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  value = fmodf(value, M_2PI_F);
 8001e64:	eef0 8a40 	vmov.f32	s17, s0
  return value >= 0.f ? value : (value + M_2PI_F);
 8001e68:	bfb8      	it	lt
 8001e6a:	ee70 8a09 	vaddlt.f32	s17, s0, s18
  float theta = wrapTo2Pi(angle_setpoint);
  float sin_theta = sinf(theta);
 8001e6e:	eeb0 0a68 	vmov.f32	s0, s17
 8001e72:	f008 fc11 	bl	800a698 <sinf>
 8001e76:	eef0 7a40 	vmov.f32	s15, s0
  float cos_theta = cosf(theta);
 8001e7a:	eeb0 0a68 	vmov.f32	s0, s17
  float sin_theta = sinf(theta);
 8001e7e:	eef0 8a67 	vmov.f32	s17, s15
  float cos_theta = cosf(theta);
 8001e82:	f008 fbc5 	bl	800a610 <cosf>
  float v_q = 0.0;
  float v_d = voltage_setpoint;

  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8001e86:	ee68 7a88 	vmul.f32	s15, s17, s16
  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8001e8a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001eac <MotorController_setFluxAngle+0x68>
 8001e8e:	ee20 8a08 	vmul.f32	s16, s0, s16
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8001e92:	eee0 7a07 	vfma.f32	s15, s0, s14
  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8001e96:	eea8 8ac7 	vfms.f32	s16, s17, s14
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8001e9a:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8001e9e:	ed84 8a22 	vstr	s16, [r4, #136]	; 0x88
}
 8001ea2:	ecbd 8b04 	vpop	{d8-d9}
 8001ea6:	bd10      	pop	{r4, pc}
 8001ea8:	40c90fdb 	.word	0x40c90fdb
 8001eac:	00000000 	.word	0x00000000

08001eb0 <MotorController_storeConfig>:
  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
#endif
}

uint32_t MotorController_storeConfig(MotorController *controller) {
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	b09c      	sub	sp, #112	; 0x70

  config.firmware_version                     = controller->firmware_version;
  config.device_id                            = controller->device_id;

  config.encoder_cpr                          = controller->encoder.cpr;
  config.encoder_position_offset              = controller->encoder.position_offset;
 8001eb4:	68c1      	ldr	r1, [r0, #12]
  config.encoder_filter_alpha                 = controller->encoder.filter_alpha;

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8001eb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8001eb8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  config.firmware_version                     = controller->firmware_version;
 8001eba:	f8d0 5110 	ldr.w	r5, [r0, #272]	; 0x110
  config.encoder_position_offset              = controller->encoder.position_offset;
 8001ebe:	9109      	str	r1, [sp, #36]	; 0x24
  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8001ec0:	930b      	str	r3, [sp, #44]	; 0x2c

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
  config.motor_kv_rating                      = controller->motor.kv_rating;
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8001ec2:	6d41      	ldr	r1, [r0, #84]	; 0x54

  config.current_controller_i_filter_alpha  = controller->current_controller.i_filter_alpha;
  config.current_controller_i_kp            = controller->current_controller.i_kp;
 8001ec4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  config.encoder_filter_alpha                 = controller->encoder.filter_alpha;
 8001ec6:	6904      	ldr	r4, [r0, #16]
  config.firmware_version                     = controller->firmware_version;
 8001ec8:	9507      	str	r5, [sp, #28]
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8001eca:	910f      	str	r1, [sp, #60]	; 0x3c
  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8001ecc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  config.current_controller_i_filter_alpha  = controller->current_controller.i_filter_alpha;
 8001ece:	6d81      	ldr	r1, [r0, #88]	; 0x58
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8001ed0:	920c      	str	r2, [sp, #48]	; 0x30
  config.current_controller_i_kp            = controller->current_controller.i_kp;
 8001ed2:	9311      	str	r3, [sp, #68]	; 0x44
  config.current_controller_i_ki            = controller->current_controller.i_ki;

  config.position_controller_position_kp      = controller->position_controller.position_kp;
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8001ed4:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
  config.position_controller_velocity_kp      = controller->position_controller.velocity_kp;
 8001ed8:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8001edc:	950d      	str	r5, [sp, #52]	; 0x34
  config.encoder_filter_alpha                 = controller->encoder.filter_alpha;
 8001ede:	940a      	str	r4, [sp, #40]	; 0x28
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8001ee0:	6d05      	ldr	r5, [r0, #80]	; 0x50
  config.current_controller_i_ki            = controller->current_controller.i_ki;
 8001ee2:	6e04      	ldr	r4, [r0, #96]	; 0x60
  config.current_controller_i_filter_alpha  = controller->current_controller.i_filter_alpha;
 8001ee4:	9110      	str	r1, [sp, #64]	; 0x40
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8001ee6:	9214      	str	r2, [sp, #80]	; 0x50
  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8001ee8:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
  config.device_id                            = controller->device_id;
 8001eec:	f890 2114 	ldrb.w	r2, [r0, #276]	; 0x114
  config.position_controller_velocity_kp      = controller->position_controller.velocity_kp;
 8001ef0:	9315      	str	r3, [sp, #84]	; 0x54
  config.encoder_cpr                          = controller->encoder.cpr;
 8001ef2:	6883      	ldr	r3, [r0, #8]
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8001ef4:	950e      	str	r5, [sp, #56]	; 0x38
  config.current_controller_i_ki            = controller->current_controller.i_ki;
 8001ef6:	9412      	str	r4, [sp, #72]	; 0x48
  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8001ef8:	9113      	str	r1, [sp, #76]	; 0x4c
  config.device_id                            = controller->device_id;
 8001efa:	9206      	str	r2, [sp, #24]
  config.encoder_cpr                          = controller->encoder.cpr;
 8001efc:	9308      	str	r3, [sp, #32]
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
  config.position_controller_torque_limit       = controller->position_controller.torque_limit;
 8001efe:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
  config.position_controller_velocity_limit     = controller->position_controller.velocity_limit;
 8001f02:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8001f06:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8001f0a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
 8001f0e:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
  config.position_controller_torque_limit       = controller->position_controller.torque_limit;
 8001f12:	9417      	str	r4, [sp, #92]	; 0x5c
  config.position_controller_velocity_limit     = controller->position_controller.velocity_limit;
 8001f14:	9119      	str	r1, [sp, #100]	; 0x64
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8001f16:	921a      	str	r2, [sp, #104]	; 0x68
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8001f18:	931b      	str	r3, [sp, #108]	; 0x6c
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
 8001f1a:	9516      	str	r5, [sp, #88]	; 0x58

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f1c:	2400      	movs	r4, #0
  HAL_FLASH_Unlock();
 8001f1e:	f002 ff41 	bl	8004da4 <HAL_FLASH_Unlock>
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8001f22:	2301      	movs	r3, #1
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8001f24:	223f      	movs	r2, #63	; 0x3f
  erase_init_struct.NbPages = 1;

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8001f26:	a901      	add	r1, sp, #4
 8001f28:	a802      	add	r0, sp, #8
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8001f2a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  erase_init_struct.NbPages = 1;
 8001f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8001f32:	f003 f80f 	bl	8004f54 <HAL_FLASHEx_Erase>
 8001f36:	b9a0      	cbnz	r0, 8001f62 <MotorController_storeConfig+0xb2>
 8001f38:	4c0c      	ldr	r4, [pc, #48]	; (8001f6c <MotorController_storeConfig+0xbc>)
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8001f3a:	4e0d      	ldr	r6, [pc, #52]	; (8001f70 <MotorController_storeConfig+0xc0>)
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <MotorController_storeConfig+0xc4>)
 8001f3e:	446b      	add	r3, sp
 8001f40:	4423      	add	r3, r4

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8001f42:	4621      	mov	r1, r4
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f002 ff7b 	bl	8004e44 <HAL_FLASH_Program>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8001f4e:	3408      	adds	r4, #8
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8001f50:	4605      	mov	r5, r0
 8001f52:	b930      	cbnz	r0, 8001f62 <MotorController_storeConfig+0xb2>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8001f54:	42b4      	cmp	r4, r6
 8001f56:	d1f1      	bne.n	8001f3c <MotorController_storeConfig+0x8c>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8001f58:	f002 ff38 	bl	8004dcc <HAL_FLASH_Lock>

  return HAL_OK;
 8001f5c:	4628      	mov	r0, r5
}
 8001f5e:	b01c      	add	sp, #112	; 0x70
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_FLASH_GetError();
 8001f62:	f002 ff3f 	bl	8004de4 <HAL_FLASH_GetError>
}
 8001f66:	b01c      	add	sp, #112	; 0x70
 8001f68:	bd70      	pop	{r4, r5, r6, pc}
 8001f6a:	bf00      	nop
 8001f6c:	0801f800 	.word	0x0801f800
 8001f70:	0801f858 	.word	0x0801f858
 8001f74:	f7fe0818 	.word	0xf7fe0818

08001f78 <MotorController_setMode>:
  if (READ_BITS(controller->error, ERROR_ESTOP)) {
    MotorController_setMode(controller, MODE_IDLE);
  }
}

void MotorController_setMode(MotorController *controller, Mode mode) {
 8001f78:	b530      	push	{r4, r5, lr}
 8001f7a:	460d      	mov	r5, r1
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	4604      	mov	r4, r0
  switch (mode) {
 8001f80:	2923      	cmp	r1, #35	; 0x23
 8001f82:	d813      	bhi.n	8001fac <MotorController_setMode+0x34>
 8001f84:	e8df f001 	tbb	[pc, r1]
 8001f88:	126f1284 	.word	0x126f1284
 8001f8c:	12125312 	.word	0x12125312
 8001f90:	12121212 	.word	0x12121212
 8001f94:	12121212 	.word	0x12121212
 8001f98:	21212121 	.word	0x21212121
 8001f9c:	12121212 	.word	0x12121212
 8001fa0:	12121212 	.word	0x12121212
 8001fa4:	12121212 	.word	0x12121212
 8001fa8:	21212121 	.word	0x21212121
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // blue
      }
      break;

    default:
      PowerStage_disablePWM(&controller->powerstage);
 8001fac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001fb0:	f001 f87a 	bl	80030a8 <PowerStage_disablePWM>
      controller->mode = MODE_IDLE;
      SET_BITS(controller->error, ERROR_INVALID_MODE);
 8001fb4:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
      controller->mode = MODE_IDLE;
 8001fb8:	2202      	movs	r2, #2
      SET_BITS(controller->error, ERROR_INVALID_MODE);
 8001fba:	f043 0320 	orr.w	r3, r3, #32
      controller->mode = MODE_IDLE;
 8001fbe:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
      SET_BITS(controller->error, ERROR_INVALID_MODE);
 8001fc2:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
      return;  // return directly, do not update mode
  }

  controller->mode = mode;
}
 8001fc6:	b003      	add	sp, #12
 8001fc8:	bd30      	pop	{r4, r5, pc}
      if (mode != controller->mode) {
 8001fca:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8001fce:	428b      	cmp	r3, r1
 8001fd0:	f000 808c 	beq.w	80020ec <MotorController_setMode+0x174>
        if (controller->mode != MODE_IDLE) {
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d1e9      	bne.n	8001fac <MotorController_setMode+0x34>
        controller->position_controller.position_setpoint = controller->position_controller.position_measured;
 8001fd8:	f8d0 10fc 	ldr.w	r1, [r0, #252]	; 0xfc
        controller->position_controller.velocity_setpoint = controller->position_controller.velocity_measured;
 8001fdc:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
        controller->position_controller.position_setpoint = controller->position_controller.position_measured;
 8001fe0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
        controller->position_controller.position_integrator = 0.f;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
        controller->position_controller.velocity_setpoint = controller->position_controller.velocity_measured;
 8001fea:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
        PowerStage_reset(&controller->powerstage);
 8001fee:	3024      	adds	r0, #36	; 0x24
        controller->position_controller.velocity_integrator = 0.f;
 8001ff0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        controller->current_controller.i_q_integrator = 0.f;
 8001ff4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        controller->current_controller.i_d_integrator = 0.f;
 8001ff8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
        controller->current_controller.v_q_setpoint = 0.f;
 8001ffc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        controller->current_controller.v_d_setpoint = 0.f;
 8002000:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        controller->current_controller.v_alpha_setpoint = 0.f;
 8002004:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        controller->current_controller.v_beta_setpoint = 0.f;
 8002008:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        controller->current_controller.v_a_setpoint = 0.f;
 800200c:	6763      	str	r3, [r4, #116]	; 0x74
        controller->current_controller.v_b_setpoint = 0.f;
 800200e:	67a3      	str	r3, [r4, #120]	; 0x78
        controller->current_controller.v_c_setpoint = 0.f;
 8002010:	67e3      	str	r3, [r4, #124]	; 0x7c
        PowerStage_reset(&controller->powerstage);
 8002012:	9001      	str	r0, [sp, #4]
 8002014:	f001 f830 	bl	8003078 <PowerStage_reset>
 8002018:	9801      	ldr	r0, [sp, #4]
      PowerStage_enableGateDriver(&controller->powerstage);
 800201a:	9001      	str	r0, [sp, #4]
 800201c:	f001 f83c 	bl	8003098 <PowerStage_enableGateDriver>
      PowerStage_enablePWM(&controller->powerstage);
 8002020:	9801      	ldr	r0, [sp, #4]
 8002022:	f001 f849 	bl	80030b8 <PowerStage_enablePWM>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8002026:	4932      	ldr	r1, [pc, #200]	; (80020f0 <MotorController_setMode+0x178>)
 8002028:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202c:	e025      	b.n	800207a <MotorController_setMode+0x102>
      if (mode != controller->mode) {
 800202e:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8002032:	2b05      	cmp	r3, #5
        PowerStage_reset(&controller->powerstage);
 8002034:	f100 0024 	add.w	r0, r0, #36	; 0x24
      if (mode != controller->mode) {
 8002038:	d143      	bne.n	80020c2 <MotorController_setMode+0x14a>
      PowerStage_enableGateDriver(&controller->powerstage);
 800203a:	9001      	str	r0, [sp, #4]
 800203c:	f001 f82c 	bl	8003098 <PowerStage_enableGateDriver>
      PowerStage_enablePWM(&controller->powerstage);
 8002040:	9801      	ldr	r0, [sp, #4]
 8002042:	f001 f839 	bl	80030b8 <PowerStage_enablePWM>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8002046:	492a      	ldr	r1, [pc, #168]	; (80020f0 <MotorController_setMode+0x178>)
 8002048:	680b      	ldr	r3, [r1, #0]
 800204a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002050:	60ca      	str	r2, [r1, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3) / 4);  // red
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	0892      	lsrs	r2, r2, #2
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 4);  // blue
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	0892      	lsrs	r2, r2, #2
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
  controller->mode = mode;
 800205e:	f884 510c 	strb.w	r5, [r4, #268]	; 0x10c
}
 8002062:	b003      	add	sp, #12
 8002064:	bd30      	pop	{r4, r5, pc}
      PowerStage_disablePWM(&controller->powerstage);
 8002066:	3024      	adds	r0, #36	; 0x24
 8002068:	9001      	str	r0, [sp, #4]
 800206a:	f001 f81d 	bl	80030a8 <PowerStage_disablePWM>
      PowerStage_enableGateDriver(&controller->powerstage);
 800206e:	9801      	ldr	r0, [sp, #4]
 8002070:	f001 f812 	bl	8003098 <PowerStage_enableGateDriver>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 9999);
 8002074:	491e      	ldr	r1, [pc, #120]	; (80020f0 <MotorController_setMode+0x178>)
 8002076:	f242 720f 	movw	r2, #9999	; 0x270f
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 800207a:	680b      	ldr	r3, [r1, #0]
 800207c:	60ca      	str	r2, [r1, #12]
      if (controller->error == ERROR_NO_ERROR) {
 800207e:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
      __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
      if (controller->error == ERROR_NO_ERROR) {
 8002084:	b9b9      	cbnz	r1, 80020b6 <MotorController_setMode+0x13e>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 8002086:	6359      	str	r1, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2);  // blue
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	0852      	lsrs	r2, r2, #1
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
 800208e:	e7e6      	b.n	800205e <MotorController_setMode+0xe6>
      PowerStage_disablePWM(&controller->powerstage);
 8002090:	3024      	adds	r0, #36	; 0x24
 8002092:	9001      	str	r0, [sp, #4]
 8002094:	f001 f808 	bl	80030a8 <PowerStage_disablePWM>
      PowerStage_disableGateDriver(&controller->powerstage);
 8002098:	9801      	ldr	r0, [sp, #4]
 800209a:	f000 fff5 	bl	8003088 <PowerStage_disableGateDriver>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 800209e:	4914      	ldr	r1, [pc, #80]	; (80020f0 <MotorController_setMode+0x178>)
 80020a0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020a4:	680b      	ldr	r3, [r1, #0]
 80020a6:	60ca      	str	r2, [r1, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 80020a8:	2100      	movs	r1, #0
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 80020ac:	6359      	str	r1, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 32);  // blue
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	0952      	lsrs	r2, r2, #5
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 80020b4:	e7d3      	b.n	800205e <MotorController_setMode+0xe6>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2);  // red
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // blue
 80020b8:	2100      	movs	r1, #0
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2);  // red
 80020ba:	0852      	lsrs	r2, r2, #1
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // blue
 80020be:	6399      	str	r1, [r3, #56]	; 0x38
 80020c0:	e7cd      	b.n	800205e <MotorController_setMode+0xe6>
        PowerStage_reset(&controller->powerstage);
 80020c2:	9001      	str	r0, [sp, #4]
 80020c4:	f000 ffd8 	bl	8003078 <PowerStage_reset>
        controller->current_controller.i_q_integrator = 0;
 80020c8:	2300      	movs	r3, #0
        controller->current_controller.v_c_setpoint = 0.f;
 80020ca:	9801      	ldr	r0, [sp, #4]
        controller->current_controller.i_q_integrator = 0;
 80020cc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        controller->current_controller.i_d_integrator = 0;
 80020d0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
        controller->current_controller.v_q_setpoint = 0.f;
 80020d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        controller->current_controller.v_d_setpoint = 0.f;
 80020d8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        controller->current_controller.v_alpha_setpoint = 0.f;
 80020dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        controller->current_controller.v_beta_setpoint = 0.f;
 80020e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        controller->current_controller.v_a_setpoint = 0.f;
 80020e4:	6763      	str	r3, [r4, #116]	; 0x74
        controller->current_controller.v_b_setpoint = 0.f;
 80020e6:	67a3      	str	r3, [r4, #120]	; 0x78
        controller->current_controller.v_c_setpoint = 0.f;
 80020e8:	67e3      	str	r3, [r4, #124]	; 0x7c
 80020ea:	e7a6      	b.n	800203a <MotorController_setMode+0xc2>
      PowerStage_disablePWM(&controller->powerstage);
 80020ec:	3024      	adds	r0, #36	; 0x24
 80020ee:	e794      	b.n	800201a <MotorController_setMode+0xa2>
 80020f0:	20000648 	.word	0x20000648

080020f4 <MotorController_init>:
void MotorController_init(MotorController *controller) {
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  controller->firmware_version = FIRMWARE_VERSION;
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <MotorController_init+0x18c>)
  Encoder_init(&controller->encoder, &hspi1);
 80020fa:	4c62      	ldr	r4, [pc, #392]	; (8002284 <MotorController_init+0x190>)
  controller->firmware_version = FIRMWARE_VERSION;
 80020fc:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
  controller->mode = MODE_DISABLED;
 8002100:	2600      	movs	r6, #0
  controller->device_id = DEVICE_CAN_ID;
 8002102:	220a      	movs	r2, #10
  controller->error = ERROR_INITIALIZATION_ERROR;
 8002104:	f04f 0804 	mov.w	r8, #4
void MotorController_init(MotorController *controller) {
 8002108:	b091      	sub	sp, #68	; 0x44
 800210a:	4605      	mov	r5, r0
  controller->device_id = DEVICE_CAN_ID;
 800210c:	f880 2114 	strb.w	r2, [r0, #276]	; 0x114
  controller->mode = MODE_DISABLED;
 8002110:	f880 610c 	strb.w	r6, [r0, #268]	; 0x10c
  controller->error = ERROR_INITIALIZATION_ERROR;
 8002114:	f8a0 810e 	strh.w	r8, [r0, #270]	; 0x10e
  Motor_init(&controller->motor);
 8002118:	304c      	adds	r0, #76	; 0x4c
 800211a:	f7ff fe89 	bl	8001e30 <Motor_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2, &hspi1);
 800211e:	f105 0924 	add.w	r9, r5, #36	; 0x24
  Encoder_init(&controller->encoder, &hspi1);
 8002122:	4621      	mov	r1, r4
 8002124:	4628      	mov	r0, r5
 8002126:	f7ff f9f7 	bl	8001518 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2, &hspi1);
 800212a:	4b57      	ldr	r3, [pc, #348]	; (8002288 <MotorController_init+0x194>)
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <MotorController_init+0x198>)
 800212e:	4958      	ldr	r1, [pc, #352]	; (8002290 <MotorController_init+0x19c>)
 8002130:	9400      	str	r4, [sp, #0]
 8002132:	4648      	mov	r0, r9
 8002134:	f000 ff88 	bl	8003048 <PowerStage_init>
  CurrentController_init(&controller->current_controller);
 8002138:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800213c:	f7ff f8aa 	bl	8001294 <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002140:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 8002144:	f000 fef4 	bl	8002f30 <PositionController_init>
  MotorController_storeConfig(controller);
 8002148:	4628      	mov	r0, r5
 800214a:	f7ff feb1 	bl	8001eb0 <MotorController_storeConfig>
  filter_config.FilterID1 = controller->device_id;    // filter
 800214e:	f895 3114 	ldrb.w	r3, [r5, #276]	; 0x114
 8002152:	9307      	str	r3, [sp, #28]
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 8002154:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002158:	2350      	movs	r3, #80	; 0x50
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800215a:	f04f 0b01 	mov.w	fp, #1
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 800215e:	a909      	add	r1, sp, #36	; 0x24
 8002160:	484c      	ldr	r0, [pc, #304]	; (8002294 <MotorController_init+0x1a0>)
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002162:	f8cd b018 	str.w	fp, [sp, #24]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 8002166:	f04f 0a02 	mov.w	sl, #2
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 800216a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  filter_config.FilterIndex = 0;
 800216e:	e9cd 6603 	strd	r6, r6, [sp, #12]
  cordic_config.Function = CORDIC_FUNCTION_COSINE; // ouput : cosine, then sine
 8002172:	e9cd 6608 	strd	r6, r6, [sp, #32]
  cordic_config.InSize = CORDIC_INSIZE_32BITS; // q31
 8002176:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  cordic_config.NbWrite = CORDIC_NBWRITE_1; // ARG2 is 1 default
 800217a:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
  filter_config.FilterType = FDCAN_FILTER_MASK;
 800217e:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 8002182:	f002 fa03 	bl	800458c <HAL_CORDIC_Configure>
  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002186:	a903      	add	r1, sp, #12
 8002188:	4843      	ldr	r0, [pc, #268]	; (8002298 <MotorController_init+0x1a4>)
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 800218a:	4f44      	ldr	r7, [pc, #272]	; (800229c <MotorController_init+0x1a8>)
  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800218c:	f002 fb8a 	bl	80048a4 <HAL_FDCAN_ConfigFilter>
 8002190:	4604      	mov	r4, r0
  status |= HAL_FDCAN_Start(&hfdcan1);
 8002192:	4841      	ldr	r0, [pc, #260]	; (8002298 <MotorController_init+0x1a4>)
 8002194:	f002 fbb8 	bl	8004908 <HAL_FDCAN_Start>
 8002198:	4320      	orrs	r0, r4
  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800219a:	4632      	mov	r2, r6
 800219c:	4659      	mov	r1, fp
  status |= HAL_FDCAN_Start(&hfdcan1);
 800219e:	b2c4      	uxtb	r4, r0
  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80021a0:	483d      	ldr	r0, [pc, #244]	; (8002298 <MotorController_init+0x1a4>)
 80021a2:	f002 fcb3 	bl	8004b0c <HAL_FDCAN_ActivateNotification>
 80021a6:	4304      	orrs	r4, r0
  status |= HAL_OPAMP_Start(&hopamp1);
 80021a8:	483d      	ldr	r0, [pc, #244]	; (80022a0 <MotorController_init+0x1ac>)
 80021aa:	f003 f8e5 	bl	8005378 <HAL_OPAMP_Start>
  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80021ae:	b2e4      	uxtb	r4, r4
  status |= HAL_OPAMP_Start(&hopamp1);
 80021b0:	4304      	orrs	r4, r0
  status |= HAL_OPAMP_Start(&hopamp2);
 80021b2:	483c      	ldr	r0, [pc, #240]	; (80022a4 <MotorController_init+0x1b0>)
 80021b4:	f003 f8e0 	bl	8005378 <HAL_OPAMP_Start>
  status |= HAL_OPAMP_Start(&hopamp1);
 80021b8:	b2e4      	uxtb	r4, r4
  status |= HAL_OPAMP_Start(&hopamp2);
 80021ba:	4304      	orrs	r4, r0
  status |= HAL_OPAMP_Start(&hopamp3);
 80021bc:	483a      	ldr	r0, [pc, #232]	; (80022a8 <MotorController_init+0x1b4>)
 80021be:	f003 f8db 	bl	8005378 <HAL_OPAMP_Start>
  status |= HAL_OPAMP_Start(&hopamp2);
 80021c2:	b2e4      	uxtb	r4, r4
  status |= HAL_OPAMP_Start(&hopamp3);
 80021c4:	4304      	orrs	r4, r0
  status |= HAL_ADCEx_InjectedStart(&hadc1);
 80021c6:	4831      	ldr	r0, [pc, #196]	; (800228c <MotorController_init+0x198>)
 80021c8:	f001 fddc 	bl	8003d84 <HAL_ADCEx_InjectedStart>
  status |= HAL_OPAMP_Start(&hopamp3);
 80021cc:	b2e4      	uxtb	r4, r4
  status |= HAL_ADCEx_InjectedStart(&hadc1);
 80021ce:	4304      	orrs	r4, r0
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 80021d0:	482d      	ldr	r0, [pc, #180]	; (8002288 <MotorController_init+0x194>)
 80021d2:	f001 fdd7 	bl	8003d84 <HAL_ADCEx_InjectedStart>
  status |= HAL_ADCEx_InjectedStart(&hadc1);
 80021d6:	b2e4      	uxtb	r4, r4
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 80021d8:	4304      	orrs	r4, r0
  status |= HAL_TIM_Base_Start_IT(&htim2);                  // safety watchdog timer
 80021da:	4834      	ldr	r0, [pc, #208]	; (80022ac <MotorController_init+0x1b8>)
 80021dc:	f004 fa7c 	bl	80066d8 <HAL_TIM_Base_Start_IT>
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 80021e0:	b2e4      	uxtb	r4, r4
  status |= HAL_TIM_Base_Start_IT(&htim2);                  // safety watchdog timer
 80021e2:	4304      	orrs	r4, r0
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 80021e4:	4631      	mov	r1, r6
 80021e6:	4638      	mov	r0, r7
 80021e8:	f004 fb42 	bl	8006870 <HAL_TIM_PWM_Start>
  status |= HAL_TIM_Base_Start_IT(&htim2);                  // safety watchdog timer
 80021ec:	b2e4      	uxtb	r4, r4
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 80021ee:	4641      	mov	r1, r8
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 80021f0:	4304      	orrs	r4, r0
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 80021f2:	4638      	mov	r0, r7
 80021f4:	f004 fb3c 	bl	8006870 <HAL_TIM_PWM_Start>
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 80021f8:	b2e4      	uxtb	r4, r4
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 80021fa:	4304      	orrs	r4, r0
  status |= HAL_TIM_Base_Start(&htim6);                     // time keeper timer
 80021fc:	482c      	ldr	r0, [pc, #176]	; (80022b0 <MotorController_init+0x1bc>)
 80021fe:	f004 fa37 	bl	8006670 <HAL_TIM_Base_Start>
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 8002202:	b2e4      	uxtb	r4, r4
  __HAL_TIM_SET_AUTORELOAD(&htim3, 9999);
 8002204:	683b      	ldr	r3, [r7, #0]
  status |= HAL_TIM_Base_Start(&htim6);                     // time keeper timer
 8002206:	4304      	orrs	r4, r0
  __HAL_TIM_SET_AUTORELOAD(&htim3, 9999);
 8002208:	f242 700f 	movw	r0, #9999	; 0x270f
 800220c:	62d8      	str	r0, [r3, #44]	; 0x2c
 800220e:	60f8      	str	r0, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3));   // red
 8002210:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002212:	6358      	str	r0, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3));   // blue
 8002214:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002216:	6398      	str	r0, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8002218:	465a      	mov	r2, fp
 800221a:	4641      	mov	r1, r8
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f003 f81c 	bl	800525c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002224:	2064      	movs	r0, #100	; 0x64
 8002226:	f001 fc5b 	bl	8003ae0 <HAL_Delay>
  status |= HAL_TIM_Base_Start(&htim6);                     // time keeper timer
 800222a:	b2e4      	uxtb	r4, r4
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 800222c:	4648      	mov	r0, r9
 800222e:	f000 ffff 	bl	8003230 <PowerStage_calibratePhaseCurrentOffset>
  if (status != HAL_OK) {
 8002232:	b1cc      	cbz	r4, 8002268 <MotorController_init+0x174>
    SET_BITS(controller->error, ERROR_INITIALIZATION_ERROR);
 8002234:	f8b5 310e 	ldrh.w	r3, [r5, #270]	; 0x10e
    controller->mode = MODE_DISABLED;
 8002238:	f885 610c 	strb.w	r6, [r5, #268]	; 0x10c
    SET_BITS(controller->error, ERROR_INITIALIZATION_ERROR);
 800223c:	ea43 0308 	orr.w	r3, r3, r8
 8002240:	f8a5 310e 	strh.w	r3, [r5, #270]	; 0x10e
      PowerStage_disablePWM(&controller->powerstage);
 8002244:	4648      	mov	r0, r9
 8002246:	f000 ff2f 	bl	80030a8 <PowerStage_disablePWM>
      PowerStage_disableGateDriver(&controller->powerstage);
 800224a:	4648      	mov	r0, r9
 800224c:	f000 ff1c 	bl	8003088 <PowerStage_disableGateDriver>
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // red
 8002258:	635e      	str	r6, [r3, #52]	; 0x34
      __HAL_TIM_SET_AUTORELOAD(&htim3, 19999);
 800225a:	60fa      	str	r2, [r7, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 32);  // blue
 800225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225e:	0952      	lsrs	r2, r2, #5
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
  controller->mode = mode;
 8002262:	f885 610c 	strb.w	r6, [r5, #268]	; 0x10c
    while (1) {
 8002266:	e7fe      	b.n	8002266 <MotorController_init+0x172>
  controller->error = ERROR_NO_ERROR;
 8002268:	f8a5 410e 	strh.w	r4, [r5, #270]	; 0x10e
  controller->mode = MODE_IDLE;
 800226c:	f885 a10c 	strb.w	sl, [r5, #268]	; 0x10c
  MotorController_setMode(controller, MODE_IDLE);
 8002270:	4651      	mov	r1, sl
 8002272:	4628      	mov	r0, r5
 8002274:	f7ff fe80 	bl	8001f78 <MotorController_setMode>
}
 8002278:	b011      	add	sp, #68	; 0x44
 800227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800227e:	bf00      	nop
 8002280:	00200100 	.word	0x00200100
 8002284:	2000054c 	.word	0x2000054c
 8002288:	200003a0 	.word	0x200003a0
 800228c:	20000334 	.word	0x20000334
 8002290:	200005b0 	.word	0x200005b0
 8002294:	2000040c 	.word	0x2000040c
 8002298:	20000434 	.word	0x20000434
 800229c:	20000648 	.word	0x20000648
 80022a0:	20000498 	.word	0x20000498
 80022a4:	200004d4 	.word	0x200004d4
 80022a8:	20000510 	.word	0x20000510
 80022ac:	200005fc 	.word	0x200005fc
 80022b0:	20000694 	.word	0x20000694

080022b4 <MotorController_updateCommutation>:

void MotorController_updateCommutation(MotorController *controller) {
 80022b4:	b510      	push	{r4, lr}
//  float position_measured = Encoder_getRelativePosition(&controller->encoder);
  float position_measured = Encoder_getPositionMeasured(&controller->encoder);

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 80022b6:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 80022ba:	ed90 7a07 	vldr	s14, [r0, #28]
 80022be:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
void MotorController_updateCommutation(MotorController *controller) {
 80022c2:	ed2d 8b02 	vpush	{d8}
  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 80022c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  value = fmodf(value, M_2PI_F);
 80022ca:	eddf 8a25 	vldr	s17, [pc, #148]	; 8002360 <MotorController_updateCommutation+0xac>
 80022ce:	ee97 0a87 	vfnms.f32	s0, s15, s14
void MotorController_updateCommutation(MotorController *controller) {
 80022d2:	4604      	mov	r4, r0
 80022d4:	eef0 0a68 	vmov.f32	s1, s17
 80022d8:	f008 fa24 	bl	800a724 <fmodf>
  return value >= 0.f ? value : (value + M_2PI_F);
 80022dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  value = fmodf(value, M_2PI_F);
 80022e4:	eeb0 8a40 	vmov.f32	s16, s0
  return value >= 0.f ? value : (value + M_2PI_F);
 80022e8:	bfb8      	it	lt
 80022ea:	ee30 8a28 	vaddlt.f32	s16, s0, s17

//  controller->debug_buffer = theta;

  float sin_theta = sinf(theta);
 80022ee:	eeb0 0a48 	vmov.f32	s0, s16
 80022f2:	f008 f9d1 	bl	800a698 <sinf>
 80022f6:	eef0 7a40 	vmov.f32	s15, s0
  float cos_theta = cosf(theta);
 80022fa:	eeb0 0a48 	vmov.f32	s0, s16
  float sin_theta = sinf(theta);
 80022fe:	eeb0 8a67 	vmov.f32	s16, s15
  float cos_theta = cosf(theta);
 8002302:	f008 f985 	bl	800a610 <cosf>

  CurrentController_update(&controller->current_controller,
 8002306:	ed94 1a12 	vldr	s2, [r4, #72]	; 0x48
 800230a:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
  float cos_theta = cosf(theta);
 800230e:	eef0 0a40 	vmov.f32	s1, s0
  CurrentController_update(&controller->current_controller,
 8002312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002316:	eeb0 0a48 	vmov.f32	s0, s16
 800231a:	f7fe ffcf 	bl	80012bc <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 800231e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8002322:	2b02      	cmp	r3, #2
 8002324:	d00d      	beq.n	8002342 <MotorController_updateCommutation+0x8e>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 8002326:	ecbd 8b02 	vpop	{d8}
    PowerStage_setBridgeOutput(&controller->powerstage,
 800232a:	ed94 1a1f 	vldr	s2, [r4, #124]	; 0x7c
 800232e:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
 8002332:	ed94 0a1d 	vldr	s0, [r4, #116]	; 0x74
 8002336:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
 800233a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PowerStage_setBridgeOutput(&controller->powerstage,
 800233e:	f000 bee9 	b.w	8003114 <PowerStage_setBridgeOutput>
}
 8002342:	ecbd 8b02 	vpop	{d8}
    PowerStage_setBridgeOutput(&controller->powerstage,
 8002346:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8002364 <MotorController_updateCommutation+0xb0>
 800234a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800234e:	eef0 0a41 	vmov.f32	s1, s2
}
 8002352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PowerStage_setBridgeOutput(&controller->powerstage,
 8002356:	eeb0 0a41 	vmov.f32	s0, s2
 800235a:	f000 bedb 	b.w	8003114 <PowerStage_setBridgeOutput>
 800235e:	bf00      	nop
 8002360:	40c90fdb 	.word	0x40c90fdb
 8002364:	00000000 	.word	0x00000000

08002368 <MotorController_update>:
void MotorController_update(MotorController *controller) {
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	4604      	mov	r4, r0
 800236c:	ed2d 8b02 	vpush	{d8}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002370:	4838      	ldr	r0, [pc, #224]	; (8002454 <MotorController_update+0xec>)
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8002372:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8002458 <MotorController_update+0xf0>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  PowerStage_updatePhaseCurrent(&controller->powerstage,
 800237c:	f104 0524 	add.w	r5, r4, #36	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002380:	f002 ff6c 	bl	800525c <HAL_GPIO_WritePin>
  PowerStage_updatePhaseCurrent(&controller->powerstage,
 8002384:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8002388:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800238c:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8002390:	4628      	mov	r0, r5
 8002392:	f000 ff87 	bl	80032a4 <PowerStage_updatePhaseCurrent>
  Encoder_update(&controller->encoder, 1.f / 20000.f);
 8002396:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800245c <MotorController_update+0xf4>
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff f8d2 	bl	8001544 <Encoder_update>
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 80023a0:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 80023a4:	edd4 6a2a 	vldr	s13, [r4, #168]	; 0xa8
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 80023a8:	6a23      	ldr	r3, [r4, #32]
 80023aa:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 80023ae:	ee66 6a88 	vmul.f32	s13, s13, s16
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
static inline float Encoder_getPositionMeasured(Encoder *encoder) {
  return encoder->position;
}

static inline float Encoder_getPosition(Encoder *encoder) {
  return encoder->position + encoder->position_offset;
 80023b6:	edd4 7a07 	vldr	s15, [r4, #28]
 80023ba:	ee86 6a87 	vdiv.f32	s12, s13, s14
  PowerStage_updateBusVoltage(&controller->powerstage);
 80023be:	4628      	mov	r0, r5
 80023c0:	ed94 7a03 	vldr	s14, [r4, #12]
  controller->position_controller.torque_measured = (8.3f * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 80023c4:	ed84 6a39 	vstr	s12, [r4, #228]	; 0xe4
 80023c8:	ee77 7a87 	vadd.f32	s15, s15, s14
  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 80023cc:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
  PowerStage_updateBusVoltage(&controller->powerstage);
 80023d0:	f000 ffa8 	bl	8003324 <PowerStage_updateBusVoltage>
  PositionController_update(&controller->position_controller, controller->mode);
 80023d4:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
 80023d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80023dc:	f000 fdcc 	bl	8002f78 <PositionController_update>
      || controller->mode == MODE_TORQUE) {
 80023e0:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
  if (controller->mode == MODE_POSITION
 80023e4:	3b11      	subs	r3, #17
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d80e      	bhi.n	8002408 <MotorController_update+0xa0>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3f;
 80023ea:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 80023ee:	ed94 7a3a 	vldr	s14, [r4, #232]	; 0xe8
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    controller->current_controller.i_d_target = 0.f;
 80023f6:	2300      	movs	r3, #0
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3f;
 80023f8:	ee67 7a87 	vmul.f32	s15, s15, s14
    controller->current_controller.i_d_target = 0.f;
 80023fc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3f;
 8002400:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8002404:	ed84 7a28 	vstr	s14, [r4, #160]	; 0xa0
  if (PowerStage_updateErrorStatus(&controller->powerstage)) {
 8002408:	4628      	mov	r0, r5
 800240a:	f000 fe5d 	bl	80030c8 <PowerStage_updateErrorStatus>
    SET_BITS(controller->error, ERROR_POWERSTAGE_ERROR);
 800240e:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
  if (PowerStage_updateErrorStatus(&controller->powerstage)) {
 8002412:	b190      	cbz	r0, 800243a <MotorController_update+0xd2>
    SET_BITS(controller->error, ERROR_POWERSTAGE_ERROR);
 8002414:	f043 0310 	orr.w	r3, r3, #16
 8002418:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
  if (READ_BITS(controller->error, ERROR_ESTOP)) {
 800241c:	079b      	lsls	r3, r3, #30
 800241e:	d413      	bmi.n	8002448 <MotorController_update+0xe0>
  MotorController_updateCommutation(controller);
 8002420:	4620      	mov	r0, r4
 8002422:	f7ff ff47 	bl	80022b4 <MotorController_updateCommutation>
}
 8002426:	ecbd 8b02 	vpop	{d8}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 800242a:	480a      	ldr	r0, [pc, #40]	; (8002454 <MotorController_update+0xec>)
}
 800242c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002436:	f002 bf11 	b.w	800525c <HAL_GPIO_WritePin>
    CLEAR_BITS(controller->error, ERROR_POWERSTAGE_ERROR);
 800243a:	f023 0310 	bic.w	r3, r3, #16
 800243e:	b29b      	uxth	r3, r3
 8002440:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
  if (READ_BITS(controller->error, ERROR_ESTOP)) {
 8002444:	079b      	lsls	r3, r3, #30
 8002446:	d5eb      	bpl.n	8002420 <MotorController_update+0xb8>
    MotorController_setMode(controller, MODE_IDLE);
 8002448:	2102      	movs	r1, #2
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff fd94 	bl	8001f78 <MotorController_setMode>
 8002450:	e7e6      	b.n	8002420 <MotorController_update+0xb8>
 8002452:	bf00      	nop
 8002454:	48000800 	.word	0x48000800
 8002458:	4104cccd 	.word	0x4104cccd
 800245c:	3851b717 	.word	0x3851b717

08002460 <MotorController_runCalibrationSequence>:
    MotorController_runCalibrationSequence(controller);
    return;
  }
}

void MotorController_runCalibrationSequence(MotorController *controller) {
 8002460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002464:	ed2d 8b04 	vpush	{d8-d9}
  MotorController_setMode(controller, MODE_CALIBRATION);
 8002468:	2105      	movs	r1, #5
void MotorController_runCalibrationSequence(MotorController *controller) {
 800246a:	b0a5      	sub	sp, #148	; 0x94
 800246c:	4604      	mov	r4, r0
  MotorController_setMode(controller, MODE_CALIBRATION);
 800246e:	f7ff fd83 	bl	8001f78 <MotorController_setMode>

  HAL_Delay(10);  // wait for state machine to switch
 8002472:	200a      	movs	r0, #10
 8002474:	f001 fb34 	bl	8003ae0 <HAL_Delay>

  // open loop calibration
  float flux_angle_setpoint = 0;
  float voltage_setpoint = 0.2;

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002478:	eddf 0ae1 	vldr	s1, [pc, #900]	; 8002800 <MotorController_runCalibrationSequence+0x3a0>
 800247c:	ed9f 0ae1 	vldr	s0, [pc, #900]	; 8002804 <MotorController_runCalibrationSequence+0x3a4>
  float voltage_setpoint = 0.2;
 8002480:	ed9f 8adf 	vldr	s16, [pc, #892]	; 8002800 <MotorController_runCalibrationSequence+0x3a0>

  float phase_current = 0;

  while (phase_current < CALIBRATION_CURRENT) {
    HAL_Delay(100);
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002484:	ed9f 9adf 	vldr	s18, [pc, #892]	; 8002804 <MotorController_runCalibrationSequence+0x3a4>
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff fcdb 	bl	8001e44 <MotorController_setFluxAngle>
  HAL_Delay(500);
 800248e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002492:	f001 fb25 	bl	8003ae0 <HAL_Delay>

    voltage_setpoint += 0.1;
 8002496:	f20f 3950 	addw	r9, pc, #848	; 0x350
 800249a:	e9d9 8900 	ldrd	r8, r9, [r9]
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 800249e:	f20f 3b50 	addw	fp, pc, #848	; 0x350
 80024a2:	e9db ab00 	ldrd	sl, fp, [fp]
  HAL_Delay(500);
 80024a6:	25ee      	movs	r5, #238	; 0xee
    HAL_Delay(100);
 80024a8:	2064      	movs	r0, #100	; 0x64
 80024aa:	f001 fb19 	bl	8003ae0 <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80024ae:	eef0 0a48 	vmov.f32	s1, s16
 80024b2:	eeb0 0a49 	vmov.f32	s0, s18
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff fcc4 	bl	8001e44 <MotorController_setFluxAngle>
    voltage_setpoint += 0.1;
 80024bc:	ee18 0a10 	vmov	r0, s16
 80024c0:	f7fe f86a 	bl	8000598 <__aeabi_f2d>
 80024c4:	4642      	mov	r2, r8
 80024c6:	464b      	mov	r3, r9
 80024c8:	f7fd ff08 	bl	80002dc <__adddf3>
 80024cc:	f7fe fb94 	bl	8000bf8 <__aeabi_d2f>
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 80024d0:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 80024d4:	eef0 7ae7 	vabs.f32	s15, s15
    voltage_setpoint += 0.1;
 80024d8:	ee08 0a10 	vmov	s16, r0
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 80024dc:	ee17 0a90 	vmov	r0, s15
 80024e0:	f7fe f85a 	bl	8000598 <__aeabi_f2d>
 80024e4:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
 80024e8:	eef0 7ae7 	vabs.f32	s15, s15
 80024ec:	4606      	mov	r6, r0
 80024ee:	ee17 0a90 	vmov	r0, s15
 80024f2:	460f      	mov	r7, r1
 80024f4:	f7fe f850 	bl	8000598 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4630      	mov	r0, r6
 80024fe:	4639      	mov	r1, r7
 8002500:	f7fd feec 	bl	80002dc <__adddf3>
 8002504:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 8002508:	eef0 7ae7 	vabs.f32	s15, s15
 800250c:	4606      	mov	r6, r0
 800250e:	ee17 0a90 	vmov	r0, s15
 8002512:	460f      	mov	r7, r1
 8002514:	f7fe f840 	bl	8000598 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4630      	mov	r0, r6
 800251e:	4639      	mov	r1, r7
 8002520:	f7fd fedc 	bl	80002dc <__adddf3>
 8002524:	4652      	mov	r2, sl
 8002526:	465b      	mov	r3, fp
 8002528:	f7fe f88e 	bl	8000648 <__aeabi_dmul>
 800252c:	f7fe fb64 	bl	8000bf8 <__aeabi_d2f>
 8002530:	4603      	mov	r3, r0
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 8002532:	ee18 0a10 	vmov	r0, s16
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 8002536:	ee08 3a90 	vmov	s17, r3
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 800253a:	f7fe f82d 	bl	8000598 <__aeabi_f2d>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	ee18 0a90 	vmov	r0, s17
 8002546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800254a:	f7fe f825 	bl	8000598 <__aeabi_f2d>
 800254e:	4606      	mov	r6, r0
 8002550:	460f      	mov	r7, r1
 8002552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002556:	49ac      	ldr	r1, [pc, #688]	; (8002808 <MotorController_runCalibrationSequence+0x3a8>)
 8002558:	e9cd 6700 	strd	r6, r7, [sp]
 800255c:	a804      	add	r0, sp, #16
 800255e:	f005 fddf 	bl	8008120 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002562:	a804      	add	r0, sp, #16
 8002564:	f7fd fe5c 	bl	8000220 <strlen>
 8002568:	4602      	mov	r2, r0
 800256a:	230a      	movs	r3, #10
 800256c:	48a7      	ldr	r0, [pc, #668]	; (800280c <MotorController_runCalibrationSequence+0x3ac>)
 800256e:	b292      	uxth	r2, r2
 8002570:	a904      	add	r1, sp, #16
 8002572:	f004 ffcb 	bl	800750c <HAL_UART_Transmit>
    }

    if (voltage_setpoint > 24) {
 8002576:	3d01      	subs	r5, #1
  while (phase_current < CALIBRATION_CURRENT) {
 8002578:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    if (voltage_setpoint > 24) {
 800257c:	f000 8168 	beq.w	8002850 <MotorController_runCalibrationSequence+0x3f0>
  while (phase_current < CALIBRATION_CURRENT) {
 8002580:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d48e      	bmi.n	80024a8 <MotorController_runCalibrationSequence+0x48>
      MotorController_setMode(controller, MODE_IDLE);
      return;
    }
  }

  HAL_Delay(500);
 800258a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800258e:	f001 faa7 	bl	8003ae0 <HAL_Delay>
 8002592:	edd4 9a03 	vldr	s19, [r4, #12]
 8002596:	edd4 7a07 	vldr	s15, [r4, #28]

  float start_position = Encoder_getPosition(&controller->encoder);

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 800259a:	eddf 8a9d 	vldr	s17, [pc, #628]	; 8002810 <MotorController_runCalibrationSequence+0x3b0>
 800259e:	a796      	add	r7, pc, #600	; (adr r7, 80027f8 <MotorController_runCalibrationSequence+0x398>)
 80025a0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80025a4:	ee79 9aa7 	vadd.f32	s19, s19, s15
 80025a8:	2500      	movs	r5, #0
 80025aa:	b22b      	sxth	r3, r5
 80025ac:	ee07 3a90 	vmov	s15, r3
 80025b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int16_t i=0; i<=500; i+=1) {
 80025b4:	3501      	adds	r5, #1
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80025b6:	eec7 7aa8 	vdiv.f32	s15, s15, s17
 80025ba:	ee17 0a90 	vmov	r0, s15
 80025be:	f7fd ffeb 	bl	8000598 <__aeabi_f2d>
 80025c2:	463b      	mov	r3, r7
 80025c4:	4632      	mov	r2, r6
 80025c6:	f7fe f83f 	bl	8000648 <__aeabi_dmul>
 80025ca:	f7fe fb15 	bl	8000bf8 <__aeabi_d2f>

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80025ce:	eef0 0a48 	vmov.f32	s1, s16
 80025d2:	ee00 0a10 	vmov	s0, r0
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7ff fc34 	bl	8001e44 <MotorController_setFluxAngle>
    HAL_Delay(2);
 80025dc:	2002      	movs	r0, #2
 80025de:	f001 fa7f 	bl	8003ae0 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 80025e2:	f240 13f5 	movw	r3, #501	; 0x1f5
 80025e6:	429d      	cmp	r5, r3
 80025e8:	d1df      	bne.n	80025aa <MotorController_runCalibrationSequence+0x14a>
  }
  HAL_Delay(500);
 80025ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ee:	f001 fa77 	bl	8003ae0 <HAL_Delay>
 80025f2:	ed94 9a07 	vldr	s18, [r4, #28]
 80025f6:	edd4 7a03 	vldr	s15, [r4, #12]

  float end_position = Encoder_getPosition(&controller->encoder);

  for (int16_t i=500; i>=0; i-=1) {
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80025fa:	eddf 8a85 	vldr	s17, [pc, #532]	; 8002810 <MotorController_runCalibrationSequence+0x3b0>
 80025fe:	a77e      	add	r7, pc, #504	; (adr r7, 80027f8 <MotorController_runCalibrationSequence+0x398>)
 8002600:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002604:	ee39 9a27 	vadd.f32	s18, s18, s15
  for (int16_t i=500; i>=0; i-=1) {
 8002608:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 800260c:	ee07 5a90 	vmov	s15, r5
 8002610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002614:	3d01      	subs	r5, #1
 8002616:	eec7 7aa8 	vdiv.f32	s15, s15, s17
 800261a:	b22d      	sxth	r5, r5
 800261c:	ee17 0a90 	vmov	r0, s15
 8002620:	f7fd ffba 	bl	8000598 <__aeabi_f2d>
 8002624:	463b      	mov	r3, r7
 8002626:	4632      	mov	r2, r6
 8002628:	f7fe f80e 	bl	8000648 <__aeabi_dmul>
 800262c:	f7fe fae4 	bl	8000bf8 <__aeabi_d2f>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002630:	eef0 0a48 	vmov.f32	s1, s16
 8002634:	ee00 0a10 	vmov	s0, r0
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fc03 	bl	8001e44 <MotorController_setFluxAngle>
    HAL_Delay(2);
 800263e:	2002      	movs	r0, #2
 8002640:	f001 fa4e 	bl	8003ae0 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 8002644:	1c6b      	adds	r3, r5, #1
 8002646:	d1e1      	bne.n	800260c <MotorController_runCalibrationSequence+0x1ac>
  }

  flux_angle_setpoint = 0;
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8002648:	eef0 0a48 	vmov.f32	s1, s16
 800264c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8002804 <MotorController_runCalibrationSequence+0x3a4>
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff fbf7 	bl	8001e44 <MotorController_setFluxAngle>
  HAL_Delay(500);
 8002656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800265a:	f001 fa41 	bl	8003ae0 <HAL_Delay>
 800265e:	ed94 7a07 	vldr	s14, [r4, #28]
 8002662:	edd4 7a03 	vldr	s15, [r4, #12]

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 8002666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266a:	ee17 0a90 	vmov	r0, s15
 800266e:	f7fd ff93 	bl	8000598 <__aeabi_f2d>
 8002672:	4b68      	ldr	r3, [pc, #416]	; (8002814 <MotorController_runCalibrationSequence+0x3b4>)
 8002674:	2200      	movs	r2, #0
 8002676:	f7fd ffe7 	bl	8000648 <__aeabi_dmul>
 800267a:	4606      	mov	r6, r0
 800267c:	ee19 0a90 	vmov	r0, s19
 8002680:	460f      	mov	r7, r1
 8002682:	f7fd ff89 	bl	8000598 <__aeabi_f2d>
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <MotorController_runCalibrationSequence+0x3b4>)
 8002688:	2200      	movs	r2, #0
 800268a:	f7fd ffdd 	bl	8000648 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4630      	mov	r0, r6
 8002694:	4639      	mov	r1, r7
 8002696:	f7fd fe21 	bl	80002dc <__adddf3>
 800269a:	f7fe faad 	bl	8000bf8 <__aeabi_d2f>
 800269e:	4603      	mov	r3, r0
 80026a0:	ee08 3a10 	vmov	s16, r3
  HAL_Delay(500);
 80026a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a8:	f001 fa1a 	bl	8003ae0 <HAL_Delay>

  // release motor
  PowerStage_disablePWM(&controller->powerstage);
 80026ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026b0:	f000 fcfa 	bl	80030a8 <PowerStage_disablePWM>

  float delta_position = end_position - start_position;

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 80026b4:	ee18 0a10 	vmov	r0, s16
 80026b8:	f7fd ff6e 	bl	8000598 <__aeabi_f2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	a804      	add	r0, sp, #16
 80026c2:	4955      	ldr	r1, [pc, #340]	; (8002818 <MotorController_runCalibrationSequence+0x3b8>)
 80026c4:	f005 fd2c 	bl	8008120 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80026c8:	a804      	add	r0, sp, #16
 80026ca:	f7fd fda9 	bl	8000220 <strlen>
 80026ce:	230a      	movs	r3, #10
 80026d0:	b282      	uxth	r2, r0
 80026d2:	a904      	add	r1, sp, #16
 80026d4:	484d      	ldr	r0, [pc, #308]	; (800280c <MotorController_runCalibrationSequence+0x3ac>)
 80026d6:	f004 ff19 	bl	800750c <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 80026da:	ee19 0a10 	vmov	r0, s18
 80026de:	f7fd ff5b 	bl	8000598 <__aeabi_f2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	a804      	add	r0, sp, #16
 80026e8:	494c      	ldr	r1, [pc, #304]	; (800281c <MotorController_runCalibrationSequence+0x3bc>)
 80026ea:	f005 fd19 	bl	8008120 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80026ee:	a804      	add	r0, sp, #16
 80026f0:	f7fd fd96 	bl	8000220 <strlen>
  float delta_position = end_position - start_position;
 80026f4:	ee79 8a48 	vsub.f32	s17, s18, s16
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80026f8:	b282      	uxth	r2, r0
 80026fa:	230a      	movs	r3, #10
 80026fc:	a904      	add	r1, sp, #16
 80026fe:	4843      	ldr	r0, [pc, #268]	; (800280c <MotorController_runCalibrationSequence+0x3ac>)
 8002700:	f004 ff04 	bl	800750c <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 8002704:	ee18 0a90 	vmov	r0, s17
 8002708:	f7fd ff46 	bl	8000598 <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	a804      	add	r0, sp, #16
 8002712:	4943      	ldr	r1, [pc, #268]	; (8002820 <MotorController_runCalibrationSequence+0x3c0>)
 8002714:	f005 fd04 	bl	8008120 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002718:	a804      	add	r0, sp, #16
 800271a:	f7fd fd81 	bl	8000220 <strlen>
  }


  if (fabsf(delta_position) < 0.1) {
 800271e:	eef0 9ae8 	vabs.f32	s19, s17
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8002722:	b282      	uxth	r2, r0
 8002724:	230a      	movs	r3, #10
 8002726:	a904      	add	r1, sp, #16
 8002728:	4838      	ldr	r0, [pc, #224]	; (800280c <MotorController_runCalibrationSequence+0x3ac>)
 800272a:	f004 feef 	bl	800750c <HAL_UART_Transmit>
  if (fabsf(delta_position) < 0.1) {
 800272e:	ee19 0a90 	vmov	r0, s19
 8002732:	f7fd ff31 	bl	8000598 <__aeabi_f2d>
 8002736:	a32c      	add	r3, pc, #176	; (adr r3, 80027e8 <MotorController_runCalibrationSequence+0x388>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fe f9f6 	bl	8000b2c <__aeabi_dcmplt>
 8002740:	2800      	cmp	r0, #0
 8002742:	d173      	bne.n	800282c <MotorController_runCalibrationSequence+0x3cc>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 8002744:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8002748:	eef8 8a67 	vcvt.f32.u32	s17, s15
 800274c:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8002750:	ee17 0a90 	vmov	r0, s15
 8002754:	f7fd ff20 	bl	8000598 <__aeabi_f2d>
 8002758:	a327      	add	r3, pc, #156	; (adr r3, 80027f8 <MotorController_runCalibrationSequence+0x398>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd fdbb 	bl	80002d8 <__aeabi_dsub>
 8002762:	f7fe fa49 	bl	8000bf8 <__aeabi_d2f>
 8002766:	ee07 0a90 	vmov	s15, r0
 800276a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800276e:	eef0 7ae7 	vabs.f32	s15, s15
 8002772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277a:	dc5e      	bgt.n	800283a <MotorController_runCalibrationSequence+0x3da>
  value = fmodf(value, M_2PI_F);
 800277c:	ed9f 9a29 	vldr	s18, [pc, #164]	; 8002824 <MotorController_runCalibrationSequence+0x3c4>
 8002780:	ee28 0a28 	vmul.f32	s0, s16, s17
 8002784:	eef0 0a49 	vmov.f32	s1, s18
 8002788:	f007 ffcc 	bl	800a724 <fmodf>
  return value >= 0.f ? value : (value + M_2PI_F);
 800278c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	bfb8      	it	lt
 8002796:	ee30 0a09 	vaddlt.f32	s0, s0, s18
  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 800279a:	ee10 0a10 	vmov	r0, s0
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 800279e:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 80027a2:	f7fd fef9 	bl	8000598 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	a804      	add	r0, sp, #16
 80027ac:	491e      	ldr	r1, [pc, #120]	; (8002828 <MotorController_runCalibrationSequence+0x3c8>)
 80027ae:	f005 fcb7 	bl	8008120 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80027b2:	a804      	add	r0, sp, #16
 80027b4:	f7fd fd34 	bl	8000220 <strlen>
 80027b8:	a904      	add	r1, sp, #16
 80027ba:	b282      	uxth	r2, r0
 80027bc:	230a      	movs	r3, #10
 80027be:	4813      	ldr	r0, [pc, #76]	; (800280c <MotorController_runCalibrationSequence+0x3ac>)
 80027c0:	f004 fea4 	bl	800750c <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff fb73 	bl	8001eb0 <MotorController_storeConfig>

  HAL_Delay(1000);
 80027ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ce:	f001 f987 	bl	8003ae0 <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 80027d2:	2102      	movs	r1, #2
 80027d4:	4620      	mov	r0, r4
}
 80027d6:	b025      	add	sp, #148	; 0x94
 80027d8:	ecbd 8b04 	vpop	{d8-d9}
 80027dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MotorController_setMode(controller, MODE_IDLE);
 80027e0:	f7ff bbca 	b.w	8001f78 <MotorController_setMode>
 80027e4:	f3af 8000 	nop.w
 80027e8:	9999999a 	.word	0x9999999a
 80027ec:	3fb99999 	.word	0x3fb99999
 80027f0:	55555555 	.word	0x55555555
 80027f4:	3fd55555 	.word	0x3fd55555
 80027f8:	54442d18 	.word	0x54442d18
 80027fc:	401921fb 	.word	0x401921fb
 8002800:	3e4ccccd 	.word	0x3e4ccccd
 8002804:	00000000 	.word	0x00000000
 8002808:	0800b324 	.word	0x0800b324
 800280c:	200006e0 	.word	0x200006e0
 8002810:	43fa0000 	.word	0x43fa0000
 8002814:	3fe00000 	.word	0x3fe00000
 8002818:	0800b344 	.word	0x0800b344
 800281c:	0800b360 	.word	0x0800b360
 8002820:	0800b378 	.word	0x0800b378
 8002824:	40c90fdb 	.word	0x40c90fdb
 8002828:	0800b3cc 	.word	0x0800b3cc
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <MotorController_runCalibrationSequence+0x400>)
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <MotorController_runCalibrationSequence+0x404>)
 8002830:	230a      	movs	r3, #10
 8002832:	221b      	movs	r2, #27
 8002834:	f004 fe6a 	bl	800750c <HAL_UART_Transmit>
 8002838:	e784      	b.n	8002744 <MotorController_runCalibrationSequence+0x2e4>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 800283a:	490b      	ldr	r1, [pc, #44]	; (8002868 <MotorController_runCalibrationSequence+0x408>)
 800283c:	4809      	ldr	r0, [pc, #36]	; (8002864 <MotorController_runCalibrationSequence+0x404>)
 800283e:	230a      	movs	r3, #10
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	f004 fe63 	bl	800750c <HAL_UART_Transmit>
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 8002846:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 800284a:	eef8 8a67 	vcvt.f32.u32	s17, s15
 800284e:	e795      	b.n	800277c <MotorController_runCalibrationSequence+0x31c>
      SET_BITS(controller->error, ERROR_CALIBRATION_ERROR);
 8002850:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 8002854:	f043 0308 	orr.w	r3, r3, #8
      MotorController_setMode(controller, MODE_IDLE);
 8002858:	2102      	movs	r1, #2
      SET_BITS(controller->error, ERROR_CALIBRATION_ERROR);
 800285a:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
      MotorController_setMode(controller, MODE_IDLE);
 800285e:	e7b9      	b.n	80027d4 <MotorController_runCalibrationSequence+0x374>
 8002860:	0800b38c 	.word	0x0800b38c
 8002864:	200006e0 	.word	0x200006e0
 8002868:	0800b3a8 	.word	0x0800b3a8

0800286c <MotorController_updateService>:
  if (controller->mode == MODE_CALIBRATION) {
 800286c:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8002870:	2b05      	cmp	r3, #5
 8002872:	d000      	beq.n	8002876 <MotorController_updateService+0xa>
}
 8002874:	4770      	bx	lr
    MotorController_runCalibrationSequence(controller);
 8002876:	f7ff bdf3 	b.w	8002460 <MotorController_runCalibrationSequence>
 800287a:	bf00      	nop

0800287c <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 800287c:	b510      	push	{r4, lr}
  uint16_t device_id = (rx_frame->id) & 0b1111;
 800287e:	680b      	ldr	r3, [r1, #0]
  if (device_id && device_id != controller->device_id) {
 8002880:	f013 020f 	ands.w	r2, r3, #15
void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 8002884:	b086      	sub	sp, #24
  if (device_id && device_id != controller->device_id) {
 8002886:	d005      	beq.n	8002894 <MotorController_handleCANMessage+0x18>
 8002888:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 800288c:	4294      	cmp	r4, r2
 800288e:	d001      	beq.n	8002894 <MotorController_handleCANMessage+0x18>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
        break;
    }
  }
}
 8002890:	b006      	add	sp, #24
 8002892:	bd10      	pop	{r4, pc}
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 8002894:	794c      	ldrb	r4, [r1, #5]
  uint16_t func_id = (rx_frame->id) >> 4;
 8002896:	091a      	lsrs	r2, r3, #4
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 8002898:	2c00      	cmp	r4, #0
 800289a:	f040 808b 	bne.w	80029b4 <MotorController_handleCANMessage+0x138>
    tx_frame.id_type = CAN_ID_STANDARD;
 800289e:	4944      	ldr	r1, [pc, #272]	; (80029b0 <MotorController_handleCANMessage+0x134>)
    switch (func_id) {
 80028a0:	b292      	uxth	r2, r2
    tx_frame.id_type = CAN_ID_STANDARD;
 80028a2:	e9cd 3102 	strd	r3, r1, [sp, #8]
    switch (func_id) {
 80028a6:	2a7f      	cmp	r2, #127	; 0x7f
 80028a8:	f200 8195 	bhi.w	8002bd6 <MotorController_handleCANMessage+0x35a>
 80028ac:	e8df f012 	tbh	[pc, r2, lsl #1]
 80028b0:	018c02f6 	.word	0x018c02f6
 80028b4:	02e302db 	.word	0x02e302db
 80028b8:	01930193 	.word	0x01930193
 80028bc:	019302bd 	.word	0x019302bd
 80028c0:	01930193 	.word	0x01930193
 80028c4:	01930193 	.word	0x01930193
 80028c8:	01930193 	.word	0x01930193
 80028cc:	01930193 	.word	0x01930193
 80028d0:	019302c5 	.word	0x019302c5
 80028d4:	02d102cb 	.word	0x02d102cb
 80028d8:	021b0215 	.word	0x021b0215
 80028dc:	01930227 	.word	0x01930227
 80028e0:	01930193 	.word	0x01930193
 80028e4:	01930193 	.word	0x01930193
 80028e8:	01930193 	.word	0x01930193
 80028ec:	01930193 	.word	0x01930193
 80028f0:	0232022d 	.word	0x0232022d
 80028f4:	024c023c 	.word	0x024c023c
 80028f8:	01930193 	.word	0x01930193
 80028fc:	01930193 	.word	0x01930193
 8002900:	01930193 	.word	0x01930193
 8002904:	01930193 	.word	0x01930193
 8002908:	01930193 	.word	0x01930193
 800290c:	01930193 	.word	0x01930193
 8002910:	02580252 	.word	0x02580252
 8002914:	0193025e 	.word	0x0193025e
 8002918:	01930193 	.word	0x01930193
 800291c:	01930193 	.word	0x01930193
 8002920:	01930193 	.word	0x01930193
 8002924:	01930193 	.word	0x01930193
 8002928:	01930193 	.word	0x01930193
 800292c:	01930193 	.word	0x01930193
 8002930:	026a0264 	.word	0x026a0264
 8002934:	026f0193 	.word	0x026f0193
 8002938:	027a0274 	.word	0x027a0274
 800293c:	0285027f 	.word	0x0285027f
 8002940:	0193028c 	.word	0x0193028c
 8002944:	029a0293 	.word	0x029a0293
 8002948:	02a802a1 	.word	0x02a802a1
 800294c:	019302af 	.word	0x019302af
 8002950:	030802b6 	.word	0x030802b6
 8002954:	0193030f 	.word	0x0193030f
 8002958:	031d0316 	.word	0x031d0316
 800295c:	032b0324 	.word	0x032b0324
 8002960:	03390332 	.word	0x03390332
 8002964:	019302eb 	.word	0x019302eb
 8002968:	01930193 	.word	0x01930193
 800296c:	01930193 	.word	0x01930193
 8002970:	01930193 	.word	0x01930193
 8002974:	01930193 	.word	0x01930193
 8002978:	01930193 	.word	0x01930193
 800297c:	01930193 	.word	0x01930193
 8002980:	01930193 	.word	0x01930193
 8002984:	01930193 	.word	0x01930193
 8002988:	01930193 	.word	0x01930193
 800298c:	01930193 	.word	0x01930193
 8002990:	01930193 	.word	0x01930193
 8002994:	01930193 	.word	0x01930193
 8002998:	01930193 	.word	0x01930193
 800299c:	01930193 	.word	0x01930193
 80029a0:	01930193 	.word	0x01930193
 80029a4:	01930193 	.word	0x01930193
 80029a8:	01930193 	.word	0x01930193
 80029ac:	018c0193 	.word	0x018c0193
 80029b0:	00080100 	.word	0x00080100
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 80029b4:	88cc      	ldrh	r4, [r1, #6]
 80029b6:	2c00      	cmp	r4, #0
 80029b8:	f43f af71 	beq.w	800289e <MotorController_handleCANMessage+0x22>
    switch (func_id) {
 80029bc:	b292      	uxth	r2, r2
 80029be:	2a7e      	cmp	r2, #126	; 0x7e
 80029c0:	f63f af66 	bhi.w	8002890 <MotorController_handleCANMessage+0x14>
 80029c4:	a301      	add	r3, pc, #4	; (adr r3, 80029cc <MotorController_handleCANMessage+0x150>)
 80029c6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	08002be3 	.word	0x08002be3
 80029d0:	08002bfb 	.word	0x08002bfb
 80029d4:	08002891 	.word	0x08002891
 80029d8:	08002891 	.word	0x08002891
 80029dc:	08002c03 	.word	0x08002c03
 80029e0:	08002891 	.word	0x08002891
 80029e4:	08002c15 	.word	0x08002c15
 80029e8:	08002891 	.word	0x08002891
 80029ec:	08002891 	.word	0x08002891
 80029f0:	08002891 	.word	0x08002891
 80029f4:	08002891 	.word	0x08002891
 80029f8:	08002891 	.word	0x08002891
 80029fc:	08002891 	.word	0x08002891
 8002a00:	08002891 	.word	0x08002891
 8002a04:	08002891 	.word	0x08002891
 8002a08:	08002891 	.word	0x08002891
 8002a0c:	08002c21 	.word	0x08002c21
 8002a10:	08002891 	.word	0x08002891
 8002a14:	08002c27 	.word	0x08002c27
 8002a18:	08002891 	.word	0x08002891
 8002a1c:	08002891 	.word	0x08002891
 8002a20:	08002891 	.word	0x08002891
 8002a24:	08002891 	.word	0x08002891
 8002a28:	08002891 	.word	0x08002891
 8002a2c:	08002891 	.word	0x08002891
 8002a30:	08002891 	.word	0x08002891
 8002a34:	08002891 	.word	0x08002891
 8002a38:	08002891 	.word	0x08002891
 8002a3c:	08002891 	.word	0x08002891
 8002a40:	08002891 	.word	0x08002891
 8002a44:	08002891 	.word	0x08002891
 8002a48:	08002891 	.word	0x08002891
 8002a4c:	08002c2d 	.word	0x08002c2d
 8002a50:	08002891 	.word	0x08002891
 8002a54:	08002891 	.word	0x08002891
 8002a58:	08002891 	.word	0x08002891
 8002a5c:	08002891 	.word	0x08002891
 8002a60:	08002891 	.word	0x08002891
 8002a64:	08002891 	.word	0x08002891
 8002a68:	08002891 	.word	0x08002891
 8002a6c:	08002891 	.word	0x08002891
 8002a70:	08002891 	.word	0x08002891
 8002a74:	08002891 	.word	0x08002891
 8002a78:	08002891 	.word	0x08002891
 8002a7c:	08002891 	.word	0x08002891
 8002a80:	08002891 	.word	0x08002891
 8002a84:	08002891 	.word	0x08002891
 8002a88:	08002891 	.word	0x08002891
 8002a8c:	08002891 	.word	0x08002891
 8002a90:	08002891 	.word	0x08002891
 8002a94:	08002891 	.word	0x08002891
 8002a98:	08002891 	.word	0x08002891
 8002a9c:	08002891 	.word	0x08002891
 8002aa0:	08002891 	.word	0x08002891
 8002aa4:	08002891 	.word	0x08002891
 8002aa8:	08002891 	.word	0x08002891
 8002aac:	08002891 	.word	0x08002891
 8002ab0:	08002891 	.word	0x08002891
 8002ab4:	08002891 	.word	0x08002891
 8002ab8:	08002891 	.word	0x08002891
 8002abc:	08002891 	.word	0x08002891
 8002ac0:	08002891 	.word	0x08002891
 8002ac4:	08002891 	.word	0x08002891
 8002ac8:	08002891 	.word	0x08002891
 8002acc:	08002c37 	.word	0x08002c37
 8002ad0:	08002c3d 	.word	0x08002c3d
 8002ad4:	08002891 	.word	0x08002891
 8002ad8:	08002891 	.word	0x08002891
 8002adc:	08002891 	.word	0x08002891
 8002ae0:	08002c47 	.word	0x08002c47
 8002ae4:	08002c51 	.word	0x08002c51
 8002ae8:	08002891 	.word	0x08002891
 8002aec:	08002c57 	.word	0x08002c57
 8002af0:	08002891 	.word	0x08002891
 8002af4:	08002c65 	.word	0x08002c65
 8002af8:	08002891 	.word	0x08002891
 8002afc:	08002891 	.word	0x08002891
 8002b00:	08002c73 	.word	0x08002c73
 8002b04:	08002891 	.word	0x08002891
 8002b08:	08002891 	.word	0x08002891
 8002b0c:	08002c81 	.word	0x08002c81
 8002b10:	08002c8f 	.word	0x08002c8f
 8002b14:	08002c9d 	.word	0x08002c9d
 8002b18:	08002891 	.word	0x08002891
 8002b1c:	08002cab 	.word	0x08002cab
 8002b20:	08002cb9 	.word	0x08002cb9
 8002b24:	08002891 	.word	0x08002891
 8002b28:	08002cc1 	.word	0x08002cc1
 8002b2c:	08002891 	.word	0x08002891
 8002b30:	08002cc9 	.word	0x08002cc9
 8002b34:	08002891 	.word	0x08002891
 8002b38:	08002891 	.word	0x08002891
 8002b3c:	08002891 	.word	0x08002891
 8002b40:	08002891 	.word	0x08002891
 8002b44:	08002891 	.word	0x08002891
 8002b48:	08002891 	.word	0x08002891
 8002b4c:	08002891 	.word	0x08002891
 8002b50:	08002891 	.word	0x08002891
 8002b54:	08002891 	.word	0x08002891
 8002b58:	08002891 	.word	0x08002891
 8002b5c:	08002891 	.word	0x08002891
 8002b60:	08002891 	.word	0x08002891
 8002b64:	08002891 	.word	0x08002891
 8002b68:	08002891 	.word	0x08002891
 8002b6c:	08002891 	.word	0x08002891
 8002b70:	08002891 	.word	0x08002891
 8002b74:	08002891 	.word	0x08002891
 8002b78:	08002891 	.word	0x08002891
 8002b7c:	08002891 	.word	0x08002891
 8002b80:	08002891 	.word	0x08002891
 8002b84:	08002891 	.word	0x08002891
 8002b88:	08002891 	.word	0x08002891
 8002b8c:	08002891 	.word	0x08002891
 8002b90:	08002891 	.word	0x08002891
 8002b94:	08002891 	.word	0x08002891
 8002b98:	08002891 	.word	0x08002891
 8002b9c:	08002891 	.word	0x08002891
 8002ba0:	08002891 	.word	0x08002891
 8002ba4:	08002891 	.word	0x08002891
 8002ba8:	08002891 	.word	0x08002891
 8002bac:	08002891 	.word	0x08002891
 8002bb0:	08002891 	.word	0x08002891
 8002bb4:	08002891 	.word	0x08002891
 8002bb8:	08002891 	.word	0x08002891
 8002bbc:	08002891 	.word	0x08002891
 8002bc0:	08002891 	.word	0x08002891
 8002bc4:	08002cd1 	.word	0x08002cd1
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8002bc8:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
 8002bcc:	f88d 3010 	strb.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f8ad 200e 	strh.w	r2, [sp, #14]
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8002bd6:	a902      	add	r1, sp, #8
 8002bd8:	48ae      	ldr	r0, [pc, #696]	; (8002e94 <MotorController_handleCANMessage+0x618>)
 8002bda:	f7fe fb0d 	bl	80011f8 <CAN_putTxFrame>
}
 8002bde:	b006      	add	sp, #24
 8002be0:	bd10      	pop	{r4, pc}
        MotorController_setMode(controller, MODE_IDLE);
 8002be2:	2102      	movs	r1, #2
 8002be4:	9001      	str	r0, [sp, #4]
 8002be6:	f7ff f9c7 	bl	8001f78 <MotorController_setMode>
        SET_BITS(controller->error, ERROR_ESTOP);
 8002bea:	9801      	ldr	r0, [sp, #4]
 8002bec:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	f8a0 310e 	strh.w	r3, [r0, #270]	; 0x10e
        break;
 8002bf8:	e64a      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->device_id = *((uint8_t *)rx_frame->data);
 8002bfa:	7a0b      	ldrb	r3, [r1, #8]
 8002bfc:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
        break;
 8002c00:	e646      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        if (*((uint8_t *)rx_frame->data)) {
 8002c02:	7a0b      	ldrb	r3, [r1, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f43f ae43 	beq.w	8002890 <MotorController_handleCANMessage+0x14>
}
 8002c0a:	b006      	add	sp, #24
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          MotorController_storeConfig(controller);
 8002c10:	f7ff b94e 	b.w	8001eb0 <MotorController_storeConfig>
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 8002c14:	7a09      	ldrb	r1, [r1, #8]
}
 8002c16:	b006      	add	sp, #24
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 8002c1c:	f7ff b9ac 	b.w	8001f78 <MotorController_setMode>
        controller->encoder.cpr = *((int32_t *)rx_frame->data);
 8002c20:	688b      	ldr	r3, [r1, #8]
 8002c22:	6083      	str	r3, [r0, #8]
        break;
 8002c24:	e634      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->encoder.position_offset = *((float *)rx_frame->data);
 8002c26:	688b      	ldr	r3, [r1, #8]
 8002c28:	60c3      	str	r3, [r0, #12]
        break;
 8002c2a:	e631      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 8002c2c:	688b      	ldr	r3, [r1, #8]
 8002c2e:	6343      	str	r3, [r0, #52]	; 0x34
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 8002c30:	68cb      	ldr	r3, [r1, #12]
 8002c32:	6383      	str	r3, [r0, #56]	; 0x38
        break;
 8002c34:	e62c      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.i_filter_alpha = *((float *)rx_frame->data);
 8002c36:	688b      	ldr	r3, [r1, #8]
 8002c38:	6583      	str	r3, [r0, #88]	; 0x58
        break;
 8002c3a:	e629      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.i_kp = *((float *)rx_frame->data);
 8002c3c:	688b      	ldr	r3, [r1, #8]
 8002c3e:	65c3      	str	r3, [r0, #92]	; 0x5c
        controller->current_controller.i_ki = *((float *)rx_frame->data + 1);
 8002c40:	68cb      	ldr	r3, [r1, #12]
 8002c42:	6603      	str	r3, [r0, #96]	; 0x60
        break;
 8002c44:	e624      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_a_setpoint = *((float *)rx_frame->data);
 8002c46:	688b      	ldr	r3, [r1, #8]
 8002c48:	6743      	str	r3, [r0, #116]	; 0x74
        controller->current_controller.v_b_setpoint = *((float *)rx_frame->data + 1);
 8002c4a:	68cb      	ldr	r3, [r1, #12]
 8002c4c:	6783      	str	r3, [r0, #120]	; 0x78
        break;
 8002c4e:	e61f      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_c_setpoint = *((float *)rx_frame->data);
 8002c50:	688b      	ldr	r3, [r1, #8]
 8002c52:	67c3      	str	r3, [r0, #124]	; 0x7c
        break;
 8002c54:	e61c      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_alpha_setpoint = *((float *)rx_frame->data);
 8002c56:	688b      	ldr	r3, [r1, #8]
 8002c58:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        controller->current_controller.v_beta_setpoint = *((float *)rx_frame->data + 1);
 8002c5c:	68cb      	ldr	r3, [r1, #12]
 8002c5e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        break;
 8002c62:	e615      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.v_q_setpoint = *((float *)rx_frame->data);
 8002c64:	688b      	ldr	r3, [r1, #8]
 8002c66:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
        controller->current_controller.v_d_setpoint = *((float *)rx_frame->data + 1);
 8002c6a:	68cb      	ldr	r3, [r1, #12]
 8002c6c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        break;
 8002c70:	e60e      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->current_controller.i_q_setpoint = *((float *)rx_frame->data);
 8002c72:	688b      	ldr	r3, [r1, #8]
 8002c74:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
        controller->current_controller.i_d_setpoint = *((float *)rx_frame->data + 1);
 8002c78:	68cb      	ldr	r3, [r1, #12]
 8002c7a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        break;
 8002c7e:	e607      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 8002c80:	688b      	ldr	r3, [r1, #8]
 8002c82:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 8002c86:	68cb      	ldr	r3, [r1, #12]
 8002c88:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
        break;
 8002c8c:	e600      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.velocity_kp = *((float *)rx_frame->data);
 8002c8e:	688b      	ldr	r3, [r1, #8]
 8002c90:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        controller->position_controller.velocity_ki = *((float *)rx_frame->data + 1);
 8002c94:	68cb      	ldr	r3, [r1, #12]
 8002c96:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
        break;
 8002c9a:	e5f9      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.torque_limit = *((float *)rx_frame->data);
 8002c9c:	688b      	ldr	r3, [r1, #8]
 8002c9e:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
        controller->position_controller.velocity_limit = *((float *)rx_frame->data + 1);
 8002ca2:	68cb      	ldr	r3, [r1, #12]
 8002ca4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
        break;
 8002ca8:	e5f2      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 8002caa:	688b      	ldr	r3, [r1, #8]
 8002cac:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8002cb0:	68cb      	ldr	r3, [r1, #12]
 8002cb2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
        break;
 8002cb6:	e5eb      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8002cb8:	688b      	ldr	r3, [r1, #8]
 8002cba:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
        break;
 8002cbe:	e5e7      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8002cc0:	688b      	ldr	r3, [r1, #8]
 8002cc2:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
        break;
 8002cc6:	e5e3      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        controller->position_controller.position_target = *((float *)rx_frame->data);
 8002cc8:	688b      	ldr	r3, [r1, #8]
 8002cca:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
        break;
 8002cce:	e5df      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002cd0:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <MotorController_handleCANMessage+0x61c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8002cd8:	e5da      	b.n	8002890 <MotorController_handleCANMessage+0x14>
        *((float *)tx_frame.data) = Encoder_getPositionMeasured(&controller->encoder);
 8002cda:	69c3      	ldr	r3, [r0, #28]
 8002cdc:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002cde:	2204      	movs	r2, #4
 8002ce0:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002ce4:	e777      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
 8002ce6:	edd0 7a07 	vldr	s15, [r0, #28]
 8002cea:	ed90 7a03 	vldr	s14, [r0, #12]
 8002cee:	ee77 7a87 	vadd.f32	s15, s15, s14
        tx_frame.size = 4;
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	f8ad 300e 	strh.w	r3, [sp, #14]
        *((float *)tx_frame.data) = Encoder_getPosition(&controller->encoder);
 8002cf8:	edcd 7a04 	vstr	s15, [sp, #16]
        break;
 8002cfc:	e76b      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = Encoder_getVelocity(&controller->encoder);
 8002cfe:	6a03      	ldr	r3, [r0, #32]
 8002d00:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d02:	2204      	movs	r2, #4
 8002d04:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d08:	e765      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8002d0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8002d0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8002d0e:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8002d10:	9305      	str	r3, [sp, #20]
        break;
 8002d12:	e760      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8002d14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8002d16:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8002d1a:	9204      	str	r2, [sp, #16]
        tx_frame.size = 6;
 8002d1c:	2106      	movs	r1, #6
 8002d1e:	f8ad 100e 	strh.w	r1, [sp, #14]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8002d22:	f8ad 3014 	strh.w	r3, [sp, #20]
        break;
 8002d26:	e756      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8002d28:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8002d2c:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8002d30:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8002d34:	f8ad 1010 	strh.w	r1, [sp, #16]
        tx_frame.size = 6;
 8002d38:	2006      	movs	r0, #6
 8002d3a:	f8ad 000e 	strh.w	r0, [sp, #14]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8002d3e:	f8ad 2012 	strh.w	r2, [sp, #18]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8002d42:	f8ad 3014 	strh.w	r3, [sp, #20]
        break;
 8002d46:	e746      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8002d48:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d4a:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d52:	e740      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8002d54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002d56:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d58:	2204      	movs	r2, #4
 8002d5a:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d5e:	e73a      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8002d60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002d62:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d64:	2204      	movs	r2, #4
 8002d66:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d6a:	e734      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8002d6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d6e:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d70:	2204      	movs	r2, #4
 8002d72:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d76:	e72e      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_filter_alpha;
 8002d78:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d7a:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002d82:	e728      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_kp;
 8002d84:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
        *((float *)tx_frame.data + 1) = controller->current_controller.i_ki;
 8002d86:	6e03      	ldr	r3, [r0, #96]	; 0x60
        *((float *)tx_frame.data) = controller->current_controller.i_kp;
 8002d88:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_ki;
 8002d8a:	9305      	str	r3, [sp, #20]
        break;
 8002d8c:	e723      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_a_measured;
 8002d8e:	6e82      	ldr	r2, [r0, #104]	; 0x68
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8002d90:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
        *((float *)tx_frame.data) = controller->current_controller.i_a_measured;
 8002d92:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8002d94:	9305      	str	r3, [sp, #20]
        break;
 8002d96:	e71e      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8002d98:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002d9a:	9305      	str	r3, [sp, #20]
        tx_frame.size = 4;
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002da2:	e718      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8002da4:	6f42      	ldr	r2, [r0, #116]	; 0x74
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8002da6:	6f83      	ldr	r3, [r0, #120]	; 0x78
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8002da8:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8002daa:	9305      	str	r3, [sp, #20]
        break;
 8002dac:	e713      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8002dae:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002db0:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002db2:	2204      	movs	r2, #4
 8002db4:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002db8:	e70d      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_alpha_measured;
 8002dba:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8002dbe:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
        *((float *)tx_frame.data) = controller->current_controller.i_alpha_measured;
 8002dc2:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8002dc4:	9305      	str	r3, [sp, #20]
        break;
 8002dc6:	e706      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8002dc8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8002dcc:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8002dd0:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8002dd2:	9305      	str	r3, [sp, #20]
        break;
 8002dd4:	e6ff      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8002dd6:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8002dda:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8002dde:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8002de0:	9305      	str	r3, [sp, #20]
        break;
 8002de2:	e6f8      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_measured;
 8002de4:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8002de8:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
        *((float *)tx_frame.data) = controller->current_controller.i_q_measured;
 8002dec:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8002dee:	9305      	str	r3, [sp, #20]
        break;
 8002df0:	e6f1      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8002df2:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_target;
 8002df6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8002dfa:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_target;
 8002dfc:	9305      	str	r3, [sp, #20]
        break;
 8002dfe:	e6ea      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8002e00:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8002e04:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8002e08:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8002e0a:	9305      	str	r3, [sp, #20]
        break;
 8002e0c:	e6e3      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8002e0e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8002e12:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8002e16:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8002e18:	9305      	str	r3, [sp, #20]
        break;
 8002e1a:	e6dc      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8002e1c:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8002e20:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8002e24:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8002e26:	9305      	str	r3, [sp, #20]
        break;
 8002e28:	e6d5      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((uint8_t *)tx_frame.data) = (uint8_t)MotorController_getMode(controller);
 8002e2a:	f890 310c 	ldrb.w	r3, [r0, #268]	; 0x10c
 8002e2e:	f88d 3010 	strb.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002e32:	2201      	movs	r2, #1
 8002e34:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e38:	e6cd      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((int32_t *)tx_frame.data) = controller->encoder.cpr;
 8002e3a:	6883      	ldr	r3, [r0, #8]
 8002e3c:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002e3e:	2204      	movs	r2, #4
 8002e40:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e44:	e6c7      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = Encoder_getPositionOffset(&controller->encoder);
 8002e46:	68c3      	ldr	r3, [r0, #12]
 8002e48:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e50:	e6c1      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8002e52:	edd0 7a06 	vldr	s15, [r0, #24]
 8002e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        tx_frame.size = 4;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	f8ad 300e 	strh.w	r3, [sp, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8002e60:	edcd 7a04 	vstr	s15, [sp, #16]
        break;
 8002e64:	e6b7      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8002e66:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8002e6a:	f88d 3010 	strb.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e74:	e6af      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((uint16_t *)tx_frame.data) = (uint16_t)controller->error;
 8002e76:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
 8002e7a:	f8ad 3010 	strh.w	r3, [sp, #16]
        tx_frame.size = 1;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e84:	e6a7      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8002e86:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8002e8a:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002e92:	e6a0      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
 8002e94:	20000434 	.word	0x20000434
 8002e98:	200005fc 	.word	0x200005fc
        MotorController_setMode(controller, MODE_IDLE);
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	9001      	str	r0, [sp, #4]
 8002ea0:	f7ff f86a 	bl	8001f78 <MotorController_setMode>
        SET_BITS(controller->error, ERROR_ESTOP);
 8002ea4:	9801      	ldr	r0, [sp, #4]
 8002ea6:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
        tx_frame.size = 1;
 8002eaa:	2101      	movs	r1, #1
        SET_BITS(controller->error, ERROR_ESTOP);
 8002eac:	f043 0302 	orr.w	r3, r3, #2
        *((uint8_t *)tx_frame.data) = 0xAC;
 8002eb0:	22ac      	movs	r2, #172	; 0xac
        SET_BITS(controller->error, ERROR_ESTOP);
 8002eb2:	f8a0 310e 	strh.w	r3, [r0, #270]	; 0x10e
        tx_frame.size = 1;
 8002eb6:	f8ad 100e 	strh.w	r1, [sp, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8002eba:	f88d 2010 	strb.w	r2, [sp, #16]
        break;
 8002ebe:	e68a      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.velocity_kp;
 8002ec0:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_ki;
 8002ec4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
        *((float *)tx_frame.data) = controller->position_controller.velocity_kp;
 8002ec8:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_ki;
 8002eca:	9305      	str	r3, [sp, #20]
        break;
 8002ecc:	e683      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.torque_limit;
 8002ece:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit;
 8002ed2:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
        *((float *)tx_frame.data) = controller->position_controller.torque_limit;
 8002ed6:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit;
 8002ed8:	9305      	str	r3, [sp, #20]
        break;
 8002eda:	e67c      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8002edc:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8002ee0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8002ee4:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8002ee6:	9305      	str	r3, [sp, #20]
        break;
 8002ee8:	e675      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8002eea:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8002eee:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8002ef2:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8002ef4:	9305      	str	r3, [sp, #20]
        break;
 8002ef6:	e66e      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 8002ef8:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8002efc:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002efe:	2204      	movs	r2, #4
 8002f00:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002f04:	e667      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8002f06:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8002f0a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8002f0e:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8002f10:	9305      	str	r3, [sp, #20]
        break;
 8002f12:	e660      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 8002f14:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 8002f18:	9304      	str	r3, [sp, #16]
        tx_frame.size = 4;
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	f8ad 200e 	strh.w	r2, [sp, #14]
        break;
 8002f20:	e659      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8002f22:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8002f26:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8002f2a:	9204      	str	r2, [sp, #16]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8002f2c:	9305      	str	r3, [sp, #20]
        break;
 8002f2e:	e652      	b.n	8002bd6 <MotorController_handleCANMessage+0x35a>

08002f30 <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 8002f30:	b500      	push	{lr}
  //  controller->position_kp = 0.f;
  controller->position_kp = 0.01f;
  controller->position_ki = 0.f;
//  controller->velocity_kp = 0.f;
  controller->velocity_kp = 0.0001f;
 8002f32:	490d      	ldr	r1, [pc, #52]	; (8002f68 <PositionController_init+0x38>)

  controller->torque_limit = 1;

  controller->velocity_limit = 20;

  controller->position_limit_lower = -INFINITY;
 8002f34:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <PositionController_init+0x3c>)
  controller->position_kp = 0.01f;
 8002f36:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8002f74 <PositionController_init+0x44>
  controller->position_limit_lower = -INFINITY;
 8002f3a:	61c2      	str	r2, [r0, #28]
  controller->position_ki = 0.f;
 8002f3c:	2300      	movs	r3, #0
  controller->torque_limit = 1;
 8002f3e:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
  controller->position_limit_upper = INFINITY;
 8002f42:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
  controller->velocity_kp = 0.0001f;
 8002f46:	6081      	str	r1, [r0, #8]
  controller->velocity_limit = 20;
 8002f48:	4909      	ldr	r1, [pc, #36]	; (8002f70 <PositionController_init+0x40>)
  controller->torque_limit = 1;
 8002f4a:	f8c0 e010 	str.w	lr, [r0, #16]
  controller->position_kp = 0.01f;
 8002f4e:	f8c0 c000 	str.w	ip, [r0]
  controller->position_ki = 0.f;
 8002f52:	6043      	str	r3, [r0, #4]
  controller->velocity_ki = 0.f;
 8002f54:	60c3      	str	r3, [r0, #12]
  controller->velocity_limit = 20;
 8002f56:	6141      	str	r1, [r0, #20]
  controller->position_limit_upper = INFINITY;
 8002f58:	6182      	str	r2, [r0, #24]

  controller->velocity_setpoint = 0;
 8002f5a:	6343      	str	r3, [r0, #52]	; 0x34
  controller->position_setpoint = 0;
 8002f5c:	6403      	str	r3, [r0, #64]	; 0x40

  controller->position_integrator = 0;
 8002f5e:	6443      	str	r3, [r0, #68]	; 0x44
  controller->velocity_integrator = 0;
 8002f60:	6483      	str	r3, [r0, #72]	; 0x48
}
 8002f62:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f66:	bf00      	nop
 8002f68:	38d1b717 	.word	0x38d1b717
 8002f6c:	ff800000 	.word	0xff800000
 8002f70:	41a00000 	.word	0x41a00000
 8002f74:	3c23d70a 	.word	0x3c23d70a

08002f78 <PositionController_update>:

void PositionController_update(PositionController *controller, Mode mode) {
  if (mode == MODE_POSITION) {
 8002f78:	2913      	cmp	r1, #19
 8002f7a:	d014      	beq.n	8002fa6 <PositionController_update+0x2e>
//        controller->velocity_integrator,
//        -2.f * controller->velocity_limit,
//        2.f * controller->velocity_limit);
  }

  controller->torque_setpoint = clampf(
 8002f7c:	edd0 7a08 	vldr	s15, [r0, #32]
      controller->torque_target,
      -controller->torque_limit,
 8002f80:	ed90 7a04 	vldr	s14, [r0, #16]
  return (value > max) ? max : ((value < min) ? min : value);
 8002f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d408      	bmi.n	8002fa0 <PositionController_update+0x28>
  controller->torque_setpoint = clampf(
 8002f8e:	eeb1 7a47 	vneg.f32	s14, s14
 8002f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9a:	bfd8      	it	le
 8002f9c:	eeb0 7a67 	vmovle.f32	s14, s15
 8002fa0:	ed80 7a0a 	vstr	s14, [r0, #40]	; 0x28
      controller->torque_limit);
}
 8002fa4:	4770      	bx	lr
    float position_setpoint = controller->position_target;
 8002fa6:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
    controller->position_setpoint = clampf(
 8002faa:	ed90 6a06 	vldr	s12, [r0, #24]
 8002fae:	ed90 7a07 	vldr	s14, [r0, #28]
 8002fb2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	d535      	bpl.n	8003028 <PositionController_update+0xb0>
    float velocity_error = 0.f - controller->velocity_measured;
 8002fbc:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8002fc0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800303c <PositionController_update+0xc4>
    float position_error = controller->position_setpoint - controller->position_measured;
 8002fc4:	edd0 6a0f 	vldr	s13, [r0, #60]	; 0x3c
        controller->position_integrator;
 8002fc8:	edd0 5a11 	vldr	s11, [r0, #68]	; 0x44
    controller->position_integrator = clampf(
 8002fcc:	edd0 4a01 	vldr	s9, [r0, #4]
 8002fd0:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8003040 <PositionController_update+0xc8>
    controller->position_setpoint = clampf(
 8002fd4:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    float velocity_error = 0.f - controller->velocity_measured;
 8002fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        controller->velocity_kp * velocity_error +
 8002fdc:	ed90 7a02 	vldr	s14, [r0, #8]
    float position_error = controller->position_setpoint - controller->position_measured;
 8002fe0:	ee76 6a66 	vsub.f32	s13, s12, s13
        controller->velocity_kp * velocity_error +
 8002fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
        controller->position_kp * position_error +
 8002fe8:	ed90 7a00 	vldr	s14, [r0]
 8002fec:	eee7 7a26 	vfma.f32	s15, s14, s13
    controller->position_integrator = clampf(
 8002ff0:	eeb0 7a65 	vmov.f32	s14, s11
 8002ff4:	eea4 7aa6 	vfma.f32	s14, s9, s13
        controller->velocity_kp * velocity_error +
 8002ff8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002ffc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    controller->torque_target =
 8003004:	edc0 7a08 	vstr	s15, [r0, #32]
 8003008:	dc0b      	bgt.n	8003022 <PositionController_update+0xaa>
 800300a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003044 <PositionController_update+0xcc>
 800300e:	eeb4 7a66 	vcmp.f32	s14, s13
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	bf48      	it	mi
 8003018:	eeb0 7a66 	vmovmi.f32	s14, s13
    controller->position_integrator = clampf(
 800301c:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
 8003020:	e7ae      	b.n	8002f80 <PositionController_update+0x8>
 8003022:	eeb0 7a45 	vmov.f32	s14, s10
 8003026:	e7f9      	b.n	800301c <PositionController_update+0xa4>
 8003028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	bfd4      	ite	le
 8003032:	eeb0 6a67 	vmovle.f32	s12, s15
 8003036:	eeb0 6a47 	vmovgt.f32	s12, s14
 800303a:	e7bf      	b.n	8002fbc <PositionController_update+0x44>
 800303c:	00000000 	.word	0x00000000
 8003040:	3dcccccd 	.word	0x3dcccccd
 8003044:	bdcccccd 	.word	0xbdcccccd

08003048 <PowerStage_init>:
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2, SPI_HandleTypeDef *hspi) {
  powerstage->htim = htim;
 8003048:	6001      	str	r1, [r0, #0]
uint8_t PowerStage_isPWMEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disablePWM(PowerStage *powerstage) {
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 800304a:	6809      	ldr	r1, [r1, #0]
  powerstage->hadc1 = hadc1;
 800304c:	6042      	str	r2, [r0, #4]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 800304e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  powerstage->bus_voltage_measured = 24.;
 8003050:	f8df c020 	ldr.w	ip, [pc, #32]	; 8003074 <PowerStage_init+0x2c>
  powerstage->hadc2 = hadc2;
 8003054:	6083      	str	r3, [r0, #8]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8003056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  powerstage->hspi = hspi;
 800305a:	9b00      	ldr	r3, [sp, #0]
  powerstage->bus_voltage_measured = 24.;
 800305c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  powerstage->hspi = hspi;
 8003060:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8003062:	644a      	str	r2, [r1, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <PowerStage_init+0x28>)
 8003066:	2200      	movs	r2, #0
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	f002 b8f7 	b.w	800525c <HAL_GPIO_WritePin>
 800306e:	bf00      	nop
 8003070:	48000400 	.word	0x48000400
 8003074:	41c00000 	.word	0x41c00000

08003078 <PowerStage_reset>:
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, 0U);
 8003078:	6803      	ldr	r3, [r0, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, 0U);
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, 0U);
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop

08003088 <PowerStage_disableGateDriver>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <PowerStage_disableGateDriver+0xc>)
 800308a:	2200      	movs	r2, #0
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	f002 b8e5 	b.w	800525c <HAL_GPIO_WritePin>
 8003092:	bf00      	nop
 8003094:	48000400 	.word	0x48000400

08003098 <PowerStage_enableGateDriver>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <PowerStage_enableGateDriver+0xc>)
 800309a:	2201      	movs	r2, #1
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	f002 b8dd 	b.w	800525c <HAL_GPIO_WritePin>
 80030a2:	bf00      	nop
 80030a4:	48000400 	.word	0x48000400

080030a8 <PowerStage_disablePWM>:
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 80030a8:	6803      	ldr	r3, [r0, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80030ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030b2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop

080030b8 <PowerStage_enablePWM>:

void PowerStage_enablePWM(PowerStage *powerstage) {
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop

080030c8 <PowerStage_updateErrorStatus>:

ErrorCode PowerStage_updateErrorStatus(PowerStage *powerstage) {
 80030c8:	b530      	push	{r4, r5, lr}
 80030ca:	4604      	mov	r4, r0
 80030cc:	b085      	sub	sp, #20
  uint16_t tx_buffer[2];
  uint16_t rx_buffer[2];

  tx_buffer[0] = (1 << 15) | (0x00 << 11);
 80030ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80030d2:	480f      	ldr	r0, [pc, #60]	; (8003110 <PowerStage_updateErrorStatus+0x48>)
  tx_buffer[0] = (1 << 15) | (0x00 << 11);
 80030d4:	f8ad 3008 	strh.w	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2140      	movs	r1, #64	; 0x40
  HAL_SPI_TransmitReceive(powerstage->hspi, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 80030dc:	2564      	movs	r5, #100	; 0x64
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80030de:	f002 f8bd 	bl	800525c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(powerstage->hspi, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
 80030e2:	2301      	movs	r3, #1
 80030e4:	68e0      	ldr	r0, [r4, #12]
 80030e6:	9500      	str	r5, [sp, #0]
 80030e8:	aa03      	add	r2, sp, #12
 80030ea:	a902      	add	r1, sp, #8
 80030ec:	f003 f84a 	bl	8006184 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80030f0:	2201      	movs	r2, #1
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <PowerStage_updateErrorStatus+0x48>)
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	f002 f8b1 	bl	800525c <HAL_GPIO_WritePin>
//
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
//  HAL_SPI_TransmitReceive(powerstage->hspi, (uint8_t *)tx_buffer, (uint8_t *)rx_buffer, 1, 100);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);

  if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 80030fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030fe:	4804      	ldr	r0, [pc, #16]	; (8003110 <PowerStage_updateErrorStatus+0x48>)
 8003100:	f002 f8a6 	bl	8005250 <HAL_GPIO_ReadPin>
    return ERROR_POWERSTAGE_ERROR;
 8003104:	2800      	cmp	r0, #0
  }
  return ERROR_NO_ERROR;
}
 8003106:	bf0c      	ite	eq
 8003108:	2010      	moveq	r0, #16
 800310a:	2000      	movne	r0, #0
 800310c:	b005      	add	sp, #20
 800310e:	bd30      	pop	{r4, r5, pc}
 8003110:	48000400 	.word	0x48000400

08003114 <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 8003114:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8003118:	eddf 4a43 	vldr	s9, [pc, #268]	; 8003228 <PowerStage_setBridgeOutput+0x114>
 800311c:	eec0 6a27 	vdiv.f32	s13, s0, s15
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8003120:	eec1 5a27 	vdiv.f32	s11, s2, s15
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8003124:	ee80 7aa7 	vdiv.f32	s14, s1, s15
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 8003128:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800312c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003130:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003134:	ee26 5a86 	vmul.f32	s10, s13, s12
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8003138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313c:	eeb4 5ae4 	vcmpe.f32	s10, s9
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8003140:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8003148:	ee67 5a06 	vmul.f32	s11, s14, s12
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 800314c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8003150:	dc55      	bgt.n	80031fe <PowerStage_setBridgeOutput+0xea>
 8003152:	eddf 7a36 	vldr	s15, [pc, #216]	; 800322c <PowerStage_setBridgeOutput+0x118>
 8003156:	eeb4 5a67 	vcmp.f32	s10, s15
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	bf48      	it	mi
 8003160:	eeb0 5a67 	vmovmi.f32	s10, s15
 8003164:	eddf 7a30 	vldr	s15, [pc, #192]	; 8003228 <PowerStage_setBridgeOutput+0x114>
 8003168:	eef4 5ae7 	vcmpe.f32	s11, s15
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	dc4e      	bgt.n	8003210 <PowerStage_setBridgeOutput+0xfc>
 8003172:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800322c <PowerStage_setBridgeOutput+0x118>
 8003176:	eef4 5a67 	vcmp.f32	s11, s15
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	bf48      	it	mi
 8003180:	eef0 5a67 	vmovmi.f32	s11, s15
 8003184:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003228 <PowerStage_setBridgeOutput+0x114>
 8003188:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	dc47      	bgt.n	8003222 <PowerStage_setBridgeOutput+0x10e>
 8003192:	eddf 7a26 	vldr	s15, [pc, #152]	; 800322c <PowerStage_setBridgeOutput+0x118>
 8003196:	eeb4 6a67 	vcmp.f32	s12, s15
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	bf48      	it	mi
 80031a0:	eeb0 6a67 	vmovmi.f32	s12, s15

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
  v_c = clampf(v_c, 0.02f, 0.98f);

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80031a4:	6803      	ldr	r3, [r0, #0]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80031aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80031ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80031ae:	3101      	adds	r1, #1
 80031b0:	ee06 1a90 	vmov	s13, r1
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80031b4:	3201      	adds	r2, #1
 80031b6:	ee07 2a10 	vmov	s14, r2
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80031ba:	eef8 6a66 	vcvt.f32.u32	s13, s13
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80031be:	3301      	adds	r3, #1
 80031c0:	ee07 3a90 	vmov	s15, r3
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80031c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80031c8:	ee66 6a85 	vmul.f32	s13, s13, s10
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80031cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80031d0:	ee27 7a25 	vmul.f32	s14, s14, s11
  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80031d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80031d8:	ee67 7a86 	vmul.f32	s15, s15, s12

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80031dc:	ee16 3a90 	vmov	r3, s13
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80031e0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80031e4:	b299      	uxth	r1, r3
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80031e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 80031ea:	ee17 3a10 	vmov	r3, s14
 80031ee:	b29a      	uxth	r2, r3
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 80031f0:	ee17 3a90 	vmov	r3, s15
 80031f4:	b29b      	uxth	r3, r3
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80031f6:	6341      	str	r1, [r0, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 80031f8:	6382      	str	r2, [r0, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 80031fa:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 80031fc:	4770      	bx	lr
 80031fe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003228 <PowerStage_setBridgeOutput+0x114>
 8003202:	eef4 5ae7 	vcmpe.f32	s11, s15
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	eeb0 5a64 	vmov.f32	s10, s9
 800320e:	ddb0      	ble.n	8003172 <PowerStage_setBridgeOutput+0x5e>
 8003210:	eef0 5a67 	vmov.f32	s11, s15
 8003214:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003228 <PowerStage_setBridgeOutput+0x114>
 8003218:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	ddb7      	ble.n	8003192 <PowerStage_setBridgeOutput+0x7e>
 8003222:	eeb0 6a67 	vmov.f32	s12, s15
 8003226:	e7bd      	b.n	80031a4 <PowerStage_setBridgeOutput+0x90>
 8003228:	3f7ae148 	.word	0x3f7ae148
 800322c:	3ca3d70a 	.word	0x3ca3d70a

08003230 <PowerStage_calibratePhaseCurrentOffset>:

void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 8003230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t adc_reading_0 = 0;
  int32_t adc_reading_1 = 0;
  int32_t adc_reading_2 = 0;
 8003234:	2600      	movs	r6, #0
void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 8003236:	4605      	mov	r5, r0
 8003238:	240a      	movs	r4, #10
  int32_t adc_reading_1 = 0;
 800323a:	4637      	mov	r7, r6
  int32_t adc_reading_0 = 0;
 800323c:	46b0      	mov	r8, r6
  for (uint16_t i=0; i<10; i+=1) {
    adc_reading_0 += HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 800323e:	2109      	movs	r1, #9
 8003240:	6868      	ldr	r0, [r5, #4]
 8003242:	f000 fe0d 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003246:	2109      	movs	r1, #9
    adc_reading_0 += HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8003248:	4603      	mov	r3, r0
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800324a:	68a8      	ldr	r0, [r5, #8]
    adc_reading_0 += HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 800324c:	4498      	add	r8, r3
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800324e:	f000 fe07 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003252:	f240 110f 	movw	r1, #271	; 0x10f
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8003256:	4603      	mov	r3, r0
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003258:	68a8      	ldr	r0, [r5, #8]
    adc_reading_1 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800325a:	441f      	add	r7, r3
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800325c:	f000 fe00 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>
  for (uint16_t i=0; i<10; i+=1) {
 8003260:	3c01      	subs	r4, #1
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003262:	4603      	mov	r3, r0
  for (uint16_t i=0; i<10; i+=1) {
 8003264:	b2a4      	uxth	r4, r4
    HAL_Delay(10);
 8003266:	200a      	movs	r0, #10
    adc_reading_2 += HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8003268:	441e      	add	r6, r3
    HAL_Delay(10);
 800326a:	f000 fc39 	bl	8003ae0 <HAL_Delay>
  for (uint16_t i=0; i<10; i+=1) {
 800326e:	2c00      	cmp	r4, #0
 8003270:	d1e5      	bne.n	800323e <PowerStage_calibratePhaseCurrentOffset+0xe>
  }
  powerstage->adc_reading_offset[0] = adc_reading_0 / 10;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <PowerStage_calibratePhaseCurrentOffset+0x70>)
 8003274:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8003278:	fb83 1808 	smull	r1, r8, r3, r8
 800327c:	ebc2 08a8 	rsb	r8, r2, r8, asr #2
  powerstage->adc_reading_offset[1] = adc_reading_1 / 10;
 8003280:	fb83 1207 	smull	r1, r2, r3, r7
 8003284:	17ff      	asrs	r7, r7, #31
 8003286:	ebc7 07a2 	rsb	r7, r7, r2, asr #2
  powerstage->adc_reading_offset[2] = adc_reading_2 / 10;
 800328a:	fb83 2306 	smull	r2, r3, r3, r6
 800328e:	17f6      	asrs	r6, r6, #31
 8003290:	ebc6 06a3 	rsb	r6, r6, r3, asr #2
  powerstage->adc_reading_offset[0] = adc_reading_0 / 10;
 8003294:	f8a5 801e 	strh.w	r8, [r5, #30]
  powerstage->adc_reading_offset[1] = adc_reading_1 / 10;
 8003298:	842f      	strh	r7, [r5, #32]
  powerstage->adc_reading_offset[2] = adc_reading_2 / 10;
 800329a:	846e      	strh	r6, [r5, #34]	; 0x22
}
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a0:	66666667 	.word	0x66666667

080032a4 <PowerStage_updatePhaseCurrent>:

void PowerStage_updatePhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	4604      	mov	r4, r0
 80032a8:	460f      	mov	r7, r1
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80032aa:	6840      	ldr	r0, [r0, #4]
 80032ac:	2109      	movs	r1, #9
void PowerStage_updatePhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 80032ae:	461d      	mov	r5, r3
 80032b0:	4616      	mov	r6, r2
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80032b2:	f000 fdd5 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80032b6:	2109      	movs	r1, #9
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80032b8:	8320      	strh	r0, [r4, #24]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80032ba:	68a0      	ldr	r0, [r4, #8]
 80032bc:	f000 fdd0 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80032c0:	f240 110f 	movw	r1, #271	; 0x10f
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80032c4:	8360      	strh	r0, [r4, #26]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80032c6:	68a0      	ldr	r0, [r4, #8]
 80032c8:	f000 fdca 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032cc:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 80032d0:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 80032d4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003320 <PowerStage_updatePhaseCurrent+0x7c>
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032d8:	8b61      	ldrh	r1, [r4, #26]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80032da:	83a0      	strh	r0, [r4, #28]
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032dc:	ebac 0303 	sub.w	r3, ip, r3
 80032e0:	ee07 3a10 	vmov	s14, r3
 80032e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032e8:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032ec:	ee27 7a66 	vnmul.f32	s14, s14, s13
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032f0:	1acb      	subs	r3, r1, r3
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032f2:	ed87 7a00 	vstr	s14, [r7]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032f6:	ee07 3a10 	vmov	s14, r3
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80032fa:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80032fe:	b280      	uxth	r0, r0
 8003300:	1ac0      	subs	r0, r0, r3
 8003302:	ee07 0a90 	vmov	s15, r0
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8003306:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800330e:	ee27 7a66 	vnmul.f32	s14, s14, s13
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8003312:	ee67 7ae6 	vnmul.f32	s15, s15, s13
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8003316:	ed86 7a00 	vstr	s14, [r6]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800331a:	edc5 7a00 	vstr	s15, [r5]
}
 800331e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003320:	3c898000 	.word	0x3c898000

08003324 <PowerStage_updateBusVoltage>:

void PowerStage_updateBusVoltage(PowerStage *powerstage) {
 8003324:	b510      	push	{r4, lr}
  powerstage->bus_voltage_measured += 0.1f * ((HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT) - powerstage->bus_voltage_measured);
 8003326:	f240 110f 	movw	r1, #271	; 0x10f
void PowerStage_updateBusVoltage(PowerStage *powerstage) {
 800332a:	4604      	mov	r4, r0
  powerstage->bus_voltage_measured += 0.1f * ((HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT) - powerstage->bus_voltage_measured);
 800332c:	6840      	ldr	r0, [r0, #4]
 800332e:	f000 fd97 	bl	8003e60 <HAL_ADCEx_InjectedGetValue>
 8003332:	ee07 0a10 	vmov	s14, r0
 8003336:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800333a:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003358 <PowerStage_updateBusVoltage+0x34>
 800333e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800335c <PowerStage_updateBusVoltage+0x38>
 8003342:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003346:	eeb0 6a67 	vmov.f32	s12, s15
 800334a:	ee97 6a25 	vfnms.f32	s12, s14, s11
 800334e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003352:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8003356:	bd10      	pop	{r4, pc}
 8003358:	3c97cccd 	.word	0x3c97cccd
 800335c:	3dcccccd 	.word	0x3dcccccd

08003360 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_MspInit+0x2c>)
 8003362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	661a      	str	r2, [r3, #96]	; 0x60
 800336a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800336c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	f002 0201 	and.w	r2, r2, #1
 8003372:	9200      	str	r2, [sp, #0]
 8003374:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800337c:	659a      	str	r2, [r3, #88]	; 0x58
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003388:	b002      	add	sp, #8
 800338a:	4770      	bx	lr
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003390:	b530      	push	{r4, r5, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	b09b      	sub	sp, #108	; 0x6c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003396:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003398:	2244      	movs	r2, #68	; 0x44
 800339a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80033a0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80033a4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a6:	f004 fa49 	bl	800783c <memset>
  if(hadc->Instance==ADC1)
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80033b2:	4a35      	ldr	r2, [pc, #212]	; (8003488 <HAL_ADC_MspInit+0xf8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d045      	beq.n	8003444 <HAL_ADC_MspInit+0xb4>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80033b8:	b01b      	add	sp, #108	; 0x6c
 80033ba:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80033bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80033c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80033c6:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80033c8:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ca:	f002 fc25 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d153      	bne.n	800347a <HAL_ADC_MspInit+0xea>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033d2:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_ADC_MspInit+0xfc>)
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033d8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033dc:	d109      	bne.n	80033f2 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80033de:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <HAL_ADC_MspInit+0x100>)
 80033e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_ADC_MspInit+0x100>)
 80033f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80033fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fe:	f002 0201 	and.w	r2, r2, #1
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003408:	f042 0202 	orr.w	r2, r2, #2
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003416:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800341c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003422:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003424:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003426:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	f001 fe19 	bl	8005060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800342e:	f241 0302 	movw	r3, #4098	; 0x1002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	4818      	ldr	r0, [pc, #96]	; (8003494 <HAL_ADC_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003438:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f001 fe10 	bl	8005060 <HAL_GPIO_Init>
}
 8003440:	b01b      	add	sp, #108	; 0x6c
 8003442:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003444:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003448:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800344c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800344e:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003450:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003452:	f002 fbe1 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8003456:	b998      	cbnz	r0, 8003480 <HAL_ADC_MspInit+0xf0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003458:	4a0c      	ldr	r2, [pc, #48]	; (800348c <HAL_ADC_MspInit+0xfc>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800345e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003460:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003462:	d1a9      	bne.n	80033b8 <HAL_ADC_MspInit+0x28>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_ADC_MspInit+0x100>)
 8003466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346c:	64da      	str	r2, [r3, #76]	; 0x4c
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003474:	9303      	str	r3, [sp, #12]
 8003476:	9b03      	ldr	r3, [sp, #12]
}
 8003478:	e79e      	b.n	80033b8 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 800347a:	f7fe fcd7 	bl	8001e2c <Error_Handler>
 800347e:	e7a8      	b.n	80033d2 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003480:	f7fe fcd4 	bl	8001e2c <Error_Handler>
 8003484:	e7e8      	b.n	8003458 <HAL_ADC_MspInit+0xc8>
 8003486:	bf00      	nop
 8003488:	50000100 	.word	0x50000100
 800348c:	20000770 	.word	0x20000770
 8003490:	40021000 	.word	0x40021000
 8003494:	48000400 	.word	0x48000400

08003498 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_CORDIC_MspInit+0x2c>)
 800349a:	6802      	ldr	r2, [r0, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d000      	beq.n	80034a2 <HAL_CORDIC_MspInit+0xa>
 80034a0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80034a2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80034ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80034b2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80034be:	b002      	add	sp, #8
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40020c00 	.word	0x40020c00

080034c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80034c8:	b530      	push	{r4, r5, lr}
 80034ca:	4604      	mov	r4, r0
 80034cc:	b099      	sub	sp, #100	; 0x64
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ce:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034d0:	2244      	movs	r2, #68	; 0x44
 80034d2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80034d8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80034dc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034de:	f004 f9ad 	bl	800783c <memset>
  if(hfdcan->Instance==FDCAN1)
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_FDCAN_MspInit+0xac>)
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d001      	beq.n	80034ee <HAL_FDCAN_MspInit+0x26>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80034ea:	b019      	add	sp, #100	; 0x64
 80034ec:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f6:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034f8:	9207      	str	r2, [sp, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80034fa:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034fc:	f002 fb8c 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8003500:	2800      	cmp	r0, #0
 8003502:	d133      	bne.n	800356c <HAL_FDCAN_MspInit+0xa4>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003504:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_FDCAN_MspInit+0xb0>)
 8003506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003508:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800350c:	659a      	str	r2, [r3, #88]	; 0x58
 800350e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003510:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003514:	9200      	str	r2, [sp, #0]
 8003516:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003528:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003534:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003536:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800353c:	e9cd 4305 	strd	r4, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003540:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	f001 fd8c 	bl	8005060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8003548:	4622      	mov	r2, r4
 800354a:	2104      	movs	r1, #4
 800354c:	2015      	movs	r0, #21
 800354e:	f001 f855 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003552:	2015      	movs	r0, #21
 8003554:	f001 f890 	bl	8004678 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8003558:	4622      	mov	r2, r4
 800355a:	2104      	movs	r1, #4
 800355c:	2016      	movs	r0, #22
 800355e:	f001 f84d 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003562:	2016      	movs	r0, #22
 8003564:	f001 f888 	bl	8004678 <HAL_NVIC_EnableIRQ>
}
 8003568:	b019      	add	sp, #100	; 0x64
 800356a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800356c:	f7fe fc5e 	bl	8001e2c <Error_Handler>
 8003570:	e7c8      	b.n	8003504 <HAL_FDCAN_MspInit+0x3c>
 8003572:	bf00      	nop
 8003574:	40006400 	.word	0x40006400
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800357c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 800357e:	6802      	ldr	r2, [r0, #0]
 8003580:	492b      	ldr	r1, [pc, #172]	; (8003630 <HAL_OPAMP_MspInit+0xb4>)
{
 8003582:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8003586:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800358c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003590:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP1)
 8003592:	d007      	beq.n	80035a4 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_OPAMP_MspInit+0xb8>)
 8003596:	429a      	cmp	r2, r3
 8003598:	d01c      	beq.n	80035d4 <HAL_OPAMP_MspInit+0x58>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_OPAMP_MspInit+0xbc>)
 800359c:	429a      	cmp	r2, r3
 800359e:	d030      	beq.n	8003602 <HAL_OPAMP_MspInit+0x86>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80035a0:	b009      	add	sp, #36	; 0x24
 80035a2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80035ac:	250a      	movs	r5, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035be:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c0:	a903      	add	r1, sp, #12
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	f001 fd48 	bl	8005060 <HAL_GPIO_Init>
}
 80035d0:	b009      	add	sp, #36	; 0x24
 80035d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80035d8:	33fc      	adds	r3, #252	; 0xfc
 80035da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80035ea:	25a0      	movs	r5, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ec:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ee:	a903      	add	r1, sp, #12
 80035f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f4:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f001 fd31 	bl	8005060 <HAL_GPIO_Init>
}
 80035fe:	b009      	add	sp, #36	; 0x24
 8003600:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003602:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8003606:	33f8      	adds	r3, #248	; 0xf8
 8003608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	480c      	ldr	r0, [pc, #48]	; (800363c <HAL_OPAMP_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360c:	f042 0202 	orr.w	r2, r2, #2
 8003610:	64da      	str	r2, [r3, #76]	; 0x4c
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800361a:	2505      	movs	r5, #5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800361c:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003620:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003624:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003626:	f001 fd1b 	bl	8005060 <HAL_GPIO_Init>
}
 800362a:	b009      	add	sp, #36	; 0x24
 800362c:	bd30      	pop	{r4, r5, pc}
 800362e:	bf00      	nop
 8003630:	40010300 	.word	0x40010300
 8003634:	40010304 	.word	0x40010304
 8003638:	40010308 	.word	0x40010308
 800363c:	48000400 	.word	0x48000400

08003640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003640:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_SPI_MspInit+0x74>)
 8003644:	6801      	ldr	r1, [r0, #0]
{
 8003646:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 800364a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003650:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003654:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003656:	d001      	beq.n	800365c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003658:	b009      	add	sp, #36	; 0x24
 800365a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800365c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003660:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003666:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003668:	4813      	ldr	r0, [pc, #76]	; (80036b8 <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800366a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800366e:	661a      	str	r2, [r3, #96]	; 0x60
 8003670:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003672:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003676:	9201      	str	r2, [sp, #4]
 8003678:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800367c:	4322      	orrs	r2, r4
 800367e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003684:	4023      	ands	r3, r4
 8003686:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003688:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800368c:	2328      	movs	r3, #40	; 0x28
 800368e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003690:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003694:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	f001 fce3 	bl	8005060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800369a:	2210      	movs	r2, #16
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800369c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <HAL_SPI_MspInit+0x78>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	e9cd 2403 	strd	r2, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f001 fcd8 	bl	8005060 <HAL_GPIO_Init>
}
 80036b0:	b009      	add	sp, #36	; 0x24
 80036b2:	bd30      	pop	{r4, r5, pc}
 80036b4:	40013000 	.word	0x40013000
 80036b8:	48000400 	.word	0x48000400

080036bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036bc:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80036be:	4a23      	ldr	r2, [pc, #140]	; (800374c <HAL_TIM_Base_MspInit+0x90>)
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	4293      	cmp	r3, r2
{
 80036c4:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 80036c6:	d015      	beq.n	80036f4 <HAL_TIM_Base_MspInit+0x38>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d027      	beq.n	800371e <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80036ce:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_TIM_Base_MspInit+0x94>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d002      	beq.n	80036da <HAL_TIM_Base_MspInit+0x1e>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80036d4:	b005      	add	sp, #20
 80036d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_TIM_Base_MspInit+0x98>)
 80036dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036de:	f042 0210 	orr.w	r2, r2, #16
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	9303      	str	r3, [sp, #12]
 80036ec:	9b03      	ldr	r3, [sp, #12]
}
 80036ee:	b005      	add	sp, #20
 80036f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <HAL_TIM_Base_MspInit+0x98>)
 80036f6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80036fc:	6619      	str	r1, [r3, #96]	; 0x60
 80036fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003704:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8003706:	2019      	movs	r0, #25
 8003708:	2200      	movs	r2, #0
 800370a:	2101      	movs	r1, #1
    __HAL_RCC_TIM1_CLK_ENABLE();
 800370c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800370e:	f000 ff75 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003712:	2019      	movs	r0, #25
}
 8003714:	b005      	add	sp, #20
 8003716:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800371a:	f000 bfad 	b.w	8004678 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800371e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003724:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003726:	f041 0101 	orr.w	r1, r1, #1
 800372a:	6599      	str	r1, [r3, #88]	; 0x58
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003734:	201c      	movs	r0, #28
 8003736:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003738:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800373a:	f000 ff5f 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800373e:	201c      	movs	r0, #28
}
 8003740:	b005      	add	sp, #20
 8003742:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003746:	f000 bf97 	b.w	8004678 <HAL_NVIC_EnableIRQ>
 800374a:	bf00      	nop
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40001000 	.word	0x40001000
 8003754:	40021000 	.word	0x40021000

08003758 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_TIM_PWM_MspInit+0x28>)
 800375a:	6802      	ldr	r2, [r0, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d000      	beq.n	8003762 <HAL_TIM_PWM_MspInit+0xa>
 8003760:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003762:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
{
 8003766:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800376a:	f042 0202 	orr.w	r2, r2, #2
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800377a:	b002      	add	sp, #8
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40000400 	.word	0x40000400

08003784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003784:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003786:	6803      	ldr	r3, [r0, #0]
 8003788:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <HAL_TIM_MspPostInit+0xbc>)
{
 800378a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 800378e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003794:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003798:	9407      	str	r4, [sp, #28]
  if(htim->Instance==TIM1)
 800379a:	d004      	beq.n	80037a6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <HAL_TIM_MspPostInit+0xc0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d037      	beq.n	8003812 <HAL_TIM_MspPostInit+0x8e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037a2:	b008      	add	sp, #32
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a6:	4b28      	ldr	r3, [pc, #160]	; (8003848 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	4828      	ldr	r0, [pc, #160]	; (800384c <HAL_TIM_MspPostInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ae:	432a      	orrs	r2, r5
 80037b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b4:	402a      	ands	r2, r5
 80037b6:	9200      	str	r2, [sp, #0]
 80037b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037cc:	2606      	movs	r6, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80037d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037d6:	9607      	str	r6, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037da:	f001 fc41 	bl	8005060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80037e6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e8:	4818      	ldr	r0, [pc, #96]	; (800384c <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80037ea:	e9cd 4306 	strd	r4, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f001 fc35 	bl	8005060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80037f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	a903      	add	r1, sp, #12
 80037fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003804:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003808:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	f001 fc29 	bl	8005060 <HAL_GPIO_Init>
}
 800380e:	b008      	add	sp, #32
 8003810:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_TIM_MspPostInit+0xc4>)
 8003814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	64da      	str	r2, [r3, #76]	; 0x4c
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003824:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003826:	2550      	movs	r5, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003828:	a903      	add	r1, sp, #12
 800382a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003834:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003836:	f001 fc13 	bl	8005060 <HAL_GPIO_Init>
}
 800383a:	b008      	add	sp, #32
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40021000 	.word	0x40021000
 800384c:	48000400 	.word	0x48000400

08003850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003850:	b530      	push	{r4, r5, lr}
 8003852:	4604      	mov	r4, r0
 8003854:	b099      	sub	sp, #100	; 0x64
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003856:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003858:	2244      	movs	r2, #68	; 0x44
 800385a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003860:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003864:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003866:	f003 ffe9 	bl	800783c <memset>
  if(huart->Instance==USART3)
 800386a:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_UART_MspInit+0x80>)
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003872:	b019      	add	sp, #100	; 0x64
 8003874:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003876:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003878:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800387a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800387c:	f002 f9cc 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8003880:	bb10      	cbnz	r0, 80038c8 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003882:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_UART_MspInit+0x84>)
 8003884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003886:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800388a:	659a      	str	r2, [r3, #88]	; 0x58
 800388c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800388e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003892:	9200      	str	r2, [sp, #0]
 8003894:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003898:	f042 0202 	orr.w	r2, r2, #2
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
 800389e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038ac:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038b0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b2:	4809      	ldr	r0, [pc, #36]	; (80038d8 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b4:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	e9cd 2403 	strd	r2, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038bc:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c0:	f001 fbce 	bl	8005060 <HAL_GPIO_Init>
}
 80038c4:	b019      	add	sp, #100	; 0x64
 80038c6:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80038c8:	f7fe fab0 	bl	8001e2c <Error_Handler>
 80038cc:	e7d9      	b.n	8003882 <HAL_UART_MspInit+0x32>
 80038ce:	bf00      	nop
 80038d0:	40004800 	.word	0x40004800
 80038d4:	40021000 	.word	0x40021000
 80038d8:	48000400 	.word	0x48000400

080038dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038dc:	e7fe      	b.n	80038dc <NMI_Handler>
 80038de:	bf00      	nop

080038e0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <HardFault_Handler>
 80038e2:	bf00      	nop

080038e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <MemManage_Handler>
 80038e6:	bf00      	nop

080038e8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e8:	e7fe      	b.n	80038e8 <BusFault_Handler>
 80038ea:	bf00      	nop

080038ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <UsageFault_Handler>
 80038ee:	bf00      	nop

080038f0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop

080038f4 <DebugMon_Handler>:
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <PendSV_Handler>:
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop

080038fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038fc:	f000 b8de 	b.w	8003abc <HAL_IncTick>

08003900 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003900:	4801      	ldr	r0, [pc, #4]	; (8003908 <FDCAN1_IT0_IRQHandler+0x8>)
 8003902:	f001 b98b 	b.w	8004c1c <HAL_FDCAN_IRQHandler>
 8003906:	bf00      	nop
 8003908:	20000434 	.word	0x20000434

0800390c <FDCAN1_IT1_IRQHandler>:
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <FDCAN1_IT1_IRQHandler+0x8>)
 800390e:	f001 b985 	b.w	8004c1c <HAL_FDCAN_IRQHandler>
 8003912:	bf00      	nop
 8003914:	20000434 	.word	0x20000434

08003918 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003918:	4801      	ldr	r0, [pc, #4]	; (8003920 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800391a:	f003 b887 	b.w	8006a2c <HAL_TIM_IRQHandler>
 800391e:	bf00      	nop
 8003920:	200005b0 	.word	0x200005b0

08003924 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003924:	4801      	ldr	r0, [pc, #4]	; (800392c <TIM2_IRQHandler+0x8>)
 8003926:	f003 b881 	b.w	8006a2c <HAL_TIM_IRQHandler>
 800392a:	bf00      	nop
 800392c:	200005fc 	.word	0x200005fc

08003930 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003930:	2001      	movs	r0, #1
 8003932:	4770      	bx	lr

08003934 <_kill>:

int _kill(int pid, int sig)
{
 8003934:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003936:	f003 ff57 	bl	80077e8 <__errno>
 800393a:	2316      	movs	r3, #22
 800393c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800393e:	f04f 30ff 	mov.w	r0, #4294967295
 8003942:	bd08      	pop	{r3, pc}

08003944 <_exit>:

void _exit (int status)
{
 8003944:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003946:	f003 ff4f 	bl	80077e8 <__errno>
 800394a:	2316      	movs	r3, #22
 800394c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800394e:	e7fe      	b.n	800394e <_exit+0xa>

08003950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003950:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003952:	1e16      	subs	r6, r2, #0
 8003954:	dd07      	ble.n	8003966 <_read+0x16>
 8003956:	460c      	mov	r4, r1
 8003958:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800395a:	f3af 8000 	nop.w
 800395e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003962:	42a5      	cmp	r5, r4
 8003964:	d1f9      	bne.n	800395a <_read+0xa>
	}

return len;
}
 8003966:	4630      	mov	r0, r6
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	bf00      	nop

0800396c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800396c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396e:	1e16      	subs	r6, r2, #0
 8003970:	dd07      	ble.n	8003982 <_write+0x16>
 8003972:	460c      	mov	r4, r1
 8003974:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003976:	f814 0b01 	ldrb.w	r0, [r4], #1
 800397a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397e:	42a5      	cmp	r5, r4
 8003980:	d1f9      	bne.n	8003976 <_write+0xa>
	}
	return len;
}
 8003982:	4630      	mov	r0, r6
 8003984:	bd70      	pop	{r4, r5, r6, pc}
 8003986:	bf00      	nop

08003988 <_close>:

int _close(int file)
{
	return -1;
}
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop

08003990 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003994:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003996:	2000      	movs	r0, #0
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800399c:	2001      	movs	r0, #1
 800399e:	4770      	bx	lr

080039a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80039a0:	2000      	movs	r0, #0
 80039a2:	4770      	bx	lr

080039a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a6:	4c0c      	ldr	r4, [pc, #48]	; (80039d8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <_sbrk+0x38>)
 80039aa:	490d      	ldr	r1, [pc, #52]	; (80039e0 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80039ac:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039ae:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80039b0:	b12a      	cbz	r2, 80039be <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b2:	4410      	add	r0, r2
 80039b4:	4288      	cmp	r0, r1
 80039b6:	d807      	bhi.n	80039c8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80039b8:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80039ba:	4610      	mov	r0, r2
 80039bc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <_sbrk+0x40>)
 80039c0:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80039c2:	4410      	add	r0, r2
 80039c4:	4288      	cmp	r0, r1
 80039c6:	d9f7      	bls.n	80039b8 <_sbrk+0x14>
    errno = ENOMEM;
 80039c8:	f003 ff0e 	bl	80077e8 <__errno>
 80039cc:	230c      	movs	r3, #12
    return (void *)-1;
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80039d2:	6003      	str	r3, [r0, #0]
}
 80039d4:	4610      	mov	r0, r2
 80039d6:	bd10      	pop	{r4, pc}
 80039d8:	20000774 	.word	0x20000774
 80039dc:	20008000 	.word	0x20008000
 80039e0:	00000400 	.word	0x00000400
 80039e4:	20000790 	.word	0x20000790

080039e8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039e8:	4a03      	ldr	r2, [pc, #12]	; (80039f8 <SystemInit+0x10>)
 80039ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f6:	4770      	bx	lr
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a00:	480d      	ldr	r0, [pc, #52]	; (8003a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a02:	490e      	ldr	r1, [pc, #56]	; (8003a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <LoopForever+0xe>)
  movs r3, #0
 8003a06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a08:	e002      	b.n	8003a10 <LoopCopyDataInit>

08003a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a0e:	3304      	adds	r3, #4

08003a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a14:	d3f9      	bcc.n	8003a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a18:	4c0b      	ldr	r4, [pc, #44]	; (8003a48 <LoopForever+0x16>)
  movs r3, #0
 8003a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a1c:	e001      	b.n	8003a22 <LoopFillZerobss>

08003a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a20:	3204      	adds	r2, #4

08003a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a24:	d3fb      	bcc.n	8003a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a26:	f7ff ffdf 	bl	80039e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f003 fee3 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a2e:	f7fd fec3 	bl	80017b8 <main>

08003a32 <LoopForever>:

LoopForever:
    b LoopForever
 8003a32:	e7fe      	b.n	8003a32 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8003a34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a3c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003a40:	0800bc04 	.word	0x0800bc04
  ldr r2, =_sbss
 8003a44:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003a48:	2000078c 	.word	0x2000078c

08003a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <ADC1_2_IRQHandler>
	...

08003a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a50:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_InitTick+0x40>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b90b      	cbnz	r3, 8003a5c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a58:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a5c:	490d      	ldr	r1, [pc, #52]	; (8003a94 <HAL_InitTick+0x44>)
 8003a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a62:	4605      	mov	r5, r0
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	6808      	ldr	r0, [r1, #0]
 8003a6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a6e:	f000 fe11 	bl	8004694 <HAL_SYSTICK_Config>
 8003a72:	4604      	mov	r4, r0
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d1ef      	bne.n	8003a58 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a78:	2d0f      	cmp	r5, #15
 8003a7a:	d8ed      	bhi.n	8003a58 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4629      	mov	r1, r5
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f000 fdba 	bl	80045fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_InitTick+0x48>)
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	601d      	str	r5, [r3, #0]
}
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	20000004 	.word	0x20000004
 8003a94:	20000000 	.word	0x20000000
 8003a98:	20000008 	.word	0x20000008

08003a9c <HAL_Init>:
{
 8003a9c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a9e:	2003      	movs	r0, #3
 8003aa0:	f000 fd9a 	bl	80045d8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aa4:	200f      	movs	r0, #15
 8003aa6:	f7ff ffd3 	bl	8003a50 <HAL_InitTick>
 8003aaa:	b110      	cbz	r0, 8003ab2 <HAL_Init+0x16>
    status = HAL_ERROR;
 8003aac:	2401      	movs	r4, #1
}
 8003aae:	4620      	mov	r0, r4
 8003ab0:	bd10      	pop	{r4, pc}
 8003ab2:	4604      	mov	r4, r0
    HAL_MspInit();
 8003ab4:	f7ff fc54 	bl	8003360 <HAL_MspInit>
}
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd10      	pop	{r4, pc}

08003abc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_IncTick+0x10>)
 8003abe:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <HAL_IncTick+0x14>)
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	6809      	ldr	r1, [r1, #0]
 8003ac4:	440b      	add	r3, r1
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000778 	.word	0x20000778
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ad4:	4b01      	ldr	r3, [pc, #4]	; (8003adc <HAL_GetTick+0x8>)
 8003ad6:	6818      	ldr	r0, [r3, #0]
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000778 	.word	0x20000778

08003ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ae4:	f7ff fff6 	bl	8003ad4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003aea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003aec:	d002      	beq.n	8003af4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_Delay+0x20>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003af4:	f7ff ffee 	bl	8003ad4 <HAL_GetTick>
 8003af8:	1b43      	subs	r3, r0, r5
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	d3fa      	bcc.n	8003af4 <HAL_Delay+0x14>
  {
  }
}
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000004 	.word	0x20000004

08003b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b04:	b530      	push	{r4, r5, lr}
 8003b06:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	f000 80c9 	beq.w	8003ca4 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b12:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003b14:	4604      	mov	r4, r0
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	f000 8092 	beq.w	8003c40 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b1c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b1e:	6893      	ldr	r3, [r2, #8]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	d505      	bpl.n	8003b30 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b24:	6893      	ldr	r3, [r2, #8]
 8003b26:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b2e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b30:	6893      	ldr	r3, [r2, #8]
 8003b32:	00dd      	lsls	r5, r3, #3
 8003b34:	d419      	bmi.n	8003b6a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b36:	4b70      	ldr	r3, [pc, #448]	; (8003cf8 <HAL_ADC_Init+0x1f4>)
 8003b38:	4870      	ldr	r0, [pc, #448]	; (8003cfc <HAL_ADC_Init+0x1f8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003b3c:	6891      	ldr	r1, [r2, #8]
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	fba0 0303 	umull	r0, r3, r0, r3
 8003b44:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003b4e:	3301      	adds	r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003b56:	6091      	str	r1, [r2, #8]
 8003b58:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b5a:	9b01      	ldr	r3, [sp, #4]
 8003b5c:	b12b      	cbz	r3, 8003b6a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003b5e:	9b01      	ldr	r3, [sp, #4]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b64:	9b01      	ldr	r3, [sp, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f9      	bne.n	8003b5e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b6a:	6893      	ldr	r3, [r2, #8]
 8003b6c:	00d8      	lsls	r0, r3, #3
 8003b6e:	d459      	bmi.n	8003c24 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b72:	f043 0310 	orr.w	r3, r3, #16
 8003b76:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b78:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b7a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7c:	4303      	orrs	r3, r0
 8003b7e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b88:	d153      	bne.n	8003c32 <HAL_ADC_Init+0x12e>
 8003b8a:	06d9      	lsls	r1, r3, #27
 8003b8c:	d451      	bmi.n	8003c32 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b9a:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b9c:	07db      	lsls	r3, r3, #31
 8003b9e:	d40e      	bmi.n	8003bbe <HAL_ADC_Init+0xba>
 8003ba0:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_ADC_Init+0x1fc>)
 8003ba2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003ba6:	6889      	ldr	r1, [r1, #8]
 8003ba8:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	07dd      	lsls	r5, r3, #31
 8003bae:	d406      	bmi.n	8003bbe <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bb0:	4954      	ldr	r1, [pc, #336]	; (8003d04 <HAL_ADC_Init+0x200>)
 8003bb2:	6865      	ldr	r5, [r4, #4]
 8003bb4:	688b      	ldr	r3, [r1, #8]
 8003bb6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003bba:	432b      	orrs	r3, r5
 8003bbc:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003bbe:	68e5      	ldr	r5, [r4, #12]
 8003bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bc2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003bc6:	432b      	orrs	r3, r5
 8003bc8:	68a5      	ldr	r5, [r4, #8]
 8003bca:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bcc:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bce:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003bd0:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bd8:	d05f      	beq.n	8003c9a <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003bdc:	b121      	cbz	r1, 8003be8 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003bde:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be0:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003be4:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be6:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003be8:	68d5      	ldr	r5, [r2, #12]
 8003bea:	4947      	ldr	r1, [pc, #284]	; (8003d08 <HAL_ADC_Init+0x204>)
 8003bec:	4029      	ands	r1, r5
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bf2:	6913      	ldr	r3, [r2, #16]
 8003bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bf6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bfe:	6893      	ldr	r3, [r2, #8]
 8003c00:	0759      	lsls	r1, r3, #29
 8003c02:	d523      	bpl.n	8003c4c <HAL_ADC_Init+0x148>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c04:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c06:	6963      	ldr	r3, [r4, #20]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d04e      	beq.n	8003caa <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003c0e:	f023 030f 	bic.w	r3, r3, #15
 8003c12:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003c20:	b003      	add	sp, #12
 8003c22:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c24:	6893      	ldr	r3, [r2, #8]
 8003c26:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c2e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c30:	d0ab      	beq.n	8003b8a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003c34:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c36:	f043 0310 	orr.w	r3, r3, #16
 8003c3a:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003c3c:	b003      	add	sp, #12
 8003c3e:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003c40:	f7ff fba6 	bl	8003390 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c44:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003c46:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003c4a:	e767      	b.n	8003b1c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c4c:	6893      	ldr	r3, [r2, #8]
 8003c4e:	071b      	lsls	r3, r3, #28
 8003c50:	d4d9      	bmi.n	8003c06 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c52:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c54:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c58:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c5a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c5e:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c60:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c64:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c68:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003c6a:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c6c:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c6e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003c70:	bb19      	cbnz	r1, 8003cba <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c78:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003c7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003c88:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d021      	beq.n	8003cd4 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c90:	6913      	ldr	r3, [r2, #16]
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6113      	str	r3, [r2, #16]
 8003c98:	e7b5      	b.n	8003c06 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c9c:	3901      	subs	r1, #1
 8003c9e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003ca2:	e79a      	b.n	8003bda <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8003ca4:	2001      	movs	r0, #1
}
 8003ca6:	b003      	add	sp, #12
 8003ca8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003caa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003cac:	6a23      	ldr	r3, [r4, #32]
 8003cae:	f021 010f 	bic.w	r1, r1, #15
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb8:	e7ac      	b.n	8003c14 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbe:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003cc0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003cc4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003cd2:	e7d9      	b.n	8003c88 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cd4:	6911      	ldr	r1, [r2, #16]
 8003cd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cd8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003cda:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003cde:	f021 0104 	bic.w	r1, r1, #4
 8003ce2:	432b      	orrs	r3, r5
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003cec:	430b      	orrs	r3, r1
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6113      	str	r3, [r2, #16]
 8003cf4:	e787      	b.n	8003c06 <HAL_ADC_Init+0x102>
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	50000100 	.word	0x50000100
 8003d04:	50000300 	.word	0x50000300
 8003d08:	fff04007 	.word	0xfff04007

08003d0c <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	07d2      	lsls	r2, r2, #31
 8003d12:	d501      	bpl.n	8003d18 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d14:	2000      	movs	r0, #0
}
 8003d16:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <ADC_Enable+0x70>)
 8003d1c:	4211      	tst	r1, r2
{
 8003d1e:	b570      	push	{r4, r5, r6, lr}
 8003d20:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d22:	d008      	beq.n	8003d36 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d24:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003d26:	f043 0310 	orr.w	r3, r3, #16
 8003d2a:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2c:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8003d2e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d30:	4303      	orrs	r3, r0
 8003d32:	6633      	str	r3, [r6, #96]	; 0x60
}
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4d11      	ldr	r5, [pc, #68]	; (8003d80 <ADC_Enable+0x74>)
 8003d3a:	402a      	ands	r2, r5
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003d42:	f7ff fec7 	bl	8003ad4 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d46:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d48:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	07d0      	lsls	r0, r2, #31
 8003d4e:	d413      	bmi.n	8003d78 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d50:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d52:	07d1      	lsls	r1, r2, #31
 8003d54:	d404      	bmi.n	8003d60 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	402a      	ands	r2, r5
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d60:	f7ff feb8 	bl	8003ad4 <HAL_GetTick>
 8003d64:	1b03      	subs	r3, r0, r4
 8003d66:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d68:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d6a:	d9ee      	bls.n	8003d4a <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	07d2      	lsls	r2, r2, #31
 8003d70:	d5d8      	bpl.n	8003d24 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	07d0      	lsls	r0, r2, #31
 8003d76:	d5eb      	bpl.n	8003d50 <ADC_Enable+0x44>
  return HAL_OK;
 8003d78:	2000      	movs	r0, #0
}
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	8000003f 	.word	0x8000003f
 8003d80:	7fffffc0 	.word	0x7fffffc0

08003d84 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8003d84:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d86:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <HAL_ADCEx_InjectedStart+0xd4>)
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	6895      	ldr	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	0711      	lsls	r1, r2, #28
 8003d90:	d43a      	bmi.n	8003e08 <HAL_ADCEx_InjectedStart+0x84>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003d92:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	d036      	beq.n	8003e0c <HAL_ADCEx_InjectedStart+0x88>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003d9e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d030      	beq.n	8003e08 <HAL_ADCEx_InjectedStart+0x84>
 8003da6:	2301      	movs	r3, #1
 8003da8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff ffad 	bl	8003d0c <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d132      	bne.n	8003e1c <HAL_ADCEx_InjectedStart+0x98>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003db6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003db8:	05da      	lsls	r2, r3, #23
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003dba:	bf49      	itett	mi
 8003dbc:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003dbe:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003dc0:	f023 0308 	bicmi.w	r3, r3, #8
 8003dc4:	6623      	strmi	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	6de3      	ldr	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc8:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003dca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dd6:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_ADCEx_InjectedStart+0xd8>)
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d022      	beq.n	8003e24 <HAL_ADCEx_InjectedStart+0xa0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dde:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003de0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003de4:	65e3      	str	r3, [r4, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003de6:	2160      	movs	r1, #96	; 0x60

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003de8:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003dea:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003dec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003df0:	68d3      	ldr	r3, [r2, #12]
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003df2:	019b      	lsls	r3, r3, #6
 8003df4:	d407      	bmi.n	8003e06 <HAL_ADCEx_InjectedStart+0x82>
  MODIFY_REG(ADCx->CR,
 8003df6:	6893      	ldr	r3, [r2, #8]
 8003df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e00:	f043 0308 	orr.w	r3, r3, #8
 8003e04:	6093      	str	r3, [r2, #8]
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8003e06:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003e08:	2002      	movs	r0, #2
}
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
        && (tmp_config_injected_queue == 0UL)
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	dbc6      	blt.n	8003d9e <HAL_ADCEx_InjectedStart+0x1a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e10:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003e12:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e18:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e24:	f015 051f 	ands.w	r5, r5, #31
 8003e28:	d00d      	beq.n	8003e46 <HAL_ADCEx_InjectedStart+0xc2>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003e2a:	2360      	movs	r3, #96	; 0x60
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e2c:	3d06      	subs	r5, #6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003e2e:	6013      	str	r3, [r2, #0]
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e30:	2d01      	cmp	r5, #1
      __HAL_UNLOCK(hadc);
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e3a:	d9d9      	bls.n	8003df0 <HAL_ADCEx_InjectedStart+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e4c:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003e4e:	2360      	movs	r3, #96	; 0x60
 8003e50:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003e52:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e56:	e7cb      	b.n	8003df0 <HAL_ADCEx_InjectedStart+0x6c>
 8003e58:	50000300 	.word	0x50000300
 8003e5c:	50000100 	.word	0x50000100

08003e60 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003e60:	f240 2315 	movw	r3, #533	; 0x215
 8003e64:	4299      	cmp	r1, r3
 8003e66:	d00b      	beq.n	8003e80 <HAL_ADCEx_InjectedGetValue+0x20>
 8003e68:	f240 331b 	movw	r3, #795	; 0x31b
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	d00f      	beq.n	8003e90 <HAL_ADCEx_InjectedGetValue+0x30>
 8003e70:	f240 130f 	movw	r3, #271	; 0x10f
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d007      	beq.n	8003e88 <HAL_ADCEx_InjectedGetValue+0x28>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
      break;
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003e78:	6803      	ldr	r3, [r0, #0]
 8003e7a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
      break;
  }

  /* Return ADC converted value */
  return tmp_jdr;
}
 8003e7e:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8003e80:	6803      	ldr	r3, [r0, #0]
 8003e82:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8003e86:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8003e88:	6803      	ldr	r3, [r0, #0]
 8003e8a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8003e8e:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8003e90:	6803      	ldr	r3, [r0, #0]
 8003e92:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8003e96:	4770      	bx	lr

08003e98 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8003ea0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003ea2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003ea4:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003ea6:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ea8:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8003eaa:	f000 8166 	beq.w	800417a <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003eb4:	b1e2      	cbz	r2, 8003ef0 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003eb6:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d019      	beq.n	8003ef0 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003ebc:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	f040 8119 	bne.w	80040f6 <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ec4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	f000 8222 	beq.w	8004310 <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ecc:	1e5d      	subs	r5, r3, #1
 8003ece:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003ed0:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8003ed4:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ed6:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003ed8:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003edc:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003ede:	f004 051f 	and.w	r5, r4, #31
 8003ee2:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8003ee6:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003ee8:	431c      	orrs	r4, r3
 8003eea:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003eec:	6803      	ldr	r3, [r0, #0]
 8003eee:	e005      	b.n	8003efc <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003ef0:	684b      	ldr	r3, [r1, #4]
 8003ef2:	2b09      	cmp	r3, #9
 8003ef4:	f000 80eb 	beq.w	80040ce <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003ef8:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003efa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003efc:	689c      	ldr	r4, [r3, #8]
 8003efe:	0727      	lsls	r7, r4, #28
 8003f00:	d410      	bmi.n	8003f24 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003f02:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003f06:	2c00      	cmp	r4, #0
 8003f08:	f040 80d8 	bne.w	80040bc <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003f0c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003f10:	68dd      	ldr	r5, [r3, #12]
 8003f12:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003f16:	0524      	lsls	r4, r4, #20
 8003f18:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003f1c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003f20:	432c      	orrs	r4, r5
 8003f22:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f24:	689c      	ldr	r4, [r3, #8]
 8003f26:	f014 0404 	ands.w	r4, r4, #4
 8003f2a:	d058      	beq.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f2c:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f2e:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f30:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f32:	07ee      	lsls	r6, r5, #31
 8003f34:	d40c      	bmi.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003f36:	4dac      	ldr	r5, [pc, #688]	; (80041e8 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003f38:	68ce      	ldr	r6, [r1, #12]
 8003f3a:	42ae      	cmp	r6, r5
 8003f3c:	f000 8100 	beq.w	8004140 <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8003f40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003f44:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003f48:	ea21 0105 	bic.w	r1, r1, r5
 8003f4c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003f50:	49a6      	ldr	r1, [pc, #664]	; (80041ec <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003f52:	420a      	tst	r2, r1
 8003f54:	d019      	beq.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f56:	4ea6      	ldr	r6, [pc, #664]	; (80041f0 <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003f58:	4da6      	ldr	r5, [pc, #664]	; (80041f4 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8003f5a:	68b1      	ldr	r1, [r6, #8]
 8003f5c:	42aa      	cmp	r2, r5
 8003f5e:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003f62:	d019      	beq.n	8003f98 <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f64:	4da4      	ldr	r5, [pc, #656]	; (80041f8 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8003f66:	42aa      	cmp	r2, r5
 8003f68:	d016      	beq.n	8003f98 <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003f6a:	4da4      	ldr	r5, [pc, #656]	; (80041fc <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8003f6c:	42aa      	cmp	r2, r5
 8003f6e:	f040 810d 	bne.w	800418c <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f72:	01cd      	lsls	r5, r1, #7
 8003f74:	d409      	bmi.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f76:	4aa2      	ldr	r2, [pc, #648]	; (8004200 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d006      	beq.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f7c:	68b3      	ldr	r3, [r6, #8]
 8003f7e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003f82:	431f      	orrs	r7, r3
 8003f84:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003f88:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003f90:	4620      	mov	r0, r4
 8003f92:	b002      	add	sp, #8
 8003f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f98:	020a      	lsls	r2, r1, #8
 8003f9a:	d4f6      	bmi.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa0:	d1f3      	bne.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003fa2:	4a93      	ldr	r2, [pc, #588]	; (80041f0 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8003fa4:	6893      	ldr	r3, [r2, #8]
 8003fa6:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003faa:	431f      	orrs	r7, r3
 8003fac:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003fb0:	4b94      	ldr	r3, [pc, #592]	; (8004204 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8003fb2:	6097      	str	r7, [r2, #8]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a94      	ldr	r2, [pc, #592]	; (8004208 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003fca:	9b01      	ldr	r3, [sp, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0dc      	beq.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8003fd0:	9b01      	ldr	r3, [sp, #4]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f9      	bne.n	8003fd0 <HAL_ADCEx_InjectedConfigChannel+0x138>
 8003fdc:	e7d5      	b.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fde:	689d      	ldr	r5, [r3, #8]
 8003fe0:	f015 0508 	ands.w	r5, r5, #8
 8003fe4:	d1a4      	bne.n	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003fe6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	f040 809a 	bne.w	8004122 <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003fee:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003ff2:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ff4:	68dc      	ldr	r4, [r3, #12]
 8003ff6:	bf0c      	ite	eq
 8003ff8:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ffc:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004000:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004002:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004004:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004008:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 800400a:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800400c:	f000 80e0 	beq.w	80041d0 <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004010:	f026 0602 	bic.w	r6, r6, #2
 8004014:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004016:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004018:	0dd7      	lsrs	r7, r2, #23
 800401a:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800401e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004022:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004026:	f000 80c4 	beq.w	80041b2 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800402a:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 800402e:	f04f 0e07 	mov.w	lr, #7
 8004032:	4096      	lsls	r6, r2
 8004034:	fa0e fe02 	lsl.w	lr, lr, r2
 8004038:	f857 200c 	ldr.w	r2, [r7, ip]
 800403c:	ea22 020e 	bic.w	r2, r2, lr
 8004040:	4316      	orrs	r6, r2
 8004042:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800404c:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800404e:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004050:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004052:	2f04      	cmp	r7, #4
 8004054:	f000 80e0 	beq.w	8004218 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004058:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800405c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8004060:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8004064:	680e      	ldr	r6, [r1, #0]
 8004066:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 800406a:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 800406e:	4e67      	ldr	r6, [pc, #412]	; (800420c <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004070:	ea08 0606 	and.w	r6, r8, r6
 8004074:	ea4c 0c06 	orr.w	ip, ip, r6
 8004078:	694e      	ldr	r6, [r1, #20]
 800407a:	fa06 f60e 	lsl.w	r6, r6, lr
 800407e:	ea46 060c 	orr.w	r6, r6, ip
 8004082:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004086:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800408a:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 800408e:	698f      	ldr	r7, [r1, #24]
 8004090:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8004094:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004098:	433e      	orrs	r6, r7
 800409a:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800409e:	7f0e      	ldrb	r6, [r1, #28]
 80040a0:	690f      	ldr	r7, [r1, #16]
 80040a2:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 80040a4:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 80040a8:	bf08      	it	eq
 80040aa:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 80040ae:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 80040b2:	4335      	orrs	r5, r6
 80040b4:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80040b8:	680a      	ldr	r2, [r1, #0]
}
 80040ba:	e739      	b.n	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 80040bc:	68dc      	ldr	r4, [r3, #12]
 80040be:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 80040c2:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80040c6:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 80040ca:	60dc      	str	r4, [r3, #12]
 80040cc:	e72a      	b.n	8003f24 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80040ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80040d0:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d056      	beq.n	8004184 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80040d6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80040d8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80040dc:	0c55      	lsrs	r5, r2, #17
 80040de:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80040e2:	4323      	orrs	r3, r4
 80040e4:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80040e6:	6803      	ldr	r3, [r0, #0]
 80040e8:	4e49      	ldr	r6, [pc, #292]	; (8004210 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 80040ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80040ec:	4034      	ands	r4, r6
 80040ee:	432c      	orrs	r4, r5
 80040f0:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80040f2:	6645      	str	r5, [r0, #100]	; 0x64
 80040f4:	e702      	b.n	8003efc <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80040f6:	680a      	ldr	r2, [r1, #0]
 80040f8:	684b      	ldr	r3, [r1, #4]
 80040fa:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004104:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004106:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004108:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 800410a:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800410c:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800410e:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004110:	2c00      	cmp	r4, #0
 8004112:	f47f aef3 	bne.w	8003efc <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004116:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004118:	4e3d      	ldr	r6, [pc, #244]	; (8004210 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 800411a:	4034      	ands	r4, r6
 800411c:	4325      	orrs	r5, r4
 800411e:	64dd      	str	r5, [r3, #76]	; 0x4c
 8004120:	e6ec      	b.n	8003efc <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004122:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004124:	2c00      	cmp	r4, #0
 8004126:	f43f af62 	beq.w	8003fee <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800412a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800412e:	2c01      	cmp	r4, #1
 8004130:	f000 815c 	beq.w	80043ec <HAL_ADCEx_InjectedConfigChannel+0x554>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004134:	68dc      	ldr	r4, [r3, #12]
 8004136:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800413a:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800413c:	462c      	mov	r4, r5
 800413e:	e761      	b.n	8004004 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8004140:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004144:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8004148:	4335      	orrs	r5, r6
 800414a:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800414e:	2e00      	cmp	r6, #0
 8004150:	f040 80a7 	bne.w	80042a2 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004154:	0e92      	lsrs	r2, r2, #26
 8004156:	1c55      	adds	r5, r2, #1
 8004158:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800415c:	f1bc 0f09 	cmp.w	ip, #9
 8004160:	f200 80d9 	bhi.w	8004316 <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004164:	06ad      	lsls	r5, r5, #26
 8004166:	2201      	movs	r2, #1
 8004168:	fa02 f20c 	lsl.w	r2, r2, ip
 800416c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004170:	4315      	orrs	r5, r2
 8004172:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004176:	0512      	lsls	r2, r2, #20
 8004178:	e0db      	b.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 800417a:	2402      	movs	r4, #2
}
 800417c:	4620      	mov	r0, r4
 800417e:	b002      	add	sp, #8
 8004180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004184:	0c55      	lsrs	r5, r2, #17
 8004186:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800418a:	e7ac      	b.n	80040e6 <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800418c:	4d21      	ldr	r5, [pc, #132]	; (8004214 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800418e:	42aa      	cmp	r2, r5
 8004190:	f47f aefb 	bne.w	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004194:	0249      	lsls	r1, r1, #9
 8004196:	f53f aef8 	bmi.w	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 800419c:	4293      	cmp	r3, r2
 800419e:	f43f aef4 	beq.w	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041a2:	68b3      	ldr	r3, [r6, #8]
 80041a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80041a8:	431f      	orrs	r7, r3
 80041aa:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 80041ae:	60b7      	str	r7, [r6, #8]
}
 80041b0:	e6eb      	b.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041b2:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80041b6:	f04f 0c07 	mov.w	ip, #7
 80041ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80041be:	59ba      	ldr	r2, [r7, r6]
 80041c0:	ea22 020c 	bic.w	r2, r2, ip
 80041c4:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041cc:	615a      	str	r2, [r3, #20]
}
 80041ce:	e73e      	b.n	800404e <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 80041d0:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 80041d4:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 80041d8:	433e      	orrs	r6, r7
 80041da:	ea46 060c 	orr.w	r6, r6, ip
 80041de:	f046 0602 	orr.w	r6, r6, #2
 80041e2:	611e      	str	r6, [r3, #16]
 80041e4:	e717      	b.n	8004016 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 80041e6:	bf00      	nop
 80041e8:	407f0000 	.word	0x407f0000
 80041ec:	80080000 	.word	0x80080000
 80041f0:	50000300 	.word	0x50000300
 80041f4:	c3210000 	.word	0xc3210000
 80041f8:	90c00010 	.word	0x90c00010
 80041fc:	c7520000 	.word	0xc7520000
 8004200:	50000100 	.word	0x50000100
 8004204:	20000000 	.word	0x20000000
 8004208:	053e2d63 	.word	0x053e2d63
 800420c:	03fff000 	.word	0x03fff000
 8004210:	04104000 	.word	0x04104000
 8004214:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800421a:	680a      	ldr	r2, [r1, #0]
 800421c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800421e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004222:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004226:	2e00      	cmp	r6, #0
 8004228:	f000 809a 	beq.w	8004360 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	fa92 f6a2 	rbit	r6, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004230:	b126      	cbz	r6, 800423c <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004232:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004236:	42b5      	cmp	r5, r6
 8004238:	f000 80dd 	beq.w	80043f6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 800423c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800423e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004240:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004244:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004248:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004250:	b127      	cbz	r7, 800425c <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004252:	fab7 f787 	clz	r7, r7
 8004256:	42be      	cmp	r6, r7
 8004258:	f000 80e2 	beq.w	8004420 <HAL_ADCEx_InjectedConfigChannel+0x588>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800425c:	68ae      	ldr	r6, [r5, #8]
 800425e:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004260:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004264:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 800426c:	b127      	cbz	r7, 8004278 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 800426e:	fab7 f787 	clz	r7, r7
 8004272:	42be      	cmp	r6, r7
 8004274:	f000 80e7 	beq.w	8004446 <HAL_ADCEx_InjectedConfigChannel+0x5ae>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004278:	68ee      	ldr	r6, [r5, #12]
 800427a:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800427c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800427e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004286:	2f00      	cmp	r7, #0
 8004288:	f43f ae52 	beq.w	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 800428c:	fab7 f787 	clz	r7, r7
 8004290:	42b7      	cmp	r7, r6
 8004292:	f47f ae4d 	bne.w	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004296:	682a      	ldr	r2, [r5, #0]
 8004298:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800429c:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800429e:	680a      	ldr	r2, [r1, #0]
}
 80042a0:	e646      	b.n	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	d07a      	beq.n	80043a0 <HAL_ADCEx_InjectedConfigChannel+0x508>
  return __builtin_clz(value);
 80042aa:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ae:	3501      	adds	r5, #1
 80042b0:	f005 051f 	and.w	r5, r5, #31
 80042b4:	2d09      	cmp	r5, #9
 80042b6:	d973      	bls.n	80043a0 <HAL_ADCEx_InjectedConfigChannel+0x508>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80042bc:	2d00      	cmp	r5, #0
 80042be:	f000 80e0 	beq.w	8004482 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 80042c2:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80042c6:	3501      	adds	r5, #1
 80042c8:	06ad      	lsls	r5, r5, #26
 80042ca:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	f000 80d3 	beq.w	800447e <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 80042d8:	fab6 f686 	clz	r6, r6
 80042dc:	3601      	adds	r6, #1
 80042de:	f006 061f 	and.w	r6, r6, #31
 80042e2:	2701      	movs	r7, #1
 80042e4:	fa07 f606 	lsl.w	r6, r7, r6
 80042e8:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	f000 80c3 	beq.w	800447a <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	3201      	adds	r2, #1
 80042fa:	f002 061f 	and.w	r6, r2, #31
 80042fe:	f06f 071d 	mvn.w	r7, #29
 8004302:	2203      	movs	r2, #3
 8004304:	fb12 7206 	smlabb	r2, r2, r6, r7
 8004308:	0512      	lsls	r2, r2, #20
 800430a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800430e:	e010      	b.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004310:	3b01      	subs	r3, #1
 8004312:	461d      	mov	r5, r3
 8004314:	e5e0      	b.n	8003ed8 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004316:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800431a:	06ad      	lsls	r5, r5, #26
 800431c:	3a1e      	subs	r2, #30
 800431e:	2601      	movs	r6, #1
 8004320:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004324:	0512      	lsls	r2, r2, #20
 8004326:	fa06 fc0c 	lsl.w	ip, r6, ip
 800432a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800432e:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004332:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004334:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 8004336:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004338:	f007 0704 	and.w	r7, r7, #4
 800433c:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004340:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004344:	fa05 fc02 	lsl.w	ip, r5, r2
 8004348:	f04f 0e07 	mov.w	lr, #7
 800434c:	59bd      	ldr	r5, [r7, r6]
 800434e:	fa0e f202 	lsl.w	r2, lr, r2
 8004352:	ea25 0202 	bic.w	r2, r5, r2
 8004356:	ea42 020c 	orr.w	r2, r2, ip
 800435a:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800435c:	680a      	ldr	r2, [r1, #0]
}
 800435e:	e5f7      	b.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004360:	f3c2 6784 	ubfx	r7, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004364:	42bd      	cmp	r5, r7
 8004366:	d046      	beq.n	80043f6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004368:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800436a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800436c:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004370:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004374:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004378:	42be      	cmp	r6, r7
 800437a:	d051      	beq.n	8004420 <HAL_ADCEx_InjectedConfigChannel+0x588>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800437c:	68ae      	ldr	r6, [r5, #8]
 800437e:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004380:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004384:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004388:	f3c2 6784 	ubfx	r7, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800438c:	42b7      	cmp	r7, r6
 800438e:	d05a      	beq.n	8004446 <HAL_ADCEx_InjectedConfigChannel+0x5ae>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004390:	68ee      	ldr	r6, [r5, #12]
 8004392:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004394:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004396:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800439a:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800439e:	e777      	b.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	d062      	beq.n	800446e <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80043a8:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80043ac:	3501      	adds	r5, #1
 80043ae:	06ad      	lsls	r5, r5, #26
 80043b0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	d056      	beq.n	800446a <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 80043bc:	fab6 f686 	clz	r6, r6
 80043c0:	3601      	adds	r6, #1
 80043c2:	f006 061f 	and.w	r6, r6, #31
 80043c6:	2701      	movs	r7, #1
 80043c8:	fa07 f606 	lsl.w	r6, r7, r6
 80043cc:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	d04e      	beq.n	8004474 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 80043d6:	fab2 fc82 	clz	ip, r2
 80043da:	f10c 0c01 	add.w	ip, ip, #1
 80043de:	f00c 0c1f 	and.w	ip, ip, #31
 80043e2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80043e6:	ea4f 520c 	mov.w	r2, ip, lsl #20
 80043ea:	e7a2      	b.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ec:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80043ee:	f046 0620 	orr.w	r6, r6, #32
 80043f2:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80043f4:	e606      	b.n	8004004 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 80043f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043f8:	461d      	mov	r5, r3
 80043fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043fe:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004402:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004404:	680a      	ldr	r2, [r1, #0]
 8004406:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004408:	f3c2 0712 	ubfx	r7, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800440c:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004410:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004414:	2f00      	cmp	r7, #0
 8004416:	f47f af19 	bne.w	800424c <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 800441a:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800441e:	e7ab      	b.n	8004378 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 8004420:	f8dc 2000 	ldr.w	r2, [ip]
 8004424:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004428:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800442c:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800442e:	680a      	ldr	r2, [r1, #0]
 8004430:	68ae      	ldr	r6, [r5, #8]
 8004432:	f3c2 0712 	ubfx	r7, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004436:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800443a:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800443e:	2f00      	cmp	r7, #0
 8004440:	f47f af12 	bne.w	8004268 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 8004444:	e7a0      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 8004446:	f8dc 2000 	ldr.w	r2, [ip]
 800444a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800444e:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004452:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004454:	680a      	ldr	r2, [r1, #0]
 8004456:	68ee      	ldr	r6, [r5, #12]
 8004458:	f3c2 0712 	ubfx	r7, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800445c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800445e:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004462:	2f00      	cmp	r7, #0
 8004464:	f47f af0d 	bne.w	8004282 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8004468:	e797      	b.n	800439a <HAL_ADCEx_InjectedConfigChannel+0x502>
 800446a:	2602      	movs	r6, #2
 800446c:	e7ae      	b.n	80043cc <HAL_ADCEx_InjectedConfigChannel+0x534>
 800446e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004472:	e79f      	b.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004474:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004478:	e75b      	b.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 800447a:	4a03      	ldr	r2, [pc, #12]	; (8004488 <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 800447c:	e759      	b.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 800447e:	2602      	movs	r6, #2
 8004480:	e732      	b.n	80042e8 <HAL_ADCEx_InjectedConfigChannel+0x450>
 8004482:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004486:	e722      	b.n	80042ce <HAL_ADCEx_InjectedConfigChannel+0x436>
 8004488:	fe500000 	.word	0xfe500000

0800448c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800448c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800448e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004492:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004494:	2a01      	cmp	r2, #1
{
 8004496:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004498:	d04f      	beq.n	800453a <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800449a:	6804      	ldr	r4, [r0, #0]
 800449c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800449e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80044a0:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044a2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044a6:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80044a8:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044ac:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044ae:	d008      	beq.n	80044c2 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b6:	f041 0120 	orr.w	r1, r1, #32
 80044ba:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80044bc:	b01c      	add	sp, #112	; 0x70
 80044be:	bcf0      	pop	{r4, r5, r6, r7}
 80044c0:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044c2:	4a23      	ldr	r2, [pc, #140]	; (8004550 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80044c4:	6890      	ldr	r0, [r2, #8]
 80044c6:	0740      	lsls	r0, r0, #29
 80044c8:	d50b      	bpl.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80044ca:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044ce:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80044dc:	b01c      	add	sp, #112	; 0x70
 80044de:	bcf0      	pop	{r4, r5, r6, r7}
 80044e0:	4770      	bx	lr
 80044e2:	68a0      	ldr	r0, [r4, #8]
 80044e4:	0746      	lsls	r6, r0, #29
 80044e6:	d4f1      	bmi.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e8:	b1d5      	cbz	r5, 8004520 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044ea:	4e1a      	ldr	r6, [pc, #104]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80044ec:	684f      	ldr	r7, [r1, #4]
 80044ee:	68b0      	ldr	r0, [r6, #8]
 80044f0:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80044f4:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80044f8:	4338      	orrs	r0, r7
 80044fa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80044fe:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004500:	68a4      	ldr	r4, [r4, #8]
 8004502:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004504:	4320      	orrs	r0, r4
 8004506:	f010 0001 	ands.w	r0, r0, #1
 800450a:	d114      	bne.n	8004536 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	4315      	orrs	r5, r2
 8004510:	68b2      	ldr	r2, [r6, #8]
 8004512:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004516:	f022 020f 	bic.w	r2, r2, #15
 800451a:	4315      	orrs	r5, r2
 800451c:	60b5      	str	r5, [r6, #8]
 800451e:	e7da      	b.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004520:	4d0c      	ldr	r5, [pc, #48]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004522:	68a9      	ldr	r1, [r5, #8]
 8004524:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004528:	60a9      	str	r1, [r5, #8]
 800452a:	68a1      	ldr	r1, [r4, #8]
 800452c:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800452e:	4308      	orrs	r0, r1
 8004530:	f010 0001 	ands.w	r0, r0, #1
 8004534:	d005      	beq.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004536:	2000      	movs	r0, #0
 8004538:	e7cd      	b.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800453a:	2002      	movs	r0, #2
}
 800453c:	b01c      	add	sp, #112	; 0x70
 800453e:	bcf0      	pop	{r4, r5, r6, r7}
 8004540:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004542:	68aa      	ldr	r2, [r5, #8]
 8004544:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004548:	f022 020f 	bic.w	r2, r2, #15
 800454c:	60aa      	str	r2, [r5, #8]
 800454e:	e7c2      	b.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004550:	50000100 	.word	0x50000100
 8004554:	50000300 	.word	0x50000300

08004558 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004558:	b1b0      	cbz	r0, 8004588 <HAL_CORDIC_Init+0x30>
{
 800455a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800455c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004560:	4604      	mov	r4, r0
 8004562:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004566:	b153      	cbz	r3, 800457e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004568:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800456a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800456c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800456e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8004572:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004576:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800457a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800457c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800457e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004582:	f7fe ff89 	bl	8003498 <HAL_CORDIC_MspInit>
 8004586:	e7ef      	b.n	8004568 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004588:	2001      	movs	r0, #1
}
 800458a:	4770      	bx	lr

0800458c <HAL_CORDIC_Configure>:
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800458c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8004590:	2a01      	cmp	r2, #1
{
 8004592:	4603      	mov	r3, r0
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8004594:	d005      	beq.n	80045a2 <HAL_CORDIC_Configure+0x16>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8004596:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004598:	f042 0202 	orr.w	r2, r2, #2

    /* Return error status */
    status = HAL_ERROR;
 800459c:	2001      	movs	r0, #1
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Return function status */
  return status;
}
 80045a0:	4770      	bx	lr
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80045a2:	6988      	ldr	r0, [r1, #24]
 80045a4:	680a      	ldr	r2, [r1, #0]
{
 80045a6:	b410      	push	{r4}
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80045a8:	684c      	ldr	r4, [r1, #4]
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	ea42 0304 	orr.w	r3, r2, r4
 80045b2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 80045b6:	4323      	orrs	r3, r4
 80045b8:	4313      	orrs	r3, r2
 80045ba:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 80045be:	6804      	ldr	r4, [r0, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <HAL_CORDIC_Configure+0x48>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	4022      	ands	r2, r4
 80045c8:	4313      	orrs	r3, r2
 80045ca:	6003      	str	r3, [r0, #0]
}
 80045cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2000      	movs	r0, #0
}
 80045d2:	4770      	bx	lr
 80045d4:	ff87f800 	.word	0xff87f800

080045d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d8:	4907      	ldr	r1, [pc, #28]	; (80045f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80045da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045dc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045de:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80045f2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_NVIC_SetPriority+0x74>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004604:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004606:	f1c3 0e07 	rsb	lr, r3, #7
 800460a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004612:	bf28      	it	cs
 8004614:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004618:	f1bc 0f06 	cmp.w	ip, #6
 800461c:	d91b      	bls.n	8004656 <HAL_NVIC_SetPriority+0x5a>
 800461e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004620:	f04f 3cff 	mov.w	ip, #4294967295
 8004624:	fa0c fc03 	lsl.w	ip, ip, r3
 8004628:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800462c:	f04f 3cff 	mov.w	ip, #4294967295
 8004630:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004634:	ea21 010c 	bic.w	r1, r1, ip
 8004638:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800463a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004640:	db0c      	blt.n	800465c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004642:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004646:	0109      	lsls	r1, r1, #4
 8004648:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800464c:	b2c9      	uxtb	r1, r1
 800464e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004652:	f85d fb04 	ldr.w	pc, [sp], #4
 8004656:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004658:	4613      	mov	r3, r2
 800465a:	e7e7      	b.n	800462c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_NVIC_SetPriority+0x78>)
 800465e:	f000 000f 	and.w	r0, r0, #15
 8004662:	0109      	lsls	r1, r1, #4
 8004664:	4403      	add	r3, r0
 8004666:	b2c9      	uxtb	r1, r1
 8004668:	7619      	strb	r1, [r3, #24]
 800466a:	f85d fb04 	ldr.w	pc, [sp], #4
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00
 8004674:	e000ecfc 	.word	0xe000ecfc

08004678 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004678:	2800      	cmp	r0, #0
 800467a:	db08      	blt.n	800468e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467c:	4a04      	ldr	r2, [pc, #16]	; (8004690 <HAL_NVIC_EnableIRQ+0x18>)
 800467e:	0941      	lsrs	r1, r0, #5
 8004680:	2301      	movs	r3, #1
 8004682:	f000 001f 	and.w	r0, r0, #31
 8004686:	fa03 f000 	lsl.w	r0, r3, r0
 800468a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800468e:	4770      	bx	lr
 8004690:	e000e100 	.word	0xe000e100

08004694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004694:	3801      	subs	r0, #1
 8004696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800469a:	d210      	bcs.n	80046be <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800469c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800469e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a2:	4c08      	ldr	r4, [pc, #32]	; (80046c4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80046aa:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80046b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ba:	6119      	str	r1, [r3, #16]
 80046bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80046be:	2001      	movs	r0, #1
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80046c8:	2800      	cmp	r0, #0
 80046ca:	f000 80d9 	beq.w	8004880 <HAL_FDCAN_Init+0x1b8>
{
 80046ce:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80046d0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80046d4:	4604      	mov	r4, r0
 80046d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d071      	beq.n	80047c2 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	6993      	ldr	r3, [r2, #24]
 80046e2:	f023 0310 	bic.w	r3, r3, #16
 80046e6:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e8:	f7ff f9f4 	bl	8003ad4 <HAL_GetTick>
 80046ec:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046ee:	e004      	b.n	80046fa <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046f0:	f7ff f9f0 	bl	8003ad4 <HAL_GetTick>
 80046f4:	1b43      	subs	r3, r0, r5
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d85a      	bhi.n	80047b0 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	0711      	lsls	r1, r2, #28
 8004700:	d4f6      	bmi.n	80046f0 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800470a:	f7ff f9e3 	bl	8003ad4 <HAL_GetTick>
 800470e:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004710:	e004      	b.n	800471c <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004712:	f7ff f9df 	bl	8003ad4 <HAL_GetTick>
 8004716:	1b40      	subs	r0, r0, r5
 8004718:	280a      	cmp	r0, #10
 800471a:	d849      	bhi.n	80047b0 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	07d2      	lsls	r2, r2, #31
 8004722:	d5f6      	bpl.n	8004712 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004724:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004726:	4959      	ldr	r1, [pc, #356]	; (800488c <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004728:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 800472c:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800472e:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8004730:	f000 80a1 	beq.w	8004876 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004734:	7c22      	ldrb	r2, [r4, #16]
 8004736:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	bf0c      	ite	eq
 800473c:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004740:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8004744:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004746:	7c62      	ldrb	r2, [r4, #17]
 8004748:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	bf0c      	ite	eq
 800474e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004752:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8004756:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004758:	7ca2      	ldrb	r2, [r4, #18]
 800475a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	bf0c      	ite	eq
 8004760:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004764:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8004768:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800476e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004770:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004774:	4302      	orrs	r2, r0
 8004776:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800477e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004780:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004782:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004784:	f022 0210 	bic.w	r2, r2, #16
 8004788:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800478a:	d01f      	beq.n	80047cc <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800478c:	b311      	cbz	r1, 80047d4 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800478e:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004790:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004792:	d077      	beq.n	8004884 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004798:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800479a:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800479c:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800479e:	f042 0210 	orr.w	r2, r2, #16
 80047a2:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80047a4:	d116      	bne.n	80047d4 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	f042 0220 	orr.w	r2, r2, #32
 80047ac:	619a      	str	r2, [r3, #24]
 80047ae:	e011      	b.n	80047d4 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80047b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047b2:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047ba:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80047c2:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80047c6:	f7fe fe7f 	bl	80034c8 <HAL_FDCAN_MspInit>
 80047ca:	e788      	b.n	80046de <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	f042 0204 	orr.w	r2, r2, #4
 80047d2:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047d8:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047da:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047dc:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047de:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047e2:	6a21      	ldr	r1, [r4, #32]
 80047e4:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047e6:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047e8:	6961      	ldr	r1, [r4, #20]
 80047ea:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047f0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047f4:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047f6:	d10e      	bne.n	8004816 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047f8:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047fe:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004800:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004802:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004804:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004806:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800480a:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800480c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800480e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004810:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004814:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004816:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800481a:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800481c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800481e:	4302      	orrs	r2, r0
 8004820:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004824:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004828:	4819      	ldr	r0, [pc, #100]	; (8004890 <HAL_FDCAN_Init+0x1c8>)
 800482a:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800482c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004830:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004838:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800483c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800483e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004842:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004846:	4913      	ldr	r1, [pc, #76]	; (8004894 <HAL_FDCAN_Init+0x1cc>)
 8004848:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800484a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004850:	4a12      	ldr	r2, [pc, #72]	; (800489c <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004852:	3140      	adds	r1, #64	; 0x40
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004854:	e9c4 1312 	strd	r1, r3, [r4, #72]	; 0x48

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004858:	33f0      	adds	r3, #240	; 0xf0
 800485a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800485e:	2100      	movs	r1, #0
 8004860:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004864:	f002 ffea 	bl	800783c <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8004868:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800486a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800486c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800486e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8004872:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8004874:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_FDCAN_Init+0x1d8>)
 8004878:	6861      	ldr	r1, [r4, #4]
 800487a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 800487e:	e759      	b.n	8004734 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8004880:	2001      	movs	r0, #1
}
 8004882:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004884:	f042 0220 	orr.w	r2, r2, #32
 8004888:	619a      	str	r2, [r3, #24]
 800488a:	e7a3      	b.n	80047d4 <HAL_FDCAN_Init+0x10c>
 800488c:	40006400 	.word	0x40006400
 8004890:	4000a400 	.word	0x4000a400
 8004894:	4000a470 	.word	0x4000a470
 8004898:	4000a588 	.word	0x4000a588
 800489c:	4000a660 	.word	0x4000a660
 80048a0:	40006000 	.word	0x40006000

080048a4 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80048a4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80048a8:	3a01      	subs	r2, #1
 80048aa:	2a01      	cmp	r2, #1
{
 80048ac:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80048ae:	d905      	bls.n	80048bc <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80048b0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80048b2:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80048b8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048ba:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80048bc:	6808      	ldr	r0, [r1, #0]
{
 80048be:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80048c0:	b978      	cbnz	r0, 80048e2 <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 80048c2:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80048c6:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80048c8:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 80048cc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80048ce:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80048d0:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80048d2:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 80048d4:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80048d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 80048da:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 80048de:	bc30      	pop	{r4, r5}
 80048e0:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80048e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80048e8:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048ea:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80048ee:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80048f2:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80048f6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 80048fa:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 80048fe:	2000      	movs	r0, #0
}
 8004900:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8004902:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8004906:	4770      	bx	lr

08004908 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004908:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800490c:	2a01      	cmp	r2, #1
{
 800490e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004910:	d005      	beq.n	800491e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004912:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004914:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8004918:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800491a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800491c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800491e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004920:	2202      	movs	r2, #2
 8004922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004926:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004928:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8004930:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004932:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8004938:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800493a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800493e:	2b02      	cmp	r3, #2
{
 8004940:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004942:	d10c      	bne.n	800495e <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004944:	6805      	ldr	r5, [r0, #0]
 8004946:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 800494a:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 800494e:	d00d      	beq.n	800496c <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004950:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8004956:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004958:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800495e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004960:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8004964:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004966:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 800496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800496c:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004970:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004972:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004976:	2b00      	cmp	r3, #0
 8004978:	d13a      	bne.n	80049f0 <HAL_FDCAN_AddMessageToTxFifoQ+0xb8>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 800497a:	688b      	ldr	r3, [r1, #8]
 800497c:	690f      	ldr	r7, [r1, #16]
 800497e:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8004980:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004982:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004986:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 800498a:	694c      	ldr	r4, [r1, #20]
 800498c:	4303      	orrs	r3, r0
 800498e:	68c8      	ldr	r0, [r1, #12]
 8004990:	4323      	orrs	r3, r4
 8004992:	6a0c      	ldr	r4, [r1, #32]
 8004994:	4303      	orrs	r3, r0
 8004996:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800499a:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 800499e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80049a2:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80049a6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80049aa:	4c15      	ldr	r4, [pc, #84]	; (8004a00 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 80049ac:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80049ae:	89cb      	ldrh	r3, [r1, #14]
 80049b0:	5ce3      	ldrb	r3, [r4, r3]
 80049b2:	b1a3      	cbz	r3, 80049de <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049b4:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049b6:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049ba:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 80049be:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80049c0:	433b      	orrs	r3, r7
 80049c2:	7857      	ldrb	r7, [r2, #1]
 80049c4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049c8:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80049cc:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049d0:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80049d2:	89cb      	ldrh	r3, [r1, #14]
 80049d4:	5ce3      	ldrb	r3, [r4, r3]
 80049d6:	459c      	cmp	ip, r3
 80049d8:	f102 0204 	add.w	r2, r2, #4
 80049dc:	d3ea      	bcc.n	80049b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80049de:	2301      	movs	r3, #1
 80049e0:	fa03 f606 	lsl.w	r6, r3, r6
 80049e4:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    return HAL_OK;
 80049e8:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80049ea:	f8ce 6058 	str.w	r6, [lr, #88]	; 0x58
}
 80049ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 80049f0:	690b      	ldr	r3, [r1, #16]
 80049f2:	680f      	ldr	r7, [r1, #0]
 80049f4:	431f      	orrs	r7, r3
 80049f6:	688b      	ldr	r3, [r1, #8]
 80049f8:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049fa:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 80049fe:	e7c2      	b.n	8004986 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8004a00:	0800b3f8 	.word	0x0800b3f8

08004a04 <HAL_FDCAN_GetRxMessage>:
{
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a08:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8004a0c:	2802      	cmp	r0, #2
 8004a0e:	d10d      	bne.n	8004a2c <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a10:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004a12:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a16:	d00f      	beq.n	8004a38 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004a18:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8004a1c:	0700      	lsls	r0, r0, #28
 8004a1e:	d15f      	bne.n	8004ae0 <HAL_FDCAN_GetRxMessage+0xdc>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8004a26:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a28:	6623      	str	r3, [r4, #96]	; 0x60
}
 8004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a2e:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8004a32:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a34:	6623      	str	r3, [r4, #96]	; 0x60
}
 8004a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004a38:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8004a3c:	0705      	lsls	r5, r0, #28
 8004a3e:	d0ef      	beq.n	8004a20 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004a40:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004a44:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004a46:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004a4a:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8004a4e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a52:	6828      	ldr	r0, [r5, #0]
 8004a54:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8004a58:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d14f      	bne.n	8004afe <HAL_FDCAN_GetRxMessage+0xfa>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004a5e:	6828      	ldr	r0, [r5, #0]
 8004a60:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8004a64:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a66:	6828      	ldr	r0, [r5, #0]
 8004a68:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8004a6c:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004a6e:	6828      	ldr	r0, [r5, #0]
 8004a70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004a74:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004a76:	88a8      	ldrh	r0, [r5, #4]
 8004a78:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004a7a:	6868      	ldr	r0, [r5, #4]
 8004a7c:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8004a80:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004a82:	686e      	ldr	r6, [r5, #4]
 8004a84:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8004a88:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004a8a:	686e      	ldr	r6, [r5, #4]
 8004a8c:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8004a90:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004a92:	79ee      	ldrb	r6, [r5, #7]
 8004a94:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004a98:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004a9a:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004a9c:	4e1a      	ldr	r6, [pc, #104]	; (8004b08 <HAL_FDCAN_GetRxMessage+0x104>)
 8004a9e:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004aa2:	6868      	ldr	r0, [r5, #4]
 8004aa4:	0fc0      	lsrs	r0, r0, #31
 8004aa6:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004aa8:	f1be 0f00 	cmp.w	lr, #0
 8004aac:	d010      	beq.n	8004ad0 <HAL_FDCAN_GetRxMessage+0xcc>
 8004aae:	f103 3eff 	add.w	lr, r3, #4294967295
 8004ab2:	f105 0c07 	add.w	ip, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8004ab6:	4663      	mov	r3, ip
 8004ab8:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8004abc:	f80e 0f01 	strb.w	r0, [lr, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004ac0:	89d0      	ldrh	r0, [r2, #14]
 8004ac2:	3b06      	subs	r3, #6
 8004ac4:	5c30      	ldrb	r0, [r6, r0]
 8004ac6:	1b5b      	subs	r3, r3, r5
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	d8f4      	bhi.n	8004ab6 <HAL_FDCAN_GetRxMessage+0xb2>
 8004acc:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ad0:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8004ad2:	bf0c      	ite	eq
 8004ad4:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8004ad8:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8004adc:	2000      	movs	r0, #0
}
 8004ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004ae0:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004ae4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004ae6:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004aea:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8004aee:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004af2:	6828      	ldr	r0, [r5, #0]
 8004af4:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8004af8:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0af      	beq.n	8004a5e <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004afe:	6828      	ldr	r0, [r5, #0]
 8004b00:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8004b04:	e7ae      	b.n	8004a64 <HAL_FDCAN_GetRxMessage+0x60>
 8004b06:	bf00      	nop
 8004b08:	0800b3f8 	.word	0x0800b3f8

08004b0c <HAL_FDCAN_ActivateNotification>:
{
 8004b0c:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b0e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004b12:	3801      	subs	r0, #1
 8004b14:	2801      	cmp	r0, #1
 8004b16:	d905      	bls.n	8004b24 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b1a:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b20:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004b22:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004b24:	681b      	ldr	r3, [r3, #0]
{
 8004b26:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004b28:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004b2c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004b2e:	d03d      	beq.n	8004bac <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004b30:	07c4      	lsls	r4, r0, #31
 8004b32:	d43b      	bmi.n	8004bac <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004b34:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8004b36:	f044 0401 	orr.w	r4, r4, #1
 8004b3a:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004b3c:	b1cd      	cbz	r5, 8004b72 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004b3e:	07c5      	lsls	r5, r0, #31
 8004b40:	d517      	bpl.n	8004b72 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004b42:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004b44:	f040 0002 	orr.w	r0, r0, #2
 8004b48:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004b4a:	060c      	lsls	r4, r1, #24
 8004b4c:	d504      	bpl.n	8004b58 <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004b4e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8004b52:	4310      	orrs	r0, r2
 8004b54:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b58:	05c8      	lsls	r0, r1, #23
 8004b5a:	d504      	bpl.n	8004b66 <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004b5c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8004b60:	4302      	orrs	r2, r0
 8004b62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b68:	4311      	orrs	r1, r2
    return HAL_OK;
 8004b6a:	2000      	movs	r0, #0
}
 8004b6c:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b6e:	6559      	str	r1, [r3, #84]	; 0x54
}
 8004b70:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004b72:	f011 0f38 	tst.w	r1, #56	; 0x38
 8004b76:	d001      	beq.n	8004b7c <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004b78:	0784      	lsls	r4, r0, #30
 8004b7a:	d4e2      	bmi.n	8004b42 <HAL_FDCAN_ActivateNotification+0x36>
 8004b7c:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8004b80:	d131      	bne.n	8004be6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004b82:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8004b86:	d001      	beq.n	8004b8c <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004b88:	0704      	lsls	r4, r0, #28
 8004b8a:	d4da      	bmi.n	8004b42 <HAL_FDCAN_ActivateNotification+0x36>
 8004b8c:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8004b90:	d001      	beq.n	8004b96 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004b92:	06c5      	lsls	r5, r0, #27
 8004b94:	d4d5      	bmi.n	8004b42 <HAL_FDCAN_ActivateNotification+0x36>
 8004b96:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8004b9a:	d001      	beq.n	8004ba0 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004b9c:	0684      	lsls	r4, r0, #26
 8004b9e:	d4d0      	bmi.n	8004b42 <HAL_FDCAN_ActivateNotification+0x36>
 8004ba0:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8004ba4:	d0d1      	beq.n	8004b4a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004ba6:	0645      	lsls	r5, r0, #25
 8004ba8:	d5cf      	bpl.n	8004b4a <HAL_FDCAN_ActivateNotification+0x3e>
 8004baa:	e7ca      	b.n	8004b42 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004bac:	f011 0f38 	tst.w	r1, #56	; 0x38
 8004bb0:	d001      	beq.n	8004bb6 <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004bb2:	0784      	lsls	r4, r0, #30
 8004bb4:	d5be      	bpl.n	8004b34 <HAL_FDCAN_ActivateNotification+0x28>
 8004bb6:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8004bba:	d117      	bne.n	8004bec <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004bbc:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8004bc0:	d001      	beq.n	8004bc6 <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004bc2:	0704      	lsls	r4, r0, #28
 8004bc4:	d5b6      	bpl.n	8004b34 <HAL_FDCAN_ActivateNotification+0x28>
 8004bc6:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8004bca:	d001      	beq.n	8004bd0 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004bcc:	06c4      	lsls	r4, r0, #27
 8004bce:	d5b1      	bpl.n	8004b34 <HAL_FDCAN_ActivateNotification+0x28>
 8004bd0:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8004bd4:	d001      	beq.n	8004bda <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004bd6:	0684      	lsls	r4, r0, #26
 8004bd8:	d5ac      	bpl.n	8004b34 <HAL_FDCAN_ActivateNotification+0x28>
 8004bda:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8004bde:	d0ad      	beq.n	8004b3c <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004be0:	0644      	lsls	r4, r0, #25
 8004be2:	d4ab      	bmi.n	8004b3c <HAL_FDCAN_ActivateNotification+0x30>
 8004be4:	e7a6      	b.n	8004b34 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004be6:	0745      	lsls	r5, r0, #29
 8004be8:	d4ab      	bmi.n	8004b42 <HAL_FDCAN_ActivateNotification+0x36>
 8004bea:	e7ca      	b.n	8004b82 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004bec:	0744      	lsls	r4, r0, #29
 8004bee:	d5a1      	bpl.n	8004b34 <HAL_FDCAN_ActivateNotification+0x28>
 8004bf0:	e7e4      	b.n	8004bbc <HAL_FDCAN_ActivateNotification+0xb0>
 8004bf2:	bf00      	nop

08004bf4 <HAL_FDCAN_TxEventFifoCallback>:
}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop

08004bf8 <HAL_FDCAN_RxFifo1Callback>:
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop

08004bfc <HAL_FDCAN_TxFifoEmptyCallback>:
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <HAL_FDCAN_TxBufferCompleteCallback>:
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <HAL_FDCAN_TxBufferAbortCallback>:
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <HAL_FDCAN_TimestampWraparoundCallback>:
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <HAL_FDCAN_TimeoutOccurredCallback>:
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <HAL_FDCAN_HighPriorityMessageCallback>:
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <HAL_FDCAN_ErrorCallback>:
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop

08004c18 <HAL_FDCAN_ErrorStatusCallback>:
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop

08004c1c <HAL_FDCAN_IRQHandler>:
{
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004c20:	6803      	ldr	r3, [r0, #0]
 8004c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c26:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004c2e:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c30:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004c36:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c38:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8004c3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004c3c:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8004c3e:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c42:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c46:	0652      	lsls	r2, r2, #25
{
 8004c48:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c4a:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c4e:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c52:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8004c56:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c5a:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c5e:	d502      	bpl.n	8004c66 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c62:	0651      	lsls	r1, r2, #25
 8004c64:	d473      	bmi.n	8004d4e <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c68:	05d2      	lsls	r2, r2, #23
 8004c6a:	d502      	bpl.n	8004c72 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6e:	05d0      	lsls	r0, r2, #23
 8004c70:	d45d      	bmi.n	8004d2e <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8004c72:	f1b9 0f00 	cmp.w	r9, #0
 8004c76:	d14a      	bne.n	8004d0e <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8004c78:	f1b8 0f00 	cmp.w	r8, #0
 8004c7c:	d137      	bne.n	8004cee <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8004c7e:	2f00      	cmp	r7, #0
 8004c80:	d13e      	bne.n	8004d00 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c84:	0591      	lsls	r1, r2, #22
 8004c86:	d502      	bpl.n	8004c8e <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8a:	0592      	lsls	r2, r2, #22
 8004c8c:	d475      	bmi.n	8004d7a <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c90:	0617      	lsls	r7, r2, #24
 8004c92:	d502      	bpl.n	8004c9a <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	0610      	lsls	r0, r2, #24
 8004c98:	d477      	bmi.n	8004d8a <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c9c:	0491      	lsls	r1, r2, #18
 8004c9e:	d502      	bpl.n	8004ca6 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca2:	0492      	lsls	r2, r2, #18
 8004ca4:	d459      	bmi.n	8004d5a <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca8:	0417      	lsls	r7, r2, #16
 8004caa:	d502      	bpl.n	8004cb2 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cae:	0410      	lsls	r0, r2, #16
 8004cb0:	d45b      	bmi.n	8004d6a <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb4:	0451      	lsls	r1, r2, #17
 8004cb6:	d509      	bpl.n	8004ccc <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cba:	0452      	lsls	r2, r2, #17
 8004cbc:	d506      	bpl.n	8004ccc <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004cc4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cca:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8004ccc:	b94e      	cbnz	r6, 8004ce2 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8004cce:	b125      	cbz	r5, 8004cda <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8004cd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cd6:	431d      	orrs	r5, r3
 8004cd8:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004cda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cdc:	bb13      	cbnz	r3, 8004d24 <HAL_FDCAN_IRQHandler+0x108>
}
 8004cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004ce2:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f7ff ff96 	bl	8004c18 <HAL_FDCAN_ErrorStatusCallback>
 8004cec:	e7ef      	b.n	8004cce <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004cee:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7fc f951 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004cfa:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8004cfc:	2f00      	cmp	r7, #0
 8004cfe:	d0c0      	beq.n	8004c82 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004d00:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004d02:	4639      	mov	r1, r7
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff ff77 	bl	8004bf8 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	e7b9      	b.n	8004c82 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d0e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004d12:	4649      	mov	r1, r9
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff ff6d 	bl	8004bf4 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004d1a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8004d1c:	f1b8 0f00 	cmp.w	r8, #0
 8004d20:	d0ad      	beq.n	8004c7e <HAL_FDCAN_IRQHandler+0x62>
 8004d22:	e7e4      	b.n	8004cee <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7ff ff75 	bl	8004c14 <HAL_FDCAN_ErrorCallback>
}
 8004d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004d2e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004d32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004d36:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d3c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff ff60 	bl	8004c04 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d44:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	d095      	beq.n	8004c78 <HAL_FDCAN_IRQHandler+0x5c>
 8004d4c:	e7df      	b.n	8004d0e <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d4e:	2240      	movs	r2, #64	; 0x40
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d52:	f7ff ff5d 	bl	8004c10 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	e785      	b.n	8004c66 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d5e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7ff ff51 	bl	8004c08 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	e79d      	b.n	8004ca6 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d6e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ff4b 	bl	8004c0c <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	e79b      	b.n	8004cb2 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7ff ff3b 	bl	8004bfc <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	e781      	b.n	8004c8e <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d8a:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d8e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d92:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f7ff ff31 	bl	8004c00 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	e77b      	b.n	8004c9a <HAL_FDCAN_IRQHandler+0x7e>
 8004da2:	bf00      	nop

08004da4 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_FLASH_Unlock+0x1c>)
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	2a00      	cmp	r2, #0
 8004daa:	db01      	blt.n	8004db0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004dae:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004db0:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004db2:	4a05      	ldr	r2, [pc, #20]	; (8004dc8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004db4:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004db6:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004db8:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	0fc0      	lsrs	r0, r0, #31
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	45670123 	.word	0x45670123
 8004dc8:	cdef89ab 	.word	0xcdef89ab

08004dcc <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <HAL_FLASH_Lock+0x14>)
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004dd4:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004dd6:	6958      	ldr	r0, [r3, #20]
  {
    status = HAL_OK;
  }

  return status;
}
 8004dd8:	43c0      	mvns	r0, r0
 8004dda:	0fc0      	lsrs	r0, r0, #31
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40022000 	.word	0x40022000

08004de4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
  return pFlash.ErrorCode;
 8004de4:	4b01      	ldr	r3, [pc, #4]	; (8004dec <HAL_FLASH_GetError+0x8>)
 8004de6:	6858      	ldr	r0, [r3, #4]
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	2000000c 	.word	0x2000000c

08004df0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004df4:	f7fe fe6e 	bl	8003ad4 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004df8:	4e10      	ldr	r6, [pc, #64]	; (8004e3c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8004dfa:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004dfc:	e004      	b.n	8004e08 <FLASH_WaitForLastOperation+0x18>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8004dfe:	f7fe fe69 	bl	8003ad4 <HAL_GetTick>
 8004e02:	1b03      	subs	r3, r0, r4
 8004e04:	42ab      	cmp	r3, r5
 8004e06:	d80f      	bhi.n	8004e28 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e08:	6933      	ldr	r3, [r6, #16]
 8004e0a:	03db      	lsls	r3, r3, #15
 8004e0c:	d4f7      	bmi.n	8004dfe <FLASH_WaitForLastOperation+0xe>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004e0e:	6933      	ldr	r3, [r6, #16]
 8004e10:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8004e14:	4013      	ands	r3, r2
 8004e16:	d109      	bne.n	8004e2c <FLASH_WaitForLastOperation+0x3c>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004e18:	6930      	ldr	r0, [r6, #16]
 8004e1a:	f010 0001 	ands.w	r0, r0, #1
 8004e1e:	d002      	beq.n	8004e26 <FLASH_WaitForLastOperation+0x36>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e20:	2201      	movs	r2, #1
 8004e22:	6132      	str	r2, [r6, #16]
 8004e24:	4618      	mov	r0, r3
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8004e28:	2003      	movs	r0, #3
}
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8004e2c:	4904      	ldr	r1, [pc, #16]	; (8004e40 <FLASH_WaitForLastOperation+0x50>)
 8004e2e:	684a      	ldr	r2, [r1, #4]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8004e34:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8004e36:	6133      	str	r3, [r6, #16]
}
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	2000000c 	.word	0x2000000c

08004e44 <HAL_FLASH_Program>:
{
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8004e48:	4d28      	ldr	r5, [pc, #160]	; (8004eec <HAL_FLASH_Program+0xa8>)
{
 8004e4a:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8004e4c:	782a      	ldrb	r2, [r5, #0]
 8004e4e:	2a01      	cmp	r2, #1
 8004e50:	d017      	beq.n	8004e82 <HAL_FLASH_Program+0x3e>
 8004e52:	4607      	mov	r7, r0
 8004e54:	4698      	mov	r8, r3
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  __HAL_LOCK(&pFlash);
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	460e      	mov	r6, r1
 8004e5e:	702b      	strb	r3, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e60:	f7ff ffc6 	bl	8004df0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004e64:	b118      	cbz	r0, 8004e6e <HAL_FLASH_Program+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004e66:	2300      	movs	r3, #0
 8004e68:	702b      	strb	r3, [r5, #0]
}
 8004e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e6e:	6068      	str	r0, [r5, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004e70:	b157      	cbz	r7, 8004e88 <HAL_FLASH_Program+0x44>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004e72:	1e7b      	subs	r3, r7, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d91c      	bls.n	8004eb2 <HAL_FLASH_Program+0x6e>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e7c:	f7ff ffb8 	bl	8004df0 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8004e80:	e7f1      	b.n	8004e66 <HAL_FLASH_Program+0x22>
  __HAL_LOCK(&pFlash);
 8004e82:	2002      	movs	r0, #2
}
 8004e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_FLASH_Program+0xac>)
 8004e8a:	6953      	ldr	r3, [r2, #20]
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004e92:	6034      	str	r4, [r6, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e94:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004e9c:	f8c6 8004 	str.w	r8, [r6, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ea0:	f7ff ffa6 	bl	8004df0 <FLASH_WaitForLastOperation>
 8004ea4:	f06f 0101 	mvn.w	r1, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004ea8:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <HAL_FLASH_Program+0xac>)
 8004eaa:	6953      	ldr	r3, [r2, #20]
 8004eac:	400b      	ands	r3, r1
 8004eae:	6153      	str	r3, [r2, #20]
 8004eb0:	e7d9      	b.n	8004e66 <HAL_FLASH_Program+0x22>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004eb2:	490f      	ldr	r1, [pc, #60]	; (8004ef0 <HAL_FLASH_Program+0xac>)
 8004eb4:	694b      	ldr	r3, [r1, #20]
 8004eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8004eba:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004ebc:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec2:	b672      	cpsid	i
 8004ec4:	1ab1      	subs	r1, r6, r2
 8004ec6:	f502 7080 	add.w	r0, r2, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 8004ece:	3204      	adds	r2, #4
    row_index--;
  }
  while (row_index != 0U);
 8004ed0:	4282      	cmp	r2, r0
 8004ed2:	d1fa      	bne.n	8004eca <HAL_FLASH_Program+0x86>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	f384 8810 	msr	PRIMASK, r4
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004ed8:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004ede:	d1cd      	bne.n	8004e7c <HAL_FLASH_Program+0x38>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ee0:	f7ff ff86 	bl	8004df0 <FLASH_WaitForLastOperation>
 8004ee4:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
 8004ee8:	e7de      	b.n	8004ea8 <HAL_FLASH_Program+0x64>
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	40022000 	.word	0x40022000

08004ef4 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004ef4:	4915      	ldr	r1, [pc, #84]	; (8004f4c <FLASH_FlushCaches+0x58>)
 8004ef6:	7f0b      	ldrb	r3, [r1, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004ef8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8004efc:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004efe:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004f00:	d110      	bne.n	8004f24 <FLASH_FlushCaches+0x30>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <FLASH_FlushCaches+0x5c>)
 8004f04:	6810      	ldr	r0, [r2, #0]
 8004f06:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8004f0a:	6010      	str	r0, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f0c:	6810      	ldr	r0, [r2, #0]
 8004f0e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8004f12:	6010      	str	r0, [r2, #0]
 8004f14:	6810      	ldr	r0, [r2, #0]
 8004f16:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8004f1a:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f1c:	6810      	ldr	r0, [r2, #0]
 8004f1e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004f22:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004f24:	3b02      	subs	r3, #2
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d80c      	bhi.n	8004f44 <FLASH_FlushCaches+0x50>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <FLASH_FlushCaches+0x5c>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f3a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004f44:	2300      	movs	r3, #0
 8004f46:	770b      	strb	r3, [r1, #28]
}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	40022000 	.word	0x40022000

08004f54 <HAL_FLASHEx_Erase>:
{
 8004f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8004f58:	4f3f      	ldr	r7, [pc, #252]	; (8005058 <HAL_FLASHEx_Erase+0x104>)
 8004f5a:	783b      	ldrb	r3, [r7, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d052      	beq.n	8005006 <HAL_FLASHEx_Erase+0xb2>
 8004f60:	4681      	mov	r9, r0
 8004f62:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f68:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8004f6a:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f6c:	f7ff ff40 	bl	8004df0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004f70:	4606      	mov	r6, r0
 8004f72:	b120      	cbz	r0, 8004f7e <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004f74:	2300      	movs	r3, #0
 8004f76:	703b      	strb	r3, [r7, #0]
}
 8004f78:	4630      	mov	r0, r6
 8004f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004f7e:	4b37      	ldr	r3, [pc, #220]	; (800505c <HAL_FLASHEx_Erase+0x108>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f80:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f412 7f00 	tst.w	r2, #512	; 0x200
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004f88:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004f8a:	d140      	bne.n	800500e <HAL_FLASHEx_Erase+0xba>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004f8c:	0552      	lsls	r2, r2, #21
 8004f8e:	d549      	bpl.n	8005024 <HAL_FLASHEx_Erase+0xd0>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f9c:	f8d9 3000 	ldr.w	r3, [r9]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d041      	beq.n	8005028 <HAL_FLASHEx_Erase+0xd4>
      *PageError = 0xFFFFFFFFU;
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa8:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004fac:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8004fb0:	442b      	add	r3, r5
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	d924      	bls.n	8005000 <HAL_FLASHEx_Erase+0xac>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004fb6:	4c29      	ldr	r4, [pc, #164]	; (800505c <HAL_FLASHEx_Erase+0x108>)
 8004fb8:	e005      	b.n	8004fc6 <HAL_FLASHEx_Erase+0x72>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004fba:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8004fbe:	3501      	adds	r5, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	42ab      	cmp	r3, r5
 8004fc4:	d91c      	bls.n	8005000 <HAL_FLASHEx_Erase+0xac>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004fc6:	6962      	ldr	r2, [r4, #20]
 8004fc8:	00eb      	lsls	r3, r5, #3
 8004fca:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8004fce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004fd6:	6963      	ldr	r3, [r4, #20]
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004fde:	6963      	ldr	r3, [r4, #20]
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fea:	f7ff ff01 	bl	8004df0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004fee:	6963      	ldr	r3, [r4, #20]
 8004ff0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8004ff4:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d0df      	beq.n	8004fba <HAL_FLASHEx_Erase+0x66>
          *PageError = page_index;
 8004ffa:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ffe:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8005000:	f7ff ff78 	bl	8004ef4 <FLASH_FlushCaches>
 8005004:	e7b6      	b.n	8004f74 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8005006:	2602      	movs	r6, #2
}
 8005008:	4630      	mov	r0, r6
 800500a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800500e:	0551      	lsls	r1, r2, #21
 8005010:	d506      	bpl.n	8005020 <HAL_FLASHEx_Erase+0xcc>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800501a:	2303      	movs	r3, #3
 800501c:	773b      	strb	r3, [r7, #28]
 800501e:	e7bd      	b.n	8004f9c <HAL_FLASHEx_Erase+0x48>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005020:	773c      	strb	r4, [r7, #28]
 8005022:	e7bb      	b.n	8004f9c <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005024:	7738      	strb	r0, [r7, #28]
 8005026:	e7b9      	b.n	8004f9c <HAL_FLASHEx_Erase+0x48>
    if ((Banks & FLASH_BANK_1) != 0U)
 8005028:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800502c:	07db      	lsls	r3, r3, #31
 800502e:	d504      	bpl.n	800503a <HAL_FLASHEx_Erase+0xe6>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005030:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_FLASHEx_Erase+0x108>)
 8005032:	6953      	ldr	r3, [r2, #20]
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800503a:	4c08      	ldr	r4, [pc, #32]	; (800505c <HAL_FLASHEx_Erase+0x108>)
 800503c:	6963      	ldr	r3, [r4, #20]
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005048:	f7ff fed2 	bl	8004df0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800504c:	6963      	ldr	r3, [r4, #20]
 800504e:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005052:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005054:	6163      	str	r3, [r4, #20]
 8005056:	e7d3      	b.n	8005000 <HAL_FLASHEx_Erase+0xac>
 8005058:	2000000c 	.word	0x2000000c
 800505c:	40022000 	.word	0x40022000

08005060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005064:	680c      	ldr	r4, [r1, #0]
{
 8005066:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005068:	2c00      	cmp	r4, #0
 800506a:	f000 8083 	beq.w	8005174 <HAL_GPIO_Init+0x114>
 800506e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005072:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800524c <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8005076:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005078:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800507c:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800507e:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8005082:	ea15 0804 	ands.w	r8, r5, r4
 8005086:	d06f      	beq.n	8005168 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005088:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800508c:	f007 0203 	and.w	r2, r7, #3
 8005090:	1e51      	subs	r1, r2, #1
 8005092:	2901      	cmp	r1, #1
 8005094:	d971      	bls.n	800517a <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005096:	2a03      	cmp	r2, #3
 8005098:	f040 80b0 	bne.w	80051fc <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800509c:	fa02 f20c 	lsl.w	r2, r2, ip
 80050a0:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 80050a2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050a4:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a6:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050a8:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 80050ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ae:	d05b      	beq.n	8005168 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b0:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 80050bc:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 80050c0:	f002 0201 	and.w	r2, r2, #1
 80050c4:	9203      	str	r2, [sp, #12]
 80050c6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80050c8:	f023 0203 	bic.w	r2, r3, #3
 80050cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80050d0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d4:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80050d8:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050da:	00ad      	lsls	r5, r5, #2
 80050dc:	260f      	movs	r6, #15
 80050de:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050e6:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050ea:	d019      	beq.n	8005120 <HAL_GPIO_Init+0xc0>
 80050ec:	4e51      	ldr	r6, [pc, #324]	; (8005234 <HAL_GPIO_Init+0x1d4>)
 80050ee:	42b0      	cmp	r0, r6
 80050f0:	f000 808f 	beq.w	8005212 <HAL_GPIO_Init+0x1b2>
 80050f4:	4e50      	ldr	r6, [pc, #320]	; (8005238 <HAL_GPIO_Init+0x1d8>)
 80050f6:	42b0      	cmp	r0, r6
 80050f8:	f000 808f 	beq.w	800521a <HAL_GPIO_Init+0x1ba>
 80050fc:	4e4f      	ldr	r6, [pc, #316]	; (800523c <HAL_GPIO_Init+0x1dc>)
 80050fe:	42b0      	cmp	r0, r6
 8005100:	f000 8081 	beq.w	8005206 <HAL_GPIO_Init+0x1a6>
 8005104:	4e4e      	ldr	r6, [pc, #312]	; (8005240 <HAL_GPIO_Init+0x1e0>)
 8005106:	42b0      	cmp	r0, r6
 8005108:	f000 808d 	beq.w	8005226 <HAL_GPIO_Init+0x1c6>
 800510c:	4e4d      	ldr	r6, [pc, #308]	; (8005244 <HAL_GPIO_Init+0x1e4>)
 800510e:	42b0      	cmp	r0, r6
 8005110:	bf0c      	ite	eq
 8005112:	f04f 0e05 	moveq.w	lr, #5
 8005116:	f04f 0e06 	movne.w	lr, #6
 800511a:	fa0e f505 	lsl.w	r5, lr, r5
 800511e:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005120:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005122:	4a49      	ldr	r2, [pc, #292]	; (8005248 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005124:	4948      	ldr	r1, [pc, #288]	; (8005248 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8005126:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8005128:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800512c:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 800512e:	bf54      	ite	pl
 8005130:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005132:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8005136:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8005138:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800513a:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800513c:	4942      	ldr	r1, [pc, #264]	; (8005248 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800513e:	bf54      	ite	pl
 8005140:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005142:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8005146:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8005148:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800514c:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 800514e:	bf54      	ite	pl
 8005150:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005152:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8005156:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005158:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800515a:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800515c:	493a      	ldr	r1, [pc, #232]	; (8005248 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800515e:	bf54      	ite	pl
 8005160:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005162:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8005166:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8005168:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800516a:	fa34 f203 	lsrs.w	r2, r4, r3
 800516e:	f10c 0c02 	add.w	ip, ip, #2
 8005172:	d184      	bne.n	800507e <HAL_GPIO_Init+0x1e>
  }
}
 8005174:	b005      	add	sp, #20
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800517a:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517c:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005180:	f04f 0e03 	mov.w	lr, #3
 8005184:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005188:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800518c:	fa06 f60c 	lsl.w	r6, r6, ip
 8005190:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8005192:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005194:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8005198:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800519c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a0:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80051a4:	409d      	lsls	r5, r3
 80051a6:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 80051aa:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80051ac:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051ae:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80051b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80051ba:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051be:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80051c0:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c2:	fa02 f20c 	lsl.w	r2, r2, ip
 80051c6:	f47f af6c 	bne.w	80050a2 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 80051ca:	08dd      	lsrs	r5, r3, #3
 80051cc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80051d0:	9501      	str	r5, [sp, #4]
 80051d2:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051d4:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80051d8:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051da:	f003 0e07 	and.w	lr, r3, #7
 80051de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80051e2:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051e8:	fa06 fe0e 	lsl.w	lr, r6, lr
 80051ec:	9e00      	ldr	r6, [sp, #0]
 80051ee:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80051f2:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051f4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80051f8:	6235      	str	r5, [r6, #32]
 80051fa:	e752      	b.n	80050a2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051fc:	2103      	movs	r1, #3
 80051fe:	fa01 f10c 	lsl.w	r1, r1, ip
 8005202:	43c9      	mvns	r1, r1
 8005204:	e7d2      	b.n	80051ac <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005206:	f04f 0e03 	mov.w	lr, #3
 800520a:	fa0e f505 	lsl.w	r5, lr, r5
 800520e:	4329      	orrs	r1, r5
 8005210:	e786      	b.n	8005120 <HAL_GPIO_Init+0xc0>
 8005212:	fa0b f505 	lsl.w	r5, fp, r5
 8005216:	4329      	orrs	r1, r5
 8005218:	e782      	b.n	8005120 <HAL_GPIO_Init+0xc0>
 800521a:	f04f 0e02 	mov.w	lr, #2
 800521e:	fa0e f505 	lsl.w	r5, lr, r5
 8005222:	4329      	orrs	r1, r5
 8005224:	e77c      	b.n	8005120 <HAL_GPIO_Init+0xc0>
 8005226:	f04f 0e04 	mov.w	lr, #4
 800522a:	fa0e f505 	lsl.w	r5, lr, r5
 800522e:	4329      	orrs	r1, r5
 8005230:	e776      	b.n	8005120 <HAL_GPIO_Init+0xc0>
 8005232:	bf00      	nop
 8005234:	48000400 	.word	0x48000400
 8005238:	48000800 	.word	0x48000800
 800523c:	48000c00 	.word	0x48000c00
 8005240:	48001000 	.word	0x48001000
 8005244:	48001400 	.word	0x48001400
 8005248:	40010400 	.word	0x40010400
 800524c:	40021000 	.word	0x40021000

08005250 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005250:	6903      	ldr	r3, [r0, #16]
 8005252:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005254:	bf14      	ite	ne
 8005256:	2001      	movne	r0, #1
 8005258:	2000      	moveq	r0, #0
 800525a:	4770      	bx	lr

0800525c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800525c:	b10a      	cbz	r2, 8005262 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800525e:	6181      	str	r1, [r0, #24]
 8005260:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005262:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005268:	2800      	cmp	r0, #0
 800526a:	d07f      	beq.n	800536c <HAL_OPAMP_Init+0x104>
{
 800526c:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800526e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005272:	2b05      	cmp	r3, #5
{
 8005274:	b083      	sub	sp, #12
 8005276:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005278:	d057      	beq.n	800532a <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800527a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800527e:	2b02      	cmp	r3, #2
 8005280:	d053      	beq.n	800532a <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005282:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_OPAMP_Init+0x108>)
 8005284:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	661a      	str	r2, [r3, #96]	; 0x60
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005296:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800529a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800529e:	b90b      	cbnz	r3, 80052a4 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80052a0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80052a4:	4620      	mov	r0, r4
 80052a6:	f7fe f969 	bl	800357c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80052aa:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80052ac:	6821      	ldr	r1, [r4, #0]
 80052ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80052b0:	f023 0220 	bic.w	r2, r3, #32
 80052b4:	2a40      	cmp	r2, #64	; 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 80052b6:	680a      	ldr	r2, [r1, #0]
 80052b8:	f022 0210 	bic.w	r2, r2, #16
 80052bc:	ea42 0200 	orr.w	r2, r2, r0
 80052c0:	600a      	str	r2, [r1, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80052c2:	d035      	beq.n	8005330 <HAL_OPAMP_Init+0xc8>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <HAL_OPAMP_Init+0x10c>)
 80052c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80052ca:	4002      	ands	r2, r0
 80052cc:	6860      	ldr	r0, [r4, #4]
 80052ce:	4303      	orrs	r3, r0
 80052d0:	68e0      	ldr	r0, [r4, #12]
 80052d2:	4303      	orrs	r3, r0
 80052d4:	6920      	ldr	r0, [r4, #16]
 80052d6:	4303      	orrs	r3, r0
 80052d8:	432b      	orrs	r3, r5
 80052da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80052dc:	7d20      	ldrb	r0, [r4, #20]
 80052de:	432b      	orrs	r3, r5
 80052e0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80052e2:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 80052e6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80052e8:	2801      	cmp	r0, #1
 80052ea:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80052ee:	bf0c      	ite	eq
 80052f0:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80052f4:	2000      	movne	r0, #0
 80052f6:	4313      	orrs	r3, r2
 80052f8:	4303      	orrs	r3, r0
 80052fa:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80052fc:	698b      	ldr	r3, [r1, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	db09      	blt.n	8005316 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005302:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8005306:	698a      	ldr	r2, [r1, #24]
 8005308:	4303      	orrs	r3, r0
 800530a:	6a20      	ldr	r0, [r4, #32]
 800530c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005310:	4303      	orrs	r3, r0
 8005312:	4313      	orrs	r3, r2
 8005314:	618b      	str	r3, [r1, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005316:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800531a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800531e:	bb13      	cbnz	r3, 8005366 <HAL_OPAMP_Init+0xfe>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005320:	2301      	movs	r3, #1
 8005322:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8005326:	b003      	add	sp, #12
 8005328:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800532a:	2001      	movs	r0, #1
}
 800532c:	b003      	add	sp, #12
 800532e:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005330:	680a      	ldr	r2, [r1, #0]
 8005332:	4810      	ldr	r0, [pc, #64]	; (8005374 <HAL_OPAMP_Init+0x10c>)
 8005334:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005336:	4010      	ands	r0, r2
 8005338:	6862      	ldr	r2, [r4, #4]
 800533a:	4313      	orrs	r3, r2
 800533c:	6922      	ldr	r2, [r4, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	432b      	orrs	r3, r5
 8005342:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005344:	7d22      	ldrb	r2, [r4, #20]
 8005346:	432b      	orrs	r3, r5
 8005348:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800534a:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
 800534e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005350:	2a01      	cmp	r2, #1
 8005352:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005356:	bf0c      	ite	eq
 8005358:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800535c:	2200      	movne	r2, #0
 800535e:	4303      	orrs	r3, r0
 8005360:	4313      	orrs	r3, r2
 8005362:	600b      	str	r3, [r1, #0]
 8005364:	e7ca      	b.n	80052fc <HAL_OPAMP_Init+0x94>
    return status;
 8005366:	2000      	movs	r0, #0
}
 8005368:	b003      	add	sp, #12
 800536a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800536c:	2001      	movs	r0, #1
}
 800536e:	4770      	bx	lr
 8005370:	40021000 	.word	0x40021000
 8005374:	e0003e11 	.word	0xe0003e11

08005378 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005378:	4603      	mov	r3, r0
 800537a:	b138      	cbz	r0, 800538c <HAL_OPAMP_Start+0x14>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800537c:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8005380:	2a05      	cmp	r2, #5
 8005382:	d003      	beq.n	800538c <HAL_OPAMP_Start+0x14>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005384:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8005388:	2a01      	cmp	r2, #1
 800538a:	d001      	beq.n	8005390 <HAL_OPAMP_Start+0x18>
    status = HAL_ERROR;
 800538c:	2001      	movs	r0, #1
    }


  }
  return status;
}
 800538e:	4770      	bx	lr
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005390:	6801      	ldr	r1, [r0, #0]
 8005392:	680a      	ldr	r2, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005394:	f04f 0c04 	mov.w	ip, #4
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2000      	movs	r0, #0
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80053a0:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop

080053a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053a8:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053aa:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053ac:	b970      	cbnz	r0, 80053cc <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053bc:	d023      	beq.n	8005406 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80053c2:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80053ca:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80053d0:	d009      	beq.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053d2:	6813      	ldr	r3, [r2, #0]
}
 80053d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 80053e0:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053f4:	d02f      	beq.n	8005456 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80053fa:	2000      	movs	r0, #0
}
 80053fc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005404:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800540a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800540e:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005410:	4c22      	ldr	r4, [pc, #136]	; (800549c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005412:	4823      	ldr	r0, [pc, #140]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005414:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005418:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800541c:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	2132      	movs	r1, #50	; 0x32
 8005422:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005426:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005428:	fba0 0303 	umull	r0, r3, r0, r3
 800542c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800542e:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005430:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005434:	d506      	bpl.n	8005444 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005436:	e000      	b.n	800543a <HAL_PWREx_ControlVoltageScaling+0x92>
 8005438:	b123      	cbz	r3, 8005444 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800543a:	6951      	ldr	r1, [r2, #20]
 800543c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800543e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005442:	d4f9      	bmi.n	8005438 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 800544a:	bf54      	ite	pl
 800544c:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800544e:	2003      	movmi	r0, #3
}
 8005450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005454:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800545e:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005460:	4c0e      	ldr	r4, [pc, #56]	; (800549c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005462:	480f      	ldr	r0, [pc, #60]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005464:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005468:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800546c:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	2132      	movs	r1, #50	; 0x32
 8005472:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005476:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005478:	fba0 0303 	umull	r0, r3, r0, r3
 800547c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800547e:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005480:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005484:	d5de      	bpl.n	8005444 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005486:	e001      	b.n	800548c <HAL_PWREx_ControlVoltageScaling+0xe4>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0db      	beq.n	8005444 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800548c:	6951      	ldr	r1, [r2, #20]
 800548e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005490:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005494:	d5d6      	bpl.n	8005444 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005496:	e7f7      	b.n	8005488 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8005498:	40007000 	.word	0x40007000
 800549c:	20000000 	.word	0x20000000
 80054a0:	431bde83 	.word	0x431bde83

080054a4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f000 81c3 	beq.w	8005830 <HAL_RCC_OscConfig+0x38c>
{
 80054aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ae:	6803      	ldr	r3, [r0, #0]
 80054b0:	07d9      	lsls	r1, r3, #31
{
 80054b2:	b082      	sub	sp, #8
 80054b4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b6:	d52d      	bpl.n	8005514 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b8:	49a6      	ldr	r1, [pc, #664]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 80054ba:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054bc:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054be:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80054c2:	2a0c      	cmp	r2, #12
 80054c4:	f000 810a 	beq.w	80056dc <HAL_RCC_OscConfig+0x238>
 80054c8:	2a08      	cmp	r2, #8
 80054ca:	f000 810c 	beq.w	80056e6 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ce:	6863      	ldr	r3, [r4, #4]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	f000 8133 	beq.w	800573e <HAL_RCC_OscConfig+0x29a>
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054dc:	f000 819b 	beq.w	8005816 <HAL_RCC_OscConfig+0x372>
 80054e0:	4d9c      	ldr	r5, [pc, #624]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 80054e2:	682a      	ldr	r2, [r5, #0]
 80054e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	682a      	ldr	r2, [r5, #0]
 80054ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054f0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 8128 	bne.w	8005748 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fe faec 	bl	8003ad4 <HAL_GetTick>
 80054fc:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054fe:	e005      	b.n	800550c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005500:	f7fe fae8 	bl	8003ad4 <HAL_GetTick>
 8005504:	1b80      	subs	r0, r0, r6
 8005506:	2864      	cmp	r0, #100	; 0x64
 8005508:	f200 8142 	bhi.w	8005790 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	039f      	lsls	r7, r3, #14
 8005510:	d4f6      	bmi.n	8005500 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	079e      	lsls	r6, r3, #30
 8005516:	d528      	bpl.n	800556a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005518:	4a8e      	ldr	r2, [pc, #568]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 800551a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800551c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005522:	2b0c      	cmp	r3, #12
 8005524:	f000 80ec 	beq.w	8005700 <HAL_RCC_OscConfig+0x25c>
 8005528:	2b04      	cmp	r3, #4
 800552a:	f000 80ee 	beq.w	800570a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800552e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005530:	4d88      	ldr	r5, [pc, #544]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 811d 	beq.w	8005772 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fe fac8 	bl	8003ad4 <HAL_GetTick>
 8005544:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005546:	e005      	b.n	8005554 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005548:	f7fe fac4 	bl	8003ad4 <HAL_GetTick>
 800554c:	1b80      	subs	r0, r0, r6
 800554e:	2802      	cmp	r0, #2
 8005550:	f200 811e 	bhi.w	8005790 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	0558      	lsls	r0, r3, #21
 8005558:	d5f6      	bpl.n	8005548 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555a:	686b      	ldr	r3, [r5, #4]
 800555c:	6922      	ldr	r2, [r4, #16]
 800555e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005562:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005566:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	071a      	lsls	r2, r3, #28
 800556c:	d519      	bpl.n	80055a2 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800556e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005570:	4d78      	ldr	r5, [pc, #480]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 809e 	beq.w	80056b4 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005578:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fe faa6 	bl	8003ad4 <HAL_GetTick>
 8005588:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800558a:	e005      	b.n	8005598 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558c:	f7fe faa2 	bl	8003ad4 <HAL_GetTick>
 8005590:	1b80      	subs	r0, r0, r6
 8005592:	2802      	cmp	r0, #2
 8005594:	f200 80fc 	bhi.w	8005790 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005598:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800559c:	079f      	lsls	r7, r3, #30
 800559e:	d5f5      	bpl.n	800558c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	0759      	lsls	r1, r3, #29
 80055a4:	d541      	bpl.n	800562a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055a6:	4b6b      	ldr	r3, [pc, #428]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 80055a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055aa:	00d2      	lsls	r2, r2, #3
 80055ac:	f100 80f4 	bmi.w	8005798 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055b6:	659a      	str	r2, [r3, #88]	; 0x58
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80055c2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c4:	4e64      	ldr	r6, [pc, #400]	; (8005758 <HAL_RCC_OscConfig+0x2b4>)
 80055c6:	6833      	ldr	r3, [r6, #0]
 80055c8:	05df      	lsls	r7, r3, #23
 80055ca:	f140 8113 	bpl.w	80057f4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f000 80e3 	beq.w	800579c <HAL_RCC_OscConfig+0x2f8>
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	f000 8169 	beq.w	80058ae <HAL_RCC_OscConfig+0x40a>
 80055dc:	4e5d      	ldr	r6, [pc, #372]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 80055de:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80055ea:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 80d7 	bne.w	80057aa <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fe fa6a 	bl	8003ad4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005604:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005606:	e005      	b.n	8005614 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005608:	f7fe fa64 	bl	8003ad4 <HAL_GetTick>
 800560c:	1bc0      	subs	r0, r0, r7
 800560e:	4540      	cmp	r0, r8
 8005610:	f200 80be 	bhi.w	8005790 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005614:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005618:	079a      	lsls	r2, r3, #30
 800561a:	d4f5      	bmi.n	8005608 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800561c:	b125      	cbz	r5, 8005628 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4a4d      	ldr	r2, [pc, #308]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 8005620:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005626:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	069b      	lsls	r3, r3, #26
 800562c:	d518      	bpl.n	8005660 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800562e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005630:	4d48      	ldr	r5, [pc, #288]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80ca 	beq.w	80057cc <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8005638:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fe fa46 	bl	8003ad4 <HAL_GetTick>
 8005648:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800564a:	e005      	b.n	8005658 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800564c:	f7fe fa42 	bl	8003ad4 <HAL_GetTick>
 8005650:	1b80      	subs	r0, r0, r6
 8005652:	2802      	cmp	r0, #2
 8005654:	f200 809c 	bhi.w	8005790 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005658:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800565c:	079f      	lsls	r7, r3, #30
 800565e:	d5f5      	bpl.n	800564c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005660:	69e0      	ldr	r0, [r4, #28]
 8005662:	b318      	cbz	r0, 80056ac <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005664:	4d3b      	ldr	r5, [pc, #236]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 8005666:	68ab      	ldr	r3, [r5, #8]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f000 812c 	beq.w	80058ca <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005672:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005674:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800567c:	f000 80da 	beq.w	8005834 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005680:	68eb      	ldr	r3, [r5, #12]
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005688:	68eb      	ldr	r3, [r5, #12]
 800568a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fe fa1e 	bl	8003ad4 <HAL_GetTick>
 8005698:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569a:	e004      	b.n	80056a6 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569c:	f7fe fa1a 	bl	8003ad4 <HAL_GetTick>
 80056a0:	1b00      	subs	r0, r0, r4
 80056a2:	2802      	cmp	r0, #2
 80056a4:	d874      	bhi.n	8005790 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	d4f7      	bmi.n	800569c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80056ac:	2000      	movs	r0, #0
}
 80056ae:	b002      	add	sp, #8
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80056b4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80056c0:	f7fe fa08 	bl	8003ad4 <HAL_GetTick>
 80056c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056c6:	e004      	b.n	80056d2 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c8:	f7fe fa04 	bl	8003ad4 <HAL_GetTick>
 80056cc:	1b80      	subs	r0, r0, r6
 80056ce:	2802      	cmp	r0, #2
 80056d0:	d85e      	bhi.n	8005790 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056d2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80056d6:	0798      	lsls	r0, r3, #30
 80056d8:	d4f6      	bmi.n	80056c8 <HAL_RCC_OscConfig+0x224>
 80056da:	e761      	b.n	80055a0 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056dc:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056e0:	2903      	cmp	r1, #3
 80056e2:	f47f aef4 	bne.w	80054ce <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e6:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	0392      	lsls	r2, r2, #14
 80056ec:	f57f af12 	bpl.w	8005514 <HAL_RCC_OscConfig+0x70>
 80056f0:	6862      	ldr	r2, [r4, #4]
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	f47f af0e 	bne.w	8005514 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80056f8:	2001      	movs	r0, #1
}
 80056fa:	b002      	add	sp, #8
 80056fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005700:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005704:	2a02      	cmp	r2, #2
 8005706:	f47f af12 	bne.w	800552e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	055d      	lsls	r5, r3, #21
 8005710:	d502      	bpl.n	8005718 <HAL_RCC_OscConfig+0x274>
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005718:	4a0e      	ldr	r2, [pc, #56]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 800571a:	6920      	ldr	r0, [r4, #16]
 800571c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800571e:	490f      	ldr	r1, [pc, #60]	; (800575c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005720:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005724:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005728:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800572a:	6808      	ldr	r0, [r1, #0]
 800572c:	f7fe f990 	bl	8003a50 <HAL_InitTick>
 8005730:	2800      	cmp	r0, #0
 8005732:	d1e1      	bne.n	80056f8 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	071a      	lsls	r2, r3, #28
 8005738:	f57f af33 	bpl.w	80055a2 <HAL_RCC_OscConfig+0xfe>
 800573c:	e717      	b.n	800556e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
 8005740:	6813      	ldr	r3, [r2, #0]
 8005742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005746:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005748:	f7fe f9c4 	bl	8003ad4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574c:	4e01      	ldr	r6, [pc, #4]	; (8005754 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800574e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005750:	e00b      	b.n	800576a <HAL_RCC_OscConfig+0x2c6>
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	40007000 	.word	0x40007000
 800575c:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005760:	f7fe f9b8 	bl	8003ad4 <HAL_GetTick>
 8005764:	1b40      	subs	r0, r0, r5
 8005766:	2864      	cmp	r0, #100	; 0x64
 8005768:	d812      	bhi.n	8005790 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576a:	6833      	ldr	r3, [r6, #0]
 800576c:	039b      	lsls	r3, r3, #14
 800576e:	d5f7      	bpl.n	8005760 <HAL_RCC_OscConfig+0x2bc>
 8005770:	e6cf      	b.n	8005512 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005778:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800577a:	f7fe f9ab 	bl	8003ad4 <HAL_GetTick>
 800577e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	0559      	lsls	r1, r3, #21
 8005784:	d5d6      	bpl.n	8005734 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005786:	f7fe f9a5 	bl	8003ad4 <HAL_GetTick>
 800578a:	1b80      	subs	r0, r0, r6
 800578c:	2802      	cmp	r0, #2
 800578e:	d9f7      	bls.n	8005780 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005790:	2003      	movs	r0, #3
}
 8005792:	b002      	add	sp, #8
 8005794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005798:	2500      	movs	r5, #0
 800579a:	e713      	b.n	80055c4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800579c:	4a65      	ldr	r2, [pc, #404]	; (8005934 <HAL_RCC_OscConfig+0x490>)
 800579e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80057aa:	f7fe f993 	bl	8003ad4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ae:	4f61      	ldr	r7, [pc, #388]	; (8005934 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80057b0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b2:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b6:	e004      	b.n	80057c2 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fe f98c 	bl	8003ad4 <HAL_GetTick>
 80057bc:	1b80      	subs	r0, r0, r6
 80057be:	4540      	cmp	r0, r8
 80057c0:	d8e6      	bhi.n	8005790 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057c6:	0799      	lsls	r1, r3, #30
 80057c8:	d5f6      	bpl.n	80057b8 <HAL_RCC_OscConfig+0x314>
 80057ca:	e727      	b.n	800561c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80057cc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80057d8:	f7fe f97c 	bl	8003ad4 <HAL_GetTick>
 80057dc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057de:	e004      	b.n	80057ea <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e0:	f7fe f978 	bl	8003ad4 <HAL_GetTick>
 80057e4:	1b80      	subs	r0, r0, r6
 80057e6:	2802      	cmp	r0, #2
 80057e8:	d8d2      	bhi.n	8005790 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057ea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80057ee:	0798      	lsls	r0, r3, #30
 80057f0:	d4f6      	bmi.n	80057e0 <HAL_RCC_OscConfig+0x33c>
 80057f2:	e735      	b.n	8005660 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80057fc:	f7fe f96a 	bl	8003ad4 <HAL_GetTick>
 8005800:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005802:	6833      	ldr	r3, [r6, #0]
 8005804:	05d8      	lsls	r0, r3, #23
 8005806:	f53f aee2 	bmi.w	80055ce <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580a:	f7fe f963 	bl	8003ad4 <HAL_GetTick>
 800580e:	1bc0      	subs	r0, r0, r7
 8005810:	2802      	cmp	r0, #2
 8005812:	d9f6      	bls.n	8005802 <HAL_RCC_OscConfig+0x35e>
 8005814:	e7bc      	b.n	8005790 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005816:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800581a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800582c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800582e:	e78b      	b.n	8005748 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005830:	2001      	movs	r0, #1
}
 8005832:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005834:	f7fe f94e 	bl	8003ad4 <HAL_GetTick>
 8005838:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583a:	e004      	b.n	8005846 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fe f94a 	bl	8003ad4 <HAL_GetTick>
 8005840:	1b80      	subs	r0, r0, r6
 8005842:	2802      	cmp	r0, #2
 8005844:	d8a4      	bhi.n	8005790 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	0199      	lsls	r1, r3, #6
 800584a:	d4f7      	bmi.n	800583c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800584c:	68e9      	ldr	r1, [r5, #12]
 800584e:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <HAL_RCC_OscConfig+0x494>)
 8005850:	6a22      	ldr	r2, [r4, #32]
 8005852:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005854:	4e37      	ldr	r6, [pc, #220]	; (8005934 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005856:	400b      	ands	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800585e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005862:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005866:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800586a:	3801      	subs	r0, #1
 800586c:	0849      	lsrs	r1, r1, #1
 800586e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005872:	3901      	subs	r1, #1
 8005874:	0852      	lsrs	r2, r2, #1
 8005876:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800587a:	3a01      	subs	r2, #1
 800587c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005880:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005888:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800588a:	68eb      	ldr	r3, [r5, #12]
 800588c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005890:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005892:	f7fe f91f 	bl	8003ad4 <HAL_GetTick>
 8005896:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005898:	e005      	b.n	80058a6 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589a:	f7fe f91b 	bl	8003ad4 <HAL_GetTick>
 800589e:	1b00      	subs	r0, r0, r4
 80058a0:	2802      	cmp	r0, #2
 80058a2:	f63f af75 	bhi.w	8005790 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	6833      	ldr	r3, [r6, #0]
 80058a8:	019a      	lsls	r2, r3, #6
 80058aa:	d5f6      	bpl.n	800589a <HAL_RCC_OscConfig+0x3f6>
 80058ac:	e6fe      	b.n	80056ac <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ae:	4b21      	ldr	r3, [pc, #132]	; (8005934 <HAL_RCC_OscConfig+0x490>)
 80058b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80058b4:	f042 0204 	orr.w	r2, r2, #4
 80058b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80058bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058c8:	e76f      	b.n	80057aa <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ca:	2801      	cmp	r0, #1
 80058cc:	f43f aeef 	beq.w	80056ae <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80058d0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d2:	6a22      	ldr	r2, [r4, #32]
 80058d4:	f003 0103 	and.w	r1, r3, #3
 80058d8:	4291      	cmp	r1, r2
 80058da:	f47f af0d 	bne.w	80056f8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058e4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80058ea:	f47f af05 	bne.w	80056f8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80058f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058f4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80058f8:	f47f aefe 	bne.w	80056f8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80058fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005902:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005906:	f47f aef7 	bne.w	80056f8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800590a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005912:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005914:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005918:	f47f aeee 	bne.w	80056f8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800591c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800591e:	0852      	lsrs	r2, r2, #1
 8005920:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005924:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005926:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800592a:	bf14      	ite	ne
 800592c:	2001      	movne	r0, #1
 800592e:	2000      	moveq	r0, #0
 8005930:	e6bd      	b.n	80056ae <HAL_RCC_OscConfig+0x20a>
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	019f800c 	.word	0x019f800c

0800593c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800593c:	4b18      	ldr	r3, [pc, #96]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x64>)
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	f002 020c 	and.w	r2, r2, #12
 8005944:	2a04      	cmp	r2, #4
 8005946:	d027      	beq.n	8005998 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	f002 020c 	and.w	r2, r2, #12
 800594e:	2a08      	cmp	r2, #8
 8005950:	d024      	beq.n	800599c <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	f002 020c 	and.w	r2, r2, #12
 8005958:	2a0c      	cmp	r2, #12
 800595a:	d001      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800595c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800595e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005960:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005962:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005964:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005968:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800596a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800596e:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005972:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005974:	bf0c      	ite	eq
 8005976:	4b0b      	ldreq	r3, [pc, #44]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005978:	4b0b      	ldrne	r3, [pc, #44]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800597a:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x64>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005986:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800598a:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800598c:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005990:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005992:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005996:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005998:	4803      	ldr	r0, [pc, #12]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800599a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800599c:	4801      	ldr	r0, [pc, #4]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x68>)
 800599e:	4770      	bx	lr
 80059a0:	40021000 	.word	0x40021000
 80059a4:	007a1200 	.word	0x007a1200
 80059a8:	00f42400 	.word	0x00f42400

080059ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f000 80ee 	beq.w	8005b8e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b2:	4a7f      	ldr	r2, [pc, #508]	; (8005bb0 <HAL_RCC_ClockConfig+0x204>)
{
 80059b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	6813      	ldr	r3, [r2, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	428b      	cmp	r3, r1
 80059c0:	460d      	mov	r5, r1
 80059c2:	4604      	mov	r4, r0
 80059c4:	d20c      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	f023 030f 	bic.w	r3, r3, #15
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d0:	6813      	ldr	r3, [r2, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	428b      	cmp	r3, r1
 80059d8:	d002      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80059da:	2001      	movs	r0, #1
}
 80059dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	07df      	lsls	r7, r3, #31
 80059e4:	d563      	bpl.n	8005aae <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059e6:	6862      	ldr	r2, [r4, #4]
 80059e8:	2a03      	cmp	r2, #3
 80059ea:	f000 809a 	beq.w	8005b22 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ee:	4b71      	ldr	r3, [pc, #452]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f0:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f4:	f000 8091 	beq.w	8005b1a <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f8:	055b      	lsls	r3, r3, #21
 80059fa:	d5ee      	bpl.n	80059da <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059fc:	f7ff ff9e 	bl	800593c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005a00:	4b6d      	ldr	r3, [pc, #436]	; (8005bb8 <HAL_RCC_ClockConfig+0x20c>)
 8005a02:	4298      	cmp	r0, r3
 8005a04:	f200 80c5 	bhi.w	8005b92 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a08:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a0a:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a0e:	4e69      	ldr	r6, [pc, #420]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005a10:	68b3      	ldr	r3, [r6, #8]
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	431a      	orrs	r2, r3
 8005a18:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005a1a:	f7fe f85b 	bl	8003ad4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a1e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005a22:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a24:	e004      	b.n	8005a30 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a26:	f7fe f855 	bl	8003ad4 <HAL_GetTick>
 8005a2a:	1bc0      	subs	r0, r0, r7
 8005a2c:	4540      	cmp	r0, r8
 8005a2e:	d871      	bhi.n	8005b14 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a30:	68b3      	ldr	r3, [r6, #8]
 8005a32:	6862      	ldr	r2, [r4, #4]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005a3c:	d1f3      	bne.n	8005a26 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	079f      	lsls	r7, r3, #30
 8005a42:	d436      	bmi.n	8005ab2 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8005a44:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8005a48:	d103      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a4a:	68b3      	ldr	r3, [r6, #8]
 8005a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a50:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a52:	4e57      	ldr	r6, [pc, #348]	; (8005bb0 <HAL_RCC_ClockConfig+0x204>)
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	42ab      	cmp	r3, r5
 8005a5c:	d846      	bhi.n	8005aec <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	075a      	lsls	r2, r3, #29
 8005a62:	d506      	bpl.n	8005a72 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a64:	4953      	ldr	r1, [pc, #332]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005a66:	68e0      	ldr	r0, [r4, #12]
 8005a68:	688a      	ldr	r2, [r1, #8]
 8005a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6e:	4302      	orrs	r2, r0
 8005a70:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a72:	071b      	lsls	r3, r3, #28
 8005a74:	d507      	bpl.n	8005a86 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a76:	4a4f      	ldr	r2, [pc, #316]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005a78:	6921      	ldr	r1, [r4, #16]
 8005a7a:	6893      	ldr	r3, [r2, #8]
 8005a7c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005a80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005a84:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a86:	f7ff ff59 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8005a8a:	4a4a      	ldr	r2, [pc, #296]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005a8c:	4c4b      	ldr	r4, [pc, #300]	; (8005bbc <HAL_RCC_ClockConfig+0x210>)
 8005a8e:	6892      	ldr	r2, [r2, #8]
 8005a90:	494b      	ldr	r1, [pc, #300]	; (8005bc0 <HAL_RCC_ClockConfig+0x214>)
 8005a92:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005a96:	4603      	mov	r3, r0
 8005a98:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005a9a:	484a      	ldr	r0, [pc, #296]	; (8005bc4 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a9c:	f002 021f 	and.w	r2, r2, #31
 8005aa0:	40d3      	lsrs	r3, r2
 8005aa2:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005aa4:	6800      	ldr	r0, [r0, #0]
}
 8005aa6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005aaa:	f7fd bfd1 	b.w	8003a50 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aae:	079e      	lsls	r6, r3, #30
 8005ab0:	d5cf      	bpl.n	8005a52 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab2:	0758      	lsls	r0, r3, #29
 8005ab4:	d504      	bpl.n	8005ac0 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ab6:	493f      	ldr	r1, [pc, #252]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005abe:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac0:	0719      	lsls	r1, r3, #28
 8005ac2:	d506      	bpl.n	8005ad2 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ac4:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005ac6:	6893      	ldr	r3, [r2, #8]
 8005ac8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005acc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ad0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad2:	4a38      	ldr	r2, [pc, #224]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005ad4:	68a1      	ldr	r1, [r4, #8]
 8005ad6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad8:	4e35      	ldr	r6, [pc, #212]	; (8005bb0 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae2:	6833      	ldr	r3, [r6, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	d9b8      	bls.n	8005a5e <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	f023 030f 	bic.w	r3, r3, #15
 8005af2:	432b      	orrs	r3, r5
 8005af4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005af6:	f7fd ffed 	bl	8003ad4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005afe:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	42ab      	cmp	r3, r5
 8005b08:	d0a9      	beq.n	8005a5e <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0a:	f7fd ffe3 	bl	8003ad4 <HAL_GetTick>
 8005b0e:	1bc0      	subs	r0, r0, r7
 8005b10:	4540      	cmp	r0, r8
 8005b12:	d9f5      	bls.n	8005b00 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005b14:	2003      	movs	r0, #3
}
 8005b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1a:	039a      	lsls	r2, r3, #14
 8005b1c:	f53f af6e 	bmi.w	80059fc <HAL_RCC_ClockConfig+0x50>
 8005b20:	e75b      	b.n	80059da <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b22:	4924      	ldr	r1, [pc, #144]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005b24:	6808      	ldr	r0, [r1, #0]
 8005b26:	0180      	lsls	r0, r0, #6
 8005b28:	f57f af57 	bpl.w	80059da <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b2c:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2e:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b30:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8005b32:	4f21      	ldr	r7, [pc, #132]	; (8005bb8 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b34:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8005b38:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b3a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b3e:	bf0c      	ite	eq
 8005b40:	4e21      	ldreq	r6, [pc, #132]	; (8005bc8 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b42:	4e22      	ldrne	r6, [pc, #136]	; (8005bcc <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b44:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b46:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b4a:	4e1a      	ldr	r6, [pc, #104]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b4c:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005b50:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b54:	68f0      	ldr	r0, [r6, #12]
 8005b56:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005b5e:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005b62:	42b9      	cmp	r1, r7
 8005b64:	d920      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b66:	68b1      	ldr	r1, [r6, #8]
 8005b68:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005b6c:	d005      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x1ce>
 8005b6e:	f013 0902 	ands.w	r9, r3, #2
 8005b72:	f43f af4c 	beq.w	8005a0e <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	b9b3      	cbnz	r3, 8005ba8 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b7a:	490e      	ldr	r1, [pc, #56]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005b7c:	688b      	ldr	r3, [r1, #8]
 8005b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b86:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b88:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005b8c:	e73f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8005b8e:	2001      	movs	r0, #1
}
 8005b90:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b92:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <HAL_RCC_ClockConfig+0x208>)
 8005b94:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b96:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b9e:	ea43 0309 	orr.w	r3, r3, r9
 8005ba2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ba4:	6862      	ldr	r2, [r4, #4]
 8005ba6:	e732      	b.n	8005a0e <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	e72f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x62>
 8005bae:	bf00      	nop
 8005bb0:	40022000 	.word	0x40022000
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	04c4b400 	.word	0x04c4b400
 8005bbc:	0800b3e0 	.word	0x0800b3e0
 8005bc0:	20000000 	.word	0x20000000
 8005bc4:	20000008 	.word	0x20000008
 8005bc8:	007a1200 	.word	0x007a1200
 8005bcc:	00f42400 	.word	0x00f42400

08005bd0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005bd2:	4a06      	ldr	r2, [pc, #24]	; (8005bec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005bd6:	4906      	ldr	r1, [pc, #24]	; (8005bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bd8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005bdc:	6808      	ldr	r0, [r1, #0]
 8005bde:	5cd3      	ldrb	r3, [r2, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
}
 8005be4:	40d8      	lsrs	r0, r3
 8005be6:	4770      	bx	lr
 8005be8:	40021000 	.word	0x40021000
 8005bec:	0800b3f0 	.word	0x0800b3f0
 8005bf0:	20000000 	.word	0x20000000

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005bf6:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005bfa:	4906      	ldr	r1, [pc, #24]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bfc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005c00:	6808      	ldr	r0, [r1, #0]
 8005c02:	5cd3      	ldrb	r3, [r2, r3]
 8005c04:	f003 031f 	and.w	r3, r3, #31
}
 8005c08:	40d8      	lsrs	r0, r3
 8005c0a:	4770      	bx	lr
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	0800b3f0 	.word	0x0800b3f0
 8005c14:	20000000 	.word	0x20000000

08005c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c1c:	6803      	ldr	r3, [r0, #0]
{
 8005c1e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c20:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005c24:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c26:	d056      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c28:	4b9f      	ldr	r3, [pc, #636]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c2c:	00d5      	lsls	r5, r2, #3
 8005c2e:	f140 810c 	bpl.w	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005c32:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c34:	4d9d      	ldr	r5, [pc, #628]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c3e:	f7fd ff49 	bl	8003ad4 <HAL_GetTick>
 8005c42:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c44:	e005      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c46:	f7fd ff45 	bl	8003ad4 <HAL_GetTick>
 8005c4a:	1b83      	subs	r3, r0, r6
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	f200 8107 	bhi.w	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c52:	682b      	ldr	r3, [r5, #0]
 8005c54:	05d8      	lsls	r0, r3, #23
 8005c56:	d5f6      	bpl.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c58:	4d93      	ldr	r5, [pc, #588]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005c5a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005c62:	d027      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005c64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d025      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c6a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c6e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c76:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c82:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c86:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c8a:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005c8c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c90:	f140 8108 	bpl.w	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fd ff1e 	bl	8003ad4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005c9c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c9e:	e005      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fd ff18 	bl	8003ad4 <HAL_GetTick>
 8005ca4:	1b80      	subs	r0, r0, r6
 8005ca6:	4540      	cmp	r0, r8
 8005ca8:	f200 80da 	bhi.w	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cac:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005cb0:	079b      	lsls	r3, r3, #30
 8005cb2:	d5f5      	bpl.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cb6:	497c      	ldr	r1, [pc, #496]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cb8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cc6:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc8:	b127      	cbz	r7, 8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cca:	4a77      	ldr	r2, [pc, #476]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ccc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	07de      	lsls	r6, r3, #31
 8005cd8:	d508      	bpl.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cda:	4973      	ldr	r1, [pc, #460]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cdc:	6865      	ldr	r5, [r4, #4]
 8005cde:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ce2:	f022 0203 	bic.w	r2, r2, #3
 8005ce6:	432a      	orrs	r2, r5
 8005ce8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cec:	079d      	lsls	r5, r3, #30
 8005cee:	d508      	bpl.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cf0:	496d      	ldr	r1, [pc, #436]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005cf2:	68a5      	ldr	r5, [r4, #8]
 8005cf4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005cf8:	f022 020c 	bic.w	r2, r2, #12
 8005cfc:	432a      	orrs	r2, r5
 8005cfe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d02:	0759      	lsls	r1, r3, #29
 8005d04:	d508      	bpl.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d06:	4968      	ldr	r1, [pc, #416]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d08:	68e5      	ldr	r5, [r4, #12]
 8005d0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d0e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005d12:	432a      	orrs	r2, r5
 8005d14:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d18:	071a      	lsls	r2, r3, #28
 8005d1a:	d508      	bpl.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d1c:	4962      	ldr	r1, [pc, #392]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d1e:	6925      	ldr	r5, [r4, #16]
 8005d20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d24:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d28:	432a      	orrs	r2, r5
 8005d2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d2e:	069f      	lsls	r7, r3, #26
 8005d30:	d508      	bpl.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d32:	495d      	ldr	r1, [pc, #372]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d34:	6965      	ldr	r5, [r4, #20]
 8005d36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d3e:	432a      	orrs	r2, r5
 8005d40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d44:	065e      	lsls	r6, r3, #25
 8005d46:	d508      	bpl.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d48:	4957      	ldr	r1, [pc, #348]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d4a:	69a5      	ldr	r5, [r4, #24]
 8005d4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d50:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005d54:	432a      	orrs	r2, r5
 8005d56:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d5a:	061d      	lsls	r5, r3, #24
 8005d5c:	d508      	bpl.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d5e:	4952      	ldr	r1, [pc, #328]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d60:	69e5      	ldr	r5, [r4, #28]
 8005d62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d6a:	432a      	orrs	r2, r5
 8005d6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d70:	05d9      	lsls	r1, r3, #23
 8005d72:	d508      	bpl.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d74:	494c      	ldr	r1, [pc, #304]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d76:	6a25      	ldr	r5, [r4, #32]
 8005d78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005d80:	432a      	orrs	r2, r5
 8005d82:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d86:	059a      	lsls	r2, r3, #22
 8005d88:	d508      	bpl.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d8a:	4947      	ldr	r1, [pc, #284]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005d8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d92:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005d96:	432a      	orrs	r2, r5
 8005d98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d9c:	055f      	lsls	r7, r3, #21
 8005d9e:	d50b      	bpl.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da0:	4941      	ldr	r1, [pc, #260]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005da2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005da4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005da8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005dac:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005dae:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005db2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005db6:	d055      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005db8:	051e      	lsls	r6, r3, #20
 8005dba:	d50b      	bpl.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dbc:	493a      	ldr	r1, [pc, #232]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dbe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005dc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dc4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005dc8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dca:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dd2:	d04c      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dd4:	04dd      	lsls	r5, r3, #19
 8005dd6:	d50b      	bpl.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dd8:	4933      	ldr	r1, [pc, #204]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dda:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005ddc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005de4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005de6:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dee:	d043      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005df0:	0499      	lsls	r1, r3, #18
 8005df2:	d50b      	bpl.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df4:	492c      	ldr	r1, [pc, #176]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005df6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005df8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dfc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e00:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e02:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e0a:	d03a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e0c:	045a      	lsls	r2, r3, #17
 8005e0e:	d50b      	bpl.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e10:	4925      	ldr	r1, [pc, #148]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e12:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005e14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005e18:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e1c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e1e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e26:	d031      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	d50b      	bpl.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005e30:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e34:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005e38:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e3a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e42:	d028      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8005e44:	b002      	add	sp, #8
 8005e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e50:	659a      	str	r2, [r3, #88]	; 0x58
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e5c:	2701      	movs	r7, #1
 8005e5e:	e6e9      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005e60:	2003      	movs	r0, #3
 8005e62:	e731      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e64:	68ca      	ldr	r2, [r1, #12]
 8005e66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e6a:	60ca      	str	r2, [r1, #12]
 8005e6c:	e7a4      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e6e:	68ca      	ldr	r2, [r1, #12]
 8005e70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e74:	60ca      	str	r2, [r1, #12]
 8005e76:	e7ad      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e78:	68ca      	ldr	r2, [r1, #12]
 8005e7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e7e:	60ca      	str	r2, [r1, #12]
 8005e80:	e7b6      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e82:	68ca      	ldr	r2, [r1, #12]
 8005e84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e88:	60ca      	str	r2, [r1, #12]
 8005e8a:	e7bf      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e8c:	68ca      	ldr	r2, [r1, #12]
 8005e8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e92:	60ca      	str	r2, [r1, #12]
 8005e94:	e7c8      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e96:	68d3      	ldr	r3, [r2, #12]
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	60d3      	str	r3, [r2, #12]
}
 8005e9e:	b002      	add	sp, #8
 8005ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	e706      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40007000 	.word	0x40007000

08005eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005eb8:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005eba:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8005ebc:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ec4:	f7fd fe06 	bl	8003ad4 <HAL_GetTick>
 8005ec8:	44a8      	add	r8, r5
 8005eca:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005ece:	f7fd fe01 	bl	8003ad4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ed2:	4b30      	ldr	r3, [pc, #192]	; (8005f94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ed4:	f8d6 9000 	ldr.w	r9, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ede:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005ee2:	0d1b      	lsrs	r3, r3, #20
 8005ee4:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8005ee8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005eea:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005eec:	464a      	mov	r2, r9
 8005eee:	e001      	b.n	8005ef4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ef0:	1c6b      	adds	r3, r5, #1
 8005ef2:	d10e      	bne.n	8005f12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  while ((hspi->Instance->SR & Fifo) != State)
 8005ef4:	6893      	ldr	r3, [r2, #8]
 8005ef6:	4023      	ands	r3, r4
 8005ef8:	d01d      	beq.n	8005f36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005efa:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8005efe:	d1f7      	bne.n	8005ef0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      tmpreg8 = *ptmpreg8;
 8005f00:	f899 300c 	ldrb.w	r3, [r9, #12]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005f0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8005f0e:	1c6b      	adds	r3, r5, #1
 8005f10:	d0f0      	beq.n	8005ef4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f12:	f7fd fddf 	bl	8003ad4 <HAL_GetTick>
 8005f16:	eba0 0008 	sub.w	r0, r0, r8
 8005f1a:	42b8      	cmp	r0, r7
 8005f1c:	d20f      	bcs.n	8005f3e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f1e:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f20:	6832      	ldr	r2, [r6, #0]
      {
        tmp_timeout = 0U;
 8005f22:	2b00      	cmp	r3, #0
      }
      count--;
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f2a:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f2c:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 8005f2e:	bf08      	it	eq
 8005f30:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8005f32:	4023      	ands	r3, r4
 8005f34:	d1e1      	bne.n	8005efa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
    }
  }

  return HAL_OK;
 8005f36:	4618      	mov	r0, r3
}
 8005f38:	b003      	add	sp, #12
 8005f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f3e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f42:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f44:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f4c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4e:	d014      	beq.n	8005f7a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xca>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f50:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8005f52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005f56:	d007      	beq.n	8005f68 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8005f58:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005f5a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005f5c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005f60:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005f64:	2003      	movs	r0, #3
 8005f66:	e7e7      	b.n	8005f38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e7ee      	b.n	8005f58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f7a:	68b2      	ldr	r2, [r6, #8]
 8005f7c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005f80:	d002      	beq.n	8005f88 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f82:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005f86:	d1e3      	bne.n	8005f50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e7de      	b.n	8005f50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
 8005f92:	bf00      	nop
 8005f94:	20000000 	.word	0x20000000

08005f98 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	4615      	mov	r5, r2
 8005fa0:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fa2:	f7fd fd97 	bl	8003ad4 <HAL_GetTick>
 8005fa6:	4425      	add	r5, r4
 8005fa8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005faa:	f7fd fd93 	bl	8003ad4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fae:	4b25      	ldr	r3, [pc, #148]	; (8006044 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005fb6:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8005fba:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fbc:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fbe:	6832      	ldr	r2, [r6, #0]
 8005fc0:	e001      	b.n	8005fc6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	1c63      	adds	r3, r4, #1
 8005fc4:	d106      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc6:	6893      	ldr	r3, [r2, #8]
 8005fc8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005fcc:	d1f9      	bne.n	8005fc2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
  return HAL_OK;
 8005fce:	4618      	mov	r0, r3
}
 8005fd0:	b003      	add	sp, #12
 8005fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fd4:	f7fd fd7e 	bl	8003ad4 <HAL_GetTick>
 8005fd8:	1bc0      	subs	r0, r0, r7
 8005fda:	42a8      	cmp	r0, r5
 8005fdc:	d208      	bcs.n	8005ff0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 8005fde:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005fe0:	2b00      	cmp	r3, #0
      count--;
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005fe8:	bf08      	it	eq
 8005fea:	2500      	moveq	r5, #0
      count--;
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	e7e6      	b.n	8005fbe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff0:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ffe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	d014      	beq.n	800602c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006002:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8006004:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006008:	d007      	beq.n	800601a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800600a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800600c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800600e:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006012:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006016:	2003      	movs	r0, #3
 8006018:	e7da      	b.n	8005fd0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e7ee      	b.n	800600a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602c:	68b2      	ldr	r2, [r6, #8]
 800602e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006032:	d002      	beq.n	800603a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006034:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006038:	d1e3      	bne.n	8006002 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e7de      	b.n	8006002 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8006044:	20000000 	.word	0x20000000

08006048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800604a:	4613      	mov	r3, r2
{
 800604c:	460d      	mov	r5, r1
 800604e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006050:	460a      	mov	r2, r1
 8006052:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8006056:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006058:	f7ff ff2a 	bl	8005eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800605c:	b970      	cbnz	r0, 800607c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800605e:	4632      	mov	r2, r6
 8006060:	4629      	mov	r1, r5
 8006062:	4620      	mov	r0, r4
 8006064:	f7ff ff98 	bl	8005f98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006068:	b940      	cbnz	r0, 800607c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800606a:	4633      	mov	r3, r6
 800606c:	462a      	mov	r2, r5
 800606e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff ff1c 	bl	8005eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006078:	b900      	cbnz	r0, 800607c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800607a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800607e:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8006082:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006084:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006086:	bd70      	pop	{r4, r5, r6, pc}

08006088 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006088:	2800      	cmp	r0, #0
 800608a:	d077      	beq.n	800617c <HAL_SPI_Init+0xf4>
{
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006090:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006092:	4604      	mov	r4, r0
 8006094:	2e00      	cmp	r6, #0
 8006096:	d058      	beq.n	800614a <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006098:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800609a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800609e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060a2:	2200      	movs	r2, #0
 80060a4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80060a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d059      	beq.n	8006162 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 80060ae:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80060b2:	2302      	movs	r3, #2
 80060b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80060b8:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060ba:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80060be:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80060c2:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c4:	d947      	bls.n	8006156 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060c6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80060ca:	d159      	bne.n	8006180 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060ce:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 80060d4:	68a3      	ldr	r3, [r4, #8]
 80060d6:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060d8:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060dc:	6862      	ldr	r2, [r4, #4]
 80060de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060e2:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80060e6:	431a      	orrs	r2, r3
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	431a      	orrs	r2, r3
 80060f0:	6963      	ldr	r3, [r4, #20]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	f006 0c10 	and.w	ip, r6, #16
 8006102:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006106:	69a6      	ldr	r6, [r4, #24]
 8006108:	69e3      	ldr	r3, [r4, #28]
 800610a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800610e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8006112:	4313      	orrs	r3, r2
 8006114:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8006118:	ea43 0308 	orr.w	r3, r3, r8
 800611c:	433b      	orrs	r3, r7
 800611e:	432b      	orrs	r3, r5
 8006120:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006122:	0c33      	lsrs	r3, r6, #16
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	ea4e 0303 	orr.w	r3, lr, r3
 800612c:	ea43 030c 	orr.w	r3, r3, ip
 8006130:	4303      	orrs	r3, r0
 8006132:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006134:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006136:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800613c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800613e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006140:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006142:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8006146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800614a:	6843      	ldr	r3, [r0, #4]
 800614c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006150:	d0a5      	beq.n	800609e <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006152:	61c6      	str	r6, [r0, #28]
 8006154:	e7a3      	b.n	800609e <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006156:	d00b      	beq.n	8006170 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006158:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800615c:	2500      	movs	r5, #0
 800615e:	62a5      	str	r5, [r4, #40]	; 0x28
 8006160:	e7b8      	b.n	80060d4 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8006162:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006166:	4620      	mov	r0, r4
 8006168:	f7fd fa6a 	bl	8003640 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800616c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800616e:	e79e      	b.n	80060ae <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006172:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006176:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 800617a:	e7ab      	b.n	80060d4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
}
 800617e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006180:	2000      	movs	r0, #0
 8006182:	e7eb      	b.n	800615c <HAL_SPI_Init+0xd4>

08006184 <HAL_SPI_TransmitReceive>:
{
 8006184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006188:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800618a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800618e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8006190:	2801      	cmp	r0, #1
 8006192:	f000 8097 	beq.w	80062c4 <HAL_SPI_TransmitReceive+0x140>
 8006196:	461f      	mov	r7, r3
 8006198:	2301      	movs	r3, #1
 800619a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800619e:	4689      	mov	r9, r1
 80061a0:	4690      	mov	r8, r2
 80061a2:	f7fd fc97 	bl	8003ad4 <HAL_GetTick>
 80061a6:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80061a8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80061ac:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ae:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80061b0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061b2:	d010      	beq.n	80061d6 <HAL_SPI_TransmitReceive+0x52>
 80061b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061b8:	d008      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 80061ba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80061bc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80061be:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80061c0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061c4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80061c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061cc:	68a2      	ldr	r2, [r4, #8]
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	d1f3      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x36>
 80061d2:	2904      	cmp	r1, #4
 80061d4:	d1f1      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061d6:	f1b9 0f00 	cmp.w	r9, #0
 80061da:	d076      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x146>
 80061dc:	f1b8 0f00 	cmp.w	r8, #0
 80061e0:	d073      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x146>
 80061e2:	2f00      	cmp	r7, #0
 80061e4:	d071      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061e6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061ea:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061ec:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061f0:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061f2:	bf1c      	itt	ne
 80061f4:	2205      	movne	r2, #5
 80061f6:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061fa:	2200      	movs	r2, #0
 80061fc:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80061fe:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006202:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8006204:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006208:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 800620c:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800620e:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8006210:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006214:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006218:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800621a:	d858      	bhi.n	80062ce <HAL_SPI_TransmitReceive+0x14a>
 800621c:	2f01      	cmp	r7, #1
 800621e:	f000 80ee 	beq.w	80063fe <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006222:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006226:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006228:	6811      	ldr	r1, [r2, #0]
 800622a:	0649      	lsls	r1, r1, #25
 800622c:	f100 80a9 	bmi.w	8006382 <HAL_SPI_TransmitReceive+0x1fe>
    __HAL_SPI_ENABLE(hspi);
 8006230:	6811      	ldr	r1, [r2, #0]
 8006232:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006236:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80a5 	beq.w	8006388 <HAL_SPI_TransmitReceive+0x204>
 800623e:	2f01      	cmp	r7, #1
 8006240:	f000 80a2 	beq.w	8006388 <HAL_SPI_TransmitReceive+0x204>
        txallowed = 1U;
 8006244:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006246:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	b92b      	cbnz	r3, 8006258 <HAL_SPI_TransmitReceive+0xd4>
 800624c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8086 	beq.w	8006364 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	6893      	ldr	r3, [r2, #8]
 800625c:	0799      	lsls	r1, r3, #30
 800625e:	d505      	bpl.n	800626c <HAL_SPI_TransmitReceive+0xe8>
 8006260:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006262:	b29b      	uxth	r3, r3
 8006264:	b113      	cbz	r3, 800626c <HAL_SPI_TransmitReceive+0xe8>
 8006266:	2f00      	cmp	r7, #0
 8006268:	f040 80ae 	bne.w	80063c8 <HAL_SPI_TransmitReceive+0x244>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800626c:	6893      	ldr	r3, [r2, #8]
 800626e:	f013 0301 	ands.w	r3, r3, #1
 8006272:	d01e      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x12e>
 8006274:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006278:	b289      	uxth	r1, r1
 800627a:	b1d1      	cbz	r1, 80062b2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 800627c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006280:	b289      	uxth	r1, r1
 8006282:	2901      	cmp	r1, #1
 8006284:	f240 8092 	bls.w	80063ac <HAL_SPI_TransmitReceive+0x228>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006288:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800628a:	68d0      	ldr	r0, [r2, #12]
 800628c:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006290:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006292:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006296:	3902      	subs	r1, #2
 8006298:	b289      	uxth	r1, r1
 800629a:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800629e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80062a2:	b289      	uxth	r1, r1
 80062a4:	2901      	cmp	r1, #1
        txallowed = 1U;
 80062a6:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 80062a8:	d803      	bhi.n	80062b2 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062aa:	6853      	ldr	r3, [r2, #4]
 80062ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062b0:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062b2:	f7fd fc0f 	bl	8003ad4 <HAL_GetTick>
 80062b6:	1b80      	subs	r0, r0, r6
 80062b8:	42a8      	cmp	r0, r5
 80062ba:	d373      	bcc.n	80063a4 <HAL_SPI_TransmitReceive+0x220>
 80062bc:	1c6b      	adds	r3, r5, #1
 80062be:	d0c2      	beq.n	8006246 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 80062c0:	2003      	movs	r0, #3
 80062c2:	e77b      	b.n	80061bc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80062c4:	2002      	movs	r0, #2
}
 80062c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80062ca:	2001      	movs	r0, #1
 80062cc:	e776      	b.n	80061bc <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ce:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80062d2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d4:	6811      	ldr	r1, [r2, #0]
 80062d6:	0648      	lsls	r0, r1, #25
 80062d8:	d403      	bmi.n	80062e2 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 80062da:	6811      	ldr	r1, [r2, #0]
 80062dc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80062e0:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d14a      	bne.n	800637c <HAL_SPI_TransmitReceive+0x1f8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062e6:	4649      	mov	r1, r9
 80062e8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80062ec:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80062ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f0:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80062f8:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	b91b      	cbnz	r3, 8006308 <HAL_SPI_TransmitReceive+0x184>
 8006300:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006304:	b29b      	uxth	r3, r3
 8006306:	b36b      	cbz	r3, 8006364 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	6893      	ldr	r3, [r2, #8]
 800630c:	079b      	lsls	r3, r3, #30
 800630e:	d50d      	bpl.n	800632c <HAL_SPI_TransmitReceive+0x1a8>
 8006310:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	b153      	cbz	r3, 800632c <HAL_SPI_TransmitReceive+0x1a8>
 8006316:	b14f      	cbz	r7, 800632c <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800631a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800631e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006320:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006322:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006324:	3b01      	subs	r3, #1
 8006326:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8006328:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800632a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800632c:	6893      	ldr	r3, [r2, #8]
 800632e:	f013 0301 	ands.w	r3, r3, #1
 8006332:	d00f      	beq.n	8006354 <HAL_SPI_TransmitReceive+0x1d0>
 8006334:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006338:	b289      	uxth	r1, r1
 800633a:	b159      	cbz	r1, 8006354 <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 800633c:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800633e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006340:	68d2      	ldr	r2, [r2, #12]
 8006342:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006346:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006348:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800634c:	3b01      	subs	r3, #1
 800634e:	b29b      	uxth	r3, r3
 8006350:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006354:	f7fd fbbe 	bl	8003ad4 <HAL_GetTick>
 8006358:	1b80      	subs	r0, r0, r6
 800635a:	42a8      	cmp	r0, r5
 800635c:	d3cd      	bcc.n	80062fa <HAL_SPI_TransmitReceive+0x176>
 800635e:	1c68      	adds	r0, r5, #1
 8006360:	d0cb      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x176>
 8006362:	e7ad      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x13c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006364:	4632      	mov	r2, r6
 8006366:	4629      	mov	r1, r5
 8006368:	4620      	mov	r0, r4
 800636a:	f7ff fe6d 	bl	8006048 <SPI_EndRxTxTransaction>
 800636e:	2800      	cmp	r0, #0
 8006370:	f43f af24 	beq.w	80061bc <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006374:	2320      	movs	r3, #32
 8006376:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006378:	2001      	movs	r0, #1
 800637a:	e71f      	b.n	80061bc <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637c:	2f01      	cmp	r7, #1
 800637e:	d1bb      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x174>
 8006380:	e7b1      	b.n	80062e6 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006382:	2b00      	cmp	r3, #0
 8006384:	f47f af5e 	bne.w	8006244 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8006388:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d93e      	bls.n	800640e <HAL_SPI_TransmitReceive+0x28a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006390:	4649      	mov	r1, r9
 8006392:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006396:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8006398:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800639c:	3b02      	subs	r3, #2
 800639e:	b29b      	uxth	r3, r3
 80063a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80063a2:	e74f      	b.n	8006244 <HAL_SPI_TransmitReceive+0xc0>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063a4:	2d00      	cmp	r5, #0
 80063a6:	f47f af4e 	bne.w	8006246 <HAL_SPI_TransmitReceive+0xc2>
 80063aa:	e789      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x13c>
        txallowed = 1U;
 80063ac:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063b0:	7b12      	ldrb	r2, [r2, #12]
 80063b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063b6:	3301      	adds	r3, #1
 80063b8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80063ba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80063c6:	e774      	b.n	80062b2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 80063c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80063d0:	d909      	bls.n	80063e6 <HAL_SPI_TransmitReceive+0x262>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80063d6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80063dc:	3b02      	subs	r3, #2
 80063de:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80063e0:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 80063e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80063e4:	e742      	b.n	800626c <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80063ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80063ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80063ee:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80063f0:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80063f2:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80063f4:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80063f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f8:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80063fa:	2700      	movs	r7, #0
 80063fc:	e736      	b.n	800626c <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063fe:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8006402:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006404:	6811      	ldr	r1, [r2, #0]
 8006406:	0649      	lsls	r1, r1, #25
 8006408:	f57f af12 	bpl.w	8006230 <HAL_SPI_TransmitReceive+0xac>
 800640c:	e7bc      	b.n	8006388 <HAL_SPI_TransmitReceive+0x204>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800640e:	f899 3000 	ldrb.w	r3, [r9]
 8006412:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8006414:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8006416:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006418:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800641a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800641c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800641e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006420:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006422:	e70f      	b.n	8006244 <HAL_SPI_TransmitReceive+0xc0>

08006424 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006424:	6a03      	ldr	r3, [r0, #32]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642c:	6a03      	ldr	r3, [r0, #32]
{
 800642e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006432:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006436:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800643a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800643e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006440:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006442:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006446:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006448:	4d13      	ldr	r5, [pc, #76]	; (8006498 <TIM_OC1_SetConfig+0x74>)
 800644a:	42a8      	cmp	r0, r5
 800644c:	d00f      	beq.n	800646e <TIM_OC1_SetConfig+0x4a>
 800644e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006452:	42a8      	cmp	r0, r5
 8006454:	d00b      	beq.n	800646e <TIM_OC1_SetConfig+0x4a>
 8006456:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800645a:	42a8      	cmp	r0, r5
 800645c:	d007      	beq.n	800646e <TIM_OC1_SetConfig+0x4a>
 800645e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006462:	42a8      	cmp	r0, r5
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0x4a>
 8006466:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800646a:	42a8      	cmp	r0, r5
 800646c:	d10d      	bne.n	800648a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800646e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006470:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006474:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006476:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800647a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800647e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006482:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006486:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800648a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800648c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800648e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006490:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006492:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006494:	6203      	str	r3, [r0, #32]
}
 8006496:	4770      	bx	lr
 8006498:	40012c00 	.word	0x40012c00

0800649c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800649c:	6a03      	ldr	r3, [r0, #32]
 800649e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a4:	6a03      	ldr	r3, [r0, #32]
{
 80064a6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80064b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064c2:	4d15      	ldr	r5, [pc, #84]	; (8006518 <TIM_OC3_SetConfig+0x7c>)
 80064c4:	42a8      	cmp	r0, r5
 80064c6:	d010      	beq.n	80064ea <TIM_OC3_SetConfig+0x4e>
 80064c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80064cc:	42a8      	cmp	r0, r5
 80064ce:	d00c      	beq.n	80064ea <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80064d4:	42a8      	cmp	r0, r5
 80064d6:	d00f      	beq.n	80064f8 <TIM_OC3_SetConfig+0x5c>
 80064d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064dc:	42a8      	cmp	r0, r5
 80064de:	d00b      	beq.n	80064f8 <TIM_OC3_SetConfig+0x5c>
 80064e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064e4:	42a8      	cmp	r0, r5
 80064e6:	d10f      	bne.n	8006508 <TIM_OC3_SetConfig+0x6c>
 80064e8:	e006      	b.n	80064f8 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064f8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064fc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006500:	ea46 0c05 	orr.w	ip, r6, r5
 8006504:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006508:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800650a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800650c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800650e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006510:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006512:	6203      	str	r3, [r0, #32]
}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40012c00 	.word	0x40012c00

0800651c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800651c:	6a03      	ldr	r3, [r0, #32]
 800651e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006522:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006524:	6a03      	ldr	r3, [r0, #32]
{
 8006526:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800652e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006532:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006536:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800653a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800653c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006540:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006544:	4d14      	ldr	r5, [pc, #80]	; (8006598 <TIM_OC4_SetConfig+0x7c>)
 8006546:	42a8      	cmp	r0, r5
 8006548:	d010      	beq.n	800656c <TIM_OC4_SetConfig+0x50>
 800654a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800654e:	42a8      	cmp	r0, r5
 8006550:	d00c      	beq.n	800656c <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006552:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006556:	42a8      	cmp	r0, r5
 8006558:	d00f      	beq.n	800657a <TIM_OC4_SetConfig+0x5e>
 800655a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800655e:	42a8      	cmp	r0, r5
 8006560:	d00b      	beq.n	800657a <TIM_OC4_SetConfig+0x5e>
 8006562:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006566:	42a8      	cmp	r0, r5
 8006568:	d10f      	bne.n	800658a <TIM_OC4_SetConfig+0x6e>
 800656a:	e006      	b.n	800657a <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800656c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800656e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006572:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800657a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800657e:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006582:	ea46 0c05 	orr.w	ip, r6, r5
 8006586:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800658a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800658c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800658e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006590:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006592:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006594:	6203      	str	r3, [r0, #32]
}
 8006596:	4770      	bx	lr
 8006598:	40012c00 	.word	0x40012c00

0800659c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800659c:	6a03      	ldr	r3, [r0, #32]
 800659e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a4:	6a03      	ldr	r3, [r0, #32]
{
 80065a6:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065aa:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80065b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80065ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065be:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	4d0f      	ldr	r5, [pc, #60]	; (8006600 <TIM_OC5_SetConfig+0x64>)
 80065c4:	42a8      	cmp	r0, r5
 80065c6:	d00f      	beq.n	80065e8 <TIM_OC5_SetConfig+0x4c>
 80065c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80065cc:	42a8      	cmp	r0, r5
 80065ce:	d00b      	beq.n	80065e8 <TIM_OC5_SetConfig+0x4c>
 80065d0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80065d4:	42a8      	cmp	r0, r5
 80065d6:	d007      	beq.n	80065e8 <TIM_OC5_SetConfig+0x4c>
 80065d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80065dc:	42a8      	cmp	r0, r5
 80065de:	d003      	beq.n	80065e8 <TIM_OC5_SetConfig+0x4c>
 80065e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80065e4:	42a8      	cmp	r0, r5
 80065e6:	d104      	bne.n	80065f2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065e8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ea:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065ee:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80065f6:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80065f8:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 80065fa:	6481      	str	r1, [r0, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80065fc:	6203      	str	r3, [r0, #32]
}
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00

08006604 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006604:	6a03      	ldr	r3, [r0, #32]
 8006606:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800660a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660c:	6a03      	ldr	r3, [r0, #32]
{
 800660e:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006612:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006614:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006616:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800661a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800661e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006622:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006624:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006628:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	4d0f      	ldr	r5, [pc, #60]	; (800666c <TIM_OC6_SetConfig+0x68>)
 800662e:	42a8      	cmp	r0, r5
 8006630:	d00f      	beq.n	8006652 <TIM_OC6_SetConfig+0x4e>
 8006632:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006636:	42a8      	cmp	r0, r5
 8006638:	d00b      	beq.n	8006652 <TIM_OC6_SetConfig+0x4e>
 800663a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800663e:	42a8      	cmp	r0, r5
 8006640:	d007      	beq.n	8006652 <TIM_OC6_SetConfig+0x4e>
 8006642:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006646:	42a8      	cmp	r0, r5
 8006648:	d003      	beq.n	8006652 <TIM_OC6_SetConfig+0x4e>
 800664a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800664e:	42a8      	cmp	r0, r5
 8006650:	d104      	bne.n	800665c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006652:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006654:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006658:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800665c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800665e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006660:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006662:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 8006664:	64c1      	str	r1, [r0, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006666:	6203      	str	r3, [r0, #32]
}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40012c00 	.word	0x40012c00

08006670 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006670:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006674:	2b01      	cmp	r3, #1
 8006676:	d11f      	bne.n	80066b8 <HAL_TIM_Base_Start+0x48>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	6803      	ldr	r3, [r0, #0]
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <HAL_TIM_Base_Start+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	d01a      	beq.n	80066bc <HAL_TIM_Base_Start+0x4c>
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d017      	beq.n	80066bc <HAL_TIM_Base_Start+0x4c>
 800668c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <HAL_TIM_Base_Start+0x4c>
 8006694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006698:	4293      	cmp	r3, r2
 800669a:	d00f      	beq.n	80066bc <HAL_TIM_Base_Start+0x4c>
 800669c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <HAL_TIM_Base_Start+0x4c>
 80066a4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <HAL_TIM_Base_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80066b2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	4770      	bx	lr
    return HAL_ERROR;
 80066b8:	2001      	movs	r0, #1
 80066ba:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066bc:	6899      	ldr	r1, [r3, #8]
 80066be:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <HAL_TIM_Base_Start+0x64>)
 80066c0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c2:	2a06      	cmp	r2, #6
 80066c4:	d002      	beq.n	80066cc <HAL_TIM_Base_Start+0x5c>
 80066c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80066ca:	d1ef      	bne.n	80066ac <HAL_TIM_Base_Start+0x3c>
  return HAL_OK;
 80066cc:	2000      	movs	r0, #0
}
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	00010007 	.word	0x00010007

080066d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80066d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d122      	bne.n	8006726 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e2:	4917      	ldr	r1, [pc, #92]	; (8006740 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	2202      	movs	r2, #2
 80066e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066ea:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ec:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f4:	d019      	beq.n	800672a <HAL_TIM_Base_Start_IT+0x52>
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fa:	d016      	beq.n	800672a <HAL_TIM_Base_Start_IT+0x52>
 80066fc:	4a11      	ldr	r2, [pc, #68]	; (8006744 <HAL_TIM_Base_Start_IT+0x6c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <HAL_TIM_Base_Start_IT+0x52>
 8006702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006706:	4293      	cmp	r3, r2
 8006708:	d00f      	beq.n	800672a <HAL_TIM_Base_Start_IT+0x52>
 800670a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <HAL_TIM_Base_Start_IT+0x52>
 8006712:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8006720:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	4770      	bx	lr
    return HAL_ERROR;
 8006726:	2001      	movs	r0, #1
 8006728:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800672a:	6899      	ldr	r1, [r3, #8]
 800672c:	4a06      	ldr	r2, [pc, #24]	; (8006748 <HAL_TIM_Base_Start_IT+0x70>)
 800672e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006730:	2a06      	cmp	r2, #6
 8006732:	d002      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x62>
 8006734:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006738:	d1ef      	bne.n	800671a <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 800673a:	2000      	movs	r0, #0
}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40000400 	.word	0x40000400
 8006748:	00010007 	.word	0x00010007

0800674c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800674c:	2900      	cmp	r1, #0
 800674e:	d14a      	bne.n	80067e6 <HAL_TIM_OC_Start+0x9a>
 8006750:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006754:	2b01      	cmp	r3, #1
 8006756:	d150      	bne.n	80067fa <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006758:	2302      	movs	r3, #2
 800675a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800675e:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006760:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006762:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006764:	f001 011f 	and.w	r1, r1, #31
 8006768:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800676c:	ea20 0001 	bic.w	r0, r0, r1
 8006770:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006772:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006774:	4a3b      	ldr	r2, [pc, #236]	; (8006864 <HAL_TIM_OC_Start+0x118>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006776:	4301      	orrs	r1, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006778:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800677a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800677c:	d051      	beq.n	8006822 <HAL_TIM_OC_Start+0xd6>
 800677e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <HAL_TIM_OC_Start+0x52>
 8006786:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <HAL_TIM_OC_Start+0x52>
 800678e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <HAL_TIM_OC_Start+0x52>
 8006796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800679a:	4293      	cmp	r3, r2
 800679c:	d103      	bne.n	80067a6 <HAL_TIM_OC_Start+0x5a>
    __HAL_TIM_MOE_ENABLE(htim);
 800679e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d00e      	beq.n	80067ca <HAL_TIM_OC_Start+0x7e>
 80067ac:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <HAL_TIM_OC_Start+0x11c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <HAL_TIM_OC_Start+0x7e>
 80067b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <HAL_TIM_OC_Start+0x7e>
 80067ba:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_OC_Start+0x7e>
 80067c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d107      	bne.n	80067da <HAL_TIM_OC_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ca:	6899      	ldr	r1, [r3, #8]
 80067cc:	4a27      	ldr	r2, [pc, #156]	; (800686c <HAL_TIM_OC_Start+0x120>)
 80067ce:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d0:	2a06      	cmp	r2, #6
 80067d2:	d014      	beq.n	80067fe <HAL_TIM_OC_Start+0xb2>
 80067d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80067d8:	d011      	beq.n	80067fe <HAL_TIM_OC_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80067e0:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067e6:	2904      	cmp	r1, #4
 80067e8:	d020      	beq.n	800682c <HAL_TIM_OC_Start+0xe0>
 80067ea:	2908      	cmp	r1, #8
 80067ec:	d026      	beq.n	800683c <HAL_TIM_OC_Start+0xf0>
 80067ee:	290c      	cmp	r1, #12
 80067f0:	d107      	bne.n	8006802 <HAL_TIM_OC_Start+0xb6>
 80067f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d028      	beq.n	800684c <HAL_TIM_OC_Start+0x100>
    return HAL_ERROR;
 80067fa:	2001      	movs	r0, #1
 80067fc:	4770      	bx	lr
  return HAL_OK;
 80067fe:	2000      	movs	r0, #0
}
 8006800:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006802:	2910      	cmp	r1, #16
 8006804:	d026      	beq.n	8006854 <HAL_TIM_OC_Start+0x108>
 8006806:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800680a:	2b01      	cmp	r3, #1
 800680c:	d1f5      	bne.n	80067fa <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800680e:	2908      	cmp	r1, #8
 8006810:	d018      	beq.n	8006844 <HAL_TIM_OC_Start+0xf8>
 8006812:	290c      	cmp	r1, #12
 8006814:	d01a      	beq.n	800684c <HAL_TIM_OC_Start+0x100>
 8006816:	2910      	cmp	r1, #16
 8006818:	d020      	beq.n	800685c <HAL_TIM_OC_Start+0x110>
 800681a:	2302      	movs	r3, #2
 800681c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8006820:	e79d      	b.n	800675e <HAL_TIM_OC_Start+0x12>
    __HAL_TIM_MOE_ENABLE(htim);
 8006822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006828:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	e7ce      	b.n	80067ca <HAL_TIM_OC_Start+0x7e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800682c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006830:	2b01      	cmp	r3, #1
 8006832:	d1e2      	bne.n	80067fa <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006834:	2302      	movs	r3, #2
 8006836:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800683a:	e790      	b.n	800675e <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006840:	2b01      	cmp	r3, #1
 8006842:	d1da      	bne.n	80067fa <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006844:	2302      	movs	r3, #2
 8006846:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800684a:	e788      	b.n	800675e <HAL_TIM_OC_Start+0x12>
 800684c:	2302      	movs	r3, #2
 800684e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006852:	e784      	b.n	800675e <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006854:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006858:	2b01      	cmp	r3, #1
 800685a:	d1ce      	bne.n	80067fa <HAL_TIM_OC_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800685c:	2302      	movs	r3, #2
 800685e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006862:	e77c      	b.n	800675e <HAL_TIM_OC_Start+0x12>
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40000400 	.word	0x40000400
 800686c:	00010007 	.word	0x00010007

08006870 <HAL_TIM_PWM_Start>:
 8006870:	f7ff bf6c 	b.w	800674c <HAL_TIM_OC_Start>

08006874 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	f000 8089 	beq.w	8006990 <HAL_TIM_ConfigClockSource+0x11c>
{
 800687e:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006882:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006888:	2201      	movs	r2, #1
 800688a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800688e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	4b5f      	ldr	r3, [pc, #380]	; (8006a10 <HAL_TIM_ConfigClockSource+0x19c>)
 8006892:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006894:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006896:	680b      	ldr	r3, [r1, #0]
 8006898:	2b70      	cmp	r3, #112	; 0x70
 800689a:	f000 80a8 	beq.w	80069ee <HAL_TIM_ConfigClockSource+0x17a>
 800689e:	d828      	bhi.n	80068f2 <HAL_TIM_ConfigClockSource+0x7e>
 80068a0:	2b50      	cmp	r3, #80	; 0x50
 80068a2:	d078      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x122>
 80068a4:	d93e      	bls.n	8006924 <HAL_TIM_ConfigClockSource+0xb0>
 80068a6:	2b60      	cmp	r3, #96	; 0x60
 80068a8:	d11a      	bne.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068aa:	68cb      	ldr	r3, [r1, #12]
 80068ac:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ae:	6a21      	ldr	r1, [r4, #32]
 80068b0:	f021 0110 	bic.w	r1, r1, #16
 80068b4:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b6:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068bc:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 80068c0:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80068c2:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80068cc:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80068ce:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80068d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80068de:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80068e2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80068e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80068ec:	bc70      	pop	{r4, r5, r6}
 80068ee:	4610      	mov	r0, r2
 80068f0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	d069      	beq.n	80069cc <HAL_TIM_ConfigClockSource+0x158>
 80068f8:	d938      	bls.n	800696c <HAL_TIM_ConfigClockSource+0xf8>
 80068fa:	4946      	ldr	r1, [pc, #280]	; (8006a14 <HAL_TIM_ConfigClockSource+0x1a0>)
 80068fc:	428b      	cmp	r3, r1
 80068fe:	d006      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 8006900:	d92d      	bls.n	800695e <HAL_TIM_ConfigClockSource+0xea>
 8006902:	4945      	ldr	r1, [pc, #276]	; (8006a18 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006904:	428b      	cmp	r3, r1
 8006906:	d002      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 8006908:	3130      	adds	r1, #48	; 0x30
 800690a:	428b      	cmp	r3, r1
 800690c:	d1e8      	bne.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 800690e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006910:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006914:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006918:	430b      	orrs	r3, r1
 800691a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 800691e:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8006920:	60a3      	str	r3, [r4, #8]
}
 8006922:	e7dd      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d126      	bne.n	8006976 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006928:	684a      	ldr	r2, [r1, #4]
 800692a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800692c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692e:	6a25      	ldr	r5, [r4, #32]
 8006930:	f025 0501 	bic.w	r5, r5, #1
 8006934:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006936:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006938:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800693c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006940:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006942:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006946:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006948:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800694a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800694c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006954:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 800695a:	60a3      	str	r3, [r4, #8]
}
 800695c:	e7c0      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800695e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006962:	d0d4      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 8006964:	3910      	subs	r1, #16
 8006966:	428b      	cmp	r3, r1
 8006968:	d0d1      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 800696a:	e7b9      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800696c:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8006970:	bf18      	it	ne
 8006972:	2201      	movne	r2, #1
 8006974:	e7b4      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006976:	d8b3      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
 8006978:	2b20      	cmp	r3, #32
 800697a:	d0c8      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 800697c:	d903      	bls.n	8006986 <HAL_TIM_ConfigClockSource+0x112>
 800697e:	2b30      	cmp	r3, #48	; 0x30
 8006980:	d0c5      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 8006982:	2201      	movs	r2, #1
 8006984:	e7ac      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
 8006986:	f033 0210 	bics.w	r2, r3, #16
 800698a:	d0c0      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x9a>
 800698c:	2201      	movs	r2, #1
 800698e:	e7a7      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 8006990:	2202      	movs	r2, #2
}
 8006992:	4610      	mov	r0, r2
 8006994:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006996:	684a      	ldr	r2, [r1, #4]
 8006998:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800699a:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699c:	6a25      	ldr	r5, [r4, #32]
 800699e:	f025 0501 	bic.w	r5, r5, #1
 80069a2:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a4:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80069ae:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80069b4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80069b6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80069b8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069c2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80069c8:	60a3      	str	r3, [r4, #8]
}
 80069ca:	e789      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069cc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80069d0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d2:	68c9      	ldr	r1, [r1, #12]
 80069d4:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069de:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80069e0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069ea:	60a3      	str	r3, [r4, #8]
      break;
 80069ec:	e778      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ee:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80069f2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f4:	68c9      	ldr	r1, [r1, #12]
 80069f6:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006a00:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8006a02:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006a04:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8006a0a:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 8006a0c:	60a3      	str	r3, [r4, #8]
      break;
 8006a0e:	e767      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x6c>
 8006a10:	ffce0088 	.word	0xffce0088
 8006a14:	00100030 	.word	0x00100030
 8006a18:	00100040 	.word	0x00100040

08006a1c <HAL_TIM_OC_DelayElapsedCallback>:
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <HAL_TIM_IC_CaptureCallback>:
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop

08006a24 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop

08006a28 <HAL_TIM_TriggerCallback>:
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop

08006a2c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a2c:	6803      	ldr	r3, [r0, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	0791      	lsls	r1, r2, #30
{
 8006a32:	b510      	push	{r4, lr}
 8006a34:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a36:	d503      	bpl.n	8006a40 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	0792      	lsls	r2, r2, #30
 8006a3c:	f100 808a 	bmi.w	8006b54 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	0752      	lsls	r2, r2, #29
 8006a44:	d502      	bpl.n	8006a4c <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	0750      	lsls	r0, r2, #29
 8006a4a:	d470      	bmi.n	8006b2e <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	0711      	lsls	r1, r2, #28
 8006a50:	d502      	bpl.n	8006a58 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	0712      	lsls	r2, r2, #28
 8006a56:	d458      	bmi.n	8006b0a <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	06d1      	lsls	r1, r2, #27
 8006a5c:	d502      	bpl.n	8006a64 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	06d2      	lsls	r2, r2, #27
 8006a62:	d43e      	bmi.n	8006ae2 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	07d0      	lsls	r0, r2, #31
 8006a68:	d503      	bpl.n	8006a72 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	07d1      	lsls	r1, r2, #31
 8006a6e:	f100 808a 	bmi.w	8006b86 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	0612      	lsls	r2, r2, #24
 8006a76:	d503      	bpl.n	8006a80 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	0610      	lsls	r0, r2, #24
 8006a7c:	f100 808b 	bmi.w	8006b96 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	05d1      	lsls	r1, r2, #23
 8006a84:	d503      	bpl.n	8006a8e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	0612      	lsls	r2, r2, #24
 8006a8a:	f100 808c 	bmi.w	8006ba6 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	0650      	lsls	r0, r2, #25
 8006a92:	d503      	bpl.n	8006a9c <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	0651      	lsls	r1, r2, #25
 8006a98:	f100 808d 	bmi.w	8006bb6 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	0692      	lsls	r2, r2, #26
 8006aa0:	d503      	bpl.n	8006aaa <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	0690      	lsls	r0, r2, #26
 8006aa6:	f100 808e 	bmi.w	8006bc6 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	02d1      	lsls	r1, r2, #11
 8006aae:	d503      	bpl.n	8006ab8 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	02d2      	lsls	r2, r2, #11
 8006ab4:	f100 808f 	bmi.w	8006bd6 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	0290      	lsls	r0, r2, #10
 8006abc:	d503      	bpl.n	8006ac6 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	0291      	lsls	r1, r2, #10
 8006ac2:	f100 8090 	bmi.w	8006be6 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	0252      	lsls	r2, r2, #9
 8006aca:	d503      	bpl.n	8006ad4 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	0250      	lsls	r0, r2, #9
 8006ad0:	f100 8091 	bmi.w	8006bf6 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	0211      	lsls	r1, r2, #8
 8006ad8:	d502      	bpl.n	8006ae0 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	0212      	lsls	r2, r2, #8
 8006ade:	d44a      	bmi.n	8006b76 <HAL_TIM_IRQHandler+0x14a>
}
 8006ae0:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ae2:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae6:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ae8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af4:	f040 8090 	bne.w	8006c18 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af8:	f7ff ff90 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7ff ff91 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b04:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	7722      	strb	r2, [r4, #28]
 8006b08:	e7ac      	b.n	8006a64 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b0a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b0e:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b10:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b12:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006b18:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b1a:	d17a      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1c:	f7ff ff7e 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7ff ff7f 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b28:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	7722      	strb	r2, [r4, #28]
 8006b2c:	e794      	b.n	8006a58 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b2e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b32:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b34:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b36:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b40:	d164      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b42:	f7ff ff6b 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7ff ff6c 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b4e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b50:	7722      	strb	r2, [r4, #28]
 8006b52:	e77b      	b.n	8006a4c <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b54:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b58:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b5a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b5c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	0799      	lsls	r1, r3, #30
 8006b62:	d150      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b64:	f7ff ff5a 	bl	8006a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff ff5b 	bl	8006a24 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b70:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	7722      	strb	r2, [r4, #28]
 8006b74:	e764      	b.n	8006a40 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b7a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b7c:	611a      	str	r2, [r3, #16]
}
 8006b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b82:	f000 ba8d 	b.w	80070a0 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b86:	f06f 0201 	mvn.w	r2, #1
 8006b8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7fa fa17 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	e76d      	b.n	8006a72 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fa75 	bl	800708c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	e76c      	b.n	8006a80 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ba6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006baa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fa6f 	bl	8007090 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	e76b      	b.n	8006a8e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7ff ff33 	bl	8006a28 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	e76a      	b.n	8006a9c <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bc6:	f06f 0220 	mvn.w	r2, #32
 8006bca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fa5b 	bl	8007088 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	e769      	b.n	8006aaa <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006bd6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006bda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fa59 	bl	8007094 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	e768      	b.n	8006ab8 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006be6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006bea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 fa53 	bl	8007098 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	e767      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006bf6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bfa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fa4d 	bl	800709c <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	e766      	b.n	8006ad4 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006c06:	f7ff ff0b 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e7b0      	b.n	8006b6e <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0c:	f7ff ff08 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006c10:	e79c      	b.n	8006b4c <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	f7ff ff05 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006c16:	e786      	b.n	8006b26 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c18:	f7ff ff02 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006c1c:	e771      	b.n	8006b02 <HAL_TIM_IRQHandler+0xd6>
 8006c1e:	bf00      	nop

08006c20 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c20:	4a32      	ldr	r2, [pc, #200]	; (8006cec <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8006c22:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c24:	4290      	cmp	r0, r2
{
 8006c26:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c28:	d039      	beq.n	8006c9e <TIM_Base_SetConfig+0x7e>
 8006c2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006c2e:	d021      	beq.n	8006c74 <TIM_Base_SetConfig+0x54>
 8006c30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006c34:	4290      	cmp	r0, r2
 8006c36:	d01d      	beq.n	8006c74 <TIM_Base_SetConfig+0x54>
 8006c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c3c:	4290      	cmp	r0, r2
 8006c3e:	d019      	beq.n	8006c74 <TIM_Base_SetConfig+0x54>
 8006c40:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006c44:	4290      	cmp	r0, r2
 8006c46:	d041      	beq.n	8006ccc <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c48:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006c4c:	4290      	cmp	r0, r2
 8006c4e:	d047      	beq.n	8006ce0 <TIM_Base_SetConfig+0xc0>
 8006c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c54:	4290      	cmp	r0, r2
 8006c56:	d043      	beq.n	8006ce0 <TIM_Base_SetConfig+0xc0>
 8006c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c5c:	4290      	cmp	r0, r2
 8006c5e:	d03f      	beq.n	8006ce0 <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c60:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c62:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8006c64:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006c6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c6e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c70:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c72:	e010      	b.n	8006c96 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8006c74:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c76:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c7c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c82:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c84:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c8a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c8c:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006c8e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8006c90:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c92:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c94:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006c96:	2301      	movs	r3, #1
}
 8006c98:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006c9a:	6143      	str	r3, [r0, #20]
}
 8006c9c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006c9e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ca6:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cae:	694a      	ldr	r2, [r1, #20]
 8006cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006cb6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	688b      	ldr	r3, [r1, #8]
 8006cba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cbc:	680b      	ldr	r3, [r1, #0]
 8006cbe:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc0:	690b      	ldr	r3, [r1, #16]
 8006cc2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006cc8:	6143      	str	r3, [r0, #20]
}
 8006cca:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006ccc:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cd4:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cda:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cdc:	694a      	ldr	r2, [r1, #20]
 8006cde:	e7e7      	b.n	8006cb0 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce0:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ce2:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce8:	4323      	orrs	r3, r4
 8006cea:	e7e1      	b.n	8006cb0 <TIM_Base_SetConfig+0x90>
 8006cec:	40012c00 	.word	0x40012c00

08006cf0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006cf0:	b370      	cbz	r0, 8006d50 <HAL_TIM_Base_Init+0x60>
{
 8006cf2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006cfe:	b313      	cbz	r3, 8006d46 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d00:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006d02:	2302      	movs	r3, #2
 8006d04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d08:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d0c:	f7ff ff88 	bl	8006c20 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006d1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006d26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d36:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006d3a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006d3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006d42:	2000      	movs	r0, #0
}
 8006d44:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006d46:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006d4a:	f7fc fcb7 	bl	80036bc <HAL_TIM_Base_MspInit>
 8006d4e:	e7d7      	b.n	8006d00 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8006d50:	2001      	movs	r0, #1
}
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006d54:	b370      	cbz	r0, 8006db4 <HAL_TIM_PWM_Init+0x60>
{
 8006d56:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d62:	b313      	cbz	r3, 8006daa <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d64:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006d66:	2302      	movs	r3, #2
 8006d68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d70:	f7ff ff56 	bl	8006c20 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006d82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006d9e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006da6:	2000      	movs	r0, #0
}
 8006da8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006daa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006dae:	f7fc fcd3 	bl	8003758 <HAL_TIM_PWM_MspInit>
 8006db2:	e7d7      	b.n	8006d64 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8006db4:	2001      	movs	r0, #1
}
 8006db6:	4770      	bx	lr

08006db8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db8:	6a03      	ldr	r3, [r0, #32]
 8006dba:	f023 0310 	bic.w	r3, r3, #16
 8006dbe:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006dc0:	6a03      	ldr	r3, [r0, #32]
{
 8006dc2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006dc4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006dc6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006dce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006dd8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ddc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006de0:	4d14      	ldr	r5, [pc, #80]	; (8006e34 <TIM_OC2_SetConfig+0x7c>)
 8006de2:	42a8      	cmp	r0, r5
 8006de4:	d010      	beq.n	8006e08 <TIM_OC2_SetConfig+0x50>
 8006de6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006dea:	42a8      	cmp	r0, r5
 8006dec:	d00c      	beq.n	8006e08 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dee:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006df2:	42a8      	cmp	r0, r5
 8006df4:	d00f      	beq.n	8006e16 <TIM_OC2_SetConfig+0x5e>
 8006df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dfa:	42a8      	cmp	r0, r5
 8006dfc:	d00b      	beq.n	8006e16 <TIM_OC2_SetConfig+0x5e>
 8006dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006e02:	42a8      	cmp	r0, r5
 8006e04:	d10f      	bne.n	8006e26 <TIM_OC2_SetConfig+0x6e>
 8006e06:	e006      	b.n	8006e16 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e08:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e16:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e1a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e1e:	ea46 0c05 	orr.w	ip, r6, r5
 8006e22:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006e26:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006e28:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006e2a:	6182      	str	r2, [r0, #24]
}
 8006e2c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006e2e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006e30:	6203      	str	r3, [r0, #32]
}
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00

08006e38 <HAL_TIM_PWM_ConfigChannel>:
{
 8006e38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006e3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	f000 8088 	beq.w	8006f54 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8006e44:	2301      	movs	r3, #1
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006e4e:	2a14      	cmp	r2, #20
 8006e50:	d80c      	bhi.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e52:	e8df f002 	tbb	[pc, r2]
 8006e56:	0b23      	.short	0x0b23
 8006e58:	0b350b0b 	.word	0x0b350b0b
 8006e5c:	0b480b0b 	.word	0x0b480b0b
 8006e60:	0b5a0b0b 	.word	0x0b5a0b0b
 8006e64:	0b6d0b0b 	.word	0x0b6d0b0b
 8006e68:	0b0b      	.short	0x0b0b
 8006e6a:	10          	.byte	0x10
 8006e6b:	00          	.byte	0x00
 8006e6c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006e74:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e76:	6800      	ldr	r0, [r0, #0]
 8006e78:	f7ff fbc4 	bl	8006604 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e7c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e7e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e82:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006e86:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e8a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006e8e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e92:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8006e98:	2000      	movs	r0, #0
      break;
 8006e9a:	e7e8      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f7ff fac1 	bl	8006424 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ea4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea6:	6999      	ldr	r1, [r3, #24]
 8006ea8:	f041 0108 	orr.w	r1, r1, #8
 8006eac:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eae:	6999      	ldr	r1, [r3, #24]
 8006eb0:	f021 0104 	bic.w	r1, r1, #4
 8006eb4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	4302      	orrs	r2, r0
 8006eba:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006ebc:	2000      	movs	r0, #0
      break;
 8006ebe:	e7d6      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec0:	6800      	ldr	r0, [r0, #0]
 8006ec2:	f7ff ff79 	bl	8006db8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ec6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ec8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eca:	6999      	ldr	r1, [r3, #24]
 8006ecc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006ed0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ed2:	6999      	ldr	r1, [r3, #24]
 8006ed4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006ed8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006ee0:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee2:	2000      	movs	r0, #0
      break;
 8006ee4:	e7c3      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ee6:	6800      	ldr	r0, [r0, #0]
 8006ee8:	f7ff fad8 	bl	800649c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eee:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ef0:	69d9      	ldr	r1, [r3, #28]
 8006ef2:	f041 0108 	orr.w	r1, r1, #8
 8006ef6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ef8:	69d9      	ldr	r1, [r3, #28]
 8006efa:	f021 0104 	bic.w	r1, r1, #4
 8006efe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f00:	69da      	ldr	r2, [r3, #28]
 8006f02:	4302      	orrs	r2, r0
 8006f04:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006f06:	2000      	movs	r0, #0
      break;
 8006f08:	e7b1      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	f7ff fb06 	bl	800651c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f10:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f12:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f14:	69d9      	ldr	r1, [r3, #28]
 8006f16:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006f1a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f1c:	69d9      	ldr	r1, [r3, #28]
 8006f1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006f22:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006f2a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	2000      	movs	r0, #0
      break;
 8006f2e:	e79e      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f30:	6800      	ldr	r0, [r0, #0]
 8006f32:	f7ff fb33 	bl	800659c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f36:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f38:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f3a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f3c:	f041 0108 	orr.w	r1, r1, #8
 8006f40:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f42:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f44:	f021 0104 	bic.w	r1, r1, #4
 8006f48:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f4c:	4302      	orrs	r2, r0
 8006f4e:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8006f50:	2000      	movs	r0, #0
      break;
 8006f52:	e78c      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8006f54:	2002      	movs	r0, #2
}
 8006f56:	bd38      	pop	{r3, r4, r5, pc}

08006f58 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d03e      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006f60:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f62:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f64:	4d1f      	ldr	r5, [pc, #124]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006f66:	2302      	movs	r3, #2
 8006f68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f6c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006f6e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006f70:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f72:	d028      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006f74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f78:	42aa      	cmp	r2, r5
 8006f7a:	d024      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f7c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f86:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006f8c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8e:	d00c      	beq.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f90:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d009      	beq.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d005      	beq.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f9e:	42aa      	cmp	r2, r5
 8006fa0:	d003      	beq.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006fa2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d104      	bne.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006faa:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fac:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fb0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006fb4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006fbc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006fc0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006fc2:	4618      	mov	r0, r3
}
 8006fc4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fc8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fcc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006fda:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	e7e5      	b.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8006fde:	2002      	movs	r0, #2
}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40000400 	.word	0x40000400

08006fec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d045      	beq.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8006ff4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ff6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffe:	4602      	mov	r2, r0
 8007000:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007002:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007004:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800700c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007010:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007012:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007018:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800701a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800701c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007020:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007022:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007028:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800702a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800702c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007030:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007032:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007036:	4c13      	ldr	r4, [pc, #76]	; (8007084 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007038:	42a0      	cmp	r0, r4
 800703a:	d00b      	beq.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800703c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007040:	42a0      	cmp	r0, r4
 8007042:	d007      	beq.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007044:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007046:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007048:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800704c:	4608      	mov	r0, r1
}
 800704e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007052:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007054:	69cc      	ldr	r4, [r1, #28]
 8007056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800705a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800705c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800705e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007062:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007066:	6a0c      	ldr	r4, [r1, #32]
 8007068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800706c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800706e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007070:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007072:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007076:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800707c:	430b      	orrs	r3, r1
 800707e:	e7e1      	b.n	8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007080:	2002      	movs	r0, #2
}
 8007082:	4770      	bx	lr
 8007084:	40012c00 	.word	0x40012c00

08007088 <HAL_TIMEx_CommutCallback>:
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop

0800708c <HAL_TIMEx_BreakCallback>:
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop

08007090 <HAL_TIMEx_Break2Callback>:
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop

08007094 <HAL_TIMEx_EncoderIndexCallback>:
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop

08007098 <HAL_TIMEx_DirectionChangeCallback>:
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop

0800709c <HAL_TIMEx_IndexErrorCallback>:
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <HAL_TIMEx_TransitionErrorCallback>:
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80070a8:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070aa:	6882      	ldr	r2, [r0, #8]
 80070ac:	6900      	ldr	r0, [r0, #16]
 80070ae:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070b2:	4302      	orrs	r2, r0
 80070b4:	430a      	orrs	r2, r1
 80070b6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b8:	49a5      	ldr	r1, [pc, #660]	; (8007350 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ba:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070bc:	4029      	ands	r1, r5
 80070be:	430a      	orrs	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68e1      	ldr	r1, [r4, #12]
 80070c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80070ca:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070cc:	49a1      	ldr	r1, [pc, #644]	; (8007354 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ce:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d0:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d2:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d4:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d6:	d06b      	beq.n	80071b0 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 80070d8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070da:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80070de:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80070e2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e4:	430a      	orrs	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070ec:	f022 020f 	bic.w	r2, r2, #15
 80070f0:	430a      	orrs	r2, r1
 80070f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f4:	4a98      	ldr	r2, [pc, #608]	; (8007358 <UART_SetConfig+0x2b4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d012      	beq.n	8007120 <UART_SetConfig+0x7c>
 80070fa:	4a98      	ldr	r2, [pc, #608]	; (800735c <UART_SetConfig+0x2b8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d035      	beq.n	800716c <UART_SetConfig+0xc8>
 8007100:	4a97      	ldr	r2, [pc, #604]	; (8007360 <UART_SetConfig+0x2bc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	f000 80f8 	beq.w	80072f8 <UART_SetConfig+0x254>
 8007108:	4a96      	ldr	r2, [pc, #600]	; (8007364 <UART_SetConfig+0x2c0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	f000 80a4 	beq.w	8007258 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8007110:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007112:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007114:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8007118:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800711c:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800711e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007120:	4b91      	ldr	r3, [pc, #580]	; (8007368 <UART_SetConfig+0x2c4>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	3b01      	subs	r3, #1
 800712c:	2b02      	cmp	r3, #2
 800712e:	f240 808d 	bls.w	800724c <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007132:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007136:	f000 80fc 	beq.w	8007332 <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800713a:	f7fe fd5b 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800713e:	2800      	cmp	r0, #0
 8007140:	d054      	beq.n	80071ec <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007142:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007144:	6862      	ldr	r2, [r4, #4]
 8007146:	4b89      	ldr	r3, [pc, #548]	; (800736c <UART_SetConfig+0x2c8>)
 8007148:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800714c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007150:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007154:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007158:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800715c:	f1a3 0210 	sub.w	r2, r3, #16
 8007160:	428a      	cmp	r2, r1
 8007162:	d8d5      	bhi.n	8007110 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	2000      	movs	r0, #0
 8007168:	60d3      	str	r3, [r2, #12]
 800716a:	e7d2      	b.n	8007112 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800716c:	4b7e      	ldr	r3, [pc, #504]	; (8007368 <UART_SetConfig+0x2c4>)
 800716e:	4a80      	ldr	r2, [pc, #512]	; (8007370 <UART_SetConfig+0x2cc>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800717a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800717e:	d07d      	beq.n	800727c <UART_SetConfig+0x1d8>
    switch (clocksource)
 8007180:	2b08      	cmp	r3, #8
 8007182:	d8c5      	bhi.n	8007110 <UART_SetConfig+0x6c>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0xe8>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080072b3 	.word	0x080072b3
 8007190:	0800713b 	.word	0x0800713b
 8007194:	0800732f 	.word	0x0800732f
 8007198:	08007111 	.word	0x08007111
 800719c:	08007277 	.word	0x08007277
 80071a0:	08007111 	.word	0x08007111
 80071a4:	08007111 	.word	0x08007111
 80071a8:	08007111 	.word	0x08007111
 80071ac:	0800731f 	.word	0x0800731f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071b0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80071b4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80071b8:	430a      	orrs	r2, r1
 80071ba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c0:	4869      	ldr	r0, [pc, #420]	; (8007368 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071c2:	f022 020f 	bic.w	r2, r2, #15
 80071c6:	430a      	orrs	r2, r1
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80071ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d6:	f000 80a8 	beq.w	800732a <UART_SetConfig+0x286>
 80071da:	d809      	bhi.n	80071f0 <UART_SetConfig+0x14c>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d038      	beq.n	8007252 <UART_SetConfig+0x1ae>
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d194      	bne.n	8007110 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 80071e6:	f7fe fba9 	bl	800593c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80071ea:	b930      	cbnz	r0, 80071fa <UART_SetConfig+0x156>
 80071ec:	2000      	movs	r0, #0
 80071ee:	e790      	b.n	8007112 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f4:	d18c      	bne.n	8007110 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80071f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071fa:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071fc:	4b5b      	ldr	r3, [pc, #364]	; (800736c <UART_SetConfig+0x2c8>)
 80071fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007200:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007204:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007208:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800720c:	4299      	cmp	r1, r3
 800720e:	f63f af7f 	bhi.w	8007110 <UART_SetConfig+0x6c>
 8007212:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007216:	f63f af7b 	bhi.w	8007110 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800721a:	2300      	movs	r3, #0
 800721c:	4619      	mov	r1, r3
 800721e:	f7f9 fd3b 	bl	8000c98 <__aeabi_uldivmod>
 8007222:	0209      	lsls	r1, r1, #8
 8007224:	0203      	lsls	r3, r0, #8
 8007226:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800722a:	0868      	lsrs	r0, r5, #1
 800722c:	1818      	adds	r0, r3, r0
 800722e:	462a      	mov	r2, r5
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	f141 0100 	adc.w	r1, r1, #0
 8007238:	f7f9 fd2e 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800723c:	4a4d      	ldr	r2, [pc, #308]	; (8007374 <UART_SetConfig+0x2d0>)
 800723e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007242:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007244:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007246:	f63f af63 	bhi.w	8007110 <UART_SetConfig+0x6c>
 800724a:	e78b      	b.n	8007164 <UART_SetConfig+0xc0>
 800724c:	4a4a      	ldr	r2, [pc, #296]	; (8007378 <UART_SetConfig+0x2d4>)
 800724e:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007250:	e793      	b.n	800717a <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007252:	f7fe fcbd 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
        break;
 8007256:	e7c8      	b.n	80071ea <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007258:	4b43      	ldr	r3, [pc, #268]	; (8007368 <UART_SetConfig+0x2c4>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d06d      	beq.n	8007342 <UART_SetConfig+0x29e>
 8007266:	d85d      	bhi.n	8007324 <UART_SetConfig+0x280>
 8007268:	b303      	cbz	r3, 80072ac <UART_SetConfig+0x208>
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	f47f af50 	bne.w	8007110 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007270:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007274:	d020      	beq.n	80072b8 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8007276:	f7fe fb61 	bl	800593c <HAL_RCC_GetSysClockFreq>
        break;
 800727a:	e760      	b.n	800713e <UART_SetConfig+0x9a>
    switch (clocksource)
 800727c:	2b08      	cmp	r3, #8
 800727e:	f63f af47 	bhi.w	8007110 <UART_SetConfig+0x6c>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x1e4>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	08007339 	.word	0x08007339
 800728c:	08007333 	.word	0x08007333
 8007290:	0800733f 	.word	0x0800733f
 8007294:	08007111 	.word	0x08007111
 8007298:	080072b9 	.word	0x080072b9
 800729c:	08007111 	.word	0x08007111
 80072a0:	08007111 	.word	0x08007111
 80072a4:	08007111 	.word	0x08007111
 80072a8:	080072c3 	.word	0x080072c3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80072b0:	d042      	beq.n	8007338 <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b2:	f7fe fc8d 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
        break;
 80072b6:	e742      	b.n	800713e <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 80072b8:	f7fe fb40 	bl	800593c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80072bc:	2800      	cmp	r0, #0
 80072be:	d095      	beq.n	80071ec <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <UART_SetConfig+0x2c8>)
 80072c6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80072ca:	fbb0 f0f1 	udiv	r0, r0, r1
 80072ce:	0853      	lsrs	r3, r2, #1
 80072d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d4:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d8:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072dc:	f1a0 0210 	sub.w	r2, r0, #16
 80072e0:	429a      	cmp	r2, r3
 80072e2:	f63f af15 	bhi.w	8007110 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e6:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80072ea:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ec:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ee:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80072f2:	4318      	orrs	r0, r3
 80072f4:	60d0      	str	r0, [r2, #12]
 80072f6:	e779      	b.n	80071ec <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <UART_SetConfig+0x2c4>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007302:	2b20      	cmp	r3, #32
 8007304:	d01d      	beq.n	8007342 <UART_SetConfig+0x29e>
 8007306:	d804      	bhi.n	8007312 <UART_SetConfig+0x26e>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0cf      	beq.n	80072ac <UART_SetConfig+0x208>
 800730c:	2b10      	cmp	r3, #16
 800730e:	d0af      	beq.n	8007270 <UART_SetConfig+0x1cc>
 8007310:	e6fe      	b.n	8007110 <UART_SetConfig+0x6c>
 8007312:	2b30      	cmp	r3, #48	; 0x30
 8007314:	f47f aefc 	bne.w	8007110 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007318:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800731c:	d0d1      	beq.n	80072c2 <UART_SetConfig+0x21e>
    switch (clocksource)
 800731e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007322:	e70f      	b.n	8007144 <UART_SetConfig+0xa0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007324:	2bc0      	cmp	r3, #192	; 0xc0
 8007326:	d0f7      	beq.n	8007318 <UART_SetConfig+0x274>
 8007328:	e6f2      	b.n	8007110 <UART_SetConfig+0x6c>
 800732a:	4814      	ldr	r0, [pc, #80]	; (800737c <UART_SetConfig+0x2d8>)
 800732c:	e765      	b.n	80071fa <UART_SetConfig+0x156>
        pclk = (uint32_t) HSI_VALUE;
 800732e:	4813      	ldr	r0, [pc, #76]	; (800737c <UART_SetConfig+0x2d8>)
 8007330:	e708      	b.n	8007144 <UART_SetConfig+0xa0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007332:	f7fe fc5f 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007336:	e7c1      	b.n	80072bc <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fe fc4a 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
        break;
 800733c:	e7be      	b.n	80072bc <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 800733e:	480f      	ldr	r0, [pc, #60]	; (800737c <UART_SetConfig+0x2d8>)
 8007340:	e7bf      	b.n	80072c2 <UART_SetConfig+0x21e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007342:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007346:	480d      	ldr	r0, [pc, #52]	; (800737c <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007348:	f47f aefc 	bne.w	8007144 <UART_SetConfig+0xa0>
 800734c:	e7b9      	b.n	80072c2 <UART_SetConfig+0x21e>
 800734e:	bf00      	nop
 8007350:	cfff69f3 	.word	0xcfff69f3
 8007354:	40008000 	.word	0x40008000
 8007358:	40013800 	.word	0x40013800
 800735c:	40004400 	.word	0x40004400
 8007360:	40004800 	.word	0x40004800
 8007364:	40004c00 	.word	0x40004c00
 8007368:	40021000 	.word	0x40021000
 800736c:	0800b41c 	.word	0x0800b41c
 8007370:	0800b40c 	.word	0x0800b40c
 8007374:	000ffcff 	.word	0x000ffcff
 8007378:	0800b408 	.word	0x0800b408
 800737c:	00f42400 	.word	0x00f42400

08007380 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007380:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007382:	07da      	lsls	r2, r3, #31
{
 8007384:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007386:	d506      	bpl.n	8007396 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007388:	6801      	ldr	r1, [r0, #0]
 800738a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800738c:	684a      	ldr	r2, [r1, #4]
 800738e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007392:	4322      	orrs	r2, r4
 8007394:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007396:	079c      	lsls	r4, r3, #30
 8007398:	d506      	bpl.n	80073a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800739a:	6801      	ldr	r1, [r0, #0]
 800739c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800739e:	684a      	ldr	r2, [r1, #4]
 80073a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80073a4:	4322      	orrs	r2, r4
 80073a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073a8:	0759      	lsls	r1, r3, #29
 80073aa:	d506      	bpl.n	80073ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073ac:	6801      	ldr	r1, [r0, #0]
 80073ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80073b0:	684a      	ldr	r2, [r1, #4]
 80073b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073b6:	4322      	orrs	r2, r4
 80073b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073ba:	071a      	lsls	r2, r3, #28
 80073bc:	d506      	bpl.n	80073cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073be:	6801      	ldr	r1, [r0, #0]
 80073c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80073c2:	684a      	ldr	r2, [r1, #4]
 80073c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073c8:	4322      	orrs	r2, r4
 80073ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073cc:	06dc      	lsls	r4, r3, #27
 80073ce:	d506      	bpl.n	80073de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d0:	6801      	ldr	r1, [r0, #0]
 80073d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80073d4:	688a      	ldr	r2, [r1, #8]
 80073d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073da:	4322      	orrs	r2, r4
 80073dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073de:	0699      	lsls	r1, r3, #26
 80073e0:	d506      	bpl.n	80073f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073e2:	6801      	ldr	r1, [r0, #0]
 80073e4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80073e6:	688a      	ldr	r2, [r1, #8]
 80073e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ec:	4322      	orrs	r2, r4
 80073ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f0:	065a      	lsls	r2, r3, #25
 80073f2:	d509      	bpl.n	8007408 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f4:	6801      	ldr	r1, [r0, #0]
 80073f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80073f8:	684a      	ldr	r2, [r1, #4]
 80073fa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80073fe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007400:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007404:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007406:	d00b      	beq.n	8007420 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	d506      	bpl.n	800741a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740c:	6802      	ldr	r2, [r0, #0]
 800740e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007410:	6853      	ldr	r3, [r2, #4]
 8007412:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007416:	430b      	orrs	r3, r1
 8007418:	6053      	str	r3, [r2, #4]
  }
}
 800741a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800741e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007420:	684a      	ldr	r2, [r1, #4]
 8007422:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007424:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007428:	4322      	orrs	r2, r4
 800742a:	604a      	str	r2, [r1, #4]
 800742c:	e7ec      	b.n	8007408 <UART_AdvFeatureConfig+0x88>
 800742e:	bf00      	nop

08007430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007434:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007438:	6805      	ldr	r5, [r0, #0]
{
 800743a:	4681      	mov	r9, r0
 800743c:	460f      	mov	r7, r1
 800743e:	4616      	mov	r6, r2
 8007440:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007442:	e002      	b.n	800744a <UART_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007444:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007448:	d10c      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744a:	69ec      	ldr	r4, [r5, #28]
 800744c:	ea37 0304 	bics.w	r3, r7, r4
 8007450:	bf0c      	ite	eq
 8007452:	f04f 0c01 	moveq.w	ip, #1
 8007456:	f04f 0c00 	movne.w	ip, #0
 800745a:	45b4      	cmp	ip, r6
 800745c:	d0f2      	beq.n	8007444 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800745e:	2000      	movs	r0, #0
}
 8007460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007464:	f7fc fb36 	bl	8003ad4 <HAL_GetTick>
 8007468:	eba0 000a 	sub.w	r0, r0, sl
 800746c:	4540      	cmp	r0, r8
 800746e:	d82d      	bhi.n	80074cc <UART_WaitOnFlagUntilTimeout+0x9c>
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	d02a      	beq.n	80074cc <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007476:	f8d9 5000 	ldr.w	r5, [r9]
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	0759      	lsls	r1, r3, #29
 800747e:	462a      	mov	r2, r5
 8007480:	d5e3      	bpl.n	800744a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007482:	69eb      	ldr	r3, [r5, #28]
 8007484:	051b      	lsls	r3, r3, #20
 8007486:	d5e0      	bpl.n	800744a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800748c:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007492:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	e842 3100 	strex	r1, r3, [r2]
 800749a:	2900      	cmp	r1, #0
 800749c:	d1f7      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	f102 0308 	add.w	r3, r2, #8
 80074a2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	f102 0008 	add.w	r0, r2, #8
 80074ae:	e840 3100 	strex	r1, r3, [r0]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d1f3      	bne.n	800749e <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 80074b6:	2320      	movs	r3, #32
 80074b8:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80074bc:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80074c0:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          return HAL_TIMEOUT;
 80074c4:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c6:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 80074ca:	e7c9      	b.n	8007460 <UART_WaitOnFlagUntilTimeout+0x30>
 80074cc:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	e842 3100 	strex	r1, r3, [r2]
 80074dc:	2900      	cmp	r1, #0
 80074de:	d1f7      	bne.n	80074d0 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	f102 0308 	add.w	r3, r2, #8
 80074e4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	f102 0008 	add.w	r0, r2, #8
 80074f0:	e840 3100 	strex	r1, r3, [r0]
 80074f4:	2900      	cmp	r1, #0
 80074f6:	d1f3      	bne.n	80074e0 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 80074f8:	2320      	movs	r3, #32
 80074fa:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80074fe:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007502:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 8007506:	2003      	movs	r0, #3
 8007508:	e7aa      	b.n	8007460 <UART_WaitOnFlagUntilTimeout+0x30>
 800750a:	bf00      	nop

0800750c <HAL_UART_Transmit>:
{
 800750c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007510:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007512:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8007516:	2820      	cmp	r0, #32
{
 8007518:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800751a:	d14a      	bne.n	80075b2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800751c:	460d      	mov	r5, r1
 800751e:	2900      	cmp	r1, #0
 8007520:	d043      	beq.n	80075aa <HAL_UART_Transmit+0x9e>
 8007522:	4617      	mov	r7, r2
 8007524:	2a00      	cmp	r2, #0
 8007526:	d040      	beq.n	80075aa <HAL_UART_Transmit+0x9e>
 8007528:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800752a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800752e:	2b01      	cmp	r3, #1
 8007530:	d03f      	beq.n	80075b2 <HAL_UART_Transmit+0xa6>
 8007532:	2301      	movs	r3, #1
 8007534:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800753c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007542:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 8007546:	f7fc fac5 	bl	8003ad4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800754c:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8007554:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    tickstart = HAL_GetTick();
 8007558:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800755a:	d02e      	beq.n	80075ba <HAL_UART_Transmit+0xae>
    while (huart->TxXferCount > 0U)
 800755c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8007560:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8007562:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8007564:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8007568:	b973      	cbnz	r3, 8007588 <HAL_UART_Transmit+0x7c>
 800756a:	e030      	b.n	80075ce <HAL_UART_Transmit+0xc2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8007574:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8007578:	3a01      	subs	r2, #1
 800757a:	b292      	uxth	r2, r2
 800757c:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007580:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8007584:	b292      	uxth	r2, r2
 8007586:	b312      	cbz	r2, 80075ce <HAL_UART_Transmit+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007588:	9600      	str	r6, [sp, #0]
 800758a:	4643      	mov	r3, r8
 800758c:	2200      	movs	r2, #0
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	4620      	mov	r0, r4
 8007592:	f7ff ff4d 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8007596:	b9b0      	cbnz	r0, 80075c6 <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 8007598:	2d00      	cmp	r5, #0
 800759a:	d1e7      	bne.n	800756c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800759c:	f839 3b02 	ldrh.w	r3, [r9], #2
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80075a8:	e7e4      	b.n	8007574 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 80075aa:	2001      	movs	r0, #1
}
 80075ac:	b003      	add	sp, #12
 80075ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80075b2:	2002      	movs	r0, #2
}
 80075b4:	b003      	add	sp, #12
 80075b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1cd      	bne.n	800755c <HAL_UART_Transmit+0x50>
 80075c0:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80075c2:	461d      	mov	r5, r3
 80075c4:	e7ca      	b.n	800755c <HAL_UART_Transmit+0x50>
        return HAL_TIMEOUT;
 80075c6:	2003      	movs	r0, #3
}
 80075c8:	b003      	add	sp, #12
 80075ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ce:	9600      	str	r6, [sp, #0]
 80075d0:	4643      	mov	r3, r8
 80075d2:	2200      	movs	r2, #0
 80075d4:	2140      	movs	r1, #64	; 0x40
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff ff2a 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d1f2      	bne.n	80075c6 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 80075e0:	2320      	movs	r3, #32
 80075e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80075e6:	e7e1      	b.n	80075ac <HAL_UART_Transmit+0xa0>

080075e8 <UART_CheckIdleState>:
{
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ec:	2600      	movs	r6, #0
{
 80075ee:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80075f4:	f7fc fa6e 	bl	8003ad4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80075fe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007600:	d40e      	bmi.n	8007620 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	075b      	lsls	r3, r3, #29
 8007606:	d41a      	bmi.n	800763e <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007608:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800760a:	2220      	movs	r2, #32
  return HAL_OK;
 800760c:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800760e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007612:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007616:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800761c:	b002      	add	sp, #8
 800761e:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4632      	mov	r2, r6
 8007628:	4603      	mov	r3, r0
 800762a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800762e:	4620      	mov	r0, r4
 8007630:	f7ff fefe 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8007634:	b978      	cbnz	r0, 8007656 <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	075b      	lsls	r3, r3, #29
 800763c:	d5e4      	bpl.n	8007608 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800763e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2200      	movs	r2, #0
 8007646:	462b      	mov	r3, r5
 8007648:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800764c:	4620      	mov	r0, r4
 800764e:	f7ff feef 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8007652:	2800      	cmp	r0, #0
 8007654:	d0d8      	beq.n	8007608 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8007656:	2003      	movs	r0, #3
}
 8007658:	b002      	add	sp, #8
 800765a:	bd70      	pop	{r4, r5, r6, pc}

0800765c <HAL_UART_Init>:
  if (huart == NULL)
 800765c:	b380      	cbz	r0, 80076c0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800765e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007662:	b510      	push	{r4, lr}
 8007664:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007666:	b333      	cbz	r3, 80076b6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8007668:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800766a:	2324      	movs	r3, #36	; 0x24
 800766c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007676:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007678:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800767a:	f7ff fd13 	bl	80070a4 <UART_SetConfig>
 800767e:	2801      	cmp	r0, #1
 8007680:	d017      	beq.n	80076b2 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007684:	b98b      	cbnz	r3, 80076aa <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800768e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007696:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800769e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80076a0:	601a      	str	r2, [r3, #0]
}
 80076a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80076a6:	f7ff bf9f 	b.w	80075e8 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7ff fe68 	bl	8007380 <UART_AdvFeatureConfig>
 80076b0:	e7e9      	b.n	8007686 <HAL_UART_Init+0x2a>
}
 80076b2:	2001      	movs	r0, #1
 80076b4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80076b6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80076ba:	f7fc f8c9 	bl	8003850 <HAL_UART_MspInit>
 80076be:	e7d3      	b.n	8007668 <HAL_UART_Init+0xc>
}
 80076c0:	2001      	movs	r0, #1
 80076c2:	4770      	bx	lr

080076c4 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076c4:	6803      	ldr	r3, [r0, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076c8:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 80076ca:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076cc:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076d0:	4d0a      	ldr	r5, [pc, #40]	; (80076fc <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80076d2:	4c0b      	ldr	r4, [pc, #44]	; (8007700 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076d4:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076d8:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076dc:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076de:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80076e0:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 80076e4:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076e6:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ea:	00db      	lsls	r3, r3, #3
  }
}
 80076ec:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ee:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076f2:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076f6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 80076fa:	4770      	bx	lr
 80076fc:	0800b43c 	.word	0x0800b43c
 8007700:	0800b434 	.word	0x0800b434

08007704 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007704:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007708:	2b01      	cmp	r3, #1
 800770a:	d017      	beq.n	800773c <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800770e:	2324      	movs	r3, #36	; 0x24
{
 8007710:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007716:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007718:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800771a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800771c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007720:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007724:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007726:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007728:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 800772a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800772e:	2220      	movs	r2, #32
 8007730:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8007734:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007738:	4618      	mov	r0, r3
}
 800773a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800773c:	2002      	movs	r0, #2
}
 800773e:	4770      	bx	lr

08007740 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007740:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007742:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007746:	2b01      	cmp	r3, #1
 8007748:	d022      	beq.n	8007790 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800774a:	2201      	movs	r2, #1
 800774c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007750:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007752:	2224      	movs	r2, #36	; 0x24
 8007754:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007758:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	f022 0201 	bic.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007768:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800776a:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800776c:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800776e:	4604      	mov	r4, r0
 8007770:	b152      	cbz	r2, 8007788 <HAL_UARTEx_SetTxFifoThreshold+0x48>
 8007772:	f7ff ffa7 	bl	80076c4 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007776:	6803      	ldr	r3, [r0, #0]
 8007778:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800777a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800777c:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800777e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8007782:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8007786:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007788:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800778c:	6682      	str	r2, [r0, #104]	; 0x68
 800778e:	e7f3      	b.n	8007778 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8007790:	2002      	movs	r0, #2
}
 8007792:	bd38      	pop	{r3, r4, r5, pc}

08007794 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007794:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007796:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800779a:	2b01      	cmp	r3, #1
 800779c:	d022      	beq.n	80077e4 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800779e:	2201      	movs	r2, #1
 80077a0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a4:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80077a6:	2224      	movs	r2, #36	; 0x24
 80077a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	f022 0201 	bic.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80077bc:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077be:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077c0:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077c2:	4604      	mov	r4, r0
 80077c4:	b152      	cbz	r2, 80077dc <HAL_UARTEx_SetRxFifoThreshold+0x48>
 80077c6:	f7ff ff7d 	bl	80076c4 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ca:	6803      	ldr	r3, [r0, #0]
 80077cc:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 80077ce:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80077d0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80077d2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80077d6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 80077da:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80077dc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80077e0:	6682      	str	r2, [r0, #104]	; 0x68
 80077e2:	e7f3      	b.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 80077e4:	2002      	movs	r0, #2
}
 80077e6:	bd38      	pop	{r3, r4, r5, pc}

080077e8 <__errno>:
 80077e8:	4b01      	ldr	r3, [pc, #4]	; (80077f0 <__errno+0x8>)
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000002c 	.word	0x2000002c

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	; (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	; (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	; (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	; (8007838 <__libc_init_array+0x44>)
 8007808:	f003 fd66 	bl	800b2d8 <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	0800bbfc 	.word	0x0800bbfc
 8007830:	0800bbfc 	.word	0x0800bbfc
 8007834:	0800bbfc 	.word	0x0800bbfc
 8007838:	0800bc00 	.word	0x0800bc00

0800783c <memset>:
 800783c:	4402      	add	r2, r0
 800783e:	4603      	mov	r3, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	d100      	bne.n	8007846 <memset+0xa>
 8007844:	4770      	bx	lr
 8007846:	f803 1b01 	strb.w	r1, [r3], #1
 800784a:	e7f9      	b.n	8007840 <memset+0x4>

0800784c <__cvt>:
 800784c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	ec55 4b10 	vmov	r4, r5, d0
 8007854:	2d00      	cmp	r5, #0
 8007856:	460e      	mov	r6, r1
 8007858:	4619      	mov	r1, r3
 800785a:	462b      	mov	r3, r5
 800785c:	bfbb      	ittet	lt
 800785e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007862:	461d      	movlt	r5, r3
 8007864:	2300      	movge	r3, #0
 8007866:	232d      	movlt	r3, #45	; 0x2d
 8007868:	700b      	strb	r3, [r1, #0]
 800786a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007870:	4691      	mov	r9, r2
 8007872:	f023 0820 	bic.w	r8, r3, #32
 8007876:	bfbc      	itt	lt
 8007878:	4622      	movlt	r2, r4
 800787a:	4614      	movlt	r4, r2
 800787c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007880:	d005      	beq.n	800788e <__cvt+0x42>
 8007882:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007886:	d100      	bne.n	800788a <__cvt+0x3e>
 8007888:	3601      	adds	r6, #1
 800788a:	2102      	movs	r1, #2
 800788c:	e000      	b.n	8007890 <__cvt+0x44>
 800788e:	2103      	movs	r1, #3
 8007890:	ab03      	add	r3, sp, #12
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	ab02      	add	r3, sp, #8
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	ec45 4b10 	vmov	d0, r4, r5
 800789c:	4653      	mov	r3, sl
 800789e:	4632      	mov	r2, r6
 80078a0:	f000 fcea 	bl	8008278 <_dtoa_r>
 80078a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078a8:	4607      	mov	r7, r0
 80078aa:	d102      	bne.n	80078b2 <__cvt+0x66>
 80078ac:	f019 0f01 	tst.w	r9, #1
 80078b0:	d022      	beq.n	80078f8 <__cvt+0xac>
 80078b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078b6:	eb07 0906 	add.w	r9, r7, r6
 80078ba:	d110      	bne.n	80078de <__cvt+0x92>
 80078bc:	783b      	ldrb	r3, [r7, #0]
 80078be:	2b30      	cmp	r3, #48	; 0x30
 80078c0:	d10a      	bne.n	80078d8 <__cvt+0x8c>
 80078c2:	2200      	movs	r2, #0
 80078c4:	2300      	movs	r3, #0
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f9 f925 	bl	8000b18 <__aeabi_dcmpeq>
 80078ce:	b918      	cbnz	r0, 80078d8 <__cvt+0x8c>
 80078d0:	f1c6 0601 	rsb	r6, r6, #1
 80078d4:	f8ca 6000 	str.w	r6, [sl]
 80078d8:	f8da 3000 	ldr.w	r3, [sl]
 80078dc:	4499      	add	r9, r3
 80078de:	2200      	movs	r2, #0
 80078e0:	2300      	movs	r3, #0
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7f9 f917 	bl	8000b18 <__aeabi_dcmpeq>
 80078ea:	b108      	cbz	r0, 80078f0 <__cvt+0xa4>
 80078ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80078f0:	2230      	movs	r2, #48	; 0x30
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	454b      	cmp	r3, r9
 80078f6:	d307      	bcc.n	8007908 <__cvt+0xbc>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078fc:	1bdb      	subs	r3, r3, r7
 80078fe:	4638      	mov	r0, r7
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	b004      	add	sp, #16
 8007904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007908:	1c59      	adds	r1, r3, #1
 800790a:	9103      	str	r1, [sp, #12]
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	e7f0      	b.n	80078f2 <__cvt+0xa6>

08007910 <__exponent>:
 8007910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007912:	4603      	mov	r3, r0
 8007914:	2900      	cmp	r1, #0
 8007916:	bfb8      	it	lt
 8007918:	4249      	neglt	r1, r1
 800791a:	f803 2b02 	strb.w	r2, [r3], #2
 800791e:	bfb4      	ite	lt
 8007920:	222d      	movlt	r2, #45	; 0x2d
 8007922:	222b      	movge	r2, #43	; 0x2b
 8007924:	2909      	cmp	r1, #9
 8007926:	7042      	strb	r2, [r0, #1]
 8007928:	dd2a      	ble.n	8007980 <__exponent+0x70>
 800792a:	f10d 0407 	add.w	r4, sp, #7
 800792e:	46a4      	mov	ip, r4
 8007930:	270a      	movs	r7, #10
 8007932:	46a6      	mov	lr, r4
 8007934:	460a      	mov	r2, r1
 8007936:	fb91 f6f7 	sdiv	r6, r1, r7
 800793a:	fb07 1516 	mls	r5, r7, r6, r1
 800793e:	3530      	adds	r5, #48	; 0x30
 8007940:	2a63      	cmp	r2, #99	; 0x63
 8007942:	f104 34ff 	add.w	r4, r4, #4294967295
 8007946:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800794a:	4631      	mov	r1, r6
 800794c:	dcf1      	bgt.n	8007932 <__exponent+0x22>
 800794e:	3130      	adds	r1, #48	; 0x30
 8007950:	f1ae 0502 	sub.w	r5, lr, #2
 8007954:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007958:	1c44      	adds	r4, r0, #1
 800795a:	4629      	mov	r1, r5
 800795c:	4561      	cmp	r1, ip
 800795e:	d30a      	bcc.n	8007976 <__exponent+0x66>
 8007960:	f10d 0209 	add.w	r2, sp, #9
 8007964:	eba2 020e 	sub.w	r2, r2, lr
 8007968:	4565      	cmp	r5, ip
 800796a:	bf88      	it	hi
 800796c:	2200      	movhi	r2, #0
 800796e:	4413      	add	r3, r2
 8007970:	1a18      	subs	r0, r3, r0
 8007972:	b003      	add	sp, #12
 8007974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800797a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800797e:	e7ed      	b.n	800795c <__exponent+0x4c>
 8007980:	2330      	movs	r3, #48	; 0x30
 8007982:	3130      	adds	r1, #48	; 0x30
 8007984:	7083      	strb	r3, [r0, #2]
 8007986:	70c1      	strb	r1, [r0, #3]
 8007988:	1d03      	adds	r3, r0, #4
 800798a:	e7f1      	b.n	8007970 <__exponent+0x60>

0800798c <_printf_float>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	ed2d 8b02 	vpush	{d8}
 8007994:	b08d      	sub	sp, #52	; 0x34
 8007996:	460c      	mov	r4, r1
 8007998:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800799c:	4616      	mov	r6, r2
 800799e:	461f      	mov	r7, r3
 80079a0:	4605      	mov	r5, r0
 80079a2:	f001 fa57 	bl	8008e54 <_localeconv_r>
 80079a6:	f8d0 a000 	ldr.w	sl, [r0]
 80079aa:	4650      	mov	r0, sl
 80079ac:	f7f8 fc38 	bl	8000220 <strlen>
 80079b0:	2300      	movs	r3, #0
 80079b2:	930a      	str	r3, [sp, #40]	; 0x28
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	f8d8 3000 	ldr.w	r3, [r8]
 80079bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80079c0:	3307      	adds	r3, #7
 80079c2:	f023 0307 	bic.w	r3, r3, #7
 80079c6:	f103 0208 	add.w	r2, r3, #8
 80079ca:	f8c8 2000 	str.w	r2, [r8]
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079de:	9307      	str	r3, [sp, #28]
 80079e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80079e4:	ee08 0a10 	vmov	s16, r0
 80079e8:	4b9f      	ldr	r3, [pc, #636]	; (8007c68 <_printf_float+0x2dc>)
 80079ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	f7f9 f8c3 	bl	8000b7c <__aeabi_dcmpun>
 80079f6:	bb88      	cbnz	r0, 8007a5c <_printf_float+0xd0>
 80079f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079fc:	4b9a      	ldr	r3, [pc, #616]	; (8007c68 <_printf_float+0x2dc>)
 80079fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007a02:	f7f9 f89d 	bl	8000b40 <__aeabi_dcmple>
 8007a06:	bb48      	cbnz	r0, 8007a5c <_printf_float+0xd0>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	4649      	mov	r1, r9
 8007a10:	f7f9 f88c 	bl	8000b2c <__aeabi_dcmplt>
 8007a14:	b110      	cbz	r0, 8007a1c <_printf_float+0x90>
 8007a16:	232d      	movs	r3, #45	; 0x2d
 8007a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1c:	4b93      	ldr	r3, [pc, #588]	; (8007c6c <_printf_float+0x2e0>)
 8007a1e:	4894      	ldr	r0, [pc, #592]	; (8007c70 <_printf_float+0x2e4>)
 8007a20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a24:	bf94      	ite	ls
 8007a26:	4698      	movls	r8, r3
 8007a28:	4680      	movhi	r8, r0
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	9b05      	ldr	r3, [sp, #20]
 8007a30:	f023 0204 	bic.w	r2, r3, #4
 8007a34:	6022      	str	r2, [r4, #0]
 8007a36:	f04f 0900 	mov.w	r9, #0
 8007a3a:	9700      	str	r7, [sp, #0]
 8007a3c:	4633      	mov	r3, r6
 8007a3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f9d8 	bl	8007df8 <_printf_common>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	f040 8090 	bne.w	8007b6e <_printf_float+0x1e2>
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	b00d      	add	sp, #52	; 0x34
 8007a54:	ecbd 8b02 	vpop	{d8}
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	4649      	mov	r1, r9
 8007a64:	f7f9 f88a 	bl	8000b7c <__aeabi_dcmpun>
 8007a68:	b140      	cbz	r0, 8007a7c <_printf_float+0xf0>
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bfbc      	itt	lt
 8007a70:	232d      	movlt	r3, #45	; 0x2d
 8007a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a76:	487f      	ldr	r0, [pc, #508]	; (8007c74 <_printf_float+0x2e8>)
 8007a78:	4b7f      	ldr	r3, [pc, #508]	; (8007c78 <_printf_float+0x2ec>)
 8007a7a:	e7d1      	b.n	8007a20 <_printf_float+0x94>
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a82:	9206      	str	r2, [sp, #24]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	d13f      	bne.n	8007b08 <_printf_float+0x17c>
 8007a88:	2306      	movs	r3, #6
 8007a8a:	6063      	str	r3, [r4, #4]
 8007a8c:	9b05      	ldr	r3, [sp, #20]
 8007a8e:	6861      	ldr	r1, [r4, #4]
 8007a90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a94:	2300      	movs	r3, #0
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	ab0a      	add	r3, sp, #40	; 0x28
 8007a9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a9e:	ab09      	add	r3, sp, #36	; 0x24
 8007aa0:	ec49 8b10 	vmov	d0, r8, r9
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007aac:	4628      	mov	r0, r5
 8007aae:	f7ff fecd 	bl	800784c <__cvt>
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab6:	2b47      	cmp	r3, #71	; 0x47
 8007ab8:	4680      	mov	r8, r0
 8007aba:	d108      	bne.n	8007ace <_printf_float+0x142>
 8007abc:	1cc8      	adds	r0, r1, #3
 8007abe:	db02      	blt.n	8007ac6 <_printf_float+0x13a>
 8007ac0:	6863      	ldr	r3, [r4, #4]
 8007ac2:	4299      	cmp	r1, r3
 8007ac4:	dd41      	ble.n	8007b4a <_printf_float+0x1be>
 8007ac6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007aca:	fa5f fb8b 	uxtb.w	fp, fp
 8007ace:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ad2:	d820      	bhi.n	8007b16 <_printf_float+0x18a>
 8007ad4:	3901      	subs	r1, #1
 8007ad6:	465a      	mov	r2, fp
 8007ad8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007adc:	9109      	str	r1, [sp, #36]	; 0x24
 8007ade:	f7ff ff17 	bl	8007910 <__exponent>
 8007ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ae4:	1813      	adds	r3, r2, r0
 8007ae6:	2a01      	cmp	r2, #1
 8007ae8:	4681      	mov	r9, r0
 8007aea:	6123      	str	r3, [r4, #16]
 8007aec:	dc02      	bgt.n	8007af4 <_printf_float+0x168>
 8007aee:	6822      	ldr	r2, [r4, #0]
 8007af0:	07d2      	lsls	r2, r2, #31
 8007af2:	d501      	bpl.n	8007af8 <_printf_float+0x16c>
 8007af4:	3301      	adds	r3, #1
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d09c      	beq.n	8007a3a <_printf_float+0xae>
 8007b00:	232d      	movs	r3, #45	; 0x2d
 8007b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b06:	e798      	b.n	8007a3a <_printf_float+0xae>
 8007b08:	9a06      	ldr	r2, [sp, #24]
 8007b0a:	2a47      	cmp	r2, #71	; 0x47
 8007b0c:	d1be      	bne.n	8007a8c <_printf_float+0x100>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1bc      	bne.n	8007a8c <_printf_float+0x100>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e7b9      	b.n	8007a8a <_printf_float+0xfe>
 8007b16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b1a:	d118      	bne.n	8007b4e <_printf_float+0x1c2>
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	6863      	ldr	r3, [r4, #4]
 8007b20:	dd0b      	ble.n	8007b3a <_printf_float+0x1ae>
 8007b22:	6121      	str	r1, [r4, #16]
 8007b24:	b913      	cbnz	r3, 8007b2c <_printf_float+0x1a0>
 8007b26:	6822      	ldr	r2, [r4, #0]
 8007b28:	07d0      	lsls	r0, r2, #31
 8007b2a:	d502      	bpl.n	8007b32 <_printf_float+0x1a6>
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	440b      	add	r3, r1
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b34:	f04f 0900 	mov.w	r9, #0
 8007b38:	e7de      	b.n	8007af8 <_printf_float+0x16c>
 8007b3a:	b913      	cbnz	r3, 8007b42 <_printf_float+0x1b6>
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	07d2      	lsls	r2, r2, #31
 8007b40:	d501      	bpl.n	8007b46 <_printf_float+0x1ba>
 8007b42:	3302      	adds	r3, #2
 8007b44:	e7f4      	b.n	8007b30 <_printf_float+0x1a4>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e7f2      	b.n	8007b30 <_printf_float+0x1a4>
 8007b4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b50:	4299      	cmp	r1, r3
 8007b52:	db05      	blt.n	8007b60 <_printf_float+0x1d4>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	6121      	str	r1, [r4, #16]
 8007b58:	07d8      	lsls	r0, r3, #31
 8007b5a:	d5ea      	bpl.n	8007b32 <_printf_float+0x1a6>
 8007b5c:	1c4b      	adds	r3, r1, #1
 8007b5e:	e7e7      	b.n	8007b30 <_printf_float+0x1a4>
 8007b60:	2900      	cmp	r1, #0
 8007b62:	bfd4      	ite	le
 8007b64:	f1c1 0202 	rsble	r2, r1, #2
 8007b68:	2201      	movgt	r2, #1
 8007b6a:	4413      	add	r3, r2
 8007b6c:	e7e0      	b.n	8007b30 <_printf_float+0x1a4>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	055a      	lsls	r2, r3, #21
 8007b72:	d407      	bmi.n	8007b84 <_printf_float+0x1f8>
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	4642      	mov	r2, r8
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b8      	blx	r7
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d12c      	bne.n	8007bdc <_printf_float+0x250>
 8007b82:	e764      	b.n	8007a4e <_printf_float+0xc2>
 8007b84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b88:	f240 80e0 	bls.w	8007d4c <_printf_float+0x3c0>
 8007b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b90:	2200      	movs	r2, #0
 8007b92:	2300      	movs	r3, #0
 8007b94:	f7f8 ffc0 	bl	8000b18 <__aeabi_dcmpeq>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d034      	beq.n	8007c06 <_printf_float+0x27a>
 8007b9c:	4a37      	ldr	r2, [pc, #220]	; (8007c7c <_printf_float+0x2f0>)
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f af51 	beq.w	8007a4e <_printf_float+0xc2>
 8007bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	db02      	blt.n	8007bba <_printf_float+0x22e>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	07d8      	lsls	r0, r3, #31
 8007bb8:	d510      	bpl.n	8007bdc <_printf_float+0x250>
 8007bba:	ee18 3a10 	vmov	r3, s16
 8007bbe:	4652      	mov	r2, sl
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af41 	beq.w	8007a4e <_printf_float+0xc2>
 8007bcc:	f04f 0800 	mov.w	r8, #0
 8007bd0:	f104 091a 	add.w	r9, r4, #26
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	4543      	cmp	r3, r8
 8007bda:	dc09      	bgt.n	8007bf0 <_printf_float+0x264>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	079b      	lsls	r3, r3, #30
 8007be0:	f100 8105 	bmi.w	8007dee <_printf_float+0x462>
 8007be4:	68e0      	ldr	r0, [r4, #12]
 8007be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be8:	4298      	cmp	r0, r3
 8007bea:	bfb8      	it	lt
 8007bec:	4618      	movlt	r0, r3
 8007bee:	e730      	b.n	8007a52 <_printf_float+0xc6>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	464a      	mov	r2, r9
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	f43f af27 	beq.w	8007a4e <_printf_float+0xc2>
 8007c00:	f108 0801 	add.w	r8, r8, #1
 8007c04:	e7e6      	b.n	8007bd4 <_printf_float+0x248>
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc39      	bgt.n	8007c80 <_printf_float+0x2f4>
 8007c0c:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <_printf_float+0x2f0>)
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4631      	mov	r1, r6
 8007c12:	4628      	mov	r0, r5
 8007c14:	47b8      	blx	r7
 8007c16:	3001      	adds	r0, #1
 8007c18:	f43f af19 	beq.w	8007a4e <_printf_float+0xc2>
 8007c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d102      	bne.n	8007c2a <_printf_float+0x29e>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	07d9      	lsls	r1, r3, #31
 8007c28:	d5d8      	bpl.n	8007bdc <_printf_float+0x250>
 8007c2a:	ee18 3a10 	vmov	r3, s16
 8007c2e:	4652      	mov	r2, sl
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	f43f af09 	beq.w	8007a4e <_printf_float+0xc2>
 8007c3c:	f04f 0900 	mov.w	r9, #0
 8007c40:	f104 0a1a 	add.w	sl, r4, #26
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	425b      	negs	r3, r3
 8007c48:	454b      	cmp	r3, r9
 8007c4a:	dc01      	bgt.n	8007c50 <_printf_float+0x2c4>
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4e:	e792      	b.n	8007b76 <_printf_float+0x1ea>
 8007c50:	2301      	movs	r3, #1
 8007c52:	4652      	mov	r2, sl
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f43f aef7 	beq.w	8007a4e <_printf_float+0xc2>
 8007c60:	f109 0901 	add.w	r9, r9, #1
 8007c64:	e7ee      	b.n	8007c44 <_printf_float+0x2b8>
 8007c66:	bf00      	nop
 8007c68:	7fefffff 	.word	0x7fefffff
 8007c6c:	0800b448 	.word	0x0800b448
 8007c70:	0800b44c 	.word	0x0800b44c
 8007c74:	0800b454 	.word	0x0800b454
 8007c78:	0800b450 	.word	0x0800b450
 8007c7c:	0800b458 	.word	0x0800b458
 8007c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c84:	429a      	cmp	r2, r3
 8007c86:	bfa8      	it	ge
 8007c88:	461a      	movge	r2, r3
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	4691      	mov	r9, r2
 8007c8e:	dc37      	bgt.n	8007d00 <_printf_float+0x374>
 8007c90:	f04f 0b00 	mov.w	fp, #0
 8007c94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c98:	f104 021a 	add.w	r2, r4, #26
 8007c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c9e:	9305      	str	r3, [sp, #20]
 8007ca0:	eba3 0309 	sub.w	r3, r3, r9
 8007ca4:	455b      	cmp	r3, fp
 8007ca6:	dc33      	bgt.n	8007d10 <_printf_float+0x384>
 8007ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cac:	429a      	cmp	r2, r3
 8007cae:	db3b      	blt.n	8007d28 <_printf_float+0x39c>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	07da      	lsls	r2, r3, #31
 8007cb4:	d438      	bmi.n	8007d28 <_printf_float+0x39c>
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	9a05      	ldr	r2, [sp, #20]
 8007cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cbc:	1a9a      	subs	r2, r3, r2
 8007cbe:	eba3 0901 	sub.w	r9, r3, r1
 8007cc2:	4591      	cmp	r9, r2
 8007cc4:	bfa8      	it	ge
 8007cc6:	4691      	movge	r9, r2
 8007cc8:	f1b9 0f00 	cmp.w	r9, #0
 8007ccc:	dc35      	bgt.n	8007d3a <_printf_float+0x3ae>
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cd6:	f104 0a1a 	add.w	sl, r4, #26
 8007cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	eba3 0309 	sub.w	r3, r3, r9
 8007ce4:	4543      	cmp	r3, r8
 8007ce6:	f77f af79 	ble.w	8007bdc <_printf_float+0x250>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4652      	mov	r2, sl
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f43f aeaa 	beq.w	8007a4e <_printf_float+0xc2>
 8007cfa:	f108 0801 	add.w	r8, r8, #1
 8007cfe:	e7ec      	b.n	8007cda <_printf_float+0x34e>
 8007d00:	4613      	mov	r3, r2
 8007d02:	4631      	mov	r1, r6
 8007d04:	4642      	mov	r2, r8
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d1c0      	bne.n	8007c90 <_printf_float+0x304>
 8007d0e:	e69e      	b.n	8007a4e <_printf_float+0xc2>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	9205      	str	r2, [sp, #20]
 8007d18:	47b8      	blx	r7
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f43f ae97 	beq.w	8007a4e <_printf_float+0xc2>
 8007d20:	9a05      	ldr	r2, [sp, #20]
 8007d22:	f10b 0b01 	add.w	fp, fp, #1
 8007d26:	e7b9      	b.n	8007c9c <_printf_float+0x310>
 8007d28:	ee18 3a10 	vmov	r3, s16
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b8      	blx	r7
 8007d34:	3001      	adds	r0, #1
 8007d36:	d1be      	bne.n	8007cb6 <_printf_float+0x32a>
 8007d38:	e689      	b.n	8007a4e <_printf_float+0xc2>
 8007d3a:	9a05      	ldr	r2, [sp, #20]
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	4442      	add	r2, r8
 8007d40:	4631      	mov	r1, r6
 8007d42:	4628      	mov	r0, r5
 8007d44:	47b8      	blx	r7
 8007d46:	3001      	adds	r0, #1
 8007d48:	d1c1      	bne.n	8007cce <_printf_float+0x342>
 8007d4a:	e680      	b.n	8007a4e <_printf_float+0xc2>
 8007d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d4e:	2a01      	cmp	r2, #1
 8007d50:	dc01      	bgt.n	8007d56 <_printf_float+0x3ca>
 8007d52:	07db      	lsls	r3, r3, #31
 8007d54:	d538      	bpl.n	8007dc8 <_printf_float+0x43c>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4642      	mov	r2, r8
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	f43f ae74 	beq.w	8007a4e <_printf_float+0xc2>
 8007d66:	ee18 3a10 	vmov	r3, s16
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f ae6b 	beq.w	8007a4e <_printf_float+0xc2>
 8007d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f7f8 feca 	bl	8000b18 <__aeabi_dcmpeq>
 8007d84:	b9d8      	cbnz	r0, 8007dbe <_printf_float+0x432>
 8007d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d88:	f108 0201 	add.w	r2, r8, #1
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b8      	blx	r7
 8007d94:	3001      	adds	r0, #1
 8007d96:	d10e      	bne.n	8007db6 <_printf_float+0x42a>
 8007d98:	e659      	b.n	8007a4e <_printf_float+0xc2>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	f43f ae52 	beq.w	8007a4e <_printf_float+0xc2>
 8007daa:	f108 0801 	add.w	r8, r8, #1
 8007dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db0:	3b01      	subs	r3, #1
 8007db2:	4543      	cmp	r3, r8
 8007db4:	dcf1      	bgt.n	8007d9a <_printf_float+0x40e>
 8007db6:	464b      	mov	r3, r9
 8007db8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dbc:	e6dc      	b.n	8007b78 <_printf_float+0x1ec>
 8007dbe:	f04f 0800 	mov.w	r8, #0
 8007dc2:	f104 0a1a 	add.w	sl, r4, #26
 8007dc6:	e7f2      	b.n	8007dae <_printf_float+0x422>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	4642      	mov	r2, r8
 8007dcc:	e7df      	b.n	8007d8e <_printf_float+0x402>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	464a      	mov	r2, r9
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b8      	blx	r7
 8007dd8:	3001      	adds	r0, #1
 8007dda:	f43f ae38 	beq.w	8007a4e <_printf_float+0xc2>
 8007dde:	f108 0801 	add.w	r8, r8, #1
 8007de2:	68e3      	ldr	r3, [r4, #12]
 8007de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007de6:	1a5b      	subs	r3, r3, r1
 8007de8:	4543      	cmp	r3, r8
 8007dea:	dcf0      	bgt.n	8007dce <_printf_float+0x442>
 8007dec:	e6fa      	b.n	8007be4 <_printf_float+0x258>
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	f104 0919 	add.w	r9, r4, #25
 8007df6:	e7f4      	b.n	8007de2 <_printf_float+0x456>

08007df8 <_printf_common>:
 8007df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	4699      	mov	r9, r3
 8007e00:	688a      	ldr	r2, [r1, #8]
 8007e02:	690b      	ldr	r3, [r1, #16]
 8007e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	bfb8      	it	lt
 8007e0c:	4613      	movlt	r3, r2
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e14:	4607      	mov	r7, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	b10a      	cbz	r2, 8007e1e <_printf_common+0x26>
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	6033      	str	r3, [r6, #0]
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	0699      	lsls	r1, r3, #26
 8007e22:	bf42      	ittt	mi
 8007e24:	6833      	ldrmi	r3, [r6, #0]
 8007e26:	3302      	addmi	r3, #2
 8007e28:	6033      	strmi	r3, [r6, #0]
 8007e2a:	6825      	ldr	r5, [r4, #0]
 8007e2c:	f015 0506 	ands.w	r5, r5, #6
 8007e30:	d106      	bne.n	8007e40 <_printf_common+0x48>
 8007e32:	f104 0a19 	add.w	sl, r4, #25
 8007e36:	68e3      	ldr	r3, [r4, #12]
 8007e38:	6832      	ldr	r2, [r6, #0]
 8007e3a:	1a9b      	subs	r3, r3, r2
 8007e3c:	42ab      	cmp	r3, r5
 8007e3e:	dc26      	bgt.n	8007e8e <_printf_common+0x96>
 8007e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e44:	1e13      	subs	r3, r2, #0
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	bf18      	it	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	0692      	lsls	r2, r2, #26
 8007e4e:	d42b      	bmi.n	8007ea8 <_printf_common+0xb0>
 8007e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e54:	4649      	mov	r1, r9
 8007e56:	4638      	mov	r0, r7
 8007e58:	47c0      	blx	r8
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d01e      	beq.n	8007e9c <_printf_common+0xa4>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	68e5      	ldr	r5, [r4, #12]
 8007e62:	6832      	ldr	r2, [r6, #0]
 8007e64:	f003 0306 	and.w	r3, r3, #6
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	bf08      	it	eq
 8007e6c:	1aad      	subeq	r5, r5, r2
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	6922      	ldr	r2, [r4, #16]
 8007e72:	bf0c      	ite	eq
 8007e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e78:	2500      	movne	r5, #0
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	bfc4      	itt	gt
 8007e7e:	1a9b      	subgt	r3, r3, r2
 8007e80:	18ed      	addgt	r5, r5, r3
 8007e82:	2600      	movs	r6, #0
 8007e84:	341a      	adds	r4, #26
 8007e86:	42b5      	cmp	r5, r6
 8007e88:	d11a      	bne.n	8007ec0 <_printf_common+0xc8>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e008      	b.n	8007ea0 <_printf_common+0xa8>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4652      	mov	r2, sl
 8007e92:	4649      	mov	r1, r9
 8007e94:	4638      	mov	r0, r7
 8007e96:	47c0      	blx	r8
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d103      	bne.n	8007ea4 <_printf_common+0xac>
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	e7c6      	b.n	8007e36 <_printf_common+0x3e>
 8007ea8:	18e1      	adds	r1, r4, r3
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	2030      	movs	r0, #48	; 0x30
 8007eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eb2:	4422      	add	r2, r4
 8007eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	e7c7      	b.n	8007e50 <_printf_common+0x58>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d0e6      	beq.n	8007e9c <_printf_common+0xa4>
 8007ece:	3601      	adds	r6, #1
 8007ed0:	e7d9      	b.n	8007e86 <_printf_common+0x8e>
	...

08007ed4 <_printf_i>:
 8007ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	7e0f      	ldrb	r7, [r1, #24]
 8007eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007edc:	2f78      	cmp	r7, #120	; 0x78
 8007ede:	4691      	mov	r9, r2
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	469a      	mov	sl, r3
 8007ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eea:	d807      	bhi.n	8007efc <_printf_i+0x28>
 8007eec:	2f62      	cmp	r7, #98	; 0x62
 8007eee:	d80a      	bhi.n	8007f06 <_printf_i+0x32>
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	f000 80d8 	beq.w	80080a6 <_printf_i+0x1d2>
 8007ef6:	2f58      	cmp	r7, #88	; 0x58
 8007ef8:	f000 80a3 	beq.w	8008042 <_printf_i+0x16e>
 8007efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f04:	e03a      	b.n	8007f7c <_printf_i+0xa8>
 8007f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f0a:	2b15      	cmp	r3, #21
 8007f0c:	d8f6      	bhi.n	8007efc <_printf_i+0x28>
 8007f0e:	a101      	add	r1, pc, #4	; (adr r1, 8007f14 <_printf_i+0x40>)
 8007f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f14:	08007f6d 	.word	0x08007f6d
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	08007efd 	.word	0x08007efd
 8007f20:	08007efd 	.word	0x08007efd
 8007f24:	08007efd 	.word	0x08007efd
 8007f28:	08007efd 	.word	0x08007efd
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007efd 	.word	0x08007efd
 8007f34:	08007efd 	.word	0x08007efd
 8007f38:	08007efd 	.word	0x08007efd
 8007f3c:	08007efd 	.word	0x08007efd
 8007f40:	0800808d 	.word	0x0800808d
 8007f44:	08007fb1 	.word	0x08007fb1
 8007f48:	0800806f 	.word	0x0800806f
 8007f4c:	08007efd 	.word	0x08007efd
 8007f50:	08007efd 	.word	0x08007efd
 8007f54:	080080af 	.word	0x080080af
 8007f58:	08007efd 	.word	0x08007efd
 8007f5c:	08007fb1 	.word	0x08007fb1
 8007f60:	08007efd 	.word	0x08007efd
 8007f64:	08007efd 	.word	0x08007efd
 8007f68:	08008077 	.word	0x08008077
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	1d1a      	adds	r2, r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	602a      	str	r2, [r5, #0]
 8007f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0a3      	b.n	80080c8 <_printf_i+0x1f4>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	6829      	ldr	r1, [r5, #0]
 8007f84:	0606      	lsls	r6, r0, #24
 8007f86:	f101 0304 	add.w	r3, r1, #4
 8007f8a:	d50a      	bpl.n	8007fa2 <_printf_i+0xce>
 8007f8c:	680e      	ldr	r6, [r1, #0]
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	da03      	bge.n	8007f9c <_printf_i+0xc8>
 8007f94:	232d      	movs	r3, #45	; 0x2d
 8007f96:	4276      	negs	r6, r6
 8007f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f9c:	485e      	ldr	r0, [pc, #376]	; (8008118 <_printf_i+0x244>)
 8007f9e:	230a      	movs	r3, #10
 8007fa0:	e019      	b.n	8007fd6 <_printf_i+0x102>
 8007fa2:	680e      	ldr	r6, [r1, #0]
 8007fa4:	602b      	str	r3, [r5, #0]
 8007fa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007faa:	bf18      	it	ne
 8007fac:	b236      	sxthne	r6, r6
 8007fae:	e7ef      	b.n	8007f90 <_printf_i+0xbc>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	1d19      	adds	r1, r3, #4
 8007fb6:	6029      	str	r1, [r5, #0]
 8007fb8:	0601      	lsls	r1, r0, #24
 8007fba:	d501      	bpl.n	8007fc0 <_printf_i+0xec>
 8007fbc:	681e      	ldr	r6, [r3, #0]
 8007fbe:	e002      	b.n	8007fc6 <_printf_i+0xf2>
 8007fc0:	0646      	lsls	r6, r0, #25
 8007fc2:	d5fb      	bpl.n	8007fbc <_printf_i+0xe8>
 8007fc4:	881e      	ldrh	r6, [r3, #0]
 8007fc6:	4854      	ldr	r0, [pc, #336]	; (8008118 <_printf_i+0x244>)
 8007fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8007fca:	bf0c      	ite	eq
 8007fcc:	2308      	moveq	r3, #8
 8007fce:	230a      	movne	r3, #10
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fd6:	6865      	ldr	r5, [r4, #4]
 8007fd8:	60a5      	str	r5, [r4, #8]
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	bfa2      	ittt	ge
 8007fde:	6821      	ldrge	r1, [r4, #0]
 8007fe0:	f021 0104 	bicge.w	r1, r1, #4
 8007fe4:	6021      	strge	r1, [r4, #0]
 8007fe6:	b90e      	cbnz	r6, 8007fec <_printf_i+0x118>
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	d04d      	beq.n	8008088 <_printf_i+0x1b4>
 8007fec:	4615      	mov	r5, r2
 8007fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ff6:	5dc7      	ldrb	r7, [r0, r7]
 8007ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ffc:	4637      	mov	r7, r6
 8007ffe:	42bb      	cmp	r3, r7
 8008000:	460e      	mov	r6, r1
 8008002:	d9f4      	bls.n	8007fee <_printf_i+0x11a>
 8008004:	2b08      	cmp	r3, #8
 8008006:	d10b      	bne.n	8008020 <_printf_i+0x14c>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	07de      	lsls	r6, r3, #31
 800800c:	d508      	bpl.n	8008020 <_printf_i+0x14c>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	6861      	ldr	r1, [r4, #4]
 8008012:	4299      	cmp	r1, r3
 8008014:	bfde      	ittt	le
 8008016:	2330      	movle	r3, #48	; 0x30
 8008018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800801c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008020:	1b52      	subs	r2, r2, r5
 8008022:	6122      	str	r2, [r4, #16]
 8008024:	f8cd a000 	str.w	sl, [sp]
 8008028:	464b      	mov	r3, r9
 800802a:	aa03      	add	r2, sp, #12
 800802c:	4621      	mov	r1, r4
 800802e:	4640      	mov	r0, r8
 8008030:	f7ff fee2 	bl	8007df8 <_printf_common>
 8008034:	3001      	adds	r0, #1
 8008036:	d14c      	bne.n	80080d2 <_printf_i+0x1fe>
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	b004      	add	sp, #16
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008042:	4835      	ldr	r0, [pc, #212]	; (8008118 <_printf_i+0x244>)
 8008044:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008048:	6829      	ldr	r1, [r5, #0]
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008050:	6029      	str	r1, [r5, #0]
 8008052:	061d      	lsls	r5, r3, #24
 8008054:	d514      	bpl.n	8008080 <_printf_i+0x1ac>
 8008056:	07df      	lsls	r7, r3, #31
 8008058:	bf44      	itt	mi
 800805a:	f043 0320 	orrmi.w	r3, r3, #32
 800805e:	6023      	strmi	r3, [r4, #0]
 8008060:	b91e      	cbnz	r6, 800806a <_printf_i+0x196>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	f023 0320 	bic.w	r3, r3, #32
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	2310      	movs	r3, #16
 800806c:	e7b0      	b.n	8007fd0 <_printf_i+0xfc>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f043 0320 	orr.w	r3, r3, #32
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	2378      	movs	r3, #120	; 0x78
 8008078:	4828      	ldr	r0, [pc, #160]	; (800811c <_printf_i+0x248>)
 800807a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800807e:	e7e3      	b.n	8008048 <_printf_i+0x174>
 8008080:	0659      	lsls	r1, r3, #25
 8008082:	bf48      	it	mi
 8008084:	b2b6      	uxthmi	r6, r6
 8008086:	e7e6      	b.n	8008056 <_printf_i+0x182>
 8008088:	4615      	mov	r5, r2
 800808a:	e7bb      	b.n	8008004 <_printf_i+0x130>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	6826      	ldr	r6, [r4, #0]
 8008090:	6961      	ldr	r1, [r4, #20]
 8008092:	1d18      	adds	r0, r3, #4
 8008094:	6028      	str	r0, [r5, #0]
 8008096:	0635      	lsls	r5, r6, #24
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	d501      	bpl.n	80080a0 <_printf_i+0x1cc>
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	e002      	b.n	80080a6 <_printf_i+0x1d2>
 80080a0:	0670      	lsls	r0, r6, #25
 80080a2:	d5fb      	bpl.n	800809c <_printf_i+0x1c8>
 80080a4:	8019      	strh	r1, [r3, #0]
 80080a6:	2300      	movs	r3, #0
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	4615      	mov	r5, r2
 80080ac:	e7ba      	b.n	8008024 <_printf_i+0x150>
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	602a      	str	r2, [r5, #0]
 80080b4:	681d      	ldr	r5, [r3, #0]
 80080b6:	6862      	ldr	r2, [r4, #4]
 80080b8:	2100      	movs	r1, #0
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7f8 f8b8 	bl	8000230 <memchr>
 80080c0:	b108      	cbz	r0, 80080c6 <_printf_i+0x1f2>
 80080c2:	1b40      	subs	r0, r0, r5
 80080c4:	6060      	str	r0, [r4, #4]
 80080c6:	6863      	ldr	r3, [r4, #4]
 80080c8:	6123      	str	r3, [r4, #16]
 80080ca:	2300      	movs	r3, #0
 80080cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d0:	e7a8      	b.n	8008024 <_printf_i+0x150>
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	462a      	mov	r2, r5
 80080d6:	4649      	mov	r1, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	47d0      	blx	sl
 80080dc:	3001      	adds	r0, #1
 80080de:	d0ab      	beq.n	8008038 <_printf_i+0x164>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	079b      	lsls	r3, r3, #30
 80080e4:	d413      	bmi.n	800810e <_printf_i+0x23a>
 80080e6:	68e0      	ldr	r0, [r4, #12]
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	4298      	cmp	r0, r3
 80080ec:	bfb8      	it	lt
 80080ee:	4618      	movlt	r0, r3
 80080f0:	e7a4      	b.n	800803c <_printf_i+0x168>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4632      	mov	r2, r6
 80080f6:	4649      	mov	r1, r9
 80080f8:	4640      	mov	r0, r8
 80080fa:	47d0      	blx	sl
 80080fc:	3001      	adds	r0, #1
 80080fe:	d09b      	beq.n	8008038 <_printf_i+0x164>
 8008100:	3501      	adds	r5, #1
 8008102:	68e3      	ldr	r3, [r4, #12]
 8008104:	9903      	ldr	r1, [sp, #12]
 8008106:	1a5b      	subs	r3, r3, r1
 8008108:	42ab      	cmp	r3, r5
 800810a:	dcf2      	bgt.n	80080f2 <_printf_i+0x21e>
 800810c:	e7eb      	b.n	80080e6 <_printf_i+0x212>
 800810e:	2500      	movs	r5, #0
 8008110:	f104 0619 	add.w	r6, r4, #25
 8008114:	e7f5      	b.n	8008102 <_printf_i+0x22e>
 8008116:	bf00      	nop
 8008118:	0800b45a 	.word	0x0800b45a
 800811c:	0800b46b 	.word	0x0800b46b

08008120 <siprintf>:
 8008120:	b40e      	push	{r1, r2, r3}
 8008122:	b500      	push	{lr}
 8008124:	b09c      	sub	sp, #112	; 0x70
 8008126:	ab1d      	add	r3, sp, #116	; 0x74
 8008128:	9002      	str	r0, [sp, #8]
 800812a:	9006      	str	r0, [sp, #24]
 800812c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008130:	4809      	ldr	r0, [pc, #36]	; (8008158 <siprintf+0x38>)
 8008132:	9107      	str	r1, [sp, #28]
 8008134:	9104      	str	r1, [sp, #16]
 8008136:	4909      	ldr	r1, [pc, #36]	; (800815c <siprintf+0x3c>)
 8008138:	f853 2b04 	ldr.w	r2, [r3], #4
 800813c:	9105      	str	r1, [sp, #20]
 800813e:	6800      	ldr	r0, [r0, #0]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	a902      	add	r1, sp, #8
 8008144:	f001 fb76 	bl	8009834 <_svfiprintf_r>
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	b01c      	add	sp, #112	; 0x70
 8008150:	f85d eb04 	ldr.w	lr, [sp], #4
 8008154:	b003      	add	sp, #12
 8008156:	4770      	bx	lr
 8008158:	2000002c 	.word	0x2000002c
 800815c:	ffff0208 	.word	0xffff0208

08008160 <quorem>:
 8008160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	6903      	ldr	r3, [r0, #16]
 8008166:	690c      	ldr	r4, [r1, #16]
 8008168:	42a3      	cmp	r3, r4
 800816a:	4607      	mov	r7, r0
 800816c:	f2c0 8081 	blt.w	8008272 <quorem+0x112>
 8008170:	3c01      	subs	r4, #1
 8008172:	f101 0814 	add.w	r8, r1, #20
 8008176:	f100 0514 	add.w	r5, r0, #20
 800817a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008188:	3301      	adds	r3, #1
 800818a:	429a      	cmp	r2, r3
 800818c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008194:	fbb2 f6f3 	udiv	r6, r2, r3
 8008198:	d331      	bcc.n	80081fe <quorem+0x9e>
 800819a:	f04f 0e00 	mov.w	lr, #0
 800819e:	4640      	mov	r0, r8
 80081a0:	46ac      	mov	ip, r5
 80081a2:	46f2      	mov	sl, lr
 80081a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80081a8:	b293      	uxth	r3, r2
 80081aa:	fb06 e303 	mla	r3, r6, r3, lr
 80081ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	ebaa 0303 	sub.w	r3, sl, r3
 80081b8:	f8dc a000 	ldr.w	sl, [ip]
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	fa13 f38a 	uxtah	r3, r3, sl
 80081c2:	fb06 e202 	mla	r2, r6, r2, lr
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ce:	b292      	uxth	r2, r2
 80081d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80081dc:	4581      	cmp	r9, r0
 80081de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e2:	f84c 3b04 	str.w	r3, [ip], #4
 80081e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081ea:	d2db      	bcs.n	80081a4 <quorem+0x44>
 80081ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80081f0:	b92b      	cbnz	r3, 80081fe <quorem+0x9e>
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	429d      	cmp	r5, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	d32e      	bcc.n	800825a <quorem+0xfa>
 80081fc:	613c      	str	r4, [r7, #16]
 80081fe:	4638      	mov	r0, r7
 8008200:	f001 f8c4 	bl	800938c <__mcmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	db24      	blt.n	8008252 <quorem+0xf2>
 8008208:	3601      	adds	r6, #1
 800820a:	4628      	mov	r0, r5
 800820c:	f04f 0c00 	mov.w	ip, #0
 8008210:	f858 2b04 	ldr.w	r2, [r8], #4
 8008214:	f8d0 e000 	ldr.w	lr, [r0]
 8008218:	b293      	uxth	r3, r2
 800821a:	ebac 0303 	sub.w	r3, ip, r3
 800821e:	0c12      	lsrs	r2, r2, #16
 8008220:	fa13 f38e 	uxtah	r3, r3, lr
 8008224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800822c:	b29b      	uxth	r3, r3
 800822e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008232:	45c1      	cmp	r9, r8
 8008234:	f840 3b04 	str.w	r3, [r0], #4
 8008238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800823c:	d2e8      	bcs.n	8008210 <quorem+0xb0>
 800823e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008246:	b922      	cbnz	r2, 8008252 <quorem+0xf2>
 8008248:	3b04      	subs	r3, #4
 800824a:	429d      	cmp	r5, r3
 800824c:	461a      	mov	r2, r3
 800824e:	d30a      	bcc.n	8008266 <quorem+0x106>
 8008250:	613c      	str	r4, [r7, #16]
 8008252:	4630      	mov	r0, r6
 8008254:	b003      	add	sp, #12
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	3b04      	subs	r3, #4
 800825e:	2a00      	cmp	r2, #0
 8008260:	d1cc      	bne.n	80081fc <quorem+0x9c>
 8008262:	3c01      	subs	r4, #1
 8008264:	e7c7      	b.n	80081f6 <quorem+0x96>
 8008266:	6812      	ldr	r2, [r2, #0]
 8008268:	3b04      	subs	r3, #4
 800826a:	2a00      	cmp	r2, #0
 800826c:	d1f0      	bne.n	8008250 <quorem+0xf0>
 800826e:	3c01      	subs	r4, #1
 8008270:	e7eb      	b.n	800824a <quorem+0xea>
 8008272:	2000      	movs	r0, #0
 8008274:	e7ee      	b.n	8008254 <quorem+0xf4>
	...

08008278 <_dtoa_r>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	ed2d 8b04 	vpush	{d8-d9}
 8008280:	ec57 6b10 	vmov	r6, r7, d0
 8008284:	b093      	sub	sp, #76	; 0x4c
 8008286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800828c:	9106      	str	r1, [sp, #24]
 800828e:	ee10 aa10 	vmov	sl, s0
 8008292:	4604      	mov	r4, r0
 8008294:	9209      	str	r2, [sp, #36]	; 0x24
 8008296:	930c      	str	r3, [sp, #48]	; 0x30
 8008298:	46bb      	mov	fp, r7
 800829a:	b975      	cbnz	r5, 80082ba <_dtoa_r+0x42>
 800829c:	2010      	movs	r0, #16
 800829e:	f000 fddd 	bl	8008e5c <malloc>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6260      	str	r0, [r4, #36]	; 0x24
 80082a6:	b920      	cbnz	r0, 80082b2 <_dtoa_r+0x3a>
 80082a8:	4ba7      	ldr	r3, [pc, #668]	; (8008548 <_dtoa_r+0x2d0>)
 80082aa:	21ea      	movs	r1, #234	; 0xea
 80082ac:	48a7      	ldr	r0, [pc, #668]	; (800854c <_dtoa_r+0x2d4>)
 80082ae:	f001 fbd1 	bl	8009a54 <__assert_func>
 80082b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082b6:	6005      	str	r5, [r0, #0]
 80082b8:	60c5      	str	r5, [r0, #12]
 80082ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	b151      	cbz	r1, 80082d6 <_dtoa_r+0x5e>
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	604a      	str	r2, [r1, #4]
 80082c4:	2301      	movs	r3, #1
 80082c6:	4093      	lsls	r3, r2
 80082c8:	608b      	str	r3, [r1, #8]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fe1c 	bl	8008f08 <_Bfree>
 80082d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	1e3b      	subs	r3, r7, #0
 80082d8:	bfaa      	itet	ge
 80082da:	2300      	movge	r3, #0
 80082dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082e0:	f8c8 3000 	strge.w	r3, [r8]
 80082e4:	4b9a      	ldr	r3, [pc, #616]	; (8008550 <_dtoa_r+0x2d8>)
 80082e6:	bfbc      	itt	lt
 80082e8:	2201      	movlt	r2, #1
 80082ea:	f8c8 2000 	strlt.w	r2, [r8]
 80082ee:	ea33 030b 	bics.w	r3, r3, fp
 80082f2:	d11b      	bne.n	800832c <_dtoa_r+0xb4>
 80082f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008300:	4333      	orrs	r3, r6
 8008302:	f000 8592 	beq.w	8008e2a <_dtoa_r+0xbb2>
 8008306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008308:	b963      	cbnz	r3, 8008324 <_dtoa_r+0xac>
 800830a:	4b92      	ldr	r3, [pc, #584]	; (8008554 <_dtoa_r+0x2dc>)
 800830c:	e022      	b.n	8008354 <_dtoa_r+0xdc>
 800830e:	4b92      	ldr	r3, [pc, #584]	; (8008558 <_dtoa_r+0x2e0>)
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	3308      	adds	r3, #8
 8008314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	b013      	add	sp, #76	; 0x4c
 800831c:	ecbd 8b04 	vpop	{d8-d9}
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	4b8b      	ldr	r3, [pc, #556]	; (8008554 <_dtoa_r+0x2dc>)
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	3303      	adds	r3, #3
 800832a:	e7f3      	b.n	8008314 <_dtoa_r+0x9c>
 800832c:	2200      	movs	r2, #0
 800832e:	2300      	movs	r3, #0
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	f7f8 fbf0 	bl	8000b18 <__aeabi_dcmpeq>
 8008338:	ec4b ab19 	vmov	d9, sl, fp
 800833c:	4680      	mov	r8, r0
 800833e:	b158      	cbz	r0, 8008358 <_dtoa_r+0xe0>
 8008340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008342:	2301      	movs	r3, #1
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 856b 	beq.w	8008e24 <_dtoa_r+0xbac>
 800834e:	4883      	ldr	r0, [pc, #524]	; (800855c <_dtoa_r+0x2e4>)
 8008350:	6018      	str	r0, [r3, #0]
 8008352:	1e43      	subs	r3, r0, #1
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	e7df      	b.n	8008318 <_dtoa_r+0xa0>
 8008358:	ec4b ab10 	vmov	d0, sl, fp
 800835c:	aa10      	add	r2, sp, #64	; 0x40
 800835e:	a911      	add	r1, sp, #68	; 0x44
 8008360:	4620      	mov	r0, r4
 8008362:	f001 f8b9 	bl	80094d8 <__d2b>
 8008366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800836a:	ee08 0a10 	vmov	s16, r0
 800836e:	2d00      	cmp	r5, #0
 8008370:	f000 8084 	beq.w	800847c <_dtoa_r+0x204>
 8008374:	ee19 3a90 	vmov	r3, s19
 8008378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800837c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008380:	4656      	mov	r6, sl
 8008382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800838a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800838e:	4b74      	ldr	r3, [pc, #464]	; (8008560 <_dtoa_r+0x2e8>)
 8008390:	2200      	movs	r2, #0
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff9f 	bl	80002d8 <__aeabi_dsub>
 800839a:	a365      	add	r3, pc, #404	; (adr r3, 8008530 <_dtoa_r+0x2b8>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f8 f952 	bl	8000648 <__aeabi_dmul>
 80083a4:	a364      	add	r3, pc, #400	; (adr r3, 8008538 <_dtoa_r+0x2c0>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f7 ff97 	bl	80002dc <__adddf3>
 80083ae:	4606      	mov	r6, r0
 80083b0:	4628      	mov	r0, r5
 80083b2:	460f      	mov	r7, r1
 80083b4:	f7f8 f8de 	bl	8000574 <__aeabi_i2d>
 80083b8:	a361      	add	r3, pc, #388	; (adr r3, 8008540 <_dtoa_r+0x2c8>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 f943 	bl	8000648 <__aeabi_dmul>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f7 ff87 	bl	80002dc <__adddf3>
 80083ce:	4606      	mov	r6, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	f7f8 fbe9 	bl	8000ba8 <__aeabi_d2iz>
 80083d6:	2200      	movs	r2, #0
 80083d8:	9000      	str	r0, [sp, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 fba4 	bl	8000b2c <__aeabi_dcmplt>
 80083e4:	b150      	cbz	r0, 80083fc <_dtoa_r+0x184>
 80083e6:	9800      	ldr	r0, [sp, #0]
 80083e8:	f7f8 f8c4 	bl	8000574 <__aeabi_i2d>
 80083ec:	4632      	mov	r2, r6
 80083ee:	463b      	mov	r3, r7
 80083f0:	f7f8 fb92 	bl	8000b18 <__aeabi_dcmpeq>
 80083f4:	b910      	cbnz	r0, 80083fc <_dtoa_r+0x184>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	2b16      	cmp	r3, #22
 8008400:	d85a      	bhi.n	80084b8 <_dtoa_r+0x240>
 8008402:	9a00      	ldr	r2, [sp, #0]
 8008404:	4b57      	ldr	r3, [pc, #348]	; (8008564 <_dtoa_r+0x2ec>)
 8008406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	ec51 0b19 	vmov	r0, r1, d9
 8008412:	f7f8 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	d050      	beq.n	80084bc <_dtoa_r+0x244>
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	3b01      	subs	r3, #1
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	930b      	str	r3, [sp, #44]	; 0x2c
 8008424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008426:	1b5d      	subs	r5, r3, r5
 8008428:	1e6b      	subs	r3, r5, #1
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	bf45      	ittet	mi
 800842e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008432:	9304      	strmi	r3, [sp, #16]
 8008434:	2300      	movpl	r3, #0
 8008436:	2300      	movmi	r3, #0
 8008438:	bf4c      	ite	mi
 800843a:	9305      	strmi	r3, [sp, #20]
 800843c:	9304      	strpl	r3, [sp, #16]
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	db3d      	blt.n	80084c0 <_dtoa_r+0x248>
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	9a00      	ldr	r2, [sp, #0]
 8008448:	920a      	str	r2, [sp, #40]	; 0x28
 800844a:	4413      	add	r3, r2
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	2300      	movs	r3, #0
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	9b06      	ldr	r3, [sp, #24]
 8008454:	2b09      	cmp	r3, #9
 8008456:	f200 8089 	bhi.w	800856c <_dtoa_r+0x2f4>
 800845a:	2b05      	cmp	r3, #5
 800845c:	bfc4      	itt	gt
 800845e:	3b04      	subgt	r3, #4
 8008460:	9306      	strgt	r3, [sp, #24]
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	f1a3 0302 	sub.w	r3, r3, #2
 8008468:	bfcc      	ite	gt
 800846a:	2500      	movgt	r5, #0
 800846c:	2501      	movle	r5, #1
 800846e:	2b03      	cmp	r3, #3
 8008470:	f200 8087 	bhi.w	8008582 <_dtoa_r+0x30a>
 8008474:	e8df f003 	tbb	[pc, r3]
 8008478:	59383a2d 	.word	0x59383a2d
 800847c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008480:	441d      	add	r5, r3
 8008482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008486:	2b20      	cmp	r3, #32
 8008488:	bfc1      	itttt	gt
 800848a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800848e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008492:	fa0b f303 	lslgt.w	r3, fp, r3
 8008496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800849a:	bfda      	itte	le
 800849c:	f1c3 0320 	rsble	r3, r3, #32
 80084a0:	fa06 f003 	lslle.w	r0, r6, r3
 80084a4:	4318      	orrgt	r0, r3
 80084a6:	f7f8 f855 	bl	8000554 <__aeabi_ui2d>
 80084aa:	2301      	movs	r3, #1
 80084ac:	4606      	mov	r6, r0
 80084ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084b2:	3d01      	subs	r5, #1
 80084b4:	930e      	str	r3, [sp, #56]	; 0x38
 80084b6:	e76a      	b.n	800838e <_dtoa_r+0x116>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7b2      	b.n	8008422 <_dtoa_r+0x1aa>
 80084bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80084be:	e7b1      	b.n	8008424 <_dtoa_r+0x1ac>
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	9a00      	ldr	r2, [sp, #0]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	9304      	str	r3, [sp, #16]
 80084c8:	4253      	negs	r3, r2
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	2300      	movs	r3, #0
 80084ce:	930a      	str	r3, [sp, #40]	; 0x28
 80084d0:	e7bf      	b.n	8008452 <_dtoa_r+0x1da>
 80084d2:	2300      	movs	r3, #0
 80084d4:	9308      	str	r3, [sp, #32]
 80084d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dc55      	bgt.n	8008588 <_dtoa_r+0x310>
 80084dc:	2301      	movs	r3, #1
 80084de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084e2:	461a      	mov	r2, r3
 80084e4:	9209      	str	r2, [sp, #36]	; 0x24
 80084e6:	e00c      	b.n	8008502 <_dtoa_r+0x28a>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e7f3      	b.n	80084d4 <_dtoa_r+0x25c>
 80084ec:	2300      	movs	r3, #0
 80084ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f0:	9308      	str	r3, [sp, #32]
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	9302      	str	r3, [sp, #8]
 80084f8:	3301      	adds	r3, #1
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	9303      	str	r3, [sp, #12]
 80084fe:	bfb8      	it	lt
 8008500:	2301      	movlt	r3, #1
 8008502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008504:	2200      	movs	r2, #0
 8008506:	6042      	str	r2, [r0, #4]
 8008508:	2204      	movs	r2, #4
 800850a:	f102 0614 	add.w	r6, r2, #20
 800850e:	429e      	cmp	r6, r3
 8008510:	6841      	ldr	r1, [r0, #4]
 8008512:	d93d      	bls.n	8008590 <_dtoa_r+0x318>
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fcb7 	bl	8008e88 <_Balloc>
 800851a:	9001      	str	r0, [sp, #4]
 800851c:	2800      	cmp	r0, #0
 800851e:	d13b      	bne.n	8008598 <_dtoa_r+0x320>
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <_dtoa_r+0x2f0>)
 8008522:	4602      	mov	r2, r0
 8008524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008528:	e6c0      	b.n	80082ac <_dtoa_r+0x34>
 800852a:	2301      	movs	r3, #1
 800852c:	e7df      	b.n	80084ee <_dtoa_r+0x276>
 800852e:	bf00      	nop
 8008530:	636f4361 	.word	0x636f4361
 8008534:	3fd287a7 	.word	0x3fd287a7
 8008538:	8b60c8b3 	.word	0x8b60c8b3
 800853c:	3fc68a28 	.word	0x3fc68a28
 8008540:	509f79fb 	.word	0x509f79fb
 8008544:	3fd34413 	.word	0x3fd34413
 8008548:	0800b489 	.word	0x0800b489
 800854c:	0800b4a0 	.word	0x0800b4a0
 8008550:	7ff00000 	.word	0x7ff00000
 8008554:	0800b485 	.word	0x0800b485
 8008558:	0800b47c 	.word	0x0800b47c
 800855c:	0800b459 	.word	0x0800b459
 8008560:	3ff80000 	.word	0x3ff80000
 8008564:	0800b590 	.word	0x0800b590
 8008568:	0800b4fb 	.word	0x0800b4fb
 800856c:	2501      	movs	r5, #1
 800856e:	2300      	movs	r3, #0
 8008570:	9306      	str	r3, [sp, #24]
 8008572:	9508      	str	r5, [sp, #32]
 8008574:	f04f 33ff 	mov.w	r3, #4294967295
 8008578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800857c:	2200      	movs	r2, #0
 800857e:	2312      	movs	r3, #18
 8008580:	e7b0      	b.n	80084e4 <_dtoa_r+0x26c>
 8008582:	2301      	movs	r3, #1
 8008584:	9308      	str	r3, [sp, #32]
 8008586:	e7f5      	b.n	8008574 <_dtoa_r+0x2fc>
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800858e:	e7b8      	b.n	8008502 <_dtoa_r+0x28a>
 8008590:	3101      	adds	r1, #1
 8008592:	6041      	str	r1, [r0, #4]
 8008594:	0052      	lsls	r2, r2, #1
 8008596:	e7b8      	b.n	800850a <_dtoa_r+0x292>
 8008598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	2b0e      	cmp	r3, #14
 80085a2:	f200 809d 	bhi.w	80086e0 <_dtoa_r+0x468>
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	f000 809a 	beq.w	80086e0 <_dtoa_r+0x468>
 80085ac:	9b00      	ldr	r3, [sp, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dd32      	ble.n	8008618 <_dtoa_r+0x3a0>
 80085b2:	4ab7      	ldr	r2, [pc, #732]	; (8008890 <_dtoa_r+0x618>)
 80085b4:	f003 030f 	and.w	r3, r3, #15
 80085b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085c0:	9b00      	ldr	r3, [sp, #0]
 80085c2:	05d8      	lsls	r0, r3, #23
 80085c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80085c8:	d516      	bpl.n	80085f8 <_dtoa_r+0x380>
 80085ca:	4bb2      	ldr	r3, [pc, #712]	; (8008894 <_dtoa_r+0x61c>)
 80085cc:	ec51 0b19 	vmov	r0, r1, d9
 80085d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085d4:	f7f8 f962 	bl	800089c <__aeabi_ddiv>
 80085d8:	f007 070f 	and.w	r7, r7, #15
 80085dc:	4682      	mov	sl, r0
 80085de:	468b      	mov	fp, r1
 80085e0:	2503      	movs	r5, #3
 80085e2:	4eac      	ldr	r6, [pc, #688]	; (8008894 <_dtoa_r+0x61c>)
 80085e4:	b957      	cbnz	r7, 80085fc <_dtoa_r+0x384>
 80085e6:	4642      	mov	r2, r8
 80085e8:	464b      	mov	r3, r9
 80085ea:	4650      	mov	r0, sl
 80085ec:	4659      	mov	r1, fp
 80085ee:	f7f8 f955 	bl	800089c <__aeabi_ddiv>
 80085f2:	4682      	mov	sl, r0
 80085f4:	468b      	mov	fp, r1
 80085f6:	e028      	b.n	800864a <_dtoa_r+0x3d2>
 80085f8:	2502      	movs	r5, #2
 80085fa:	e7f2      	b.n	80085e2 <_dtoa_r+0x36a>
 80085fc:	07f9      	lsls	r1, r7, #31
 80085fe:	d508      	bpl.n	8008612 <_dtoa_r+0x39a>
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008608:	f7f8 f81e 	bl	8000648 <__aeabi_dmul>
 800860c:	3501      	adds	r5, #1
 800860e:	4680      	mov	r8, r0
 8008610:	4689      	mov	r9, r1
 8008612:	107f      	asrs	r7, r7, #1
 8008614:	3608      	adds	r6, #8
 8008616:	e7e5      	b.n	80085e4 <_dtoa_r+0x36c>
 8008618:	f000 809b 	beq.w	8008752 <_dtoa_r+0x4da>
 800861c:	9b00      	ldr	r3, [sp, #0]
 800861e:	4f9d      	ldr	r7, [pc, #628]	; (8008894 <_dtoa_r+0x61c>)
 8008620:	425e      	negs	r6, r3
 8008622:	4b9b      	ldr	r3, [pc, #620]	; (8008890 <_dtoa_r+0x618>)
 8008624:	f006 020f 	and.w	r2, r6, #15
 8008628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	ec51 0b19 	vmov	r0, r1, d9
 8008634:	f7f8 f808 	bl	8000648 <__aeabi_dmul>
 8008638:	1136      	asrs	r6, r6, #4
 800863a:	4682      	mov	sl, r0
 800863c:	468b      	mov	fp, r1
 800863e:	2300      	movs	r3, #0
 8008640:	2502      	movs	r5, #2
 8008642:	2e00      	cmp	r6, #0
 8008644:	d17a      	bne.n	800873c <_dtoa_r+0x4c4>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1d3      	bne.n	80085f2 <_dtoa_r+0x37a>
 800864a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8082 	beq.w	8008756 <_dtoa_r+0x4de>
 8008652:	4b91      	ldr	r3, [pc, #580]	; (8008898 <_dtoa_r+0x620>)
 8008654:	2200      	movs	r2, #0
 8008656:	4650      	mov	r0, sl
 8008658:	4659      	mov	r1, fp
 800865a:	f7f8 fa67 	bl	8000b2c <__aeabi_dcmplt>
 800865e:	2800      	cmp	r0, #0
 8008660:	d079      	beq.n	8008756 <_dtoa_r+0x4de>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d076      	beq.n	8008756 <_dtoa_r+0x4de>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	dd36      	ble.n	80086dc <_dtoa_r+0x464>
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	1e5f      	subs	r7, r3, #1
 8008676:	2200      	movs	r2, #0
 8008678:	4b88      	ldr	r3, [pc, #544]	; (800889c <_dtoa_r+0x624>)
 800867a:	f7f7 ffe5 	bl	8000648 <__aeabi_dmul>
 800867e:	9e02      	ldr	r6, [sp, #8]
 8008680:	4682      	mov	sl, r0
 8008682:	468b      	mov	fp, r1
 8008684:	3501      	adds	r5, #1
 8008686:	4628      	mov	r0, r5
 8008688:	f7f7 ff74 	bl	8000574 <__aeabi_i2d>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	f7f7 ffda 	bl	8000648 <__aeabi_dmul>
 8008694:	4b82      	ldr	r3, [pc, #520]	; (80088a0 <_dtoa_r+0x628>)
 8008696:	2200      	movs	r2, #0
 8008698:	f7f7 fe20 	bl	80002dc <__adddf3>
 800869c:	46d0      	mov	r8, sl
 800869e:	46d9      	mov	r9, fp
 80086a0:	4682      	mov	sl, r0
 80086a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d158      	bne.n	800875c <_dtoa_r+0x4e4>
 80086aa:	4b7e      	ldr	r3, [pc, #504]	; (80088a4 <_dtoa_r+0x62c>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f7 fe11 	bl	80002d8 <__aeabi_dsub>
 80086b6:	4652      	mov	r2, sl
 80086b8:	465b      	mov	r3, fp
 80086ba:	4680      	mov	r8, r0
 80086bc:	4689      	mov	r9, r1
 80086be:	f7f8 fa53 	bl	8000b68 <__aeabi_dcmpgt>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f040 8295 	bne.w	8008bf2 <_dtoa_r+0x97a>
 80086c8:	4652      	mov	r2, sl
 80086ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f8 fa2b 	bl	8000b2c <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f040 8289 	bne.w	8008bee <_dtoa_r+0x976>
 80086dc:	ec5b ab19 	vmov	sl, fp, d9
 80086e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f2c0 8148 	blt.w	8008978 <_dtoa_r+0x700>
 80086e8:	9a00      	ldr	r2, [sp, #0]
 80086ea:	2a0e      	cmp	r2, #14
 80086ec:	f300 8144 	bgt.w	8008978 <_dtoa_r+0x700>
 80086f0:	4b67      	ldr	r3, [pc, #412]	; (8008890 <_dtoa_r+0x618>)
 80086f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f280 80d5 	bge.w	80088ac <_dtoa_r+0x634>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f300 80d1 	bgt.w	80088ac <_dtoa_r+0x634>
 800870a:	f040 826f 	bne.w	8008bec <_dtoa_r+0x974>
 800870e:	4b65      	ldr	r3, [pc, #404]	; (80088a4 <_dtoa_r+0x62c>)
 8008710:	2200      	movs	r2, #0
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 ff97 	bl	8000648 <__aeabi_dmul>
 800871a:	4652      	mov	r2, sl
 800871c:	465b      	mov	r3, fp
 800871e:	f7f8 fa19 	bl	8000b54 <__aeabi_dcmpge>
 8008722:	9e03      	ldr	r6, [sp, #12]
 8008724:	4637      	mov	r7, r6
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8245 	bne.w	8008bb6 <_dtoa_r+0x93e>
 800872c:	9d01      	ldr	r5, [sp, #4]
 800872e:	2331      	movs	r3, #49	; 0x31
 8008730:	f805 3b01 	strb.w	r3, [r5], #1
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	3301      	adds	r3, #1
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	e240      	b.n	8008bbe <_dtoa_r+0x946>
 800873c:	07f2      	lsls	r2, r6, #31
 800873e:	d505      	bpl.n	800874c <_dtoa_r+0x4d4>
 8008740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008744:	f7f7 ff80 	bl	8000648 <__aeabi_dmul>
 8008748:	3501      	adds	r5, #1
 800874a:	2301      	movs	r3, #1
 800874c:	1076      	asrs	r6, r6, #1
 800874e:	3708      	adds	r7, #8
 8008750:	e777      	b.n	8008642 <_dtoa_r+0x3ca>
 8008752:	2502      	movs	r5, #2
 8008754:	e779      	b.n	800864a <_dtoa_r+0x3d2>
 8008756:	9f00      	ldr	r7, [sp, #0]
 8008758:	9e03      	ldr	r6, [sp, #12]
 800875a:	e794      	b.n	8008686 <_dtoa_r+0x40e>
 800875c:	9901      	ldr	r1, [sp, #4]
 800875e:	4b4c      	ldr	r3, [pc, #304]	; (8008890 <_dtoa_r+0x618>)
 8008760:	4431      	add	r1, r6
 8008762:	910d      	str	r1, [sp, #52]	; 0x34
 8008764:	9908      	ldr	r1, [sp, #32]
 8008766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800876a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800876e:	2900      	cmp	r1, #0
 8008770:	d043      	beq.n	80087fa <_dtoa_r+0x582>
 8008772:	494d      	ldr	r1, [pc, #308]	; (80088a8 <_dtoa_r+0x630>)
 8008774:	2000      	movs	r0, #0
 8008776:	f7f8 f891 	bl	800089c <__aeabi_ddiv>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f7 fdab 	bl	80002d8 <__aeabi_dsub>
 8008782:	9d01      	ldr	r5, [sp, #4]
 8008784:	4682      	mov	sl, r0
 8008786:	468b      	mov	fp, r1
 8008788:	4649      	mov	r1, r9
 800878a:	4640      	mov	r0, r8
 800878c:	f7f8 fa0c 	bl	8000ba8 <__aeabi_d2iz>
 8008790:	4606      	mov	r6, r0
 8008792:	f7f7 feef 	bl	8000574 <__aeabi_i2d>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 fd9b 	bl	80002d8 <__aeabi_dsub>
 80087a2:	3630      	adds	r6, #48	; 0x30
 80087a4:	f805 6b01 	strb.w	r6, [r5], #1
 80087a8:	4652      	mov	r2, sl
 80087aa:	465b      	mov	r3, fp
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	f7f8 f9bc 	bl	8000b2c <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d163      	bne.n	8008880 <_dtoa_r+0x608>
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	4936      	ldr	r1, [pc, #216]	; (8008898 <_dtoa_r+0x620>)
 80087be:	2000      	movs	r0, #0
 80087c0:	f7f7 fd8a 	bl	80002d8 <__aeabi_dsub>
 80087c4:	4652      	mov	r2, sl
 80087c6:	465b      	mov	r3, fp
 80087c8:	f7f8 f9b0 	bl	8000b2c <__aeabi_dcmplt>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f040 80b5 	bne.w	800893c <_dtoa_r+0x6c4>
 80087d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d4:	429d      	cmp	r5, r3
 80087d6:	d081      	beq.n	80086dc <_dtoa_r+0x464>
 80087d8:	4b30      	ldr	r3, [pc, #192]	; (800889c <_dtoa_r+0x624>)
 80087da:	2200      	movs	r2, #0
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 ff32 	bl	8000648 <__aeabi_dmul>
 80087e4:	4b2d      	ldr	r3, [pc, #180]	; (800889c <_dtoa_r+0x624>)
 80087e6:	4682      	mov	sl, r0
 80087e8:	468b      	mov	fp, r1
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	2200      	movs	r2, #0
 80087f0:	f7f7 ff2a 	bl	8000648 <__aeabi_dmul>
 80087f4:	4680      	mov	r8, r0
 80087f6:	4689      	mov	r9, r1
 80087f8:	e7c6      	b.n	8008788 <_dtoa_r+0x510>
 80087fa:	4650      	mov	r0, sl
 80087fc:	4659      	mov	r1, fp
 80087fe:	f7f7 ff23 	bl	8000648 <__aeabi_dmul>
 8008802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008804:	9d01      	ldr	r5, [sp, #4]
 8008806:	930f      	str	r3, [sp, #60]	; 0x3c
 8008808:	4682      	mov	sl, r0
 800880a:	468b      	mov	fp, r1
 800880c:	4649      	mov	r1, r9
 800880e:	4640      	mov	r0, r8
 8008810:	f7f8 f9ca 	bl	8000ba8 <__aeabi_d2iz>
 8008814:	4606      	mov	r6, r0
 8008816:	f7f7 fead 	bl	8000574 <__aeabi_i2d>
 800881a:	3630      	adds	r6, #48	; 0x30
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4640      	mov	r0, r8
 8008822:	4649      	mov	r1, r9
 8008824:	f7f7 fd58 	bl	80002d8 <__aeabi_dsub>
 8008828:	f805 6b01 	strb.w	r6, [r5], #1
 800882c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882e:	429d      	cmp	r5, r3
 8008830:	4680      	mov	r8, r0
 8008832:	4689      	mov	r9, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	d124      	bne.n	8008884 <_dtoa_r+0x60c>
 800883a:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <_dtoa_r+0x630>)
 800883c:	4650      	mov	r0, sl
 800883e:	4659      	mov	r1, fp
 8008840:	f7f7 fd4c 	bl	80002dc <__adddf3>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f8 f98c 	bl	8000b68 <__aeabi_dcmpgt>
 8008850:	2800      	cmp	r0, #0
 8008852:	d173      	bne.n	800893c <_dtoa_r+0x6c4>
 8008854:	4652      	mov	r2, sl
 8008856:	465b      	mov	r3, fp
 8008858:	4913      	ldr	r1, [pc, #76]	; (80088a8 <_dtoa_r+0x630>)
 800885a:	2000      	movs	r0, #0
 800885c:	f7f7 fd3c 	bl	80002d8 <__aeabi_dsub>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7f8 f960 	bl	8000b2c <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	f43f af35 	beq.w	80086dc <_dtoa_r+0x464>
 8008872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008874:	1e6b      	subs	r3, r5, #1
 8008876:	930f      	str	r3, [sp, #60]	; 0x3c
 8008878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800887c:	2b30      	cmp	r3, #48	; 0x30
 800887e:	d0f8      	beq.n	8008872 <_dtoa_r+0x5fa>
 8008880:	9700      	str	r7, [sp, #0]
 8008882:	e049      	b.n	8008918 <_dtoa_r+0x6a0>
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <_dtoa_r+0x624>)
 8008886:	f7f7 fedf 	bl	8000648 <__aeabi_dmul>
 800888a:	4680      	mov	r8, r0
 800888c:	4689      	mov	r9, r1
 800888e:	e7bd      	b.n	800880c <_dtoa_r+0x594>
 8008890:	0800b590 	.word	0x0800b590
 8008894:	0800b568 	.word	0x0800b568
 8008898:	3ff00000 	.word	0x3ff00000
 800889c:	40240000 	.word	0x40240000
 80088a0:	401c0000 	.word	0x401c0000
 80088a4:	40140000 	.word	0x40140000
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	9d01      	ldr	r5, [sp, #4]
 80088ae:	4656      	mov	r6, sl
 80088b0:	465f      	mov	r7, fp
 80088b2:	4642      	mov	r2, r8
 80088b4:	464b      	mov	r3, r9
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f7 ffef 	bl	800089c <__aeabi_ddiv>
 80088be:	f7f8 f973 	bl	8000ba8 <__aeabi_d2iz>
 80088c2:	4682      	mov	sl, r0
 80088c4:	f7f7 fe56 	bl	8000574 <__aeabi_i2d>
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	f7f7 febc 	bl	8000648 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088dc:	f7f7 fcfc 	bl	80002d8 <__aeabi_dsub>
 80088e0:	f805 6b01 	strb.w	r6, [r5], #1
 80088e4:	9e01      	ldr	r6, [sp, #4]
 80088e6:	9f03      	ldr	r7, [sp, #12]
 80088e8:	1bae      	subs	r6, r5, r6
 80088ea:	42b7      	cmp	r7, r6
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	d135      	bne.n	800895e <_dtoa_r+0x6e6>
 80088f2:	f7f7 fcf3 	bl	80002dc <__adddf3>
 80088f6:	4642      	mov	r2, r8
 80088f8:	464b      	mov	r3, r9
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	f7f8 f933 	bl	8000b68 <__aeabi_dcmpgt>
 8008902:	b9d0      	cbnz	r0, 800893a <_dtoa_r+0x6c2>
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f8 f904 	bl	8000b18 <__aeabi_dcmpeq>
 8008910:	b110      	cbz	r0, 8008918 <_dtoa_r+0x6a0>
 8008912:	f01a 0f01 	tst.w	sl, #1
 8008916:	d110      	bne.n	800893a <_dtoa_r+0x6c2>
 8008918:	4620      	mov	r0, r4
 800891a:	ee18 1a10 	vmov	r1, s16
 800891e:	f000 faf3 	bl	8008f08 <_Bfree>
 8008922:	2300      	movs	r3, #0
 8008924:	9800      	ldr	r0, [sp, #0]
 8008926:	702b      	strb	r3, [r5, #0]
 8008928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800892a:	3001      	adds	r0, #1
 800892c:	6018      	str	r0, [r3, #0]
 800892e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008930:	2b00      	cmp	r3, #0
 8008932:	f43f acf1 	beq.w	8008318 <_dtoa_r+0xa0>
 8008936:	601d      	str	r5, [r3, #0]
 8008938:	e4ee      	b.n	8008318 <_dtoa_r+0xa0>
 800893a:	9f00      	ldr	r7, [sp, #0]
 800893c:	462b      	mov	r3, r5
 800893e:	461d      	mov	r5, r3
 8008940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008944:	2a39      	cmp	r2, #57	; 0x39
 8008946:	d106      	bne.n	8008956 <_dtoa_r+0x6de>
 8008948:	9a01      	ldr	r2, [sp, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d1f7      	bne.n	800893e <_dtoa_r+0x6c6>
 800894e:	9901      	ldr	r1, [sp, #4]
 8008950:	2230      	movs	r2, #48	; 0x30
 8008952:	3701      	adds	r7, #1
 8008954:	700a      	strb	r2, [r1, #0]
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	3201      	adds	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e790      	b.n	8008880 <_dtoa_r+0x608>
 800895e:	4ba6      	ldr	r3, [pc, #664]	; (8008bf8 <_dtoa_r+0x980>)
 8008960:	2200      	movs	r2, #0
 8008962:	f7f7 fe71 	bl	8000648 <__aeabi_dmul>
 8008966:	2200      	movs	r2, #0
 8008968:	2300      	movs	r3, #0
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	f7f8 f8d3 	bl	8000b18 <__aeabi_dcmpeq>
 8008972:	2800      	cmp	r0, #0
 8008974:	d09d      	beq.n	80088b2 <_dtoa_r+0x63a>
 8008976:	e7cf      	b.n	8008918 <_dtoa_r+0x6a0>
 8008978:	9a08      	ldr	r2, [sp, #32]
 800897a:	2a00      	cmp	r2, #0
 800897c:	f000 80d7 	beq.w	8008b2e <_dtoa_r+0x8b6>
 8008980:	9a06      	ldr	r2, [sp, #24]
 8008982:	2a01      	cmp	r2, #1
 8008984:	f300 80ba 	bgt.w	8008afc <_dtoa_r+0x884>
 8008988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800898a:	2a00      	cmp	r2, #0
 800898c:	f000 80b2 	beq.w	8008af4 <_dtoa_r+0x87c>
 8008990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008994:	9e07      	ldr	r6, [sp, #28]
 8008996:	9d04      	ldr	r5, [sp, #16]
 8008998:	9a04      	ldr	r2, [sp, #16]
 800899a:	441a      	add	r2, r3
 800899c:	9204      	str	r2, [sp, #16]
 800899e:	9a05      	ldr	r2, [sp, #20]
 80089a0:	2101      	movs	r1, #1
 80089a2:	441a      	add	r2, r3
 80089a4:	4620      	mov	r0, r4
 80089a6:	9205      	str	r2, [sp, #20]
 80089a8:	f000 fb66 	bl	8009078 <__i2b>
 80089ac:	4607      	mov	r7, r0
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	dd0c      	ble.n	80089cc <_dtoa_r+0x754>
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dd09      	ble.n	80089cc <_dtoa_r+0x754>
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	bfa8      	it	ge
 80089be:	462b      	movge	r3, r5
 80089c0:	1ad2      	subs	r2, r2, r3
 80089c2:	9204      	str	r2, [sp, #16]
 80089c4:	9a05      	ldr	r2, [sp, #20]
 80089c6:	1aed      	subs	r5, r5, r3
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	9305      	str	r3, [sp, #20]
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	b31b      	cbz	r3, 8008a18 <_dtoa_r+0x7a0>
 80089d0:	9b08      	ldr	r3, [sp, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80af 	beq.w	8008b36 <_dtoa_r+0x8be>
 80089d8:	2e00      	cmp	r6, #0
 80089da:	dd13      	ble.n	8008a04 <_dtoa_r+0x78c>
 80089dc:	4639      	mov	r1, r7
 80089de:	4632      	mov	r2, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fc09 	bl	80091f8 <__pow5mult>
 80089e6:	ee18 2a10 	vmov	r2, s16
 80089ea:	4601      	mov	r1, r0
 80089ec:	4607      	mov	r7, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fb58 	bl	80090a4 <__multiply>
 80089f4:	ee18 1a10 	vmov	r1, s16
 80089f8:	4680      	mov	r8, r0
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fa84 	bl	8008f08 <_Bfree>
 8008a00:	ee08 8a10 	vmov	s16, r8
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	1b9a      	subs	r2, r3, r6
 8008a08:	d006      	beq.n	8008a18 <_dtoa_r+0x7a0>
 8008a0a:	ee18 1a10 	vmov	r1, s16
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f000 fbf2 	bl	80091f8 <__pow5mult>
 8008a14:	ee08 0a10 	vmov	s16, r0
 8008a18:	2101      	movs	r1, #1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fb2c 	bl	8009078 <__i2b>
 8008a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	4606      	mov	r6, r0
 8008a26:	f340 8088 	ble.w	8008b3a <_dtoa_r+0x8c2>
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fbe2 	bl	80091f8 <__pow5mult>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	4606      	mov	r6, r0
 8008a3a:	f340 8081 	ble.w	8008b40 <_dtoa_r+0x8c8>
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	6933      	ldr	r3, [r6, #16]
 8008a44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a48:	6918      	ldr	r0, [r3, #16]
 8008a4a:	f000 fac5 	bl	8008fd8 <__hi0bits>
 8008a4e:	f1c0 0020 	rsb	r0, r0, #32
 8008a52:	9b05      	ldr	r3, [sp, #20]
 8008a54:	4418      	add	r0, r3
 8008a56:	f010 001f 	ands.w	r0, r0, #31
 8008a5a:	f000 8092 	beq.w	8008b82 <_dtoa_r+0x90a>
 8008a5e:	f1c0 0320 	rsb	r3, r0, #32
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	f340 808a 	ble.w	8008b7c <_dtoa_r+0x904>
 8008a68:	f1c0 001c 	rsb	r0, r0, #28
 8008a6c:	9b04      	ldr	r3, [sp, #16]
 8008a6e:	4403      	add	r3, r0
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	4403      	add	r3, r0
 8008a76:	4405      	add	r5, r0
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dd07      	ble.n	8008a90 <_dtoa_r+0x818>
 8008a80:	ee18 1a10 	vmov	r1, s16
 8008a84:	461a      	mov	r2, r3
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fc10 	bl	80092ac <__lshift>
 8008a8c:	ee08 0a10 	vmov	s16, r0
 8008a90:	9b05      	ldr	r3, [sp, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	dd05      	ble.n	8008aa2 <_dtoa_r+0x82a>
 8008a96:	4631      	mov	r1, r6
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 fc06 	bl	80092ac <__lshift>
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d06e      	beq.n	8008b86 <_dtoa_r+0x90e>
 8008aa8:	ee18 0a10 	vmov	r0, s16
 8008aac:	4631      	mov	r1, r6
 8008aae:	f000 fc6d 	bl	800938c <__mcmp>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	da67      	bge.n	8008b86 <_dtoa_r+0x90e>
 8008ab6:	9b00      	ldr	r3, [sp, #0]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fa41 	bl	8008f4c <__multadd>
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	ee08 0a10 	vmov	s16, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 81b1 	beq.w	8008e38 <_dtoa_r+0xbc0>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4639      	mov	r1, r7
 8008ada:	220a      	movs	r2, #10
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fa35 	bl	8008f4c <__multadd>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	f300 808e 	bgt.w	8008c08 <_dtoa_r+0x990>
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	dc51      	bgt.n	8008b96 <_dtoa_r+0x91e>
 8008af2:	e089      	b.n	8008c08 <_dtoa_r+0x990>
 8008af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008afa:	e74b      	b.n	8008994 <_dtoa_r+0x71c>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1e5e      	subs	r6, r3, #1
 8008b00:	9b07      	ldr	r3, [sp, #28]
 8008b02:	42b3      	cmp	r3, r6
 8008b04:	bfbf      	itttt	lt
 8008b06:	9b07      	ldrlt	r3, [sp, #28]
 8008b08:	9607      	strlt	r6, [sp, #28]
 8008b0a:	1af2      	sublt	r2, r6, r3
 8008b0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b0e:	bfb6      	itet	lt
 8008b10:	189b      	addlt	r3, r3, r2
 8008b12:	1b9e      	subge	r6, r3, r6
 8008b14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	bfb8      	it	lt
 8008b1a:	2600      	movlt	r6, #0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfb7      	itett	lt
 8008b20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b28:	1a9d      	sublt	r5, r3, r2
 8008b2a:	2300      	movlt	r3, #0
 8008b2c:	e734      	b.n	8008998 <_dtoa_r+0x720>
 8008b2e:	9e07      	ldr	r6, [sp, #28]
 8008b30:	9d04      	ldr	r5, [sp, #16]
 8008b32:	9f08      	ldr	r7, [sp, #32]
 8008b34:	e73b      	b.n	80089ae <_dtoa_r+0x736>
 8008b36:	9a07      	ldr	r2, [sp, #28]
 8008b38:	e767      	b.n	8008a0a <_dtoa_r+0x792>
 8008b3a:	9b06      	ldr	r3, [sp, #24]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	dc18      	bgt.n	8008b72 <_dtoa_r+0x8fa>
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	d115      	bne.n	8008b72 <_dtoa_r+0x8fa>
 8008b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b4a:	b993      	cbnz	r3, 8008b72 <_dtoa_r+0x8fa>
 8008b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b50:	0d1b      	lsrs	r3, r3, #20
 8008b52:	051b      	lsls	r3, r3, #20
 8008b54:	b183      	cbz	r3, 8008b78 <_dtoa_r+0x900>
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	9b05      	ldr	r3, [sp, #20]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	f04f 0801 	mov.w	r8, #1
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f47f af6a 	bne.w	8008a42 <_dtoa_r+0x7ca>
 8008b6e:	2001      	movs	r0, #1
 8008b70:	e76f      	b.n	8008a52 <_dtoa_r+0x7da>
 8008b72:	f04f 0800 	mov.w	r8, #0
 8008b76:	e7f6      	b.n	8008b66 <_dtoa_r+0x8ee>
 8008b78:	4698      	mov	r8, r3
 8008b7a:	e7f4      	b.n	8008b66 <_dtoa_r+0x8ee>
 8008b7c:	f43f af7d 	beq.w	8008a7a <_dtoa_r+0x802>
 8008b80:	4618      	mov	r0, r3
 8008b82:	301c      	adds	r0, #28
 8008b84:	e772      	b.n	8008a6c <_dtoa_r+0x7f4>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc37      	bgt.n	8008bfc <_dtoa_r+0x984>
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	dd34      	ble.n	8008bfc <_dtoa_r+0x984>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	b96b      	cbnz	r3, 8008bb6 <_dtoa_r+0x93e>
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f9d4 	bl	8008f4c <__multadd>
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	ee18 0a10 	vmov	r0, s16
 8008bac:	f000 fbee 	bl	800938c <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f73f adbb 	bgt.w	800872c <_dtoa_r+0x4b4>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb8:	9d01      	ldr	r5, [sp, #4]
 8008bba:	43db      	mvns	r3, r3
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 f99f 	bl	8008f08 <_Bfree>
 8008bca:	2f00      	cmp	r7, #0
 8008bcc:	f43f aea4 	beq.w	8008918 <_dtoa_r+0x6a0>
 8008bd0:	f1b8 0f00 	cmp.w	r8, #0
 8008bd4:	d005      	beq.n	8008be2 <_dtoa_r+0x96a>
 8008bd6:	45b8      	cmp	r8, r7
 8008bd8:	d003      	beq.n	8008be2 <_dtoa_r+0x96a>
 8008bda:	4641      	mov	r1, r8
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 f993 	bl	8008f08 <_Bfree>
 8008be2:	4639      	mov	r1, r7
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 f98f 	bl	8008f08 <_Bfree>
 8008bea:	e695      	b.n	8008918 <_dtoa_r+0x6a0>
 8008bec:	2600      	movs	r6, #0
 8008bee:	4637      	mov	r7, r6
 8008bf0:	e7e1      	b.n	8008bb6 <_dtoa_r+0x93e>
 8008bf2:	9700      	str	r7, [sp, #0]
 8008bf4:	4637      	mov	r7, r6
 8008bf6:	e599      	b.n	800872c <_dtoa_r+0x4b4>
 8008bf8:	40240000 	.word	0x40240000
 8008bfc:	9b08      	ldr	r3, [sp, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80ca 	beq.w	8008d98 <_dtoa_r+0xb20>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	9302      	str	r3, [sp, #8]
 8008c08:	2d00      	cmp	r5, #0
 8008c0a:	dd05      	ble.n	8008c18 <_dtoa_r+0x9a0>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	462a      	mov	r2, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 fb4b 	bl	80092ac <__lshift>
 8008c16:	4607      	mov	r7, r0
 8008c18:	f1b8 0f00 	cmp.w	r8, #0
 8008c1c:	d05b      	beq.n	8008cd6 <_dtoa_r+0xa5e>
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 f931 	bl	8008e88 <_Balloc>
 8008c26:	4605      	mov	r5, r0
 8008c28:	b928      	cbnz	r0, 8008c36 <_dtoa_r+0x9be>
 8008c2a:	4b87      	ldr	r3, [pc, #540]	; (8008e48 <_dtoa_r+0xbd0>)
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c32:	f7ff bb3b 	b.w	80082ac <_dtoa_r+0x34>
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	3202      	adds	r2, #2
 8008c3a:	0092      	lsls	r2, r2, #2
 8008c3c:	f107 010c 	add.w	r1, r7, #12
 8008c40:	300c      	adds	r0, #12
 8008c42:	f000 f913 	bl	8008e6c <memcpy>
 8008c46:	2201      	movs	r2, #1
 8008c48:	4629      	mov	r1, r5
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fb2e 	bl	80092ac <__lshift>
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	f103 0901 	add.w	r9, r3, #1
 8008c56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	f00a 0301 	and.w	r3, sl, #1
 8008c62:	46b8      	mov	r8, r7
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	4607      	mov	r7, r0
 8008c68:	4631      	mov	r1, r6
 8008c6a:	ee18 0a10 	vmov	r0, s16
 8008c6e:	f7ff fa77 	bl	8008160 <quorem>
 8008c72:	4641      	mov	r1, r8
 8008c74:	9002      	str	r0, [sp, #8]
 8008c76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c7a:	ee18 0a10 	vmov	r0, s16
 8008c7e:	f000 fb85 	bl	800938c <__mcmp>
 8008c82:	463a      	mov	r2, r7
 8008c84:	9003      	str	r0, [sp, #12]
 8008c86:	4631      	mov	r1, r6
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fb9b 	bl	80093c4 <__mdiff>
 8008c8e:	68c2      	ldr	r2, [r0, #12]
 8008c90:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c94:	4605      	mov	r5, r0
 8008c96:	bb02      	cbnz	r2, 8008cda <_dtoa_r+0xa62>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	ee18 0a10 	vmov	r0, s16
 8008c9e:	f000 fb75 	bl	800938c <__mcmp>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	9207      	str	r2, [sp, #28]
 8008caa:	f000 f92d 	bl	8008f08 <_Bfree>
 8008cae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008cb2:	ea43 0102 	orr.w	r1, r3, r2
 8008cb6:	9b04      	ldr	r3, [sp, #16]
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	464d      	mov	r5, r9
 8008cbc:	d10f      	bne.n	8008cde <_dtoa_r+0xa66>
 8008cbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cc2:	d02a      	beq.n	8008d1a <_dtoa_r+0xaa2>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	dd02      	ble.n	8008cd0 <_dtoa_r+0xa58>
 8008cca:	9b02      	ldr	r3, [sp, #8]
 8008ccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008cd0:	f88b a000 	strb.w	sl, [fp]
 8008cd4:	e775      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	e7ba      	b.n	8008c50 <_dtoa_r+0x9d8>
 8008cda:	2201      	movs	r2, #1
 8008cdc:	e7e2      	b.n	8008ca4 <_dtoa_r+0xa2c>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	db04      	blt.n	8008cee <_dtoa_r+0xa76>
 8008ce4:	9906      	ldr	r1, [sp, #24]
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	9904      	ldr	r1, [sp, #16]
 8008cea:	430b      	orrs	r3, r1
 8008cec:	d122      	bne.n	8008d34 <_dtoa_r+0xabc>
 8008cee:	2a00      	cmp	r2, #0
 8008cf0:	ddee      	ble.n	8008cd0 <_dtoa_r+0xa58>
 8008cf2:	ee18 1a10 	vmov	r1, s16
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fad7 	bl	80092ac <__lshift>
 8008cfe:	4631      	mov	r1, r6
 8008d00:	ee08 0a10 	vmov	s16, r0
 8008d04:	f000 fb42 	bl	800938c <__mcmp>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dc03      	bgt.n	8008d14 <_dtoa_r+0xa9c>
 8008d0c:	d1e0      	bne.n	8008cd0 <_dtoa_r+0xa58>
 8008d0e:	f01a 0f01 	tst.w	sl, #1
 8008d12:	d0dd      	beq.n	8008cd0 <_dtoa_r+0xa58>
 8008d14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d18:	d1d7      	bne.n	8008cca <_dtoa_r+0xa52>
 8008d1a:	2339      	movs	r3, #57	; 0x39
 8008d1c:	f88b 3000 	strb.w	r3, [fp]
 8008d20:	462b      	mov	r3, r5
 8008d22:	461d      	mov	r5, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d2a:	2a39      	cmp	r2, #57	; 0x39
 8008d2c:	d071      	beq.n	8008e12 <_dtoa_r+0xb9a>
 8008d2e:	3201      	adds	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e746      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	dd07      	ble.n	8008d48 <_dtoa_r+0xad0>
 8008d38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d3c:	d0ed      	beq.n	8008d1a <_dtoa_r+0xaa2>
 8008d3e:	f10a 0301 	add.w	r3, sl, #1
 8008d42:	f88b 3000 	strb.w	r3, [fp]
 8008d46:	e73c      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008d48:	9b05      	ldr	r3, [sp, #20]
 8008d4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d4e:	4599      	cmp	r9, r3
 8008d50:	d047      	beq.n	8008de2 <_dtoa_r+0xb6a>
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	2300      	movs	r3, #0
 8008d58:	220a      	movs	r2, #10
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 f8f6 	bl	8008f4c <__multadd>
 8008d60:	45b8      	cmp	r8, r7
 8008d62:	ee08 0a10 	vmov	s16, r0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	f04f 020a 	mov.w	r2, #10
 8008d6e:	4641      	mov	r1, r8
 8008d70:	4620      	mov	r0, r4
 8008d72:	d106      	bne.n	8008d82 <_dtoa_r+0xb0a>
 8008d74:	f000 f8ea 	bl	8008f4c <__multadd>
 8008d78:	4680      	mov	r8, r0
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	f109 0901 	add.w	r9, r9, #1
 8008d80:	e772      	b.n	8008c68 <_dtoa_r+0x9f0>
 8008d82:	f000 f8e3 	bl	8008f4c <__multadd>
 8008d86:	4639      	mov	r1, r7
 8008d88:	4680      	mov	r8, r0
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f8dc 	bl	8008f4c <__multadd>
 8008d94:	4607      	mov	r7, r0
 8008d96:	e7f1      	b.n	8008d7c <_dtoa_r+0xb04>
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	9302      	str	r3, [sp, #8]
 8008d9c:	9d01      	ldr	r5, [sp, #4]
 8008d9e:	ee18 0a10 	vmov	r0, s16
 8008da2:	4631      	mov	r1, r6
 8008da4:	f7ff f9dc 	bl	8008160 <quorem>
 8008da8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	f805 ab01 	strb.w	sl, [r5], #1
 8008db2:	1aea      	subs	r2, r5, r3
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	4293      	cmp	r3, r2
 8008db8:	dd09      	ble.n	8008dce <_dtoa_r+0xb56>
 8008dba:	ee18 1a10 	vmov	r1, s16
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f8c2 	bl	8008f4c <__multadd>
 8008dc8:	ee08 0a10 	vmov	s16, r0
 8008dcc:	e7e7      	b.n	8008d9e <_dtoa_r+0xb26>
 8008dce:	9b02      	ldr	r3, [sp, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bfc8      	it	gt
 8008dd4:	461d      	movgt	r5, r3
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	bfd8      	it	le
 8008dda:	2501      	movle	r5, #1
 8008ddc:	441d      	add	r5, r3
 8008dde:	f04f 0800 	mov.w	r8, #0
 8008de2:	ee18 1a10 	vmov	r1, s16
 8008de6:	2201      	movs	r2, #1
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 fa5f 	bl	80092ac <__lshift>
 8008dee:	4631      	mov	r1, r6
 8008df0:	ee08 0a10 	vmov	s16, r0
 8008df4:	f000 faca 	bl	800938c <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dc91      	bgt.n	8008d20 <_dtoa_r+0xaa8>
 8008dfc:	d102      	bne.n	8008e04 <_dtoa_r+0xb8c>
 8008dfe:	f01a 0f01 	tst.w	sl, #1
 8008e02:	d18d      	bne.n	8008d20 <_dtoa_r+0xaa8>
 8008e04:	462b      	mov	r3, r5
 8008e06:	461d      	mov	r5, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a30      	cmp	r2, #48	; 0x30
 8008e0e:	d0fa      	beq.n	8008e06 <_dtoa_r+0xb8e>
 8008e10:	e6d7      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008e12:	9a01      	ldr	r2, [sp, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d184      	bne.n	8008d22 <_dtoa_r+0xaaa>
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	2331      	movs	r3, #49	; 0x31
 8008e20:	7013      	strb	r3, [r2, #0]
 8008e22:	e6ce      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <_dtoa_r+0xbd4>)
 8008e26:	f7ff ba95 	b.w	8008354 <_dtoa_r+0xdc>
 8008e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f47f aa6e 	bne.w	800830e <_dtoa_r+0x96>
 8008e32:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <_dtoa_r+0xbd8>)
 8008e34:	f7ff ba8e 	b.w	8008354 <_dtoa_r+0xdc>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dcae      	bgt.n	8008d9c <_dtoa_r+0xb24>
 8008e3e:	9b06      	ldr	r3, [sp, #24]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	f73f aea8 	bgt.w	8008b96 <_dtoa_r+0x91e>
 8008e46:	e7a9      	b.n	8008d9c <_dtoa_r+0xb24>
 8008e48:	0800b4fb 	.word	0x0800b4fb
 8008e4c:	0800b458 	.word	0x0800b458
 8008e50:	0800b47c 	.word	0x0800b47c

08008e54 <_localeconv_r>:
 8008e54:	4800      	ldr	r0, [pc, #0]	; (8008e58 <_localeconv_r+0x4>)
 8008e56:	4770      	bx	lr
 8008e58:	20000180 	.word	0x20000180

08008e5c <malloc>:
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <malloc+0xc>)
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	f000 bc17 	b.w	8009694 <_malloc_r>
 8008e66:	bf00      	nop
 8008e68:	2000002c 	.word	0x2000002c

08008e6c <memcpy>:
 8008e6c:	440a      	add	r2, r1
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e74:	d100      	bne.n	8008e78 <memcpy+0xc>
 8008e76:	4770      	bx	lr
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e82:	4291      	cmp	r1, r2
 8008e84:	d1f9      	bne.n	8008e7a <memcpy+0xe>
 8008e86:	bd10      	pop	{r4, pc}

08008e88 <_Balloc>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	b976      	cbnz	r6, 8008eb0 <_Balloc+0x28>
 8008e92:	2010      	movs	r0, #16
 8008e94:	f7ff ffe2 	bl	8008e5c <malloc>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8008e9c:	b920      	cbnz	r0, 8008ea8 <_Balloc+0x20>
 8008e9e:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <_Balloc+0x78>)
 8008ea0:	4818      	ldr	r0, [pc, #96]	; (8008f04 <_Balloc+0x7c>)
 8008ea2:	2166      	movs	r1, #102	; 0x66
 8008ea4:	f000 fdd6 	bl	8009a54 <__assert_func>
 8008ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eac:	6006      	str	r6, [r0, #0]
 8008eae:	60c6      	str	r6, [r0, #12]
 8008eb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eb2:	68f3      	ldr	r3, [r6, #12]
 8008eb4:	b183      	cbz	r3, 8008ed8 <_Balloc+0x50>
 8008eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ebe:	b9b8      	cbnz	r0, 8008ef0 <_Balloc+0x68>
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ec6:	1d72      	adds	r2, r6, #5
 8008ec8:	0092      	lsls	r2, r2, #2
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fb60 	bl	8009590 <_calloc_r>
 8008ed0:	b160      	cbz	r0, 8008eec <_Balloc+0x64>
 8008ed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ed6:	e00e      	b.n	8008ef6 <_Balloc+0x6e>
 8008ed8:	2221      	movs	r2, #33	; 0x21
 8008eda:	2104      	movs	r1, #4
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fb57 	bl	8009590 <_calloc_r>
 8008ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee4:	60f0      	str	r0, [r6, #12]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e4      	bne.n	8008eb6 <_Balloc+0x2e>
 8008eec:	2000      	movs	r0, #0
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	6802      	ldr	r2, [r0, #0]
 8008ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008efc:	e7f7      	b.n	8008eee <_Balloc+0x66>
 8008efe:	bf00      	nop
 8008f00:	0800b489 	.word	0x0800b489
 8008f04:	0800b50c 	.word	0x0800b50c

08008f08 <_Bfree>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	b976      	cbnz	r6, 8008f30 <_Bfree+0x28>
 8008f12:	2010      	movs	r0, #16
 8008f14:	f7ff ffa2 	bl	8008e5c <malloc>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f1c:	b920      	cbnz	r0, 8008f28 <_Bfree+0x20>
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <_Bfree+0x3c>)
 8008f20:	4809      	ldr	r0, [pc, #36]	; (8008f48 <_Bfree+0x40>)
 8008f22:	218a      	movs	r1, #138	; 0x8a
 8008f24:	f000 fd96 	bl	8009a54 <__assert_func>
 8008f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f2c:	6006      	str	r6, [r0, #0]
 8008f2e:	60c6      	str	r6, [r0, #12]
 8008f30:	b13c      	cbz	r4, 8008f42 <_Bfree+0x3a>
 8008f32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f34:	6862      	ldr	r2, [r4, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f3c:	6021      	str	r1, [r4, #0]
 8008f3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	0800b489 	.word	0x0800b489
 8008f48:	0800b50c 	.word	0x0800b50c

08008f4c <__multadd>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	690d      	ldr	r5, [r1, #16]
 8008f52:	4607      	mov	r7, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	461e      	mov	r6, r3
 8008f58:	f101 0c14 	add.w	ip, r1, #20
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f62:	b299      	uxth	r1, r3
 8008f64:	fb02 6101 	mla	r1, r2, r1, r6
 8008f68:	0c1e      	lsrs	r6, r3, #16
 8008f6a:	0c0b      	lsrs	r3, r1, #16
 8008f6c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f70:	b289      	uxth	r1, r1
 8008f72:	3001      	adds	r0, #1
 8008f74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f78:	4285      	cmp	r5, r0
 8008f7a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f82:	dcec      	bgt.n	8008f5e <__multadd+0x12>
 8008f84:	b30e      	cbz	r6, 8008fca <__multadd+0x7e>
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dc19      	bgt.n	8008fc0 <__multadd+0x74>
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	3101      	adds	r1, #1
 8008f92:	f7ff ff79 	bl	8008e88 <_Balloc>
 8008f96:	4680      	mov	r8, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__multadd+0x5a>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <__multadd+0x84>)
 8008f9e:	480d      	ldr	r0, [pc, #52]	; (8008fd4 <__multadd+0x88>)
 8008fa0:	21b5      	movs	r1, #181	; 0xb5
 8008fa2:	f000 fd57 	bl	8009a54 <__assert_func>
 8008fa6:	6922      	ldr	r2, [r4, #16]
 8008fa8:	3202      	adds	r2, #2
 8008faa:	f104 010c 	add.w	r1, r4, #12
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	300c      	adds	r0, #12
 8008fb2:	f7ff ff5b 	bl	8008e6c <memcpy>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ffa5 	bl	8008f08 <_Bfree>
 8008fbe:	4644      	mov	r4, r8
 8008fc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	615e      	str	r6, [r3, #20]
 8008fc8:	6125      	str	r5, [r4, #16]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	0800b4fb 	.word	0x0800b4fb
 8008fd4:	0800b50c 	.word	0x0800b50c

08008fd8 <__hi0bits>:
 8008fd8:	0c03      	lsrs	r3, r0, #16
 8008fda:	041b      	lsls	r3, r3, #16
 8008fdc:	b9d3      	cbnz	r3, 8009014 <__hi0bits+0x3c>
 8008fde:	0400      	lsls	r0, r0, #16
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fe6:	bf04      	itt	eq
 8008fe8:	0200      	lsleq	r0, r0, #8
 8008fea:	3308      	addeq	r3, #8
 8008fec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ff0:	bf04      	itt	eq
 8008ff2:	0100      	lsleq	r0, r0, #4
 8008ff4:	3304      	addeq	r3, #4
 8008ff6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ffa:	bf04      	itt	eq
 8008ffc:	0080      	lsleq	r0, r0, #2
 8008ffe:	3302      	addeq	r3, #2
 8009000:	2800      	cmp	r0, #0
 8009002:	db05      	blt.n	8009010 <__hi0bits+0x38>
 8009004:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009008:	f103 0301 	add.w	r3, r3, #1
 800900c:	bf08      	it	eq
 800900e:	2320      	moveq	r3, #32
 8009010:	4618      	mov	r0, r3
 8009012:	4770      	bx	lr
 8009014:	2300      	movs	r3, #0
 8009016:	e7e4      	b.n	8008fe2 <__hi0bits+0xa>

08009018 <__lo0bits>:
 8009018:	6803      	ldr	r3, [r0, #0]
 800901a:	f013 0207 	ands.w	r2, r3, #7
 800901e:	4601      	mov	r1, r0
 8009020:	d00b      	beq.n	800903a <__lo0bits+0x22>
 8009022:	07da      	lsls	r2, r3, #31
 8009024:	d423      	bmi.n	800906e <__lo0bits+0x56>
 8009026:	0798      	lsls	r0, r3, #30
 8009028:	bf49      	itett	mi
 800902a:	085b      	lsrmi	r3, r3, #1
 800902c:	089b      	lsrpl	r3, r3, #2
 800902e:	2001      	movmi	r0, #1
 8009030:	600b      	strmi	r3, [r1, #0]
 8009032:	bf5c      	itt	pl
 8009034:	600b      	strpl	r3, [r1, #0]
 8009036:	2002      	movpl	r0, #2
 8009038:	4770      	bx	lr
 800903a:	b298      	uxth	r0, r3
 800903c:	b9a8      	cbnz	r0, 800906a <__lo0bits+0x52>
 800903e:	0c1b      	lsrs	r3, r3, #16
 8009040:	2010      	movs	r0, #16
 8009042:	b2da      	uxtb	r2, r3
 8009044:	b90a      	cbnz	r2, 800904a <__lo0bits+0x32>
 8009046:	3008      	adds	r0, #8
 8009048:	0a1b      	lsrs	r3, r3, #8
 800904a:	071a      	lsls	r2, r3, #28
 800904c:	bf04      	itt	eq
 800904e:	091b      	lsreq	r3, r3, #4
 8009050:	3004      	addeq	r0, #4
 8009052:	079a      	lsls	r2, r3, #30
 8009054:	bf04      	itt	eq
 8009056:	089b      	lsreq	r3, r3, #2
 8009058:	3002      	addeq	r0, #2
 800905a:	07da      	lsls	r2, r3, #31
 800905c:	d403      	bmi.n	8009066 <__lo0bits+0x4e>
 800905e:	085b      	lsrs	r3, r3, #1
 8009060:	f100 0001 	add.w	r0, r0, #1
 8009064:	d005      	beq.n	8009072 <__lo0bits+0x5a>
 8009066:	600b      	str	r3, [r1, #0]
 8009068:	4770      	bx	lr
 800906a:	4610      	mov	r0, r2
 800906c:	e7e9      	b.n	8009042 <__lo0bits+0x2a>
 800906e:	2000      	movs	r0, #0
 8009070:	4770      	bx	lr
 8009072:	2020      	movs	r0, #32
 8009074:	4770      	bx	lr
	...

08009078 <__i2b>:
 8009078:	b510      	push	{r4, lr}
 800907a:	460c      	mov	r4, r1
 800907c:	2101      	movs	r1, #1
 800907e:	f7ff ff03 	bl	8008e88 <_Balloc>
 8009082:	4602      	mov	r2, r0
 8009084:	b928      	cbnz	r0, 8009092 <__i2b+0x1a>
 8009086:	4b05      	ldr	r3, [pc, #20]	; (800909c <__i2b+0x24>)
 8009088:	4805      	ldr	r0, [pc, #20]	; (80090a0 <__i2b+0x28>)
 800908a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800908e:	f000 fce1 	bl	8009a54 <__assert_func>
 8009092:	2301      	movs	r3, #1
 8009094:	6144      	str	r4, [r0, #20]
 8009096:	6103      	str	r3, [r0, #16]
 8009098:	bd10      	pop	{r4, pc}
 800909a:	bf00      	nop
 800909c:	0800b4fb 	.word	0x0800b4fb
 80090a0:	0800b50c 	.word	0x0800b50c

080090a4 <__multiply>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	4691      	mov	r9, r2
 80090aa:	690a      	ldr	r2, [r1, #16]
 80090ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	bfb8      	it	lt
 80090b4:	460b      	movlt	r3, r1
 80090b6:	460c      	mov	r4, r1
 80090b8:	bfbc      	itt	lt
 80090ba:	464c      	movlt	r4, r9
 80090bc:	4699      	movlt	r9, r3
 80090be:	6927      	ldr	r7, [r4, #16]
 80090c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090c4:	68a3      	ldr	r3, [r4, #8]
 80090c6:	6861      	ldr	r1, [r4, #4]
 80090c8:	eb07 060a 	add.w	r6, r7, sl
 80090cc:	42b3      	cmp	r3, r6
 80090ce:	b085      	sub	sp, #20
 80090d0:	bfb8      	it	lt
 80090d2:	3101      	addlt	r1, #1
 80090d4:	f7ff fed8 	bl	8008e88 <_Balloc>
 80090d8:	b930      	cbnz	r0, 80090e8 <__multiply+0x44>
 80090da:	4602      	mov	r2, r0
 80090dc:	4b44      	ldr	r3, [pc, #272]	; (80091f0 <__multiply+0x14c>)
 80090de:	4845      	ldr	r0, [pc, #276]	; (80091f4 <__multiply+0x150>)
 80090e0:	f240 115d 	movw	r1, #349	; 0x15d
 80090e4:	f000 fcb6 	bl	8009a54 <__assert_func>
 80090e8:	f100 0514 	add.w	r5, r0, #20
 80090ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090f0:	462b      	mov	r3, r5
 80090f2:	2200      	movs	r2, #0
 80090f4:	4543      	cmp	r3, r8
 80090f6:	d321      	bcc.n	800913c <__multiply+0x98>
 80090f8:	f104 0314 	add.w	r3, r4, #20
 80090fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009100:	f109 0314 	add.w	r3, r9, #20
 8009104:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009108:	9202      	str	r2, [sp, #8]
 800910a:	1b3a      	subs	r2, r7, r4
 800910c:	3a15      	subs	r2, #21
 800910e:	f022 0203 	bic.w	r2, r2, #3
 8009112:	3204      	adds	r2, #4
 8009114:	f104 0115 	add.w	r1, r4, #21
 8009118:	428f      	cmp	r7, r1
 800911a:	bf38      	it	cc
 800911c:	2204      	movcc	r2, #4
 800911e:	9201      	str	r2, [sp, #4]
 8009120:	9a02      	ldr	r2, [sp, #8]
 8009122:	9303      	str	r3, [sp, #12]
 8009124:	429a      	cmp	r2, r3
 8009126:	d80c      	bhi.n	8009142 <__multiply+0x9e>
 8009128:	2e00      	cmp	r6, #0
 800912a:	dd03      	ble.n	8009134 <__multiply+0x90>
 800912c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009130:	2b00      	cmp	r3, #0
 8009132:	d05a      	beq.n	80091ea <__multiply+0x146>
 8009134:	6106      	str	r6, [r0, #16]
 8009136:	b005      	add	sp, #20
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	f843 2b04 	str.w	r2, [r3], #4
 8009140:	e7d8      	b.n	80090f4 <__multiply+0x50>
 8009142:	f8b3 a000 	ldrh.w	sl, [r3]
 8009146:	f1ba 0f00 	cmp.w	sl, #0
 800914a:	d024      	beq.n	8009196 <__multiply+0xf2>
 800914c:	f104 0e14 	add.w	lr, r4, #20
 8009150:	46a9      	mov	r9, r5
 8009152:	f04f 0c00 	mov.w	ip, #0
 8009156:	f85e 2b04 	ldr.w	r2, [lr], #4
 800915a:	f8d9 1000 	ldr.w	r1, [r9]
 800915e:	fa1f fb82 	uxth.w	fp, r2
 8009162:	b289      	uxth	r1, r1
 8009164:	fb0a 110b 	mla	r1, sl, fp, r1
 8009168:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800916c:	f8d9 2000 	ldr.w	r2, [r9]
 8009170:	4461      	add	r1, ip
 8009172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009176:	fb0a c20b 	mla	r2, sl, fp, ip
 800917a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800917e:	b289      	uxth	r1, r1
 8009180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009184:	4577      	cmp	r7, lr
 8009186:	f849 1b04 	str.w	r1, [r9], #4
 800918a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800918e:	d8e2      	bhi.n	8009156 <__multiply+0xb2>
 8009190:	9a01      	ldr	r2, [sp, #4]
 8009192:	f845 c002 	str.w	ip, [r5, r2]
 8009196:	9a03      	ldr	r2, [sp, #12]
 8009198:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800919c:	3304      	adds	r3, #4
 800919e:	f1b9 0f00 	cmp.w	r9, #0
 80091a2:	d020      	beq.n	80091e6 <__multiply+0x142>
 80091a4:	6829      	ldr	r1, [r5, #0]
 80091a6:	f104 0c14 	add.w	ip, r4, #20
 80091aa:	46ae      	mov	lr, r5
 80091ac:	f04f 0a00 	mov.w	sl, #0
 80091b0:	f8bc b000 	ldrh.w	fp, [ip]
 80091b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091b8:	fb09 220b 	mla	r2, r9, fp, r2
 80091bc:	4492      	add	sl, r2
 80091be:	b289      	uxth	r1, r1
 80091c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091c4:	f84e 1b04 	str.w	r1, [lr], #4
 80091c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091cc:	f8be 1000 	ldrh.w	r1, [lr]
 80091d0:	0c12      	lsrs	r2, r2, #16
 80091d2:	fb09 1102 	mla	r1, r9, r2, r1
 80091d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091da:	4567      	cmp	r7, ip
 80091dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091e0:	d8e6      	bhi.n	80091b0 <__multiply+0x10c>
 80091e2:	9a01      	ldr	r2, [sp, #4]
 80091e4:	50a9      	str	r1, [r5, r2]
 80091e6:	3504      	adds	r5, #4
 80091e8:	e79a      	b.n	8009120 <__multiply+0x7c>
 80091ea:	3e01      	subs	r6, #1
 80091ec:	e79c      	b.n	8009128 <__multiply+0x84>
 80091ee:	bf00      	nop
 80091f0:	0800b4fb 	.word	0x0800b4fb
 80091f4:	0800b50c 	.word	0x0800b50c

080091f8 <__pow5mult>:
 80091f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	4615      	mov	r5, r2
 80091fe:	f012 0203 	ands.w	r2, r2, #3
 8009202:	4606      	mov	r6, r0
 8009204:	460f      	mov	r7, r1
 8009206:	d007      	beq.n	8009218 <__pow5mult+0x20>
 8009208:	4c25      	ldr	r4, [pc, #148]	; (80092a0 <__pow5mult+0xa8>)
 800920a:	3a01      	subs	r2, #1
 800920c:	2300      	movs	r3, #0
 800920e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009212:	f7ff fe9b 	bl	8008f4c <__multadd>
 8009216:	4607      	mov	r7, r0
 8009218:	10ad      	asrs	r5, r5, #2
 800921a:	d03d      	beq.n	8009298 <__pow5mult+0xa0>
 800921c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800921e:	b97c      	cbnz	r4, 8009240 <__pow5mult+0x48>
 8009220:	2010      	movs	r0, #16
 8009222:	f7ff fe1b 	bl	8008e5c <malloc>
 8009226:	4602      	mov	r2, r0
 8009228:	6270      	str	r0, [r6, #36]	; 0x24
 800922a:	b928      	cbnz	r0, 8009238 <__pow5mult+0x40>
 800922c:	4b1d      	ldr	r3, [pc, #116]	; (80092a4 <__pow5mult+0xac>)
 800922e:	481e      	ldr	r0, [pc, #120]	; (80092a8 <__pow5mult+0xb0>)
 8009230:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009234:	f000 fc0e 	bl	8009a54 <__assert_func>
 8009238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800923c:	6004      	str	r4, [r0, #0]
 800923e:	60c4      	str	r4, [r0, #12]
 8009240:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009248:	b94c      	cbnz	r4, 800925e <__pow5mult+0x66>
 800924a:	f240 2171 	movw	r1, #625	; 0x271
 800924e:	4630      	mov	r0, r6
 8009250:	f7ff ff12 	bl	8009078 <__i2b>
 8009254:	2300      	movs	r3, #0
 8009256:	f8c8 0008 	str.w	r0, [r8, #8]
 800925a:	4604      	mov	r4, r0
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	f04f 0900 	mov.w	r9, #0
 8009262:	07eb      	lsls	r3, r5, #31
 8009264:	d50a      	bpl.n	800927c <__pow5mult+0x84>
 8009266:	4639      	mov	r1, r7
 8009268:	4622      	mov	r2, r4
 800926a:	4630      	mov	r0, r6
 800926c:	f7ff ff1a 	bl	80090a4 <__multiply>
 8009270:	4639      	mov	r1, r7
 8009272:	4680      	mov	r8, r0
 8009274:	4630      	mov	r0, r6
 8009276:	f7ff fe47 	bl	8008f08 <_Bfree>
 800927a:	4647      	mov	r7, r8
 800927c:	106d      	asrs	r5, r5, #1
 800927e:	d00b      	beq.n	8009298 <__pow5mult+0xa0>
 8009280:	6820      	ldr	r0, [r4, #0]
 8009282:	b938      	cbnz	r0, 8009294 <__pow5mult+0x9c>
 8009284:	4622      	mov	r2, r4
 8009286:	4621      	mov	r1, r4
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff ff0b 	bl	80090a4 <__multiply>
 800928e:	6020      	str	r0, [r4, #0]
 8009290:	f8c0 9000 	str.w	r9, [r0]
 8009294:	4604      	mov	r4, r0
 8009296:	e7e4      	b.n	8009262 <__pow5mult+0x6a>
 8009298:	4638      	mov	r0, r7
 800929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929e:	bf00      	nop
 80092a0:	0800b658 	.word	0x0800b658
 80092a4:	0800b489 	.word	0x0800b489
 80092a8:	0800b50c 	.word	0x0800b50c

080092ac <__lshift>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	6849      	ldr	r1, [r1, #4]
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	4607      	mov	r7, r0
 80092be:	4691      	mov	r9, r2
 80092c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092c4:	f108 0601 	add.w	r6, r8, #1
 80092c8:	42b3      	cmp	r3, r6
 80092ca:	db0b      	blt.n	80092e4 <__lshift+0x38>
 80092cc:	4638      	mov	r0, r7
 80092ce:	f7ff fddb 	bl	8008e88 <_Balloc>
 80092d2:	4605      	mov	r5, r0
 80092d4:	b948      	cbnz	r0, 80092ea <__lshift+0x3e>
 80092d6:	4602      	mov	r2, r0
 80092d8:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <__lshift+0xd8>)
 80092da:	482b      	ldr	r0, [pc, #172]	; (8009388 <__lshift+0xdc>)
 80092dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092e0:	f000 fbb8 	bl	8009a54 <__assert_func>
 80092e4:	3101      	adds	r1, #1
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	e7ee      	b.n	80092c8 <__lshift+0x1c>
 80092ea:	2300      	movs	r3, #0
 80092ec:	f100 0114 	add.w	r1, r0, #20
 80092f0:	f100 0210 	add.w	r2, r0, #16
 80092f4:	4618      	mov	r0, r3
 80092f6:	4553      	cmp	r3, sl
 80092f8:	db37      	blt.n	800936a <__lshift+0xbe>
 80092fa:	6920      	ldr	r0, [r4, #16]
 80092fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009300:	f104 0314 	add.w	r3, r4, #20
 8009304:	f019 091f 	ands.w	r9, r9, #31
 8009308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800930c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009310:	d02f      	beq.n	8009372 <__lshift+0xc6>
 8009312:	f1c9 0e20 	rsb	lr, r9, #32
 8009316:	468a      	mov	sl, r1
 8009318:	f04f 0c00 	mov.w	ip, #0
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	fa02 f209 	lsl.w	r2, r2, r9
 8009322:	ea42 020c 	orr.w	r2, r2, ip
 8009326:	f84a 2b04 	str.w	r2, [sl], #4
 800932a:	f853 2b04 	ldr.w	r2, [r3], #4
 800932e:	4298      	cmp	r0, r3
 8009330:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009334:	d8f2      	bhi.n	800931c <__lshift+0x70>
 8009336:	1b03      	subs	r3, r0, r4
 8009338:	3b15      	subs	r3, #21
 800933a:	f023 0303 	bic.w	r3, r3, #3
 800933e:	3304      	adds	r3, #4
 8009340:	f104 0215 	add.w	r2, r4, #21
 8009344:	4290      	cmp	r0, r2
 8009346:	bf38      	it	cc
 8009348:	2304      	movcc	r3, #4
 800934a:	f841 c003 	str.w	ip, [r1, r3]
 800934e:	f1bc 0f00 	cmp.w	ip, #0
 8009352:	d001      	beq.n	8009358 <__lshift+0xac>
 8009354:	f108 0602 	add.w	r6, r8, #2
 8009358:	3e01      	subs	r6, #1
 800935a:	4638      	mov	r0, r7
 800935c:	612e      	str	r6, [r5, #16]
 800935e:	4621      	mov	r1, r4
 8009360:	f7ff fdd2 	bl	8008f08 <_Bfree>
 8009364:	4628      	mov	r0, r5
 8009366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936a:	f842 0f04 	str.w	r0, [r2, #4]!
 800936e:	3301      	adds	r3, #1
 8009370:	e7c1      	b.n	80092f6 <__lshift+0x4a>
 8009372:	3904      	subs	r1, #4
 8009374:	f853 2b04 	ldr.w	r2, [r3], #4
 8009378:	f841 2f04 	str.w	r2, [r1, #4]!
 800937c:	4298      	cmp	r0, r3
 800937e:	d8f9      	bhi.n	8009374 <__lshift+0xc8>
 8009380:	e7ea      	b.n	8009358 <__lshift+0xac>
 8009382:	bf00      	nop
 8009384:	0800b4fb 	.word	0x0800b4fb
 8009388:	0800b50c 	.word	0x0800b50c

0800938c <__mcmp>:
 800938c:	b530      	push	{r4, r5, lr}
 800938e:	6902      	ldr	r2, [r0, #16]
 8009390:	690c      	ldr	r4, [r1, #16]
 8009392:	1b12      	subs	r2, r2, r4
 8009394:	d10e      	bne.n	80093b4 <__mcmp+0x28>
 8009396:	f100 0314 	add.w	r3, r0, #20
 800939a:	3114      	adds	r1, #20
 800939c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093ac:	42a5      	cmp	r5, r4
 80093ae:	d003      	beq.n	80093b8 <__mcmp+0x2c>
 80093b0:	d305      	bcc.n	80093be <__mcmp+0x32>
 80093b2:	2201      	movs	r2, #1
 80093b4:	4610      	mov	r0, r2
 80093b6:	bd30      	pop	{r4, r5, pc}
 80093b8:	4283      	cmp	r3, r0
 80093ba:	d3f3      	bcc.n	80093a4 <__mcmp+0x18>
 80093bc:	e7fa      	b.n	80093b4 <__mcmp+0x28>
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	e7f7      	b.n	80093b4 <__mcmp+0x28>

080093c4 <__mdiff>:
 80093c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	460c      	mov	r4, r1
 80093ca:	4606      	mov	r6, r0
 80093cc:	4611      	mov	r1, r2
 80093ce:	4620      	mov	r0, r4
 80093d0:	4690      	mov	r8, r2
 80093d2:	f7ff ffdb 	bl	800938c <__mcmp>
 80093d6:	1e05      	subs	r5, r0, #0
 80093d8:	d110      	bne.n	80093fc <__mdiff+0x38>
 80093da:	4629      	mov	r1, r5
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff fd53 	bl	8008e88 <_Balloc>
 80093e2:	b930      	cbnz	r0, 80093f2 <__mdiff+0x2e>
 80093e4:	4b3a      	ldr	r3, [pc, #232]	; (80094d0 <__mdiff+0x10c>)
 80093e6:	4602      	mov	r2, r0
 80093e8:	f240 2132 	movw	r1, #562	; 0x232
 80093ec:	4839      	ldr	r0, [pc, #228]	; (80094d4 <__mdiff+0x110>)
 80093ee:	f000 fb31 	bl	8009a54 <__assert_func>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	bfa4      	itt	ge
 80093fe:	4643      	movge	r3, r8
 8009400:	46a0      	movge	r8, r4
 8009402:	4630      	mov	r0, r6
 8009404:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009408:	bfa6      	itte	ge
 800940a:	461c      	movge	r4, r3
 800940c:	2500      	movge	r5, #0
 800940e:	2501      	movlt	r5, #1
 8009410:	f7ff fd3a 	bl	8008e88 <_Balloc>
 8009414:	b920      	cbnz	r0, 8009420 <__mdiff+0x5c>
 8009416:	4b2e      	ldr	r3, [pc, #184]	; (80094d0 <__mdiff+0x10c>)
 8009418:	4602      	mov	r2, r0
 800941a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800941e:	e7e5      	b.n	80093ec <__mdiff+0x28>
 8009420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009424:	6926      	ldr	r6, [r4, #16]
 8009426:	60c5      	str	r5, [r0, #12]
 8009428:	f104 0914 	add.w	r9, r4, #20
 800942c:	f108 0514 	add.w	r5, r8, #20
 8009430:	f100 0e14 	add.w	lr, r0, #20
 8009434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800943c:	f108 0210 	add.w	r2, r8, #16
 8009440:	46f2      	mov	sl, lr
 8009442:	2100      	movs	r1, #0
 8009444:	f859 3b04 	ldr.w	r3, [r9], #4
 8009448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800944c:	fa1f f883 	uxth.w	r8, r3
 8009450:	fa11 f18b 	uxtah	r1, r1, fp
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	eba1 0808 	sub.w	r8, r1, r8
 800945a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800945e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009462:	fa1f f888 	uxth.w	r8, r8
 8009466:	1419      	asrs	r1, r3, #16
 8009468:	454e      	cmp	r6, r9
 800946a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800946e:	f84a 3b04 	str.w	r3, [sl], #4
 8009472:	d8e7      	bhi.n	8009444 <__mdiff+0x80>
 8009474:	1b33      	subs	r3, r6, r4
 8009476:	3b15      	subs	r3, #21
 8009478:	f023 0303 	bic.w	r3, r3, #3
 800947c:	3304      	adds	r3, #4
 800947e:	3415      	adds	r4, #21
 8009480:	42a6      	cmp	r6, r4
 8009482:	bf38      	it	cc
 8009484:	2304      	movcc	r3, #4
 8009486:	441d      	add	r5, r3
 8009488:	4473      	add	r3, lr
 800948a:	469e      	mov	lr, r3
 800948c:	462e      	mov	r6, r5
 800948e:	4566      	cmp	r6, ip
 8009490:	d30e      	bcc.n	80094b0 <__mdiff+0xec>
 8009492:	f10c 0203 	add.w	r2, ip, #3
 8009496:	1b52      	subs	r2, r2, r5
 8009498:	f022 0203 	bic.w	r2, r2, #3
 800949c:	3d03      	subs	r5, #3
 800949e:	45ac      	cmp	ip, r5
 80094a0:	bf38      	it	cc
 80094a2:	2200      	movcc	r2, #0
 80094a4:	441a      	add	r2, r3
 80094a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094aa:	b17b      	cbz	r3, 80094cc <__mdiff+0x108>
 80094ac:	6107      	str	r7, [r0, #16]
 80094ae:	e7a3      	b.n	80093f8 <__mdiff+0x34>
 80094b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80094b4:	fa11 f288 	uxtah	r2, r1, r8
 80094b8:	1414      	asrs	r4, r2, #16
 80094ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094be:	b292      	uxth	r2, r2
 80094c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094c4:	f84e 2b04 	str.w	r2, [lr], #4
 80094c8:	1421      	asrs	r1, r4, #16
 80094ca:	e7e0      	b.n	800948e <__mdiff+0xca>
 80094cc:	3f01      	subs	r7, #1
 80094ce:	e7ea      	b.n	80094a6 <__mdiff+0xe2>
 80094d0:	0800b4fb 	.word	0x0800b4fb
 80094d4:	0800b50c 	.word	0x0800b50c

080094d8 <__d2b>:
 80094d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	4689      	mov	r9, r1
 80094de:	2101      	movs	r1, #1
 80094e0:	ec57 6b10 	vmov	r6, r7, d0
 80094e4:	4690      	mov	r8, r2
 80094e6:	f7ff fccf 	bl	8008e88 <_Balloc>
 80094ea:	4604      	mov	r4, r0
 80094ec:	b930      	cbnz	r0, 80094fc <__d2b+0x24>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b25      	ldr	r3, [pc, #148]	; (8009588 <__d2b+0xb0>)
 80094f2:	4826      	ldr	r0, [pc, #152]	; (800958c <__d2b+0xb4>)
 80094f4:	f240 310a 	movw	r1, #778	; 0x30a
 80094f8:	f000 faac 	bl	8009a54 <__assert_func>
 80094fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009504:	bb35      	cbnz	r5, 8009554 <__d2b+0x7c>
 8009506:	2e00      	cmp	r6, #0
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	d028      	beq.n	800955e <__d2b+0x86>
 800950c:	4668      	mov	r0, sp
 800950e:	9600      	str	r6, [sp, #0]
 8009510:	f7ff fd82 	bl	8009018 <__lo0bits>
 8009514:	9900      	ldr	r1, [sp, #0]
 8009516:	b300      	cbz	r0, 800955a <__d2b+0x82>
 8009518:	9a01      	ldr	r2, [sp, #4]
 800951a:	f1c0 0320 	rsb	r3, r0, #32
 800951e:	fa02 f303 	lsl.w	r3, r2, r3
 8009522:	430b      	orrs	r3, r1
 8009524:	40c2      	lsrs	r2, r0
 8009526:	6163      	str	r3, [r4, #20]
 8009528:	9201      	str	r2, [sp, #4]
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	61a3      	str	r3, [r4, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	bf14      	ite	ne
 8009532:	2202      	movne	r2, #2
 8009534:	2201      	moveq	r2, #1
 8009536:	6122      	str	r2, [r4, #16]
 8009538:	b1d5      	cbz	r5, 8009570 <__d2b+0x98>
 800953a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800953e:	4405      	add	r5, r0
 8009540:	f8c9 5000 	str.w	r5, [r9]
 8009544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009548:	f8c8 0000 	str.w	r0, [r8]
 800954c:	4620      	mov	r0, r4
 800954e:	b003      	add	sp, #12
 8009550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009558:	e7d5      	b.n	8009506 <__d2b+0x2e>
 800955a:	6161      	str	r1, [r4, #20]
 800955c:	e7e5      	b.n	800952a <__d2b+0x52>
 800955e:	a801      	add	r0, sp, #4
 8009560:	f7ff fd5a 	bl	8009018 <__lo0bits>
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	6163      	str	r3, [r4, #20]
 8009568:	2201      	movs	r2, #1
 800956a:	6122      	str	r2, [r4, #16]
 800956c:	3020      	adds	r0, #32
 800956e:	e7e3      	b.n	8009538 <__d2b+0x60>
 8009570:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009578:	f8c9 0000 	str.w	r0, [r9]
 800957c:	6918      	ldr	r0, [r3, #16]
 800957e:	f7ff fd2b 	bl	8008fd8 <__hi0bits>
 8009582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009586:	e7df      	b.n	8009548 <__d2b+0x70>
 8009588:	0800b4fb 	.word	0x0800b4fb
 800958c:	0800b50c 	.word	0x0800b50c

08009590 <_calloc_r>:
 8009590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009592:	fba1 2402 	umull	r2, r4, r1, r2
 8009596:	b94c      	cbnz	r4, 80095ac <_calloc_r+0x1c>
 8009598:	4611      	mov	r1, r2
 800959a:	9201      	str	r2, [sp, #4]
 800959c:	f000 f87a 	bl	8009694 <_malloc_r>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	4605      	mov	r5, r0
 80095a4:	b930      	cbnz	r0, 80095b4 <_calloc_r+0x24>
 80095a6:	4628      	mov	r0, r5
 80095a8:	b003      	add	sp, #12
 80095aa:	bd30      	pop	{r4, r5, pc}
 80095ac:	220c      	movs	r2, #12
 80095ae:	6002      	str	r2, [r0, #0]
 80095b0:	2500      	movs	r5, #0
 80095b2:	e7f8      	b.n	80095a6 <_calloc_r+0x16>
 80095b4:	4621      	mov	r1, r4
 80095b6:	f7fe f941 	bl	800783c <memset>
 80095ba:	e7f4      	b.n	80095a6 <_calloc_r+0x16>

080095bc <_free_r>:
 80095bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095be:	2900      	cmp	r1, #0
 80095c0:	d044      	beq.n	800964c <_free_r+0x90>
 80095c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c6:	9001      	str	r0, [sp, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f1a1 0404 	sub.w	r4, r1, #4
 80095ce:	bfb8      	it	lt
 80095d0:	18e4      	addlt	r4, r4, r3
 80095d2:	f000 fa9b 	bl	8009b0c <__malloc_lock>
 80095d6:	4a1e      	ldr	r2, [pc, #120]	; (8009650 <_free_r+0x94>)
 80095d8:	9801      	ldr	r0, [sp, #4]
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	b933      	cbnz	r3, 80095ec <_free_r+0x30>
 80095de:	6063      	str	r3, [r4, #4]
 80095e0:	6014      	str	r4, [r2, #0]
 80095e2:	b003      	add	sp, #12
 80095e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095e8:	f000 ba96 	b.w	8009b18 <__malloc_unlock>
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d908      	bls.n	8009602 <_free_r+0x46>
 80095f0:	6825      	ldr	r5, [r4, #0]
 80095f2:	1961      	adds	r1, r4, r5
 80095f4:	428b      	cmp	r3, r1
 80095f6:	bf01      	itttt	eq
 80095f8:	6819      	ldreq	r1, [r3, #0]
 80095fa:	685b      	ldreq	r3, [r3, #4]
 80095fc:	1949      	addeq	r1, r1, r5
 80095fe:	6021      	streq	r1, [r4, #0]
 8009600:	e7ed      	b.n	80095de <_free_r+0x22>
 8009602:	461a      	mov	r2, r3
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	b10b      	cbz	r3, 800960c <_free_r+0x50>
 8009608:	42a3      	cmp	r3, r4
 800960a:	d9fa      	bls.n	8009602 <_free_r+0x46>
 800960c:	6811      	ldr	r1, [r2, #0]
 800960e:	1855      	adds	r5, r2, r1
 8009610:	42a5      	cmp	r5, r4
 8009612:	d10b      	bne.n	800962c <_free_r+0x70>
 8009614:	6824      	ldr	r4, [r4, #0]
 8009616:	4421      	add	r1, r4
 8009618:	1854      	adds	r4, r2, r1
 800961a:	42a3      	cmp	r3, r4
 800961c:	6011      	str	r1, [r2, #0]
 800961e:	d1e0      	bne.n	80095e2 <_free_r+0x26>
 8009620:	681c      	ldr	r4, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	6053      	str	r3, [r2, #4]
 8009626:	4421      	add	r1, r4
 8009628:	6011      	str	r1, [r2, #0]
 800962a:	e7da      	b.n	80095e2 <_free_r+0x26>
 800962c:	d902      	bls.n	8009634 <_free_r+0x78>
 800962e:	230c      	movs	r3, #12
 8009630:	6003      	str	r3, [r0, #0]
 8009632:	e7d6      	b.n	80095e2 <_free_r+0x26>
 8009634:	6825      	ldr	r5, [r4, #0]
 8009636:	1961      	adds	r1, r4, r5
 8009638:	428b      	cmp	r3, r1
 800963a:	bf04      	itt	eq
 800963c:	6819      	ldreq	r1, [r3, #0]
 800963e:	685b      	ldreq	r3, [r3, #4]
 8009640:	6063      	str	r3, [r4, #4]
 8009642:	bf04      	itt	eq
 8009644:	1949      	addeq	r1, r1, r5
 8009646:	6021      	streq	r1, [r4, #0]
 8009648:	6054      	str	r4, [r2, #4]
 800964a:	e7ca      	b.n	80095e2 <_free_r+0x26>
 800964c:	b003      	add	sp, #12
 800964e:	bd30      	pop	{r4, r5, pc}
 8009650:	2000077c 	.word	0x2000077c

08009654 <sbrk_aligned>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	4e0e      	ldr	r6, [pc, #56]	; (8009690 <sbrk_aligned+0x3c>)
 8009658:	460c      	mov	r4, r1
 800965a:	6831      	ldr	r1, [r6, #0]
 800965c:	4605      	mov	r5, r0
 800965e:	b911      	cbnz	r1, 8009666 <sbrk_aligned+0x12>
 8009660:	f000 f9e8 	bl	8009a34 <_sbrk_r>
 8009664:	6030      	str	r0, [r6, #0]
 8009666:	4621      	mov	r1, r4
 8009668:	4628      	mov	r0, r5
 800966a:	f000 f9e3 	bl	8009a34 <_sbrk_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d00a      	beq.n	8009688 <sbrk_aligned+0x34>
 8009672:	1cc4      	adds	r4, r0, #3
 8009674:	f024 0403 	bic.w	r4, r4, #3
 8009678:	42a0      	cmp	r0, r4
 800967a:	d007      	beq.n	800968c <sbrk_aligned+0x38>
 800967c:	1a21      	subs	r1, r4, r0
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f9d8 	bl	8009a34 <_sbrk_r>
 8009684:	3001      	adds	r0, #1
 8009686:	d101      	bne.n	800968c <sbrk_aligned+0x38>
 8009688:	f04f 34ff 	mov.w	r4, #4294967295
 800968c:	4620      	mov	r0, r4
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	20000780 	.word	0x20000780

08009694 <_malloc_r>:
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	1ccd      	adds	r5, r1, #3
 800969a:	f025 0503 	bic.w	r5, r5, #3
 800969e:	3508      	adds	r5, #8
 80096a0:	2d0c      	cmp	r5, #12
 80096a2:	bf38      	it	cc
 80096a4:	250c      	movcc	r5, #12
 80096a6:	2d00      	cmp	r5, #0
 80096a8:	4607      	mov	r7, r0
 80096aa:	db01      	blt.n	80096b0 <_malloc_r+0x1c>
 80096ac:	42a9      	cmp	r1, r5
 80096ae:	d905      	bls.n	80096bc <_malloc_r+0x28>
 80096b0:	230c      	movs	r3, #12
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	2600      	movs	r6, #0
 80096b6:	4630      	mov	r0, r6
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	4e2e      	ldr	r6, [pc, #184]	; (8009778 <_malloc_r+0xe4>)
 80096be:	f000 fa25 	bl	8009b0c <__malloc_lock>
 80096c2:	6833      	ldr	r3, [r6, #0]
 80096c4:	461c      	mov	r4, r3
 80096c6:	bb34      	cbnz	r4, 8009716 <_malloc_r+0x82>
 80096c8:	4629      	mov	r1, r5
 80096ca:	4638      	mov	r0, r7
 80096cc:	f7ff ffc2 	bl	8009654 <sbrk_aligned>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	4604      	mov	r4, r0
 80096d4:	d14d      	bne.n	8009772 <_malloc_r+0xde>
 80096d6:	6834      	ldr	r4, [r6, #0]
 80096d8:	4626      	mov	r6, r4
 80096da:	2e00      	cmp	r6, #0
 80096dc:	d140      	bne.n	8009760 <_malloc_r+0xcc>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	4631      	mov	r1, r6
 80096e2:	4638      	mov	r0, r7
 80096e4:	eb04 0803 	add.w	r8, r4, r3
 80096e8:	f000 f9a4 	bl	8009a34 <_sbrk_r>
 80096ec:	4580      	cmp	r8, r0
 80096ee:	d13a      	bne.n	8009766 <_malloc_r+0xd2>
 80096f0:	6821      	ldr	r1, [r4, #0]
 80096f2:	3503      	adds	r5, #3
 80096f4:	1a6d      	subs	r5, r5, r1
 80096f6:	f025 0503 	bic.w	r5, r5, #3
 80096fa:	3508      	adds	r5, #8
 80096fc:	2d0c      	cmp	r5, #12
 80096fe:	bf38      	it	cc
 8009700:	250c      	movcc	r5, #12
 8009702:	4629      	mov	r1, r5
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff ffa5 	bl	8009654 <sbrk_aligned>
 800970a:	3001      	adds	r0, #1
 800970c:	d02b      	beq.n	8009766 <_malloc_r+0xd2>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	442b      	add	r3, r5
 8009712:	6023      	str	r3, [r4, #0]
 8009714:	e00e      	b.n	8009734 <_malloc_r+0xa0>
 8009716:	6822      	ldr	r2, [r4, #0]
 8009718:	1b52      	subs	r2, r2, r5
 800971a:	d41e      	bmi.n	800975a <_malloc_r+0xc6>
 800971c:	2a0b      	cmp	r2, #11
 800971e:	d916      	bls.n	800974e <_malloc_r+0xba>
 8009720:	1961      	adds	r1, r4, r5
 8009722:	42a3      	cmp	r3, r4
 8009724:	6025      	str	r5, [r4, #0]
 8009726:	bf18      	it	ne
 8009728:	6059      	strne	r1, [r3, #4]
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	bf08      	it	eq
 800972e:	6031      	streq	r1, [r6, #0]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4638      	mov	r0, r7
 8009736:	f104 060b 	add.w	r6, r4, #11
 800973a:	f000 f9ed 	bl	8009b18 <__malloc_unlock>
 800973e:	f026 0607 	bic.w	r6, r6, #7
 8009742:	1d23      	adds	r3, r4, #4
 8009744:	1af2      	subs	r2, r6, r3
 8009746:	d0b6      	beq.n	80096b6 <_malloc_r+0x22>
 8009748:	1b9b      	subs	r3, r3, r6
 800974a:	50a3      	str	r3, [r4, r2]
 800974c:	e7b3      	b.n	80096b6 <_malloc_r+0x22>
 800974e:	6862      	ldr	r2, [r4, #4]
 8009750:	42a3      	cmp	r3, r4
 8009752:	bf0c      	ite	eq
 8009754:	6032      	streq	r2, [r6, #0]
 8009756:	605a      	strne	r2, [r3, #4]
 8009758:	e7ec      	b.n	8009734 <_malloc_r+0xa0>
 800975a:	4623      	mov	r3, r4
 800975c:	6864      	ldr	r4, [r4, #4]
 800975e:	e7b2      	b.n	80096c6 <_malloc_r+0x32>
 8009760:	4634      	mov	r4, r6
 8009762:	6876      	ldr	r6, [r6, #4]
 8009764:	e7b9      	b.n	80096da <_malloc_r+0x46>
 8009766:	230c      	movs	r3, #12
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	4638      	mov	r0, r7
 800976c:	f000 f9d4 	bl	8009b18 <__malloc_unlock>
 8009770:	e7a1      	b.n	80096b6 <_malloc_r+0x22>
 8009772:	6025      	str	r5, [r4, #0]
 8009774:	e7de      	b.n	8009734 <_malloc_r+0xa0>
 8009776:	bf00      	nop
 8009778:	2000077c 	.word	0x2000077c

0800977c <__ssputs_r>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	688e      	ldr	r6, [r1, #8]
 8009782:	429e      	cmp	r6, r3
 8009784:	4682      	mov	sl, r0
 8009786:	460c      	mov	r4, r1
 8009788:	4690      	mov	r8, r2
 800978a:	461f      	mov	r7, r3
 800978c:	d838      	bhi.n	8009800 <__ssputs_r+0x84>
 800978e:	898a      	ldrh	r2, [r1, #12]
 8009790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009794:	d032      	beq.n	80097fc <__ssputs_r+0x80>
 8009796:	6825      	ldr	r5, [r4, #0]
 8009798:	6909      	ldr	r1, [r1, #16]
 800979a:	eba5 0901 	sub.w	r9, r5, r1
 800979e:	6965      	ldr	r5, [r4, #20]
 80097a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097a8:	3301      	adds	r3, #1
 80097aa:	444b      	add	r3, r9
 80097ac:	106d      	asrs	r5, r5, #1
 80097ae:	429d      	cmp	r5, r3
 80097b0:	bf38      	it	cc
 80097b2:	461d      	movcc	r5, r3
 80097b4:	0553      	lsls	r3, r2, #21
 80097b6:	d531      	bpl.n	800981c <__ssputs_r+0xa0>
 80097b8:	4629      	mov	r1, r5
 80097ba:	f7ff ff6b 	bl	8009694 <_malloc_r>
 80097be:	4606      	mov	r6, r0
 80097c0:	b950      	cbnz	r0, 80097d8 <__ssputs_r+0x5c>
 80097c2:	230c      	movs	r3, #12
 80097c4:	f8ca 3000 	str.w	r3, [sl]
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	464a      	mov	r2, r9
 80097dc:	f7ff fb46 	bl	8008e6c <memcpy>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	6126      	str	r6, [r4, #16]
 80097ee:	6165      	str	r5, [r4, #20]
 80097f0:	444e      	add	r6, r9
 80097f2:	eba5 0509 	sub.w	r5, r5, r9
 80097f6:	6026      	str	r6, [r4, #0]
 80097f8:	60a5      	str	r5, [r4, #8]
 80097fa:	463e      	mov	r6, r7
 80097fc:	42be      	cmp	r6, r7
 80097fe:	d900      	bls.n	8009802 <__ssputs_r+0x86>
 8009800:	463e      	mov	r6, r7
 8009802:	6820      	ldr	r0, [r4, #0]
 8009804:	4632      	mov	r2, r6
 8009806:	4641      	mov	r1, r8
 8009808:	f000 f966 	bl	8009ad8 <memmove>
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	1b9b      	subs	r3, r3, r6
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	4433      	add	r3, r6
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	2000      	movs	r0, #0
 800981a:	e7db      	b.n	80097d4 <__ssputs_r+0x58>
 800981c:	462a      	mov	r2, r5
 800981e:	f000 f981 	bl	8009b24 <_realloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d1e1      	bne.n	80097ec <__ssputs_r+0x70>
 8009828:	6921      	ldr	r1, [r4, #16]
 800982a:	4650      	mov	r0, sl
 800982c:	f7ff fec6 	bl	80095bc <_free_r>
 8009830:	e7c7      	b.n	80097c2 <__ssputs_r+0x46>
	...

08009834 <_svfiprintf_r>:
 8009834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	4698      	mov	r8, r3
 800983a:	898b      	ldrh	r3, [r1, #12]
 800983c:	061b      	lsls	r3, r3, #24
 800983e:	b09d      	sub	sp, #116	; 0x74
 8009840:	4607      	mov	r7, r0
 8009842:	460d      	mov	r5, r1
 8009844:	4614      	mov	r4, r2
 8009846:	d50e      	bpl.n	8009866 <_svfiprintf_r+0x32>
 8009848:	690b      	ldr	r3, [r1, #16]
 800984a:	b963      	cbnz	r3, 8009866 <_svfiprintf_r+0x32>
 800984c:	2140      	movs	r1, #64	; 0x40
 800984e:	f7ff ff21 	bl	8009694 <_malloc_r>
 8009852:	6028      	str	r0, [r5, #0]
 8009854:	6128      	str	r0, [r5, #16]
 8009856:	b920      	cbnz	r0, 8009862 <_svfiprintf_r+0x2e>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	e0d1      	b.n	8009a06 <_svfiprintf_r+0x1d2>
 8009862:	2340      	movs	r3, #64	; 0x40
 8009864:	616b      	str	r3, [r5, #20]
 8009866:	2300      	movs	r3, #0
 8009868:	9309      	str	r3, [sp, #36]	; 0x24
 800986a:	2320      	movs	r3, #32
 800986c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009870:	f8cd 800c 	str.w	r8, [sp, #12]
 8009874:	2330      	movs	r3, #48	; 0x30
 8009876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a20 <_svfiprintf_r+0x1ec>
 800987a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800987e:	f04f 0901 	mov.w	r9, #1
 8009882:	4623      	mov	r3, r4
 8009884:	469a      	mov	sl, r3
 8009886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988a:	b10a      	cbz	r2, 8009890 <_svfiprintf_r+0x5c>
 800988c:	2a25      	cmp	r2, #37	; 0x25
 800988e:	d1f9      	bne.n	8009884 <_svfiprintf_r+0x50>
 8009890:	ebba 0b04 	subs.w	fp, sl, r4
 8009894:	d00b      	beq.n	80098ae <_svfiprintf_r+0x7a>
 8009896:	465b      	mov	r3, fp
 8009898:	4622      	mov	r2, r4
 800989a:	4629      	mov	r1, r5
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ff6d 	bl	800977c <__ssputs_r>
 80098a2:	3001      	adds	r0, #1
 80098a4:	f000 80aa 	beq.w	80099fc <_svfiprintf_r+0x1c8>
 80098a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098aa:	445a      	add	r2, fp
 80098ac:	9209      	str	r2, [sp, #36]	; 0x24
 80098ae:	f89a 3000 	ldrb.w	r3, [sl]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 80a2 	beq.w	80099fc <_svfiprintf_r+0x1c8>
 80098b8:	2300      	movs	r3, #0
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295
 80098be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c2:	f10a 0a01 	add.w	sl, sl, #1
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ce:	931a      	str	r3, [sp, #104]	; 0x68
 80098d0:	4654      	mov	r4, sl
 80098d2:	2205      	movs	r2, #5
 80098d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d8:	4851      	ldr	r0, [pc, #324]	; (8009a20 <_svfiprintf_r+0x1ec>)
 80098da:	f7f6 fca9 	bl	8000230 <memchr>
 80098de:	9a04      	ldr	r2, [sp, #16]
 80098e0:	b9d8      	cbnz	r0, 800991a <_svfiprintf_r+0xe6>
 80098e2:	06d0      	lsls	r0, r2, #27
 80098e4:	bf44      	itt	mi
 80098e6:	2320      	movmi	r3, #32
 80098e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ec:	0711      	lsls	r1, r2, #28
 80098ee:	bf44      	itt	mi
 80098f0:	232b      	movmi	r3, #43	; 0x2b
 80098f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f6:	f89a 3000 	ldrb.w	r3, [sl]
 80098fa:	2b2a      	cmp	r3, #42	; 0x2a
 80098fc:	d015      	beq.n	800992a <_svfiprintf_r+0xf6>
 80098fe:	9a07      	ldr	r2, [sp, #28]
 8009900:	4654      	mov	r4, sl
 8009902:	2000      	movs	r0, #0
 8009904:	f04f 0c0a 	mov.w	ip, #10
 8009908:	4621      	mov	r1, r4
 800990a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800990e:	3b30      	subs	r3, #48	; 0x30
 8009910:	2b09      	cmp	r3, #9
 8009912:	d94e      	bls.n	80099b2 <_svfiprintf_r+0x17e>
 8009914:	b1b0      	cbz	r0, 8009944 <_svfiprintf_r+0x110>
 8009916:	9207      	str	r2, [sp, #28]
 8009918:	e014      	b.n	8009944 <_svfiprintf_r+0x110>
 800991a:	eba0 0308 	sub.w	r3, r0, r8
 800991e:	fa09 f303 	lsl.w	r3, r9, r3
 8009922:	4313      	orrs	r3, r2
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	46a2      	mov	sl, r4
 8009928:	e7d2      	b.n	80098d0 <_svfiprintf_r+0x9c>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	1d19      	adds	r1, r3, #4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	9103      	str	r1, [sp, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bfbb      	ittet	lt
 8009936:	425b      	neglt	r3, r3
 8009938:	f042 0202 	orrlt.w	r2, r2, #2
 800993c:	9307      	strge	r3, [sp, #28]
 800993e:	9307      	strlt	r3, [sp, #28]
 8009940:	bfb8      	it	lt
 8009942:	9204      	strlt	r2, [sp, #16]
 8009944:	7823      	ldrb	r3, [r4, #0]
 8009946:	2b2e      	cmp	r3, #46	; 0x2e
 8009948:	d10c      	bne.n	8009964 <_svfiprintf_r+0x130>
 800994a:	7863      	ldrb	r3, [r4, #1]
 800994c:	2b2a      	cmp	r3, #42	; 0x2a
 800994e:	d135      	bne.n	80099bc <_svfiprintf_r+0x188>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d1a      	adds	r2, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9203      	str	r2, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfb8      	it	lt
 800995c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009960:	3402      	adds	r4, #2
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a30 <_svfiprintf_r+0x1fc>
 8009968:	7821      	ldrb	r1, [r4, #0]
 800996a:	2203      	movs	r2, #3
 800996c:	4650      	mov	r0, sl
 800996e:	f7f6 fc5f 	bl	8000230 <memchr>
 8009972:	b140      	cbz	r0, 8009986 <_svfiprintf_r+0x152>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	eba0 000a 	sub.w	r0, r0, sl
 800997a:	fa03 f000 	lsl.w	r0, r3, r0
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	4303      	orrs	r3, r0
 8009982:	3401      	adds	r4, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998a:	4826      	ldr	r0, [pc, #152]	; (8009a24 <_svfiprintf_r+0x1f0>)
 800998c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009990:	2206      	movs	r2, #6
 8009992:	f7f6 fc4d 	bl	8000230 <memchr>
 8009996:	2800      	cmp	r0, #0
 8009998:	d038      	beq.n	8009a0c <_svfiprintf_r+0x1d8>
 800999a:	4b23      	ldr	r3, [pc, #140]	; (8009a28 <_svfiprintf_r+0x1f4>)
 800999c:	bb1b      	cbnz	r3, 80099e6 <_svfiprintf_r+0x1b2>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	3307      	adds	r3, #7
 80099a2:	f023 0307 	bic.w	r3, r3, #7
 80099a6:	3308      	adds	r3, #8
 80099a8:	9303      	str	r3, [sp, #12]
 80099aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ac:	4433      	add	r3, r6
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	e767      	b.n	8009882 <_svfiprintf_r+0x4e>
 80099b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b6:	460c      	mov	r4, r1
 80099b8:	2001      	movs	r0, #1
 80099ba:	e7a5      	b.n	8009908 <_svfiprintf_r+0xd4>
 80099bc:	2300      	movs	r3, #0
 80099be:	3401      	adds	r4, #1
 80099c0:	9305      	str	r3, [sp, #20]
 80099c2:	4619      	mov	r1, r3
 80099c4:	f04f 0c0a 	mov.w	ip, #10
 80099c8:	4620      	mov	r0, r4
 80099ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ce:	3a30      	subs	r2, #48	; 0x30
 80099d0:	2a09      	cmp	r2, #9
 80099d2:	d903      	bls.n	80099dc <_svfiprintf_r+0x1a8>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0c5      	beq.n	8009964 <_svfiprintf_r+0x130>
 80099d8:	9105      	str	r1, [sp, #20]
 80099da:	e7c3      	b.n	8009964 <_svfiprintf_r+0x130>
 80099dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e0:	4604      	mov	r4, r0
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7f0      	b.n	80099c8 <_svfiprintf_r+0x194>
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <_svfiprintf_r+0x1f8>)
 80099ee:	a904      	add	r1, sp, #16
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7fd ffcb 	bl	800798c <_printf_float>
 80099f6:	1c42      	adds	r2, r0, #1
 80099f8:	4606      	mov	r6, r0
 80099fa:	d1d6      	bne.n	80099aa <_svfiprintf_r+0x176>
 80099fc:	89ab      	ldrh	r3, [r5, #12]
 80099fe:	065b      	lsls	r3, r3, #25
 8009a00:	f53f af2c 	bmi.w	800985c <_svfiprintf_r+0x28>
 8009a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a06:	b01d      	add	sp, #116	; 0x74
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <_svfiprintf_r+0x1f8>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7fe fa5c 	bl	8007ed4 <_printf_i>
 8009a1c:	e7eb      	b.n	80099f6 <_svfiprintf_r+0x1c2>
 8009a1e:	bf00      	nop
 8009a20:	0800b664 	.word	0x0800b664
 8009a24:	0800b66e 	.word	0x0800b66e
 8009a28:	0800798d 	.word	0x0800798d
 8009a2c:	0800977d 	.word	0x0800977d
 8009a30:	0800b66a 	.word	0x0800b66a

08009a34 <_sbrk_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d06      	ldr	r5, [pc, #24]	; (8009a50 <_sbrk_r+0x1c>)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	f7f9 ffb0 	bl	80039a4 <_sbrk>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_sbrk_r+0x1a>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_sbrk_r+0x1a>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20000784 	.word	0x20000784

08009a54 <__assert_func>:
 8009a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a56:	4614      	mov	r4, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <__assert_func+0x2c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4605      	mov	r5, r0
 8009a60:	68d8      	ldr	r0, [r3, #12]
 8009a62:	b14c      	cbz	r4, 8009a78 <__assert_func+0x24>
 8009a64:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <__assert_func+0x30>)
 8009a66:	9100      	str	r1, [sp, #0]
 8009a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a6c:	4906      	ldr	r1, [pc, #24]	; (8009a88 <__assert_func+0x34>)
 8009a6e:	462b      	mov	r3, r5
 8009a70:	f000 f80e 	bl	8009a90 <fiprintf>
 8009a74:	f000 faac 	bl	8009fd0 <abort>
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <__assert_func+0x38>)
 8009a7a:	461c      	mov	r4, r3
 8009a7c:	e7f3      	b.n	8009a66 <__assert_func+0x12>
 8009a7e:	bf00      	nop
 8009a80:	2000002c 	.word	0x2000002c
 8009a84:	0800b675 	.word	0x0800b675
 8009a88:	0800b682 	.word	0x0800b682
 8009a8c:	0800b6b0 	.word	0x0800b6b0

08009a90 <fiprintf>:
 8009a90:	b40e      	push	{r1, r2, r3}
 8009a92:	b503      	push	{r0, r1, lr}
 8009a94:	4601      	mov	r1, r0
 8009a96:	ab03      	add	r3, sp, #12
 8009a98:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <fiprintf+0x20>)
 8009a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9e:	6800      	ldr	r0, [r0, #0]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	f000 f897 	bl	8009bd4 <_vfiprintf_r>
 8009aa6:	b002      	add	sp, #8
 8009aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aac:	b003      	add	sp, #12
 8009aae:	4770      	bx	lr
 8009ab0:	2000002c 	.word	0x2000002c

08009ab4 <__ascii_mbtowc>:
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	b901      	cbnz	r1, 8009aba <__ascii_mbtowc+0x6>
 8009ab8:	a901      	add	r1, sp, #4
 8009aba:	b142      	cbz	r2, 8009ace <__ascii_mbtowc+0x1a>
 8009abc:	b14b      	cbz	r3, 8009ad2 <__ascii_mbtowc+0x1e>
 8009abe:	7813      	ldrb	r3, [r2, #0]
 8009ac0:	600b      	str	r3, [r1, #0]
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	1e10      	subs	r0, r2, #0
 8009ac6:	bf18      	it	ne
 8009ac8:	2001      	movne	r0, #1
 8009aca:	b002      	add	sp, #8
 8009acc:	4770      	bx	lr
 8009ace:	4610      	mov	r0, r2
 8009ad0:	e7fb      	b.n	8009aca <__ascii_mbtowc+0x16>
 8009ad2:	f06f 0001 	mvn.w	r0, #1
 8009ad6:	e7f8      	b.n	8009aca <__ascii_mbtowc+0x16>

08009ad8 <memmove>:
 8009ad8:	4288      	cmp	r0, r1
 8009ada:	b510      	push	{r4, lr}
 8009adc:	eb01 0402 	add.w	r4, r1, r2
 8009ae0:	d902      	bls.n	8009ae8 <memmove+0x10>
 8009ae2:	4284      	cmp	r4, r0
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	d807      	bhi.n	8009af8 <memmove+0x20>
 8009ae8:	1e43      	subs	r3, r0, #1
 8009aea:	42a1      	cmp	r1, r4
 8009aec:	d008      	beq.n	8009b00 <memmove+0x28>
 8009aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009af6:	e7f8      	b.n	8009aea <memmove+0x12>
 8009af8:	4402      	add	r2, r0
 8009afa:	4601      	mov	r1, r0
 8009afc:	428a      	cmp	r2, r1
 8009afe:	d100      	bne.n	8009b02 <memmove+0x2a>
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b0a:	e7f7      	b.n	8009afc <memmove+0x24>

08009b0c <__malloc_lock>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__malloc_lock+0x8>)
 8009b0e:	f000 bc1f 	b.w	800a350 <__retarget_lock_acquire_recursive>
 8009b12:	bf00      	nop
 8009b14:	20000788 	.word	0x20000788

08009b18 <__malloc_unlock>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__malloc_unlock+0x8>)
 8009b1a:	f000 bc1a 	b.w	800a352 <__retarget_lock_release_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20000788 	.word	0x20000788

08009b24 <_realloc_r>:
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	4680      	mov	r8, r0
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	460e      	mov	r6, r1
 8009b2e:	b921      	cbnz	r1, 8009b3a <_realloc_r+0x16>
 8009b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b34:	4611      	mov	r1, r2
 8009b36:	f7ff bdad 	b.w	8009694 <_malloc_r>
 8009b3a:	b92a      	cbnz	r2, 8009b48 <_realloc_r+0x24>
 8009b3c:	f7ff fd3e 	bl	80095bc <_free_r>
 8009b40:	4625      	mov	r5, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b48:	f000 fc6a 	bl	800a420 <_malloc_usable_size_r>
 8009b4c:	4284      	cmp	r4, r0
 8009b4e:	4607      	mov	r7, r0
 8009b50:	d802      	bhi.n	8009b58 <_realloc_r+0x34>
 8009b52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b56:	d812      	bhi.n	8009b7e <_realloc_r+0x5a>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	f7ff fd9a 	bl	8009694 <_malloc_r>
 8009b60:	4605      	mov	r5, r0
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0ed      	beq.n	8009b42 <_realloc_r+0x1e>
 8009b66:	42bc      	cmp	r4, r7
 8009b68:	4622      	mov	r2, r4
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	bf28      	it	cs
 8009b6e:	463a      	movcs	r2, r7
 8009b70:	f7ff f97c 	bl	8008e6c <memcpy>
 8009b74:	4631      	mov	r1, r6
 8009b76:	4640      	mov	r0, r8
 8009b78:	f7ff fd20 	bl	80095bc <_free_r>
 8009b7c:	e7e1      	b.n	8009b42 <_realloc_r+0x1e>
 8009b7e:	4635      	mov	r5, r6
 8009b80:	e7df      	b.n	8009b42 <_realloc_r+0x1e>

08009b82 <__sfputc_r>:
 8009b82:	6893      	ldr	r3, [r2, #8]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	b410      	push	{r4}
 8009b8a:	6093      	str	r3, [r2, #8]
 8009b8c:	da08      	bge.n	8009ba0 <__sfputc_r+0x1e>
 8009b8e:	6994      	ldr	r4, [r2, #24]
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	db01      	blt.n	8009b98 <__sfputc_r+0x16>
 8009b94:	290a      	cmp	r1, #10
 8009b96:	d103      	bne.n	8009ba0 <__sfputc_r+0x1e>
 8009b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b9c:	f000 b94a 	b.w	8009e34 <__swbuf_r>
 8009ba0:	6813      	ldr	r3, [r2, #0]
 8009ba2:	1c58      	adds	r0, r3, #1
 8009ba4:	6010      	str	r0, [r2, #0]
 8009ba6:	7019      	strb	r1, [r3, #0]
 8009ba8:	4608      	mov	r0, r1
 8009baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <__sfputs_r>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	4614      	mov	r4, r2
 8009bb8:	18d5      	adds	r5, r2, r3
 8009bba:	42ac      	cmp	r4, r5
 8009bbc:	d101      	bne.n	8009bc2 <__sfputs_r+0x12>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e007      	b.n	8009bd2 <__sfputs_r+0x22>
 8009bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc6:	463a      	mov	r2, r7
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ffda 	bl	8009b82 <__sfputc_r>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d1f3      	bne.n	8009bba <__sfputs_r+0xa>
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bd4 <_vfiprintf_r>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	460d      	mov	r5, r1
 8009bda:	b09d      	sub	sp, #116	; 0x74
 8009bdc:	4614      	mov	r4, r2
 8009bde:	4698      	mov	r8, r3
 8009be0:	4606      	mov	r6, r0
 8009be2:	b118      	cbz	r0, 8009bec <_vfiprintf_r+0x18>
 8009be4:	6983      	ldr	r3, [r0, #24]
 8009be6:	b90b      	cbnz	r3, 8009bec <_vfiprintf_r+0x18>
 8009be8:	f000 fb14 	bl	800a214 <__sinit>
 8009bec:	4b89      	ldr	r3, [pc, #548]	; (8009e14 <_vfiprintf_r+0x240>)
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	d11b      	bne.n	8009c2a <_vfiprintf_r+0x56>
 8009bf2:	6875      	ldr	r5, [r6, #4]
 8009bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf6:	07d9      	lsls	r1, r3, #31
 8009bf8:	d405      	bmi.n	8009c06 <_vfiprintf_r+0x32>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	059a      	lsls	r2, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_vfiprintf_r+0x32>
 8009c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c02:	f000 fba5 	bl	800a350 <__retarget_lock_acquire_recursive>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	071b      	lsls	r3, r3, #28
 8009c0a:	d501      	bpl.n	8009c10 <_vfiprintf_r+0x3c>
 8009c0c:	692b      	ldr	r3, [r5, #16]
 8009c0e:	b9eb      	cbnz	r3, 8009c4c <_vfiprintf_r+0x78>
 8009c10:	4629      	mov	r1, r5
 8009c12:	4630      	mov	r0, r6
 8009c14:	f000 f96e 	bl	8009ef4 <__swsetup_r>
 8009c18:	b1c0      	cbz	r0, 8009c4c <_vfiprintf_r+0x78>
 8009c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c1c:	07dc      	lsls	r4, r3, #31
 8009c1e:	d50e      	bpl.n	8009c3e <_vfiprintf_r+0x6a>
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	b01d      	add	sp, #116	; 0x74
 8009c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2a:	4b7b      	ldr	r3, [pc, #492]	; (8009e18 <_vfiprintf_r+0x244>)
 8009c2c:	429d      	cmp	r5, r3
 8009c2e:	d101      	bne.n	8009c34 <_vfiprintf_r+0x60>
 8009c30:	68b5      	ldr	r5, [r6, #8]
 8009c32:	e7df      	b.n	8009bf4 <_vfiprintf_r+0x20>
 8009c34:	4b79      	ldr	r3, [pc, #484]	; (8009e1c <_vfiprintf_r+0x248>)
 8009c36:	429d      	cmp	r5, r3
 8009c38:	bf08      	it	eq
 8009c3a:	68f5      	ldreq	r5, [r6, #12]
 8009c3c:	e7da      	b.n	8009bf4 <_vfiprintf_r+0x20>
 8009c3e:	89ab      	ldrh	r3, [r5, #12]
 8009c40:	0598      	lsls	r0, r3, #22
 8009c42:	d4ed      	bmi.n	8009c20 <_vfiprintf_r+0x4c>
 8009c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c46:	f000 fb84 	bl	800a352 <__retarget_lock_release_recursive>
 8009c4a:	e7e9      	b.n	8009c20 <_vfiprintf_r+0x4c>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c50:	2320      	movs	r3, #32
 8009c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c5a:	2330      	movs	r3, #48	; 0x30
 8009c5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e20 <_vfiprintf_r+0x24c>
 8009c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c64:	f04f 0901 	mov.w	r9, #1
 8009c68:	4623      	mov	r3, r4
 8009c6a:	469a      	mov	sl, r3
 8009c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c70:	b10a      	cbz	r2, 8009c76 <_vfiprintf_r+0xa2>
 8009c72:	2a25      	cmp	r2, #37	; 0x25
 8009c74:	d1f9      	bne.n	8009c6a <_vfiprintf_r+0x96>
 8009c76:	ebba 0b04 	subs.w	fp, sl, r4
 8009c7a:	d00b      	beq.n	8009c94 <_vfiprintf_r+0xc0>
 8009c7c:	465b      	mov	r3, fp
 8009c7e:	4622      	mov	r2, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ff94 	bl	8009bb0 <__sfputs_r>
 8009c88:	3001      	adds	r0, #1
 8009c8a:	f000 80aa 	beq.w	8009de2 <_vfiprintf_r+0x20e>
 8009c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c90:	445a      	add	r2, fp
 8009c92:	9209      	str	r2, [sp, #36]	; 0x24
 8009c94:	f89a 3000 	ldrb.w	r3, [sl]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 80a2 	beq.w	8009de2 <_vfiprintf_r+0x20e>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca8:	f10a 0a01 	add.w	sl, sl, #1
 8009cac:	9304      	str	r3, [sp, #16]
 8009cae:	9307      	str	r3, [sp, #28]
 8009cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb6:	4654      	mov	r4, sl
 8009cb8:	2205      	movs	r2, #5
 8009cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbe:	4858      	ldr	r0, [pc, #352]	; (8009e20 <_vfiprintf_r+0x24c>)
 8009cc0:	f7f6 fab6 	bl	8000230 <memchr>
 8009cc4:	9a04      	ldr	r2, [sp, #16]
 8009cc6:	b9d8      	cbnz	r0, 8009d00 <_vfiprintf_r+0x12c>
 8009cc8:	06d1      	lsls	r1, r2, #27
 8009cca:	bf44      	itt	mi
 8009ccc:	2320      	movmi	r3, #32
 8009cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd2:	0713      	lsls	r3, r2, #28
 8009cd4:	bf44      	itt	mi
 8009cd6:	232b      	movmi	r3, #43	; 0x2b
 8009cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce2:	d015      	beq.n	8009d10 <_vfiprintf_r+0x13c>
 8009ce4:	9a07      	ldr	r2, [sp, #28]
 8009ce6:	4654      	mov	r4, sl
 8009ce8:	2000      	movs	r0, #0
 8009cea:	f04f 0c0a 	mov.w	ip, #10
 8009cee:	4621      	mov	r1, r4
 8009cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cf4:	3b30      	subs	r3, #48	; 0x30
 8009cf6:	2b09      	cmp	r3, #9
 8009cf8:	d94e      	bls.n	8009d98 <_vfiprintf_r+0x1c4>
 8009cfa:	b1b0      	cbz	r0, 8009d2a <_vfiprintf_r+0x156>
 8009cfc:	9207      	str	r2, [sp, #28]
 8009cfe:	e014      	b.n	8009d2a <_vfiprintf_r+0x156>
 8009d00:	eba0 0308 	sub.w	r3, r0, r8
 8009d04:	fa09 f303 	lsl.w	r3, r9, r3
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	46a2      	mov	sl, r4
 8009d0e:	e7d2      	b.n	8009cb6 <_vfiprintf_r+0xe2>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	1d19      	adds	r1, r3, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	9103      	str	r1, [sp, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfbb      	ittet	lt
 8009d1c:	425b      	neglt	r3, r3
 8009d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d22:	9307      	strge	r3, [sp, #28]
 8009d24:	9307      	strlt	r3, [sp, #28]
 8009d26:	bfb8      	it	lt
 8009d28:	9204      	strlt	r2, [sp, #16]
 8009d2a:	7823      	ldrb	r3, [r4, #0]
 8009d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d2e:	d10c      	bne.n	8009d4a <_vfiprintf_r+0x176>
 8009d30:	7863      	ldrb	r3, [r4, #1]
 8009d32:	2b2a      	cmp	r3, #42	; 0x2a
 8009d34:	d135      	bne.n	8009da2 <_vfiprintf_r+0x1ce>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	1d1a      	adds	r2, r3, #4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	9203      	str	r2, [sp, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfb8      	it	lt
 8009d42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d46:	3402      	adds	r4, #2
 8009d48:	9305      	str	r3, [sp, #20]
 8009d4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e30 <_vfiprintf_r+0x25c>
 8009d4e:	7821      	ldrb	r1, [r4, #0]
 8009d50:	2203      	movs	r2, #3
 8009d52:	4650      	mov	r0, sl
 8009d54:	f7f6 fa6c 	bl	8000230 <memchr>
 8009d58:	b140      	cbz	r0, 8009d6c <_vfiprintf_r+0x198>
 8009d5a:	2340      	movs	r3, #64	; 0x40
 8009d5c:	eba0 000a 	sub.w	r0, r0, sl
 8009d60:	fa03 f000 	lsl.w	r0, r3, r0
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	4303      	orrs	r3, r0
 8009d68:	3401      	adds	r4, #1
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d70:	482c      	ldr	r0, [pc, #176]	; (8009e24 <_vfiprintf_r+0x250>)
 8009d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d76:	2206      	movs	r2, #6
 8009d78:	f7f6 fa5a 	bl	8000230 <memchr>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d03f      	beq.n	8009e00 <_vfiprintf_r+0x22c>
 8009d80:	4b29      	ldr	r3, [pc, #164]	; (8009e28 <_vfiprintf_r+0x254>)
 8009d82:	bb1b      	cbnz	r3, 8009dcc <_vfiprintf_r+0x1f8>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	3307      	adds	r3, #7
 8009d88:	f023 0307 	bic.w	r3, r3, #7
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d92:	443b      	add	r3, r7
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	e767      	b.n	8009c68 <_vfiprintf_r+0x94>
 8009d98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	2001      	movs	r0, #1
 8009da0:	e7a5      	b.n	8009cee <_vfiprintf_r+0x11a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	3401      	adds	r4, #1
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	4619      	mov	r1, r3
 8009daa:	f04f 0c0a 	mov.w	ip, #10
 8009dae:	4620      	mov	r0, r4
 8009db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db4:	3a30      	subs	r2, #48	; 0x30
 8009db6:	2a09      	cmp	r2, #9
 8009db8:	d903      	bls.n	8009dc2 <_vfiprintf_r+0x1ee>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0c5      	beq.n	8009d4a <_vfiprintf_r+0x176>
 8009dbe:	9105      	str	r1, [sp, #20]
 8009dc0:	e7c3      	b.n	8009d4a <_vfiprintf_r+0x176>
 8009dc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e7f0      	b.n	8009dae <_vfiprintf_r+0x1da>
 8009dcc:	ab03      	add	r3, sp, #12
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	462a      	mov	r2, r5
 8009dd2:	4b16      	ldr	r3, [pc, #88]	; (8009e2c <_vfiprintf_r+0x258>)
 8009dd4:	a904      	add	r1, sp, #16
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f7fd fdd8 	bl	800798c <_printf_float>
 8009ddc:	4607      	mov	r7, r0
 8009dde:	1c78      	adds	r0, r7, #1
 8009de0:	d1d6      	bne.n	8009d90 <_vfiprintf_r+0x1bc>
 8009de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009de4:	07d9      	lsls	r1, r3, #31
 8009de6:	d405      	bmi.n	8009df4 <_vfiprintf_r+0x220>
 8009de8:	89ab      	ldrh	r3, [r5, #12]
 8009dea:	059a      	lsls	r2, r3, #22
 8009dec:	d402      	bmi.n	8009df4 <_vfiprintf_r+0x220>
 8009dee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009df0:	f000 faaf 	bl	800a352 <__retarget_lock_release_recursive>
 8009df4:	89ab      	ldrh	r3, [r5, #12]
 8009df6:	065b      	lsls	r3, r3, #25
 8009df8:	f53f af12 	bmi.w	8009c20 <_vfiprintf_r+0x4c>
 8009dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dfe:	e711      	b.n	8009c24 <_vfiprintf_r+0x50>
 8009e00:	ab03      	add	r3, sp, #12
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	462a      	mov	r2, r5
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <_vfiprintf_r+0x258>)
 8009e08:	a904      	add	r1, sp, #16
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7fe f862 	bl	8007ed4 <_printf_i>
 8009e10:	e7e4      	b.n	8009ddc <_vfiprintf_r+0x208>
 8009e12:	bf00      	nop
 8009e14:	0800b7dc 	.word	0x0800b7dc
 8009e18:	0800b7fc 	.word	0x0800b7fc
 8009e1c:	0800b7bc 	.word	0x0800b7bc
 8009e20:	0800b664 	.word	0x0800b664
 8009e24:	0800b66e 	.word	0x0800b66e
 8009e28:	0800798d 	.word	0x0800798d
 8009e2c:	08009bb1 	.word	0x08009bb1
 8009e30:	0800b66a 	.word	0x0800b66a

08009e34 <__swbuf_r>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	460e      	mov	r6, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	b118      	cbz	r0, 8009e46 <__swbuf_r+0x12>
 8009e3e:	6983      	ldr	r3, [r0, #24]
 8009e40:	b90b      	cbnz	r3, 8009e46 <__swbuf_r+0x12>
 8009e42:	f000 f9e7 	bl	800a214 <__sinit>
 8009e46:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <__swbuf_r+0x98>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	d12b      	bne.n	8009ea4 <__swbuf_r+0x70>
 8009e4c:	686c      	ldr	r4, [r5, #4]
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d52f      	bpl.n	8009eb8 <__swbuf_r+0x84>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b36b      	cbz	r3, 8009eb8 <__swbuf_r+0x84>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6820      	ldr	r0, [r4, #0]
 8009e60:	1ac0      	subs	r0, r0, r3
 8009e62:	6963      	ldr	r3, [r4, #20]
 8009e64:	b2f6      	uxtb	r6, r6
 8009e66:	4283      	cmp	r3, r0
 8009e68:	4637      	mov	r7, r6
 8009e6a:	dc04      	bgt.n	8009e76 <__swbuf_r+0x42>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f93c 	bl	800a0ec <_fflush_r>
 8009e74:	bb30      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	701e      	strb	r6, [r3, #0]
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	3001      	adds	r0, #1
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	d004      	beq.n	8009e96 <__swbuf_r+0x62>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	07db      	lsls	r3, r3, #31
 8009e90:	d506      	bpl.n	8009ea0 <__swbuf_r+0x6c>
 8009e92:	2e0a      	cmp	r6, #10
 8009e94:	d104      	bne.n	8009ea0 <__swbuf_r+0x6c>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 f927 	bl	800a0ec <_fflush_r>
 8009e9e:	b988      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <__swbuf_r+0x9c>)
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	d101      	bne.n	8009eae <__swbuf_r+0x7a>
 8009eaa:	68ac      	ldr	r4, [r5, #8]
 8009eac:	e7cf      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <__swbuf_r+0xa0>)
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	bf08      	it	eq
 8009eb4:	68ec      	ldreq	r4, [r5, #12]
 8009eb6:	e7ca      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 f81a 	bl	8009ef4 <__swsetup_r>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0cb      	beq.n	8009e5c <__swbuf_r+0x28>
 8009ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec8:	e7ea      	b.n	8009ea0 <__swbuf_r+0x6c>
 8009eca:	bf00      	nop
 8009ecc:	0800b7dc 	.word	0x0800b7dc
 8009ed0:	0800b7fc 	.word	0x0800b7fc
 8009ed4:	0800b7bc 	.word	0x0800b7bc

08009ed8 <__ascii_wctomb>:
 8009ed8:	b149      	cbz	r1, 8009eee <__ascii_wctomb+0x16>
 8009eda:	2aff      	cmp	r2, #255	; 0xff
 8009edc:	bf85      	ittet	hi
 8009ede:	238a      	movhi	r3, #138	; 0x8a
 8009ee0:	6003      	strhi	r3, [r0, #0]
 8009ee2:	700a      	strbls	r2, [r1, #0]
 8009ee4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ee8:	bf98      	it	ls
 8009eea:	2001      	movls	r0, #1
 8009eec:	4770      	bx	lr
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4770      	bx	lr
	...

08009ef4 <__swsetup_r>:
 8009ef4:	4b32      	ldr	r3, [pc, #200]	; (8009fc0 <__swsetup_r+0xcc>)
 8009ef6:	b570      	push	{r4, r5, r6, lr}
 8009ef8:	681d      	ldr	r5, [r3, #0]
 8009efa:	4606      	mov	r6, r0
 8009efc:	460c      	mov	r4, r1
 8009efe:	b125      	cbz	r5, 8009f0a <__swsetup_r+0x16>
 8009f00:	69ab      	ldr	r3, [r5, #24]
 8009f02:	b913      	cbnz	r3, 8009f0a <__swsetup_r+0x16>
 8009f04:	4628      	mov	r0, r5
 8009f06:	f000 f985 	bl	800a214 <__sinit>
 8009f0a:	4b2e      	ldr	r3, [pc, #184]	; (8009fc4 <__swsetup_r+0xd0>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	d10f      	bne.n	8009f30 <__swsetup_r+0x3c>
 8009f10:	686c      	ldr	r4, [r5, #4]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f18:	0719      	lsls	r1, r3, #28
 8009f1a:	d42c      	bmi.n	8009f76 <__swsetup_r+0x82>
 8009f1c:	06dd      	lsls	r5, r3, #27
 8009f1e:	d411      	bmi.n	8009f44 <__swsetup_r+0x50>
 8009f20:	2309      	movs	r3, #9
 8009f22:	6033      	str	r3, [r6, #0]
 8009f24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2e:	e03e      	b.n	8009fae <__swsetup_r+0xba>
 8009f30:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <__swsetup_r+0xd4>)
 8009f32:	429c      	cmp	r4, r3
 8009f34:	d101      	bne.n	8009f3a <__swsetup_r+0x46>
 8009f36:	68ac      	ldr	r4, [r5, #8]
 8009f38:	e7eb      	b.n	8009f12 <__swsetup_r+0x1e>
 8009f3a:	4b24      	ldr	r3, [pc, #144]	; (8009fcc <__swsetup_r+0xd8>)
 8009f3c:	429c      	cmp	r4, r3
 8009f3e:	bf08      	it	eq
 8009f40:	68ec      	ldreq	r4, [r5, #12]
 8009f42:	e7e6      	b.n	8009f12 <__swsetup_r+0x1e>
 8009f44:	0758      	lsls	r0, r3, #29
 8009f46:	d512      	bpl.n	8009f6e <__swsetup_r+0x7a>
 8009f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f4a:	b141      	cbz	r1, 8009f5e <__swsetup_r+0x6a>
 8009f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f50:	4299      	cmp	r1, r3
 8009f52:	d002      	beq.n	8009f5a <__swsetup_r+0x66>
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7ff fb31 	bl	80095bc <_free_r>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	2300      	movs	r3, #0
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	f043 0308 	orr.w	r3, r3, #8
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	b94b      	cbnz	r3, 8009f8e <__swsetup_r+0x9a>
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f84:	d003      	beq.n	8009f8e <__swsetup_r+0x9a>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f000 fa09 	bl	800a3a0 <__smakebuf_r>
 8009f8e:	89a0      	ldrh	r0, [r4, #12]
 8009f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f94:	f010 0301 	ands.w	r3, r0, #1
 8009f98:	d00a      	beq.n	8009fb0 <__swsetup_r+0xbc>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60a3      	str	r3, [r4, #8]
 8009f9e:	6963      	ldr	r3, [r4, #20]
 8009fa0:	425b      	negs	r3, r3
 8009fa2:	61a3      	str	r3, [r4, #24]
 8009fa4:	6923      	ldr	r3, [r4, #16]
 8009fa6:	b943      	cbnz	r3, 8009fba <__swsetup_r+0xc6>
 8009fa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fac:	d1ba      	bne.n	8009f24 <__swsetup_r+0x30>
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	0781      	lsls	r1, r0, #30
 8009fb2:	bf58      	it	pl
 8009fb4:	6963      	ldrpl	r3, [r4, #20]
 8009fb6:	60a3      	str	r3, [r4, #8]
 8009fb8:	e7f4      	b.n	8009fa4 <__swsetup_r+0xb0>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e7f7      	b.n	8009fae <__swsetup_r+0xba>
 8009fbe:	bf00      	nop
 8009fc0:	2000002c 	.word	0x2000002c
 8009fc4:	0800b7dc 	.word	0x0800b7dc
 8009fc8:	0800b7fc 	.word	0x0800b7fc
 8009fcc:	0800b7bc 	.word	0x0800b7bc

08009fd0 <abort>:
 8009fd0:	b508      	push	{r3, lr}
 8009fd2:	2006      	movs	r0, #6
 8009fd4:	f000 fa54 	bl	800a480 <raise>
 8009fd8:	2001      	movs	r0, #1
 8009fda:	f7f9 fcb3 	bl	8003944 <_exit>
	...

08009fe0 <__sflush_r>:
 8009fe0:	898a      	ldrh	r2, [r1, #12]
 8009fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	0710      	lsls	r0, r2, #28
 8009fea:	460c      	mov	r4, r1
 8009fec:	d458      	bmi.n	800a0a0 <__sflush_r+0xc0>
 8009fee:	684b      	ldr	r3, [r1, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dc05      	bgt.n	800a000 <__sflush_r+0x20>
 8009ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	dc02      	bgt.n	800a000 <__sflush_r+0x20>
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a002:	2e00      	cmp	r6, #0
 800a004:	d0f9      	beq.n	8009ffa <__sflush_r+0x1a>
 800a006:	2300      	movs	r3, #0
 800a008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a00c:	682f      	ldr	r7, [r5, #0]
 800a00e:	602b      	str	r3, [r5, #0]
 800a010:	d032      	beq.n	800a078 <__sflush_r+0x98>
 800a012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	075a      	lsls	r2, r3, #29
 800a018:	d505      	bpl.n	800a026 <__sflush_r+0x46>
 800a01a:	6863      	ldr	r3, [r4, #4]
 800a01c:	1ac0      	subs	r0, r0, r3
 800a01e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a020:	b10b      	cbz	r3, 800a026 <__sflush_r+0x46>
 800a022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a024:	1ac0      	subs	r0, r0, r3
 800a026:	2300      	movs	r3, #0
 800a028:	4602      	mov	r2, r0
 800a02a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a02c:	6a21      	ldr	r1, [r4, #32]
 800a02e:	4628      	mov	r0, r5
 800a030:	47b0      	blx	r6
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	d106      	bne.n	800a046 <__sflush_r+0x66>
 800a038:	6829      	ldr	r1, [r5, #0]
 800a03a:	291d      	cmp	r1, #29
 800a03c:	d82c      	bhi.n	800a098 <__sflush_r+0xb8>
 800a03e:	4a2a      	ldr	r2, [pc, #168]	; (800a0e8 <__sflush_r+0x108>)
 800a040:	40ca      	lsrs	r2, r1
 800a042:	07d6      	lsls	r6, r2, #31
 800a044:	d528      	bpl.n	800a098 <__sflush_r+0xb8>
 800a046:	2200      	movs	r2, #0
 800a048:	6062      	str	r2, [r4, #4]
 800a04a:	04d9      	lsls	r1, r3, #19
 800a04c:	6922      	ldr	r2, [r4, #16]
 800a04e:	6022      	str	r2, [r4, #0]
 800a050:	d504      	bpl.n	800a05c <__sflush_r+0x7c>
 800a052:	1c42      	adds	r2, r0, #1
 800a054:	d101      	bne.n	800a05a <__sflush_r+0x7a>
 800a056:	682b      	ldr	r3, [r5, #0]
 800a058:	b903      	cbnz	r3, 800a05c <__sflush_r+0x7c>
 800a05a:	6560      	str	r0, [r4, #84]	; 0x54
 800a05c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a05e:	602f      	str	r7, [r5, #0]
 800a060:	2900      	cmp	r1, #0
 800a062:	d0ca      	beq.n	8009ffa <__sflush_r+0x1a>
 800a064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a068:	4299      	cmp	r1, r3
 800a06a:	d002      	beq.n	800a072 <__sflush_r+0x92>
 800a06c:	4628      	mov	r0, r5
 800a06e:	f7ff faa5 	bl	80095bc <_free_r>
 800a072:	2000      	movs	r0, #0
 800a074:	6360      	str	r0, [r4, #52]	; 0x34
 800a076:	e7c1      	b.n	8009ffc <__sflush_r+0x1c>
 800a078:	6a21      	ldr	r1, [r4, #32]
 800a07a:	2301      	movs	r3, #1
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b0      	blx	r6
 800a080:	1c41      	adds	r1, r0, #1
 800a082:	d1c7      	bne.n	800a014 <__sflush_r+0x34>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d0c4      	beq.n	800a014 <__sflush_r+0x34>
 800a08a:	2b1d      	cmp	r3, #29
 800a08c:	d001      	beq.n	800a092 <__sflush_r+0xb2>
 800a08e:	2b16      	cmp	r3, #22
 800a090:	d101      	bne.n	800a096 <__sflush_r+0xb6>
 800a092:	602f      	str	r7, [r5, #0]
 800a094:	e7b1      	b.n	8009ffa <__sflush_r+0x1a>
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	e7ad      	b.n	8009ffc <__sflush_r+0x1c>
 800a0a0:	690f      	ldr	r7, [r1, #16]
 800a0a2:	2f00      	cmp	r7, #0
 800a0a4:	d0a9      	beq.n	8009ffa <__sflush_r+0x1a>
 800a0a6:	0793      	lsls	r3, r2, #30
 800a0a8:	680e      	ldr	r6, [r1, #0]
 800a0aa:	bf08      	it	eq
 800a0ac:	694b      	ldreq	r3, [r1, #20]
 800a0ae:	600f      	str	r7, [r1, #0]
 800a0b0:	bf18      	it	ne
 800a0b2:	2300      	movne	r3, #0
 800a0b4:	eba6 0807 	sub.w	r8, r6, r7
 800a0b8:	608b      	str	r3, [r1, #8]
 800a0ba:	f1b8 0f00 	cmp.w	r8, #0
 800a0be:	dd9c      	ble.n	8009ffa <__sflush_r+0x1a>
 800a0c0:	6a21      	ldr	r1, [r4, #32]
 800a0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0c4:	4643      	mov	r3, r8
 800a0c6:	463a      	mov	r2, r7
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b0      	blx	r6
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dc06      	bgt.n	800a0de <__sflush_r+0xfe>
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	e78e      	b.n	8009ffc <__sflush_r+0x1c>
 800a0de:	4407      	add	r7, r0
 800a0e0:	eba8 0800 	sub.w	r8, r8, r0
 800a0e4:	e7e9      	b.n	800a0ba <__sflush_r+0xda>
 800a0e6:	bf00      	nop
 800a0e8:	20400001 	.word	0x20400001

0800a0ec <_fflush_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	b913      	cbnz	r3, 800a0fc <_fflush_r+0x10>
 800a0f6:	2500      	movs	r5, #0
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	b118      	cbz	r0, 800a106 <_fflush_r+0x1a>
 800a0fe:	6983      	ldr	r3, [r0, #24]
 800a100:	b90b      	cbnz	r3, 800a106 <_fflush_r+0x1a>
 800a102:	f000 f887 	bl	800a214 <__sinit>
 800a106:	4b14      	ldr	r3, [pc, #80]	; (800a158 <_fflush_r+0x6c>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	d11b      	bne.n	800a144 <_fflush_r+0x58>
 800a10c:	686c      	ldr	r4, [r5, #4]
 800a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0ef      	beq.n	800a0f6 <_fflush_r+0xa>
 800a116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a118:	07d0      	lsls	r0, r2, #31
 800a11a:	d404      	bmi.n	800a126 <_fflush_r+0x3a>
 800a11c:	0599      	lsls	r1, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_fflush_r+0x3a>
 800a120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a122:	f000 f915 	bl	800a350 <__retarget_lock_acquire_recursive>
 800a126:	4628      	mov	r0, r5
 800a128:	4621      	mov	r1, r4
 800a12a:	f7ff ff59 	bl	8009fe0 <__sflush_r>
 800a12e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a130:	07da      	lsls	r2, r3, #31
 800a132:	4605      	mov	r5, r0
 800a134:	d4e0      	bmi.n	800a0f8 <_fflush_r+0xc>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	059b      	lsls	r3, r3, #22
 800a13a:	d4dd      	bmi.n	800a0f8 <_fflush_r+0xc>
 800a13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a13e:	f000 f908 	bl	800a352 <__retarget_lock_release_recursive>
 800a142:	e7d9      	b.n	800a0f8 <_fflush_r+0xc>
 800a144:	4b05      	ldr	r3, [pc, #20]	; (800a15c <_fflush_r+0x70>)
 800a146:	429c      	cmp	r4, r3
 800a148:	d101      	bne.n	800a14e <_fflush_r+0x62>
 800a14a:	68ac      	ldr	r4, [r5, #8]
 800a14c:	e7df      	b.n	800a10e <_fflush_r+0x22>
 800a14e:	4b04      	ldr	r3, [pc, #16]	; (800a160 <_fflush_r+0x74>)
 800a150:	429c      	cmp	r4, r3
 800a152:	bf08      	it	eq
 800a154:	68ec      	ldreq	r4, [r5, #12]
 800a156:	e7da      	b.n	800a10e <_fflush_r+0x22>
 800a158:	0800b7dc 	.word	0x0800b7dc
 800a15c:	0800b7fc 	.word	0x0800b7fc
 800a160:	0800b7bc 	.word	0x0800b7bc

0800a164 <std>:
 800a164:	2300      	movs	r3, #0
 800a166:	b510      	push	{r4, lr}
 800a168:	4604      	mov	r4, r0
 800a16a:	e9c0 3300 	strd	r3, r3, [r0]
 800a16e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a172:	6083      	str	r3, [r0, #8]
 800a174:	8181      	strh	r1, [r0, #12]
 800a176:	6643      	str	r3, [r0, #100]	; 0x64
 800a178:	81c2      	strh	r2, [r0, #14]
 800a17a:	6183      	str	r3, [r0, #24]
 800a17c:	4619      	mov	r1, r3
 800a17e:	2208      	movs	r2, #8
 800a180:	305c      	adds	r0, #92	; 0x5c
 800a182:	f7fd fb5b 	bl	800783c <memset>
 800a186:	4b05      	ldr	r3, [pc, #20]	; (800a19c <std+0x38>)
 800a188:	6263      	str	r3, [r4, #36]	; 0x24
 800a18a:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <std+0x3c>)
 800a18c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a18e:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <std+0x40>)
 800a190:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <std+0x44>)
 800a194:	6224      	str	r4, [r4, #32]
 800a196:	6323      	str	r3, [r4, #48]	; 0x30
 800a198:	bd10      	pop	{r4, pc}
 800a19a:	bf00      	nop
 800a19c:	0800a4b9 	.word	0x0800a4b9
 800a1a0:	0800a4db 	.word	0x0800a4db
 800a1a4:	0800a513 	.word	0x0800a513
 800a1a8:	0800a537 	.word	0x0800a537

0800a1ac <_cleanup_r>:
 800a1ac:	4901      	ldr	r1, [pc, #4]	; (800a1b4 <_cleanup_r+0x8>)
 800a1ae:	f000 b8af 	b.w	800a310 <_fwalk_reent>
 800a1b2:	bf00      	nop
 800a1b4:	0800a0ed 	.word	0x0800a0ed

0800a1b8 <__sfmoreglue>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	2268      	movs	r2, #104	; 0x68
 800a1bc:	1e4d      	subs	r5, r1, #1
 800a1be:	4355      	muls	r5, r2
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1c6:	f7ff fa65 	bl	8009694 <_malloc_r>
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	b140      	cbz	r0, 800a1e0 <__sfmoreglue+0x28>
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	e9c0 1600 	strd	r1, r6, [r0]
 800a1d4:	300c      	adds	r0, #12
 800a1d6:	60a0      	str	r0, [r4, #8]
 800a1d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1dc:	f7fd fb2e 	bl	800783c <memset>
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}

0800a1e4 <__sfp_lock_acquire>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__sfp_lock_acquire+0x8>)
 800a1e6:	f000 b8b3 	b.w	800a350 <__retarget_lock_acquire_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	20000789 	.word	0x20000789

0800a1f0 <__sfp_lock_release>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <__sfp_lock_release+0x8>)
 800a1f2:	f000 b8ae 	b.w	800a352 <__retarget_lock_release_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20000789 	.word	0x20000789

0800a1fc <__sinit_lock_acquire>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	; (800a204 <__sinit_lock_acquire+0x8>)
 800a1fe:	f000 b8a7 	b.w	800a350 <__retarget_lock_acquire_recursive>
 800a202:	bf00      	nop
 800a204:	2000078a 	.word	0x2000078a

0800a208 <__sinit_lock_release>:
 800a208:	4801      	ldr	r0, [pc, #4]	; (800a210 <__sinit_lock_release+0x8>)
 800a20a:	f000 b8a2 	b.w	800a352 <__retarget_lock_release_recursive>
 800a20e:	bf00      	nop
 800a210:	2000078a 	.word	0x2000078a

0800a214 <__sinit>:
 800a214:	b510      	push	{r4, lr}
 800a216:	4604      	mov	r4, r0
 800a218:	f7ff fff0 	bl	800a1fc <__sinit_lock_acquire>
 800a21c:	69a3      	ldr	r3, [r4, #24]
 800a21e:	b11b      	cbz	r3, 800a228 <__sinit+0x14>
 800a220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a224:	f7ff bff0 	b.w	800a208 <__sinit_lock_release>
 800a228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a22c:	6523      	str	r3, [r4, #80]	; 0x50
 800a22e:	4b13      	ldr	r3, [pc, #76]	; (800a27c <__sinit+0x68>)
 800a230:	4a13      	ldr	r2, [pc, #76]	; (800a280 <__sinit+0x6c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	62a2      	str	r2, [r4, #40]	; 0x28
 800a236:	42a3      	cmp	r3, r4
 800a238:	bf04      	itt	eq
 800a23a:	2301      	moveq	r3, #1
 800a23c:	61a3      	streq	r3, [r4, #24]
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 f820 	bl	800a284 <__sfp>
 800a244:	6060      	str	r0, [r4, #4]
 800a246:	4620      	mov	r0, r4
 800a248:	f000 f81c 	bl	800a284 <__sfp>
 800a24c:	60a0      	str	r0, [r4, #8]
 800a24e:	4620      	mov	r0, r4
 800a250:	f000 f818 	bl	800a284 <__sfp>
 800a254:	2200      	movs	r2, #0
 800a256:	60e0      	str	r0, [r4, #12]
 800a258:	2104      	movs	r1, #4
 800a25a:	6860      	ldr	r0, [r4, #4]
 800a25c:	f7ff ff82 	bl	800a164 <std>
 800a260:	68a0      	ldr	r0, [r4, #8]
 800a262:	2201      	movs	r2, #1
 800a264:	2109      	movs	r1, #9
 800a266:	f7ff ff7d 	bl	800a164 <std>
 800a26a:	68e0      	ldr	r0, [r4, #12]
 800a26c:	2202      	movs	r2, #2
 800a26e:	2112      	movs	r1, #18
 800a270:	f7ff ff78 	bl	800a164 <std>
 800a274:	2301      	movs	r3, #1
 800a276:	61a3      	str	r3, [r4, #24]
 800a278:	e7d2      	b.n	800a220 <__sinit+0xc>
 800a27a:	bf00      	nop
 800a27c:	0800b444 	.word	0x0800b444
 800a280:	0800a1ad 	.word	0x0800a1ad

0800a284 <__sfp>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	4607      	mov	r7, r0
 800a288:	f7ff ffac 	bl	800a1e4 <__sfp_lock_acquire>
 800a28c:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <__sfp+0x84>)
 800a28e:	681e      	ldr	r6, [r3, #0]
 800a290:	69b3      	ldr	r3, [r6, #24]
 800a292:	b913      	cbnz	r3, 800a29a <__sfp+0x16>
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff ffbd 	bl	800a214 <__sinit>
 800a29a:	3648      	adds	r6, #72	; 0x48
 800a29c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	d503      	bpl.n	800a2ac <__sfp+0x28>
 800a2a4:	6833      	ldr	r3, [r6, #0]
 800a2a6:	b30b      	cbz	r3, 800a2ec <__sfp+0x68>
 800a2a8:	6836      	ldr	r6, [r6, #0]
 800a2aa:	e7f7      	b.n	800a29c <__sfp+0x18>
 800a2ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2b0:	b9d5      	cbnz	r5, 800a2e8 <__sfp+0x64>
 800a2b2:	4b16      	ldr	r3, [pc, #88]	; (800a30c <__sfp+0x88>)
 800a2b4:	60e3      	str	r3, [r4, #12]
 800a2b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2ba:	6665      	str	r5, [r4, #100]	; 0x64
 800a2bc:	f000 f847 	bl	800a34e <__retarget_lock_init_recursive>
 800a2c0:	f7ff ff96 	bl	800a1f0 <__sfp_lock_release>
 800a2c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2cc:	6025      	str	r5, [r4, #0]
 800a2ce:	61a5      	str	r5, [r4, #24]
 800a2d0:	2208      	movs	r2, #8
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2d8:	f7fd fab0 	bl	800783c <memset>
 800a2dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e8:	3468      	adds	r4, #104	; 0x68
 800a2ea:	e7d9      	b.n	800a2a0 <__sfp+0x1c>
 800a2ec:	2104      	movs	r1, #4
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f7ff ff62 	bl	800a1b8 <__sfmoreglue>
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	6030      	str	r0, [r6, #0]
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d1d5      	bne.n	800a2a8 <__sfp+0x24>
 800a2fc:	f7ff ff78 	bl	800a1f0 <__sfp_lock_release>
 800a300:	230c      	movs	r3, #12
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	e7ee      	b.n	800a2e4 <__sfp+0x60>
 800a306:	bf00      	nop
 800a308:	0800b444 	.word	0x0800b444
 800a30c:	ffff0001 	.word	0xffff0001

0800a310 <_fwalk_reent>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	4606      	mov	r6, r0
 800a316:	4688      	mov	r8, r1
 800a318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a31c:	2700      	movs	r7, #0
 800a31e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a322:	f1b9 0901 	subs.w	r9, r9, #1
 800a326:	d505      	bpl.n	800a334 <_fwalk_reent+0x24>
 800a328:	6824      	ldr	r4, [r4, #0]
 800a32a:	2c00      	cmp	r4, #0
 800a32c:	d1f7      	bne.n	800a31e <_fwalk_reent+0xe>
 800a32e:	4638      	mov	r0, r7
 800a330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a334:	89ab      	ldrh	r3, [r5, #12]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d907      	bls.n	800a34a <_fwalk_reent+0x3a>
 800a33a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a33e:	3301      	adds	r3, #1
 800a340:	d003      	beq.n	800a34a <_fwalk_reent+0x3a>
 800a342:	4629      	mov	r1, r5
 800a344:	4630      	mov	r0, r6
 800a346:	47c0      	blx	r8
 800a348:	4307      	orrs	r7, r0
 800a34a:	3568      	adds	r5, #104	; 0x68
 800a34c:	e7e9      	b.n	800a322 <_fwalk_reent+0x12>

0800a34e <__retarget_lock_init_recursive>:
 800a34e:	4770      	bx	lr

0800a350 <__retarget_lock_acquire_recursive>:
 800a350:	4770      	bx	lr

0800a352 <__retarget_lock_release_recursive>:
 800a352:	4770      	bx	lr

0800a354 <__swhatbuf_r>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	460e      	mov	r6, r1
 800a358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35c:	2900      	cmp	r1, #0
 800a35e:	b096      	sub	sp, #88	; 0x58
 800a360:	4614      	mov	r4, r2
 800a362:	461d      	mov	r5, r3
 800a364:	da08      	bge.n	800a378 <__swhatbuf_r+0x24>
 800a366:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	061a      	lsls	r2, r3, #24
 800a370:	d410      	bmi.n	800a394 <__swhatbuf_r+0x40>
 800a372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a376:	e00e      	b.n	800a396 <__swhatbuf_r+0x42>
 800a378:	466a      	mov	r2, sp
 800a37a:	f000 f903 	bl	800a584 <_fstat_r>
 800a37e:	2800      	cmp	r0, #0
 800a380:	dbf1      	blt.n	800a366 <__swhatbuf_r+0x12>
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a38c:	425a      	negs	r2, r3
 800a38e:	415a      	adcs	r2, r3
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	e7ee      	b.n	800a372 <__swhatbuf_r+0x1e>
 800a394:	2340      	movs	r3, #64	; 0x40
 800a396:	2000      	movs	r0, #0
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	b016      	add	sp, #88	; 0x58
 800a39c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3a0 <__smakebuf_r>:
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3a4:	079d      	lsls	r5, r3, #30
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d507      	bpl.n	800a3bc <__smakebuf_r+0x1c>
 800a3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	b002      	add	sp, #8
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	ab01      	add	r3, sp, #4
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f7ff ffc8 	bl	800a354 <__swhatbuf_r>
 800a3c4:	9900      	ldr	r1, [sp, #0]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff f963 	bl	8009694 <_malloc_r>
 800a3ce:	b948      	cbnz	r0, 800a3e4 <__smakebuf_r+0x44>
 800a3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d4:	059a      	lsls	r2, r3, #22
 800a3d6:	d4ef      	bmi.n	800a3b8 <__smakebuf_r+0x18>
 800a3d8:	f023 0303 	bic.w	r3, r3, #3
 800a3dc:	f043 0302 	orr.w	r3, r3, #2
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	e7e3      	b.n	800a3ac <__smakebuf_r+0xc>
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <__smakebuf_r+0x7c>)
 800a3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	6020      	str	r0, [r4, #0]
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	6163      	str	r3, [r4, #20]
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	6120      	str	r0, [r4, #16]
 800a3fa:	b15b      	cbz	r3, 800a414 <__smakebuf_r+0x74>
 800a3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a400:	4630      	mov	r0, r6
 800a402:	f000 f8d1 	bl	800a5a8 <_isatty_r>
 800a406:	b128      	cbz	r0, 800a414 <__smakebuf_r+0x74>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	89a0      	ldrh	r0, [r4, #12]
 800a416:	4305      	orrs	r5, r0
 800a418:	81a5      	strh	r5, [r4, #12]
 800a41a:	e7cd      	b.n	800a3b8 <__smakebuf_r+0x18>
 800a41c:	0800a1ad 	.word	0x0800a1ad

0800a420 <_malloc_usable_size_r>:
 800a420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a424:	1f18      	subs	r0, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	bfbc      	itt	lt
 800a42a:	580b      	ldrlt	r3, [r1, r0]
 800a42c:	18c0      	addlt	r0, r0, r3
 800a42e:	4770      	bx	lr

0800a430 <_raise_r>:
 800a430:	291f      	cmp	r1, #31
 800a432:	b538      	push	{r3, r4, r5, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	d904      	bls.n	800a444 <_raise_r+0x14>
 800a43a:	2316      	movs	r3, #22
 800a43c:	6003      	str	r3, [r0, #0]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a446:	b112      	cbz	r2, 800a44e <_raise_r+0x1e>
 800a448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a44c:	b94b      	cbnz	r3, 800a462 <_raise_r+0x32>
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 f830 	bl	800a4b4 <_getpid_r>
 800a454:	462a      	mov	r2, r5
 800a456:	4601      	mov	r1, r0
 800a458:	4620      	mov	r0, r4
 800a45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45e:	f000 b817 	b.w	800a490 <_kill_r>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d00a      	beq.n	800a47c <_raise_r+0x4c>
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	d103      	bne.n	800a472 <_raise_r+0x42>
 800a46a:	2316      	movs	r3, #22
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	2001      	movs	r0, #1
 800a470:	e7e7      	b.n	800a442 <_raise_r+0x12>
 800a472:	2400      	movs	r4, #0
 800a474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a478:	4628      	mov	r0, r5
 800a47a:	4798      	blx	r3
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7e0      	b.n	800a442 <_raise_r+0x12>

0800a480 <raise>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <raise+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f7ff bfd3 	b.w	800a430 <_raise_r>
 800a48a:	bf00      	nop
 800a48c:	2000002c 	.word	0x2000002c

0800a490 <_kill_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_kill_r+0x20>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	f7f9 fa49 	bl	8003934 <_kill>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d102      	bne.n	800a4ac <_kill_r+0x1c>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	b103      	cbz	r3, 800a4ac <_kill_r+0x1c>
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000784 	.word	0x20000784

0800a4b4 <_getpid_r>:
 800a4b4:	f7f9 ba3c 	b.w	8003930 <_getpid>

0800a4b8 <__sread>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c0:	f000 f894 	bl	800a5ec <_read_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	bfab      	itete	ge
 800a4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a4cc:	181b      	addge	r3, r3, r0
 800a4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4d2:	bfac      	ite	ge
 800a4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4d6:	81a3      	strhlt	r3, [r4, #12]
 800a4d8:	bd10      	pop	{r4, pc}

0800a4da <__swrite>:
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	461f      	mov	r7, r3
 800a4e0:	898b      	ldrh	r3, [r1, #12]
 800a4e2:	05db      	lsls	r3, r3, #23
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	d505      	bpl.n	800a4f8 <__swrite+0x1e>
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f000 f868 	bl	800a5c8 <_lseek_r>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	4632      	mov	r2, r6
 800a506:	463b      	mov	r3, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	f000 b817 	b.w	800a540 <_write_r>

0800a512 <__sseek>:
 800a512:	b510      	push	{r4, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 f855 	bl	800a5c8 <_lseek_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	bf15      	itete	ne
 800a524:	6560      	strne	r0, [r4, #84]	; 0x54
 800a526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strheq	r3, [r4, #12]
 800a530:	bf18      	it	ne
 800a532:	81a3      	strhne	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__sclose>:
 800a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53a:	f000 b813 	b.w	800a564 <_close_r>
	...

0800a540 <_write_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_write_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f9 fa0c 	bl	800396c <_write>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_write_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_write_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20000784 	.word	0x20000784

0800a564 <_close_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_close_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f9 fa0a 	bl	8003988 <_close>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_close_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_close_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20000784 	.word	0x20000784

0800a584 <_fstat_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_fstat_r+0x20>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	f7f9 f9fd 	bl	8003990 <_fstat>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d102      	bne.n	800a5a0 <_fstat_r+0x1c>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	b103      	cbz	r3, 800a5a0 <_fstat_r+0x1c>
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	bd38      	pop	{r3, r4, r5, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000784 	.word	0x20000784

0800a5a8 <_isatty_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d06      	ldr	r5, [pc, #24]	; (800a5c4 <_isatty_r+0x1c>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7f9 f9f2 	bl	800399c <_isatty>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_isatty_r+0x1a>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_isatty_r+0x1a>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	20000784 	.word	0x20000784

0800a5c8 <_lseek_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_lseek_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f9 f9e2 	bl	80039a0 <_lseek>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_lseek_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_lseek_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20000784 	.word	0x20000784

0800a5ec <_read_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	; (800a60c <_read_r+0x20>)
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	602a      	str	r2, [r5, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7f9 f9a8 	bl	8003950 <_read>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_read_r+0x1e>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_read_r+0x1e>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20000784 	.word	0x20000784

0800a610 <cosf>:
 800a610:	ee10 3a10 	vmov	r3, s0
 800a614:	b507      	push	{r0, r1, r2, lr}
 800a616:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <cosf+0x80>)
 800a618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a61c:	4293      	cmp	r3, r2
 800a61e:	dc06      	bgt.n	800a62e <cosf+0x1e>
 800a620:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a694 <cosf+0x84>
 800a624:	b003      	add	sp, #12
 800a626:	f85d eb04 	ldr.w	lr, [sp], #4
 800a62a:	f000 ba7b 	b.w	800ab24 <__kernel_cosf>
 800a62e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a632:	db04      	blt.n	800a63e <cosf+0x2e>
 800a634:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a638:	b003      	add	sp, #12
 800a63a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a63e:	4668      	mov	r0, sp
 800a640:	f000 f930 	bl	800a8a4 <__ieee754_rem_pio2f>
 800a644:	f000 0003 	and.w	r0, r0, #3
 800a648:	2801      	cmp	r0, #1
 800a64a:	d009      	beq.n	800a660 <cosf+0x50>
 800a64c:	2802      	cmp	r0, #2
 800a64e:	d010      	beq.n	800a672 <cosf+0x62>
 800a650:	b9b0      	cbnz	r0, 800a680 <cosf+0x70>
 800a652:	eddd 0a01 	vldr	s1, [sp, #4]
 800a656:	ed9d 0a00 	vldr	s0, [sp]
 800a65a:	f000 fa63 	bl	800ab24 <__kernel_cosf>
 800a65e:	e7eb      	b.n	800a638 <cosf+0x28>
 800a660:	eddd 0a01 	vldr	s1, [sp, #4]
 800a664:	ed9d 0a00 	vldr	s0, [sp]
 800a668:	f000 fd32 	bl	800b0d0 <__kernel_sinf>
 800a66c:	eeb1 0a40 	vneg.f32	s0, s0
 800a670:	e7e2      	b.n	800a638 <cosf+0x28>
 800a672:	eddd 0a01 	vldr	s1, [sp, #4]
 800a676:	ed9d 0a00 	vldr	s0, [sp]
 800a67a:	f000 fa53 	bl	800ab24 <__kernel_cosf>
 800a67e:	e7f5      	b.n	800a66c <cosf+0x5c>
 800a680:	eddd 0a01 	vldr	s1, [sp, #4]
 800a684:	ed9d 0a00 	vldr	s0, [sp]
 800a688:	2001      	movs	r0, #1
 800a68a:	f000 fd21 	bl	800b0d0 <__kernel_sinf>
 800a68e:	e7d3      	b.n	800a638 <cosf+0x28>
 800a690:	3f490fd8 	.word	0x3f490fd8
 800a694:	00000000 	.word	0x00000000

0800a698 <sinf>:
 800a698:	ee10 3a10 	vmov	r3, s0
 800a69c:	b507      	push	{r0, r1, r2, lr}
 800a69e:	4a1f      	ldr	r2, [pc, #124]	; (800a71c <sinf+0x84>)
 800a6a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	dc07      	bgt.n	800a6b8 <sinf+0x20>
 800a6a8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a720 <sinf+0x88>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	b003      	add	sp, #12
 800a6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b4:	f000 bd0c 	b.w	800b0d0 <__kernel_sinf>
 800a6b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6bc:	db04      	blt.n	800a6c8 <sinf+0x30>
 800a6be:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a6c2:	b003      	add	sp, #12
 800a6c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6c8:	4668      	mov	r0, sp
 800a6ca:	f000 f8eb 	bl	800a8a4 <__ieee754_rem_pio2f>
 800a6ce:	f000 0003 	and.w	r0, r0, #3
 800a6d2:	2801      	cmp	r0, #1
 800a6d4:	d00a      	beq.n	800a6ec <sinf+0x54>
 800a6d6:	2802      	cmp	r0, #2
 800a6d8:	d00f      	beq.n	800a6fa <sinf+0x62>
 800a6da:	b9c0      	cbnz	r0, 800a70e <sinf+0x76>
 800a6dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6e0:	ed9d 0a00 	vldr	s0, [sp]
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f000 fcf3 	bl	800b0d0 <__kernel_sinf>
 800a6ea:	e7ea      	b.n	800a6c2 <sinf+0x2a>
 800a6ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6f0:	ed9d 0a00 	vldr	s0, [sp]
 800a6f4:	f000 fa16 	bl	800ab24 <__kernel_cosf>
 800a6f8:	e7e3      	b.n	800a6c2 <sinf+0x2a>
 800a6fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6fe:	ed9d 0a00 	vldr	s0, [sp]
 800a702:	2001      	movs	r0, #1
 800a704:	f000 fce4 	bl	800b0d0 <__kernel_sinf>
 800a708:	eeb1 0a40 	vneg.f32	s0, s0
 800a70c:	e7d9      	b.n	800a6c2 <sinf+0x2a>
 800a70e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a712:	ed9d 0a00 	vldr	s0, [sp]
 800a716:	f000 fa05 	bl	800ab24 <__kernel_cosf>
 800a71a:	e7f5      	b.n	800a708 <sinf+0x70>
 800a71c:	3f490fd8 	.word	0x3f490fd8
 800a720:	00000000 	.word	0x00000000

0800a724 <fmodf>:
 800a724:	b508      	push	{r3, lr}
 800a726:	ed2d 8b02 	vpush	{d8}
 800a72a:	eef0 8a40 	vmov.f32	s17, s0
 800a72e:	eeb0 8a60 	vmov.f32	s16, s1
 800a732:	f000 f835 	bl	800a7a0 <__ieee754_fmodf>
 800a736:	eef4 8a48 	vcmp.f32	s17, s16
 800a73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73e:	d60c      	bvs.n	800a75a <fmodf+0x36>
 800a740:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a760 <fmodf+0x3c>
 800a744:	eeb4 8a68 	vcmp.f32	s16, s17
 800a748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74c:	d105      	bne.n	800a75a <fmodf+0x36>
 800a74e:	f7fd f84b 	bl	80077e8 <__errno>
 800a752:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a756:	2321      	movs	r3, #33	; 0x21
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	ecbd 8b02 	vpop	{d8}
 800a75e:	bd08      	pop	{r3, pc}
 800a760:	00000000 	.word	0x00000000

0800a764 <sqrtf>:
 800a764:	b508      	push	{r3, lr}
 800a766:	ed2d 8b02 	vpush	{d8}
 800a76a:	eeb0 8a40 	vmov.f32	s16, s0
 800a76e:	f000 f9d5 	bl	800ab1c <__ieee754_sqrtf>
 800a772:	eeb4 8a48 	vcmp.f32	s16, s16
 800a776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a77a:	d60c      	bvs.n	800a796 <sqrtf+0x32>
 800a77c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a79c <sqrtf+0x38>
 800a780:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a788:	d505      	bpl.n	800a796 <sqrtf+0x32>
 800a78a:	f7fd f82d 	bl	80077e8 <__errno>
 800a78e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a792:	2321      	movs	r3, #33	; 0x21
 800a794:	6003      	str	r3, [r0, #0]
 800a796:	ecbd 8b02 	vpop	{d8}
 800a79a:	bd08      	pop	{r3, pc}
 800a79c:	00000000 	.word	0x00000000

0800a7a0 <__ieee754_fmodf>:
 800a7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7a2:	ee10 5a90 	vmov	r5, s1
 800a7a6:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a7aa:	d009      	beq.n	800a7c0 <__ieee754_fmodf+0x20>
 800a7ac:	ee10 2a10 	vmov	r2, s0
 800a7b0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a7b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7b8:	da02      	bge.n	800a7c0 <__ieee754_fmodf+0x20>
 800a7ba:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a7be:	dd04      	ble.n	800a7ca <__ieee754_fmodf+0x2a>
 800a7c0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a7c4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	dbfc      	blt.n	800a7c8 <__ieee754_fmodf+0x28>
 800a7ce:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a7d2:	d105      	bne.n	800a7e0 <__ieee754_fmodf+0x40>
 800a7d4:	4b32      	ldr	r3, [pc, #200]	; (800a8a0 <__ieee754_fmodf+0x100>)
 800a7d6:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a7da:	ed93 0a00 	vldr	s0, [r3]
 800a7de:	e7f3      	b.n	800a7c8 <__ieee754_fmodf+0x28>
 800a7e0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a7e4:	d13f      	bne.n	800a866 <__ieee754_fmodf+0xc6>
 800a7e6:	0219      	lsls	r1, r3, #8
 800a7e8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a7ec:	2900      	cmp	r1, #0
 800a7ee:	dc37      	bgt.n	800a860 <__ieee754_fmodf+0xc0>
 800a7f0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a7f4:	d13d      	bne.n	800a872 <__ieee754_fmodf+0xd2>
 800a7f6:	0227      	lsls	r7, r4, #8
 800a7f8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	da35      	bge.n	800a86c <__ieee754_fmodf+0xcc>
 800a800:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a804:	bfbb      	ittet	lt
 800a806:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a80a:	1a12      	sublt	r2, r2, r0
 800a80c:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a810:	4093      	lsllt	r3, r2
 800a812:	bfa8      	it	ge
 800a814:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a818:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a81c:	bfb5      	itete	lt
 800a81e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a822:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a826:	1a52      	sublt	r2, r2, r1
 800a828:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a82c:	bfb8      	it	lt
 800a82e:	4094      	lsllt	r4, r2
 800a830:	1a40      	subs	r0, r0, r1
 800a832:	1b1a      	subs	r2, r3, r4
 800a834:	bb00      	cbnz	r0, 800a878 <__ieee754_fmodf+0xd8>
 800a836:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a83a:	bf38      	it	cc
 800a83c:	4613      	movcc	r3, r2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0c8      	beq.n	800a7d4 <__ieee754_fmodf+0x34>
 800a842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a846:	db1f      	blt.n	800a888 <__ieee754_fmodf+0xe8>
 800a848:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a84c:	db1f      	blt.n	800a88e <__ieee754_fmodf+0xee>
 800a84e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a852:	317f      	adds	r1, #127	; 0x7f
 800a854:	4333      	orrs	r3, r6
 800a856:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a85a:	ee00 3a10 	vmov	s0, r3
 800a85e:	e7b3      	b.n	800a7c8 <__ieee754_fmodf+0x28>
 800a860:	3801      	subs	r0, #1
 800a862:	0049      	lsls	r1, r1, #1
 800a864:	e7c2      	b.n	800a7ec <__ieee754_fmodf+0x4c>
 800a866:	15d8      	asrs	r0, r3, #23
 800a868:	387f      	subs	r0, #127	; 0x7f
 800a86a:	e7c1      	b.n	800a7f0 <__ieee754_fmodf+0x50>
 800a86c:	3901      	subs	r1, #1
 800a86e:	007f      	lsls	r7, r7, #1
 800a870:	e7c4      	b.n	800a7fc <__ieee754_fmodf+0x5c>
 800a872:	15e1      	asrs	r1, r4, #23
 800a874:	397f      	subs	r1, #127	; 0x7f
 800a876:	e7c3      	b.n	800a800 <__ieee754_fmodf+0x60>
 800a878:	2a00      	cmp	r2, #0
 800a87a:	da02      	bge.n	800a882 <__ieee754_fmodf+0xe2>
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	3801      	subs	r0, #1
 800a880:	e7d7      	b.n	800a832 <__ieee754_fmodf+0x92>
 800a882:	d0a7      	beq.n	800a7d4 <__ieee754_fmodf+0x34>
 800a884:	0053      	lsls	r3, r2, #1
 800a886:	e7fa      	b.n	800a87e <__ieee754_fmodf+0xde>
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	3901      	subs	r1, #1
 800a88c:	e7d9      	b.n	800a842 <__ieee754_fmodf+0xa2>
 800a88e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a892:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a896:	3182      	adds	r1, #130	; 0x82
 800a898:	410b      	asrs	r3, r1
 800a89a:	4333      	orrs	r3, r6
 800a89c:	e7dd      	b.n	800a85a <__ieee754_fmodf+0xba>
 800a89e:	bf00      	nop
 800a8a0:	0800b81c 	.word	0x0800b81c

0800a8a4 <__ieee754_rem_pio2f>:
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	ee10 6a10 	vmov	r6, s0
 800a8aa:	4b8e      	ldr	r3, [pc, #568]	; (800aae4 <__ieee754_rem_pio2f+0x240>)
 800a8ac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a8b0:	429d      	cmp	r5, r3
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	eef0 7a40 	vmov.f32	s15, s0
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	dc05      	bgt.n	800a8c8 <__ieee754_rem_pio2f+0x24>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	ed80 0a00 	vstr	s0, [r0]
 800a8c2:	6043      	str	r3, [r0, #4]
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e01a      	b.n	800a8fe <__ieee754_rem_pio2f+0x5a>
 800a8c8:	4b87      	ldr	r3, [pc, #540]	; (800aae8 <__ieee754_rem_pio2f+0x244>)
 800a8ca:	429d      	cmp	r5, r3
 800a8cc:	dc46      	bgt.n	800a95c <__ieee754_rem_pio2f+0xb8>
 800a8ce:	2e00      	cmp	r6, #0
 800a8d0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800aaec <__ieee754_rem_pio2f+0x248>
 800a8d4:	4b86      	ldr	r3, [pc, #536]	; (800aaf0 <__ieee754_rem_pio2f+0x24c>)
 800a8d6:	f025 050f 	bic.w	r5, r5, #15
 800a8da:	dd1f      	ble.n	800a91c <__ieee754_rem_pio2f+0x78>
 800a8dc:	429d      	cmp	r5, r3
 800a8de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a8e2:	d00e      	beq.n	800a902 <__ieee754_rem_pio2f+0x5e>
 800a8e4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800aaf4 <__ieee754_rem_pio2f+0x250>
 800a8e8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a8ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a8f0:	ed80 0a00 	vstr	s0, [r0]
 800a8f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	edc4 7a01 	vstr	s15, [r4, #4]
 800a8fe:	b007      	add	sp, #28
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800aaf8 <__ieee754_rem_pio2f+0x254>
 800a906:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800aafc <__ieee754_rem_pio2f+0x258>
 800a90a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a90e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a912:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a916:	edc0 6a00 	vstr	s13, [r0]
 800a91a:	e7eb      	b.n	800a8f4 <__ieee754_rem_pio2f+0x50>
 800a91c:	429d      	cmp	r5, r3
 800a91e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a922:	d00e      	beq.n	800a942 <__ieee754_rem_pio2f+0x9e>
 800a924:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800aaf4 <__ieee754_rem_pio2f+0x250>
 800a928:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a92c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a930:	ed80 0a00 	vstr	s0, [r0]
 800a934:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a938:	f04f 30ff 	mov.w	r0, #4294967295
 800a93c:	edc4 7a01 	vstr	s15, [r4, #4]
 800a940:	e7dd      	b.n	800a8fe <__ieee754_rem_pio2f+0x5a>
 800a942:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800aaf8 <__ieee754_rem_pio2f+0x254>
 800a946:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800aafc <__ieee754_rem_pio2f+0x258>
 800a94a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a94e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a952:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a956:	edc0 6a00 	vstr	s13, [r0]
 800a95a:	e7eb      	b.n	800a934 <__ieee754_rem_pio2f+0x90>
 800a95c:	4b68      	ldr	r3, [pc, #416]	; (800ab00 <__ieee754_rem_pio2f+0x25c>)
 800a95e:	429d      	cmp	r5, r3
 800a960:	dc72      	bgt.n	800aa48 <__ieee754_rem_pio2f+0x1a4>
 800a962:	f000 fbfd 	bl	800b160 <fabsf>
 800a966:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ab04 <__ieee754_rem_pio2f+0x260>
 800a96a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a96e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a97a:	ee17 0a90 	vmov	r0, s15
 800a97e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800aaec <__ieee754_rem_pio2f+0x248>
 800a982:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a986:	281f      	cmp	r0, #31
 800a988:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800aaf4 <__ieee754_rem_pio2f+0x250>
 800a98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a990:	eeb1 6a47 	vneg.f32	s12, s14
 800a994:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a998:	ee16 2a90 	vmov	r2, s13
 800a99c:	dc1c      	bgt.n	800a9d8 <__ieee754_rem_pio2f+0x134>
 800a99e:	495a      	ldr	r1, [pc, #360]	; (800ab08 <__ieee754_rem_pio2f+0x264>)
 800a9a0:	1e47      	subs	r7, r0, #1
 800a9a2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a9a6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a9aa:	428b      	cmp	r3, r1
 800a9ac:	d014      	beq.n	800a9d8 <__ieee754_rem_pio2f+0x134>
 800a9ae:	6022      	str	r2, [r4, #0]
 800a9b0:	ed94 7a00 	vldr	s14, [r4]
 800a9b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9be:	ed84 0a01 	vstr	s0, [r4, #4]
 800a9c2:	da9c      	bge.n	800a8fe <__ieee754_rem_pio2f+0x5a>
 800a9c4:	eeb1 7a47 	vneg.f32	s14, s14
 800a9c8:	eeb1 0a40 	vneg.f32	s0, s0
 800a9cc:	ed84 7a00 	vstr	s14, [r4]
 800a9d0:	ed84 0a01 	vstr	s0, [r4, #4]
 800a9d4:	4240      	negs	r0, r0
 800a9d6:	e792      	b.n	800a8fe <__ieee754_rem_pio2f+0x5a>
 800a9d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a9dc:	15eb      	asrs	r3, r5, #23
 800a9de:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a9e2:	2d08      	cmp	r5, #8
 800a9e4:	dde3      	ble.n	800a9ae <__ieee754_rem_pio2f+0x10a>
 800a9e6:	eddf 7a44 	vldr	s15, [pc, #272]	; 800aaf8 <__ieee754_rem_pio2f+0x254>
 800a9ea:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aafc <__ieee754_rem_pio2f+0x258>
 800a9ee:	eef0 6a40 	vmov.f32	s13, s0
 800a9f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a9f6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a9fa:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a9fe:	eef0 7a40 	vmov.f32	s15, s0
 800aa02:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800aa06:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800aa0a:	ee15 2a90 	vmov	r2, s11
 800aa0e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800aa12:	1a5b      	subs	r3, r3, r1
 800aa14:	2b19      	cmp	r3, #25
 800aa16:	dc04      	bgt.n	800aa22 <__ieee754_rem_pio2f+0x17e>
 800aa18:	edc4 5a00 	vstr	s11, [r4]
 800aa1c:	eeb0 0a66 	vmov.f32	s0, s13
 800aa20:	e7c6      	b.n	800a9b0 <__ieee754_rem_pio2f+0x10c>
 800aa22:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ab0c <__ieee754_rem_pio2f+0x268>
 800aa26:	eeb0 0a66 	vmov.f32	s0, s13
 800aa2a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800aa2e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800aa32:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ab10 <__ieee754_rem_pio2f+0x26c>
 800aa36:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aa3a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800aa3e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aa42:	ed84 7a00 	vstr	s14, [r4]
 800aa46:	e7b3      	b.n	800a9b0 <__ieee754_rem_pio2f+0x10c>
 800aa48:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800aa4c:	db06      	blt.n	800aa5c <__ieee754_rem_pio2f+0x1b8>
 800aa4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa52:	edc0 7a01 	vstr	s15, [r0, #4]
 800aa56:	edc0 7a00 	vstr	s15, [r0]
 800aa5a:	e733      	b.n	800a8c4 <__ieee754_rem_pio2f+0x20>
 800aa5c:	15ea      	asrs	r2, r5, #23
 800aa5e:	3a86      	subs	r2, #134	; 0x86
 800aa60:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800aa64:	ee07 3a90 	vmov	s15, r3
 800aa68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa6c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ab14 <__ieee754_rem_pio2f+0x270>
 800aa70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa78:	ed8d 7a03 	vstr	s14, [sp, #12]
 800aa7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa8c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800aa90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa94:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9c:	edcd 7a05 	vstr	s15, [sp, #20]
 800aaa0:	d11e      	bne.n	800aae0 <__ieee754_rem_pio2f+0x23c>
 800aaa2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800aaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaaa:	bf14      	ite	ne
 800aaac:	2302      	movne	r3, #2
 800aaae:	2301      	moveq	r3, #1
 800aab0:	4919      	ldr	r1, [pc, #100]	; (800ab18 <__ieee754_rem_pio2f+0x274>)
 800aab2:	9101      	str	r1, [sp, #4]
 800aab4:	2102      	movs	r1, #2
 800aab6:	9100      	str	r1, [sp, #0]
 800aab8:	a803      	add	r0, sp, #12
 800aaba:	4621      	mov	r1, r4
 800aabc:	f000 f892 	bl	800abe4 <__kernel_rem_pio2f>
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	f6bf af1c 	bge.w	800a8fe <__ieee754_rem_pio2f+0x5a>
 800aac6:	edd4 7a00 	vldr	s15, [r4]
 800aaca:	eef1 7a67 	vneg.f32	s15, s15
 800aace:	edc4 7a00 	vstr	s15, [r4]
 800aad2:	edd4 7a01 	vldr	s15, [r4, #4]
 800aad6:	eef1 7a67 	vneg.f32	s15, s15
 800aada:	edc4 7a01 	vstr	s15, [r4, #4]
 800aade:	e779      	b.n	800a9d4 <__ieee754_rem_pio2f+0x130>
 800aae0:	2303      	movs	r3, #3
 800aae2:	e7e5      	b.n	800aab0 <__ieee754_rem_pio2f+0x20c>
 800aae4:	3f490fd8 	.word	0x3f490fd8
 800aae8:	4016cbe3 	.word	0x4016cbe3
 800aaec:	3fc90f80 	.word	0x3fc90f80
 800aaf0:	3fc90fd0 	.word	0x3fc90fd0
 800aaf4:	37354443 	.word	0x37354443
 800aaf8:	37354400 	.word	0x37354400
 800aafc:	2e85a308 	.word	0x2e85a308
 800ab00:	43490f80 	.word	0x43490f80
 800ab04:	3f22f984 	.word	0x3f22f984
 800ab08:	0800b824 	.word	0x0800b824
 800ab0c:	2e85a300 	.word	0x2e85a300
 800ab10:	248d3132 	.word	0x248d3132
 800ab14:	43800000 	.word	0x43800000
 800ab18:	0800b8a4 	.word	0x0800b8a4

0800ab1c <__ieee754_sqrtf>:
 800ab1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ab20:	4770      	bx	lr
	...

0800ab24 <__kernel_cosf>:
 800ab24:	ee10 3a10 	vmov	r3, s0
 800ab28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ab30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab34:	da05      	bge.n	800ab42 <__kernel_cosf+0x1e>
 800ab36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ab3a:	ee17 2a90 	vmov	r2, s15
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	d03d      	beq.n	800abbe <__kernel_cosf+0x9a>
 800ab42:	ee60 5a00 	vmul.f32	s11, s0, s0
 800ab46:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800abc4 <__kernel_cosf+0xa0>
 800ab4a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800abc8 <__kernel_cosf+0xa4>
 800ab4e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800abcc <__kernel_cosf+0xa8>
 800ab52:	4a1f      	ldr	r2, [pc, #124]	; (800abd0 <__kernel_cosf+0xac>)
 800ab54:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800abd4 <__kernel_cosf+0xb0>
 800ab5e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ab62:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800abd8 <__kernel_cosf+0xb4>
 800ab66:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ab6a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800abdc <__kernel_cosf+0xb8>
 800ab6e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ab72:	eeb0 7a66 	vmov.f32	s14, s13
 800ab76:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ab7a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ab7e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800ab82:	ee67 6a25 	vmul.f32	s13, s14, s11
 800ab86:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800ab8a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab8e:	dc04      	bgt.n	800ab9a <__kernel_cosf+0x76>
 800ab90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ab94:	ee36 0a47 	vsub.f32	s0, s12, s14
 800ab98:	4770      	bx	lr
 800ab9a:	4a11      	ldr	r2, [pc, #68]	; (800abe0 <__kernel_cosf+0xbc>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	bfda      	itte	le
 800aba0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aba4:	ee06 3a90 	vmovle	s13, r3
 800aba8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800abac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abb0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800abb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abb8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800abbc:	4770      	bx	lr
 800abbe:	eeb0 0a46 	vmov.f32	s0, s12
 800abc2:	4770      	bx	lr
 800abc4:	ad47d74e 	.word	0xad47d74e
 800abc8:	310f74f6 	.word	0x310f74f6
 800abcc:	3d2aaaab 	.word	0x3d2aaaab
 800abd0:	3e999999 	.word	0x3e999999
 800abd4:	b493f27c 	.word	0xb493f27c
 800abd8:	37d00d01 	.word	0x37d00d01
 800abdc:	bab60b61 	.word	0xbab60b61
 800abe0:	3f480000 	.word	0x3f480000

0800abe4 <__kernel_rem_pio2f>:
 800abe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe8:	ed2d 8b04 	vpush	{d8-d9}
 800abec:	b0d9      	sub	sp, #356	; 0x164
 800abee:	4688      	mov	r8, r1
 800abf0:	9002      	str	r0, [sp, #8]
 800abf2:	49bb      	ldr	r1, [pc, #748]	; (800aee0 <__kernel_rem_pio2f+0x2fc>)
 800abf4:	9866      	ldr	r0, [sp, #408]	; 0x198
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800abfc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800ac00:	1e59      	subs	r1, r3, #1
 800ac02:	1d13      	adds	r3, r2, #4
 800ac04:	db27      	blt.n	800ac56 <__kernel_rem_pio2f+0x72>
 800ac06:	f1b2 0b03 	subs.w	fp, r2, #3
 800ac0a:	bf48      	it	mi
 800ac0c:	f102 0b04 	addmi.w	fp, r2, #4
 800ac10:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800ac14:	1c45      	adds	r5, r0, #1
 800ac16:	00ec      	lsls	r4, r5, #3
 800ac18:	1a47      	subs	r7, r0, r1
 800ac1a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800ac1e:	9403      	str	r4, [sp, #12]
 800ac20:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ac24:	eb0a 0c01 	add.w	ip, sl, r1
 800ac28:	ae1c      	add	r6, sp, #112	; 0x70
 800ac2a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800ac2e:	2400      	movs	r4, #0
 800ac30:	4564      	cmp	r4, ip
 800ac32:	dd12      	ble.n	800ac5a <__kernel_rem_pio2f+0x76>
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	ac1c      	add	r4, sp, #112	; 0x70
 800ac38:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ac3c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800ac40:	f04f 0c00 	mov.w	ip, #0
 800ac44:	45d4      	cmp	ip, sl
 800ac46:	dc27      	bgt.n	800ac98 <__kernel_rem_pio2f+0xb4>
 800ac48:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ac4c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800ac50:	4627      	mov	r7, r4
 800ac52:	2600      	movs	r6, #0
 800ac54:	e016      	b.n	800ac84 <__kernel_rem_pio2f+0xa0>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e7dc      	b.n	800ac14 <__kernel_rem_pio2f+0x30>
 800ac5a:	42e7      	cmn	r7, r4
 800ac5c:	bf5d      	ittte	pl
 800ac5e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800ac62:	ee07 3a90 	vmovpl	s15, r3
 800ac66:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ac6a:	eef0 7a47 	vmovmi.f32	s15, s14
 800ac6e:	ece6 7a01 	vstmia	r6!, {s15}
 800ac72:	3401      	adds	r4, #1
 800ac74:	e7dc      	b.n	800ac30 <__kernel_rem_pio2f+0x4c>
 800ac76:	ecf9 6a01 	vldmia	r9!, {s13}
 800ac7a:	ed97 7a00 	vldr	s14, [r7]
 800ac7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ac82:	3601      	adds	r6, #1
 800ac84:	428e      	cmp	r6, r1
 800ac86:	f1a7 0704 	sub.w	r7, r7, #4
 800ac8a:	ddf4      	ble.n	800ac76 <__kernel_rem_pio2f+0x92>
 800ac8c:	eceb 7a01 	vstmia	fp!, {s15}
 800ac90:	f10c 0c01 	add.w	ip, ip, #1
 800ac94:	3404      	adds	r4, #4
 800ac96:	e7d5      	b.n	800ac44 <__kernel_rem_pio2f+0x60>
 800ac98:	ab08      	add	r3, sp, #32
 800ac9a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ac9e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800aeec <__kernel_rem_pio2f+0x308>
 800aca2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800aee8 <__kernel_rem_pio2f+0x304>
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800acac:	4656      	mov	r6, sl
 800acae:	00b3      	lsls	r3, r6, #2
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	ab58      	add	r3, sp, #352	; 0x160
 800acb4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800acb8:	ac08      	add	r4, sp, #32
 800acba:	ab44      	add	r3, sp, #272	; 0x110
 800acbc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800acc0:	46a4      	mov	ip, r4
 800acc2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800acc6:	4637      	mov	r7, r6
 800acc8:	2f00      	cmp	r7, #0
 800acca:	f1a0 0004 	sub.w	r0, r0, #4
 800acce:	dc4f      	bgt.n	800ad70 <__kernel_rem_pio2f+0x18c>
 800acd0:	4628      	mov	r0, r5
 800acd2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800acd6:	f000 fa8d 	bl	800b1f4 <scalbnf>
 800acda:	eeb0 8a40 	vmov.f32	s16, s0
 800acde:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ace2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ace6:	f000 fa43 	bl	800b170 <floorf>
 800acea:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800acee:	eea0 8a67 	vfms.f32	s16, s0, s15
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800acf8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800acfc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ad00:	ee17 9a90 	vmov	r9, s15
 800ad04:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ad08:	dd44      	ble.n	800ad94 <__kernel_rem_pio2f+0x1b0>
 800ad0a:	f106 3cff 	add.w	ip, r6, #4294967295
 800ad0e:	ab08      	add	r3, sp, #32
 800ad10:	f1c5 0e08 	rsb	lr, r5, #8
 800ad14:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ad18:	fa47 f00e 	asr.w	r0, r7, lr
 800ad1c:	4481      	add	r9, r0
 800ad1e:	fa00 f00e 	lsl.w	r0, r0, lr
 800ad22:	1a3f      	subs	r7, r7, r0
 800ad24:	f1c5 0007 	rsb	r0, r5, #7
 800ad28:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ad2c:	4107      	asrs	r7, r0
 800ad2e:	2f00      	cmp	r7, #0
 800ad30:	dd3f      	ble.n	800adb2 <__kernel_rem_pio2f+0x1ce>
 800ad32:	f04f 0e00 	mov.w	lr, #0
 800ad36:	f109 0901 	add.w	r9, r9, #1
 800ad3a:	4673      	mov	r3, lr
 800ad3c:	4576      	cmp	r6, lr
 800ad3e:	dc6b      	bgt.n	800ae18 <__kernel_rem_pio2f+0x234>
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	dd04      	ble.n	800ad4e <__kernel_rem_pio2f+0x16a>
 800ad44:	2d01      	cmp	r5, #1
 800ad46:	d078      	beq.n	800ae3a <__kernel_rem_pio2f+0x256>
 800ad48:	2d02      	cmp	r5, #2
 800ad4a:	f000 8081 	beq.w	800ae50 <__kernel_rem_pio2f+0x26c>
 800ad4e:	2f02      	cmp	r7, #2
 800ad50:	d12f      	bne.n	800adb2 <__kernel_rem_pio2f+0x1ce>
 800ad52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad56:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ad5a:	b353      	cbz	r3, 800adb2 <__kernel_rem_pio2f+0x1ce>
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ad62:	f000 fa47 	bl	800b1f4 <scalbnf>
 800ad66:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ad6a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ad6e:	e020      	b.n	800adb2 <__kernel_rem_pio2f+0x1ce>
 800ad70:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ad74:	3f01      	subs	r7, #1
 800ad76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad7e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ad82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ad86:	ecac 0a01 	vstmia	ip!, {s0}
 800ad8a:	ed90 0a00 	vldr	s0, [r0]
 800ad8e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ad92:	e799      	b.n	800acc8 <__kernel_rem_pio2f+0xe4>
 800ad94:	d105      	bne.n	800ada2 <__kernel_rem_pio2f+0x1be>
 800ad96:	1e70      	subs	r0, r6, #1
 800ad98:	ab08      	add	r3, sp, #32
 800ad9a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ad9e:	11ff      	asrs	r7, r7, #7
 800ada0:	e7c5      	b.n	800ad2e <__kernel_rem_pio2f+0x14a>
 800ada2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ada6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800adaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adae:	da31      	bge.n	800ae14 <__kernel_rem_pio2f+0x230>
 800adb0:	2700      	movs	r7, #0
 800adb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800adb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adba:	f040 809b 	bne.w	800aef4 <__kernel_rem_pio2f+0x310>
 800adbe:	1e74      	subs	r4, r6, #1
 800adc0:	46a4      	mov	ip, r4
 800adc2:	2000      	movs	r0, #0
 800adc4:	45d4      	cmp	ip, sl
 800adc6:	da4a      	bge.n	800ae5e <__kernel_rem_pio2f+0x27a>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d07a      	beq.n	800aec2 <__kernel_rem_pio2f+0x2de>
 800adcc:	ab08      	add	r3, sp, #32
 800adce:	3d08      	subs	r5, #8
 800add0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 8081 	beq.w	800aedc <__kernel_rem_pio2f+0x2f8>
 800adda:	4628      	mov	r0, r5
 800addc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ade0:	00a5      	lsls	r5, r4, #2
 800ade2:	f000 fa07 	bl	800b1f4 <scalbnf>
 800ade6:	aa44      	add	r2, sp, #272	; 0x110
 800ade8:	1d2b      	adds	r3, r5, #4
 800adea:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800aeec <__kernel_rem_pio2f+0x308>
 800adee:	18d1      	adds	r1, r2, r3
 800adf0:	4622      	mov	r2, r4
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	f280 80ae 	bge.w	800af54 <__kernel_rem_pio2f+0x370>
 800adf8:	4622      	mov	r2, r4
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	f2c0 80cc 	blt.w	800af98 <__kernel_rem_pio2f+0x3b4>
 800ae00:	a944      	add	r1, sp, #272	; 0x110
 800ae02:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ae06:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800aee4 <__kernel_rem_pio2f+0x300>
 800ae0a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	1aa1      	subs	r1, r4, r2
 800ae12:	e0b6      	b.n	800af82 <__kernel_rem_pio2f+0x39e>
 800ae14:	2702      	movs	r7, #2
 800ae16:	e78c      	b.n	800ad32 <__kernel_rem_pio2f+0x14e>
 800ae18:	6820      	ldr	r0, [r4, #0]
 800ae1a:	b94b      	cbnz	r3, 800ae30 <__kernel_rem_pio2f+0x24c>
 800ae1c:	b118      	cbz	r0, 800ae26 <__kernel_rem_pio2f+0x242>
 800ae1e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ae22:	6020      	str	r0, [r4, #0]
 800ae24:	2001      	movs	r0, #1
 800ae26:	f10e 0e01 	add.w	lr, lr, #1
 800ae2a:	3404      	adds	r4, #4
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	e785      	b.n	800ad3c <__kernel_rem_pio2f+0x158>
 800ae30:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ae34:	6020      	str	r0, [r4, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	e7f5      	b.n	800ae26 <__kernel_rem_pio2f+0x242>
 800ae3a:	1e74      	subs	r4, r6, #1
 800ae3c:	a808      	add	r0, sp, #32
 800ae3e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ae42:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ae46:	f10d 0c20 	add.w	ip, sp, #32
 800ae4a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800ae4e:	e77e      	b.n	800ad4e <__kernel_rem_pio2f+0x16a>
 800ae50:	1e74      	subs	r4, r6, #1
 800ae52:	a808      	add	r0, sp, #32
 800ae54:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ae58:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ae5c:	e7f3      	b.n	800ae46 <__kernel_rem_pio2f+0x262>
 800ae5e:	ab08      	add	r3, sp, #32
 800ae60:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ae64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae68:	4318      	orrs	r0, r3
 800ae6a:	e7ab      	b.n	800adc4 <__kernel_rem_pio2f+0x1e0>
 800ae6c:	f10c 0c01 	add.w	ip, ip, #1
 800ae70:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	d0f9      	beq.n	800ae6c <__kernel_rem_pio2f+0x288>
 800ae78:	9b05      	ldr	r3, [sp, #20]
 800ae7a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ae7e:	eb0d 0003 	add.w	r0, sp, r3
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	18f4      	adds	r4, r6, r3
 800ae86:	ab1c      	add	r3, sp, #112	; 0x70
 800ae88:	1c77      	adds	r7, r6, #1
 800ae8a:	384c      	subs	r0, #76	; 0x4c
 800ae8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae90:	4466      	add	r6, ip
 800ae92:	42be      	cmp	r6, r7
 800ae94:	f6ff af0b 	blt.w	800acae <__kernel_rem_pio2f+0xca>
 800ae98:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800ae9c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aea0:	ee07 3a90 	vmov	s15, r3
 800aea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea8:	f04f 0c00 	mov.w	ip, #0
 800aeac:	ece4 7a01 	vstmia	r4!, {s15}
 800aeb0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800aeb4:	46a1      	mov	r9, r4
 800aeb6:	458c      	cmp	ip, r1
 800aeb8:	dd07      	ble.n	800aeca <__kernel_rem_pio2f+0x2e6>
 800aeba:	ece0 7a01 	vstmia	r0!, {s15}
 800aebe:	3701      	adds	r7, #1
 800aec0:	e7e7      	b.n	800ae92 <__kernel_rem_pio2f+0x2ae>
 800aec2:	9804      	ldr	r0, [sp, #16]
 800aec4:	f04f 0c01 	mov.w	ip, #1
 800aec8:	e7d2      	b.n	800ae70 <__kernel_rem_pio2f+0x28c>
 800aeca:	ecfe 6a01 	vldmia	lr!, {s13}
 800aece:	ed39 7a01 	vldmdb	r9!, {s14}
 800aed2:	f10c 0c01 	add.w	ip, ip, #1
 800aed6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aeda:	e7ec      	b.n	800aeb6 <__kernel_rem_pio2f+0x2d2>
 800aedc:	3c01      	subs	r4, #1
 800aede:	e775      	b.n	800adcc <__kernel_rem_pio2f+0x1e8>
 800aee0:	0800bbe8 	.word	0x0800bbe8
 800aee4:	0800bbbc 	.word	0x0800bbbc
 800aee8:	43800000 	.word	0x43800000
 800aeec:	3b800000 	.word	0x3b800000
 800aef0:	00000000 	.word	0x00000000
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	eeb0 0a48 	vmov.f32	s0, s16
 800aefa:	1a98      	subs	r0, r3, r2
 800aefc:	f000 f97a 	bl	800b1f4 <scalbnf>
 800af00:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800aee8 <__kernel_rem_pio2f+0x304>
 800af04:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	db19      	blt.n	800af42 <__kernel_rem_pio2f+0x35e>
 800af0e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800aeec <__kernel_rem_pio2f+0x308>
 800af12:	ee60 7a27 	vmul.f32	s15, s0, s15
 800af16:	aa08      	add	r2, sp, #32
 800af18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af1c:	1c74      	adds	r4, r6, #1
 800af1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af22:	3508      	adds	r5, #8
 800af24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800af28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800af30:	ee10 3a10 	vmov	r3, s0
 800af34:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800af38:	ee17 3a90 	vmov	r3, s15
 800af3c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800af40:	e74b      	b.n	800adda <__kernel_rem_pio2f+0x1f6>
 800af42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800af46:	aa08      	add	r2, sp, #32
 800af48:	ee10 3a10 	vmov	r3, s0
 800af4c:	4634      	mov	r4, r6
 800af4e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800af52:	e742      	b.n	800adda <__kernel_rem_pio2f+0x1f6>
 800af54:	a808      	add	r0, sp, #32
 800af56:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800af5a:	9001      	str	r0, [sp, #4]
 800af5c:	ee07 0a90 	vmov	s15, r0
 800af60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af64:	3a01      	subs	r2, #1
 800af66:	ee67 7a80 	vmul.f32	s15, s15, s0
 800af6a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800af6e:	ed61 7a01 	vstmdb	r1!, {s15}
 800af72:	e73e      	b.n	800adf2 <__kernel_rem_pio2f+0x20e>
 800af74:	ecfc 6a01 	vldmia	ip!, {s13}
 800af78:	ecb6 7a01 	vldmia	r6!, {s14}
 800af7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800af80:	3001      	adds	r0, #1
 800af82:	4550      	cmp	r0, sl
 800af84:	dc01      	bgt.n	800af8a <__kernel_rem_pio2f+0x3a6>
 800af86:	4288      	cmp	r0, r1
 800af88:	ddf4      	ble.n	800af74 <__kernel_rem_pio2f+0x390>
 800af8a:	a858      	add	r0, sp, #352	; 0x160
 800af8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af90:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800af94:	3a01      	subs	r2, #1
 800af96:	e730      	b.n	800adfa <__kernel_rem_pio2f+0x216>
 800af98:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800af9a:	2a02      	cmp	r2, #2
 800af9c:	dc09      	bgt.n	800afb2 <__kernel_rem_pio2f+0x3ce>
 800af9e:	2a00      	cmp	r2, #0
 800afa0:	dc2a      	bgt.n	800aff8 <__kernel_rem_pio2f+0x414>
 800afa2:	d043      	beq.n	800b02c <__kernel_rem_pio2f+0x448>
 800afa4:	f009 0007 	and.w	r0, r9, #7
 800afa8:	b059      	add	sp, #356	; 0x164
 800afaa:	ecbd 8b04 	vpop	{d8-d9}
 800afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d1f5      	bne.n	800afa4 <__kernel_rem_pio2f+0x3c0>
 800afb8:	ab30      	add	r3, sp, #192	; 0xc0
 800afba:	442b      	add	r3, r5
 800afbc:	461a      	mov	r2, r3
 800afbe:	4619      	mov	r1, r3
 800afc0:	4620      	mov	r0, r4
 800afc2:	2800      	cmp	r0, #0
 800afc4:	f1a1 0104 	sub.w	r1, r1, #4
 800afc8:	dc51      	bgt.n	800b06e <__kernel_rem_pio2f+0x48a>
 800afca:	4621      	mov	r1, r4
 800afcc:	2901      	cmp	r1, #1
 800afce:	f1a2 0204 	sub.w	r2, r2, #4
 800afd2:	dc5c      	bgt.n	800b08e <__kernel_rem_pio2f+0x4aa>
 800afd4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800afd8:	3304      	adds	r3, #4
 800afda:	2c01      	cmp	r4, #1
 800afdc:	dc67      	bgt.n	800b0ae <__kernel_rem_pio2f+0x4ca>
 800afde:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800afe2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800afe6:	2f00      	cmp	r7, #0
 800afe8:	d167      	bne.n	800b0ba <__kernel_rem_pio2f+0x4d6>
 800afea:	edc8 6a00 	vstr	s13, [r8]
 800afee:	ed88 7a01 	vstr	s14, [r8, #4]
 800aff2:	edc8 7a02 	vstr	s15, [r8, #8]
 800aff6:	e7d5      	b.n	800afa4 <__kernel_rem_pio2f+0x3c0>
 800aff8:	aa30      	add	r2, sp, #192	; 0xc0
 800affa:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800affe:	4413      	add	r3, r2
 800b000:	4622      	mov	r2, r4
 800b002:	2a00      	cmp	r2, #0
 800b004:	da24      	bge.n	800b050 <__kernel_rem_pio2f+0x46c>
 800b006:	b34f      	cbz	r7, 800b05c <__kernel_rem_pio2f+0x478>
 800b008:	eef1 7a47 	vneg.f32	s15, s14
 800b00c:	edc8 7a00 	vstr	s15, [r8]
 800b010:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b018:	aa31      	add	r2, sp, #196	; 0xc4
 800b01a:	2301      	movs	r3, #1
 800b01c:	429c      	cmp	r4, r3
 800b01e:	da20      	bge.n	800b062 <__kernel_rem_pio2f+0x47e>
 800b020:	b10f      	cbz	r7, 800b026 <__kernel_rem_pio2f+0x442>
 800b022:	eef1 7a67 	vneg.f32	s15, s15
 800b026:	edc8 7a01 	vstr	s15, [r8, #4]
 800b02a:	e7bb      	b.n	800afa4 <__kernel_rem_pio2f+0x3c0>
 800b02c:	aa30      	add	r2, sp, #192	; 0xc0
 800b02e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800aef0 <__kernel_rem_pio2f+0x30c>
 800b032:	4413      	add	r3, r2
 800b034:	2c00      	cmp	r4, #0
 800b036:	da05      	bge.n	800b044 <__kernel_rem_pio2f+0x460>
 800b038:	b10f      	cbz	r7, 800b03e <__kernel_rem_pio2f+0x45a>
 800b03a:	eef1 7a67 	vneg.f32	s15, s15
 800b03e:	edc8 7a00 	vstr	s15, [r8]
 800b042:	e7af      	b.n	800afa4 <__kernel_rem_pio2f+0x3c0>
 800b044:	ed33 7a01 	vldmdb	r3!, {s14}
 800b048:	3c01      	subs	r4, #1
 800b04a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b04e:	e7f1      	b.n	800b034 <__kernel_rem_pio2f+0x450>
 800b050:	ed73 7a01 	vldmdb	r3!, {s15}
 800b054:	3a01      	subs	r2, #1
 800b056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b05a:	e7d2      	b.n	800b002 <__kernel_rem_pio2f+0x41e>
 800b05c:	eef0 7a47 	vmov.f32	s15, s14
 800b060:	e7d4      	b.n	800b00c <__kernel_rem_pio2f+0x428>
 800b062:	ecb2 7a01 	vldmia	r2!, {s14}
 800b066:	3301      	adds	r3, #1
 800b068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b06c:	e7d6      	b.n	800b01c <__kernel_rem_pio2f+0x438>
 800b06e:	edd1 7a00 	vldr	s15, [r1]
 800b072:	edd1 6a01 	vldr	s13, [r1, #4]
 800b076:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b07a:	3801      	subs	r0, #1
 800b07c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b080:	ed81 7a00 	vstr	s14, [r1]
 800b084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b088:	edc1 7a01 	vstr	s15, [r1, #4]
 800b08c:	e799      	b.n	800afc2 <__kernel_rem_pio2f+0x3de>
 800b08e:	edd2 7a00 	vldr	s15, [r2]
 800b092:	edd2 6a01 	vldr	s13, [r2, #4]
 800b096:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b09a:	3901      	subs	r1, #1
 800b09c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0a0:	ed82 7a00 	vstr	s14, [r2]
 800b0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a8:	edc2 7a01 	vstr	s15, [r2, #4]
 800b0ac:	e78e      	b.n	800afcc <__kernel_rem_pio2f+0x3e8>
 800b0ae:	ed33 7a01 	vldmdb	r3!, {s14}
 800b0b2:	3c01      	subs	r4, #1
 800b0b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0b8:	e78f      	b.n	800afda <__kernel_rem_pio2f+0x3f6>
 800b0ba:	eef1 6a66 	vneg.f32	s13, s13
 800b0be:	eeb1 7a47 	vneg.f32	s14, s14
 800b0c2:	edc8 6a00 	vstr	s13, [r8]
 800b0c6:	ed88 7a01 	vstr	s14, [r8, #4]
 800b0ca:	eef1 7a67 	vneg.f32	s15, s15
 800b0ce:	e790      	b.n	800aff2 <__kernel_rem_pio2f+0x40e>

0800b0d0 <__kernel_sinf>:
 800b0d0:	ee10 3a10 	vmov	r3, s0
 800b0d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b0dc:	da04      	bge.n	800b0e8 <__kernel_sinf+0x18>
 800b0de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b0e2:	ee17 3a90 	vmov	r3, s15
 800b0e6:	b35b      	cbz	r3, 800b140 <__kernel_sinf+0x70>
 800b0e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b0ec:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b144 <__kernel_sinf+0x74>
 800b0f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b148 <__kernel_sinf+0x78>
 800b0f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b0f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b14c <__kernel_sinf+0x7c>
 800b0fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b100:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b150 <__kernel_sinf+0x80>
 800b104:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b108:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b154 <__kernel_sinf+0x84>
 800b10c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b110:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b114:	b930      	cbnz	r0, 800b124 <__kernel_sinf+0x54>
 800b116:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b158 <__kernel_sinf+0x88>
 800b11a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b11e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b122:	4770      	bx	lr
 800b124:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b128:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b12c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b130:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b134:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b15c <__kernel_sinf+0x8c>
 800b138:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b13c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	2f2ec9d3 	.word	0x2f2ec9d3
 800b148:	b2d72f34 	.word	0xb2d72f34
 800b14c:	3638ef1b 	.word	0x3638ef1b
 800b150:	b9500d01 	.word	0xb9500d01
 800b154:	3c088889 	.word	0x3c088889
 800b158:	be2aaaab 	.word	0xbe2aaaab
 800b15c:	3e2aaaab 	.word	0x3e2aaaab

0800b160 <fabsf>:
 800b160:	ee10 3a10 	vmov	r3, s0
 800b164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b168:	ee00 3a10 	vmov	s0, r3
 800b16c:	4770      	bx	lr
	...

0800b170 <floorf>:
 800b170:	ee10 3a10 	vmov	r3, s0
 800b174:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b178:	3a7f      	subs	r2, #127	; 0x7f
 800b17a:	2a16      	cmp	r2, #22
 800b17c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b180:	dc2a      	bgt.n	800b1d8 <floorf+0x68>
 800b182:	2a00      	cmp	r2, #0
 800b184:	da11      	bge.n	800b1aa <floorf+0x3a>
 800b186:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b1e8 <floorf+0x78>
 800b18a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b18e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b196:	dd05      	ble.n	800b1a4 <floorf+0x34>
 800b198:	2b00      	cmp	r3, #0
 800b19a:	da23      	bge.n	800b1e4 <floorf+0x74>
 800b19c:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <floorf+0x7c>)
 800b19e:	2900      	cmp	r1, #0
 800b1a0:	bf18      	it	ne
 800b1a2:	4613      	movne	r3, r2
 800b1a4:	ee00 3a10 	vmov	s0, r3
 800b1a8:	4770      	bx	lr
 800b1aa:	4911      	ldr	r1, [pc, #68]	; (800b1f0 <floorf+0x80>)
 800b1ac:	4111      	asrs	r1, r2
 800b1ae:	420b      	tst	r3, r1
 800b1b0:	d0fa      	beq.n	800b1a8 <floorf+0x38>
 800b1b2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b1e8 <floorf+0x78>
 800b1b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b1ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c2:	ddef      	ble.n	800b1a4 <floorf+0x34>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	bfbe      	ittt	lt
 800b1c8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b1cc:	fa40 f202 	asrlt.w	r2, r0, r2
 800b1d0:	189b      	addlt	r3, r3, r2
 800b1d2:	ea23 0301 	bic.w	r3, r3, r1
 800b1d6:	e7e5      	b.n	800b1a4 <floorf+0x34>
 800b1d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b1dc:	d3e4      	bcc.n	800b1a8 <floorf+0x38>
 800b1de:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b1e2:	4770      	bx	lr
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e7dd      	b.n	800b1a4 <floorf+0x34>
 800b1e8:	7149f2ca 	.word	0x7149f2ca
 800b1ec:	bf800000 	.word	0xbf800000
 800b1f0:	007fffff 	.word	0x007fffff

0800b1f4 <scalbnf>:
 800b1f4:	ee10 3a10 	vmov	r3, s0
 800b1f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b1fc:	d025      	beq.n	800b24a <scalbnf+0x56>
 800b1fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b202:	d302      	bcc.n	800b20a <scalbnf+0x16>
 800b204:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b208:	4770      	bx	lr
 800b20a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b20e:	d122      	bne.n	800b256 <scalbnf+0x62>
 800b210:	4b2a      	ldr	r3, [pc, #168]	; (800b2bc <scalbnf+0xc8>)
 800b212:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b2c0 <scalbnf+0xcc>
 800b216:	4298      	cmp	r0, r3
 800b218:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b21c:	db16      	blt.n	800b24c <scalbnf+0x58>
 800b21e:	ee10 3a10 	vmov	r3, s0
 800b222:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b226:	3a19      	subs	r2, #25
 800b228:	4402      	add	r2, r0
 800b22a:	2afe      	cmp	r2, #254	; 0xfe
 800b22c:	dd15      	ble.n	800b25a <scalbnf+0x66>
 800b22e:	ee10 3a10 	vmov	r3, s0
 800b232:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b2c4 <scalbnf+0xd0>
 800b236:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b2c8 <scalbnf+0xd4>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	eeb0 7a67 	vmov.f32	s14, s15
 800b240:	bfb8      	it	lt
 800b242:	eef0 7a66 	vmovlt.f32	s15, s13
 800b246:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b24a:	4770      	bx	lr
 800b24c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b2cc <scalbnf+0xd8>
 800b250:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b254:	4770      	bx	lr
 800b256:	0dd2      	lsrs	r2, r2, #23
 800b258:	e7e6      	b.n	800b228 <scalbnf+0x34>
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	dd06      	ble.n	800b26c <scalbnf+0x78>
 800b25e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b262:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b266:	ee00 3a10 	vmov	s0, r3
 800b26a:	4770      	bx	lr
 800b26c:	f112 0f16 	cmn.w	r2, #22
 800b270:	da1a      	bge.n	800b2a8 <scalbnf+0xb4>
 800b272:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b276:	4298      	cmp	r0, r3
 800b278:	ee10 3a10 	vmov	r3, s0
 800b27c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b280:	dd0a      	ble.n	800b298 <scalbnf+0xa4>
 800b282:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b2c4 <scalbnf+0xd0>
 800b286:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b2c8 <scalbnf+0xd4>
 800b28a:	eef0 7a40 	vmov.f32	s15, s0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bf18      	it	ne
 800b292:	eeb0 0a47 	vmovne.f32	s0, s14
 800b296:	e7db      	b.n	800b250 <scalbnf+0x5c>
 800b298:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b2cc <scalbnf+0xd8>
 800b29c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b2d0 <scalbnf+0xdc>
 800b2a0:	eef0 7a40 	vmov.f32	s15, s0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	e7f3      	b.n	800b290 <scalbnf+0x9c>
 800b2a8:	3219      	adds	r2, #25
 800b2aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b2b2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b2d4 <scalbnf+0xe0>
 800b2b6:	ee07 3a10 	vmov	s14, r3
 800b2ba:	e7c4      	b.n	800b246 <scalbnf+0x52>
 800b2bc:	ffff3cb0 	.word	0xffff3cb0
 800b2c0:	4c000000 	.word	0x4c000000
 800b2c4:	7149f2ca 	.word	0x7149f2ca
 800b2c8:	f149f2ca 	.word	0xf149f2ca
 800b2cc:	0da24260 	.word	0x0da24260
 800b2d0:	8da24260 	.word	0x8da24260
 800b2d4:	33000000 	.word	0x33000000

0800b2d8 <_init>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	bf00      	nop
 800b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2de:	bc08      	pop	{r3}
 800b2e0:	469e      	mov	lr, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_fini>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr
