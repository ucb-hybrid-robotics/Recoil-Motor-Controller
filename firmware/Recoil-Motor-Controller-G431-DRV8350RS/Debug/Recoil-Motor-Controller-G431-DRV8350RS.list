
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  08010040  08010040  00020040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801094c  0801094c  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801094c  0801094c  0002094c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010954  08010954  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010954  08010954  00020954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010958  08010958  00020958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801095c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200001fc  08010b58  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08010b58  000307ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f54  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004882  00000000  00000000  00058180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  0005ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ca8  00000000  00000000  0005e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a88  00000000  00000000  00060550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b6d  00000000  00000000  00084fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ea0  00000000  00000000  000a8b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001929e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097ac  00000000  00000000  00192a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010024 	.word	0x08010024

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08010024 	.word	0x08010024

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:

float user_input_pot;
uint8_t user_input_button;
uint8_t user_output_led;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000fae:	f000 f947 	bl	8001240 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000fba:	f002 fc45 	bl	8003848 <MotorController_handleCANMessage>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000454 	.word	0x20000454
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d110      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fe8:	f007 f908 	bl	80081fc <HAL_GPIO_WritePin>
    MotorController_updateCommutation(&controller, &hadc1);
 8000fec:	490e      	ldr	r1, [pc, #56]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ff0:	f002 f828 	bl	8003044 <MotorController_updateCommutation>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ffc:	f007 f8fe 	bl	80081fc <HAL_GPIO_WritePin>
    #endif
  }
  else if (htim == &htim4) {
    MotorController_triggerPositionUpdate(&controller);
  }
}
 8001000:	e00a      	b.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim == &htim2) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d006      	beq.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim == &htim4) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a09      	ldr	r2, [pc, #36]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d102      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
    MotorController_triggerPositionUpdate(&controller);
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001014:	f002 f88e 	bl	8003134 <MotorController_triggerPositionUpdate>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200005d0 	.word	0x200005d0
 8001024:	48000800 	.word	0x48000800
 8001028:	20000354 	.word	0x20000354
 800102c:	20000218 	.word	0x20000218
 8001030:	2000061c 	.word	0x2000061c
 8001034:	20000668 	.word	0x20000668

08001038 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_SPI_TxRxCpltCallback+0x44>)
 8001048:	f007 f8d8 	bl	80081fc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f007 f8d1 	bl	80081fc <HAL_GPIO_WritePin>
  MotorController_updatePositionReading(&controller);
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <HAL_SPI_TxRxCpltCallback+0x48>)
 800105c:	f002 f8c4 	bl	80031e8 <MotorController_updatePositionReading>
  /* ====== Start user APP code ====== */
//  controller.position_controller.position_target = APP_getUserPot() * M_PI;

  /* ====== End user APP code ====== */

  MotorController_updatePositionController(&controller);
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <HAL_SPI_TxRxCpltCallback+0x48>)
 8001062:	f002 f911 	bl	8003288 <MotorController_updatePositionController>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <HAL_SPI_TxRxCpltCallback+0x44>)
 800106e:	f007 f8c5 	bl	80081fc <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	48000800 	.word	0x48000800
 8001080:	20000218 	.word	0x20000218

08001084 <APP_init>:
  // so putting it here
  // can also comment out this line and just power cycle to update the flash settings
  HAL_FLASH_OB_Launch();
}

void APP_init() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  #if INITIAL_PROG
  APP_initFlashOption();
  #endif

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);    // green
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f007 f8b4 	bl	80081fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);    // blue
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f007 f8ae 	bl	80081fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);    // red
 80010a0:	2201      	movs	r2, #1
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f007 f8a8 	bl	80081fc <HAL_GPIO_WritePin>

  MotorController_init(&controller);
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <APP_init+0x54>)
 80010ae:	f001 fcad 	bl	8002a0c <MotorController_init>

  MotorController_setMode(&controller, MODE_IDLE);
 80010b2:	2101      	movs	r1, #1
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <APP_init+0x54>)
 80010b6:	f001 fdcb 	bl	8002c50 <MotorController_setMode>
  controller.position_controller.position_target = 0;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <APP_init+0x54>)
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  HAL_Delay(3000);
 80010c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010c8:	f004 f9ae 	bl	8005428 <HAL_Delay>
//  controller.current_controller.i_d_setpoint = 0;

//  MotorController_setMode(&controller, MODE_TORQUE);
//  controller.position_controller.torque_target = 0;

  MotorController_setMode(&controller, MODE_POSITION);
 80010cc:	2113      	movs	r1, #19
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <APP_init+0x54>)
 80010d0:	f001 fdbe 	bl	8002c50 <MotorController_setMode>
//  controller.position_controller.velocity_target = 0;
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000218 	.word	0x20000218

080010dc <APP_main>:


void APP_main() {
 80010dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e0:	b0b6      	sub	sp, #216	; 0xd8
 80010e2:	af0e      	add	r7, sp, #56	; 0x38
  MotorController_updateService(&controller);
 80010e4:	4851      	ldr	r0, [pc, #324]	; (800122c <APP_main+0x150>)
 80010e6:	f002 f90f 	bl	8003308 <MotorController_updateService>

  if (controller.mode != MODE_IDLE) {
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <APP_main+0x150>)
 80010ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d006      	beq.n	8001102 <APP_main+0x26>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);    // blue LED
 80010f4:	2201      	movs	r2, #1
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f007 f87e 	bl	80081fc <HAL_GPIO_WritePin>
 8001100:	e005      	b.n	800110e <APP_main+0x32>
  }
  else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);    // blue LED
 8001102:	2200      	movs	r2, #0
 8001104:	2140      	movs	r1, #64	; 0x40
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f007 f877 	bl	80081fc <HAL_GPIO_WritePin>
  }

//  controller.position_controller.torque_target = 0.001;

  controller.position_controller.position_target = 50 * ((HAL_GetTick() / 4000) % 2);
 800110e:	f004 f97f 	bl	8005410 <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	4a46      	ldr	r2, [pc, #280]	; (8001230 <APP_main+0x154>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2232      	movs	r2, #50	; 0x32
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112e:	4b3f      	ldr	r3, [pc, #252]	; (800122c <APP_main+0x150>)
 8001130:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
//      controller.position_controller.torque_measured * 1000);



  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
      controller.position_controller.position_target,
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <APP_main+0x150>)
 8001136:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	e9c7 0106 	strd	r0, r1, [r7, #24]
      controller.position_controller.position_measured,
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <APP_main+0x150>)
 8001146:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fa24 	bl	8000598 <__aeabi_f2d>
 8001150:	4682      	mov	sl, r0
 8001152:	468b      	mov	fp, r1
      controller.position_controller.velocity_target,
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <APP_main+0x150>)
 8001156:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa1c 	bl	8000598 <__aeabi_f2d>
 8001160:	e9c7 0104 	strd	r0, r1, [r7, #16]
      controller.position_controller.velocity_measured,
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <APP_main+0x150>)
 8001166:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fa14 	bl	8000598 <__aeabi_f2d>
 8001170:	e9c7 0102 	strd	r0, r1, [r7, #8]
      controller.position_controller.velocity_setpoint,
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <APP_main+0x150>)
 8001176:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa0c 	bl	8000598 <__aeabi_f2d>
 8001180:	e9c7 0100 	strd	r0, r1, [r7]
      controller.position_controller.velocity_limit,
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <APP_main+0x150>)
 8001186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fa04 	bl	8000598 <__aeabi_f2d>
 8001190:	4680      	mov	r8, r0
 8001192:	4689      	mov	r9, r1
      controller.position_controller.torque_setpoint * 1000,
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <APP_main+0x150>)
 8001196:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 800119a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001234 <APP_main+0x158>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 80011a2:	ee17 0a90 	vmov	r0, s15
 80011a6:	f7ff f9f7 	bl	8000598 <__aeabi_f2d>
 80011aa:	4604      	mov	r4, r0
 80011ac:	460d      	mov	r5, r1
      controller.position_controller.torque_measured * 1000);
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <APP_main+0x150>)
 80011b0:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80011b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001234 <APP_main+0x158>
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(str, "p_tar:%f\tp_mea:%f\tv_tar:%f\tv_mea:%f\tv_set:%f\tv_lim:%f\tt_set:%f\tt_mea:%f\r\n",
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9ea 	bl	8000598 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	f107 0020 	add.w	r0, r7, #32
 80011cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80011d0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80011d4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80011d8:	ed97 7b00 	vldr	d7, [r7]
 80011dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80011e0:	ed97 7b02 	vldr	d7, [r7, #8]
 80011e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80011e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80011ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80011f0:	e9cd ab00 	strd	sl, fp, [sp]
 80011f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <APP_main+0x15c>)
 80011fa:	f00b fde3 	bl	800cdc4 <siprintf>
//        controller.position_controller.velocity_setpoint,
//        controller.position_controller.position_setpoint,
//        controller.position_controller.torque_target*5 + 5);


  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f80c 	bl	8000220 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0120 	add.w	r1, r7, #32
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <APP_main+0x160>)
 8001216:	f00a fb1e 	bl	800b856 <HAL_UART_Transmit>
  HAL_Delay(5);
 800121a:	2005      	movs	r0, #5
 800121c:	f004 f904 	bl	8005428 <HAL_Delay>
}
 8001220:	bf00      	nop
 8001222:	37a0      	adds	r7, #160	; 0xa0
 8001224:	46bd      	mov	sp, r7
 8001226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800122a:	bf00      	nop
 800122c:	20000218 	.word	0x20000218
 8001230:	10624dd3 	.word	0x10624dd3
 8001234:	447a0000 	.word	0x447a0000
 8001238:	08010040 	.word	0x08010040
 800123c:	20000700 	.word	0x20000700

08001240 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3308      	adds	r3, #8
 800124e:	f107 0208 	add.w	r2, r7, #8
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f005 ff91 	bl	800717c <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <CAN_getRxFrame+0x3c>
 8001278:	2201      	movs	r2, #1
 800127a:	e000      	b.n	800127e <CAN_getRxFrame+0x3e>
 800127c:	2200      	movs	r2, #0
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001288:	d04c      	beq.n	8001324 <CAN_getRxFrame+0xe4>
 800128a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800128e:	d84d      	bhi.n	800132c <CAN_getRxFrame+0xec>
 8001290:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001294:	d042      	beq.n	800131c <CAN_getRxFrame+0xdc>
 8001296:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800129a:	d847      	bhi.n	800132c <CAN_getRxFrame+0xec>
 800129c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80012a0:	d038      	beq.n	8001314 <CAN_getRxFrame+0xd4>
 80012a2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80012a6:	d841      	bhi.n	800132c <CAN_getRxFrame+0xec>
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d02e      	beq.n	800130c <CAN_getRxFrame+0xcc>
 80012ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b2:	d83b      	bhi.n	800132c <CAN_getRxFrame+0xec>
 80012b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012b8:	d024      	beq.n	8001304 <CAN_getRxFrame+0xc4>
 80012ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012be:	d835      	bhi.n	800132c <CAN_getRxFrame+0xec>
 80012c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80012c4:	d01a      	beq.n	80012fc <CAN_getRxFrame+0xbc>
 80012c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80012ca:	d82f      	bhi.n	800132c <CAN_getRxFrame+0xec>
 80012cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012d0:	d010      	beq.n	80012f4 <CAN_getRxFrame+0xb4>
 80012d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012d6:	d829      	bhi.n	800132c <CAN_getRxFrame+0xec>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <CAN_getRxFrame+0xa4>
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e0:	d004      	beq.n	80012ec <CAN_getRxFrame+0xac>
 80012e2:	e023      	b.n	800132c <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	80da      	strh	r2, [r3, #6]
 80012ea:	e023      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	80da      	strh	r2, [r3, #6]
 80012f2:	e01f      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	80da      	strh	r2, [r3, #6]
 80012fa:	e01b      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2203      	movs	r2, #3
 8001300:	80da      	strh	r2, [r3, #6]
 8001302:	e017      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2204      	movs	r2, #4
 8001308:	80da      	strh	r2, [r3, #6]
 800130a:	e013      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2205      	movs	r2, #5
 8001310:	80da      	strh	r2, [r3, #6]
 8001312:	e00f      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2206      	movs	r2, #6
 8001318:	80da      	strh	r2, [r3, #6]
 800131a:	e00b      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2207      	movs	r2, #7
 8001320:	80da      	strh	r2, [r3, #6]
 8001322:	e007      	b.n	8001334 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2208      	movs	r2, #8
 8001328:	80da      	strh	r2, [r3, #6]
 800132a:	e003      	b.n	8001334 <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	80da      	strh	r2, [r3, #6]
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <CAN_putTxFrame+0x1c>
 8001354:	2300      	movs	r3, #0
 8001356:	e001      	b.n	800135c <CAN_putTxFrame+0x20>
 8001358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135c:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <CAN_putTxFrame+0x2e>
 8001366:	2300      	movs	r3, #0
 8001368:	e001      	b.n	800136e <CAN_putTxFrame+0x32>
 800136a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800136e:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	88db      	ldrh	r3, [r3, #6]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d838      	bhi.n	80013ea <CAN_putTxFrame+0xae>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <CAN_putTxFrame+0x44>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	080013a5 	.word	0x080013a5
 8001384:	080013ab 	.word	0x080013ab
 8001388:	080013b3 	.word	0x080013b3
 800138c:	080013bb 	.word	0x080013bb
 8001390:	080013c3 	.word	0x080013c3
 8001394:	080013cb 	.word	0x080013cb
 8001398:	080013d3 	.word	0x080013d3
 800139c:	080013db 	.word	0x080013db
 80013a0:	080013e3 	.word	0x080013e3
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	e021      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80013aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	e01d      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80013b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	e019      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80013ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e015      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 80013c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	e011      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 80013ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	e00d      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 80013d2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	e009      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 80013da:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	e005      	b.n	80013ee <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 80013e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e001      	b.n	80013ee <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80013ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013f2:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f103 0208 	add.w	r2, r3, #8
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f005 fe6f 	bl	80070f4 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001416:	4603      	mov	r3, r0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <clampf>:

static inline int32_t min(int32_t a, int32_t b) {
  return a < b ? a : b;
}

static inline float clampf(float value, float min, float max) {
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	ed87 0a03 	vstr	s0, [r7, #12]
 800142a:	edc7 0a02 	vstr	s1, [r7, #8]
 800142e:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8001432:	ed97 7a03 	vldr	s14, [r7, #12]
 8001436:	edd7 7a01 	vldr	s15, [r7, #4]
 800143a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	dd01      	ble.n	8001448 <clampf+0x28>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	e00b      	b.n	8001460 <clampf+0x40>
 8001448:	ed97 7a03 	vldr	s14, [r7, #12]
 800144c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d501      	bpl.n	800145e <clampf+0x3e>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	e000      	b.n	8001460 <clampf+0x40>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	ee07 3a90 	vmov	s15, r3
}
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <CurrentController_init>:

#include "current_controller.h"

void CurrentController_init(CurrentController *controller) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  controller->current_filter_alpha = 0.2;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <CurrentController_init+0x44>)
 8001480:	601a      	str	r2, [r3, #0]

  controller->i_q_kp = 30.;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <CurrentController_init+0x48>)
 8001486:	605a      	str	r2, [r3, #4]
  controller->i_q_ki = 0.01; // 0.01
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <CurrentController_init+0x4c>)
 800148c:	609a      	str	r2, [r3, #8]

  controller->i_d_kp = 30.;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <CurrentController_init+0x48>)
 8001492:	60da      	str	r2, [r3, #12]
  controller->i_d_ki = 0.01;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <CurrentController_init+0x4c>)
 8001498:	611a      	str	r2, [r3, #16]

  controller->i_q_measured = 0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
  controller->i_d_measured = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	3e4ccccd 	.word	0x3e4ccccd
 80014bc:	41f00000 	.word	0x41f00000
 80014c0:	3c23d70a 	.word	0x3c23d70a
 80014c4:	00000000 	.word	0x00000000

080014c8 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6178      	str	r0, [r7, #20]
 80014d0:	460b      	mov	r3, r1
 80014d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80014d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80014da:	ed87 1a01 	vstr	s2, [r7, #4]
 80014de:	74fb      	strb	r3, [r7, #19]
  //  current_error = command_current - feedback_current
  //  current_integrator = limit(current_integrator + ki * current_error, ilimit)
  //  voltage = current_integrator + kp * current_error

  FOC_clarkTransform(
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	edd3 6a07 	vldr	s13, [r3, #28]
 80014fe:	eeb0 1a66 	vmov.f32	s2, s13
 8001502:	eef0 0a47 	vmov.f32	s1, s14
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	4610      	mov	r0, r2
 800150c:	f000 fba6 	bl	8001c5c <FOC_clarkTransform>
    controller->i_c_measured);

  float i_q;
  float i_d;

  FOC_parkTransform(
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800151c:	f107 021c 	add.w	r2, r7, #28
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	edd7 1a02 	vldr	s3, [r7, #8]
 8001528:	ed97 1a03 	vldr	s2, [r7, #12]
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fbc6 	bl	8001cc8 <FOC_parkTransform>
    &i_d,
    controller->i_alpha_measured,
    controller->i_beta_measured,
    sin_theta, cos_theta);

  controller->i_q_measured = controller->current_filter_alpha * (i_q - controller->i_q_measured);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 6a08 	vldr	s13, [r7, #32]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800154c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  controller->i_d_measured = controller->current_filter_alpha * (i_d - controller->i_d_measured);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	edd7 6a07 	vldr	s13, [r7, #28]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800156a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  if (mode != MODE_IQD_OVERRIDE) {
 8001578:	7cfb      	ldrb	r3, [r7, #19]
 800157a:	2b23      	cmp	r3, #35	; 0x23
 800157c:	d04a      	beq.n	8001614 <CurrentController_update+0x14c>
    controller->i_q_setpoint = controller->i_q_target - controller->i_q_measured;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    controller->i_d_setpoint = controller->i_d_target - controller->i_d_measured;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80015a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_q_ki * controller->i_q_setpoint, -5, 5);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80015bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_q_integrator = clampf(
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80015c8:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f7ff ff26 	bl	8001420 <clampf>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    controller->i_d_integrator = clampf(
        controller->i_d_integrator + controller->i_d_ki * controller->i_d_setpoint, -5, 5);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	edd3 6a04 	vldr	s13, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80015f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_d_integrator = clampf(
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80015fc:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	f7ff ff0c 	bl	8001420 <clampf>
 8001608:	eef0 7a40 	vmov.f32	s15, s0
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8001612:	e007      	b.n	8001624 <CurrentController_update+0x15c>
  }
  else {
    controller->i_q_integrator = 0;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->i_d_integrator = 0;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (mode != MODE_VQD_OVERRIDE) {
 8001624:	7cfb      	ldrb	r3, [r7, #19]
 8001626:	2b22      	cmp	r3, #34	; 0x22
 8001628:	d01f      	beq.n	800166a <CurrentController_update+0x1a2>
    controller->v_q_setpoint =
        controller->i_q_kp * controller->i_q_setpoint + controller->i_q_integrator;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_q_setpoint =
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    controller->v_d_setpoint =
        controller->i_d_kp * controller->i_d_setpoint + controller->i_d_integrator;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_d_setpoint =
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  }

  // clamp voltage
  if (v_bus > 0) {
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
 800166e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	dd53      	ble.n	8001720 <CurrentController_update+0x258>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15;
 8001678:	edd7 7a01 	vldr	s15, [r7, #4]
 800167c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff88 	bl	8000598 <__aeabi_f2d>
 8001688:	a343      	add	r3, pc, #268	; (adr r3, 8001798 <CurrentController_update+0x2d0>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ffdb 	bl	8000648 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff faad 	bl	8000bf8 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_norm = (
        (controller->v_q_setpoint * controller->v_q_setpoint)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016ae:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (controller->v_d_setpoint * controller->v_d_setpoint)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016be:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float v_norm = (
 80016c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        );
    if (v_norm > v_max_sq) {
 80016ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	dd21      	ble.n	8001720 <CurrentController_update+0x258>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 80016dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80016e0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e8:	eef0 7ae7 	vabs.f32	s15, s15
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	f00d fede 	bl	800f4b0 <sqrtf>
 80016f4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      controller->v_q_setpoint *= k;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80016fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
      controller->v_d_setpoint *= k;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001712:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
  }

  if (mode != MODE_VALPHABETA_OVERRIDE && mode != MODE_CALIBRATION) {
 8001720:	7cfb      	ldrb	r3, [r7, #19]
 8001722:	2b21      	cmp	r3, #33	; 0x21
 8001724:	d019      	beq.n	800175a <CurrentController_update+0x292>
 8001726:	7cfb      	ldrb	r3, [r7, #19]
 8001728:	2b05      	cmp	r3, #5
 800172a:	d016      	beq.n	800175a <CurrentController_update+0x292>
    // calibration mode needs to override v_alpha_setpoint and v_beta_setpoint
    FOC_invParkTransform(
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001744:	edd7 1a02 	vldr	s3, [r7, #8]
 8001748:	ed97 1a03 	vldr	s2, [r7, #12]
 800174c:	eef0 0a47 	vmov.f32	s1, s14
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	4610      	mov	r0, r2
 8001756:	f000 faec 	bl	8001d32 <FOC_invParkTransform>
      controller->v_q_setpoint,
      controller->v_d_setpoint,
      sin_theta, cos_theta);
  }

  if (mode != MODE_VABC_OVERRIDE) {
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b20      	cmp	r3, #32
 800175e:	d014      	beq.n	800178a <CurrentController_update+0x2c2>
    FOC_invClarkSVPWM(
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f103 0020 	add.w	r0, r3, #32
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800177e:	eef0 0a47 	vmov.f32	s1, s14
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	f000 fb09 	bl	8001d9c <FOC_invClarkSVPWM>
      &controller->v_b_setpoint,
      &controller->v_c_setpoint,
      controller->v_alpha_setpoint,
      controller->v_beta_setpoint);
  }
}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	; 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	f3af 8000 	nop.w
 8001798:	66666666 	.word	0x66666666
 800179c:	3ff26666 	.word	0x3ff26666

080017a0 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 80017aa:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001800 <wrapTo2Pi+0x60>
 80017ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80017b2:	f00d fe5d 	bl	800f470 <fmodf>
 80017b6:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 80017ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80017be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	db01      	blt.n	80017cc <wrapTo2Pi+0x2c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e00e      	b.n	80017ea <wrapTo2Pi+0x4a>
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7fe fee3 	bl	8000598 <__aeabi_f2d>
 80017d2:	a309      	add	r3, pc, #36	; (adr r3, 80017f8 <wrapTo2Pi+0x58>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe fd80 	bl	80002dc <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fa08 	bl	8000bf8 <__aeabi_d2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	ee07 3a90 	vmov	s15, r3
}
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	54442d18 	.word	0x54442d18
 80017fc:	401921fb 	.word	0x401921fb
 8001800:	40c90fdb 	.word	0x40c90fdb

08001804 <getParity>:
 * If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number.
 * If the count of 1s in a given set of bits is already even, the parity bit's value is 0.
 *
 * @return true if the number of ones in the data package is even, else false.
 */
uint16_t getParity(uint16_t data) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 8;              // example for 8-bit (this line scales it up to 16 bit)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b29a      	uxth	r2, r3
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	4053      	eors	r3, r2
 8001818:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	b29a      	uxth	r2, r3
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	4053      	eors	r3, r2
 8001824:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	b29a      	uxth	r2, r3
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4053      	eors	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4053      	eors	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  return data & 1;                // if lsb of data is 0 -> data is even. if lsb of data is 1 -> data is odd.
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	b29b      	uxth	r3, r3
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <Encoder_init>:


void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim) {
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  encoder->hspi = hspi;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	601a      	str	r2, [r3, #0]
  encoder->htim = htim;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	605a      	str	r2, [r3, #4]

  encoder->cpr = 1U << 14;  // 14 bit precision
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001872:	819a      	strh	r2, [r3, #12]
  encoder->direction = -1;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	739a      	strb	r2, [r3, #14]

  encoder->position_offset = 0;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	611a      	str	r2, [r3, #16]

  encoder->filter_bandwidth = 100;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <Encoder_init+0x6c>)
 8001886:	615a      	str	r2, [r3, #20]

  encoder->filter_integral = 0;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	621a      	str	r2, [r3, #32]

  encoder->position_reading = 0;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
  encoder->position = 0;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
  encoder->velocity = 0;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38

  encoder->dt = 0.1;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <Encoder_init+0x70>)
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24

  encoder->n_rotations = 0;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	42c80000 	.word	0x42c80000
 80018c4:	3dcccccd 	.word	0x3dcccccd

080018c8 <Encoder_setFilterBandwidth>:

void Encoder_setFilterBandwidth(Encoder *encoder, float bandwidth) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	ed87 0a00 	vstr	s0, [r7]
//  encoder->filter_bandwidth = bandwidth;
  encoder->filter_bandwidth = 50;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <Encoder_setFilterBandwidth+0x78>)
 80018d8:	615a      	str	r2, [r3, #20]
  float w3db = (1. / 8000.) * 2 * M_PI * encoder->filter_bandwidth;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe5a 	bl	8000598 <__aeabi_f2d>
 80018e4:	a314      	add	r3, pc, #80	; (adr r3, 8001938 <Encoder_setFilterBandwidth+0x70>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fead 	bl	8000648 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f97f 	bl	8000bf8 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	60fb      	str	r3, [r7, #12]
  encoder->filter_k_p = .5 * (2 * w3db);
 80018fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001902:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800190a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edc3 7a06 	vstr	s15, [r3, #24]
  encoder->filter_k_i = .5 * (w3db * w3db);
 8001914:	edd7 7a03 	vldr	s15, [r7, #12]
 8001918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800191c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	b68b71c3 	.word	0xb68b71c3
 800193c:	3f49bc65 	.word	0x3f49bc65
 8001940:	42480000 	.word	0x42480000

08001944 <Encoder_triggerUpdate>:

void Encoder_triggerUpdate(Encoder *encoder) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  encoder->spi_tx_buffer = 0x3FFF;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001952:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= 1 << 14;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	891b      	ldrh	r3, [r3, #8]
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	b29a      	uxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	891b      	ldrh	r3, [r3, #8]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff4c 	bl	8001804 <getParity>
 800196c:	4603      	mov	r3, r0
 800196e:	03d9      	lsls	r1, r3, #15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	891b      	ldrh	r3, [r3, #8]
 8001974:	b21a      	sxth	r2, r3
 8001976:	b20b      	sxth	r3, r1
 8001978:	4313      	orrs	r3, r2
 800197a:	b21b      	sxth	r3, r3
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	811a      	strh	r2, [r3, #8]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f006 fc36 	bl	80081fc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_IT(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 0108 	add.w	r1, r3, #8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 020a 	add.w	r2, r3, #10
 80019a0:	2301      	movs	r3, #1
 80019a2:	f007 fdb9 	bl	8009518 <HAL_SPI_TransmitReceive_IT>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <Encoder_update>:

void Encoder_update(Encoder *encoder) {
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  encoder->dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 1000000.;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	ee17 0a90 	vmov	r0, s15
 80019cc:	f7fe fde4 	bl	8000598 <__aeabi_f2d>
 80019d0:	a389      	add	r3, pc, #548	; (adr r3, 8001bf8 <Encoder_update+0x248>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe ff61 	bl	800089c <__aeabi_ddiv>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff f909 	bl	8000bf8 <__aeabi_d2f>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  float dt = 1 / 4000.;
 80019f6:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <Encoder_update+0x240>)
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24

  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - (encoder->cpr / 2);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	895b      	ldrh	r3, [r3, #10]
 80019fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	899b      	ldrh	r3, [r3, #12]
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	847b      	strh	r3, [r7, #34]	; 0x22

  // handle multi-rotation crossing
  int16_t reading_delta = encoder->position_reading - reading;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	843b      	strh	r3, [r7, #32]
  if (abs(reading_delta) > 0.75 * encoder->cpr) {
 8001a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bfb8      	it	lt
 8001a2a:	425b      	neglt	r3, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fda0 	bl	8000574 <__aeabi_i2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	899b      	ldrh	r3, [r3, #12]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd99 	bl	8000574 <__aeabi_i2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <Encoder_update+0x244>)
 8001a48:	f7fe fdfe 	bl	8000648 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7ff f888 	bl	8000b68 <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00c      	beq.n	8001a78 <Encoder_update+0xc8>
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	dd02      	ble.n	8001a70 <Encoder_update+0xc0>
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6e:	e000      	b.n	8001a72 <Encoder_update+0xc2>
 8001a70:	2201      	movs	r2, #1
 8001a72:	441a      	add	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  encoder->position_reading = reading;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
  float position_measured = (encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	899b      	ldrh	r3, [r3, #12]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd72 	bl	8000598 <__aeabi_f2d>
 8001ab4:	a34a      	add	r3, pc, #296	; (adr r3, 8001be0 <Encoder_update+0x230>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4614      	mov	r4, r2
 8001ac4:	461d      	mov	r5, r3
      + encoder->n_rotations * 2 * M_PI
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd51 	bl	8000574 <__aeabi_i2d>
 8001ad2:	a345      	add	r3, pc, #276	; (adr r3, 8001be8 <Encoder_update+0x238>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fdb6 	bl	8000648 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fbfa 	bl	80002dc <__adddf3>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
      + encoder->position_offset);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd4f 	bl	8000598 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4620      	mov	r0, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	f7fe fbeb 	bl	80002dc <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
  float position_measured = (encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI)
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f873 	bl	8000bf8 <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	61fb      	str	r3, [r7, #28]
  float position_prev = encoder->position;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1a:	61bb      	str	r3, [r7, #24]
  float position_error = position_measured - position_prev;
 8001b1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b28:	edc7 7a05 	vstr	s15, [r7, #20]

  encoder->filter_integral += encoder->filter_k_i * position_error;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edc3 7a08 	vstr	s15, [r3, #32]

  float position_tune = encoder->filter_k_p * position_error + encoder->filter_integral;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b62:	edc7 7a04 	vstr	s15, [r7, #16]

  encoder->position = position_prev + position_tune;
 8001b66:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // subtract the offset to get "true" revolution
  encoder->position_relative = wrapTo2Pi(encoder->position - encoder->position_offset);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	f7ff fe08 	bl	80017a0 <wrapTo2Pi>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  float delta_position = encoder->position - position_prev;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001ba0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	edc7 7a03 	vstr	s15, [r7, #12]
  if (encoder->dt > 0) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	dc00      	bgt.n	8001bbe <Encoder_update+0x20e>
    encoder->velocity = (delta_position / encoder->dt);
  }
}
 8001bbc:	e009      	b.n	8001bd2 <Encoder_update+0x222>
    encoder->velocity = (delta_position / encoder->dt);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001bc4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	54442d18 	.word	0x54442d18
 8001be4:	401921fb 	.word	0x401921fb
 8001be8:	54442d18 	.word	0x54442d18
 8001bec:	400921fb 	.word	0x400921fb
 8001bf0:	3983126f 	.word	0x3983126f
 8001bf4:	3fe80000 	.word	0x3fe80000
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	412e8480 	.word	0x412e8480

08001c00 <Encoder_getRelativePosition>:

void Encoder_setOffset(Encoder *encoder, float offset) {
  encoder->position_offset = offset;
}

float Encoder_getRelativePosition(Encoder *encoder) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return encoder->position_relative;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	ee07 3a90 	vmov	s15, r3
}
 8001c10:	eeb0 0a67 	vmov.f32	s0, s15
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <Encoder_getPosition>:

float Encoder_getPosition(Encoder *encoder) {
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return encoder->position;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <Encoder_getVelocity>:

float Encoder_getVelocity(Encoder *encoder) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return encoder->velocity;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	ee07 3a90 	vmov	s15, r3
}
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <FOC_clarkTransform>:
 *      Author: TK
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6178      	str	r0, [r7, #20]
 8001c64:	6139      	str	r1, [r7, #16]
 8001c66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c6e:	ed87 1a01 	vstr	s2, [r7, #4]
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001cc0 <FOC_clarkTransform+0x64>
 8001c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	edc3 7a00 	vstr	s15, [r3]
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001c98:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001cc4 <FOC_clarkTransform+0x68>
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	edc3 7a00 	vstr	s15, [r3]
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	3eaaaaab 	.word	0x3eaaaaab
 8001cc4:	3f13cd3a 	.word	0x3f13cd3a

08001cc8 <FOC_parkTransform>:

void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6178      	str	r0, [r7, #20]
 8001cd0:	6139      	str	r1, [r7, #16]
 8001cd2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cd6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cda:	ed87 1a01 	vstr	s2, [r7, #4]
 8001cde:	edc7 1a00 	vstr	s3, [r7]
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001ce2:	ed97 7a00 	vldr	s14, [r7]
 8001ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cee:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	edc3 7a00 	vstr	s15, [r3]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8001d04:	ed97 7a00 	vldr	s14, [r7]
 8001d08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d10:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	edc3 7a00 	vstr	s15, [r3]

}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <FOC_invParkTransform>:

void FOC_invParkTransform(float *v_alpha, float *v_beta, float v_q, float v_d, float sin_theta, float cos_theta) {
 8001d32:	b480      	push	{r7}
 8001d34:	b087      	sub	sp, #28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6178      	str	r0, [r7, #20]
 8001d3a:	6139      	str	r1, [r7, #16]
 8001d3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d40:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d44:	ed87 1a01 	vstr	s2, [r7, #4]
 8001d48:	edc7 1a00 	vstr	s3, [r7]
  *v_alpha  = -(sin_theta * v_q) + (cos_theta * v_d);
 8001d4c:	ed97 7a00 	vldr	s14, [r7]
 8001d50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	edc3 7a00 	vstr	s15, [r3]
  *v_beta   =  (cos_theta * v_q) + (sin_theta * v_d);
 8001d6e:	ed97 7a00 	vldr	s14, [r7]
 8001d72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <FOC_invClarkSVPWM>:

void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	ed2d 8b02 	vpush	{d8}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6178      	str	r0, [r7, #20]
 8001da8:	6139      	str	r1, [r7, #16]
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	ed87 0a02 	vstr	s0, [r7, #8]
 8001db0:	edc7 0a01 	vstr	s1, [r7, #4]
  float v_a_phase = v_alpha;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 8001db8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dbc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001dc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001e8c <FOC_invClarkSVPWM+0xf0>
 8001dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd4:	edc7 7a08 	vstr	s15, [r7, #32]
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 8001dd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ddc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001de0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001e8c <FOC_invClarkSVPWM+0xf0>
 8001dec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df4:	edc7 7a07 	vstr	s15, [r7, #28]

  float v_neutral = .5f * (fmaxf(fmaxf(v_a_phase, v_b_phase), v_c_phase) + fminf(fminf(v_a_phase, v_b_phase), v_c_phase));
 8001df8:	edd7 0a08 	vldr	s1, [r7, #32]
 8001dfc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001e00:	f00d fa9e 	bl	800f340 <fmaxf>
 8001e04:	eef0 7a40 	vmov.f32	s15, s0
 8001e08:	edd7 0a07 	vldr	s1, [r7, #28]
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	f00d fa96 	bl	800f340 <fmaxf>
 8001e14:	eeb0 8a40 	vmov.f32	s16, s0
 8001e18:	edd7 0a08 	vldr	s1, [r7, #32]
 8001e1c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001e20:	f00d faa9 	bl	800f376 <fminf>
 8001e24:	eef0 7a40 	vmov.f32	s15, s0
 8001e28:	edd7 0a07 	vldr	s1, [r7, #28]
 8001e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e30:	f00d faa1 	bl	800f376 <fminf>
 8001e34:	eef0 7a40 	vmov.f32	s15, s0
 8001e38:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001e3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e44:	edc7 7a06 	vstr	s15, [r7, #24]

  *v_a = v_a_phase - v_neutral;
 8001e48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	edc3 7a00 	vstr	s15, [r3]
  *v_b = v_b_phase - v_neutral;
 8001e5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	edc3 7a00 	vstr	s15, [r3]
  *v_c = v_c_phase - v_neutral;
 8001e6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	ecbd 8b02 	vpop	{d8}
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	3f5db3d7 	.word	0x3f5db3d7

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e94:	f003 fa57 	bl	8005346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e98:	f000 f821 	bl	8001ede <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9c:	f000 fcae 	bl	80027fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ea0:	f000 f868 	bl	8001f74 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001ea4:	f000 f9a4 	bl	80021f0 <MX_FDCAN1_Init>
  MX_OPAMP1_Init();
 8001ea8:	f000 f9e8 	bl	800227c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001eac:	f000 fa14 	bl	80022d8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001eb0:	f000 fa40 	bl	8002334 <MX_OPAMP3_Init>
  MX_SPI1_Init();
 8001eb4:	f000 fa6c 	bl	8002390 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001eb8:	f000 faa8 	bl	800240c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001ebc:	f000 fc50 	bl	8002760 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001ec0:	f000 f8fe 	bl	80020c0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001ec4:	f000 fb7a 	bl	80025bc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ec8:	f000 fbc6 	bl	8002658 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001ecc:	f000 fc12 	bl	80026f4 <MX_TIM6_Init>
  MX_CORDIC_Init();
 8001ed0:	f000 f97a 	bl	80021c8 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8001ed4:	f7ff f8d6 	bl	8001084 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8001ed8:	f7ff f900 	bl	80010dc <APP_main>
  {
 8001edc:	e7fc      	b.n	8001ed8 <main+0x48>

08001ede <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b094      	sub	sp, #80	; 0x50
 8001ee2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	2238      	movs	r2, #56	; 0x38
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00a faf7 	bl	800c4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f006 fa95 	bl	8008430 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f10:	2340      	movs	r3, #64	; 0x40
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f14:	2302      	movs	r3, #2
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001f20:	2314      	movs	r3, #20
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f24:	2302      	movs	r3, #2
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f006 fb1f 	bl	8008578 <HAL_RCC_OscConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f40:	f000 fd16 	bl	8002970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f44:	230f      	movs	r3, #15
 8001f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f006 fe23 	bl	8008ba8 <HAL_RCC_ClockConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f68:	f000 fd02 	bl	8002970 <Error_Handler>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3750      	adds	r7, #80	; 0x50
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b092      	sub	sp, #72	; 0x48
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f86:	463b      	mov	r3, r7
 8001f88:	223c      	movs	r2, #60	; 0x3c
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00a faa7 	bl	800c4e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001f94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f9a:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001f9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa8:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001fcc:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fda:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ff2:	482f      	ldr	r0, [pc, #188]	; (80020b0 <MX_ADC1_Init+0x13c>)
 8001ff4:	f003 fae8 	bl	80055c8 <HAL_ADC_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ffe:	f000 fcb7 	bl	8002970 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002002:	2300      	movs	r3, #0
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002006:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800200a:	4619      	mov	r1, r3
 800200c:	4828      	ldr	r0, [pc, #160]	; (80020b0 <MX_ADC1_Init+0x13c>)
 800200e:	f004 fc0d 	bl	800682c <HAL_ADCEx_MultiModeConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002018:	f000 fcaa 	bl	8002970 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <MX_ADC1_Init+0x140>)
 800201e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002020:	2309      	movs	r3, #9
 8002022:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002028:	237f      	movs	r3, #127	; 0x7f
 800202a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800202c:	2304      	movs	r3, #4
 800202e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	4814      	ldr	r0, [pc, #80]	; (80020b0 <MX_ADC1_Init+0x13c>)
 800205e:	f003 ff05 	bl	8005e6c <HAL_ADCEx_InjectedConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002068:	f000 fc82 	bl	8002970 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_ADC1_Init+0x144>)
 800206e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002070:	f240 130f 	movw	r3, #271	; 0x10f
 8002074:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	4619      	mov	r1, r3
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <MX_ADC1_Init+0x13c>)
 800207c:	f003 fef6 	bl	8005e6c <HAL_ADCEx_InjectedConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002086:	f000 fc73 	bl	8002970 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_ADC1_Init+0x148>)
 800208c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800208e:	f240 2315 	movw	r3, #533	; 0x215
 8002092:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_ADC1_Init+0x13c>)
 800209a:	f003 fee7 	bl	8005e6c <HAL_ADCEx_InjectedConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80020a4:	f000 fc64 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3748      	adds	r7, #72	; 0x48
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000354 	.word	0x20000354
 80020b4:	b6902000 	.word	0xb6902000
 80020b8:	04300002 	.word	0x04300002
 80020bc:	2e300800 	.word	0x2e300800

080020c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b090      	sub	sp, #64	; 0x40
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	223c      	movs	r2, #60	; 0x3c
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00a fa07 	bl	800c4e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020d4:	4a39      	ldr	r2, [pc, #228]	; (80021bc <MX_ADC2_Init+0xfc>)
 80020d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e6:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80020fa:	2208      	movs	r2, #8
 80020fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <MX_ADC2_Init+0xf8>)
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <MX_ADC2_Init+0xf8>)
 8002106:	2200      	movs	r2, #0
 8002108:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <MX_ADC2_Init+0xf8>)
 800210c:	2201      	movs	r2, #1
 800210e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <MX_ADC2_Init+0xf8>)
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <MX_ADC2_Init+0xf8>)
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <MX_ADC2_Init+0xf8>)
 8002122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <MX_ADC2_Init+0xf8>)
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002130:	4821      	ldr	r0, [pc, #132]	; (80021b8 <MX_ADC2_Init+0xf8>)
 8002132:	f003 fa49 	bl	80055c8 <HAL_ADC_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800213c:	f000 fc18 	bl	8002970 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP2;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <MX_ADC2_Init+0x100>)
 8002142:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002144:	2309      	movs	r3, #9
 8002146:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800214c:	237f      	movs	r3, #127	; 0x7f
 800214e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002150:	2304      	movs	r3, #4
 8002152:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002158:	2302      	movs	r3, #2
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4619      	mov	r1, r3
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <MX_ADC2_Init+0xf8>)
 8002182:	f003 fe73 	bl	8005e6c <HAL_ADCEx_InjectedConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800218c:	f000 fbf0 	bl	8002970 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_ADC2_Init+0x104>)
 8002192:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002194:	f240 130f 	movw	r3, #271	; 0x10f
 8002198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4806      	ldr	r0, [pc, #24]	; (80021b8 <MX_ADC2_Init+0xf8>)
 80021a0:	f003 fe64 	bl	8005e6c <HAL_ADCEx_InjectedConfigChannel>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80021aa:	f000 fbe1 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	3740      	adds	r7, #64	; 0x40
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200003c0 	.word	0x200003c0
 80021bc:	50000100 	.word	0x50000100
 80021c0:	c3290000 	.word	0xc3290000
 80021c4:	cb8c0000 	.word	0xcb8c0000

080021c8 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_CORDIC_Init+0x20>)
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <MX_CORDIC_Init+0x24>)
 80021d0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_CORDIC_Init+0x20>)
 80021d4:	f004 fbce 	bl	8006974 <HAL_CORDIC_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80021de:	f000 fbc7 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000042c 	.word	0x2000042c
 80021ec:	40020c00 	.word	0x40020c00

080021f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <MX_FDCAN1_Init+0x84>)
 80021f6:	4a20      	ldr	r2, [pc, #128]	; (8002278 <MX_FDCAN1_Init+0x88>)
 80021f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <MX_FDCAN1_Init+0x84>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_FDCAN1_Init+0x84>)
 800220e:	2200      	movs	r2, #0
 8002210:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002214:	2200      	movs	r2, #0
 8002216:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <MX_FDCAN1_Init+0x84>)
 800221a:	2200      	movs	r2, #0
 800221c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002220:	2210      	movs	r2, #16
 8002222:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002226:	2201      	movs	r2, #1
 8002228:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MX_FDCAN1_Init+0x84>)
 800222c:	2207      	movs	r2, #7
 800222e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002232:	2202      	movs	r2, #2
 8002234:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002238:	2201      	movs	r2, #1
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <MX_FDCAN1_Init+0x84>)
 800223e:	2201      	movs	r2, #1
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002244:	2201      	movs	r2, #1
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <MX_FDCAN1_Init+0x84>)
 800224a:	2201      	movs	r2, #1
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002250:	2200      	movs	r2, #0
 8002252:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002256:	2200      	movs	r2, #0
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_FDCAN1_Init+0x84>)
 800225c:	2200      	movs	r2, #0
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <MX_FDCAN1_Init+0x84>)
 8002262:	f004 fd6b 	bl	8006d3c <HAL_FDCAN_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800226c:	f000 fb80 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000454 	.word	0x20000454
 8002278:	40006400 	.word	0x40006400

0800227c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 8002282:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <MX_OPAMP1_Init+0x58>)
 8002284:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 800229a:	2201      	movs	r2, #1
 800229c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 80022a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 80022ae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_OPAMP1_Init+0x54>)
 80022bc:	f005 ffb6 	bl	800822c <HAL_OPAMP_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 80022c6:	f000 fb53 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200004b8 	.word	0x200004b8
 80022d4:	40010300 	.word	0x40010300

080022d8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <MX_OPAMP2_Init+0x54>)
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <MX_OPAMP2_Init+0x58>)
 80022e0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <MX_OPAMP2_Init+0x54>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <MX_OPAMP2_Init+0x54>)
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <MX_OPAMP2_Init+0x54>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <MX_OPAMP2_Init+0x54>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <MX_OPAMP2_Init+0x54>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <MX_OPAMP2_Init+0x54>)
 8002302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <MX_OPAMP2_Init+0x54>)
 800230a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <MX_OPAMP2_Init+0x54>)
 8002312:	2200      	movs	r2, #0
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_OPAMP2_Init+0x54>)
 8002318:	f005 ff88 	bl	800822c <HAL_OPAMP_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8002322:	f000 fb25 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200004f4 	.word	0x200004f4
 8002330:	40010304 	.word	0x40010304

08002334 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <MX_OPAMP3_Init+0x54>)
 800233a:	4a14      	ldr	r2, [pc, #80]	; (800238c <MX_OPAMP3_Init+0x58>)
 800233c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <MX_OPAMP3_Init+0x54>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <MX_OPAMP3_Init+0x54>)
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <MX_OPAMP3_Init+0x54>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <MX_OPAMP3_Init+0x54>)
 8002352:	2201      	movs	r2, #1
 8002354:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_OPAMP3_Init+0x54>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <MX_OPAMP3_Init+0x54>)
 800235e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <MX_OPAMP3_Init+0x54>)
 8002366:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <MX_OPAMP3_Init+0x54>)
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <MX_OPAMP3_Init+0x54>)
 8002374:	f005 ff5a 	bl	800822c <HAL_OPAMP_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800237e:	f000 faf7 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000530 	.word	0x20000530
 800238c:	40010308 	.word	0x40010308

08002390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_SPI1_Init+0x74>)
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <MX_SPI1_Init+0x78>)
 8002398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_SPI1_Init+0x74>)
 800239c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_SPI1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_SPI1_Init+0x74>)
 80023aa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80023ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_SPI1_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_SPI1_Init+0x74>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_SPI1_Init+0x74>)
 80023be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_SPI1_Init+0x74>)
 80023c6:	2218      	movs	r2, #24
 80023c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_SPI1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_SPI1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_SPI1_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_SPI1_Init+0x74>)
 80023de:	2207      	movs	r2, #7
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_SPI1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_SPI1_Init+0x74>)
 80023f0:	f006 ffe6 	bl	80093c0 <HAL_SPI_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023fa:	f000 fab9 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000056c 	.word	0x2000056c
 8002408:	40013000 	.word	0x40013000

0800240c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b09c      	sub	sp, #112	; 0x70
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002412:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002420:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	2234      	movs	r2, #52	; 0x34
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f00a f84a 	bl	800c4e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800244c:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 800244e:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <MX_TIM1_Init+0x1ac>)
 8002450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002452:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002458:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 800245a:	2220      	movs	r2, #32
 800245c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800245e:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002460:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800246c:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 800246e:	2201      	movs	r2, #1
 8002470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002478:	484e      	ldr	r0, [pc, #312]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 800247a:	f007 fcd7 	bl	8009e2c <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002484:	f000 fa74 	bl	8002970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800248e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002492:	4619      	mov	r1, r3
 8002494:	4847      	ldr	r0, [pc, #284]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002496:	f008 f9e3 	bl	800a860 <HAL_TIM_ConfigClockSource>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024a0:	f000 fa66 	bl	8002970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024a4:	4843      	ldr	r0, [pc, #268]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 80024a6:	f007 fde5 	bl	800a074 <HAL_TIM_PWM_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80024b0:	f000 fa5e 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80024b4:	2370      	movs	r3, #112	; 0x70
 80024b6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c4:	4619      	mov	r1, r3
 80024c6:	483b      	ldr	r0, [pc, #236]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 80024c8:	f008 ffe8 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024d2:	f000 fa4d 	bl	8002970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d6:	2360      	movs	r3, #96	; 0x60
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024de:	2300      	movs	r3, #0
 80024e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e2:	2300      	movs	r3, #0
 80024e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024f6:	2200      	movs	r2, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	482e      	ldr	r0, [pc, #184]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 80024fc:	f008 f89c 	bl	800a638 <HAL_TIM_PWM_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002506:	f000 fa33 	bl	8002970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800250a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800250e:	2204      	movs	r2, #4
 8002510:	4619      	mov	r1, r3
 8002512:	4828      	ldr	r0, [pc, #160]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002514:	f008 f890 	bl	800a638 <HAL_TIM_PWM_ConfigChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800251e:	f000 fa27 	bl	8002970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002522:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002526:	2208      	movs	r2, #8
 8002528:	4619      	mov	r1, r3
 800252a:	4822      	ldr	r0, [pc, #136]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 800252c:	f008 f884 	bl	800a638 <HAL_TIM_PWM_ConfigChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002536:	f000 fa1b 	bl	8002970 <Error_Handler>
  }
  sConfigOC.Pulse = 3998;
 800253a:	f640 739e 	movw	r3, #3998	; 0xf9e
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002540:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002544:	220c      	movs	r2, #12
 8002546:	4619      	mov	r1, r3
 8002548:	481a      	ldr	r0, [pc, #104]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 800254a:	f008 f875 	bl	800a638 <HAL_TIM_PWM_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002554:	f000 fa0c 	bl	8002970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800257e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 8002596:	f009 f803 	bl	800b5a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 80025a0:	f000 f9e6 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM1_Init+0x1a8>)
 80025a6:	f002 fca5 	bl	8004ef4 <HAL_TIM_MspPostInit>

}
 80025aa:	bf00      	nop
 80025ac:	3770      	adds	r7, #112	; 0x70
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200005d0 	.word	0x200005d0
 80025b8:	40012c00 	.word	0x40012c00

080025bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_TIM2_Init+0x98>)
 80025dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_TIM2_Init+0x98>)
 80025e4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80025e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_TIM2_Init+0x98>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_TIM2_Init+0x98>)
 80025f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80025f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <MX_TIM2_Init+0x98>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_TIM2_Init+0x98>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <MX_TIM2_Init+0x98>)
 8002606:	f007 fc11 	bl	8009e2c <HAL_TIM_Base_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002610:	f000 f9ae 	bl	8002970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800261a:	f107 0310 	add.w	r3, r7, #16
 800261e:	4619      	mov	r1, r3
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <MX_TIM2_Init+0x98>)
 8002622:	f008 f91d 	bl	800a860 <HAL_TIM_ConfigClockSource>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800262c:	f000 f9a0 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002630:	2320      	movs	r3, #32
 8002632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_TIM2_Init+0x98>)
 800263e:	f008 ff2d 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002648:	f000 f992 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2000061c 	.word	0x2000061c

08002658 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_TIM4_Init+0x94>)
 8002678:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <MX_TIM4_Init+0x98>)
 800267a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_TIM4_Init+0x94>)
 800267e:	2213      	movs	r2, #19
 8002680:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_TIM4_Init+0x94>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_TIM4_Init+0x94>)
 800268a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800268e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <MX_TIM4_Init+0x94>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_TIM4_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800269c:	4813      	ldr	r0, [pc, #76]	; (80026ec <MX_TIM4_Init+0x94>)
 800269e:	f007 fbc5 	bl	8009e2c <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80026a8:	f000 f962 	bl	8002970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <MX_TIM4_Init+0x94>)
 80026ba:	f008 f8d1 	bl	800a860 <HAL_TIM_ConfigClockSource>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80026c4:	f000 f954 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026c8:	2320      	movs	r3, #32
 80026ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_TIM4_Init+0x94>)
 80026d6:	f008 fee1 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026e0:	f000 f946 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000668 	.word	0x20000668
 80026f0:	40000800 	.word	0x40000800

080026f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_TIM6_Init+0x64>)
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <MX_TIM6_Init+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <MX_TIM6_Init+0x64>)
 800270c:	229f      	movs	r2, #159	; 0x9f
 800270e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_TIM6_Init+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <MX_TIM6_Init+0x64>)
 8002718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_TIM6_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <MX_TIM6_Init+0x64>)
 8002726:	f007 fb81 	bl	8009e2c <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002730:	f000 f91e 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_TIM6_Init+0x64>)
 8002742:	f008 feab 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800274c:	f000 f910 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200006b4 	.word	0x200006b4
 800275c:	40001000 	.word	0x40001000

08002760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 8002766:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <MX_USART3_UART_Init+0x94>)
 8002768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 800276c:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <MX_USART3_UART_Init+0x98>)
 800276e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 8002784:	220c      	movs	r2, #12
 8002786:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 80027a8:	f009 f805 	bl	800b7b6 <HAL_UART_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80027b2:	f000 f8dd 	bl	8002970 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b6:	2100      	movs	r1, #0
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 80027ba:	f009 fd9d 	bl	800c2f8 <HAL_UARTEx_SetTxFifoThreshold>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80027c4:	f000 f8d4 	bl	8002970 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 80027cc:	f009 fdd2 	bl	800c374 <HAL_UARTEx_SetRxFifoThreshold>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80027d6:	f000 f8cb 	bl	8002970 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART3_UART_Init+0x90>)
 80027dc:	f009 fd53 	bl	800c286 <HAL_UARTEx_DisableFifoMode>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80027e6:	f000 f8c3 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000700 	.word	0x20000700
 80027f4:	40004800 	.word	0x40004800
 80027f8:	000f4240 	.word	0x000f4240

080027fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	4b54      	ldr	r3, [pc, #336]	; (8002964 <MX_GPIO_Init+0x168>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	4a53      	ldr	r2, [pc, #332]	; (8002964 <MX_GPIO_Init+0x168>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281e:	4b51      	ldr	r3, [pc, #324]	; (8002964 <MX_GPIO_Init+0x168>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800282a:	4b4e      	ldr	r3, [pc, #312]	; (8002964 <MX_GPIO_Init+0x168>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <MX_GPIO_Init+0x168>)
 8002830:	f043 0320 	orr.w	r3, r3, #32
 8002834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002836:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <MX_GPIO_Init+0x168>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b48      	ldr	r3, [pc, #288]	; (8002964 <MX_GPIO_Init+0x168>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	4a47      	ldr	r2, [pc, #284]	; (8002964 <MX_GPIO_Init+0x168>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <MX_GPIO_Init+0x168>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4b42      	ldr	r3, [pc, #264]	; (8002964 <MX_GPIO_Init+0x168>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4a41      	ldr	r2, [pc, #260]	; (8002964 <MX_GPIO_Init+0x168>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <MX_GPIO_Init+0x168>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002878:	483b      	ldr	r0, [pc, #236]	; (8002968 <MX_GPIO_Init+0x16c>)
 800287a:	f005 fcbf 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800287e:	2200      	movs	r2, #0
 8002880:	2154      	movs	r1, #84	; 0x54
 8002882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002886:	f005 fcb9 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f005 fcb2 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002898:	2201      	movs	r2, #1
 800289a:	2140      	movs	r1, #64	; 0x40
 800289c:	4833      	ldr	r0, [pc, #204]	; (800296c <MX_GPIO_Init+0x170>)
 800289e:	f005 fcad 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	4831      	ldr	r0, [pc, #196]	; (800296c <MX_GPIO_Init+0x170>)
 80028a8:	f005 fca8 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80028ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <MX_GPIO_Init+0x16c>)
 80028c6:	f005 faff 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 80028ca:	2354      	movs	r3, #84	; 0x54
 80028cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e4:	f005 faf0 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f6:	2302      	movs	r3, #2
 80028f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002904:	f005 fae0 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002908:	2340      	movs	r3, #64	; 0x40
 800290a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	4813      	ldr	r0, [pc, #76]	; (800296c <MX_GPIO_Init+0x170>)
 8002920:	f005 fad2 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	480c      	ldr	r0, [pc, #48]	; (800296c <MX_GPIO_Init+0x170>)
 800293c:	f005 fac4 	bl	8007ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_GPIO_Init+0x170>)
 8002956:	f005 fab7 	bl	8007ec8 <HAL_GPIO_Init>

}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	48000800 	.word	0x48000800
 800296c:	48000400 	.word	0x48000400

08002970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002974:	b672      	cpsid	i
}
 8002976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002978:	e7fe      	b.n	8002978 <Error_Handler+0x8>

0800297a <Motor_init>:


#include "motor.h"


void Motor_init(Motor *motor) {
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  motor->pole_pairs = 14;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	220e      	movs	r2, #14
 8002986:	601a      	str	r2, [r3, #0]
  motor->kv_rating = 150;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2296      	movs	r2, #150	; 0x96
 800298c:	605a      	str	r2, [r3, #4]

  motor->flux_angle_offset = 0.;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	0000      	movs	r0, r0
 80029a4:	0000      	movs	r0, r0
	...

080029a8 <wrapTo2Pi>:
static inline float wrapTo2Pi(float value) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 80029b2:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002a08 <wrapTo2Pi+0x60>
 80029b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80029ba:	f00c fd59 	bl	800f470 <fmodf>
 80029be:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 80029c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	db01      	blt.n	80029d4 <wrapTo2Pi+0x2c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	e00e      	b.n	80029f2 <wrapTo2Pi+0x4a>
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fd fddf 	bl	8000598 <__aeabi_f2d>
 80029da:	a309      	add	r3, pc, #36	; (adr r3, 8002a00 <wrapTo2Pi+0x58>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fc7c 	bl	80002dc <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f904 	bl	8000bf8 <__aeabi_d2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	ee07 3a90 	vmov	s15, r3
}
 80029f6:	eeb0 0a67 	vmov.f32	s0, s15
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	54442d18 	.word	0x54442d18
 8002a04:	401921fb 	.word	0x401921fb
 8002a08:	40c90fdb 	.word	0x40c90fdb

08002a0c <MotorController_init>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart3;

void MotorController_init(MotorController *controller) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	; 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  controller->mode = MODE_DISABLED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  controller->device_id = DEVICE_CAN_ID;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
  controller->firmware_version = FIRMWARE_VERSION;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a76      	ldr	r2, [pc, #472]	; (8002c00 <MotorController_init+0x1f4>)
 8002a28:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  filter_config.FilterIndex = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_config.FilterType = FDCAN_FILTER_MASK;
 8002a34:	2302      	movs	r3, #2
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
  filter_config.FilterID1 = controller->device_id;    // filter
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8002a44:	2300      	movs	r3, #0
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  CORDIC_ConfigTypeDef cordic_config;
  cordic_config.Function = CORDIC_FUNCTION_COSINE; // ouput : cosine, then sine
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
  cordic_config.Scale = CORDIC_SCALE_0; // not used
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  cordic_config.InSize = CORDIC_INSIZE_32BITS; // q31
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
  cordic_config.OutSize = CORDIC_OUTSIZE_32BITS; // q31
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  cordic_config.NbWrite = CORDIC_NBWRITE_1; // ARG2 is 1 default
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  cordic_config.NbRead = CORDIC_NBREAD_2; // read cosine and sine
 8002a62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a66:	61fb      	str	r3, [r7, #28]
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 8002a68:	2350      	movs	r3, #80	; 0x50
 8002a6a:	623b      	str	r3, [r7, #32]
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	4619      	mov	r1, r3
 8002a72:	4864      	ldr	r0, [pc, #400]	; (8002c04 <MotorController_init+0x1f8>)
 8002a74:	f003 ffb0 	bl	80069d8 <HAL_CORDIC_Configure>

  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4862      	ldr	r0, [pc, #392]	; (8002c08 <MotorController_init+0x1fc>)
 8002a80:	f004 fab6 	bl	8006ff0 <HAL_FDCAN_ConfigFilter>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_FDCAN_Start(&hfdcan1);
 8002a92:	485d      	ldr	r0, [pc, #372]	; (8002c08 <MotorController_init+0x1fc>)
 8002a94:	f004 fb06 	bl	80070a4 <HAL_FDCAN_Start>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4857      	ldr	r0, [pc, #348]	; (8002c08 <MotorController_init+0x1fc>)
 8002aac:	f004 fc40 	bl	8007330 <HAL_FDCAN_ActivateNotification>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  Encoder_init(&controller->encoder, &hspi1, &htim6);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <MotorController_init+0x200>)
 8002ac2:	4953      	ldr	r1, [pc, #332]	; (8002c10 <MotorController_init+0x204>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fec5 	bl	8001854 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <MotorController_init+0x208>)
 8002ad2:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <MotorController_init+0x20c>)
 8002ad4:	4951      	ldr	r1, [pc, #324]	; (8002c1c <MotorController_init+0x210>)
 8002ad6:	f001 fda5 	bl	8004624 <PowerStage_init>
  Motor_init(&controller->motor);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff4b 	bl	800297a <Motor_init>

  CurrentController_init(&controller->current_controller);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	336c      	adds	r3, #108	; 0x6c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fcc3 	bl	8001474 <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	33d0      	adds	r3, #208	; 0xd0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fc7a 	bl	80043ec <PositionController_init>

#if OVERWRITE_CONFIG
  MotorController_storeConfig(controller);
#else
  MotorController_loadConfig(controller);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f9b9 	bl	8002e70 <MotorController_loadConfig>
#endif

  Encoder_setFilterBandwidth(&controller->encoder, controller->encoder.filter_bandwidth);
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f7fe fedc 	bl	80018c8 <Encoder_setFilterBandwidth>

  PowerStage_start(&controller->powerstage);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	333c      	adds	r3, #60	; 0x3c
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 fda1 	bl	800465c <PowerStage_start>

  status |= HAL_OPAMP_Start(&hopamp1);
 8002b1a:	4841      	ldr	r0, [pc, #260]	; (8002c20 <MotorController_init+0x214>)
 8002b1c:	f005 fc56 	bl	80083cc <HAL_OPAMP_Start>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_OPAMP_Start(&hopamp2);
 8002b2e:	483d      	ldr	r0, [pc, #244]	; (8002c24 <MotorController_init+0x218>)
 8002b30:	f005 fc4c 	bl	80083cc <HAL_OPAMP_Start>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_OPAMP_Start(&hopamp3);
 8002b42:	4839      	ldr	r0, [pc, #228]	; (8002c28 <MotorController_init+0x21c>)
 8002b44:	f005 fc42 	bl	80083cc <HAL_OPAMP_Start>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_TIM_Base_Start_IT(&htim2);    // safety watchdog timer
 8002b56:	4835      	ldr	r0, [pc, #212]	; (8002c2c <MotorController_init+0x220>)
 8002b58:	f007 fa22 	bl	8009fa0 <HAL_TIM_Base_Start_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_Base_Start_IT(&htim4);    // position update trigger timer
 8002b6a:	4831      	ldr	r0, [pc, #196]	; (8002c30 <MotorController_init+0x224>)
 8002b6c:	f007 fa18 	bl	8009fa0 <HAL_TIM_Base_Start_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_Base_Start(&htim6);       // time keeper timer
 8002b7e:	4823      	ldr	r0, [pc, #140]	; (8002c0c <MotorController_init+0x200>)
 8002b80:	f007 f9ac 	bl	8009edc <HAL_TIM_Base_Start>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002b92:	4821      	ldr	r0, [pc, #132]	; (8002c18 <MotorController_init+0x20c>)
 8002b94:	f003 f882 	bl	8005c9c <HAL_ADCEx_InjectedStart>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <MotorController_init+0x208>)
 8002ba8:	f003 f878 	bl	8005c9c <HAL_ADCEx_InjectedStart>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (status != HAL_OK) {
 8002bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d000      	beq.n	8002bc4 <MotorController_init+0x1b8>
    while (1) {
 8002bc2:	e7fe      	b.n	8002bc2 <MotorController_init+0x1b6>
      // error loop
    }
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe febc 	bl	8001944 <Encoder_triggerUpdate>

  HAL_Delay(100);
 8002bcc:	2064      	movs	r0, #100	; 0x64
 8002bce:	f002 fc2b 	bl	8005428 <HAL_Delay>
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	333c      	adds	r3, #60	; 0x3c
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 fe4e 	bl	8004878 <PowerStage_calibratePhaseCurrentOffset>

  if (controller->mode == MODE_DISABLED) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <MotorController_init+0x1ea>
    controller->mode = MODE_IDLE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    controller->error = ERROR_NO_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3740      	adds	r7, #64	; 0x40
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	00100003 	.word	0x00100003
 8002c04:	2000042c 	.word	0x2000042c
 8002c08:	20000454 	.word	0x20000454
 8002c0c:	200006b4 	.word	0x200006b4
 8002c10:	2000056c 	.word	0x2000056c
 8002c14:	200003c0 	.word	0x200003c0
 8002c18:	20000354 	.word	0x20000354
 8002c1c:	200005d0 	.word	0x200005d0
 8002c20:	200004b8 	.word	0x200004b8
 8002c24:	200004f4 	.word	0x200004f4
 8002c28:	20000530 	.word	0x20000530
 8002c2c:	2000061c 	.word	0x2000061c
 8002c30:	20000668 	.word	0x20000668

08002c34 <MotorController_getMode>:

ErrorCode MotorController_getError(MotorController *controller) {
  return controller->error;
}

Mode MotorController_getMode(MotorController *controller) {
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return controller->mode;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <MotorController_setMode>:

void MotorController_setMode(MotorController *controller, Mode mode) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  switch (mode) {
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b23      	cmp	r3, #35	; 0x23
 8002c60:	dc50      	bgt.n	8002d04 <MotorController_setMode+0xb4>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f2c0 80a6 	blt.w	8002db4 <MotorController_setMode+0x164>
 8002c68:	2b23      	cmp	r3, #35	; 0x23
 8002c6a:	f200 80a3 	bhi.w	8002db4 <MotorController_setMode+0x164>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <MotorController_setMode+0x24>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002d0b 	.word	0x08002d0b
 8002c78:	08002d17 	.word	0x08002d17
 8002c7c:	08002db5 	.word	0x08002db5
 8002c80:	08002db5 	.word	0x08002db5
 8002c84:	08002db5 	.word	0x08002db5
 8002c88:	08002d2b 	.word	0x08002d2b
 8002c8c:	08002db5 	.word	0x08002db5
 8002c90:	08002db5 	.word	0x08002db5
 8002c94:	08002db5 	.word	0x08002db5
 8002c98:	08002db5 	.word	0x08002db5
 8002c9c:	08002db5 	.word	0x08002db5
 8002ca0:	08002db5 	.word	0x08002db5
 8002ca4:	08002db5 	.word	0x08002db5
 8002ca8:	08002db5 	.word	0x08002db5
 8002cac:	08002db5 	.word	0x08002db5
 8002cb0:	08002db5 	.word	0x08002db5
 8002cb4:	08002d37 	.word	0x08002d37
 8002cb8:	08002d37 	.word	0x08002d37
 8002cbc:	08002d37 	.word	0x08002d37
 8002cc0:	08002d37 	.word	0x08002d37
 8002cc4:	08002db5 	.word	0x08002db5
 8002cc8:	08002db5 	.word	0x08002db5
 8002ccc:	08002db5 	.word	0x08002db5
 8002cd0:	08002db5 	.word	0x08002db5
 8002cd4:	08002db5 	.word	0x08002db5
 8002cd8:	08002db5 	.word	0x08002db5
 8002cdc:	08002db5 	.word	0x08002db5
 8002ce0:	08002db5 	.word	0x08002db5
 8002ce4:	08002db5 	.word	0x08002db5
 8002ce8:	08002db5 	.word	0x08002db5
 8002cec:	08002db5 	.word	0x08002db5
 8002cf0:	08002db5 	.word	0x08002db5
 8002cf4:	08002d37 	.word	0x08002d37
 8002cf8:	08002d37 	.word	0x08002d37
 8002cfc:	08002d37 	.word	0x08002d37
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d016      	beq.n	8002d36 <MotorController_setMode+0xe6>
 8002d08:	e054      	b.n	8002db4 <MotorController_setMode+0x164>
    case MODE_DISABLED:
      PowerStage_disable(&controller->powerstage);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	333c      	adds	r3, #60	; 0x3c
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fcd6 	bl	80046c0 <PowerStage_disable>
      break;
 8002d14:	e05c      	b.n	8002dd0 <MotorController_setMode+0x180>

    case MODE_IDLE:
      PowerStage_enable(&controller->powerstage);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	333c      	adds	r3, #60	; 0x3c
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fcea 	bl	80046f4 <PowerStage_enable>
      controller->error = ERROR_NO_ERROR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      break;
 8002d28:	e052      	b.n	8002dd0 <MotorController_setMode+0x180>

    case MODE_CALIBRATION:
      PowerStage_enable(&controller->powerstage);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	333c      	adds	r3, #60	; 0x3c
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fce0 	bl	80046f4 <PowerStage_enable>
      break;
 8002d34:	e04c      	b.n	8002dd0 <MotorController_setMode+0x180>
    case MODE_DEBUG:
    case MODE_VQD_OVERRIDE:
    case MODE_VALPHABETA_OVERRIDE:
    case MODE_VABC_OVERRIDE:
    case MODE_IQD_OVERRIDE:
      if (controller->mode != MODE_IDLE && controller->mode != mode) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d013      	beq.n	8002d68 <MotorController_setMode+0x118>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d00d      	beq.n	8002d68 <MotorController_setMode+0x118>
        PowerStage_disable(&controller->powerstage);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	333c      	adds	r3, #60	; 0x3c
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 fcb5 	bl	80046c0 <PowerStage_disable>
        controller->mode = MODE_DISABLED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
        controller->error = ERROR_INVALID_MODE_SWITCH;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        return;  // return directly, do not update mode
 8002d66:	e037      	b.n	8002dd8 <MotorController_setMode+0x188>
      }
      controller->current_controller.i_q_integrator = 0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
      controller->current_controller.i_d_integrator = 0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      controller->position_controller.position_setpoint = controller->position_controller.position_measured;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      controller->position_controller.position_integrator = 0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      controller->position_controller.velocity_integrator = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
      controller->position_controller.velocity_setpoint = controller->position_controller.velocity_measured;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
      PowerStage_enable(&controller->powerstage);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	333c      	adds	r3, #60	; 0x3c
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fca1 	bl	80046f4 <PowerStage_enable>
      break;
 8002db2:	e00d      	b.n	8002dd0 <MotorController_setMode+0x180>

    default:
      PowerStage_disable(&controller->powerstage);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	333c      	adds	r3, #60	; 0x3c
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 fc81 	bl	80046c0 <PowerStage_disable>
      controller->mode = MODE_DISABLED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
      controller->error = ERROR_INVALID_MODE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      return;  // return directly, do not update mode
 8002dce:	e003      	b.n	8002dd8 <MotorController_setMode+0x188>
  }
  controller->mode = mode;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
}
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop

08002de0 <MotorController_setFluxAngle>:

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dec:	edc7 0a01 	vstr	s1, [r7, #4]
  float theta = wrapTo2Pi(angle_setpoint);
 8002df0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002df4:	f7ff fdd8 	bl	80029a8 <wrapTo2Pi>
 8002df8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float sin_theta = sinf(theta);
 8002dfc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e00:	f00c faf0 	bl	800f3e4 <sinf>
 8002e04:	ed87 0a08 	vstr	s0, [r7, #32]
  float cos_theta = cosf(theta);
 8002e08:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e0c:	f00c fa54 	bl	800f2b8 <cosf>
 8002e10:	ed87 0a07 	vstr	s0, [r7, #28]
  float v_q = 0.0;
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  float v_d = voltage_setpoint;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	617b      	str	r3, [r7, #20]

  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8002e1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e22:	eeb1 7a67 	vneg.f32	s14, s15
 8002e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8002e44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e50:	edd7 6a08 	vldr	s13, [r7, #32]
 8002e54:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8002e66:	bf00      	nop
 8002e68:	3728      	adds	r7, #40	; 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <MotorController_loadConfig>:

void MotorController_loadConfig(MotorController *controller) {
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  EEPROMConfig *config = (EEPROMConfig *)FLASH_CONFIG_ADDRESS;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <MotorController_loadConfig+0x84>)
 8002e7a:	60fb      	str	r3, [r7, #12]

  controller->firmware_version                  = config->firmware_version;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  controller->device_id                         = config->device_id;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

  controller->encoder.cpr                       = abs(config->encoder_dir_cpr);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bfb8      	it	lt
 8002e9a:	425b      	neglt	r3, r3
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	819a      	strh	r2, [r3, #12]
  controller->encoder.direction                 = config->encoder_dir_cpr > 0 ? 1 : -1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dd01      	ble.n	8002eae <MotorController_loadConfig+0x3e>
 8002eaa:	2201      	movs	r2, #1
 8002eac:	e001      	b.n	8002eb2 <MotorController_loadConfig+0x42>
 8002eae:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	739a      	strb	r2, [r3, #14]
  controller->encoder.position_offset           = config->encoder_position_offset;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

  controller->powerstage.undervoltage_threshold = config->powerstage_undervoltage_threshold;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	649a      	str	r2, [r3, #72]	; 0x48
  controller->powerstage.overvoltage_threshold  = config->powerstage_overvoltage_threshold;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c

  controller->motor.pole_pairs                  = config->motor_pole_pairs;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	661a      	str	r2, [r3, #96]	; 0x60
  controller->motor.kv_rating                   = config->motor_kv_rating;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	665a      	str	r2, [r3, #100]	; 0x64
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	669a      	str	r2, [r3, #104]	; 0x68
//  controller->position_controller.torque_limit_lower    = config->position_controller_torque_limit_lower;
//  controller->position_controller.velocity_limit_upper  = config->position_controller_velocity_limit_upper;
//  controller->position_controller.velocity_limit_lower  = config->position_controller_velocity_limit_lower;
//  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
//  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	0801f800 	.word	0x0801f800

08002ef8 <MotorController_storeConfig>:

uint32_t MotorController_storeConfig(MotorController *controller) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0a4      	sub	sp, #144	; 0x90
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  EEPROMConfig config;

  config.firmware_version                     = controller->firmware_version;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002f06:	623b      	str	r3, [r7, #32]
  config.device_id                            = controller->device_id;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002f0e:	61fb      	str	r3, [r7, #28]

  config.encoder_dir_cpr                      = controller->encoder.direction * (int32_t)controller->encoder.cpr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	899b      	ldrh	r3, [r3, #12]
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  config.encoder_position_offset              = controller->encoder.position_offset;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f38:	63bb      	str	r3, [r7, #56]	; 0x38
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40

  config.current_controller_current_filter_alpha  = controller->current_controller.current_filter_alpha;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
  config.current_controller_i_q_kp            = controller->current_controller.i_q_kp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	64bb      	str	r3, [r7, #72]	; 0x48
  config.current_controller_i_q_ki            = controller->current_controller.i_q_ki;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  config.current_controller_i_d_kp            = controller->current_controller.i_d_kp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5c:	653b      	str	r3, [r7, #80]	; 0x50
  config.current_controller_i_d_ki            = controller->current_controller.i_d_ki;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	657b      	str	r3, [r7, #84]	; 0x54

  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  config.position_controller_velocity_kp      = controller->position_controller.velocity_kp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f7a:	663b      	str	r3, [r7, #96]	; 0x60
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f82:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_torque_limit       = controller->position_controller.torque_limit;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8a:	66bb      	str	r3, [r7, #104]	; 0x68
  config.position_controller_acceleration_limit       = controller->position_controller.acceleration_limit;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  config.position_controller_velocity_limit     = controller->position_controller.velocity_limit;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9a:	673b      	str	r3, [r7, #112]	; 0x70
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002fa2:	677b      	str	r3, [r7, #116]	; 0x74
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002faa:	67bb      	str	r3, [r7, #120]	; 0x78

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_error;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8002fac:	f004 fd70 	bl	8007a90 <HAL_FLASH_Unlock>

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8002fb8:	233f      	movs	r3, #63	; 0x3f
 8002fba:	617b      	str	r3, [r7, #20]
  erase_init_struct.NbPages = 1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8002fc0:	f107 0208 	add.w	r2, r7, #8
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 fe58 	bl	8007c80 <HAL_FLASHEx_Erase>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <MotorController_storeConfig+0xe6>
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
 8002fd6:	f004 fd97 	bl	8007b08 <HAL_FLASH_GetError>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	e02e      	b.n	800303c <MotorController_storeConfig+0x144>
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002fe4:	e023      	b.n	800302e <MotorController_storeConfig+0x136>
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 8002fe6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	f107 021c 	add.w	r2, r7, #28
 8002ff0:	4413      	add	r3, r2
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
 8002ffa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003004:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 800300a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800300e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003010:	2000      	movs	r0, #0
 8003012:	f004 fce7 	bl	80079e4 <HAL_FLASH_Program>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <MotorController_storeConfig+0x12c>
      return HAL_FLASH_GetError();
 800301c:	f004 fd74 	bl	8007b08 <HAL_FLASH_GetError>
 8003020:	4603      	mov	r3, r0
 8003022:	e00b      	b.n	800303c <MotorController_storeConfig+0x144>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8003024:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003028:	3301      	adds	r3, #1
 800302a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800302e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003032:	2b0b      	cmp	r3, #11
 8003034:	d9d7      	bls.n	8002fe6 <MotorController_storeConfig+0xee>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8003036:	f004 fd4d 	bl	8007ad4 <HAL_FLASH_Lock>

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3790      	adds	r7, #144	; 0x90
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <MotorController_updateCommutation>:

float MotorController_getPosition(MotorController *controller) {
  return controller->position_controller.position_measured;
}

void MotorController_updateCommutation(MotorController *controller, ADC_HandleTypeDef *hadc) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  float position_measured = Encoder_getRelativePosition(&controller->encoder);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fdd5 	bl	8001c00 <Encoder_getRelativePosition>
 8003056:	ed87 0a05 	vstr	s0, [r7, #20]

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003066:	edd7 7a05 	vldr	s15, [r7, #20]
 800306a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003078:	eeb0 0a67 	vmov.f32	s0, s15
 800307c:	f7ff fc94 	bl	80029a8 <wrapTo2Pi>
 8003080:	ed87 0a04 	vstr	s0, [r7, #16]
//  else {
//    cos_theta = cosf(theta);
//    sin_theta = sinf(theta);
//  }

  float sin_theta = sinf(theta);
 8003084:	ed97 0a04 	vldr	s0, [r7, #16]
 8003088:	f00c f9ac 	bl	800f3e4 <sinf>
 800308c:	ed87 0a03 	vstr	s0, [r7, #12]
  float cos_theta = cosf(theta);
 8003090:	ed97 0a04 	vldr	s0, [r7, #16]
 8003094:	f00c f910 	bl	800f2b8 <cosf>
 8003098:	ed87 0a02 	vstr	s0, [r7, #8]


  PowerStage_getPhaseCurrent(&controller->powerstage,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3388      	adds	r3, #136	; 0x88
 80030b2:	f001 fc31 	bl	8004918 <PowerStage_getPhaseCurrent>
    &controller->current_controller.i_a_measured,
    &controller->current_controller.i_b_measured,
    &controller->current_controller.i_c_measured);

  CurrentController_update(&controller->current_controller,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80030c8:	eeb0 1a67 	vmov.f32	s2, s15
 80030cc:	edd7 0a02 	vldr	s1, [r7, #8]
 80030d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7fe f9f7 	bl	80014c8 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d015      	beq.n	8003110 <MotorController_updateCommutation+0xcc>
    PowerStage_setBridgeOutput(&controller->powerstage,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 80030fc:	eeb0 1a66 	vmov.f32	s2, s13
 8003100:	eef0 0a47 	vmov.f32	s1, s14
 8003104:	eeb0 0a67 	vmov.f32	s0, s15
 8003108:	4610      	mov	r0, r2
 800310a:	f001 fb0d 	bl	8004728 <PowerStage_setBridgeOutput>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 800310e:	e00a      	b.n	8003126 <MotorController_updateCommutation+0xe2>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	333c      	adds	r3, #60	; 0x3c
 8003114:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8003130 <MotorController_updateCommutation+0xec>
 8003118:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003130 <MotorController_updateCommutation+0xec>
 800311c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003130 <MotorController_updateCommutation+0xec>
 8003120:	4618      	mov	r0, r3
 8003122:	f001 fb01 	bl	8004728 <PowerStage_setBridgeOutput>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	00000000 	.word	0x00000000

08003134 <MotorController_triggerPositionUpdate>:

void MotorController_triggerPositionUpdate(MotorController *controller) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_DISABLED
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <MotorController_triggerPositionUpdate+0x1c>
      || controller->mode == MODE_IDLE) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <MotorController_triggerPositionUpdate+0x28>
    PowerStage_disable(&controller->powerstage);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	333c      	adds	r3, #60	; 0x3c
 8003154:	4618      	mov	r0, r3
 8003156:	f001 fab3 	bl	80046c0 <PowerStage_disable>
 800315a:	e03a      	b.n	80031d2 <MotorController_triggerPositionUpdate+0x9e>
  }
  else if (controller->mode == MODE_CALIBRATION
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003162:	2b05      	cmp	r3, #5
 8003164:	d027      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_CURRENT
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800316c:	2b10      	cmp	r3, #16
 800316e:	d022      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_TORQUE
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003176:	2b11      	cmp	r3, #17
 8003178:	d01d      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_VELOCITY
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003180:	2b12      	cmp	r3, #18
 8003182:	d018      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_POSITION
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800318a:	2b13      	cmp	r3, #19
 800318c:	d013      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_VQD_OVERRIDE
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003194:	2b22      	cmp	r3, #34	; 0x22
 8003196:	d00e      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_VALPHABETA_OVERRIDE
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800319e:	2b21      	cmp	r3, #33	; 0x21
 80031a0:	d009      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_VABC_OVERRIDE
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d004      	beq.n	80031b6 <MotorController_triggerPositionUpdate+0x82>
      || controller->mode == MODE_IQD_OVERRIDE) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80031b2:	2b23      	cmp	r3, #35	; 0x23
 80031b4:	d105      	bne.n	80031c2 <MotorController_triggerPositionUpdate+0x8e>
    PowerStage_enable(&controller->powerstage);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	333c      	adds	r3, #60	; 0x3c
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 fa9a 	bl	80046f4 <PowerStage_enable>
 80031c0:	e007      	b.n	80031d2 <MotorController_triggerPositionUpdate+0x9e>
  }
  else {
    MotorController_setMode(controller, MODE_DISABLED);
 80031c2:	2100      	movs	r1, #0
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fd43 	bl	8002c50 <MotorController_setMode>
    controller->error = ERROR_INVALID_MODE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  }

  Encoder_triggerUpdate(&controller->encoder);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fbb5 	bl	8001944 <Encoder_triggerUpdate>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	0000      	movs	r0, r0
 80031e4:	0000      	movs	r0, r0
	...

080031e8 <MotorController_updatePositionReading>:

void MotorController_updatePositionReading(MotorController *controller) {
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  Encoder_update(&controller->encoder);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fbdc 	bl	80019b0 <Encoder_update>

  PowerStage_getBusVoltage(&controller->powerstage);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	333c      	adds	r3, #60	; 0x3c
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fb63 	bl	80048c8 <PowerStage_getBusVoltage>

  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fd0a 	bl	8001c1e <Encoder_getPosition>
 800320a:	eef0 7a40 	vmov.f32	s15, s0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fd10 	bl	8001c3c <Encoder_getVelocity>
 800321c:	eef0 7a40 	vmov.f32	s15, s0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104
  controller->position_controller.torque_measured = (8.3 * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f9b3 	bl	8000598 <__aeabi_f2d>
 8003232:	a313      	add	r3, pc, #76	; (adr r3, 8003280 <MotorController_updatePositionReading+0x98>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd fa06 	bl	8000648 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4614      	mov	r4, r2
 8003242:	461d      	mov	r5, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003250:	ee17 0a90 	vmov	r0, s15
 8003254:	f7fd f9a0 	bl	8000598 <__aeabi_f2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fd fb1c 	bl	800089c <__aeabi_ddiv>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fcc4 	bl	8000bf8 <__aeabi_d2f>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bdb0      	pop	{r4, r5, r7, pc}
 8003280:	9999999a 	.word	0x9999999a
 8003284:	40209999 	.word	0x40209999

08003288 <MotorController_updatePositionController>:

void MotorController_updatePositionController(MotorController *controller) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  PositionController_update(&controller->position_controller, controller->mode);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f001 f8e4 	bl	800446c <PositionController_update>

  if (controller->mode != MODE_CURRENT) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d022      	beq.n	80032f4 <MotorController_updatePositionController+0x6c>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	ee17 0a90 	vmov	r0, s15
 80032c8:	f7fd f966 	bl	8000598 <__aeabi_f2d>
 80032cc:	a30c      	add	r3, pc, #48	; (adr r3, 8003300 <MotorController_updatePositionController+0x78>)
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f7fd fae3 	bl	800089c <__aeabi_ddiv>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	f7fd fc8b 	bl	8000bf8 <__aeabi_d2f>
 80032e2:	4602      	mov	r2, r0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->current_controller.i_d_target = 0;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  }
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	f3af 8000 	nop.w
 8003300:	9999999a 	.word	0x9999999a
 8003304:	40209999 	.word	0x40209999

08003308 <MotorController_updateService>:

void MotorController_updateService(MotorController *controller) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_CALIBRATION) {
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003316:	2b05      	cmp	r3, #5
 8003318:	d103      	bne.n	8003322 <MotorController_updateService+0x1a>
    MotorController_runCalibrationSequence(controller);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f81c 	bl	8003358 <MotorController_runCalibrationSequence>
    return;
 8003320:	e014      	b.n	800334c <MotorController_updateService+0x44>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8003322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003326:	480b      	ldr	r0, [pc, #44]	; (8003354 <MotorController_updateService+0x4c>)
 8003328:	f004 ff50 	bl	80081cc <HAL_GPIO_ReadPin>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <MotorController_updateService+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8003332:	2201      	movs	r2, #1
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333a:	f004 ff5f 	bl	80081fc <HAL_GPIO_WritePin>
 800333e:	e005      	b.n	800334c <MotorController_updateService+0x44>
  }
  else {
    // red
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003348:	f004 ff58 	bl	80081fc <HAL_GPIO_WritePin>
  }
}
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	48000400 	.word	0x48000400

08003358 <MotorController_runCalibrationSequence>:

void MotorController_runCalibrationSequence(MotorController *controller) {
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b0ac      	sub	sp, #176	; 0xb0
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);    // green LED
 8003360:	2200      	movs	r2, #0
 8003362:	2110      	movs	r1, #16
 8003364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003368:	f004 ff48 	bl	80081fc <HAL_GPIO_WritePin>
  MotorController_setMode(controller, MODE_CALIBRATION);
 800336c:	2105      	movs	r1, #5
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fc6e 	bl	8002c50 <MotorController_setMode>

  // open loop calibration
  float flux_angle_setpoint = 0;
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float voltage_setpoint = 0.2;
 800337c:	4b7e      	ldr	r3, [pc, #504]	; (8003578 <MotorController_runCalibrationSequence+0x220>)
 800337e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003382:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8003386:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fd28 	bl	8002de0 <MotorController_setFluxAngle>
  HAL_Delay(100);
 8003390:	2064      	movs	r0, #100	; 0x64
 8003392:	f002 f849 	bl	8005428 <HAL_Delay>
  PowerStage_enable(&controller->powerstage);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	333c      	adds	r3, #60	; 0x3c
 800339a:	4618      	mov	r0, r3
 800339c:	f001 f9aa 	bl	80046f4 <PowerStage_enable>
  HAL_Delay(500);
 80033a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033a4:	f002 f840 	bl	8005428 <HAL_Delay>

  float phase_current = 0;
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  while (phase_current < CALIBRATION_CURRENT) {
 80033b0:	e07c      	b.n	80034ac <MotorController_runCalibrationSequence+0x154>
    HAL_Delay(100);
 80033b2:	2064      	movs	r0, #100	; 0x64
 80033b4:	f002 f838 	bl	8005428 <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80033b8:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80033bc:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fd0d 	bl	8002de0 <MotorController_setFluxAngle>

    voltage_setpoint += 0.1;
 80033c6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80033ca:	f7fd f8e5 	bl	8000598 <__aeabi_f2d>
 80033ce:	a364      	add	r3, pc, #400	; (adr r3, 8003560 <MotorController_runCalibrationSequence+0x208>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fc ff82 	bl	80002dc <__adddf3>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7fd fc0a 	bl	8000bf8 <__aeabi_d2f>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80033f0:	eef0 7ae7 	vabs.f32	s15, s15
 80033f4:	ee17 0a90 	vmov	r0, s15
 80033f8:	f7fd f8ce 	bl	8000598 <__aeabi_f2d>
 80033fc:	4604      	mov	r4, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003406:	eef0 7ae7 	vabs.f32	s15, s15
 800340a:	ee17 0a90 	vmov	r0, s15
 800340e:	f7fd f8c3 	bl	8000598 <__aeabi_f2d>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4620      	mov	r0, r4
 8003418:	4629      	mov	r1, r5
 800341a:	f7fc ff5f 	bl	80002dc <__adddf3>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4614      	mov	r4, r2
 8003424:	461d      	mov	r5, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800342c:	eef0 7ae7 	vabs.f32	s15, s15
 8003430:	ee17 0a90 	vmov	r0, s15
 8003434:	f7fd f8b0 	bl	8000598 <__aeabi_f2d>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4620      	mov	r0, r4
 800343e:	4629      	mov	r1, r5
 8003440:	f7fc ff4c 	bl	80002dc <__adddf3>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	a346      	add	r3, pc, #280	; (adr r3, 8003568 <MotorController_runCalibrationSequence+0x210>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f8f9 	bl	8000648 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f7fd fbcb 	bl	8000bf8 <__aeabi_d2f>
 8003462:	4603      	mov	r3, r0
 8003464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 8003468:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800346c:	f7fd f894 	bl	8000598 <__aeabi_f2d>
 8003470:	4604      	mov	r4, r0
 8003472:	460d      	mov	r5, r1
 8003474:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003478:	f7fd f88e 	bl	8000598 <__aeabi_f2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	f107 000c 	add.w	r0, r7, #12
 8003484:	e9cd 2300 	strd	r2, r3, [sp]
 8003488:	4622      	mov	r2, r4
 800348a:	462b      	mov	r3, r5
 800348c:	493b      	ldr	r1, [pc, #236]	; (800357c <MotorController_runCalibrationSequence+0x224>)
 800348e:	f009 fc99 	bl	800cdc4 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	4618      	mov	r0, r3
 8003498:	f7fc fec2 	bl	8000220 <strlen>
 800349c:	4603      	mov	r3, r0
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f107 010c 	add.w	r1, r7, #12
 80034a4:	230a      	movs	r3, #10
 80034a6:	4836      	ldr	r0, [pc, #216]	; (8003580 <MotorController_runCalibrationSequence+0x228>)
 80034a8:	f008 f9d5 	bl	800b856 <HAL_UART_Transmit>
  while (phase_current < CALIBRATION_CURRENT) {
 80034ac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80034b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80034b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	f53f af79 	bmi.w	80033b2 <MotorController_runCalibrationSequence+0x5a>
    }
  }

  HAL_Delay(500);
 80034c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034c4:	f001 ffb0 	bl	8005428 <HAL_Delay>

  float start_position = Encoder_getPosition(&controller->encoder);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fba7 	bl	8001c1e <Encoder_getPosition>
 80034d0:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80034da:	e02b      	b.n	8003534 <MotorController_runCalibrationSequence+0x1dc>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80034dc:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003584 <MotorController_runCalibrationSequence+0x22c>
 80034ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80034f0:	ee16 0a90 	vmov	r0, s13
 80034f4:	f7fd f850 	bl	8000598 <__aeabi_f2d>
 80034f8:	a31d      	add	r3, pc, #116	; (adr r3, 8003570 <MotorController_runCalibrationSequence+0x218>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fd f8a3 	bl	8000648 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd fb75 	bl	8000bf8 <__aeabi_d2f>
 800350e:	4603      	mov	r3, r0
 8003510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003514:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8003518:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fc5f 	bl	8002de0 <MotorController_setFluxAngle>
    HAL_Delay(2);
 8003522:	2002      	movs	r0, #2
 8003524:	f001 ff80 	bl	8005428 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 8003528:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800352c:	3301      	adds	r3, #1
 800352e:	b29b      	uxth	r3, r3
 8003530:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003534:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8003538:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800353c:	ddce      	ble.n	80034dc <MotorController_runCalibrationSequence+0x184>
  }
  HAL_Delay(500);
 800353e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003542:	f001 ff71 	bl	8005428 <HAL_Delay>

  float end_position = Encoder_getPosition(&controller->encoder);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fb68 	bl	8001c1e <Encoder_getPosition>
 800354e:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

  for (int16_t i=500; i>=0; i-=1) {
 8003552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003556:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800355a:	e041      	b.n	80035e0 <MotorController_runCalibrationSequence+0x288>
 800355c:	f3af 8000 	nop.w
 8003560:	9999999a 	.word	0x9999999a
 8003564:	3fb99999 	.word	0x3fb99999
 8003568:	55555555 	.word	0x55555555
 800356c:	3fd55555 	.word	0x3fd55555
 8003570:	54442d18 	.word	0x54442d18
 8003574:	401921fb 	.word	0x401921fb
 8003578:	3e4ccccd 	.word	0x3e4ccccd
 800357c:	0801008c 	.word	0x0801008c
 8003580:	20000700 	.word	0x20000700
 8003584:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003588:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003594:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003584 <MotorController_runCalibrationSequence+0x22c>
 8003598:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800359c:	ee16 0a90 	vmov	r0, s13
 80035a0:	f7fc fffa 	bl	8000598 <__aeabi_f2d>
 80035a4:	a39e      	add	r3, pc, #632	; (adr r3, 8003820 <MotorController_runCalibrationSequence+0x4c8>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f7fd f84d 	bl	8000648 <__aeabi_dmul>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4610      	mov	r0, r2
 80035b4:	4619      	mov	r1, r3
 80035b6:	f7fd fb1f 	bl	8000bf8 <__aeabi_d2f>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80035c0:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80035c4:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fc09 	bl	8002de0 <MotorController_setFluxAngle>
    HAL_Delay(2);
 80035ce:	2002      	movs	r0, #2
 80035d0:	f001 ff2a 	bl	8005428 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 80035d4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80035e0:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	dacf      	bge.n	8003588 <MotorController_runCalibrationSequence+0x230>
  }

  flux_angle_setpoint = 0;
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80035f0:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80035f4:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fbf1 	bl	8002de0 <MotorController_setFluxAngle>
  HAL_Delay(500);
 80035fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003602:	f001 ff11 	bl	8005428 <HAL_Delay>

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fb08 	bl	8001c1e <Encoder_getPosition>
 800360e:	ee10 3a10 	vmov	r3, s0
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ffc0 	bl	8000598 <__aeabi_f2d>
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	4b82      	ldr	r3, [pc, #520]	; (8003828 <MotorController_runCalibrationSequence+0x4d0>)
 800361e:	f7fd f813 	bl	8000648 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4614      	mov	r4, r2
 8003628:	461d      	mov	r5, r3
 800362a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800362e:	f7fc ffb3 	bl	8000598 <__aeabi_f2d>
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b7c      	ldr	r3, [pc, #496]	; (8003828 <MotorController_runCalibrationSequence+0x4d0>)
 8003638:	f7fd f806 	bl	8000648 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	f7fc fe4a 	bl	80002dc <__adddf3>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd fad2 	bl	8000bf8 <__aeabi_d2f>
 8003654:	4603      	mov	r3, r0
 8003656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Delay(500);
 800365a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800365e:	f001 fee3 	bl	8005428 <HAL_Delay>

  // release motor
  PowerStage_disable(&controller->powerstage);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	333c      	adds	r3, #60	; 0x3c
 8003666:	4618      	mov	r0, r3
 8003668:	f001 f82a 	bl	80046c0 <PowerStage_disable>

  float delta_position = end_position - start_position;
 800366c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003670:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003678:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 800367c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003680:	f7fc ff8a 	bl	8000598 <__aeabi_f2d>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	f107 000c 	add.w	r0, r7, #12
 800368c:	4967      	ldr	r1, [pc, #412]	; (800382c <MotorController_runCalibrationSequence+0x4d4>)
 800368e:	f009 fb99 	bl	800cdc4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fdc2 	bl	8000220 <strlen>
 800369c:	4603      	mov	r3, r0
 800369e:	b29a      	uxth	r2, r3
 80036a0:	f107 010c 	add.w	r1, r7, #12
 80036a4:	230a      	movs	r3, #10
 80036a6:	4862      	ldr	r0, [pc, #392]	; (8003830 <MotorController_runCalibrationSequence+0x4d8>)
 80036a8:	f008 f8d5 	bl	800b856 <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 80036ac:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80036b0:	f7fc ff72 	bl	8000598 <__aeabi_f2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	f107 000c 	add.w	r0, r7, #12
 80036bc:	495d      	ldr	r1, [pc, #372]	; (8003834 <MotorController_runCalibrationSequence+0x4dc>)
 80036be:	f009 fb81 	bl	800cdc4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc fdaa 	bl	8000220 <strlen>
 80036cc:	4603      	mov	r3, r0
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	f107 010c 	add.w	r1, r7, #12
 80036d4:	230a      	movs	r3, #10
 80036d6:	4856      	ldr	r0, [pc, #344]	; (8003830 <MotorController_runCalibrationSequence+0x4d8>)
 80036d8:	f008 f8bd 	bl	800b856 <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 80036dc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80036e0:	f7fc ff5a 	bl	8000598 <__aeabi_f2d>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	f107 000c 	add.w	r0, r7, #12
 80036ec:	4952      	ldr	r1, [pc, #328]	; (8003838 <MotorController_runCalibrationSequence+0x4e0>)
 80036ee:	f009 fb69 	bl	800cdc4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fd92 	bl	8000220 <strlen>
 80036fc:	4603      	mov	r3, r0
 80036fe:	b29a      	uxth	r2, r3
 8003700:	f107 010c 	add.w	r1, r7, #12
 8003704:	230a      	movs	r3, #10
 8003706:	484a      	ldr	r0, [pc, #296]	; (8003830 <MotorController_runCalibrationSequence+0x4d8>)
 8003708:	f008 f8a5 	bl	800b856 <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 800370c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003710:	eef0 7ae7 	vabs.f32	s15, s15
 8003714:	ee17 0a90 	vmov	r0, s15
 8003718:	f7fc ff3e 	bl	8000598 <__aeabi_f2d>
 800371c:	a33e      	add	r3, pc, #248	; (adr r3, 8003818 <MotorController_runCalibrationSequence+0x4c0>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fd fa03 	bl	8000b2c <__aeabi_dcmplt>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <MotorController_runCalibrationSequence+0x3e0>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 800372c:	230a      	movs	r3, #10
 800372e:	221b      	movs	r2, #27
 8003730:	4942      	ldr	r1, [pc, #264]	; (800383c <MotorController_runCalibrationSequence+0x4e4>)
 8003732:	483f      	ldr	r0, [pc, #252]	; (8003830 <MotorController_runCalibrationSequence+0x4d8>)
 8003734:	f008 f88f 	bl	800b856 <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 8003738:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800373c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003750:	ee17 0a90 	vmov	r0, s15
 8003754:	f7fc ff20 	bl	8000598 <__aeabi_f2d>
 8003758:	a331      	add	r3, pc, #196	; (adr r3, 8003820 <MotorController_runCalibrationSequence+0x4c8>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fc fdbb 	bl	80002d8 <__aeabi_dsub>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	f7fd fa45 	bl	8000bf8 <__aeabi_d2f>
 800376e:	ee07 0a90 	vmov	s15, r0
 8003772:	eef0 7ae7 	vabs.f32	s15, s15
 8003776:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800377a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	dd05      	ble.n	8003790 <MotorController_runCalibrationSequence+0x438>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 8003784:	230a      	movs	r3, #10
 8003786:	2221      	movs	r2, #33	; 0x21
 8003788:	492d      	ldr	r1, [pc, #180]	; (8003840 <MotorController_runCalibrationSequence+0x4e8>)
 800378a:	4829      	ldr	r0, [pc, #164]	; (8003830 <MotorController_runCalibrationSequence+0x4d8>)
 800378c:	f008 f863 	bl	800b856 <HAL_UART_Transmit>
  }


  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800379c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	eeb0 0a67 	vmov.f32	s0, s15
 80037a8:	f7ff f8fe 	bl	80029a8 <wrapTo2Pi>
 80037ac:	eef0 7a40 	vmov.f32	s15, s0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc feec 	bl	8000598 <__aeabi_f2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	f107 000c 	add.w	r0, r7, #12
 80037c8:	491e      	ldr	r1, [pc, #120]	; (8003844 <MotorController_runCalibrationSequence+0x4ec>)
 80037ca:	f009 fafb 	bl	800cdc4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80037ce:	f107 030c 	add.w	r3, r7, #12
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fd24 	bl	8000220 <strlen>
 80037d8:	4603      	mov	r3, r0
 80037da:	b29a      	uxth	r2, r3
 80037dc:	f107 010c 	add.w	r1, r7, #12
 80037e0:	230a      	movs	r3, #10
 80037e2:	4813      	ldr	r0, [pc, #76]	; (8003830 <MotorController_runCalibrationSequence+0x4d8>)
 80037e4:	f008 f837 	bl	800b856 <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fb85 	bl	8002ef8 <MotorController_storeConfig>

  HAL_Delay(1000);
 80037ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037f2:	f001 fe19 	bl	8005428 <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 80037f6:	2101      	movs	r1, #1
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fa29 	bl	8002c50 <MotorController_setMode>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);    // green LED
 80037fe:	2201      	movs	r2, #1
 8003800:	2110      	movs	r1, #16
 8003802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003806:	f004 fcf9 	bl	80081fc <HAL_GPIO_WritePin>
}
 800380a:	bf00      	nop
 800380c:	37a8      	adds	r7, #168	; 0xa8
 800380e:	46bd      	mov	sp, r7
 8003810:	bdb0      	pop	{r4, r5, r7, pc}
 8003812:	bf00      	nop
 8003814:	f3af 8000 	nop.w
 8003818:	9999999a 	.word	0x9999999a
 800381c:	3fb99999 	.word	0x3fb99999
 8003820:	54442d18 	.word	0x54442d18
 8003824:	401921fb 	.word	0x401921fb
 8003828:	3fe00000 	.word	0x3fe00000
 800382c:	080100ac 	.word	0x080100ac
 8003830:	20000700 	.word	0x20000700
 8003834:	080100c8 	.word	0x080100c8
 8003838:	080100e0 	.word	0x080100e0
 800383c:	080100f4 	.word	0x080100f4
 8003840:	08010110 	.word	0x08010110
 8003844:	08010134 	.word	0x08010134

08003848 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint16_t device_id = (rx_frame->id) & 0b1111;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	83fb      	strh	r3, [r7, #30]
  if (device_id && device_id != controller->device_id) {
 800385e:	8bfb      	ldrh	r3, [r7, #30]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <MotorController_handleCANMessage+0x2c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800386a:	b29b      	uxth	r3, r3
 800386c:	8bfa      	ldrh	r2, [r7, #30]
 800386e:	429a      	cmp	r2, r3
 8003870:	f040 858e 	bne.w	8004390 <MotorController_handleCANMessage+0xb48>
    return;
  }

  uint16_t func_id = (rx_frame->id) >> 4;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	83bb      	strh	r3, [r7, #28]
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	795b      	ldrb	r3, [r3, #5]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <MotorController_handleCANMessage+0x44>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	88db      	ldrh	r3, [r3, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <MotorController_handleCANMessage+0x48>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <MotorController_handleCANMessage+0x4a>
 8003890:	2300      	movs	r3, #0
 8003892:	76fb      	strb	r3, [r7, #27]

  if (is_get_request) {
 8003894:	7efb      	ldrb	r3, [r7, #27]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8375 	beq.w	8003f86 <MotorController_handleCANMessage+0x73e>
    CAN_Frame tx_frame;

    tx_frame.id = rx_frame->id;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60bb      	str	r3, [r7, #8]
    tx_frame.id_type = CAN_ID_STANDARD;
 80038a2:	2300      	movs	r3, #0
 80038a4:	733b      	strb	r3, [r7, #12]
    tx_frame.frame_type = CAN_FRAME_DATA;
 80038a6:	2301      	movs	r3, #1
 80038a8:	737b      	strb	r3, [r7, #13]
    tx_frame.size = 8;
 80038aa:	2308      	movs	r3, #8
 80038ac:	81fb      	strh	r3, [r7, #14]

    switch (func_id) {
 80038ae:	8bbb      	ldrh	r3, [r7, #28]
 80038b0:	2b7f      	cmp	r3, #127	; 0x7f
 80038b2:	f200 8361 	bhi.w	8003f78 <MotorController_handleCANMessage+0x730>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <MotorController_handleCANMessage+0x74>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	08003abd 	.word	0x08003abd
 80038c0:	08003acf 	.word	0x08003acf
 80038c4:	08003add 	.word	0x08003add
 80038c8:	08003aed 	.word	0x08003aed
 80038cc:	08003f79 	.word	0x08003f79
 80038d0:	08003f79 	.word	0x08003f79
 80038d4:	08003b09 	.word	0x08003b09
 80038d8:	08003f79 	.word	0x08003f79
 80038dc:	08003f79 	.word	0x08003f79
 80038e0:	08003f79 	.word	0x08003f79
 80038e4:	08003f79 	.word	0x08003f79
 80038e8:	08003f79 	.word	0x08003f79
 80038ec:	08003f79 	.word	0x08003f79
 80038f0:	08003f79 	.word	0x08003f79
 80038f4:	08003f79 	.word	0x08003f79
 80038f8:	08003f79 	.word	0x08003f79
 80038fc:	08003b19 	.word	0x08003b19
 8003900:	08003f79 	.word	0x08003f79
 8003904:	08003b39 	.word	0x08003b39
 8003908:	08003b4b 	.word	0x08003b4b
 800390c:	08003b67 	.word	0x08003b67
 8003910:	08003f79 	.word	0x08003f79
 8003914:	08003b79 	.word	0x08003b79
 8003918:	08003b8b 	.word	0x08003b8b
 800391c:	08003f79 	.word	0x08003f79
 8003920:	08003f79 	.word	0x08003f79
 8003924:	08003f79 	.word	0x08003f79
 8003928:	08003f79 	.word	0x08003f79
 800392c:	08003f79 	.word	0x08003f79
 8003930:	08003f79 	.word	0x08003f79
 8003934:	08003f79 	.word	0x08003f79
 8003938:	08003f79 	.word	0x08003f79
 800393c:	08003b9d 	.word	0x08003b9d
 8003940:	08003bbd 	.word	0x08003bbd
 8003944:	08003bf1 	.word	0x08003bf1
 8003948:	08003c25 	.word	0x08003c25
 800394c:	08003f79 	.word	0x08003f79
 8003950:	08003f79 	.word	0x08003f79
 8003954:	08003f79 	.word	0x08003f79
 8003958:	08003f79 	.word	0x08003f79
 800395c:	08003f79 	.word	0x08003f79
 8003960:	08003f79 	.word	0x08003f79
 8003964:	08003f79 	.word	0x08003f79
 8003968:	08003f79 	.word	0x08003f79
 800396c:	08003f79 	.word	0x08003f79
 8003970:	08003f79 	.word	0x08003f79
 8003974:	08003f79 	.word	0x08003f79
 8003978:	08003f79 	.word	0x08003f79
 800397c:	08003c37 	.word	0x08003c37
 8003980:	08003c49 	.word	0x08003c49
 8003984:	08003c5b 	.word	0x08003c5b
 8003988:	08003f79 	.word	0x08003f79
 800398c:	08003f79 	.word	0x08003f79
 8003990:	08003f79 	.word	0x08003f79
 8003994:	08003f79 	.word	0x08003f79
 8003998:	08003f79 	.word	0x08003f79
 800399c:	08003f79 	.word	0x08003f79
 80039a0:	08003f79 	.word	0x08003f79
 80039a4:	08003f79 	.word	0x08003f79
 80039a8:	08003f79 	.word	0x08003f79
 80039ac:	08003f79 	.word	0x08003f79
 80039b0:	08003f79 	.word	0x08003f79
 80039b4:	08003f79 	.word	0x08003f79
 80039b8:	08003f79 	.word	0x08003f79
 80039bc:	08003c6d 	.word	0x08003c6d
 80039c0:	08003c7f 	.word	0x08003c7f
 80039c4:	08003c9f 	.word	0x08003c9f
 80039c8:	08003f79 	.word	0x08003f79
 80039cc:	08003cbf 	.word	0x08003cbf
 80039d0:	08003ce3 	.word	0x08003ce3
 80039d4:	08003cf9 	.word	0x08003cf9
 80039d8:	08003d1d 	.word	0x08003d1d
 80039dc:	08003d31 	.word	0x08003d31
 80039e0:	08003f79 	.word	0x08003f79
 80039e4:	08003d55 	.word	0x08003d55
 80039e8:	08003f79 	.word	0x08003f79
 80039ec:	08003d79 	.word	0x08003d79
 80039f0:	08003d9d 	.word	0x08003d9d
 80039f4:	08003dc1 	.word	0x08003dc1
 80039f8:	08003de5 	.word	0x08003de5
 80039fc:	08003e09 	.word	0x08003e09
 8003a00:	08003f79 	.word	0x08003f79
 8003a04:	08003f79 	.word	0x08003f79
 8003a08:	08003f79 	.word	0x08003f79
 8003a0c:	08003f79 	.word	0x08003f79
 8003a10:	08003f79 	.word	0x08003f79
 8003a14:	08003f79 	.word	0x08003f79
 8003a18:	08003f79 	.word	0x08003f79
 8003a1c:	08003f79 	.word	0x08003f79
 8003a20:	08003f79 	.word	0x08003f79
 8003a24:	08003f79 	.word	0x08003f79
 8003a28:	08003f79 	.word	0x08003f79
 8003a2c:	08003f79 	.word	0x08003f79
 8003a30:	08003f79 	.word	0x08003f79
 8003a34:	08003f79 	.word	0x08003f79
 8003a38:	08003f79 	.word	0x08003f79
 8003a3c:	08003e2d 	.word	0x08003e2d
 8003a40:	08003e51 	.word	0x08003e51
 8003a44:	08003e75 	.word	0x08003e75
 8003a48:	08003e99 	.word	0x08003e99
 8003a4c:	08003ead 	.word	0x08003ead
 8003a50:	08003ed1 	.word	0x08003ed1
 8003a54:	08003ef5 	.word	0x08003ef5
 8003a58:	08003f09 	.word	0x08003f09
 8003a5c:	08003f2d 	.word	0x08003f2d
 8003a60:	08003f41 	.word	0x08003f41
 8003a64:	08003f65 	.word	0x08003f65
 8003a68:	08003f79 	.word	0x08003f79
 8003a6c:	08003f79 	.word	0x08003f79
 8003a70:	08003f79 	.word	0x08003f79
 8003a74:	08003f79 	.word	0x08003f79
 8003a78:	08003f79 	.word	0x08003f79
 8003a7c:	08003f79 	.word	0x08003f79
 8003a80:	08003f79 	.word	0x08003f79
 8003a84:	08003f79 	.word	0x08003f79
 8003a88:	08003f79 	.word	0x08003f79
 8003a8c:	08003f79 	.word	0x08003f79
 8003a90:	08003f79 	.word	0x08003f79
 8003a94:	08003f79 	.word	0x08003f79
 8003a98:	08003f79 	.word	0x08003f79
 8003a9c:	08003f79 	.word	0x08003f79
 8003aa0:	08003f79 	.word	0x08003f79
 8003aa4:	08003f79 	.word	0x08003f79
 8003aa8:	08003f79 	.word	0x08003f79
 8003aac:	08003f79 	.word	0x08003f79
 8003ab0:	08003f79 	.word	0x08003f79
 8003ab4:	08003f79 	.word	0x08003f79
 8003ab8:	08003afb 	.word	0x08003afb
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 8003abc:	2100      	movs	r1, #0
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff f8c6 	bl	8002c50 <MotorController_setMode>
        tx_frame.size = 1;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8003ac8:	23ac      	movs	r3, #172	; 0xac
 8003aca:	743b      	strb	r3, [r7, #16]
        break;
 8003acc:	e254      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ID:
        tx_frame.size = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8003ad8:	743b      	strb	r3, [r7, #16]
        break;
 8003ada:	e24d      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_VERSION:
        tx_frame.size = 1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	743b      	strb	r3, [r7, #16]
        break;
 8003aea:	e245      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_SAFETY:
        tx_frame.size = 1;
 8003aec:	2301      	movs	r3, #1
 8003aee:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->error;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003af6:	743b      	strb	r3, [r7, #16]
        break;
 8003af8:	e23e      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_PING:
        tx_frame.size = 1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8003b04:	743b      	strb	r3, [r7, #16]
        break;
 8003b06:	e237      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_MODE:
        tx_frame.size = 1;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = MotorController_getMode(controller);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff f891 	bl	8002c34 <MotorController_getMode>
 8003b12:	4603      	mov	r3, r0
 8003b14:	743b      	strb	r3, [r7, #16]
        break;
 8003b16:	e22f      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ENCODER_CPR:
        tx_frame.size = 4;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	81fb      	strh	r3, [r7, #14]
        *((int32_t *)tx_frame.data) = controller->encoder.direction * (int32_t)controller->encoder.cpr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	899b      	ldrh	r3, [r3, #12]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	3308      	adds	r3, #8
 8003b30:	fb01 f202 	mul.w	r2, r1, r2
 8003b34:	601a      	str	r2, [r3, #0]
        break;
 8003b36:	e21f      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        tx_frame.size = 4;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_offset;
 8003b3c:	f107 0308 	add.w	r3, r7, #8
 8003b40:	3308      	adds	r3, #8
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6912      	ldr	r2, [r2, #16]
 8003b46:	601a      	str	r2, [r3, #0]
        break;
 8003b48:	e216      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ENCODER_N_ROTATIONS:
        tx_frame.size = 4;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	3308      	adds	r3, #8
 8003b58:	ee07 2a90 	vmov	s15, r2
 8003b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b60:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003b64:	e208      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ENCODER_POSITION_RELATIVE:
        tx_frame.size = 4;
 8003b66:	2304      	movs	r3, #4
 8003b68:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_relative;
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	3308      	adds	r3, #8
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b74:	601a      	str	r2, [r3, #0]
        break;
 8003b76:	e1ff      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ENCODER_POSITION:
        tx_frame.size = 4;
 8003b78:	2304      	movs	r3, #4
 8003b7a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position;
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	3308      	adds	r3, #8
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b86:	601a      	str	r2, [r3, #0]
        break;
 8003b88:	e1f6      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_ENCODER_VELOCITY:
        tx_frame.size = 4;
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity;
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	3308      	adds	r3, #8
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b98:	601a      	str	r2, [r3, #0]
        break;
 8003b9a:	e1ed      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        tx_frame.size = 8;
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003baa:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8003bac:	f107 0308 	add.w	r3, r7, #8
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bb8:	601a      	str	r2, [r3, #0]
        break;
 8003bba:	e1dd      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POWERSTAGE_ADC_READING_RAW_A_B_C:
        tx_frame.size = 6;
 8003bbc:	2306      	movs	r3, #6
 8003bbe:	81fb      	strh	r3, [r7, #14]
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8003bc0:	f107 0308 	add.w	r3, r7, #8
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003bcc:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_raw[1];
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	f8b2 2052 	ldrh.w	r2, [r2, #82]	; 0x52
 8003bdc:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	3308      	adds	r3, #8
 8003be4:	3304      	adds	r3, #4
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8003bec:	801a      	strh	r2, [r3, #0]
        break;
 8003bee:	e1c3      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POWERSTAGE_ADC_READING_OFFSET_A_B_C:
        tx_frame.size = 6;
 8003bf0:	2306      	movs	r3, #6
 8003bf2:	81fb      	strh	r3, [r7, #14]
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8003bf4:	f107 0308 	add.w	r3, r7, #8
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8003c00:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	3308      	adds	r3, #8
 8003c08:	3302      	adds	r3, #2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	f9b2 2058 	ldrsh.w	r2, [r2, #88]	; 0x58
 8003c10:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	3308      	adds	r3, #8
 8003c18:	3304      	adds	r3, #4
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	f9b2 205a 	ldrsh.w	r2, [r2, #90]	; 0x5a
 8003c20:	801a      	strh	r2, [r3, #0]
        break;
 8003c22:	e1a9      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POWERSTAGE_BUS_VOLTAGE:
        tx_frame.size = 4;
 8003c24:	2304      	movs	r3, #4
 8003c26:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8003c28:	f107 0308 	add.w	r3, r7, #8
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c32:	601a      	str	r2, [r3, #0]
        break;
 8003c34:	e1a0      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_MOTOR_POLE_PAIRS:
        tx_frame.size = 4;
 8003c36:	2304      	movs	r3, #4
 8003c38:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	3308      	adds	r3, #8
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003c44:	601a      	str	r2, [r3, #0]
        break;
 8003c46:	e197      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_MOTOR_KV_RATING:
        tx_frame.size = 4;
 8003c48:	2304      	movs	r3, #4
 8003c4a:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	3308      	adds	r3, #8
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003c56:	601a      	str	r2, [r3, #0]
        break;
 8003c58:	e18e      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_MOTOR_FLUX_ANGLE_OFFSET:
        tx_frame.size = 4;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	3308      	adds	r3, #8
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c68:	601a      	str	r2, [r3, #0]
        break;
 8003c6a:	e185      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        tx_frame.size = 4;
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.current_filter_alpha;
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	3308      	adds	r3, #8
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c7a:	601a      	str	r2, [r3, #0]
        break;
 8003c7c:	e17c      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        tx_frame.size = 8;
 8003c7e:	2308      	movs	r3, #8
 8003c80:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_kp;
 8003c82:	f107 0308 	add.w	r3, r7, #8
 8003c86:	3308      	adds	r3, #8
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c8c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_ki;
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	3308      	adds	r3, #8
 8003c94:	3304      	adds	r3, #4
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c9a:	601a      	str	r2, [r3, #0]
        break;
 8003c9c:	e16c      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        tx_frame.size = 8;
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_kp;
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003cac:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_ki;
 8003cae:	f107 0308 	add.w	r3, r7, #8
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003cba:	601a      	str	r2, [r3, #0]
        break;
 8003cbc:	e15c      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_A_I_B_MEASURED:
        tx_frame.size = 8;
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_a_measured;
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003cce:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003cde:	601a      	str	r2, [r3, #0]
        break;
 8003ce0:	e14a      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_C_MEASURED:
        tx_frame.size = 4;
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	3308      	adds	r3, #8
 8003cec:	3304      	adds	r3, #4
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003cf4:	601a      	str	r2, [r3, #0]
        break;
 8003cf6:	e13f      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        tx_frame.size = 8;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8003cfc:	f107 0308 	add.w	r3, r7, #8
 8003d00:	3308      	adds	r3, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003d08:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	3308      	adds	r3, #8
 8003d10:	3304      	adds	r3, #4
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d18:	601a      	str	r2, [r3, #0]
        break;
 8003d1a:	e12d      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        tx_frame.size = 4;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	3308      	adds	r3, #8
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003d2c:	601a      	str	r2, [r3, #0]
        break;
 8003d2e:	e123      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_ALPHA_I_BETA_MEASURED:
        tx_frame.size = 8;
 8003d30:	2308      	movs	r3, #8
 8003d32:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_alpha_measured;
 8003d34:	f107 0308 	add.w	r3, r7, #8
 8003d38:	3308      	adds	r3, #8
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8003d40:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	3308      	adds	r3, #8
 8003d48:	3304      	adds	r3, #4
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003d50:	601a      	str	r2, [r3, #0]
        break;
 8003d52:	e111      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        tx_frame.size = 8;
 8003d54:	2308      	movs	r3, #8
 8003d56:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003d64:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8003d66:	f107 0308 	add.w	r3, r7, #8
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8003d74:	601a      	str	r2, [r3, #0]
        break;
 8003d76:	e0ff      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        tx_frame.size = 8;
 8003d78:	2308      	movs	r3, #8
 8003d7a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	3308      	adds	r3, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8003d88:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	3308      	adds	r3, #8
 8003d90:	3304      	adds	r3, #4
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003d98:	601a      	str	r2, [r3, #0]
        break;
 8003d9a:	e0ed      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_MEASURED:
        tx_frame.size = 8;
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_measured;
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	3308      	adds	r3, #8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8003dac:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	3308      	adds	r3, #8
 8003db4:	3304      	adds	r3, #4
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8003dbc:	601a      	str	r2, [r3, #0]
        break;
 8003dbe:	e0db      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_TARGET:
        tx_frame.size = 8;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8003dc4:	f107 0308 	add.w	r3, r7, #8
 8003dc8:	3308      	adds	r3, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8003dd0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_target;
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	3304      	adds	r3, #4
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8003de0:	601a      	str	r2, [r3, #0]
        break;
 8003de2:	e0c9      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        tx_frame.size = 8;
 8003de4:	2308      	movs	r3, #8
 8003de6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	3308      	adds	r3, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8003df4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8003df6:	f107 0308 	add.w	r3, r7, #8
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 8003e04:	601a      	str	r2, [r3, #0]
        break;
 8003e06:	e0b7      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_INTEGRATOR:
        tx_frame.size = 8;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8003e0c:	f107 0308 	add.w	r3, r7, #8
 8003e10:	3308      	adds	r3, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003e18:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	3308      	adds	r3, #8
 8003e20:	3304      	adds	r3, #4
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003e28:	601a      	str	r2, [r3, #0]
        break;
 8003e2a:	e0a5      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_POSITION_KP_KI:
        tx_frame.size = 8;
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	3308      	adds	r3, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 8003e3c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8003e3e:	f107 0308 	add.w	r3, r7, #8
 8003e42:	3308      	adds	r3, #8
 8003e44:	3304      	adds	r3, #4
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8003e4c:	601a      	str	r2, [r3, #0]
        break;
 8003e4e:	e093      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_KP_KI:
        tx_frame.size = 8;
 8003e50:	2308      	movs	r3, #8
 8003e52:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_kp;
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	3308      	adds	r3, #8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8003e60:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_ki;
 8003e62:	f107 0308 	add.w	r3, r7, #8
 8003e66:	3308      	adds	r3, #8
 8003e68:	3304      	adds	r3, #4
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8003e70:	601a      	str	r2, [r3, #0]
        break;
 8003e72:	e081      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        tx_frame.size = 8;
 8003e74:	2308      	movs	r3, #8
 8003e76:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_limit;
 8003e78:	f107 0308 	add.w	r3, r7, #8
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8003e84:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.acceleration_limit;
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8003e94:	601a      	str	r2, [r3, #0]
        break;
 8003e96:	e06f      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        tx_frame.size = 8;
 8003e98:	2308      	movs	r3, #8
 8003e9a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_limit;
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 8003ea8:	601a      	str	r2, [r3, #0]
        break;
 8003eaa:	e065      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        tx_frame.size = 8;
 8003eac:	2308      	movs	r3, #8
 8003eae:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8003ebc:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8003ecc:	601a      	str	r2, [r3, #0]
        break;
 8003ece:	e053      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        tx_frame.size = 8;
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8003ed4:	f107 0308 	add.w	r3, r7, #8
 8003ed8:	3308      	adds	r3, #8
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 8003ee0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	3304      	adds	r3, #4
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8003ef0:	601a      	str	r2, [r3, #0]
        break;
 8003ef2:	e041      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_SETPOINT:
        tx_frame.size = 4;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	3308      	adds	r3, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 8003f04:	601a      	str	r2, [r3, #0]
        break;
 8003f06:	e037      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        tx_frame.size = 8;
 8003f08:	2308      	movs	r3, #8
 8003f0a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	3308      	adds	r3, #8
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8003f18:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	3308      	adds	r3, #8
 8003f20:	3304      	adds	r3, #4
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8003f28:	601a      	str	r2, [r3, #0]
        break;
 8003f2a:	e025      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_SETPOINT:
        tx_frame.size = 4;
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	3308      	adds	r3, #8
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8003f3c:	601a      	str	r2, [r3, #0]
        break;
 8003f3e:	e01b      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        tx_frame.size = 8;
 8003f40:	2308      	movs	r3, #8
 8003f42:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	3308      	adds	r3, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8003f50:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	3308      	adds	r3, #8
 8003f58:	3304      	adds	r3, #4
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8003f60:	601a      	str	r2, [r3, #0]
        break;
 8003f62:	e009      	b.n	8003f78 <MotorController_handleCANMessage+0x730>
      case CAN_ID_POSITION_CONTROLLER_POSITION_SETPOINT:
        tx_frame.size = 4;
 8003f64:	2304      	movs	r3, #4
 8003f66:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8003f74:	601a      	str	r2, [r3, #0]
        break;
 8003f76:	bf00      	nop
    }
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	48ca      	ldr	r0, [pc, #808]	; (80042a8 <MotorController_handleCANMessage+0xa60>)
 8003f80:	f7fd f9dc 	bl	800133c <CAN_putTxFrame>
 8003f84:	e205      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
  }
  else {
    switch (func_id) {
 8003f86:	8bbb      	ldrh	r3, [r7, #28]
 8003f88:	2b7e      	cmp	r3, #126	; 0x7e
 8003f8a:	f200 8202 	bhi.w	8004392 <MotorController_handleCANMessage+0xb4a>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <MotorController_handleCANMessage+0x74c>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08004191 	.word	0x08004191
 8003f98:	0800419b 	.word	0x0800419b
 8003f9c:	08004393 	.word	0x08004393
 8003fa0:	08004393 	.word	0x08004393
 8003fa4:	080041a7 	.word	0x080041a7
 8003fa8:	08004393 	.word	0x08004393
 8003fac:	080041c9 	.word	0x080041c9
 8003fb0:	08004393 	.word	0x08004393
 8003fb4:	08004393 	.word	0x08004393
 8003fb8:	08004393 	.word	0x08004393
 8003fbc:	08004393 	.word	0x08004393
 8003fc0:	08004393 	.word	0x08004393
 8003fc4:	08004393 	.word	0x08004393
 8003fc8:	08004393 	.word	0x08004393
 8003fcc:	08004393 	.word	0x08004393
 8003fd0:	08004393 	.word	0x08004393
 8003fd4:	080041d7 	.word	0x080041d7
 8003fd8:	08004393 	.word	0x08004393
 8003fdc:	08004201 	.word	0x08004201
 8003fe0:	08004393 	.word	0x08004393
 8003fe4:	08004393 	.word	0x08004393
 8003fe8:	08004393 	.word	0x08004393
 8003fec:	08004393 	.word	0x08004393
 8003ff0:	08004393 	.word	0x08004393
 8003ff4:	08004393 	.word	0x08004393
 8003ff8:	08004393 	.word	0x08004393
 8003ffc:	08004393 	.word	0x08004393
 8004000:	08004393 	.word	0x08004393
 8004004:	08004393 	.word	0x08004393
 8004008:	08004393 	.word	0x08004393
 800400c:	08004393 	.word	0x08004393
 8004010:	08004393 	.word	0x08004393
 8004014:	0800420d 	.word	0x0800420d
 8004018:	08004393 	.word	0x08004393
 800401c:	08004393 	.word	0x08004393
 8004020:	08004393 	.word	0x08004393
 8004024:	08004393 	.word	0x08004393
 8004028:	08004393 	.word	0x08004393
 800402c:	08004393 	.word	0x08004393
 8004030:	08004393 	.word	0x08004393
 8004034:	08004393 	.word	0x08004393
 8004038:	08004393 	.word	0x08004393
 800403c:	08004393 	.word	0x08004393
 8004040:	08004393 	.word	0x08004393
 8004044:	08004393 	.word	0x08004393
 8004048:	08004393 	.word	0x08004393
 800404c:	08004393 	.word	0x08004393
 8004050:	08004393 	.word	0x08004393
 8004054:	08004393 	.word	0x08004393
 8004058:	08004393 	.word	0x08004393
 800405c:	08004393 	.word	0x08004393
 8004060:	08004393 	.word	0x08004393
 8004064:	08004393 	.word	0x08004393
 8004068:	08004393 	.word	0x08004393
 800406c:	08004393 	.word	0x08004393
 8004070:	08004393 	.word	0x08004393
 8004074:	08004393 	.word	0x08004393
 8004078:	08004393 	.word	0x08004393
 800407c:	08004393 	.word	0x08004393
 8004080:	08004393 	.word	0x08004393
 8004084:	08004393 	.word	0x08004393
 8004088:	08004393 	.word	0x08004393
 800408c:	08004393 	.word	0x08004393
 8004090:	08004393 	.word	0x08004393
 8004094:	08004225 	.word	0x08004225
 8004098:	08004231 	.word	0x08004231
 800409c:	08004249 	.word	0x08004249
 80040a0:	08004393 	.word	0x08004393
 80040a4:	08004393 	.word	0x08004393
 80040a8:	08004393 	.word	0x08004393
 80040ac:	08004261 	.word	0x08004261
 80040b0:	0800427d 	.word	0x0800427d
 80040b4:	08004393 	.word	0x08004393
 80040b8:	08004393 	.word	0x08004393
 80040bc:	0800428b 	.word	0x0800428b
 80040c0:	08004393 	.word	0x08004393
 80040c4:	080042b1 	.word	0x080042b1
 80040c8:	08004393 	.word	0x08004393
 80040cc:	08004393 	.word	0x08004393
 80040d0:	080042cd 	.word	0x080042cd
 80040d4:	08004393 	.word	0x08004393
 80040d8:	08004393 	.word	0x08004393
 80040dc:	08004393 	.word	0x08004393
 80040e0:	08004393 	.word	0x08004393
 80040e4:	08004393 	.word	0x08004393
 80040e8:	08004393 	.word	0x08004393
 80040ec:	08004393 	.word	0x08004393
 80040f0:	08004393 	.word	0x08004393
 80040f4:	08004393 	.word	0x08004393
 80040f8:	08004393 	.word	0x08004393
 80040fc:	08004393 	.word	0x08004393
 8004100:	08004393 	.word	0x08004393
 8004104:	08004393 	.word	0x08004393
 8004108:	08004393 	.word	0x08004393
 800410c:	08004393 	.word	0x08004393
 8004110:	08004393 	.word	0x08004393
 8004114:	080042e9 	.word	0x080042e9
 8004118:	08004305 	.word	0x08004305
 800411c:	08004321 	.word	0x08004321
 8004120:	0800433d 	.word	0x0800433d
 8004124:	0800434b 	.word	0x0800434b
 8004128:	08004367 	.word	0x08004367
 800412c:	08004393 	.word	0x08004393
 8004130:	08004375 	.word	0x08004375
 8004134:	08004393 	.word	0x08004393
 8004138:	08004383 	.word	0x08004383
 800413c:	08004393 	.word	0x08004393
 8004140:	08004393 	.word	0x08004393
 8004144:	08004393 	.word	0x08004393
 8004148:	08004393 	.word	0x08004393
 800414c:	08004393 	.word	0x08004393
 8004150:	08004393 	.word	0x08004393
 8004154:	08004393 	.word	0x08004393
 8004158:	08004393 	.word	0x08004393
 800415c:	08004393 	.word	0x08004393
 8004160:	08004393 	.word	0x08004393
 8004164:	08004393 	.word	0x08004393
 8004168:	08004393 	.word	0x08004393
 800416c:	08004393 	.word	0x08004393
 8004170:	08004393 	.word	0x08004393
 8004174:	08004393 	.word	0x08004393
 8004178:	08004393 	.word	0x08004393
 800417c:	08004393 	.word	0x08004393
 8004180:	08004393 	.word	0x08004393
 8004184:	08004393 	.word	0x08004393
 8004188:	08004393 	.word	0x08004393
 800418c:	080041bf 	.word	0x080041bf
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 8004190:	2100      	movs	r1, #0
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fe fd5c 	bl	8002c50 <MotorController_setMode>
        break;
 8004198:	e0fb      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_ID:
        controller->device_id = *((uint8_t *)rx_frame->data);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	7a1a      	ldrb	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        break;
 80041a4:	e0f5      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_FLASH:
        if (*((uint8_t *)rx_frame->data)) {
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7a1b      	ldrb	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <MotorController_handleCANMessage+0x96e>
          MotorController_storeConfig(controller);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fe fea2 	bl	8002ef8 <MotorController_storeConfig>
        }
        else {
          MotorController_loadConfig(controller);
        }
        break;
 80041b4:	e0ed      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
          MotorController_loadConfig(controller);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fe5a 	bl	8002e70 <MotorController_loadConfig>
        break;
 80041bc:	e0e9      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_HEARTBEAT:
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <MotorController_handleCANMessage+0xa64>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80041c6:	e0e4      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_MODE:
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	7a1b      	ldrb	r3, [r3, #8]
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe fd3e 	bl	8002c50 <MotorController_setMode>
        break;
 80041d4:	e0dd      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_ENCODER_CPR:
        controller->encoder.cpr = abs(*((int32_t *)rx_frame->data));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bfb8      	it	lt
 80041e0:	425b      	neglt	r3, r3
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	819a      	strh	r2, [r3, #12]
        controller->encoder.direction = *((int32_t *)rx_frame->data) > 0 ? 1 : -1;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	3308      	adds	r3, #8
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	dd01      	ble.n	80041f6 <MotorController_handleCANMessage+0x9ae>
 80041f2:	2201      	movs	r2, #1
 80041f4:	e001      	b.n	80041fa <MotorController_handleCANMessage+0x9b2>
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	739a      	strb	r2, [r3, #14]
        break;
 80041fe:	e0c8      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        controller->encoder.position_offset = *((float *)rx_frame->data);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	3308      	adds	r3, #8
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	611a      	str	r2, [r3, #16]
        break;
 800420a:	e0c2      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	649a      	str	r2, [r3, #72]	; 0x48
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	3304      	adds	r3, #4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004222:	e0b6      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        controller->current_controller.current_filter_alpha = *((float *)rx_frame->data);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800422e:	e0b0      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        controller->current_controller.i_q_kp = *((float *)rx_frame->data);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	671a      	str	r2, [r3, #112]	; 0x70
        controller->current_controller.i_q_ki = *((float *)rx_frame->data + 1);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	3304      	adds	r3, #4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004246:	e0a4      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        controller->current_controller.i_d_kp = *((float *)rx_frame->data);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	679a      	str	r2, [r3, #120]	; 0x78
        controller->current_controller.i_d_ki = *((float *)rx_frame->data + 1);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	3304      	adds	r3, #4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800425e:	e098      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        controller->current_controller.v_a_setpoint = *((float *)rx_frame->data);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        controller->current_controller.v_b_setpoint = *((float *)rx_frame->data + 1);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	3304      	adds	r3, #4
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800427a:	e08a      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        controller->current_controller.v_c_setpoint = *((float *)rx_frame->data);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004288:	e083      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        controller->current_controller.v_alpha_setpoint = *((float *)rx_frame->data);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->current_controller.v_beta_setpoint = *((float *)rx_frame->data + 1);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	3304      	adds	r3, #4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80042a4:	e075      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
 80042a6:	bf00      	nop
 80042a8:	20000454 	.word	0x20000454
 80042ac:	2000061c 	.word	0x2000061c
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        controller->current_controller.v_q_setpoint = *((float *)rx_frame->data);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        controller->current_controller.v_d_setpoint = *((float *)rx_frame->data + 1);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	3304      	adds	r3, #4
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80042ca:	e062      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        controller->current_controller.i_q_setpoint = *((float *)rx_frame->data);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        controller->current_controller.i_d_setpoint = *((float *)rx_frame->data + 1);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	3304      	adds	r3, #4
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80042e6:	e054      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_POSITION_KP_KI:
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	3304      	adds	r3, #4
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        break;
 8004302:	e046      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_KP_KI:
        controller->position_controller.velocity_kp = *((float *)rx_frame->data);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        controller->position_controller.velocity_ki = *((float *)rx_frame->data + 1);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	3304      	adds	r3, #4
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        break;
 800431e:	e038      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        controller->position_controller.torque_limit = *((float *)rx_frame->data);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        controller->position_controller.acceleration_limit= *((float *)rx_frame->data + 1);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	3304      	adds	r3, #4
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        break;
 800433a:	e02a      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        controller->position_controller.velocity_limit = *((float *)rx_frame->data);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	3308      	adds	r3, #8
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        break;
 8004348:	e023      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	3304      	adds	r3, #4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        break;
 8004364:	e015      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        break;
 8004372:	e00e      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        break;
 8004380:	e007      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        break;
 800438e:	e000      	b.n	8004392 <MotorController_handleCANMessage+0xb4a>
    return;
 8004390:	bf00      	nop
    }
  }
}
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	ed87 0a03 	vstr	s0, [r7, #12]
 80043a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80043a6:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 80043aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80043ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80043b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	dd01      	ble.n	80043c0 <clampf+0x28>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	e00b      	b.n	80043d8 <clampf+0x40>
 80043c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80043c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	d501      	bpl.n	80043d6 <clampf+0x3e>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	e000      	b.n	80043d8 <clampf+0x40>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	ee07 3a90 	vmov	s15, r3
}
 80043dc:	eeb0 0a67 	vmov.f32	s0, s15
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  controller->position_kp = 10;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a17      	ldr	r2, [pc, #92]	; (8004454 <PositionController_init+0x68>)
 80043f8:	601a      	str	r2, [r3, #0]
  controller->position_ki = 0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
  controller->velocity_kp = 0.001;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <PositionController_init+0x6c>)
 8004406:	609a      	str	r2, [r3, #8]
  controller->velocity_ki = 0.000003;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <PositionController_init+0x70>)
 800440c:	60da      	str	r2, [r3, #12]

  controller->torque_limit = 0.01;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <PositionController_init+0x74>)
 8004412:	611a      	str	r2, [r3, #16]

  controller->velocity_limit = 100;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <PositionController_init+0x78>)
 8004418:	619a      	str	r2, [r3, #24]

  controller->position_limit_lower = -INFINITY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a12      	ldr	r2, [pc, #72]	; (8004468 <PositionController_init+0x7c>)
 800441e:	621a      	str	r2, [r3, #32]
  controller->position_limit_upper = INFINITY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8004426:	61da      	str	r2, [r3, #28]

  controller->velocity_setpoint = 0;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
  controller->position_setpoint = 0;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	649a      	str	r2, [r3, #72]	; 0x48

  controller->position_integrator = 0;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	64da      	str	r2, [r3, #76]	; 0x4c
  controller->velocity_integrator = 0;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	41200000 	.word	0x41200000
 8004458:	3a83126f 	.word	0x3a83126f
 800445c:	3649539c 	.word	0x3649539c
 8004460:	3c23d70a 	.word	0x3c23d70a
 8004464:	42c80000 	.word	0x42c80000
 8004468:	ff800000 	.word	0xff800000

0800446c <PositionController_update>:

void PositionController_update(PositionController *controller, Mode mode) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  float position_setpoint = controller->position_target;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	61fb      	str	r3, [r7, #28]
  position_setpoint = clampf(
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	edd3 7a08 	vldr	s15, [r3, #32]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	ed93 7a07 	vldr	s14, [r3, #28]
 800448a:	eeb0 1a47 	vmov.f32	s2, s14
 800448e:	eef0 0a67 	vmov.f32	s1, s15
 8004492:	ed97 0a07 	vldr	s0, [r7, #28]
 8004496:	f7ff ff7f 	bl	8004398 <clampf>
 800449a:	ed87 0a07 	vstr	s0, [r7, #28]
      position_setpoint,
      controller->position_limit_lower,
      controller->position_limit_upper);

  controller->position_setpoint = position_setpoint;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	649a      	str	r2, [r3, #72]	; 0x48

  float position_error = controller->position_setpoint - controller->position_measured;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80044b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b4:	edc7 7a06 	vstr	s15, [r7, #24]

  float velocity_setpoint = controller->position_kp * position_error + controller->velocity_target;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	ed93 7a00 	vldr	s14, [r3]
 80044be:	edd7 7a06 	vldr	s15, [r7, #24]
 80044c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80044cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d0:	edc7 7a05 	vstr	s15, [r7, #20]

  velocity_setpoint = clampf(
      velocity_setpoint,
      -controller->velocity_limit,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	edd3 7a06 	vldr	s15, [r3, #24]
  velocity_setpoint = clampf(
 80044da:	eef1 7a67 	vneg.f32	s15, s15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80044e4:	eeb0 1a47 	vmov.f32	s2, s14
 80044e8:	eef0 0a67 	vmov.f32	s1, s15
 80044ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80044f0:	f7ff ff52 	bl	8004398 <clampf>
 80044f4:	ed87 0a05 	vstr	s0, [r7, #20]
      controller->velocity_limit);
  controller->velocity_setpoint = velocity_setpoint;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38

  float velocity_error = controller->velocity_setpoint - controller->velocity_measured;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800450a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450e:	edc7 7a04 	vstr	s15, [r7, #16]

  controller->velocity_integrator += controller->velocity_ki * velocity_error;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	edd3 6a03 	vldr	s13, [r3, #12]
 800451e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
  controller->velocity_integrator = clampf(
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
      controller->velocity_integrator,
      -2 * controller->velocity_limit,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	edd3 7a06 	vldr	s15, [r3, #24]
  controller->velocity_integrator = clampf(
 800453c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8004540:	ee67 6aa6 	vmul.f32	s13, s15, s13
      2 * controller->velocity_limit);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	edd3 7a06 	vldr	s15, [r3, #24]
  controller->velocity_integrator = clampf(
 800454a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800454e:	eeb0 1a67 	vmov.f32	s2, s15
 8004552:	eef0 0a66 	vmov.f32	s1, s13
 8004556:	eeb0 0a47 	vmov.f32	s0, s14
 800455a:	f7ff ff1d 	bl	8004398 <clampf>
 800455e:	eef0 7a40 	vmov.f32	s15, s0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  if (mode != MODE_TORQUE) {
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	2b11      	cmp	r3, #17
 800456c:	d028      	beq.n	80045c0 <PositionController_update+0x154>
    float torque_setpoint = controller->velocity_kp * velocity_error + controller->velocity_integrator + controller->torque_target;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	ed93 7a02 	vldr	s14, [r3, #8]
 8004574:	edd7 7a04 	vldr	s15, [r7, #16]
 8004578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004582:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800458c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004590:	edc7 7a03 	vstr	s15, [r7, #12]
    torque_setpoint = clampf(
        torque_setpoint,
        -controller->torque_limit,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	edd3 7a04 	vldr	s15, [r3, #16]
    torque_setpoint = clampf(
 800459a:	eef1 7a67 	vneg.f32	s15, s15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80045a4:	eeb0 1a47 	vmov.f32	s2, s14
 80045a8:	eef0 0a67 	vmov.f32	s1, s15
 80045ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80045b0:	f7ff fef2 	bl	8004398 <clampf>
 80045b4:	ed87 0a03 	vstr	s0, [r7, #12]
        controller->torque_limit);

    controller->torque_setpoint = torque_setpoint;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else {
    controller->torque_setpoint = controller->torque_target;
  }
}
 80045be:	e003      	b.n	80045c8 <PositionController_update+0x15c>
    controller->torque_setpoint = controller->torque_target;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <clampf>:
static inline float clampf(float value, float min, float max) {
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80045da:	edc7 0a02 	vstr	s1, [r7, #8]
 80045de:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 80045e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80045e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	dd01      	ble.n	80045f8 <clampf+0x28>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	e00b      	b.n	8004610 <clampf+0x40>
 80045f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80045fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004608:	d501      	bpl.n	800460e <clampf+0x3e>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	e000      	b.n	8004610 <clampf+0x40>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	ee07 3a90 	vmov	s15, r3
}
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <PowerStage_init>:
 *      Author: TK
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  powerstage->htim = htim;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	601a      	str	r2, [r3, #0]
  powerstage->hadc1 = hadc1;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]
  powerstage->hadc2 = hadc2;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	609a      	str	r2, [r3, #8]

  powerstage->bus_voltage_measured = 12.;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <PowerStage_init+0x34>)
 8004648:	621a      	str	r2, [r3, #32]

  PowerStage_disable(powerstage);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f838 	bl	80046c0 <PowerStage_disable>
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	41400000 	.word	0x41400000

0800465c <PowerStage_start>:

void PowerStage_start(PowerStage *powerstage) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(powerstage->htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f005 fc99 	bl	8009fa0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f005 fd5f 	bl	800a138 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f006 fe57 	bl	800b334 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2104      	movs	r1, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f005 fd53 	bl	800a138 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2104      	movs	r1, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f006 fe4b 	bl	800b334 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2108      	movs	r1, #8
 80046a4:	4618      	mov	r0, r3
 80046a6:	f005 fd47 	bl	800a138 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2108      	movs	r1, #8
 80046b0:	4618      	mov	r0, r3
 80046b2:	f006 fe3f 	bl	800b334 <HAL_TIMEx_PWMN_Start>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <PowerStage_disable>:

uint8_t PowerStage_isEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disable(PowerStage *powerstage) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80046c8:	2200      	movs	r2, #0
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	4808      	ldr	r0, [pc, #32]	; (80046f0 <PowerStage_disable+0x30>)
 80046ce:	f003 fd95 	bl	80081fc <HAL_GPIO_WritePin>
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	48000400 	.word	0x48000400

080046f4 <PowerStage_enable>:

void PowerStage_enable(PowerStage *powerstage) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8004710:	2201      	movs	r2, #1
 8004712:	2180      	movs	r1, #128	; 0x80
 8004714:	4803      	ldr	r0, [pc, #12]	; (8004724 <PowerStage_enable+0x30>)
 8004716:	f003 fd71 	bl	80081fc <HAL_GPIO_WritePin>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	48000400 	.word	0x48000400

08004728 <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	ed87 0a02 	vstr	s0, [r7, #8]
 8004734:	edc7 0a01 	vstr	s1, [r7, #4]
 8004738:	ed87 1a00 	vstr	s2, [r7]
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004742:	edd7 6a02 	vldr	s13, [r7, #8]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800474e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004752:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475a:	edc7 7a02 	vstr	s15, [r7, #8]
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	ed93 7a08 	vldr	s14, [r3, #32]
 8004764:	edd7 6a01 	vldr	s13, [r7, #4]
 8004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004774:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477c:	edc7 7a01 	vstr	s15, [r7, #4]
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	ed93 7a08 	vldr	s14, [r3, #32]
 8004786:	edd7 6a00 	vldr	s13, [r7]
 800478a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800478e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004796:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800479a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800479e:	edc7 7a00 	vstr	s15, [r7]

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 80047a2:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004870 <PowerStage_setBridgeOutput+0x148>
 80047a6:	eddf 0a33 	vldr	s1, [pc, #204]	; 8004874 <PowerStage_setBridgeOutput+0x14c>
 80047aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80047ae:	f7ff ff0f 	bl	80045d0 <clampf>
 80047b2:	ed87 0a02 	vstr	s0, [r7, #8]
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
 80047b6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8004870 <PowerStage_setBridgeOutput+0x148>
 80047ba:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8004874 <PowerStage_setBridgeOutput+0x14c>
 80047be:	ed97 0a01 	vldr	s0, [r7, #4]
 80047c2:	f7ff ff05 	bl	80045d0 <clampf>
 80047c6:	ed87 0a01 	vstr	s0, [r7, #4]
  v_c = clampf(v_c, 0.02f, 0.98f);
 80047ca:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8004870 <PowerStage_setBridgeOutput+0x148>
 80047ce:	eddf 0a29 	vldr	s1, [pc, #164]	; 8004874 <PowerStage_setBridgeOutput+0x14c>
 80047d2:	ed97 0a00 	vldr	s0, [r7]
 80047d6:	f7ff fefb 	bl	80045d0 <clampf>
 80047da:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	3301      	adds	r3, #1
 80047e8:	ee07 3a90 	vmov	s15, r3
 80047ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80047f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fc:	ee17 3a90 	vmov	r3, s15
 8004800:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	3301      	adds	r3, #1
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004814:	edd7 7a01 	vldr	s15, [r7, #4]
 8004818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004820:	ee17 3a90 	vmov	r3, s15
 8004824:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	3301      	adds	r3, #1
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004838:	edd7 7a00 	vldr	s15, [r7]
 800483c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004844:	ee17 3a90 	vmov	r3, s15
 8004848:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	8afa      	ldrh	r2, [r7, #22]
 8004852:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	8aba      	ldrh	r2, [r7, #20]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	8a7a      	ldrh	r2, [r7, #18]
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	3f7ae148 	.word	0x3f7ae148
 8004874:	3ca3d70a 	.word	0x3ca3d70a

08004878 <PowerStage_calibratePhaseCurrentOffset>:


void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  powerstage->adc_reading_offset[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2109      	movs	r1, #9
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fab8 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 800488c:	4603      	mov	r3, r0
 800488e:	b21a      	sxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	835a      	strh	r2, [r3, #26]
  powerstage->adc_reading_offset[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2109      	movs	r1, #9
 800489a:	4618      	mov	r0, r3
 800489c:	f001 faae 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 80048a0:	4603      	mov	r3, r0
 80048a2:	b21a      	sxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	839a      	strh	r2, [r3, #28]
  powerstage->adc_reading_offset[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f240 110f 	movw	r1, #271	; 0x10f
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 faa3 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 80048b6:	4603      	mov	r3, r0
 80048b8:	b21a      	sxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	83da      	strh	r2, [r3, #30]

}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <PowerStage_getBusVoltage>:

void PowerStage_getBusVoltage(PowerStage *powerstage) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  powerstage->bus_voltage_measured = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f240 110f 	movw	r1, #271	; 0x10f
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 fa8f 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 80048de:	4603      	mov	r3, r0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fe37 	bl	8000554 <__aeabi_ui2d>
 80048e6:	a30a      	add	r3, pc, #40	; (adr r3, 8004910 <PowerStage_getBusVoltage+0x48>)
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f7fb feac 	bl	8000648 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	f7fc f97e 	bl	8000bf8 <__aeabi_d2f>
 80048fc:	4602      	mov	r2, r0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w
 8004910:	99999999 	.word	0x99999999
 8004914:	3f92f999 	.word	0x3f92f999

08004918 <PowerStage_getPhaseCurrent>:

void PowerStage_getPhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2109      	movs	r1, #9
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fa65 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 8004932:	4603      	mov	r3, r0
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	829a      	strh	r2, [r3, #20]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2109      	movs	r1, #9
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fa5b 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 8004946:	4603      	mov	r3, r0
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	82da      	strh	r2, [r3, #22]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f240 110f 	movw	r1, #271	; 0x10f
 8004956:	4618      	mov	r0, r3
 8004958:	f001 fa50 	bl	8005dfc <HAL_ADCEx_InjectedGetValue>
 800495c:	4603      	mov	r3, r0
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	831a      	strh	r2, [r3, #24]

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8a9b      	ldrh	r3, [r3, #20]
 8004968:	461a      	mov	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	eef1 7a67 	vneg.f32	s15, s15
 800497e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049e4 <PowerStage_getPhaseCurrent+0xcc>
 8004982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	edc3 7a00 	vstr	s15, [r3]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8adb      	ldrh	r3, [r3, #22]
 8004990:	461a      	mov	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a2:	eef1 7a67 	vneg.f32	s15, s15
 80049a6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80049e4 <PowerStage_getPhaseCurrent+0xcc>
 80049aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	edc3 7a00 	vstr	s15, [r3]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8b1b      	ldrh	r3, [r3, #24]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ca:	eef1 7a67 	vneg.f32	s15, s15
 80049ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80049e4 <PowerStage_getPhaseCurrent+0xcc>
 80049d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	edc3 7a00 	vstr	s15, [r3]
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	3c898000 	.word	0x3c898000

080049e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_MspInit+0x44>)
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_MspInit+0x44>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6613      	str	r3, [r2, #96]	; 0x60
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_MspInit+0x44>)
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_MspInit+0x44>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <HAL_MspInit+0x44>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6593      	str	r3, [r2, #88]	; 0x58
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_MspInit+0x44>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000

08004a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b09c      	sub	sp, #112	; 0x70
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a48:	f107 0318 	add.w	r3, r7, #24
 8004a4c:	2244      	movs	r2, #68	; 0x44
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f007 fd45 	bl	800c4e0 <memset>
  if(hadc->Instance==ADC1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5e:	d157      	bne.n	8004b10 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004a6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a6c:	f107 0318 	add.w	r3, r7, #24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f004 fab5 	bl	8008fe0 <HAL_RCCEx_PeriphCLKConfig>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004a7c:	f7fd ff78 	bl	8002970 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_ADC_MspInit+0x13c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <HAL_ADC_MspInit+0x13c>)
 8004a88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a8a:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <HAL_ADC_MspInit+0x13c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10b      	bne.n	8004aaa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004a92:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	4a36      	ldr	r2, [pc, #216]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004a98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a9e:	4b34      	ldr	r3, [pc, #208]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac2:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ada:	2301      	movs	r3, #1
 8004adc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004aea:	4619      	mov	r1, r3
 8004aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004af0:	f003 f9ea 	bl	8007ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8004af4:	f241 0302 	movw	r3, #4098	; 0x1002
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004afa:	2303      	movs	r3, #3
 8004afc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b06:	4619      	mov	r1, r3
 8004b08:	481a      	ldr	r0, [pc, #104]	; (8004b74 <HAL_ADC_MspInit+0x144>)
 8004b0a:	f003 f9dd 	bl	8007ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004b0e:	e029      	b.n	8004b64 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_ADC_MspInit+0x148>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d124      	bne.n	8004b64 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004b20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b24:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b26:	f107 0318 	add.w	r3, r7, #24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f004 fa58 	bl	8008fe0 <HAL_RCCEx_PeriphCLKConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_ADC_MspInit+0x10a>
      Error_Handler();
 8004b36:	f7fd ff1b 	bl	8002970 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_ADC_MspInit+0x13c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <HAL_ADC_MspInit+0x13c>)
 8004b42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_ADC_MspInit+0x13c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10b      	bne.n	8004b64 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	4a07      	ldr	r2, [pc, #28]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_ADC_MspInit+0x140>)
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	bf00      	nop
 8004b66:	3770      	adds	r7, #112	; 0x70
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000790 	.word	0x20000790
 8004b70:	40021000 	.word	0x40021000
 8004b74:	48000400 	.word	0x48000400
 8004b78:	50000100 	.word	0x50000100

08004b7c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <HAL_CORDIC_MspInit+0x38>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_CORDIC_MspInit+0x3c>)
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_CORDIC_MspInit+0x3c>)
 8004b94:	f043 0308 	orr.w	r3, r3, #8
 8004b98:	6493      	str	r3, [r2, #72]	; 0x48
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_CORDIC_MspInit+0x3c>)
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40020c00 	.word	0x40020c00
 8004bb8:	40021000 	.word	0x40021000

08004bbc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b09a      	sub	sp, #104	; 0x68
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bd4:	f107 0310 	add.w	r3, r7, #16
 8004bd8:	2244      	movs	r2, #68	; 0x44
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f007 fc7f 	bl	800c4e0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <HAL_FDCAN_MspInit+0xcc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d149      	bne.n	8004c80 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bf8:	f107 0310 	add.w	r3, r7, #16
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f004 f9ef 	bl	8008fe0 <HAL_RCCEx_PeriphCLKConfig>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004c08:	f7fd feb2 	bl	8002970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_FDCAN_MspInit+0xd0>)
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c10:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <HAL_FDCAN_MspInit+0xd0>)
 8004c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c16:	6593      	str	r3, [r2, #88]	; 0x58
 8004c18:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <HAL_FDCAN_MspInit+0xd0>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_FDCAN_MspInit+0xd0>)
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_FDCAN_MspInit+0xd0>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c30:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_FDCAN_MspInit+0xd0>)
 8004c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004c3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c40:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004c4e:	2309      	movs	r3, #9
 8004c50:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c5c:	f003 f934 	bl	8007ec8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2104      	movs	r1, #4
 8004c64:	2015      	movs	r0, #21
 8004c66:	f001 ffce 	bl	8006c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004c6a:	2015      	movs	r0, #21
 8004c6c:	f001 ffe5 	bl	8006c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8004c70:	2200      	movs	r2, #0
 8004c72:	2104      	movs	r1, #4
 8004c74:	2016      	movs	r0, #22
 8004c76:	f001 ffc6 	bl	8006c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004c7a:	2016      	movs	r0, #22
 8004c7c:	f001 ffdd 	bl	8006c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004c80:	bf00      	nop
 8004c82:	3768      	adds	r7, #104	; 0x68
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40006400 	.word	0x40006400
 8004c8c:	40021000 	.word	0x40021000

08004c90 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	60da      	str	r2, [r3, #12]
 8004ca6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2e      	ldr	r2, [pc, #184]	; (8004d68 <HAL_OPAMP_MspInit+0xd8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d119      	bne.n	8004ce6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	4a2d      	ldr	r2, [pc, #180]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004cca:	230a      	movs	r3, #10
 8004ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd6:	f107 0314 	add.w	r3, r7, #20
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ce0:	f003 f8f2 	bl	8007ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004ce4:	e03b      	b.n	8004d5e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <HAL_OPAMP_MspInit+0xe0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d119      	bne.n	8004d24 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004d08:	23a0      	movs	r3, #160	; 0xa0
 8004d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d1e:	f003 f8d3 	bl	8007ec8 <HAL_GPIO_Init>
}
 8004d22:	e01c      	b.n	8004d5e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <HAL_OPAMP_MspInit+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d117      	bne.n	8004d5e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <HAL_OPAMP_MspInit+0xdc>)
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004d46:	2305      	movs	r3, #5
 8004d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d52:	f107 0314 	add.w	r3, r7, #20
 8004d56:	4619      	mov	r1, r3
 8004d58:	4807      	ldr	r0, [pc, #28]	; (8004d78 <HAL_OPAMP_MspInit+0xe8>)
 8004d5a:	f003 f8b5 	bl	8007ec8 <HAL_GPIO_Init>
}
 8004d5e:	bf00      	nop
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40010300 	.word	0x40010300
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40010304 	.word	0x40010304
 8004d74:	40010308 	.word	0x40010308
 8004d78:	48000400 	.word	0x48000400

08004d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_SPI_MspInit+0x8c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d12f      	bne.n	8004dfe <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_SPI_MspInit+0x90>)
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <HAL_SPI_MspInit+0x90>)
 8004da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004da8:	6613      	str	r3, [r2, #96]	; 0x60
 8004daa:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_SPI_MspInit+0x90>)
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_SPI_MspInit+0x90>)
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_SPI_MspInit+0x90>)
 8004dbc:	f043 0302 	orr.w	r3, r3, #2
 8004dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_SPI_MspInit+0x90>)
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004dce:	2338      	movs	r3, #56	; 0x38
 8004dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004dde:	2305      	movs	r3, #5
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de2:	f107 0314 	add.w	r3, r7, #20
 8004de6:	4619      	mov	r1, r3
 8004de8:	4809      	ldr	r0, [pc, #36]	; (8004e10 <HAL_SPI_MspInit+0x94>)
 8004dea:	f003 f86d 	bl	8007ec8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2102      	movs	r1, #2
 8004df2:	2023      	movs	r0, #35	; 0x23
 8004df4:	f001 ff07 	bl	8006c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004df8:	2023      	movs	r0, #35	; 0x23
 8004dfa:	f001 ff1e 	bl	8006c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004dfe:	bf00      	nop
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40013000 	.word	0x40013000
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	48000400 	.word	0x48000400

08004e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <HAL_TIM_Base_MspInit+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d114      	bne.n	8004e50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e26:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e30:	6613      	str	r3, [r2, #96]	; 0x60
 8004e32:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2101      	movs	r1, #1
 8004e42:	2019      	movs	r0, #25
 8004e44:	f001 fedf 	bl	8006c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e48:	2019      	movs	r0, #25
 8004e4a:	f001 fef6 	bl	8006c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004e4e:	e044      	b.n	8004eda <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d114      	bne.n	8004e84 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	6593      	str	r3, [r2, #88]	; 0x58
 8004e66:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e72:	2200      	movs	r2, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	201c      	movs	r0, #28
 8004e78:	f001 fec5 	bl	8006c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e7c:	201c      	movs	r0, #28
 8004e7e:	f001 fedc 	bl	8006c3a <HAL_NVIC_EnableIRQ>
}
 8004e82:	e02a      	b.n	8004eda <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_TIM_Base_MspInit+0xd8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d114      	bne.n	8004eb8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	201e      	movs	r0, #30
 8004eac:	f001 feab 	bl	8006c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004eb0:	201e      	movs	r0, #30
 8004eb2:	f001 fec2 	bl	8006c3a <HAL_NVIC_EnableIRQ>
}
 8004eb6:	e010      	b.n	8004eda <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <HAL_TIM_Base_MspInit+0xdc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10b      	bne.n	8004eda <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004ec8:	f043 0310 	orr.w	r3, r3, #16
 8004ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_TIM_Base_MspInit+0xd4>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40001000 	.word	0x40001000

08004ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <HAL_TIM_MspPostInit+0xc4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d14b      	bne.n	8004fae <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f16:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <HAL_TIM_MspPostInit+0xc8>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	4a28      	ldr	r2, [pc, #160]	; (8004fbc <HAL_TIM_MspPostInit+0xc8>)
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <HAL_TIM_MspPostInit+0xc8>)
 8004f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_TIM_MspPostInit+0xc8>)
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <HAL_TIM_MspPostInit+0xc8>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_TIM_MspPostInit+0xc8>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004f46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004f58:	2306      	movs	r3, #6
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	4619      	mov	r1, r3
 8004f62:	4817      	ldr	r0, [pc, #92]	; (8004fc0 <HAL_TIM_MspPostInit+0xcc>)
 8004f64:	f002 ffb0 	bl	8007ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7e:	f107 0314 	add.w	r3, r7, #20
 8004f82:	4619      	mov	r1, r3
 8004f84:	480e      	ldr	r0, [pc, #56]	; (8004fc0 <HAL_TIM_MspPostInit+0xcc>)
 8004f86:	f002 ff9f 	bl	8007ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004f8a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	2302      	movs	r3, #2
 8004f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004faa:	f002 ff8d 	bl	8007ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fae:	bf00      	nop
 8004fb0:	3728      	adds	r7, #40	; 0x28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	48000400 	.word	0x48000400

08004fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b09a      	sub	sp, #104	; 0x68
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fdc:	f107 0310 	add.w	r3, r7, #16
 8004fe0:	2244      	movs	r2, #68	; 0x44
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f007 fa7b 	bl	800c4e0 <memset>
  if(huart->Instance==USART3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_UART_MspInit+0xa8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d136      	bne.n	8005062 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	4618      	mov	r0, r3
 8005002:	f003 ffed 	bl	8008fe0 <HAL_RCCEx_PeriphCLKConfig>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800500c:	f7fd fcb0 	bl	8002970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <HAL_UART_MspInit+0xac>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_UART_MspInit+0xac>)
 8005016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
 800501c:	4b14      	ldr	r3, [pc, #80]	; (8005070 <HAL_UART_MspInit+0xac>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_UART_MspInit+0xac>)
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	4a10      	ldr	r2, [pc, #64]	; (8005070 <HAL_UART_MspInit+0xac>)
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_UART_MspInit+0xac>)
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005040:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005044:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005046:	2302      	movs	r3, #2
 8005048:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504a:	2300      	movs	r3, #0
 800504c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504e:	2300      	movs	r3, #0
 8005050:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005052:	2307      	movs	r3, #7
 8005054:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005056:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800505a:	4619      	mov	r1, r3
 800505c:	4805      	ldr	r0, [pc, #20]	; (8005074 <HAL_UART_MspInit+0xb0>)
 800505e:	f002 ff33 	bl	8007ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005062:	bf00      	nop
 8005064:	3768      	adds	r7, #104	; 0x68
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40004800 	.word	0x40004800
 8005070:	40021000 	.word	0x40021000
 8005074:	48000400 	.word	0x48000400

08005078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800507c:	e7fe      	b.n	800507c <NMI_Handler+0x4>

0800507e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800507e:	b480      	push	{r7}
 8005080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005082:	e7fe      	b.n	8005082 <HardFault_Handler+0x4>

08005084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005088:	e7fe      	b.n	8005088 <MemManage_Handler+0x4>

0800508a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800508a:	b480      	push	{r7}
 800508c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800508e:	e7fe      	b.n	800508e <BusFault_Handler+0x4>

08005090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005094:	e7fe      	b.n	8005094 <UsageFault_Handler+0x4>

08005096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005096:	b480      	push	{r7}
 8005098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050c4:	f000 f992 	bl	80053ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}

080050cc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <FDCAN1_IT0_IRQHandler+0x10>)
 80050d2:	f002 fa13 	bl	80074fc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000454 	.word	0x20000454

080050e0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <FDCAN1_IT1_IRQHandler+0x10>)
 80050e6:	f002 fa09 	bl	80074fc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000454 	.word	0x20000454

080050f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80050fa:	f005 f91d 	bl	800a338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200005d0 	.word	0x200005d0

08005108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <TIM2_IRQHandler+0x10>)
 800510e:	f005 f913 	bl	800a338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2000061c 	.word	0x2000061c

0800511c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <TIM4_IRQHandler+0x10>)
 8005122:	f005 f909 	bl	800a338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000668 	.word	0x20000668

08005130 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <SPI1_IRQHandler+0x10>)
 8005136:	f004 fa9f 	bl	8009678 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2000056c 	.word	0x2000056c

08005144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
	return 1;
 8005148:	2301      	movs	r3, #1
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <_kill>:

int _kill(int pid, int sig)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800515e:	f007 f995 	bl	800c48c <__errno>
 8005162:	4603      	mov	r3, r0
 8005164:	2216      	movs	r2, #22
 8005166:	601a      	str	r2, [r3, #0]
	return -1;
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_exit>:

void _exit (int status)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800517c:	f04f 31ff 	mov.w	r1, #4294967295
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ffe7 	bl	8005154 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005186:	e7fe      	b.n	8005186 <_exit+0x12>

08005188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e00a      	b.n	80051b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800519a:	f3af 8000 	nop.w
 800519e:	4601      	mov	r1, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	60ba      	str	r2, [r7, #8]
 80051a6:	b2ca      	uxtb	r2, r1
 80051a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3301      	adds	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	dbf0      	blt.n	800519a <_read+0x12>
	}

return len;
 80051b8:	687b      	ldr	r3, [r7, #4]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e009      	b.n	80051e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	60ba      	str	r2, [r7, #8]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	dbf1      	blt.n	80051d4 <_write+0x12>
	}
	return len;
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <_close>:

int _close(int file)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
	return -1;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005222:	605a      	str	r2, [r3, #4]
	return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <_isatty>:

int _isatty(int file)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
	return 1;
 800523a:	2301      	movs	r3, #1
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
	return 0;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800526c:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <_sbrk+0x5c>)
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <_sbrk+0x60>)
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <_sbrk+0x64>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <_sbrk+0x64>)
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <_sbrk+0x68>)
 8005284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <_sbrk+0x64>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d207      	bcs.n	80052a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005294:	f007 f8fa 	bl	800c48c <__errno>
 8005298:	4603      	mov	r3, r0
 800529a:	220c      	movs	r2, #12
 800529c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	e009      	b.n	80052b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <_sbrk+0x64>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	4a05      	ldr	r2, [pc, #20]	; (80052c8 <_sbrk+0x64>)
 80052b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20008000 	.word	0x20008000
 80052c4:	00000400 	.word	0x00000400
 80052c8:	20000794 	.word	0x20000794
 80052cc:	200007b0 	.word	0x200007b0

080052d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <SystemInit+0x20>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <SystemInit+0x20>)
 80052dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052f4:	480d      	ldr	r0, [pc, #52]	; (800532c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <LoopForever+0x6>)
  ldr r1, =_edata
 80052fa:	490e      	ldr	r1, [pc, #56]	; (8005334 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <LoopForever+0xe>)
  movs r3, #0
 80052fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005300:	e002      	b.n	8005308 <LoopCopyDataInit>

08005302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005306:	3304      	adds	r3, #4

08005308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800530a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800530c:	d3f9      	bcc.n	8005302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005310:	4c0b      	ldr	r4, [pc, #44]	; (8005340 <LoopForever+0x16>)
  movs r3, #0
 8005312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005314:	e001      	b.n	800531a <LoopFillZerobss>

08005316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005318:	3204      	adds	r2, #4

0800531a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800531a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800531c:	d3fb      	bcc.n	8005316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800531e:	f7ff ffd7 	bl	80052d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005322:	f007 f8b9 	bl	800c498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005326:	f7fc fdb3 	bl	8001e90 <main>

0800532a <LoopForever>:

LoopForever:
    b LoopForever
 800532a:	e7fe      	b.n	800532a <LoopForever>
  ldr   r0, =_estack
 800532c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005334:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8005338:	0801095c 	.word	0x0801095c
  ldr r2, =_sbss
 800533c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8005340:	200007ac 	.word	0x200007ac

08005344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005344:	e7fe      	b.n	8005344 <ADC1_2_IRQHandler>

08005346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005350:	2003      	movs	r0, #3
 8005352:	f001 fc4d 	bl	8006bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005356:	200f      	movs	r0, #15
 8005358:	f000 f80e 	bl	8005378 <HAL_InitTick>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	71fb      	strb	r3, [r7, #7]
 8005366:	e001      	b.n	800536c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005368:	f7ff fb3e 	bl	80049e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800536c:	79fb      	ldrb	r3, [r7, #7]

}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <HAL_InitTick+0x68>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d022      	beq.n	80053d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800538c:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <HAL_InitTick+0x6c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <HAL_InitTick+0x68>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005398:	fbb1 f3f3 	udiv	r3, r1, r3
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fc58 	bl	8006c56 <HAL_SYSTICK_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d809      	bhi.n	80053c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053b2:	2200      	movs	r2, #0
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ba:	f001 fc24 	bl	8006c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053be:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <HAL_InitTick+0x70>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	e007      	b.n	80053d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
 80053ca:	e004      	b.n	80053d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e001      	b.n	80053d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000008 	.word	0x20000008
 80053e4:	20000000 	.word	0x20000000
 80053e8:	20000004 	.word	0x20000004

080053ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_IncTick+0x1c>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_IncTick+0x20>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4413      	add	r3, r2
 80053fa:	4a03      	ldr	r2, [pc, #12]	; (8005408 <HAL_IncTick+0x1c>)
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000798 	.word	0x20000798
 800540c:	20000008 	.word	0x20000008

08005410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return uwTick;
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <HAL_GetTick+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000798 	.word	0x20000798

08005428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005430:	f7ff ffee 	bl	8005410 <HAL_GetTick>
 8005434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d004      	beq.n	800544c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <HAL_Delay+0x40>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800544c:	bf00      	nop
 800544e:	f7ff ffdf 	bl	8005410 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	429a      	cmp	r2, r3
 800545c:	d8f7      	bhi.n	800544e <HAL_Delay+0x26>
  {
  }
}
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000008 	.word	0x20000008

0800546c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6093      	str	r3, [r2, #8]
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ca:	d101      	bne.n	80054d0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80054ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551a:	d101      	bne.n	8005520 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800553e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <LL_ADC_IsEnabled+0x18>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <LL_ADC_IsEnabled+0x1a>
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d101      	bne.n	8005594 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d101      	bne.n	80055ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e177      	b.n	80058d2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fa1d 	bl	8004a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff ff54 	bl	80054b6 <LL_ADC_IsDeepPowerDownEnabled>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff ff3a 	bl	8005492 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff6f 	bl	8005506 <LL_ADC_IsInternalRegulatorEnabled>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d115      	bne.n	800565a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff53 	bl	80054de <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005638:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_ADC_Init+0x2e4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	4a9c      	ldr	r2, [pc, #624]	; (80058b0 <HAL_ADC_Init+0x2e8>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800564c:	e002      	b.n	8005654 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3b01      	subs	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f9      	bne.n	800564e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff51 	bl	8005506 <LL_ADC_IsInternalRegulatorEnabled>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff ff76 	bl	800557c <LL_ADC_REG_IsConversionOngoing>
 8005690:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	f040 8110 	bne.w	80058c0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 810c 	bne.w	80058c0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056b0:	f043 0202 	orr.w	r2, r3, #2
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff ff4a 	bl	8005556 <LL_ADC_IsEnabled>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d111      	bne.n	80056ec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80056cc:	f7ff ff43 	bl	8005556 <LL_ADC_IsEnabled>
 80056d0:	4604      	mov	r4, r0
 80056d2:	4878      	ldr	r0, [pc, #480]	; (80058b4 <HAL_ADC_Init+0x2ec>)
 80056d4:	f7ff ff3f 	bl	8005556 <LL_ADC_IsEnabled>
 80056d8:	4603      	mov	r3, r0
 80056da:	4323      	orrs	r3, r4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4619      	mov	r1, r3
 80056e6:	4874      	ldr	r0, [pc, #464]	; (80058b8 <HAL_ADC_Init+0x2f0>)
 80056e8:	f7ff fec0 	bl	800546c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7f5b      	ldrb	r3, [r3, #29]
 80056f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80056fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005702:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800570a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005716:	2b01      	cmp	r3, #1
 8005718:	d106      	bne.n	8005728 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	3b01      	subs	r3, #1
 8005720:	045b      	lsls	r3, r3, #17
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <HAL_ADC_Init+0x2f4>)
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	430b      	orrs	r3, r1
 8005756:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ff02 	bl	800557c <LL_ADC_REG_IsConversionOngoing>
 8005778:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff0f 	bl	80055a2 <LL_ADC_INJ_IsConversionOngoing>
 8005784:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d16d      	bne.n	8005868 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d16a      	bne.n	8005868 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005796:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800579e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ae:	f023 0302 	bic.w	r3, r3, #2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	69b9      	ldr	r1, [r7, #24]
 80057b8:	430b      	orrs	r3, r1
 80057ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d017      	beq.n	80057f4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691a      	ldr	r2, [r3, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6911      	ldr	r1, [r2, #16]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	430b      	orrs	r3, r1
 80057ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80057f2:	e013      	b.n	800581c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005818:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005822:	2b01      	cmp	r3, #1
 8005824:	d118      	bne.n	8005858 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800583c:	4311      	orrs	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005842:	4311      	orrs	r1, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005848:	430a      	orrs	r2, r1
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0201 	orr.w	r2, r2, #1
 8005854:	611a      	str	r2, [r3, #16]
 8005856:	e007      	b.n	8005868 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10c      	bne.n	800588a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	f023 010f 	bic.w	r1, r3, #15
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	1e5a      	subs	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
 8005888:	e007      	b.n	800589a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 020f 	bic.w	r2, r2, #15
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80058aa:	e011      	b.n	80058d0 <HAL_ADC_Init+0x308>
 80058ac:	20000000 	.word	0x20000000
 80058b0:	053e2d63 	.word	0x053e2d63
 80058b4:	50000100 	.word	0x50000100
 80058b8:	50000300 	.word	0x50000300
 80058bc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	f043 0210 	orr.w	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80058d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3724      	adds	r7, #36	; 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	bf00      	nop

080058dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fe34 	bl	8005556 <LL_ADC_IsEnabled>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d14d      	bne.n	8005990 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <ADC_Enable+0xc0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005906:	f043 0210 	orr.w	r2, r3, #16
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e039      	b.n	8005992 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fe03 	bl	800552e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005928:	f7ff fd72 	bl	8005410 <HAL_GetTick>
 800592c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800592e:	e028      	b.n	8005982 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fe0e 	bl	8005556 <LL_ADC_IsEnabled>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fdf2 	bl	800552e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800594a:	f7ff fd61 	bl	8005410 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d914      	bls.n	8005982 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d00d      	beq.n	8005982 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596a:	f043 0210 	orr.w	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e007      	b.n	8005992 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d1cf      	bne.n	8005930 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	8000003f 	.word	0x8000003f

080059a0 <LL_ADC_SetCommonPathInternalCh>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LL_ADC_GetCommonPathInternalCh>:
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <LL_ADC_SetOffset>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3360      	adds	r3, #96	; 0x60
 80059f6:	461a      	mov	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <LL_ADC_SetOffset+0x44>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	601a      	str	r2, [r3, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	03fff000 	.word	0x03fff000

08005a2c <LL_ADC_GetOffsetChannel>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3360      	adds	r3, #96	; 0x60
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_ADC_SetOffsetState>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3360      	adds	r3, #96	; 0x60
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_ADC_SetOffsetSign>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b087      	sub	sp, #28
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3360      	adds	r3, #96	; 0x60
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	601a      	str	r2, [r3, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LL_ADC_SetOffsetSaturation>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3360      	adds	r3, #96	; 0x60
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	615a      	str	r2, [r3, #20]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <LL_ADC_INJ_GetTrigAuto>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <LL_ADC_SetChannelSamplingTime>:
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3314      	adds	r3, #20
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	0e5b      	lsrs	r3, r3, #25
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	4413      	add	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	0d1b      	lsrs	r3, r3, #20
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2107      	movs	r1, #7
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	401a      	ands	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	0d1b      	lsrs	r3, r3, #20
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	431a      	orrs	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	601a      	str	r2, [r3, #0]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <LL_ADC_SetChannelSingleDiff>:
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10a      	bne.n	8005bbe <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005bbc:	e00a      	b.n	8005bd4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	401a      	ands	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	407f0000 	.word	0x407f0000

08005be4 <LL_ADC_GetMultimode>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <LL_ADC_IsEnabled>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <LL_ADC_IsEnabled+0x18>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <LL_ADC_IsEnabled+0x1a>
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <LL_ADC_REG_IsConversionOngoing>:
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d101      	bne.n	8005c3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <LL_ADC_INJ_StartConversion>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c60:	f043 0208 	orr.w	r2, r3, #8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_ADC_INJ_IsConversionOngoing>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d101      	bne.n	8005c8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ca4:	4853      	ldr	r0, [pc, #332]	; (8005df4 <HAL_ADCEx_InjectedStart+0x158>)
 8005ca6:	f7ff ff9d 	bl	8005be4 <LL_ADC_GetMultimode>
 8005caa:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff ffdf 	bl	8005c74 <LL_ADC_INJ_IsConversionOngoing>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e094      	b.n	8005dea <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cca:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e07c      	b.n	8005dea <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_ADCEx_InjectedStart+0x62>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e075      	b.n	8005dea <HAL_ADCEx_InjectedStart+0x14e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fde8 	bl	80058dc <ADC_Enable>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d164      	bne.n	8005de0 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d006      	beq.n	8005d30 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	f023 0208 	bic.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60
 8005d2e:	e002      	b.n	8005d36 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a2a      	ldr	r2, [pc, #168]	; (8005df8 <HAL_ADCEx_InjectedStart+0x15c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d002      	beq.n	8005d5a <HAL_ADCEx_InjectedStart+0xbe>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	e001      	b.n	8005d5e <HAL_ADCEx_InjectedStart+0xc2>
 8005d5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d002      	beq.n	8005d6c <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2260      	movs	r2, #96	; 0x60
 8005d7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_ADCEx_InjectedStart+0x15c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d002      	beq.n	8005d98 <HAL_ADCEx_InjectedStart+0xfc>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	e001      	b.n	8005d9c <HAL_ADCEx_InjectedStart+0x100>
 8005d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d008      	beq.n	8005db6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d002      	beq.n	8005db6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b07      	cmp	r3, #7
 8005db4:	d10d      	bne.n	8005dd2 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff feb0 	bl	8005b20 <LL_ADC_INJ_GetTrigAuto>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d110      	bne.n	8005de8 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ff3e 	bl	8005c4c <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005dd0:	e00a      	b.n	8005de8 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dde:	e003      	b.n	8005de8 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	50000300 	.word	0x50000300
 8005df8:	50000100 	.word	0x50000100

08005dfc <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f240 321b 	movw	r2, #795	; 0x31b
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_ADCEx_InjectedGetValue+0x32>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8005e16:	d21c      	bcs.n	8005e52 <HAL_ADCEx_InjectedGetValue+0x56>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f240 120f 	movw	r2, #271	; 0x10f
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d011      	beq.n	8005e46 <HAL_ADCEx_InjectedGetValue+0x4a>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f240 2215 	movw	r2, #533	; 0x215
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d006      	beq.n	8005e3a <HAL_ADCEx_InjectedGetValue+0x3e>
 8005e2c:	e011      	b.n	8005e52 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e36:	60fb      	str	r3, [r7, #12]
      break;
 8005e38:	e011      	b.n	8005e5e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e42:	60fb      	str	r3, [r7, #12]
      break;
 8005e44:	e00b      	b.n	8005e5e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4e:	60fb      	str	r3, [r7, #12]
      break;
 8005e50:	e005      	b.n	8005e5e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5a:	60fb      	str	r3, [r7, #12]
      break;
 8005e5c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b0b6      	sub	sp, #216	; 0xd8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005e90:	2302      	movs	r3, #2
 8005e92:	f000 bcb5 	b.w	8006800 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d130      	bne.n	8005f10 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b09      	cmp	r3, #9
 8005eb4:	d179      	bne.n	8005faa <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0e9b      	lsrs	r3, r3, #26
 8005ec4:	025b      	lsls	r3, r3, #9
 8005ec6:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005ed2:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ede:	e007      	b.n	8005ef0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	0e9b      	lsrs	r3, r3, #26
 8005ee6:	025b      	lsls	r3, r3, #9
 8005ee8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef6:	4b84      	ldr	r3, [pc, #528]	; (8006108 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005f02:	430b      	orrs	r3, r1
 8005f04:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f0c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005f0e:	e04c      	b.n	8005faa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d11d      	bne.n	8005f54 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005f3c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f48:	e004      	b.n	8005f54 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0e9b      	lsrs	r3, r3, #26
 8005f5a:	f003 021f 	and.w	r2, r3, #31
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f9a:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fe60 	bl	8005c74 <LL_ADC_INJ_IsConversionOngoing>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d124      	bne.n	8006004 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d112      	bne.n	8005fea <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005fd4:	055a      	lsls	r2, r3, #21
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e00c      	b.n	8006004 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ffa:	055a      	lsls	r2, r3, #21
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fe0c 	bl	8005c26 <LL_ADC_REG_IsConversionOngoing>
 800600e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fe2c 	bl	8005c74 <LL_ADC_INJ_IsConversionOngoing>
 800601c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006024:	2b00      	cmp	r3, #0
 8006026:	f040 822e 	bne.w	8006486 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800602a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 8229 	bne.w	8006486 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d116      	bne.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800604a:	2b01      	cmp	r3, #1
 800604c:	d108      	bne.n	8006060 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800605c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800605e:	e01f      	b.n	80060a0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800606e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006070:	e016      	b.n	80060a0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006078:	2b01      	cmp	r3, #1
 800607a:	d109      	bne.n	8006090 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	f043 0220 	orr.w	r2, r3, #32
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800608e:	e007      	b.n	80060a0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800609e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d110      	bne.n	80060cc <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	430b      	orrs	r3, r1
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0202 	orr.w	r2, r2, #2
 80060c8:	611a      	str	r2, [r3, #16]
 80060ca:	e007      	b.n	80060dc <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0202 	bic.w	r2, r2, #2
 80060da:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e4:	d112      	bne.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	4619      	mov	r1, r3
 80060f2:	f7ff fd23 	bl	8005b3c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fcfb 	bl	8005afa <LL_ADC_SetSamplingTimeCommonConfig>
 8006104:	e011      	b.n	800612a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8006106:	bf00      	nop
 8006108:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	461a      	mov	r2, r3
 800611a:	f7ff fd0f 	bl	8005b3c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fce8 	bl	8005afa <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d022      	beq.n	8006192 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6919      	ldr	r1, [r3, #16]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800615c:	f7ff fc42 	bl	80059e4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6919      	ldr	r1, [r3, #16]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	461a      	mov	r2, r3
 800616e:	f7ff fc8e 	bl	8005a8e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800617e:	2b01      	cmp	r3, #1
 8006180:	d102      	bne.n	8006188 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8006182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006186:	e000      	b.n	800618a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8006188:	2300      	movs	r3, #0
 800618a:	461a      	mov	r2, r3
 800618c:	f7ff fc9a 	bl	8005ac4 <LL_ADC_SetOffsetSaturation>
 8006190:	e179      	b.n	8006486 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fc47 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 800619e:	4603      	mov	r3, r0
 80061a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <HAL_ADCEx_InjectedConfigChannel+0x352>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fc3c 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 80061b4:	4603      	mov	r3, r0
 80061b6:	0e9b      	lsrs	r3, r3, #26
 80061b8:	f003 021f 	and.w	r2, r3, #31
 80061bc:	e01e      	b.n	80061fc <HAL_ADCEx_InjectedConfigChannel+0x390>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fc31 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061d4:	fa93 f3a3 	rbit	r3, r3
 80061d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 80061ec:	2320      	movs	r3, #32
 80061ee:	e004      	b.n	80061fa <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 80061f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061f4:	fab3 f383 	clz	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	2b00      	cmp	r3, #0
 8006206:	d105      	bne.n	8006214 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	0e9b      	lsrs	r3, r3, #26
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	e018      	b.n	8006246 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006220:	fa93 f3a3 	rbit	r3, r3
 8006224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8006238:	2320      	movs	r3, #32
 800623a:	e004      	b.n	8006246 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800623c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006240:	fab3 f383 	clz	r3, r3
 8006244:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006246:	429a      	cmp	r2, r3
 8006248:	d106      	bne.n	8006258 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2200      	movs	r2, #0
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fc00 	bl	8005a58 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff fbe4 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 8006264:	4603      	mov	r3, r0
 8006266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fbd9 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 800627a:	4603      	mov	r3, r0
 800627c:	0e9b      	lsrs	r3, r3, #26
 800627e:	f003 021f 	and.w	r2, r3, #31
 8006282:	e01e      	b.n	80062c2 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fbce 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 8006290:	4603      	mov	r3, r0
 8006292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800629a:	fa93 f3a3 	rbit	r3, r3
 800629e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80062a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80062aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80062b2:	2320      	movs	r3, #32
 80062b4:	e004      	b.n	80062c0 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80062b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ba:	fab3 f383 	clz	r3, r3
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0e9b      	lsrs	r3, r3, #26
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	e018      	b.n	800630c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062e6:	fa93 f3a3 	rbit	r3, r3
 80062ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80062ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80062f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80062fe:	2320      	movs	r3, #32
 8006300:	e004      	b.n	800630c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8006302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006306:	fab3 f383 	clz	r3, r3
 800630a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800630c:	429a      	cmp	r2, r3
 800630e:	d106      	bne.n	800631e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	2101      	movs	r1, #1
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fb9d 	bl	8005a58 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2102      	movs	r1, #2
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fb81 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 800632a:	4603      	mov	r3, r0
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2102      	movs	r1, #2
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fb76 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 8006340:	4603      	mov	r3, r0
 8006342:	0e9b      	lsrs	r3, r3, #26
 8006344:	f003 021f 	and.w	r2, r3, #31
 8006348:	e01e      	b.n	8006388 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2102      	movs	r1, #2
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fb6b 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 8006356:	4603      	mov	r3, r0
 8006358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006360:	fa93 f3a3 	rbit	r3, r3
 8006364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8006378:	2320      	movs	r3, #32
 800637a:	e004      	b.n	8006386 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800637c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006380:	fab3 f383 	clz	r3, r3
 8006384:	b2db      	uxtb	r3, r3
 8006386:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	0e9b      	lsrs	r3, r3, #26
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	e014      	b.n	80063ca <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063a8:	fa93 f3a3 	rbit	r3, r3
 80063ac:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80063ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80063b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80063bc:	2320      	movs	r3, #32
 80063be:	e004      	b.n	80063ca <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80063c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c4:	fab3 f383 	clz	r3, r3
 80063c8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d106      	bne.n	80063dc <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2200      	movs	r2, #0
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fb3e 	bl	8005a58 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2103      	movs	r1, #3
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fb22 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2103      	movs	r1, #3
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fb17 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 80063fe:	4603      	mov	r3, r0
 8006400:	0e9b      	lsrs	r3, r3, #26
 8006402:	f003 021f 	and.w	r2, r3, #31
 8006406:	e017      	b.n	8006438 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2103      	movs	r1, #3
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fb0c 	bl	8005a2c <LL_ADC_GetOffsetChannel>
 8006414:	4603      	mov	r3, r0
 8006416:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006422:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800642a:	2320      	movs	r3, #32
 800642c:	e003      	b.n	8006436 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800642e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006430:	fab3 f383 	clz	r3, r3
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	0e9b      	lsrs	r3, r3, #26
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	e011      	b.n	8006474 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006458:	fa93 f3a3 	rbit	r3, r3
 800645c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800645e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006460:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8006468:	2320      	movs	r3, #32
 800646a:	e003      	b.n	8006474 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800646c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800646e:	fab3 f383 	clz	r3, r3
 8006472:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006474:	429a      	cmp	r2, r3
 8006476:	d106      	bne.n	8006486 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2200      	movs	r2, #0
 800647e:	2103      	movs	r1, #3
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fae9 	bl	8005a58 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fbb8 	bl	8005c00 <LL_ADC_IsEnabled>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 8140 	bne.w	8006718 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	6819      	ldr	r1, [r3, #0]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	461a      	mov	r2, r3
 80064a6:	f7ff fb75 	bl	8005b94 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	4a8f      	ldr	r2, [pc, #572]	; (80066ec <HAL_ADCEx_InjectedConfigChannel+0x880>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	f040 8131 	bne.w	8006718 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <HAL_ADCEx_InjectedConfigChannel+0x672>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	0e9b      	lsrs	r3, r3, #26
 80064cc:	3301      	adds	r3, #1
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	bf94      	ite	ls
 80064d6:	2301      	movls	r3, #1
 80064d8:	2300      	movhi	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e019      	b.n	8006512 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064e6:	fa93 f3a3 	rbit	r3, r3
 80064ea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80064ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80064f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80064f6:	2320      	movs	r3, #32
 80064f8:	e003      	b.n	8006502 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80064fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064fc:	fab3 f383 	clz	r3, r3
 8006500:	b2db      	uxtb	r3, r3
 8006502:	3301      	adds	r3, #1
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2b09      	cmp	r3, #9
 800650a:	bf94      	ite	ls
 800650c:	2301      	movls	r3, #1
 800650e:	2300      	movhi	r3, #0
 8006510:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006512:	2b00      	cmp	r3, #0
 8006514:	d079      	beq.n	800660a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	0e9b      	lsrs	r3, r3, #26
 8006528:	3301      	adds	r3, #1
 800652a:	069b      	lsls	r3, r3, #26
 800652c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006530:	e015      	b.n	800655e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653a:	fa93 f3a3 	rbit	r3, r3
 800653e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006542:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800654a:	2320      	movs	r3, #32
 800654c:	e003      	b.n	8006556 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006550:	fab3 f383 	clz	r3, r3
 8006554:	b2db      	uxtb	r3, r3
 8006556:	3301      	adds	r3, #1
 8006558:	069b      	lsls	r3, r3, #26
 800655a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	0e9b      	lsrs	r3, r3, #26
 8006570:	3301      	adds	r3, #1
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2101      	movs	r1, #1
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	e017      	b.n	80065ae <HAL_ADCEx_InjectedConfigChannel+0x742>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006586:	fa93 f3a3 	rbit	r3, r3
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8006596:	2320      	movs	r3, #32
 8006598:	e003      	b.n	80065a2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800659a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659c:	fab3 f383 	clz	r3, r3
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	3301      	adds	r3, #1
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2101      	movs	r1, #1
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	ea42 0103 	orr.w	r1, r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	0e9b      	lsrs	r3, r3, #26
 80065c4:	3301      	adds	r3, #1
 80065c6:	f003 021f 	and.w	r2, r3, #31
 80065ca:	4613      	mov	r3, r2
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	051b      	lsls	r3, r3, #20
 80065d2:	e018      	b.n	8006606 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065dc:	fa93 f3a3 	rbit	r3, r3
 80065e0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80065ec:	2320      	movs	r3, #32
 80065ee:	e003      	b.n	80065f8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	fab3 f383 	clz	r3, r3
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	3301      	adds	r3, #1
 80065fa:	f003 021f 	and.w	r2, r3, #31
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006606:	430b      	orrs	r3, r1
 8006608:	e081      	b.n	800670e <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	0e9b      	lsrs	r3, r3, #26
 800661c:	3301      	adds	r3, #1
 800661e:	069b      	lsls	r3, r3, #26
 8006620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006624:	e015      	b.n	8006652 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	fa93 f3a3 	rbit	r3, r3
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800663e:	2320      	movs	r3, #32
 8006640:	e003      	b.n	800664a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	fab3 f383 	clz	r3, r3
 8006648:	b2db      	uxtb	r3, r3
 800664a:	3301      	adds	r3, #1
 800664c:	069b      	lsls	r3, r3, #26
 800664e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	0e9b      	lsrs	r3, r3, #26
 8006664:	3301      	adds	r3, #1
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2101      	movs	r1, #1
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	e017      	b.n	80066a2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	fa93 f3a3 	rbit	r3, r3
 800667e:	61bb      	str	r3, [r7, #24]
  return result;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800668a:	2320      	movs	r3, #32
 800668c:	e003      	b.n	8006696 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	fab3 f383 	clz	r3, r3
 8006694:	b2db      	uxtb	r3, r3
 8006696:	3301      	adds	r3, #1
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2101      	movs	r1, #1
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	ea42 0103 	orr.w	r1, r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10d      	bne.n	80066ce <HAL_ADCEx_InjectedConfigChannel+0x862>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	0e9b      	lsrs	r3, r3, #26
 80066b8:	3301      	adds	r3, #1
 80066ba:	f003 021f 	and.w	r2, r3, #31
 80066be:	4613      	mov	r3, r2
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4413      	add	r3, r2
 80066c4:	3b1e      	subs	r3, #30
 80066c6:	051b      	lsls	r3, r3, #20
 80066c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066cc:	e01e      	b.n	800670c <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	fa93 f3a3 	rbit	r3, r3
 80066da:	60fb      	str	r3, [r7, #12]
  return result;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 80066e6:	2320      	movs	r3, #32
 80066e8:	e006      	b.n	80066f8 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80066ea:	bf00      	nop
 80066ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	fab3 f383 	clz	r3, r3
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	3301      	adds	r3, #1
 80066fa:	f003 021f 	and.w	r2, r3, #31
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	3b1e      	subs	r3, #30
 8006706:	051b      	lsls	r3, r3, #20
 8006708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800670c:	430b      	orrs	r3, r1
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	6892      	ldr	r2, [r2, #8]
 8006712:	4619      	mov	r1, r3
 8006714:	f7ff fa12 	bl	8005b3c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4b3a      	ldr	r3, [pc, #232]	; (8006808 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d067      	beq.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006724:	4839      	ldr	r0, [pc, #228]	; (800680c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006726:	f7ff f94e 	bl	80059c6 <LL_ADC_GetCommonPathInternalCh>
 800672a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a37      	ldr	r2, [pc, #220]	; (8006810 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a35      	ldr	r2, [pc, #212]	; (8006814 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d127      	bne.n	8006792 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d121      	bne.n	8006792 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006756:	d14d      	bne.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800675c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006760:	4619      	mov	r1, r3
 8006762:	482a      	ldr	r0, [pc, #168]	; (800680c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006764:	f7ff f91c 	bl	80059a0 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006768:	4b2b      	ldr	r3, [pc, #172]	; (8006818 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	099b      	lsrs	r3, r3, #6
 800676e:	4a2b      	ldr	r2, [pc, #172]	; (800681c <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	099a      	lsrs	r2, r3, #6
 8006776:	4613      	mov	r3, r2
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	3318      	adds	r3, #24
 8006780:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006782:	e002      	b.n	800678a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	3b01      	subs	r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f9      	bne.n	8006784 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006790:	e030      	b.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d113      	bne.n	80067c4 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800679c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10d      	bne.n	80067c4 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d020      	beq.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ba:	4619      	mov	r1, r3
 80067bc:	4813      	ldr	r0, [pc, #76]	; (800680c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80067be:	f7ff f8ef 	bl	80059a0 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067c2:	e017      	b.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d112      	bne.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10c      	bne.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a11      	ldr	r2, [pc, #68]	; (8006824 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067ec:	4619      	mov	r1, r3
 80067ee:	4807      	ldr	r0, [pc, #28]	; (800680c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80067f0:	f7ff f8d6 	bl	80059a0 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80067fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006800:	4618      	mov	r0, r3
 8006802:	37d8      	adds	r7, #216	; 0xd8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	80080000 	.word	0x80080000
 800680c:	50000300 	.word	0x50000300
 8006810:	c3210000 	.word	0xc3210000
 8006814:	90c00010 	.word	0x90c00010
 8006818:	20000000 	.word	0x20000000
 800681c:	053e2d63 	.word	0x053e2d63
 8006820:	c7520000 	.word	0xc7520000
 8006824:	50000100 	.word	0x50000100
 8006828:	cb840000 	.word	0xcb840000

0800682c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b0a1      	sub	sp, #132	; 0x84
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006846:	2302      	movs	r3, #2
 8006848:	e08b      	b.n	8006962 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006852:	2300      	movs	r3, #0
 8006854:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006856:	2300      	movs	r3, #0
 8006858:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006862:	d102      	bne.n	800686a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006864:	4b41      	ldr	r3, [pc, #260]	; (800696c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	e001      	b.n	800686e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	f043 0220 	orr.w	r2, r3, #32
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e06a      	b.n	8006962 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff f9c9 	bl	8005c26 <LL_ADC_REG_IsConversionOngoing>
 8006894:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff f9c3 	bl	8005c26 <LL_ADC_REG_IsConversionOngoing>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d14c      	bne.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80068a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d149      	bne.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80068ac:	4b30      	ldr	r3, [pc, #192]	; (8006970 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80068ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d028      	beq.n	800690a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80068b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	6859      	ldr	r1, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068ca:	035b      	lsls	r3, r3, #13
 80068cc:	430b      	orrs	r3, r1
 80068ce:	431a      	orrs	r2, r3
 80068d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068d8:	f7ff f992 	bl	8005c00 <LL_ADC_IsEnabled>
 80068dc:	4604      	mov	r4, r0
 80068de:	4823      	ldr	r0, [pc, #140]	; (800696c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80068e0:	f7ff f98e 	bl	8005c00 <LL_ADC_IsEnabled>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4323      	orrs	r3, r4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d133      	bne.n	8006954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80068ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068f4:	f023 030f 	bic.w	r3, r3, #15
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	6811      	ldr	r1, [r2, #0]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	6892      	ldr	r2, [r2, #8]
 8006900:	430a      	orrs	r2, r1
 8006902:	431a      	orrs	r2, r3
 8006904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006906:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006908:	e024      	b.n	8006954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800690a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006914:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006916:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800691a:	f7ff f971 	bl	8005c00 <LL_ADC_IsEnabled>
 800691e:	4604      	mov	r4, r0
 8006920:	4812      	ldr	r0, [pc, #72]	; (800696c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006922:	f7ff f96d 	bl	8005c00 <LL_ADC_IsEnabled>
 8006926:	4603      	mov	r3, r0
 8006928:	4323      	orrs	r3, r4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d112      	bne.n	8006954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800692e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006936:	f023 030f 	bic.w	r3, r3, #15
 800693a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800693c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800693e:	e009      	b.n	8006954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006952:	e000      	b.n	8006956 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006954:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800695e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006962:	4618      	mov	r0, r3
 8006964:	3784      	adds	r7, #132	; 0x84
 8006966:	46bd      	mov	sp, r7
 8006968:	bd90      	pop	{r4, r7, pc}
 800696a:	bf00      	nop
 800696c:	50000100 	.word	0x50000100
 8006970:	50000300 	.word	0x50000300

08006974 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e023      	b.n	80069ce <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe f8ee 	bl	8004b7c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11d      	bne.n	8006a2e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <HAL_CORDIC_Configure+0x74>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	6811      	ldr	r1, [r2, #0]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	6992      	ldr	r2, [r2, #24]
 8006a04:	4311      	orrs	r1, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	6852      	ldr	r2, [r2, #4]
 8006a0a:	4311      	orrs	r1, r2
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	6912      	ldr	r2, [r2, #16]
 8006a10:	4311      	orrs	r1, r2
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	6952      	ldr	r2, [r2, #20]
 8006a16:	4311      	orrs	r1, r2
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	6892      	ldr	r2, [r2, #8]
 8006a1c:	4311      	orrs	r1, r2
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	68d2      	ldr	r2, [r2, #12]
 8006a22:	4311      	orrs	r1, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e007      	b.n	8006a3e <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f043 0202 	orr.w	r2, r3, #2
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	ff87f800 	.word	0xff87f800

08006a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <__NVIC_SetPriorityGrouping+0x44>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a82:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <__NVIC_SetPriorityGrouping+0x44>)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	60d3      	str	r3, [r2, #12]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	e000ed00 	.word	0xe000ed00

08006a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a9c:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	f003 0307 	and.w	r3, r3, #7
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	e000ed00 	.word	0xe000ed00

08006ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	db0b      	blt.n	8006ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	f003 021f 	and.w	r2, r3, #31
 8006acc:	4907      	ldr	r1, [pc, #28]	; (8006aec <__NVIC_EnableIRQ+0x38>)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8006ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	e000e100 	.word	0xe000e100

08006af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db0a      	blt.n	8006b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	490c      	ldr	r1, [pc, #48]	; (8006b3c <__NVIC_SetPriority+0x4c>)
 8006b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0e:	0112      	lsls	r2, r2, #4
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	440b      	add	r3, r1
 8006b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b18:	e00a      	b.n	8006b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	4908      	ldr	r1, [pc, #32]	; (8006b40 <__NVIC_SetPriority+0x50>)
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	3b04      	subs	r3, #4
 8006b28:	0112      	lsls	r2, r2, #4
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	761a      	strb	r2, [r3, #24]
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	e000e100 	.word	0xe000e100
 8006b40:	e000ed00 	.word	0xe000ed00

08006b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b089      	sub	sp, #36	; 0x24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f1c3 0307 	rsb	r3, r3, #7
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	bf28      	it	cs
 8006b62:	2304      	movcs	r3, #4
 8006b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	2b06      	cmp	r3, #6
 8006b6c:	d902      	bls.n	8006b74 <NVIC_EncodePriority+0x30>
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	3b03      	subs	r3, #3
 8006b72:	e000      	b.n	8006b76 <NVIC_EncodePriority+0x32>
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b78:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43da      	mvns	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	401a      	ands	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	43d9      	mvns	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b9c:	4313      	orrs	r3, r2
         );
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3724      	adds	r7, #36	; 0x24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bbc:	d301      	bcc.n	8006bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e00f      	b.n	8006be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <SysTick_Config+0x40>)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bca:	210f      	movs	r1, #15
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	f7ff ff8e 	bl	8006af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <SysTick_Config+0x40>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bda:	4b04      	ldr	r3, [pc, #16]	; (8006bec <SysTick_Config+0x40>)
 8006bdc:	2207      	movs	r2, #7
 8006bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	e000e010 	.word	0xe000e010

08006bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff29 	bl	8006a50 <__NVIC_SetPriorityGrouping>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
 8006c12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c14:	f7ff ff40 	bl	8006a98 <__NVIC_GetPriorityGrouping>
 8006c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	6978      	ldr	r0, [r7, #20]
 8006c20:	f7ff ff90 	bl	8006b44 <NVIC_EncodePriority>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff ff5f 	bl	8006af0 <__NVIC_SetPriority>
}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	4603      	mov	r3, r0
 8006c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff ff33 	bl	8006ab4 <__NVIC_EnableIRQ>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff ffa4 	bl	8006bac <SysTick_Config>
 8006c64:	4603      	mov	r3, r0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d00d      	beq.n	8006ca2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	e047      	b.n	8006d32 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 020e 	bic.w	r2, r2, #14
 8006cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	f003 021f 	and.w	r2, r3, #31
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	2101      	movs	r1, #1
 8006ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ce4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00c      	beq.n	8006d12 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
    }
  }
  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e147      	b.n	8006fde <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fd ff2a 	bl	8004bbc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0210 	bic.w	r2, r2, #16
 8006d76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d78:	f7fe fb4a 	bl	8005410 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006d7e:	e012      	b.n	8006da6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006d80:	f7fe fb46 	bl	8005410 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b0a      	cmp	r3, #10
 8006d8c:	d90b      	bls.n	8006da6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	f043 0201 	orr.w	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e11b      	b.n	8006fde <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d0e5      	beq.n	8006d80 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dc4:	f7fe fb24 	bl	8005410 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006dca:	e012      	b.n	8006df2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006dcc:	f7fe fb20 	bl	8005410 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b0a      	cmp	r3, #10
 8006dd8:	d90b      	bls.n	8006df2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dde:	f043 0201 	orr.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2203      	movs	r2, #3
 8006dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e0f5      	b.n	8006fde <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0e5      	beq.n	8006dcc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0202 	orr.w	r2, r2, #2
 8006e0e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a74      	ldr	r2, [pc, #464]	; (8006fe8 <HAL_FDCAN_Init+0x2ac>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d103      	bne.n	8006e22 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006e1a:	4a74      	ldr	r2, [pc, #464]	; (8006fec <HAL_FDCAN_Init+0x2b0>)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7c1b      	ldrb	r3, [r3, #16]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d108      	bne.n	8006e3c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e38:	619a      	str	r2, [r3, #24]
 8006e3a:	e007      	b.n	8006e4c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e4a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c5b      	ldrb	r3, [r3, #17]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d108      	bne.n	8006e66 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e62:	619a      	str	r2, [r3, #24]
 8006e64:	e007      	b.n	8006e76 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e74:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	7c9b      	ldrb	r3, [r3, #18]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d108      	bne.n	8006e90 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e8c:	619a      	str	r2, [r3, #24]
 8006e8e:	e007      	b.n	8006ea0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e9e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006ec4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0210 	bic.w	r2, r2, #16
 8006ed4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d108      	bne.n	8006ef0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0204 	orr.w	r2, r2, #4
 8006eec:	619a      	str	r2, [r3, #24]
 8006eee:	e02c      	b.n	8006f4a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d028      	beq.n	8006f4a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d01c      	beq.n	8006f3a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f0e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0210 	orr.w	r2, r2, #16
 8006f1e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d110      	bne.n	8006f4a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0220 	orr.w	r2, r2, #32
 8006f36:	619a      	str	r2, [r3, #24]
 8006f38:	e007      	b.n	8006f4a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0220 	orr.w	r2, r2, #32
 8006f48:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f5a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f62:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f72:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f74:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7e:	d115      	bne.n	8006fac <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f8e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	3b01      	subs	r3, #1
 8006f96:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f98:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fa8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006faa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fc3c 	bl	8007840 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40006400 	.word	0x40006400
 8006fec:	40006500 	.word	0x40006500

08006ff0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007000:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d002      	beq.n	800700e <HAL_FDCAN_ConfigFilter+0x1e>
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d13d      	bne.n	800708a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d119      	bne.n	800704a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007022:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800702a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e01d      	b.n	8007086 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	075a      	lsls	r2, r3, #29
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	079a      	lsls	r2, r3, #30
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	3304      	adds	r3, #4
 800707e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e006      	b.n	8007098 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	f043 0202 	orr.w	r2, r3, #2
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
  }
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d110      	bne.n	80070da <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e006      	b.n	80070e8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070de:	f043 0204 	orr.w	r2, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d12c      	bne.n	8007166 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e023      	b.n	8007174 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fbd2 	bl	80078ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2101      	movs	r1, #1
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	fa01 f202 	lsl.w	r2, r1, r2
 8007154:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007158:	2201      	movs	r2, #1
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	409a      	lsls	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e006      	b.n	8007174 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
  }
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800717c:	b480      	push	{r7}
 800717e:	b08b      	sub	sp, #44	; 0x2c
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007190:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007192:	7efb      	ldrb	r3, [r7, #27]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f040 80bc 	bne.w	8007312 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d121      	bne.n	80071e4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d107      	bne.n	80071c0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e0af      	b.n	8007320 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	440b      	add	r3, r1
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
 80071e2:	e020      	b.n	8007226 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d107      	bne.n	8007204 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e08d      	b.n	8007320 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	4613      	mov	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	440b      	add	r3, r1
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d107      	bne.n	800724a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0c9b      	lsrs	r3, r3, #18
 8007240:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e005      	b.n	8007256 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	3304      	adds	r3, #4
 8007272:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	0e1b      	lsrs	r3, r3, #24
 80072a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0fda      	lsrs	r2, r3, #31
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	3304      	adds	r3, #4
 80072be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	623b      	str	r3, [r7, #32]
 80072c8:	e00a      	b.n	80072e0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	441a      	add	r2, r3
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	440b      	add	r3, r1
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	3301      	adds	r3, #1
 80072de:	623b      	str	r3, [r7, #32]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	4a11      	ldr	r2, [pc, #68]	; (800732c <HAL_FDCAN_GetRxMessage+0x1b0>)
 80072e8:	5cd3      	ldrb	r3, [r2, r3]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d3eb      	bcc.n	80072ca <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	d105      	bne.n	8007304 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007302:	e004      	b.n	800730e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	e006      	b.n	8007320 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007316:	f043 0208 	orr.w	r2, r3, #8
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
  }
}
 8007320:	4618      	mov	r0, r3
 8007322:	372c      	adds	r7, #44	; 0x2c
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	08010160 	.word	0x08010160

08007330 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007342:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d003      	beq.n	8007352 <HAL_FDCAN_ActivateNotification+0x22>
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b02      	cmp	r3, #2
 800734e:	f040 80c8 	bne.w	80074e2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007358:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d03b      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d031      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d027      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01d      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d013      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00c      	beq.n	80073f6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d107      	bne.n	80073f6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0201 	orr.w	r2, r2, #1
 80073f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d004      	beq.n	800740a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d13b      	bne.n	8007482 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d131      	bne.n	8007482 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d127      	bne.n	8007482 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d11d      	bne.n	8007482 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b00      	cmp	r3, #0
 8007458:	d113      	bne.n	8007482 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d109      	bne.n	8007482 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0202 	orr.w	r2, r2, #2
 8007490:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d009      	beq.n	80074b0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	430a      	orrs	r2, r1
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e006      	b.n	80074f0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e6:	f043 0202 	orr.w	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
  }
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007518:	4013      	ands	r3, r2
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	6a3a      	ldr	r2, [r7, #32]
 8007530:	4013      	ands	r3, r2
 8007532:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800753e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	4013      	ands	r3, r2
 800754a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007556:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4013      	ands	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800756e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4013      	ands	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00d      	beq.n	80075a6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d006      	beq.n	80075a6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2240      	movs	r2, #64	; 0x40
 800759e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f92e 	bl	8007802 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01b      	beq.n	80075ec <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d014      	beq.n	80075ec <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075ca:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4013      	ands	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80075e4:	6939      	ldr	r1, [r7, #16]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8ec 	bl	80077c4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80075fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8b6 	bl	800776e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007610:	6a39      	ldr	r1, [r7, #32]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7f9 fcc2 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007626:	69f9      	ldr	r1, [r7, #28]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f8ab 	bl	8007784 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00e      	beq.n	800765a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007652:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f8a0 	bl	800779a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d013      	beq.n	800769e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800767e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4013      	ands	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f888 	bl	80077ae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00e      	beq.n	80076ca <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d007      	beq.n	80076ca <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f888 	bl	80077da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80076ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f87c 	bl	80077ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d011      	beq.n	8007728 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800771a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f876 	bl	800782a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f858 	bl	8007816 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007766:	bf00      	nop
 8007768:	3728      	adds	r7, #40	; 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007848:	4b27      	ldr	r3, [pc, #156]	; (80078e8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800784a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800785a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	041a      	lsls	r2, r3, #16
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007880:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	061a      	lsls	r2, r3, #24
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e005      	b.n	80078ce <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3304      	adds	r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d3f3      	bcc.n	80078c2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	4000a400 	.word	0x4000a400

080078ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b089      	sub	sp, #36	; 0x24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800790a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007912:	4313      	orrs	r3, r2
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e00a      	b.n	800792e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007920:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007926:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800792c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007938:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800793e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007944:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	4413      	add	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	440b      	add	r3, r1
 800795e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	3304      	adds	r3, #4
 800796a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	3304      	adds	r3, #4
 8007976:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007978:	2300      	movs	r3, #0
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e020      	b.n	80079c0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	3303      	adds	r3, #3
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	3302      	adds	r3, #2
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	440b      	add	r3, r1
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007996:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3301      	adds	r3, #1
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	440b      	add	r3, r1
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80079a4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	440a      	add	r2, r1
 80079ac:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80079ae:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	3304      	adds	r3, #4
 80079b8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	3304      	adds	r3, #4
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <FDCAN_CopyMessageToRAM+0xf4>)
 80079c8:	5cd3      	ldrb	r3, [r2, r3]
 80079ca:	461a      	mov	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d3d5      	bcc.n	800797e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	3724      	adds	r7, #36	; 0x24
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	08010160 	.word	0x08010160

080079e4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80079f6:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <HAL_FLASH_Program+0xa4>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <HAL_FLASH_Program+0x1e>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e03e      	b.n	8007a80 <HAL_FLASH_Program+0x9c>
 8007a02:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <HAL_FLASH_Program+0xa4>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a0c:	f000 f888 	bl	8007b20 <FLASH_WaitForLastOperation>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d12e      	bne.n	8007a78 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a1a:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <HAL_FLASH_Program+0xa4>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d107      	bne.n	8007a36 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a2a:	68b8      	ldr	r0, [r7, #8]
 8007a2c:	f000 f8cc 	bl	8007bc8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007a30:	2301      	movs	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	e010      	b.n	8007a58 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d002      	beq.n	8007a42 <HAL_FLASH_Program+0x5e>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d10a      	bne.n	8007a58 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	4619      	mov	r1, r3
 8007a46:	68b8      	ldr	r0, [r7, #8]
 8007a48:	f000 f8e4 	bl	8007c14 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d102      	bne.n	8007a58 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007a52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a56:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a5c:	f000 f860 	bl	8007b20 <FLASH_WaitForLastOperation>
 8007a60:	4603      	mov	r3, r0
 8007a62:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <HAL_FLASH_Program+0xa8>)
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	4906      	ldr	r1, [pc, #24]	; (8007a8c <HAL_FLASH_Program+0xa8>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a78:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <HAL_FLASH_Program+0xa4>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	2000000c 	.word	0x2000000c
 8007a8c:	40022000 	.word	0x40022000

08007a90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <HAL_FLASH_Unlock+0x38>)
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da0b      	bge.n	8007aba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <HAL_FLASH_Unlock+0x38>)
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <HAL_FLASH_Unlock+0x3c>)
 8007aa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007aa8:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <HAL_FLASH_Unlock+0x38>)
 8007aaa:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <HAL_FLASH_Unlock+0x40>)
 8007aac:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007aae:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <HAL_FLASH_Unlock+0x38>)
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da01      	bge.n	8007aba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007aba:	79fb      	ldrb	r3, [r7, #7]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	40022000 	.word	0x40022000
 8007acc:	45670123 	.word	0x45670123
 8007ad0:	cdef89ab 	.word	0xcdef89ab

08007ad4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <HAL_FLASH_Lock+0x30>)
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <HAL_FLASH_Lock+0x30>)
 8007ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007aea:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <HAL_FLASH_Lock+0x30>)
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da01      	bge.n	8007af6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007af6:	79fb      	ldrb	r3, [r7, #7]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	40022000 	.word	0x40022000

08007b08 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007b0c:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <HAL_FLASH_GetError+0x14>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	2000000c 	.word	0x2000000c

08007b20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007b28:	f7fd fc72 	bl	8005410 <HAL_GetTick>
 8007b2c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007b2e:	e009      	b.n	8007b44 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007b30:	f7fd fc6e 	bl	8005410 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d201      	bcs.n	8007b44 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e038      	b.n	8007bb6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007b44:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b50:	d0ee      	beq.n	8007b30 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007b52:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01e      	beq.n	8007ba2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <FLASH_WaitForLastOperation+0xa4>)
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	4a15      	ldr	r2, [pc, #84]	; (8007bc4 <FLASH_WaitForLastOperation+0xa4>)
 8007b6e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <FLASH_WaitForLastOperation+0x6a>
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b84:	490e      	ldr	r1, [pc, #56]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	618b      	str	r3, [r1, #24]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <FLASH_WaitForLastOperation+0x7e>
 8007b94:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b9c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e009      	b.n	8007bb6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d102      	bne.n	8007bb4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <FLASH_WaitForLastOperation+0xa0>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40022000 	.word	0x40022000
 8007bc4:	2000000c 	.word	0x2000000c

08007bc8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <FLASH_Program_DoubleWord+0x48>)
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <FLASH_Program_DoubleWord+0x48>)
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007be6:	f3bf 8f6f 	isb	sy
}
 8007bea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	000a      	movs	r2, r1
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	3104      	adds	r1, #4
 8007c00:	4613      	mov	r3, r2
 8007c02:	600b      	str	r3, [r1, #0]
}
 8007c04:	bf00      	nop
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	40022000 	.word	0x40022000

08007c14 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b089      	sub	sp, #36	; 0x24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007c1e:	2340      	movs	r3, #64	; 0x40
 8007c20:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007c2a:	4b14      	ldr	r3, [pc, #80]	; (8007c7c <FLASH_Program_Fast+0x68>)
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <FLASH_Program_Fast+0x68>)
 8007c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c36:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c3c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c40:	b672      	cpsid	i
}
 8007c42:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3304      	adds	r3, #4
 8007c56:	617b      	str	r3, [r7, #20]
    row_index--;
 8007c58:	7ffb      	ldrb	r3, [r7, #31]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007c5e:	7ffb      	ldrb	r3, [r7, #31]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1ef      	bne.n	8007c44 <FLASH_Program_Fast+0x30>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f383 8810 	msr	PRIMASK, r3
}
 8007c6e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007c70:	bf00      	nop
 8007c72:	3724      	adds	r7, #36	; 0x24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	40022000 	.word	0x40022000

08007c80 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007c8a:	4b47      	ldr	r3, [pc, #284]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_FLASHEx_Erase+0x16>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e083      	b.n	8007d9e <HAL_FLASHEx_Erase+0x11e>
 8007c96:	4b44      	ldr	r3, [pc, #272]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ca0:	f7ff ff3e 	bl	8007b20 <FLASH_WaitForLastOperation>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d173      	bne.n	8007d96 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cae:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007cb4:	4b3d      	ldr	r3, [pc, #244]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d013      	beq.n	8007ce8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d009      	beq.n	8007ce0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007ccc:	4b37      	ldr	r3, [pc, #220]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a36      	ldr	r2, [pc, #216]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cd6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007cd8:	4b33      	ldr	r3, [pc, #204]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007cda:	2203      	movs	r2, #3
 8007cdc:	771a      	strb	r2, [r3, #28]
 8007cde:	e016      	b.n	8007d0e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007ce0:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	771a      	strb	r2, [r3, #28]
 8007ce6:	e012      	b.n	8007d0e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007ce8:	4b30      	ldr	r3, [pc, #192]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d009      	beq.n	8007d08 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a2c      	ldr	r2, [pc, #176]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cfe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007d00:	4b29      	ldr	r3, [pc, #164]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007d02:	2202      	movs	r2, #2
 8007d04:	771a      	strb	r2, [r3, #28]
 8007d06:	e002      	b.n	8007d0e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007d08:	4b27      	ldr	r3, [pc, #156]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d111      	bne.n	8007d3a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 f848 	bl	8007db0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d24:	f7ff fefc 	bl	8007b20 <FLASH_WaitForLastOperation>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007d2c:	4b1f      	ldr	r3, [pc, #124]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	4a1e      	ldr	r2, [pc, #120]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007d32:	f023 0304 	bic.w	r3, r3, #4
 8007d36:	6153      	str	r3, [r2, #20]
 8007d38:	e02b      	b.n	8007d92 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d40:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60bb      	str	r3, [r7, #8]
 8007d48:	e01b      	b.n	8007d82 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68b8      	ldr	r0, [r7, #8]
 8007d52:	f000 f84b 	bl	8007dec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d5a:	f7ff fee1 	bl	8007b20 <FLASH_WaitForLastOperation>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007d62:	4b12      	ldr	r3, [pc, #72]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	4a11      	ldr	r2, [pc, #68]	; (8007dac <HAL_FLASHEx_Erase+0x12c>)
 8007d68:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007d6c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	601a      	str	r2, [r3, #0]
          break;
 8007d7a:	e00a      	b.n	8007d92 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d3db      	bcc.n	8007d4a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007d92:	f000 f84f 	bl	8007e34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <HAL_FLASHEx_Erase+0x128>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]

  return status;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	2000000c 	.word	0x2000000c
 8007dac:	40022000 	.word	0x40022000

08007db0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007dc2:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <FLASH_MassErase+0x38>)
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	4a08      	ldr	r2, [pc, #32]	; (8007de8 <FLASH_MassErase+0x38>)
 8007dc8:	f043 0304 	orr.w	r3, r3, #4
 8007dcc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <FLASH_MassErase+0x38>)
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	4a05      	ldr	r2, [pc, #20]	; (8007de8 <FLASH_MassErase+0x38>)
 8007dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd8:	6153      	str	r3, [r2, #20]
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40022000 	.word	0x40022000

08007dec <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007df6:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <FLASH_PageErase+0x44>)
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007e06:	490a      	ldr	r1, [pc, #40]	; (8007e30 <FLASH_PageErase+0x44>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <FLASH_PageErase+0x44>)
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	4a07      	ldr	r2, [pc, #28]	; (8007e30 <FLASH_PageErase+0x44>)
 8007e12:	f043 0302 	orr.w	r3, r3, #2
 8007e16:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <FLASH_PageErase+0x44>)
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	4a04      	ldr	r2, [pc, #16]	; (8007e30 <FLASH_PageErase+0x44>)
 8007e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e22:	6153      	str	r3, [r2, #20]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	40022000 	.word	0x40022000

08007e34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007e3a:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <FLASH_FlushCaches+0x8c>)
 8007e3c:	7f1b      	ldrb	r3, [r3, #28]
 8007e3e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d002      	beq.n	8007e4c <FLASH_FlushCaches+0x18>
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d117      	bne.n	8007e7c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e56:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e70:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a13      	ldr	r2, [pc, #76]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e7a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d002      	beq.n	8007e88 <FLASH_FlushCaches+0x54>
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d111      	bne.n	8007eac <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007e88:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a0d      	ldr	r2, [pc, #52]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a0a      	ldr	r2, [pc, #40]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e9e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ea0:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a07      	ldr	r2, [pc, #28]	; (8007ec4 <FLASH_FlushCaches+0x90>)
 8007ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007eaa:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007eac:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <FLASH_FlushCaches+0x8c>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	771a      	strb	r2, [r3, #28]
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	2000000c 	.word	0x2000000c
 8007ec4:	40022000 	.word	0x40022000

08007ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007ed6:	e15a      	b.n	800818e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	2101      	movs	r1, #1
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 814c 	beq.w	8008188 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d005      	beq.n	8007f08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d130      	bne.n	8007f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	2203      	movs	r2, #3
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f3e:	2201      	movs	r2, #1
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	f003 0201 	and.w	r2, r3, #1
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d017      	beq.n	8007fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	2203      	movs	r2, #3
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43db      	mvns	r3, r3
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d123      	bne.n	8007ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	08da      	lsrs	r2, r3, #3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3208      	adds	r2, #8
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	220f      	movs	r2, #15
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	08da      	lsrs	r2, r3, #3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3208      	adds	r2, #8
 8007ff4:	6939      	ldr	r1, [r7, #16]
 8007ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	2203      	movs	r2, #3
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	43db      	mvns	r3, r3
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4013      	ands	r3, r2
 8008010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 0203 	and.w	r2, r3, #3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80a6 	beq.w	8008188 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800803c:	4b5b      	ldr	r3, [pc, #364]	; (80081ac <HAL_GPIO_Init+0x2e4>)
 800803e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008040:	4a5a      	ldr	r2, [pc, #360]	; (80081ac <HAL_GPIO_Init+0x2e4>)
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	6613      	str	r3, [r2, #96]	; 0x60
 8008048:	4b58      	ldr	r3, [pc, #352]	; (80081ac <HAL_GPIO_Init+0x2e4>)
 800804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008054:	4a56      	ldr	r2, [pc, #344]	; (80081b0 <HAL_GPIO_Init+0x2e8>)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	089b      	lsrs	r3, r3, #2
 800805a:	3302      	adds	r3, #2
 800805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	220f      	movs	r2, #15
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	43db      	mvns	r3, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4013      	ands	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800807e:	d01f      	beq.n	80080c0 <HAL_GPIO_Init+0x1f8>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a4c      	ldr	r2, [pc, #304]	; (80081b4 <HAL_GPIO_Init+0x2ec>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d019      	beq.n	80080bc <HAL_GPIO_Init+0x1f4>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a4b      	ldr	r2, [pc, #300]	; (80081b8 <HAL_GPIO_Init+0x2f0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d013      	beq.n	80080b8 <HAL_GPIO_Init+0x1f0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a4a      	ldr	r2, [pc, #296]	; (80081bc <HAL_GPIO_Init+0x2f4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00d      	beq.n	80080b4 <HAL_GPIO_Init+0x1ec>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a49      	ldr	r2, [pc, #292]	; (80081c0 <HAL_GPIO_Init+0x2f8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d007      	beq.n	80080b0 <HAL_GPIO_Init+0x1e8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a48      	ldr	r2, [pc, #288]	; (80081c4 <HAL_GPIO_Init+0x2fc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d101      	bne.n	80080ac <HAL_GPIO_Init+0x1e4>
 80080a8:	2305      	movs	r3, #5
 80080aa:	e00a      	b.n	80080c2 <HAL_GPIO_Init+0x1fa>
 80080ac:	2306      	movs	r3, #6
 80080ae:	e008      	b.n	80080c2 <HAL_GPIO_Init+0x1fa>
 80080b0:	2304      	movs	r3, #4
 80080b2:	e006      	b.n	80080c2 <HAL_GPIO_Init+0x1fa>
 80080b4:	2303      	movs	r3, #3
 80080b6:	e004      	b.n	80080c2 <HAL_GPIO_Init+0x1fa>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e002      	b.n	80080c2 <HAL_GPIO_Init+0x1fa>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <HAL_GPIO_Init+0x1fa>
 80080c0:	2300      	movs	r3, #0
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	f002 0203 	and.w	r2, r2, #3
 80080c8:	0092      	lsls	r2, r2, #2
 80080ca:	4093      	lsls	r3, r2
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080d2:	4937      	ldr	r1, [pc, #220]	; (80081b0 <HAL_GPIO_Init+0x2e8>)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	089b      	lsrs	r3, r3, #2
 80080d8:	3302      	adds	r3, #2
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080e0:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <HAL_GPIO_Init+0x300>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4013      	ands	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008104:	4a30      	ldr	r2, [pc, #192]	; (80081c8 <HAL_GPIO_Init+0x300>)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800810a:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <HAL_GPIO_Init+0x300>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	43db      	mvns	r3, r3
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4013      	ands	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800812e:	4a26      	ldr	r2, [pc, #152]	; (80081c8 <HAL_GPIO_Init+0x300>)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008134:	4b24      	ldr	r3, [pc, #144]	; (80081c8 <HAL_GPIO_Init+0x300>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	43db      	mvns	r3, r3
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4013      	ands	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008158:	4a1b      	ldr	r2, [pc, #108]	; (80081c8 <HAL_GPIO_Init+0x300>)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800815e:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <HAL_GPIO_Init+0x300>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	43db      	mvns	r3, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4013      	ands	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008182:	4a11      	ldr	r2, [pc, #68]	; (80081c8 <HAL_GPIO_Init+0x300>)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3301      	adds	r3, #1
 800818c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	f47f ae9d 	bne.w	8007ed8 <HAL_GPIO_Init+0x10>
  }
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40021000 	.word	0x40021000
 80081b0:	40010000 	.word	0x40010000
 80081b4:	48000400 	.word	0x48000400
 80081b8:	48000800 	.word	0x48000800
 80081bc:	48000c00 	.word	0x48000c00
 80081c0:	48001000 	.word	0x48001000
 80081c4:	48001400 	.word	0x48001400
 80081c8:	40010400 	.word	0x40010400

080081cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	887b      	ldrh	r3, [r7, #2]
 80081de:	4013      	ands	r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
 80081e8:	e001      	b.n	80081ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	807b      	strh	r3, [r7, #2]
 8008208:	4613      	mov	r3, r2
 800820a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800820c:	787b      	ldrb	r3, [r7, #1]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008212:	887a      	ldrh	r2, [r7, #2]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008218:	e002      	b.n	8008220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e0bb      	b.n	80083ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b05      	cmp	r3, #5
 800824c:	d101      	bne.n	8008252 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e0b3      	b.n	80083ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d101      	bne.n	8008262 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e0ab      	b.n	80083ba <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008262:	4b58      	ldr	r3, [pc, #352]	; (80083c4 <HAL_OPAMP_Init+0x198>)
 8008264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008266:	4a57      	ldr	r2, [pc, #348]	; (80083c4 <HAL_OPAMP_Init+0x198>)
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	6613      	str	r3, [r2, #96]	; 0x60
 800826e:	4b55      	ldr	r3, [pc, #340]	; (80083c4 <HAL_OPAMP_Init+0x198>)
 8008270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	60bb      	str	r3, [r7, #8]
 8008278:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fc fcfe 	bl	8004c90 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d003      	beq.n	80082a4 <HAL_OPAMP_Init+0x78>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	2b60      	cmp	r3, #96	; 0x60
 80082a2:	d133      	bne.n	800830c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f023 0110 	bic.w	r1, r3, #16
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b41      	ldr	r3, [pc, #260]	; (80083c8 <HAL_OPAMP_Init+0x19c>)
 80082c2:	4013      	ands	r3, r2
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6851      	ldr	r1, [r2, #4]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6892      	ldr	r2, [r2, #8]
 80082cc:	4311      	orrs	r1, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6912      	ldr	r2, [r2, #16]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	7d09      	ldrb	r1, [r1, #20]
 80082d8:	2901      	cmp	r1, #1
 80082da:	d102      	bne.n	80082e2 <HAL_OPAMP_Init+0xb6>
 80082dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082e0:	e000      	b.n	80082e4 <HAL_OPAMP_Init+0xb8>
 80082e2:	2100      	movs	r1, #0
 80082e4:	4311      	orrs	r1, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082ea:	4311      	orrs	r1, r2
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80082f0:	4311      	orrs	r1, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80082f6:	04d2      	lsls	r2, r2, #19
 80082f8:	4311      	orrs	r1, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80082fe:	0612      	lsls	r2, r2, #24
 8008300:	4311      	orrs	r1, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	430b      	orrs	r3, r1
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	e035      	b.n	8008378 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 0110 	bic.w	r1, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4b27      	ldr	r3, [pc, #156]	; (80083c8 <HAL_OPAMP_Init+0x19c>)
 800832a:	4013      	ands	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6851      	ldr	r1, [r2, #4]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6892      	ldr	r2, [r2, #8]
 8008334:	4311      	orrs	r1, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	68d2      	ldr	r2, [r2, #12]
 800833a:	4311      	orrs	r1, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6912      	ldr	r2, [r2, #16]
 8008340:	430a      	orrs	r2, r1
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	7d09      	ldrb	r1, [r1, #20]
 8008346:	2901      	cmp	r1, #1
 8008348:	d102      	bne.n	8008350 <HAL_OPAMP_Init+0x124>
 800834a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800834e:	e000      	b.n	8008352 <HAL_OPAMP_Init+0x126>
 8008350:	2100      	movs	r1, #0
 8008352:	4311      	orrs	r1, r2
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008358:	4311      	orrs	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800835e:	4311      	orrs	r1, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008364:	04d2      	lsls	r2, r2, #19
 8008366:	4311      	orrs	r1, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800836c:	0612      	lsls	r2, r2, #24
 800836e:	4311      	orrs	r1, r2
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6812      	ldr	r2, [r2, #0]
 8008374:	430b      	orrs	r3, r1
 8008376:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	2b00      	cmp	r3, #0
 8008380:	db10      	blt.n	80083a4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40021000 	.word	0x40021000
 80083c8:	e0003e11 	.word	0xe0003e11

080083cc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	e01d      	b.n	8008420 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	d102      	bne.n	80083f6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e014      	b.n	8008420 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d10c      	bne.n	800841c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0201 	orr.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2204      	movs	r2, #4
 8008416:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800841a:	e001      	b.n	8008420 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d141      	bne.n	80084c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800843e:	4b4b      	ldr	r3, [pc, #300]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844a:	d131      	bne.n	80084b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800844c:	4b47      	ldr	r3, [pc, #284]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800844e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008452:	4a46      	ldr	r2, [pc, #280]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800845c:	4b43      	ldr	r3, [pc, #268]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008464:	4a41      	ldr	r2, [pc, #260]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800846a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800846c:	4b40      	ldr	r3, [pc, #256]	; (8008570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2232      	movs	r2, #50	; 0x32
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	4a3f      	ldr	r2, [pc, #252]	; (8008574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008478:	fba2 2303 	umull	r2, r3, r2, r3
 800847c:	0c9b      	lsrs	r3, r3, #18
 800847e:	3301      	adds	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008482:	e002      	b.n	800848a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3b01      	subs	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800848a:	4b38      	ldr	r3, [pc, #224]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008496:	d102      	bne.n	800849e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f2      	bne.n	8008484 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800849e:	4b33      	ldr	r3, [pc, #204]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084aa:	d158      	bne.n	800855e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e057      	b.n	8008560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084b0:	4b2e      	ldr	r3, [pc, #184]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b6:	4a2d      	ldr	r2, [pc, #180]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80084c0:	e04d      	b.n	800855e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c8:	d141      	bne.n	800854e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80084ca:	4b28      	ldr	r3, [pc, #160]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d6:	d131      	bne.n	800853c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084d8:	4b24      	ldr	r3, [pc, #144]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084de:	4a23      	ldr	r2, [pc, #140]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084e8:	4b20      	ldr	r3, [pc, #128]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084f0:	4a1e      	ldr	r2, [pc, #120]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084f8:	4b1d      	ldr	r3, [pc, #116]	; (8008570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2232      	movs	r2, #50	; 0x32
 80084fe:	fb02 f303 	mul.w	r3, r2, r3
 8008502:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008504:	fba2 2303 	umull	r2, r3, r2, r3
 8008508:	0c9b      	lsrs	r3, r3, #18
 800850a:	3301      	adds	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800850e:	e002      	b.n	8008516 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3b01      	subs	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800851e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008522:	d102      	bne.n	800852a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1f2      	bne.n	8008510 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800852a:	4b10      	ldr	r3, [pc, #64]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008536:	d112      	bne.n	800855e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e011      	b.n	8008560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800853e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008542:	4a0a      	ldr	r2, [pc, #40]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800854c:	e007      	b.n	800855e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008556:	4a05      	ldr	r2, [pc, #20]	; (800856c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800855c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	40007000 	.word	0x40007000
 8008570:	20000000 	.word	0x20000000
 8008574:	431bde83 	.word	0x431bde83

08008578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e306      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d075      	beq.n	8008682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008596:	4b97      	ldr	r3, [pc, #604]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 030c 	and.w	r3, r3, #12
 800859e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085a0:	4b94      	ldr	r3, [pc, #592]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b0c      	cmp	r3, #12
 80085ae:	d102      	bne.n	80085b6 <HAL_RCC_OscConfig+0x3e>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d002      	beq.n	80085bc <HAL_RCC_OscConfig+0x44>
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d10b      	bne.n	80085d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085bc:	4b8d      	ldr	r3, [pc, #564]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d05b      	beq.n	8008680 <HAL_RCC_OscConfig+0x108>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d157      	bne.n	8008680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e2e1      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085dc:	d106      	bne.n	80085ec <HAL_RCC_OscConfig+0x74>
 80085de:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a84      	ldr	r2, [pc, #528]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80085e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e01d      	b.n	8008628 <HAL_RCC_OscConfig+0xb0>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085f4:	d10c      	bne.n	8008610 <HAL_RCC_OscConfig+0x98>
 80085f6:	4b7f      	ldr	r3, [pc, #508]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a7e      	ldr	r2, [pc, #504]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80085fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	4b7c      	ldr	r3, [pc, #496]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a7b      	ldr	r2, [pc, #492]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	e00b      	b.n	8008628 <HAL_RCC_OscConfig+0xb0>
 8008610:	4b78      	ldr	r3, [pc, #480]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a77      	ldr	r2, [pc, #476]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	4b75      	ldr	r3, [pc, #468]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a74      	ldr	r2, [pc, #464]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d013      	beq.n	8008658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008630:	f7fc feee 	bl	8005410 <HAL_GetTick>
 8008634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008636:	e008      	b.n	800864a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008638:	f7fc feea 	bl	8005410 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b64      	cmp	r3, #100	; 0x64
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e2a6      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800864a:	4b6a      	ldr	r3, [pc, #424]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0f0      	beq.n	8008638 <HAL_RCC_OscConfig+0xc0>
 8008656:	e014      	b.n	8008682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008658:	f7fc feda 	bl	8005410 <HAL_GetTick>
 800865c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008660:	f7fc fed6 	bl	8005410 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b64      	cmp	r3, #100	; 0x64
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e292      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008672:	4b60      	ldr	r3, [pc, #384]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0xe8>
 800867e:	e000      	b.n	8008682 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d075      	beq.n	800877a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800868e:	4b59      	ldr	r3, [pc, #356]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 030c 	and.w	r3, r3, #12
 8008696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008698:	4b56      	ldr	r3, [pc, #344]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b0c      	cmp	r3, #12
 80086a6:	d102      	bne.n	80086ae <HAL_RCC_OscConfig+0x136>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d002      	beq.n	80086b4 <HAL_RCC_OscConfig+0x13c>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d11f      	bne.n	80086f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086b4:	4b4f      	ldr	r3, [pc, #316]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <HAL_RCC_OscConfig+0x154>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e265      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086cc:	4b49      	ldr	r3, [pc, #292]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	061b      	lsls	r3, r3, #24
 80086da:	4946      	ldr	r1, [pc, #280]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80086e0:	4b45      	ldr	r3, [pc, #276]	; (80087f8 <HAL_RCC_OscConfig+0x280>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fc fe47 	bl	8005378 <HAL_InitTick>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d043      	beq.n	8008778 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e251      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d023      	beq.n	8008744 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086fc:	4b3d      	ldr	r3, [pc, #244]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a3c      	ldr	r2, [pc, #240]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008708:	f7fc fe82 	bl	8005410 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008710:	f7fc fe7e 	bl	8005410 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e23a      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008722:	4b34      	ldr	r3, [pc, #208]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0f0      	beq.n	8008710 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872e:	4b31      	ldr	r3, [pc, #196]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	061b      	lsls	r3, r3, #24
 800873c:	492d      	ldr	r1, [pc, #180]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 800873e:	4313      	orrs	r3, r2
 8008740:	604b      	str	r3, [r1, #4]
 8008742:	e01a      	b.n	800877a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 800874a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800874e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fc fe5e 	bl	8005410 <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008758:	f7fc fe5a 	bl	8005410 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e216      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800876a:	4b22      	ldr	r3, [pc, #136]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x1e0>
 8008776:	e000      	b.n	800877a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d041      	beq.n	800880a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01c      	beq.n	80087c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800878e:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008794:	4a17      	ldr	r2, [pc, #92]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 8008796:	f043 0301 	orr.w	r3, r3, #1
 800879a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879e:	f7fc fe37 	bl	8005410 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087a6:	f7fc fe33 	bl	8005410 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e1ef      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80087ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0ef      	beq.n	80087a6 <HAL_RCC_OscConfig+0x22e>
 80087c6:	e020      	b.n	800880a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80087ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ce:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <HAL_RCC_OscConfig+0x27c>)
 80087d0:	f023 0301 	bic.w	r3, r3, #1
 80087d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d8:	f7fc fe1a 	bl	8005410 <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087de:	e00d      	b.n	80087fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087e0:	f7fc fe16 	bl	8005410 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d906      	bls.n	80087fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e1d2      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
 80087f2:	bf00      	nop
 80087f4:	40021000 	.word	0x40021000
 80087f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087fc:	4b8c      	ldr	r3, [pc, #560]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80087fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1ea      	bne.n	80087e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80a6 	beq.w	8008964 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008818:	2300      	movs	r3, #0
 800881a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800881c:	4b84      	ldr	r3, [pc, #528]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 800881e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <HAL_RCC_OscConfig+0x2b4>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <HAL_RCC_OscConfig+0x2b6>
 800882c:	2300      	movs	r3, #0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008832:	4b7f      	ldr	r3, [pc, #508]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008836:	4a7e      	ldr	r2, [pc, #504]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883c:	6593      	str	r3, [r2, #88]	; 0x58
 800883e:	4b7c      	ldr	r3, [pc, #496]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800884a:	2301      	movs	r3, #1
 800884c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800884e:	4b79      	ldr	r3, [pc, #484]	; (8008a34 <HAL_RCC_OscConfig+0x4bc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008856:	2b00      	cmp	r3, #0
 8008858:	d118      	bne.n	800888c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800885a:	4b76      	ldr	r3, [pc, #472]	; (8008a34 <HAL_RCC_OscConfig+0x4bc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a75      	ldr	r2, [pc, #468]	; (8008a34 <HAL_RCC_OscConfig+0x4bc>)
 8008860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008866:	f7fc fdd3 	bl	8005410 <HAL_GetTick>
 800886a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800886e:	f7fc fdcf 	bl	8005410 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e18b      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008880:	4b6c      	ldr	r3, [pc, #432]	; (8008a34 <HAL_RCC_OscConfig+0x4bc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f0      	beq.n	800886e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d108      	bne.n	80088a6 <HAL_RCC_OscConfig+0x32e>
 8008894:	4b66      	ldr	r3, [pc, #408]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889a:	4a65      	ldr	r2, [pc, #404]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088a4:	e024      	b.n	80088f0 <HAL_RCC_OscConfig+0x378>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	d110      	bne.n	80088d0 <HAL_RCC_OscConfig+0x358>
 80088ae:	4b60      	ldr	r3, [pc, #384]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	4a5e      	ldr	r2, [pc, #376]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088b6:	f043 0304 	orr.w	r3, r3, #4
 80088ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088be:	4b5c      	ldr	r3, [pc, #368]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c4:	4a5a      	ldr	r2, [pc, #360]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088ce:	e00f      	b.n	80088f0 <HAL_RCC_OscConfig+0x378>
 80088d0:	4b57      	ldr	r3, [pc, #348]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d6:	4a56      	ldr	r2, [pc, #344]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088e0:	4b53      	ldr	r3, [pc, #332]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	4a52      	ldr	r2, [pc, #328]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80088e8:	f023 0304 	bic.w	r3, r3, #4
 80088ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d016      	beq.n	8008926 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f8:	f7fc fd8a 	bl	8005410 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088fe:	e00a      	b.n	8008916 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008900:	f7fc fd86 	bl	8005410 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	f241 3288 	movw	r2, #5000	; 0x1388
 800890e:	4293      	cmp	r3, r2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e140      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008916:	4b46      	ldr	r3, [pc, #280]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0ed      	beq.n	8008900 <HAL_RCC_OscConfig+0x388>
 8008924:	e015      	b.n	8008952 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008926:	f7fc fd73 	bl	8005410 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800892c:	e00a      	b.n	8008944 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800892e:	f7fc fd6f 	bl	8005410 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	f241 3288 	movw	r2, #5000	; 0x1388
 800893c:	4293      	cmp	r3, r2
 800893e:	d901      	bls.n	8008944 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e129      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008944:	4b3a      	ldr	r3, [pc, #232]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1ed      	bne.n	800892e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008952:	7ffb      	ldrb	r3, [r7, #31]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d105      	bne.n	8008964 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008958:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	4a34      	ldr	r2, [pc, #208]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 800895e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b00      	cmp	r3, #0
 800896e:	d03c      	beq.n	80089ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01c      	beq.n	80089b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008978:	4b2d      	ldr	r3, [pc, #180]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 800897a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800897e:	4a2c      	ldr	r2, [pc, #176]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008980:	f043 0301 	orr.w	r3, r3, #1
 8008984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008988:	f7fc fd42 	bl	8005410 <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008990:	f7fc fd3e 	bl	8005410 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e0fa      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80089a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0ef      	beq.n	8008990 <HAL_RCC_OscConfig+0x418>
 80089b0:	e01b      	b.n	80089ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089b2:	4b1f      	ldr	r3, [pc, #124]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80089b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089b8:	4a1d      	ldr	r2, [pc, #116]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80089ba:	f023 0301 	bic.w	r3, r3, #1
 80089be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c2:	f7fc fd25 	bl	8005410 <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089ca:	f7fc fd21 	bl	8005410 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e0dd      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089dc:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80089de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1ef      	bne.n	80089ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 80d1 	beq.w	8008b96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089f4:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 030c 	and.w	r3, r3, #12
 80089fc:	2b0c      	cmp	r3, #12
 80089fe:	f000 808b 	beq.w	8008b18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d15e      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a0a:	4b09      	ldr	r3, [pc, #36]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a08      	ldr	r2, [pc, #32]	; (8008a30 <HAL_RCC_OscConfig+0x4b8>)
 8008a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a16:	f7fc fcfb 	bl	8005410 <HAL_GetTick>
 8008a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a1c:	e00c      	b.n	8008a38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1e:	f7fc fcf7 	bl	8005410 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d905      	bls.n	8008a38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e0b3      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
 8008a30:	40021000 	.word	0x40021000
 8008a34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a38:	4b59      	ldr	r3, [pc, #356]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1ec      	bne.n	8008a1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a44:	4b56      	ldr	r3, [pc, #344]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	4b56      	ldr	r3, [pc, #344]	; (8008ba4 <HAL_RCC_OscConfig+0x62c>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6a11      	ldr	r1, [r2, #32]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a54:	3a01      	subs	r2, #1
 8008a56:	0112      	lsls	r2, r2, #4
 8008a58:	4311      	orrs	r1, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008a5e:	0212      	lsls	r2, r2, #8
 8008a60:	4311      	orrs	r1, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a66:	0852      	lsrs	r2, r2, #1
 8008a68:	3a01      	subs	r2, #1
 8008a6a:	0552      	lsls	r2, r2, #21
 8008a6c:	4311      	orrs	r1, r2
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a72:	0852      	lsrs	r2, r2, #1
 8008a74:	3a01      	subs	r2, #1
 8008a76:	0652      	lsls	r2, r2, #25
 8008a78:	4311      	orrs	r1, r2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a7e:	06d2      	lsls	r2, r2, #27
 8008a80:	430a      	orrs	r2, r1
 8008a82:	4947      	ldr	r1, [pc, #284]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a88:	4b45      	ldr	r3, [pc, #276]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a44      	ldr	r2, [pc, #272]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a94:	4b42      	ldr	r3, [pc, #264]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4a41      	ldr	r2, [pc, #260]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7fc fcb6 	bl	8005410 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa8:	f7fc fcb2 	bl	8005410 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e06e      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aba:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0f0      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x530>
 8008ac6:	e066      	b.n	8008b96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ac8:	4b35      	ldr	r3, [pc, #212]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a34      	ldr	r2, [pc, #208]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ad2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4a31      	ldr	r2, [pc, #196]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008ae0:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	4a2e      	ldr	r2, [pc, #184]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008ae6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af0:	f7fc fc8e 	bl	8005410 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af8:	f7fc fc8a 	bl	8005410 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e046      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b0a:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x580>
 8008b16:	e03e      	b.n	8008b96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e039      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008b24:	4b1e      	ldr	r3, [pc, #120]	; (8008ba0 <HAL_RCC_OscConfig+0x628>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f003 0203 	and.w	r2, r3, #3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d12c      	bne.n	8008b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	3b01      	subs	r3, #1
 8008b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d123      	bne.n	8008b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d11b      	bne.n	8008b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d113      	bne.n	8008b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	3b01      	subs	r3, #1
 8008b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d109      	bne.n	8008b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d001      	beq.n	8008b96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3720      	adds	r7, #32
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40021000 	.word	0x40021000
 8008ba4:	019f800c 	.word	0x019f800c

08008ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e11e      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bc0:	4b91      	ldr	r3, [pc, #580]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d910      	bls.n	8008bf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bce:	4b8e      	ldr	r3, [pc, #568]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f023 020f 	bic.w	r2, r3, #15
 8008bd6:	498c      	ldr	r1, [pc, #560]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bde:	4b8a      	ldr	r3, [pc, #552]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d001      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e106      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d073      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d129      	bne.n	8008c58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c04:	4b81      	ldr	r3, [pc, #516]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0f4      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008c14:	f000 f99e 	bl	8008f54 <RCC_GetSysClockFreqFromPLLSource>
 8008c18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	4a7c      	ldr	r2, [pc, #496]	; (8008e10 <HAL_RCC_ClockConfig+0x268>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d93f      	bls.n	8008ca2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c22:	4b7a      	ldr	r3, [pc, #488]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d033      	beq.n	8008ca2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d12f      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c42:	4b72      	ldr	r3, [pc, #456]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c4a:	4a70      	ldr	r2, [pc, #448]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c52:	2380      	movs	r3, #128	; 0x80
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e024      	b.n	8008ca2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d107      	bne.n	8008c70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c60:	4b6a      	ldr	r3, [pc, #424]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e0c6      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c70:	4b66      	ldr	r3, [pc, #408]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0be      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008c80:	f000 f8ce 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 8008c84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	4a61      	ldr	r2, [pc, #388]	; (8008e10 <HAL_RCC_ClockConfig+0x268>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d909      	bls.n	8008ca2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c8e:	4b5f      	ldr	r3, [pc, #380]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c96:	4a5d      	ldr	r2, [pc, #372]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008c9e:	2380      	movs	r3, #128	; 0x80
 8008ca0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ca2:	4b5a      	ldr	r3, [pc, #360]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f023 0203 	bic.w	r2, r3, #3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	4957      	ldr	r1, [pc, #348]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb4:	f7fc fbac 	bl	8005410 <HAL_GetTick>
 8008cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cba:	e00a      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cbc:	f7fc fba8 	bl	8005410 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e095      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cd2:	4b4e      	ldr	r3, [pc, #312]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 020c 	and.w	r2, r3, #12
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d1eb      	bne.n	8008cbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d023      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cfc:	4b43      	ldr	r3, [pc, #268]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	4a42      	ldr	r2, [pc, #264]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008d14:	4b3d      	ldr	r3, [pc, #244]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d1c:	4a3b      	ldr	r2, [pc, #236]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d24:	4b39      	ldr	r3, [pc, #228]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	4936      	ldr	r1, [pc, #216]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	608b      	str	r3, [r1, #8]
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b80      	cmp	r3, #128	; 0x80
 8008d3c:	d105      	bne.n	8008d4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008d3e:	4b33      	ldr	r3, [pc, #204]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4a32      	ldr	r2, [pc, #200]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d4a:	4b2f      	ldr	r3, [pc, #188]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d21d      	bcs.n	8008d94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d58:	4b2b      	ldr	r3, [pc, #172]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f023 020f 	bic.w	r2, r3, #15
 8008d60:	4929      	ldr	r1, [pc, #164]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d68:	f7fc fb52 	bl	8005410 <HAL_GetTick>
 8008d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d6e:	e00a      	b.n	8008d86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d70:	f7fc fb4e 	bl	8005410 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e03b      	b.n	8008dfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d86:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <HAL_RCC_ClockConfig+0x260>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 030f 	and.w	r3, r3, #15
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d1ed      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d008      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008da0:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	4917      	ldr	r1, [pc, #92]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dbe:	4b13      	ldr	r3, [pc, #76]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	490f      	ldr	r1, [pc, #60]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008dd2:	f000 f825 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <HAL_RCC_ClockConfig+0x264>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	091b      	lsrs	r3, r3, #4
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	490c      	ldr	r1, [pc, #48]	; (8008e14 <HAL_RCC_ClockConfig+0x26c>)
 8008de4:	5ccb      	ldrb	r3, [r1, r3]
 8008de6:	f003 031f 	and.w	r3, r3, #31
 8008dea:	fa22 f303 	lsr.w	r3, r2, r3
 8008dee:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <HAL_RCC_ClockConfig+0x270>)
 8008df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_RCC_ClockConfig+0x274>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fc fabe 	bl	8005378 <HAL_InitTick>
 8008dfc:	4603      	mov	r3, r0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	40022000 	.word	0x40022000
 8008e0c:	40021000 	.word	0x40021000
 8008e10:	04c4b400 	.word	0x04c4b400
 8008e14:	08010148 	.word	0x08010148
 8008e18:	20000000 	.word	0x20000000
 8008e1c:	20000004 	.word	0x20000004

08008e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008e26:	4b2c      	ldr	r3, [pc, #176]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f003 030c 	and.w	r3, r3, #12
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d102      	bne.n	8008e38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e32:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	e047      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008e38:	4b27      	ldr	r3, [pc, #156]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f003 030c 	and.w	r3, r3, #12
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d102      	bne.n	8008e4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e44:	4b26      	ldr	r3, [pc, #152]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	e03e      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e4a:	4b23      	ldr	r3, [pc, #140]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 030c 	and.w	r3, r3, #12
 8008e52:	2b0c      	cmp	r3, #12
 8008e54:	d136      	bne.n	8008ec4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e56:	4b20      	ldr	r3, [pc, #128]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e60:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	091b      	lsrs	r3, r3, #4
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d10c      	bne.n	8008e8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e74:	4a1a      	ldr	r2, [pc, #104]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7c:	4a16      	ldr	r2, [pc, #88]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e7e:	68d2      	ldr	r2, [r2, #12]
 8008e80:	0a12      	lsrs	r2, r2, #8
 8008e82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	617b      	str	r3, [r7, #20]
      break;
 8008e8c:	e00c      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e8e:	4a13      	ldr	r2, [pc, #76]	; (8008edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	4a10      	ldr	r2, [pc, #64]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e98:	68d2      	ldr	r2, [r2, #12]
 8008e9a:	0a12      	lsrs	r2, r2, #8
 8008e9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ea0:	fb02 f303 	mul.w	r3, r2, r3
 8008ea4:	617b      	str	r3, [r7, #20]
      break;
 8008ea6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	0e5b      	lsrs	r3, r3, #25
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec0:	613b      	str	r3, [r7, #16]
 8008ec2:	e001      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008ec8:	693b      	ldr	r3, [r7, #16]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	00f42400 	.word	0x00f42400
 8008ee0:	007a1200 	.word	0x007a1200

08008ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ee8:	4b03      	ldr	r3, [pc, #12]	; (8008ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008eea:	681b      	ldr	r3, [r3, #0]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000000 	.word	0x20000000

08008efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f00:	f7ff fff0 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f04:	4602      	mov	r2, r0
 8008f06:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	4904      	ldr	r1, [pc, #16]	; (8008f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f12:	5ccb      	ldrb	r3, [r1, r3]
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	40021000 	.word	0x40021000
 8008f24:	08010158 	.word	0x08010158

08008f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f2c:	f7ff ffda 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f30:	4602      	mov	r2, r0
 8008f32:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	0adb      	lsrs	r3, r3, #11
 8008f38:	f003 0307 	and.w	r3, r3, #7
 8008f3c:	4904      	ldr	r1, [pc, #16]	; (8008f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f3e:	5ccb      	ldrb	r3, [r1, r3]
 8008f40:	f003 031f 	and.w	r3, r3, #31
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	40021000 	.word	0x40021000
 8008f50:	08010158 	.word	0x08010158

08008f54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f5a:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f64:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	3301      	adds	r3, #1
 8008f70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d10c      	bne.n	8008f92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f78:	4a17      	ldr	r2, [pc, #92]	; (8008fd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	4a14      	ldr	r2, [pc, #80]	; (8008fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f82:	68d2      	ldr	r2, [r2, #12]
 8008f84:	0a12      	lsrs	r2, r2, #8
 8008f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f8a:	fb02 f303 	mul.w	r3, r2, r3
 8008f8e:	617b      	str	r3, [r7, #20]
    break;
 8008f90:	e00c      	b.n	8008fac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9a:	4a0e      	ldr	r2, [pc, #56]	; (8008fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f9c:	68d2      	ldr	r2, [r2, #12]
 8008f9e:	0a12      	lsrs	r2, r2, #8
 8008fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fa4:	fb02 f303 	mul.w	r3, r2, r3
 8008fa8:	617b      	str	r3, [r7, #20]
    break;
 8008faa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	0e5b      	lsrs	r3, r3, #25
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008fc6:	687b      	ldr	r3, [r7, #4]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	40021000 	.word	0x40021000
 8008fd8:	007a1200 	.word	0x007a1200
 8008fdc:	00f42400 	.word	0x00f42400

08008fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fe8:	2300      	movs	r3, #0
 8008fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fec:	2300      	movs	r3, #0
 8008fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8098 	beq.w	800912e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ffe:	2300      	movs	r3, #0
 8009000:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009002:	4b43      	ldr	r3, [pc, #268]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10d      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800900e:	4b40      	ldr	r3, [pc, #256]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009012:	4a3f      	ldr	r2, [pc, #252]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009018:	6593      	str	r3, [r2, #88]	; 0x58
 800901a:	4b3d      	ldr	r3, [pc, #244]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800901c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009022:	60bb      	str	r3, [r7, #8]
 8009024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009026:	2301      	movs	r3, #1
 8009028:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800902a:	4b3a      	ldr	r3, [pc, #232]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a39      	ldr	r2, [pc, #228]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009036:	f7fc f9eb 	bl	8005410 <HAL_GetTick>
 800903a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800903c:	e009      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800903e:	f7fc f9e7 	bl	8005410 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	d902      	bls.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	74fb      	strb	r3, [r7, #19]
        break;
 8009050:	e005      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009052:	4b30      	ldr	r3, [pc, #192]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0ef      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800905e:	7cfb      	ldrb	r3, [r7, #19]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d159      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009064:	4b2a      	ldr	r3, [pc, #168]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800906a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d01e      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	429a      	cmp	r2, r3
 800907e:	d019      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009080:	4b23      	ldr	r3, [pc, #140]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800908c:	4b20      	ldr	r3, [pc, #128]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800908e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800909c:	4b1c      	ldr	r3, [pc, #112]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a2:	4a1b      	ldr	r2, [pc, #108]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090ac:	4a18      	ldr	r2, [pc, #96]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d016      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090be:	f7fc f9a7 	bl	8005410 <HAL_GetTick>
 80090c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090c4:	e00b      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090c6:	f7fc f9a3 	bl	8005410 <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d902      	bls.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	74fb      	strb	r3, [r7, #19]
            break;
 80090dc:	e006      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090de:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0ec      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80090ec:	7cfb      	ldrb	r3, [r7, #19]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10b      	bne.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090f2:	4b07      	ldr	r3, [pc, #28]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009100:	4903      	ldr	r1, [pc, #12]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009102:	4313      	orrs	r3, r2
 8009104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009108:	e008      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800910a:	7cfb      	ldrb	r3, [r7, #19]
 800910c:	74bb      	strb	r3, [r7, #18]
 800910e:	e005      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009110:	40021000 	.word	0x40021000
 8009114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009118:	7cfb      	ldrb	r3, [r7, #19]
 800911a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800911c:	7c7b      	ldrb	r3, [r7, #17]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d105      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009122:	4ba6      	ldr	r3, [pc, #664]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009126:	4aa5      	ldr	r2, [pc, #660]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800912c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800913a:	4ba0      	ldr	r3, [pc, #640]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009140:	f023 0203 	bic.w	r2, r3, #3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	499c      	ldr	r1, [pc, #624]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800914a:	4313      	orrs	r3, r2
 800914c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800915c:	4b97      	ldr	r3, [pc, #604]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800915e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009162:	f023 020c 	bic.w	r2, r3, #12
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	4994      	ldr	r1, [pc, #592]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800916c:	4313      	orrs	r3, r2
 800916e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800917e:	4b8f      	ldr	r3, [pc, #572]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	498b      	ldr	r1, [pc, #556]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800918e:	4313      	orrs	r3, r2
 8009190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0308 	and.w	r3, r3, #8
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091a0:	4b86      	ldr	r3, [pc, #536]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	4983      	ldr	r1, [pc, #524]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091c2:	4b7e      	ldr	r3, [pc, #504]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	497a      	ldr	r1, [pc, #488]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091e4:	4b75      	ldr	r3, [pc, #468]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	4972      	ldr	r1, [pc, #456]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009206:	4b6d      	ldr	r3, [pc, #436]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	4969      	ldr	r1, [pc, #420]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009216:	4313      	orrs	r3, r2
 8009218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009228:	4b64      	ldr	r3, [pc, #400]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	4961      	ldr	r1, [pc, #388]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009238:	4313      	orrs	r3, r2
 800923a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800924a:	4b5c      	ldr	r3, [pc, #368]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	4958      	ldr	r1, [pc, #352]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800925a:	4313      	orrs	r3, r2
 800925c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009268:	2b00      	cmp	r3, #0
 800926a:	d015      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800926c:	4b53      	ldr	r3, [pc, #332]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	4950      	ldr	r1, [pc, #320]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800927c:	4313      	orrs	r3, r2
 800927e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800928a:	d105      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800928c:	4b4b      	ldr	r3, [pc, #300]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	4a4a      	ldr	r2, [pc, #296]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d015      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092a4:	4b45      	ldr	r3, [pc, #276]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	4942      	ldr	r1, [pc, #264]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c2:	d105      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092c4:	4b3d      	ldr	r3, [pc, #244]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4a3c      	ldr	r2, [pc, #240]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d015      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092dc:	4b37      	ldr	r3, [pc, #220]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	4934      	ldr	r1, [pc, #208]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092fa:	d105      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092fc:	4b2f      	ldr	r3, [pc, #188]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	4a2e      	ldr	r2, [pc, #184]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009306:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d015      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009314:	4b29      	ldr	r3, [pc, #164]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800931a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009322:	4926      	ldr	r1, [pc, #152]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009324:	4313      	orrs	r3, r2
 8009326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009332:	d105      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009334:	4b21      	ldr	r3, [pc, #132]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	4a20      	ldr	r2, [pc, #128]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800933a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800933e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d015      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800934c:	4b1b      	ldr	r3, [pc, #108]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	4918      	ldr	r1, [pc, #96]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800936a:	d105      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800936c:	4b13      	ldr	r3, [pc, #76]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4a12      	ldr	r2, [pc, #72]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009376:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d015      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800938a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009392:	490a      	ldr	r1, [pc, #40]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009394:	4313      	orrs	r3, r2
 8009396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a2:	d105      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4a04      	ldr	r2, [pc, #16]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80093b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	40021000 	.word	0x40021000

080093c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e09d      	b.n	800950e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d108      	bne.n	80093ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093e2:	d009      	beq.n	80093f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	61da      	str	r2, [r3, #28]
 80093ea:	e005      	b.n	80093f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fb fcb2 	bl	8004d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009438:	d902      	bls.n	8009440 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e002      	b.n	8009446 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009444:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800944e:	d007      	beq.n	8009460 <HAL_SPI_Init+0xa0>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009458:	d002      	beq.n	8009460 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800948e:	431a      	orrs	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009498:	431a      	orrs	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	ea42 0103 	orr.w	r1, r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	0c1b      	lsrs	r3, r3, #16
 80094bc:	f003 0204 	and.w	r2, r3, #4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80094dc:	ea42 0103 	orr.w	r1, r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_SPI_TransmitReceive_IT+0x20>
 8009534:	2302      	movs	r3, #2
 8009536:	e091      	b.n	800965c <HAL_SPI_TransmitReceive_IT+0x144>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009546:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800954e:	7dbb      	ldrb	r3, [r7, #22]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d00d      	beq.n	8009570 <HAL_SPI_TransmitReceive_IT+0x58>
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800955a:	d106      	bne.n	800956a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <HAL_SPI_TransmitReceive_IT+0x52>
 8009564:	7dbb      	ldrb	r3, [r7, #22]
 8009566:	2b04      	cmp	r3, #4
 8009568:	d002      	beq.n	8009570 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800956a:	2302      	movs	r3, #2
 800956c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800956e:	e070      	b.n	8009652 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <HAL_SPI_TransmitReceive_IT+0x6a>
 800957c:	887b      	ldrh	r3, [r7, #2]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009586:	e064      	b.n	8009652 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b04      	cmp	r3, #4
 8009592:	d003      	beq.n	800959c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2205      	movs	r2, #5
 8009598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	887a      	ldrh	r2, [r7, #2]
 80095ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	887a      	ldrh	r2, [r7, #2]
 80095b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	887a      	ldrh	r2, [r7, #2]
 80095be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	887a      	ldrh	r2, [r7, #2]
 80095c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095d2:	d906      	bls.n	80095e2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4a24      	ldr	r2, [pc, #144]	; (8009668 <HAL_SPI_TransmitReceive_IT+0x150>)
 80095d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4a23      	ldr	r2, [pc, #140]	; (800966c <HAL_SPI_TransmitReceive_IT+0x154>)
 80095de:	651a      	str	r2, [r3, #80]	; 0x50
 80095e0:	e005      	b.n	80095ee <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4a22      	ldr	r2, [pc, #136]	; (8009670 <HAL_SPI_TransmitReceive_IT+0x158>)
 80095e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a22      	ldr	r2, [pc, #136]	; (8009674 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80095ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095f6:	d802      	bhi.n	80095fe <HAL_SPI_TransmitReceive_IT+0xe6>
 80095f8:	887b      	ldrh	r3, [r7, #2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d908      	bls.n	8009610 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	e007      	b.n	8009620 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800961e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800962e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d008      	beq.n	8009650 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e000      	b.n	8009652 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009650:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800965a:	7dfb      	ldrb	r3, [r7, #23]
}
 800965c:	4618      	mov	r0, r3
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	08009a1b 	.word	0x08009a1b
 800966c:	08009a81 	.word	0x08009a81
 8009670:	080098cb 	.word	0x080098cb
 8009674:	08009989 	.word	0x08009989

08009678 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	099b      	lsrs	r3, r3, #6
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10f      	bne.n	80096bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	099b      	lsrs	r3, r3, #6
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
    return;
 80096ba:	e0d7      	b.n	800986c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	085b      	lsrs	r3, r3, #1
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <HAL_SPI_IRQHandler+0x66>
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	09db      	lsrs	r3, r3, #7
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
    return;
 80096dc:	e0c6      	b.n	800986c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10c      	bne.n	8009704 <HAL_SPI_IRQHandler+0x8c>
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	099b      	lsrs	r3, r3, #6
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	0a1b      	lsrs	r3, r3, #8
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 80b4 	beq.w	800986c <HAL_SPI_IRQHandler+0x1f4>
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 80ad 	beq.w	800986c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	099b      	lsrs	r3, r3, #6
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d023      	beq.n	8009766 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b03      	cmp	r3, #3
 8009728:	d011      	beq.n	800974e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972e:	f043 0204 	orr.w	r2, r3, #4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	e00b      	b.n	8009766 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800974e:	2300      	movs	r3, #0
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	613b      	str	r3, [r7, #16]
 8009762:	693b      	ldr	r3, [r7, #16]
        return;
 8009764:	e082      	b.n	800986c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	095b      	lsrs	r3, r3, #5
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d014      	beq.n	800979c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009776:	f043 0201 	orr.w	r2, r3, #1
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00c      	beq.n	80097c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ac:	f043 0208 	orr.w	r2, r3, #8
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80097b4:	2300      	movs	r3, #0
 80097b6:	60bb      	str	r3, [r7, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	60bb      	str	r3, [r7, #8]
 80097c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d04f      	beq.n	800986a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <HAL_SPI_IRQHandler+0x17e>
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d034      	beq.n	8009860 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f022 0203 	bic.w	r2, r2, #3
 8009804:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009812:	4a18      	ldr	r2, [pc, #96]	; (8009874 <HAL_SPI_IRQHandler+0x1fc>)
 8009814:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981a:	4618      	mov	r0, r3
 800981c:	f7fd fa27 	bl	8006c6e <HAL_DMA_Abort_IT>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800982a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009836:	2b00      	cmp	r3, #0
 8009838:	d016      	beq.n	8009868 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	4a0d      	ldr	r2, [pc, #52]	; (8009874 <HAL_SPI_IRQHandler+0x1fc>)
 8009840:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009846:	4618      	mov	r0, r3
 8009848:	f7fd fa11 	bl	8006c6e <HAL_DMA_Abort_IT>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800985e:	e003      	b.n	8009868 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f813 	bl	800988c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009866:	e000      	b.n	800986a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009868:	bf00      	nop
    return;
 800986a:	bf00      	nop
  }
}
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	080098a1 	.word	0x080098a1

08009878 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff ffe5 	bl	800988c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098d8:	b29b      	uxth	r3, r3
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d923      	bls.n	8009926 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	b292      	uxth	r2, r2
 80098ea:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	1c9a      	adds	r2, r3, #2
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	3b02      	subs	r3, #2
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800990e:	b29b      	uxth	r3, r3
 8009910:	2b01      	cmp	r3, #1
 8009912:	d11f      	bne.n	8009954 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009922:	605a      	str	r2, [r3, #4]
 8009924:	e016      	b.n	8009954 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f103 020c 	add.w	r2, r3, #12
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	7812      	ldrb	r2, [r2, #0]
 8009934:	b2d2      	uxtb	r2, r2
 8009936:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29a      	uxth	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10f      	bne.n	8009980 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800996e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009974:	b29b      	uxth	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa14 	bl	8009da8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b01      	cmp	r3, #1
 8009998:	d912      	bls.n	80099c0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	881a      	ldrh	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	1c9a      	adds	r2, r3, #2
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b02      	subs	r3, #2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099be:	e012      	b.n	80099e6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	330c      	adds	r3, #12
 80099ca:	7812      	ldrb	r2, [r2, #0]
 80099cc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b01      	subs	r3, #1
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d110      	bne.n	8009a12 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099fe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f9cb 	bl	8009da8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	b292      	uxth	r2, r2
 8009a2e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	1c9a      	adds	r2, r3, #2
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10f      	bne.n	8009a78 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a66:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f998 	bl	8009da8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	881a      	ldrh	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a98:	1c9a      	adds	r2, r3, #2
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d110      	bne.n	8009ad8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ac4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d102      	bne.n	8009ad8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f968 	bl	8009da8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	4613      	mov	r3, r2
 8009aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009af0:	f7fb fc8e 	bl	8005410 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	4413      	add	r3, r2
 8009afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b00:	f7fb fc86 	bl	8005410 <HAL_GetTick>
 8009b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b06:	4b39      	ldr	r3, [pc, #228]	; (8009bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	015b      	lsls	r3, r3, #5
 8009b0c:	0d1b      	lsrs	r3, r3, #20
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	fb02 f303 	mul.w	r3, r2, r3
 8009b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b16:	e054      	b.n	8009bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d050      	beq.n	8009bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b20:	f7fb fc76 	bl	8005410 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d902      	bls.n	8009b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d13d      	bne.n	8009bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b4e:	d111      	bne.n	8009b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b58:	d004      	beq.n	8009b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b62:	d107      	bne.n	8009b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b7c:	d10f      	bne.n	8009b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e017      	b.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	bf0c      	ite	eq
 8009bd2:	2301      	moveq	r3, #1
 8009bd4:	2300      	movne	r3, #0
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	461a      	mov	r2, r3
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d19b      	bne.n	8009b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000000 	.word	0x20000000

08009bf0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	; 0x28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c02:	f7fb fc05 	bl	8005410 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	1a9b      	subs	r3, r3, r2
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	4413      	add	r3, r2
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009c12:	f7fb fbfd 	bl	8005410 <HAL_GetTick>
 8009c16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c20:	4b3d      	ldr	r3, [pc, #244]	; (8009d18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	00da      	lsls	r2, r3, #3
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	0d1b      	lsrs	r3, r3, #20
 8009c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c32:	fb02 f303 	mul.w	r3, r2, r3
 8009c36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c38:	e060      	b.n	8009cfc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009c40:	d107      	bne.n	8009c52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c58:	d050      	beq.n	8009cfc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c5a:	f7fb fbd9 	bl	8005410 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d902      	bls.n	8009c70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d13d      	bne.n	8009cec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c88:	d111      	bne.n	8009cae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c92:	d004      	beq.n	8009c9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c9c:	d107      	bne.n	8009cae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb6:	d10f      	bne.n	8009cd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e010      	b.n	8009d0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d196      	bne.n	8009c3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3728      	adds	r7, #40	; 0x28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000000 	.word	0x20000000

08009d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f7ff ff5b 	bl	8009bf0 <SPI_WaitFifoStateUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d44:	f043 0220 	orr.w	r2, r3, #32
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e027      	b.n	8009da0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2200      	movs	r2, #0
 8009d58:	2180      	movs	r1, #128	; 0x80
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff fec0 	bl	8009ae0 <SPI_WaitFlagStateUntilTimeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d007      	beq.n	8009d76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d6a:	f043 0220 	orr.w	r2, r3, #32
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e014      	b.n	8009da0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff ff34 	bl	8009bf0 <SPI_WaitFifoStateUntilTimeout>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d007      	beq.n	8009d9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d92:	f043 0220 	orr.w	r2, r3, #32
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e000      	b.n	8009da0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009db0:	f7fb fb2e 	bl	8005410 <HAL_GetTick>
 8009db4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0220 	bic.w	r2, r2, #32
 8009dc4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	2164      	movs	r1, #100	; 0x64
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff ffa6 	bl	8009d1c <SPI_EndRxTxTransaction>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dda:	f043 0220 	orr.w	r2, r3, #32
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d115      	bne.n	8009e16 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d107      	bne.n	8009e06 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff fd3a 	bl	8009878 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009e04:	e00e      	b.n	8009e24 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7f7 f912 	bl	8001038 <HAL_SPI_TxRxCpltCallback>
}
 8009e14:	e006      	b.n	8009e24 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fd34 	bl	800988c <HAL_SPI_ErrorCallback>
}
 8009e24:	bf00      	nop
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e049      	b.n	8009ed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7fa ffde 	bl	8004e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	f000 fe1a 	bl	800aaa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d001      	beq.n	8009ef4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e042      	b.n	8009f7a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a21      	ldr	r2, [pc, #132]	; (8009f88 <HAL_TIM_Base_Start+0xac>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d018      	beq.n	8009f38 <HAL_TIM_Base_Start+0x5c>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f0e:	d013      	beq.n	8009f38 <HAL_TIM_Base_Start+0x5c>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1d      	ldr	r2, [pc, #116]	; (8009f8c <HAL_TIM_Base_Start+0xb0>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00e      	beq.n	8009f38 <HAL_TIM_Base_Start+0x5c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1c      	ldr	r2, [pc, #112]	; (8009f90 <HAL_TIM_Base_Start+0xb4>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d009      	beq.n	8009f38 <HAL_TIM_Base_Start+0x5c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <HAL_TIM_Base_Start+0xb8>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d004      	beq.n	8009f38 <HAL_TIM_Base_Start+0x5c>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a19      	ldr	r2, [pc, #100]	; (8009f98 <HAL_TIM_Base_Start+0xbc>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d115      	bne.n	8009f64 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	4b17      	ldr	r3, [pc, #92]	; (8009f9c <HAL_TIM_Base_Start+0xc0>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b06      	cmp	r3, #6
 8009f48:	d015      	beq.n	8009f76 <HAL_TIM_Base_Start+0x9a>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f50:	d011      	beq.n	8009f76 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0201 	orr.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f62:	e008      	b.n	8009f76 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 0201 	orr.w	r2, r2, #1
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	e000      	b.n	8009f78 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40012c00 	.word	0x40012c00
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40013400 	.word	0x40013400
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	00010007 	.word	0x00010007

08009fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d001      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e04a      	b.n	800a04e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a21      	ldr	r2, [pc, #132]	; (800a05c <HAL_TIM_Base_Start_IT+0xbc>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d018      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x6c>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe2:	d013      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x6c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1d      	ldr	r2, [pc, #116]	; (800a060 <HAL_TIM_Base_Start_IT+0xc0>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00e      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x6c>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1c      	ldr	r2, [pc, #112]	; (800a064 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d009      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x6c>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1a      	ldr	r2, [pc, #104]	; (800a068 <HAL_TIM_Base_Start_IT+0xc8>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d004      	beq.n	800a00c <HAL_TIM_Base_Start_IT+0x6c>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a19      	ldr	r2, [pc, #100]	; (800a06c <HAL_TIM_Base_Start_IT+0xcc>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d115      	bne.n	800a038 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	4b17      	ldr	r3, [pc, #92]	; (800a070 <HAL_TIM_Base_Start_IT+0xd0>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b06      	cmp	r3, #6
 800a01c:	d015      	beq.n	800a04a <HAL_TIM_Base_Start_IT+0xaa>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a024:	d011      	beq.n	800a04a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f042 0201 	orr.w	r2, r2, #1
 800a034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a036:	e008      	b.n	800a04a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0201 	orr.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e000      	b.n	800a04c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40012c00 	.word	0x40012c00
 800a060:	40000400 	.word	0x40000400
 800a064:	40000800 	.word	0x40000800
 800a068:	40013400 	.word	0x40013400
 800a06c:	40014000 	.word	0x40014000
 800a070:	00010007 	.word	0x00010007

0800a074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e049      	b.n	800a11a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f841 	bl	800a122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f000 fcf6 	bl	800aaa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_TIM_PWM_Start+0x24>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e03c      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d109      	bne.n	800a176 <HAL_TIM_PWM_Start+0x3e>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf14      	ite	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	2300      	moveq	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	e02f      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d109      	bne.n	800a190 <HAL_TIM_PWM_Start+0x58>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e022      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2b0c      	cmp	r3, #12
 800a194:	d109      	bne.n	800a1aa <HAL_TIM_PWM_Start+0x72>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	bf14      	ite	ne
 800a1a2:	2301      	movne	r3, #1
 800a1a4:	2300      	moveq	r3, #0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	e015      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d109      	bne.n	800a1c4 <HAL_TIM_PWM_Start+0x8c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	e008      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e097      	b.n	800a30e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <HAL_TIM_PWM_Start+0xb6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1ec:	e023      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d104      	bne.n	800a1fe <HAL_TIM_PWM_Start+0xc6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1fc:	e01b      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b08      	cmp	r3, #8
 800a202:	d104      	bne.n	800a20e <HAL_TIM_PWM_Start+0xd6>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a20c:	e013      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d104      	bne.n	800a21e <HAL_TIM_PWM_Start+0xe6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a21c:	e00b      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b10      	cmp	r3, #16
 800a222:	d104      	bne.n	800a22e <HAL_TIM_PWM_Start+0xf6>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a22c:	e003      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2202      	movs	r2, #2
 800a232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2201      	movs	r2, #1
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 f852 	bl	800b2e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a33      	ldr	r2, [pc, #204]	; (800a318 <HAL_TIM_PWM_Start+0x1e0>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d013      	beq.n	800a276 <HAL_TIM_PWM_Start+0x13e>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a32      	ldr	r2, [pc, #200]	; (800a31c <HAL_TIM_PWM_Start+0x1e4>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d00e      	beq.n	800a276 <HAL_TIM_PWM_Start+0x13e>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a30      	ldr	r2, [pc, #192]	; (800a320 <HAL_TIM_PWM_Start+0x1e8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d009      	beq.n	800a276 <HAL_TIM_PWM_Start+0x13e>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a2f      	ldr	r2, [pc, #188]	; (800a324 <HAL_TIM_PWM_Start+0x1ec>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d004      	beq.n	800a276 <HAL_TIM_PWM_Start+0x13e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a2d      	ldr	r2, [pc, #180]	; (800a328 <HAL_TIM_PWM_Start+0x1f0>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d101      	bne.n	800a27a <HAL_TIM_PWM_Start+0x142>
 800a276:	2301      	movs	r3, #1
 800a278:	e000      	b.n	800a27c <HAL_TIM_PWM_Start+0x144>
 800a27a:	2300      	movs	r3, #0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a28e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a20      	ldr	r2, [pc, #128]	; (800a318 <HAL_TIM_PWM_Start+0x1e0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d018      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x194>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a2:	d013      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x194>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a20      	ldr	r2, [pc, #128]	; (800a32c <HAL_TIM_PWM_Start+0x1f4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d00e      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x194>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <HAL_TIM_PWM_Start+0x1f8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d009      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x194>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a17      	ldr	r2, [pc, #92]	; (800a31c <HAL_TIM_PWM_Start+0x1e4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d004      	beq.n	800a2cc <HAL_TIM_PWM_Start+0x194>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a16      	ldr	r2, [pc, #88]	; (800a320 <HAL_TIM_PWM_Start+0x1e8>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d115      	bne.n	800a2f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689a      	ldr	r2, [r3, #8]
 800a2d2:	4b18      	ldr	r3, [pc, #96]	; (800a334 <HAL_TIM_PWM_Start+0x1fc>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b06      	cmp	r3, #6
 800a2dc:	d015      	beq.n	800a30a <HAL_TIM_PWM_Start+0x1d2>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e4:	d011      	beq.n	800a30a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f042 0201 	orr.w	r2, r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f6:	e008      	b.n	800a30a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0201 	orr.w	r2, r2, #1
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	e000      	b.n	800a30c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a30a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	40012c00 	.word	0x40012c00
 800a31c:	40013400 	.word	0x40013400
 800a320:	40014000 	.word	0x40014000
 800a324:	40014400 	.word	0x40014400
 800a328:	40014800 	.word	0x40014800
 800a32c:	40000400 	.word	0x40000400
 800a330:	40000800 	.word	0x40000800
 800a334:	00010007 	.word	0x00010007

0800a338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d122      	bne.n	800a394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d11b      	bne.n	800a394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f06f 0202 	mvn.w	r2, #2
 800a364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fb74 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a380:	e005      	b.n	800a38e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fb66 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fb77 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d122      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d11b      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f06f 0204 	mvn.w	r2, #4
 800a3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2202      	movs	r2, #2
 800a3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fb4a 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a3d4:	e005      	b.n	800a3e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fb3c 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fb4d 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f003 0308 	and.w	r3, r3, #8
 800a3f2:	2b08      	cmp	r3, #8
 800a3f4:	d122      	bne.n	800a43c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f003 0308 	and.w	r3, r3, #8
 800a400:	2b08      	cmp	r3, #8
 800a402:	d11b      	bne.n	800a43c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f06f 0208 	mvn.w	r2, #8
 800a40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2204      	movs	r2, #4
 800a412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fb20 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a428:	e005      	b.n	800a436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fb12 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fb23 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	f003 0310 	and.w	r3, r3, #16
 800a446:	2b10      	cmp	r3, #16
 800a448:	d122      	bne.n	800a490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b10      	cmp	r3, #16
 800a456:	d11b      	bne.n	800a490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f06f 0210 	mvn.w	r2, #16
 800a460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2208      	movs	r2, #8
 800a466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 faf6 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a47c:	e005      	b.n	800a48a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fae8 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 faf9 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d10e      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d107      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f06f 0201 	mvn.w	r2, #1
 800a4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7f6 fd8a 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c6:	2b80      	cmp	r3, #128	; 0x80
 800a4c8:	d10e      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d4:	2b80      	cmp	r3, #128	; 0x80
 800a4d6:	d107      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f001 f906 	bl	800b6f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f6:	d10e      	bne.n	800a516 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d107      	bne.n	800a516 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 f8f9 	bl	800b708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a520:	2b40      	cmp	r3, #64	; 0x40
 800a522:	d10e      	bne.n	800a542 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b40      	cmp	r3, #64	; 0x40
 800a530:	d107      	bne.n	800a542 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a53a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 faa7 	bl	800aa90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	d10e      	bne.n	800a56e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d107      	bne.n	800a56e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f06f 0220 	mvn.w	r2, #32
 800a566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 f8b9 	bl	800b6e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a57c:	d10f      	bne.n	800a59e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a58c:	d107      	bne.n	800a59e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 f8bf 	bl	800b71c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5ac:	d10f      	bne.n	800a5ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5bc:	d107      	bne.n	800a5ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f8b1 	bl	800b730 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5dc:	d10f      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5ec:	d107      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 f8a3 	bl	800b744 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a608:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a60c:	d10f      	bne.n	800a62e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a61c:	d107      	bne.n	800a62e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f895 	bl	800b758 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a652:	2302      	movs	r3, #2
 800a654:	e0ff      	b.n	800a856 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b14      	cmp	r3, #20
 800a662:	f200 80f0 	bhi.w	800a846 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a847 	.word	0x0800a847
 800a674:	0800a847 	.word	0x0800a847
 800a678:	0800a847 	.word	0x0800a847
 800a67c:	0800a701 	.word	0x0800a701
 800a680:	0800a847 	.word	0x0800a847
 800a684:	0800a847 	.word	0x0800a847
 800a688:	0800a847 	.word	0x0800a847
 800a68c:	0800a743 	.word	0x0800a743
 800a690:	0800a847 	.word	0x0800a847
 800a694:	0800a847 	.word	0x0800a847
 800a698:	0800a847 	.word	0x0800a847
 800a69c:	0800a783 	.word	0x0800a783
 800a6a0:	0800a847 	.word	0x0800a847
 800a6a4:	0800a847 	.word	0x0800a847
 800a6a8:	0800a847 	.word	0x0800a847
 800a6ac:	0800a7c5 	.word	0x0800a7c5
 800a6b0:	0800a847 	.word	0x0800a847
 800a6b4:	0800a847 	.word	0x0800a847
 800a6b8:	0800a847 	.word	0x0800a847
 800a6bc:	0800a805 	.word	0x0800a805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fa7c 	bl	800abc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	699a      	ldr	r2, [r3, #24]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0208 	orr.w	r2, r2, #8
 800a6da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	699a      	ldr	r2, [r3, #24]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f022 0204 	bic.w	r2, r2, #4
 800a6ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6999      	ldr	r1, [r3, #24]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	691a      	ldr	r2, [r3, #16]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	619a      	str	r2, [r3, #24]
      break;
 800a6fe:	e0a5      	b.n	800a84c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 faec 	bl	800ace4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	699a      	ldr	r2, [r3, #24]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a71a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699a      	ldr	r2, [r3, #24]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a72a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6999      	ldr	r1, [r3, #24]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	021a      	lsls	r2, r3, #8
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	619a      	str	r2, [r3, #24]
      break;
 800a740:	e084      	b.n	800a84c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68b9      	ldr	r1, [r7, #8]
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 fb55 	bl	800adf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	69da      	ldr	r2, [r3, #28]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f042 0208 	orr.w	r2, r2, #8
 800a75c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69da      	ldr	r2, [r3, #28]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0204 	bic.w	r2, r2, #4
 800a76c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69d9      	ldr	r1, [r3, #28]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	430a      	orrs	r2, r1
 800a77e:	61da      	str	r2, [r3, #28]
      break;
 800a780:	e064      	b.n	800a84c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fbbd 	bl	800af08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a79c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	69da      	ldr	r2, [r3, #28]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69d9      	ldr	r1, [r3, #28]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	021a      	lsls	r2, r3, #8
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	61da      	str	r2, [r3, #28]
      break;
 800a7c2:	e043      	b.n	800a84c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fc26 	bl	800b01c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0208 	orr.w	r2, r2, #8
 800a7de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0204 	bic.w	r2, r2, #4
 800a7ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	691a      	ldr	r2, [r3, #16]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a802:	e023      	b.n	800a84c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fc6a 	bl	800b0e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a81e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a82e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	021a      	lsls	r2, r3, #8
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	430a      	orrs	r2, r1
 800a842:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a844:	e002      	b.n	800a84c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
      break;
 800a84a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop

0800a860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <HAL_TIM_ConfigClockSource+0x1c>
 800a878:	2302      	movs	r3, #2
 800a87a:	e0de      	b.n	800aa3a <HAL_TIM_ConfigClockSource+0x1da>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2202      	movs	r2, #2
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a89a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a89e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a63      	ldr	r2, [pc, #396]	; (800aa44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	f000 80a9 	beq.w	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a8bc:	4a61      	ldr	r2, [pc, #388]	; (800aa44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	f200 80ae 	bhi.w	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8c4:	4a60      	ldr	r2, [pc, #384]	; (800aa48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	f000 80a1 	beq.w	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a8cc:	4a5e      	ldr	r2, [pc, #376]	; (800aa48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	f200 80a6 	bhi.w	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8d4:	4a5d      	ldr	r2, [pc, #372]	; (800aa4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f000 8099 	beq.w	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a8dc:	4a5b      	ldr	r2, [pc, #364]	; (800aa4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	f200 809e 	bhi.w	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8e4:	4a5a      	ldr	r2, [pc, #360]	; (800aa50 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f000 8091 	beq.w	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a8ec:	4a58      	ldr	r2, [pc, #352]	; (800aa50 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f200 8096 	bhi.w	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8f8:	f000 8089 	beq.w	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a8fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a900:	f200 808e 	bhi.w	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a908:	d03e      	beq.n	800a988 <HAL_TIM_ConfigClockSource+0x128>
 800a90a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a90e:	f200 8087 	bhi.w	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a916:	f000 8086 	beq.w	800aa26 <HAL_TIM_ConfigClockSource+0x1c6>
 800a91a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91e:	d87f      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a920:	2b70      	cmp	r3, #112	; 0x70
 800a922:	d01a      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0xfa>
 800a924:	2b70      	cmp	r3, #112	; 0x70
 800a926:	d87b      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a928:	2b60      	cmp	r3, #96	; 0x60
 800a92a:	d050      	beq.n	800a9ce <HAL_TIM_ConfigClockSource+0x16e>
 800a92c:	2b60      	cmp	r3, #96	; 0x60
 800a92e:	d877      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a930:	2b50      	cmp	r3, #80	; 0x50
 800a932:	d03c      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0x14e>
 800a934:	2b50      	cmp	r3, #80	; 0x50
 800a936:	d873      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a938:	2b40      	cmp	r3, #64	; 0x40
 800a93a:	d058      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x18e>
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d86f      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a940:	2b30      	cmp	r3, #48	; 0x30
 800a942:	d064      	beq.n	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a944:	2b30      	cmp	r3, #48	; 0x30
 800a946:	d86b      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d060      	beq.n	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a94c:	2b20      	cmp	r3, #32
 800a94e:	d867      	bhi.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d05c      	beq.n	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a954:	2b10      	cmp	r3, #16
 800a956:	d05a      	beq.n	800aa0e <HAL_TIM_ConfigClockSource+0x1ae>
 800a958:	e062      	b.n	800aa20 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6818      	ldr	r0, [r3, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	6899      	ldr	r1, [r3, #8]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	f000 fc9d 	bl	800b2a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a97c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	609a      	str	r2, [r3, #8]
      break;
 800a986:	e04f      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	6899      	ldr	r1, [r3, #8]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f000 fc86 	bl	800b2a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9aa:	609a      	str	r2, [r3, #8]
      break;
 800a9ac:	e03c      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	6859      	ldr	r1, [r3, #4]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f000 fbf8 	bl	800b1b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2150      	movs	r1, #80	; 0x50
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fc51 	bl	800b26e <TIM_ITRx_SetConfig>
      break;
 800a9cc:	e02c      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6859      	ldr	r1, [r3, #4]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f000 fc17 	bl	800b20e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2160      	movs	r1, #96	; 0x60
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fc41 	bl	800b26e <TIM_ITRx_SetConfig>
      break;
 800a9ec:	e01c      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	6859      	ldr	r1, [r3, #4]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f000 fbd8 	bl	800b1b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2140      	movs	r1, #64	; 0x40
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fc31 	bl	800b26e <TIM_ITRx_SetConfig>
      break;
 800aa0c:	e00c      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4619      	mov	r1, r3
 800aa18:	4610      	mov	r0, r2
 800aa1a:	f000 fc28 	bl	800b26e <TIM_ITRx_SetConfig>
      break;
 800aa1e:	e003      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	73fb      	strb	r3, [r7, #15]
      break;
 800aa24:	e000      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800aa26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	00100070 	.word	0x00100070
 800aa48:	00100040 	.word	0x00100040
 800aa4c:	00100030 	.word	0x00100030
 800aa50:	00100020 	.word	0x00100020

0800aa54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a3c      	ldr	r2, [pc, #240]	; (800aba8 <TIM_Base_SetConfig+0x104>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00f      	beq.n	800aadc <TIM_Base_SetConfig+0x38>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac2:	d00b      	beq.n	800aadc <TIM_Base_SetConfig+0x38>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a39      	ldr	r2, [pc, #228]	; (800abac <TIM_Base_SetConfig+0x108>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d007      	beq.n	800aadc <TIM_Base_SetConfig+0x38>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a38      	ldr	r2, [pc, #224]	; (800abb0 <TIM_Base_SetConfig+0x10c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_Base_SetConfig+0x38>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a37      	ldr	r2, [pc, #220]	; (800abb4 <TIM_Base_SetConfig+0x110>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d108      	bne.n	800aaee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a2d      	ldr	r2, [pc, #180]	; (800aba8 <TIM_Base_SetConfig+0x104>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d01b      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aafc:	d017      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a2a      	ldr	r2, [pc, #168]	; (800abac <TIM_Base_SetConfig+0x108>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d013      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a29      	ldr	r2, [pc, #164]	; (800abb0 <TIM_Base_SetConfig+0x10c>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d00f      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a28      	ldr	r2, [pc, #160]	; (800abb4 <TIM_Base_SetConfig+0x110>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d00b      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a27      	ldr	r2, [pc, #156]	; (800abb8 <TIM_Base_SetConfig+0x114>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d007      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a26      	ldr	r2, [pc, #152]	; (800abbc <TIM_Base_SetConfig+0x118>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d003      	beq.n	800ab2e <TIM_Base_SetConfig+0x8a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a25      	ldr	r2, [pc, #148]	; (800abc0 <TIM_Base_SetConfig+0x11c>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d108      	bne.n	800ab40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689a      	ldr	r2, [r3, #8]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a10      	ldr	r2, [pc, #64]	; (800aba8 <TIM_Base_SetConfig+0x104>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d00f      	beq.n	800ab8c <TIM_Base_SetConfig+0xe8>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a11      	ldr	r2, [pc, #68]	; (800abb4 <TIM_Base_SetConfig+0x110>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00b      	beq.n	800ab8c <TIM_Base_SetConfig+0xe8>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a10      	ldr	r2, [pc, #64]	; (800abb8 <TIM_Base_SetConfig+0x114>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d007      	beq.n	800ab8c <TIM_Base_SetConfig+0xe8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a0f      	ldr	r2, [pc, #60]	; (800abbc <TIM_Base_SetConfig+0x118>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d003      	beq.n	800ab8c <TIM_Base_SetConfig+0xe8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a0e      	ldr	r2, [pc, #56]	; (800abc0 <TIM_Base_SetConfig+0x11c>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d103      	bne.n	800ab94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	691a      	ldr	r2, [r3, #16]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	615a      	str	r2, [r3, #20]
}
 800ab9a:	bf00      	nop
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	40012c00 	.word	0x40012c00
 800abac:	40000400 	.word	0x40000400
 800abb0:	40000800 	.word	0x40000800
 800abb4:	40013400 	.word	0x40013400
 800abb8:	40014000 	.word	0x40014000
 800abbc:	40014400 	.word	0x40014400
 800abc0:	40014800 	.word	0x40014800

0800abc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b087      	sub	sp, #28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	f023 0201 	bic.w	r2, r3, #1
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f023 0302 	bic.w	r3, r3, #2
 800ac10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a2c      	ldr	r2, [pc, #176]	; (800acd0 <TIM_OC1_SetConfig+0x10c>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d00f      	beq.n	800ac44 <TIM_OC1_SetConfig+0x80>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a2b      	ldr	r2, [pc, #172]	; (800acd4 <TIM_OC1_SetConfig+0x110>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00b      	beq.n	800ac44 <TIM_OC1_SetConfig+0x80>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a2a      	ldr	r2, [pc, #168]	; (800acd8 <TIM_OC1_SetConfig+0x114>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d007      	beq.n	800ac44 <TIM_OC1_SetConfig+0x80>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a29      	ldr	r2, [pc, #164]	; (800acdc <TIM_OC1_SetConfig+0x118>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d003      	beq.n	800ac44 <TIM_OC1_SetConfig+0x80>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a28      	ldr	r2, [pc, #160]	; (800ace0 <TIM_OC1_SetConfig+0x11c>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d10c      	bne.n	800ac5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f023 0308 	bic.w	r3, r3, #8
 800ac4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f023 0304 	bic.w	r3, r3, #4
 800ac5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a1b      	ldr	r2, [pc, #108]	; (800acd0 <TIM_OC1_SetConfig+0x10c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d00f      	beq.n	800ac86 <TIM_OC1_SetConfig+0xc2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <TIM_OC1_SetConfig+0x110>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00b      	beq.n	800ac86 <TIM_OC1_SetConfig+0xc2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a19      	ldr	r2, [pc, #100]	; (800acd8 <TIM_OC1_SetConfig+0x114>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d007      	beq.n	800ac86 <TIM_OC1_SetConfig+0xc2>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a18      	ldr	r2, [pc, #96]	; (800acdc <TIM_OC1_SetConfig+0x118>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d003      	beq.n	800ac86 <TIM_OC1_SetConfig+0xc2>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a17      	ldr	r2, [pc, #92]	; (800ace0 <TIM_OC1_SetConfig+0x11c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d111      	bne.n	800acaa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	621a      	str	r2, [r3, #32]
}
 800acc4:	bf00      	nop
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	40012c00 	.word	0x40012c00
 800acd4:	40013400 	.word	0x40013400
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014400 	.word	0x40014400
 800ace0:	40014800 	.word	0x40014800

0800ace4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f023 0210 	bic.w	r2, r3, #16
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	021b      	lsls	r3, r3, #8
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	f023 0320 	bic.w	r3, r3, #32
 800ad32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a28      	ldr	r2, [pc, #160]	; (800ade4 <TIM_OC2_SetConfig+0x100>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d003      	beq.n	800ad50 <TIM_OC2_SetConfig+0x6c>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a27      	ldr	r2, [pc, #156]	; (800ade8 <TIM_OC2_SetConfig+0x104>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d10d      	bne.n	800ad6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	011b      	lsls	r3, r3, #4
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a1d      	ldr	r2, [pc, #116]	; (800ade4 <TIM_OC2_SetConfig+0x100>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d00f      	beq.n	800ad94 <TIM_OC2_SetConfig+0xb0>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a1c      	ldr	r2, [pc, #112]	; (800ade8 <TIM_OC2_SetConfig+0x104>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d00b      	beq.n	800ad94 <TIM_OC2_SetConfig+0xb0>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a1b      	ldr	r2, [pc, #108]	; (800adec <TIM_OC2_SetConfig+0x108>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d007      	beq.n	800ad94 <TIM_OC2_SetConfig+0xb0>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a1a      	ldr	r2, [pc, #104]	; (800adf0 <TIM_OC2_SetConfig+0x10c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d003      	beq.n	800ad94 <TIM_OC2_SetConfig+0xb0>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a19      	ldr	r2, [pc, #100]	; (800adf4 <TIM_OC2_SetConfig+0x110>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d113      	bne.n	800adbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ada2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	4313      	orrs	r3, r2
 800adae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	4313      	orrs	r3, r2
 800adba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	621a      	str	r2, [r3, #32]
}
 800add6:	bf00      	nop
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	40012c00 	.word	0x40012c00
 800ade8:	40013400 	.word	0x40013400
 800adec:	40014000 	.word	0x40014000
 800adf0:	40014400 	.word	0x40014400
 800adf4:	40014800 	.word	0x40014800

0800adf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0303 	bic.w	r3, r3, #3
 800ae32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a27      	ldr	r2, [pc, #156]	; (800aef4 <TIM_OC3_SetConfig+0xfc>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d003      	beq.n	800ae62 <TIM_OC3_SetConfig+0x6a>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a26      	ldr	r2, [pc, #152]	; (800aef8 <TIM_OC3_SetConfig+0x100>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d10d      	bne.n	800ae7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	021b      	lsls	r3, r3, #8
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a1c      	ldr	r2, [pc, #112]	; (800aef4 <TIM_OC3_SetConfig+0xfc>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d00f      	beq.n	800aea6 <TIM_OC3_SetConfig+0xae>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a1b      	ldr	r2, [pc, #108]	; (800aef8 <TIM_OC3_SetConfig+0x100>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d00b      	beq.n	800aea6 <TIM_OC3_SetConfig+0xae>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a1a      	ldr	r2, [pc, #104]	; (800aefc <TIM_OC3_SetConfig+0x104>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d007      	beq.n	800aea6 <TIM_OC3_SetConfig+0xae>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a19      	ldr	r2, [pc, #100]	; (800af00 <TIM_OC3_SetConfig+0x108>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d003      	beq.n	800aea6 <TIM_OC3_SetConfig+0xae>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a18      	ldr	r2, [pc, #96]	; (800af04 <TIM_OC3_SetConfig+0x10c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d113      	bne.n	800aece <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aeb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	011b      	lsls	r3, r3, #4
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	621a      	str	r2, [r3, #32]
}
 800aee8:	bf00      	nop
 800aeea:	371c      	adds	r7, #28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	40012c00 	.word	0x40012c00
 800aef8:	40013400 	.word	0x40013400
 800aefc:	40014000 	.word	0x40014000
 800af00:	40014400 	.word	0x40014400
 800af04:	40014800 	.word	0x40014800

0800af08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	021b      	lsls	r3, r3, #8
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	031b      	lsls	r3, r3, #12
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	4313      	orrs	r3, r2
 800af62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a28      	ldr	r2, [pc, #160]	; (800b008 <TIM_OC4_SetConfig+0x100>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d003      	beq.n	800af74 <TIM_OC4_SetConfig+0x6c>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a27      	ldr	r2, [pc, #156]	; (800b00c <TIM_OC4_SetConfig+0x104>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d10d      	bne.n	800af90 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	031b      	lsls	r3, r3, #12
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	4313      	orrs	r3, r2
 800af86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a1d      	ldr	r2, [pc, #116]	; (800b008 <TIM_OC4_SetConfig+0x100>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00f      	beq.n	800afb8 <TIM_OC4_SetConfig+0xb0>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a1c      	ldr	r2, [pc, #112]	; (800b00c <TIM_OC4_SetConfig+0x104>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00b      	beq.n	800afb8 <TIM_OC4_SetConfig+0xb0>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a1b      	ldr	r2, [pc, #108]	; (800b010 <TIM_OC4_SetConfig+0x108>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d007      	beq.n	800afb8 <TIM_OC4_SetConfig+0xb0>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a1a      	ldr	r2, [pc, #104]	; (800b014 <TIM_OC4_SetConfig+0x10c>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d003      	beq.n	800afb8 <TIM_OC4_SetConfig+0xb0>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a19      	ldr	r2, [pc, #100]	; (800b018 <TIM_OC4_SetConfig+0x110>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d113      	bne.n	800afe0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afbe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afc6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	019b      	lsls	r3, r3, #6
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	019b      	lsls	r3, r3, #6
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	4313      	orrs	r3, r2
 800afde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	621a      	str	r2, [r3, #32]
}
 800affa:	bf00      	nop
 800affc:	371c      	adds	r7, #28
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	40012c00 	.word	0x40012c00
 800b00c:	40013400 	.word	0x40013400
 800b010:	40014000 	.word	0x40014000
 800b014:	40014400 	.word	0x40014400
 800b018:	40014800 	.word	0x40014800

0800b01c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	4313      	orrs	r3, r2
 800b058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	041b      	lsls	r3, r3, #16
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <TIM_OC5_SetConfig+0xb4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d00f      	beq.n	800b096 <TIM_OC5_SetConfig+0x7a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a16      	ldr	r2, [pc, #88]	; (800b0d4 <TIM_OC5_SetConfig+0xb8>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00b      	beq.n	800b096 <TIM_OC5_SetConfig+0x7a>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a15      	ldr	r2, [pc, #84]	; (800b0d8 <TIM_OC5_SetConfig+0xbc>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d007      	beq.n	800b096 <TIM_OC5_SetConfig+0x7a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a14      	ldr	r2, [pc, #80]	; (800b0dc <TIM_OC5_SetConfig+0xc0>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d003      	beq.n	800b096 <TIM_OC5_SetConfig+0x7a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a13      	ldr	r2, [pc, #76]	; (800b0e0 <TIM_OC5_SetConfig+0xc4>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d109      	bne.n	800b0aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b09c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	621a      	str	r2, [r3, #32]
}
 800b0c4:	bf00      	nop
 800b0c6:	371c      	adds	r7, #28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	40012c00 	.word	0x40012c00
 800b0d4:	40013400 	.word	0x40013400
 800b0d8:	40014000 	.word	0x40014000
 800b0dc:	40014400 	.word	0x40014400
 800b0e0:	40014800 	.word	0x40014800

0800b0e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	4313      	orrs	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b12a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	051b      	lsls	r3, r3, #20
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a18      	ldr	r2, [pc, #96]	; (800b19c <TIM_OC6_SetConfig+0xb8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d00f      	beq.n	800b160 <TIM_OC6_SetConfig+0x7c>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a17      	ldr	r2, [pc, #92]	; (800b1a0 <TIM_OC6_SetConfig+0xbc>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d00b      	beq.n	800b160 <TIM_OC6_SetConfig+0x7c>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a16      	ldr	r2, [pc, #88]	; (800b1a4 <TIM_OC6_SetConfig+0xc0>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d007      	beq.n	800b160 <TIM_OC6_SetConfig+0x7c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a15      	ldr	r2, [pc, #84]	; (800b1a8 <TIM_OC6_SetConfig+0xc4>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d003      	beq.n	800b160 <TIM_OC6_SetConfig+0x7c>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a14      	ldr	r2, [pc, #80]	; (800b1ac <TIM_OC6_SetConfig+0xc8>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d109      	bne.n	800b174 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	029b      	lsls	r3, r3, #10
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	4313      	orrs	r3, r2
 800b172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	621a      	str	r2, [r3, #32]
}
 800b18e:	bf00      	nop
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	40012c00 	.word	0x40012c00
 800b1a0:	40013400 	.word	0x40013400
 800b1a4:	40014000 	.word	0x40014000
 800b1a8:	40014400 	.word	0x40014400
 800b1ac:	40014800 	.word	0x40014800

0800b1b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	f023 0201 	bic.w	r2, r3, #1
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f023 030a 	bic.w	r3, r3, #10
 800b1ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	621a      	str	r2, [r3, #32]
}
 800b202:	bf00      	nop
 800b204:	371c      	adds	r7, #28
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b20e:	b480      	push	{r7}
 800b210:	b087      	sub	sp, #28
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	60b9      	str	r1, [r7, #8]
 800b218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	f023 0210 	bic.w	r2, r3, #16
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	031b      	lsls	r3, r3, #12
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	4313      	orrs	r3, r2
 800b242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b24a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	011b      	lsls	r3, r3, #4
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	621a      	str	r2, [r3, #32]
}
 800b262:	bf00      	nop
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b26e:	b480      	push	{r7}
 800b270:	b085      	sub	sp, #20
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4313      	orrs	r3, r2
 800b290:	f043 0307 	orr.w	r3, r3, #7
 800b294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	609a      	str	r2, [r3, #8]
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	021a      	lsls	r2, r3, #8
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	609a      	str	r2, [r3, #8]
}
 800b2dc:	bf00      	nop
 800b2de:	371c      	adds	r7, #28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 031f 	and.w	r3, r3, #31
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a1a      	ldr	r2, [r3, #32]
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	43db      	mvns	r3, r3
 800b30a:	401a      	ands	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a1a      	ldr	r2, [r3, #32]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f003 031f 	and.w	r3, r3, #31
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	fa01 f303 	lsl.w	r3, r1, r3
 800b320:	431a      	orrs	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	621a      	str	r2, [r3, #32]
}
 800b326:	bf00      	nop
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
	...

0800b334 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d109      	bne.n	800b358 <HAL_TIMEx_PWMN_Start+0x24>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	bf14      	ite	ne
 800b350:	2301      	movne	r3, #1
 800b352:	2300      	moveq	r3, #0
 800b354:	b2db      	uxtb	r3, r3
 800b356:	e022      	b.n	800b39e <HAL_TIMEx_PWMN_Start+0x6a>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d109      	bne.n	800b372 <HAL_TIMEx_PWMN_Start+0x3e>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b01      	cmp	r3, #1
 800b368:	bf14      	ite	ne
 800b36a:	2301      	movne	r3, #1
 800b36c:	2300      	moveq	r3, #0
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	e015      	b.n	800b39e <HAL_TIMEx_PWMN_Start+0x6a>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b08      	cmp	r3, #8
 800b376:	d109      	bne.n	800b38c <HAL_TIMEx_PWMN_Start+0x58>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b01      	cmp	r3, #1
 800b382:	bf14      	ite	ne
 800b384:	2301      	movne	r3, #1
 800b386:	2300      	moveq	r3, #0
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	e008      	b.n	800b39e <HAL_TIMEx_PWMN_Start+0x6a>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b01      	cmp	r3, #1
 800b396:	bf14      	ite	ne
 800b398:	2301      	movne	r3, #1
 800b39a:	2300      	moveq	r3, #0
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e069      	b.n	800b47a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <HAL_TIMEx_PWMN_Start+0x82>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3b4:	e013      	b.n	800b3de <HAL_TIMEx_PWMN_Start+0xaa>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d104      	bne.n	800b3c6 <HAL_TIMEx_PWMN_Start+0x92>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3c4:	e00b      	b.n	800b3de <HAL_TIMEx_PWMN_Start+0xaa>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b08      	cmp	r3, #8
 800b3ca:	d104      	bne.n	800b3d6 <HAL_TIMEx_PWMN_Start+0xa2>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3d4:	e003      	b.n	800b3de <HAL_TIMEx_PWMN_Start+0xaa>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 f9c0 	bl	800b76c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a20      	ldr	r2, [pc, #128]	; (800b484 <HAL_TIMEx_PWMN_Start+0x150>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d018      	beq.n	800b438 <HAL_TIMEx_PWMN_Start+0x104>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b40e:	d013      	beq.n	800b438 <HAL_TIMEx_PWMN_Start+0x104>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a1c      	ldr	r2, [pc, #112]	; (800b488 <HAL_TIMEx_PWMN_Start+0x154>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d00e      	beq.n	800b438 <HAL_TIMEx_PWMN_Start+0x104>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a1b      	ldr	r2, [pc, #108]	; (800b48c <HAL_TIMEx_PWMN_Start+0x158>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d009      	beq.n	800b438 <HAL_TIMEx_PWMN_Start+0x104>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a19      	ldr	r2, [pc, #100]	; (800b490 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d004      	beq.n	800b438 <HAL_TIMEx_PWMN_Start+0x104>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a18      	ldr	r2, [pc, #96]	; (800b494 <HAL_TIMEx_PWMN_Start+0x160>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d115      	bne.n	800b464 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689a      	ldr	r2, [r3, #8]
 800b43e:	4b16      	ldr	r3, [pc, #88]	; (800b498 <HAL_TIMEx_PWMN_Start+0x164>)
 800b440:	4013      	ands	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b06      	cmp	r3, #6
 800b448:	d015      	beq.n	800b476 <HAL_TIMEx_PWMN_Start+0x142>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b450:	d011      	beq.n	800b476 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f042 0201 	orr.w	r2, r2, #1
 800b460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b462:	e008      	b.n	800b476 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f042 0201 	orr.w	r2, r2, #1
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e000      	b.n	800b478 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	40012c00 	.word	0x40012c00
 800b488:	40000400 	.word	0x40000400
 800b48c:	40000800 	.word	0x40000800
 800b490:	40013400 	.word	0x40013400
 800b494:	40014000 	.word	0x40014000
 800b498:	00010007 	.word	0x00010007

0800b49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d101      	bne.n	800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e065      	b.n	800b580 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a2c      	ldr	r2, [pc, #176]	; (800b58c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d004      	beq.n	800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a2b      	ldr	r2, [pc, #172]	; (800b590 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d108      	bne.n	800b4fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b4ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a1b      	ldr	r2, [pc, #108]	; (800b58c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d018      	beq.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b52a:	d013      	beq.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a18      	ldr	r2, [pc, #96]	; (800b594 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d00e      	beq.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d009      	beq.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a12      	ldr	r2, [pc, #72]	; (800b590 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d004      	beq.n	800b554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a13      	ldr	r2, [pc, #76]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d10c      	bne.n	800b56e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b55a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	4313      	orrs	r3, r2
 800b564:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	40012c00 	.word	0x40012c00
 800b590:	40013400 	.word	0x40013400
 800b594:	40000400 	.word	0x40000400
 800b598:	40000800 	.word	0x40000800
 800b59c:	40014000 	.word	0x40014000

0800b5a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d101      	bne.n	800b5bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e087      	b.n	800b6cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	4313      	orrs	r3, r2
 800b608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	4313      	orrs	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	041b      	lsls	r3, r3, #16
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a27      	ldr	r2, [pc, #156]	; (800b6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d004      	beq.n	800b64a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a25      	ldr	r2, [pc, #148]	; (800b6dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d106      	bne.n	800b658 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a1e      	ldr	r2, [pc, #120]	; (800b6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d004      	beq.n	800b66c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a1d      	ldr	r2, [pc, #116]	; (800b6dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d126      	bne.n	800b6ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b676:	051b      	lsls	r3, r3, #20
 800b678:	4313      	orrs	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a0e      	ldr	r2, [pc, #56]	; (800b6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d004      	beq.n	800b6ac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a0d      	ldr	r2, [pc, #52]	; (800b6dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d106      	bne.n	800b6ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	40012c00 	.word	0x40012c00
 800b6dc:	40013400 	.word	0x40013400

0800b6e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f003 031f 	and.w	r3, r3, #31
 800b77e:	2204      	movs	r2, #4
 800b780:	fa02 f303 	lsl.w	r3, r2, r3
 800b784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a1a      	ldr	r2, [r3, #32]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	43db      	mvns	r3, r3
 800b78e:	401a      	ands	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a1a      	ldr	r2, [r3, #32]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f003 031f 	and.w	r3, r3, #31
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	621a      	str	r2, [r3, #32]
}
 800b7aa:	bf00      	nop
 800b7ac:	371c      	adds	r7, #28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b082      	sub	sp, #8
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e042      	b.n	800b84e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7f9 fbf2 	bl	8004fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2224      	movs	r2, #36	; 0x24
 800b7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f022 0201 	bic.w	r2, r2, #1
 800b7f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f8c3 	bl	800b984 <UART_SetConfig>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b01      	cmp	r3, #1
 800b802:	d101      	bne.n	800b808 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e022      	b.n	800b84e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fb83 	bl	800bf1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b824:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b834:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f042 0201 	orr.w	r2, r2, #1
 800b844:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fc0a 	bl	800c060 <UART_CheckIdleState>
 800b84c:	4603      	mov	r3, r0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b08a      	sub	sp, #40	; 0x28
 800b85a:	af02      	add	r7, sp, #8
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	603b      	str	r3, [r7, #0]
 800b862:	4613      	mov	r3, r2
 800b864:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b86c:	2b20      	cmp	r3, #32
 800b86e:	f040 8083 	bne.w	800b978 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <HAL_UART_Transmit+0x28>
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e07b      	b.n	800b97a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_UART_Transmit+0x3a>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e074      	b.n	800b97a <HAL_UART_Transmit+0x124>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2221      	movs	r2, #33	; 0x21
 800b8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8a8:	f7f9 fdb2 	bl	8005410 <HAL_GetTick>
 800b8ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	88fa      	ldrh	r2, [r7, #6]
 800b8b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	88fa      	ldrh	r2, [r7, #6]
 800b8ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c6:	d108      	bne.n	800b8da <HAL_UART_Transmit+0x84>
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d104      	bne.n	800b8da <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	e003      	b.n	800b8e2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b8ea:	e02c      	b.n	800b946 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2180      	movs	r1, #128	; 0x80
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fbfd 	bl	800c0f6 <UART_WaitOnFlagUntilTimeout>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e039      	b.n	800b97a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10b      	bne.n	800b924 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	461a      	mov	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b91a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	3302      	adds	r3, #2
 800b920:	61bb      	str	r3, [r7, #24]
 800b922:	e007      	b.n	800b934 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	781a      	ldrb	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	3301      	adds	r3, #1
 800b932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1cc      	bne.n	800b8ec <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2200      	movs	r2, #0
 800b95a:	2140      	movs	r1, #64	; 0x40
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 fbca 	bl	800c0f6 <UART_WaitOnFlagUntilTimeout>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e006      	b.n	800b97a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2220      	movs	r2, #32
 800b970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	e000      	b.n	800b97a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b978:	2302      	movs	r3, #2
  }
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b988:	b08c      	sub	sp, #48	; 0x30
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	431a      	orrs	r2, r3
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	4bab      	ldr	r3, [pc, #684]	; (800bc60 <UART_SetConfig+0x2dc>)
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	6812      	ldr	r2, [r2, #0]
 800b9ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4aa0      	ldr	r2, [pc, #640]	; (800bc64 <UART_SetConfig+0x2e0>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d004      	beq.n	800b9f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b9fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	6812      	ldr	r2, [r2, #0]
 800ba02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba04:	430b      	orrs	r3, r1
 800ba06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	f023 010f 	bic.w	r1, r3, #15
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a91      	ldr	r2, [pc, #580]	; (800bc68 <UART_SetConfig+0x2e4>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d125      	bne.n	800ba74 <UART_SetConfig+0xf0>
 800ba28:	4b90      	ldr	r3, [pc, #576]	; (800bc6c <UART_SetConfig+0x2e8>)
 800ba2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba2e:	f003 0303 	and.w	r3, r3, #3
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d81a      	bhi.n	800ba6c <UART_SetConfig+0xe8>
 800ba36:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <UART_SetConfig+0xb8>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba4d 	.word	0x0800ba4d
 800ba40:	0800ba5d 	.word	0x0800ba5d
 800ba44:	0800ba55 	.word	0x0800ba55
 800ba48:	0800ba65 	.word	0x0800ba65
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba52:	e0d6      	b.n	800bc02 <UART_SetConfig+0x27e>
 800ba54:	2302      	movs	r3, #2
 800ba56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba5a:	e0d2      	b.n	800bc02 <UART_SetConfig+0x27e>
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba62:	e0ce      	b.n	800bc02 <UART_SetConfig+0x27e>
 800ba64:	2308      	movs	r3, #8
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba6a:	e0ca      	b.n	800bc02 <UART_SetConfig+0x27e>
 800ba6c:	2310      	movs	r3, #16
 800ba6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba72:	e0c6      	b.n	800bc02 <UART_SetConfig+0x27e>
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a7d      	ldr	r2, [pc, #500]	; (800bc70 <UART_SetConfig+0x2ec>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d138      	bne.n	800baf0 <UART_SetConfig+0x16c>
 800ba7e:	4b7b      	ldr	r3, [pc, #492]	; (800bc6c <UART_SetConfig+0x2e8>)
 800ba80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba84:	f003 030c 	and.w	r3, r3, #12
 800ba88:	2b0c      	cmp	r3, #12
 800ba8a:	d82d      	bhi.n	800bae8 <UART_SetConfig+0x164>
 800ba8c:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <UART_SetConfig+0x110>)
 800ba8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba92:	bf00      	nop
 800ba94:	0800bac9 	.word	0x0800bac9
 800ba98:	0800bae9 	.word	0x0800bae9
 800ba9c:	0800bae9 	.word	0x0800bae9
 800baa0:	0800bae9 	.word	0x0800bae9
 800baa4:	0800bad9 	.word	0x0800bad9
 800baa8:	0800bae9 	.word	0x0800bae9
 800baac:	0800bae9 	.word	0x0800bae9
 800bab0:	0800bae9 	.word	0x0800bae9
 800bab4:	0800bad1 	.word	0x0800bad1
 800bab8:	0800bae9 	.word	0x0800bae9
 800babc:	0800bae9 	.word	0x0800bae9
 800bac0:	0800bae9 	.word	0x0800bae9
 800bac4:	0800bae1 	.word	0x0800bae1
 800bac8:	2300      	movs	r3, #0
 800baca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bace:	e098      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bad0:	2302      	movs	r3, #2
 800bad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bad6:	e094      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bad8:	2304      	movs	r3, #4
 800bada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bade:	e090      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bae0:	2308      	movs	r3, #8
 800bae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bae6:	e08c      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bae8:	2310      	movs	r3, #16
 800baea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baee:	e088      	b.n	800bc02 <UART_SetConfig+0x27e>
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a5f      	ldr	r2, [pc, #380]	; (800bc74 <UART_SetConfig+0x2f0>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d125      	bne.n	800bb46 <UART_SetConfig+0x1c2>
 800bafa:	4b5c      	ldr	r3, [pc, #368]	; (800bc6c <UART_SetConfig+0x2e8>)
 800bafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb04:	2b30      	cmp	r3, #48	; 0x30
 800bb06:	d016      	beq.n	800bb36 <UART_SetConfig+0x1b2>
 800bb08:	2b30      	cmp	r3, #48	; 0x30
 800bb0a:	d818      	bhi.n	800bb3e <UART_SetConfig+0x1ba>
 800bb0c:	2b20      	cmp	r3, #32
 800bb0e:	d00a      	beq.n	800bb26 <UART_SetConfig+0x1a2>
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	d814      	bhi.n	800bb3e <UART_SetConfig+0x1ba>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <UART_SetConfig+0x19a>
 800bb18:	2b10      	cmp	r3, #16
 800bb1a:	d008      	beq.n	800bb2e <UART_SetConfig+0x1aa>
 800bb1c:	e00f      	b.n	800bb3e <UART_SetConfig+0x1ba>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb24:	e06d      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb26:	2302      	movs	r3, #2
 800bb28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb2c:	e069      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb2e:	2304      	movs	r3, #4
 800bb30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb34:	e065      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb36:	2308      	movs	r3, #8
 800bb38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb3c:	e061      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb3e:	2310      	movs	r3, #16
 800bb40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb44:	e05d      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a4b      	ldr	r2, [pc, #300]	; (800bc78 <UART_SetConfig+0x2f4>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d125      	bne.n	800bb9c <UART_SetConfig+0x218>
 800bb50:	4b46      	ldr	r3, [pc, #280]	; (800bc6c <UART_SetConfig+0x2e8>)
 800bb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb5a:	2bc0      	cmp	r3, #192	; 0xc0
 800bb5c:	d016      	beq.n	800bb8c <UART_SetConfig+0x208>
 800bb5e:	2bc0      	cmp	r3, #192	; 0xc0
 800bb60:	d818      	bhi.n	800bb94 <UART_SetConfig+0x210>
 800bb62:	2b80      	cmp	r3, #128	; 0x80
 800bb64:	d00a      	beq.n	800bb7c <UART_SetConfig+0x1f8>
 800bb66:	2b80      	cmp	r3, #128	; 0x80
 800bb68:	d814      	bhi.n	800bb94 <UART_SetConfig+0x210>
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <UART_SetConfig+0x1f0>
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d008      	beq.n	800bb84 <UART_SetConfig+0x200>
 800bb72:	e00f      	b.n	800bb94 <UART_SetConfig+0x210>
 800bb74:	2300      	movs	r3, #0
 800bb76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb7a:	e042      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb82:	e03e      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb84:	2304      	movs	r3, #4
 800bb86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb8a:	e03a      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb8c:	2308      	movs	r3, #8
 800bb8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb92:	e036      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb94:	2310      	movs	r3, #16
 800bb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb9a:	e032      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a30      	ldr	r2, [pc, #192]	; (800bc64 <UART_SetConfig+0x2e0>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d12a      	bne.n	800bbfc <UART_SetConfig+0x278>
 800bba6:	4b31      	ldr	r3, [pc, #196]	; (800bc6c <UART_SetConfig+0x2e8>)
 800bba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bbb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbb4:	d01a      	beq.n	800bbec <UART_SetConfig+0x268>
 800bbb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbba:	d81b      	bhi.n	800bbf4 <UART_SetConfig+0x270>
 800bbbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbc0:	d00c      	beq.n	800bbdc <UART_SetConfig+0x258>
 800bbc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbc6:	d815      	bhi.n	800bbf4 <UART_SetConfig+0x270>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d003      	beq.n	800bbd4 <UART_SetConfig+0x250>
 800bbcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbd0:	d008      	beq.n	800bbe4 <UART_SetConfig+0x260>
 800bbd2:	e00f      	b.n	800bbf4 <UART_SetConfig+0x270>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbda:	e012      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bbdc:	2302      	movs	r3, #2
 800bbde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbe2:	e00e      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bbe4:	2304      	movs	r3, #4
 800bbe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbea:	e00a      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bbec:	2308      	movs	r3, #8
 800bbee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbf2:	e006      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bbf4:	2310      	movs	r3, #16
 800bbf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbfa:	e002      	b.n	800bc02 <UART_SetConfig+0x27e>
 800bbfc:	2310      	movs	r3, #16
 800bbfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a17      	ldr	r2, [pc, #92]	; (800bc64 <UART_SetConfig+0x2e0>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	f040 80a8 	bne.w	800bd5e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc12:	2b08      	cmp	r3, #8
 800bc14:	d834      	bhi.n	800bc80 <UART_SetConfig+0x2fc>
 800bc16:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <UART_SetConfig+0x298>)
 800bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1c:	0800bc41 	.word	0x0800bc41
 800bc20:	0800bc81 	.word	0x0800bc81
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc81 	.word	0x0800bc81
 800bc2c:	0800bc4f 	.word	0x0800bc4f
 800bc30:	0800bc81 	.word	0x0800bc81
 800bc34:	0800bc81 	.word	0x0800bc81
 800bc38:	0800bc81 	.word	0x0800bc81
 800bc3c:	0800bc57 	.word	0x0800bc57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc40:	f7fd f95c 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 800bc44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc46:	e021      	b.n	800bc8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc48:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <UART_SetConfig+0x2f8>)
 800bc4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc4c:	e01e      	b.n	800bc8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc4e:	f7fd f8e7 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800bc52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc54:	e01a      	b.n	800bc8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc5c:	e016      	b.n	800bc8c <UART_SetConfig+0x308>
 800bc5e:	bf00      	nop
 800bc60:	cfff69f3 	.word	0xcfff69f3
 800bc64:	40008000 	.word	0x40008000
 800bc68:	40013800 	.word	0x40013800
 800bc6c:	40021000 	.word	0x40021000
 800bc70:	40004400 	.word	0x40004400
 800bc74:	40004800 	.word	0x40004800
 800bc78:	40004c00 	.word	0x40004c00
 800bc7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 812a 	beq.w	800bee8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	4a9e      	ldr	r2, [pc, #632]	; (800bf14 <UART_SetConfig+0x590>)
 800bc9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bca6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	4613      	mov	r3, r2
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	4413      	add	r3, r2
 800bcb2:	69ba      	ldr	r2, [r7, #24]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d305      	bcc.n	800bcc4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d903      	bls.n	800bccc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bcca:	e10d      	b.n	800bee8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	2200      	movs	r2, #0
 800bcd0:	60bb      	str	r3, [r7, #8]
 800bcd2:	60fa      	str	r2, [r7, #12]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	4a8e      	ldr	r2, [pc, #568]	; (800bf14 <UART_SetConfig+0x590>)
 800bcda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	2200      	movs	r2, #0
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	607a      	str	r2, [r7, #4]
 800bce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcee:	f7f4 ffd3 	bl	8000c98 <__aeabi_uldivmod>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	f04f 0200 	mov.w	r2, #0
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	020b      	lsls	r3, r1, #8
 800bd04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd08:	0202      	lsls	r2, r0, #8
 800bd0a:	6979      	ldr	r1, [r7, #20]
 800bd0c:	6849      	ldr	r1, [r1, #4]
 800bd0e:	0849      	lsrs	r1, r1, #1
 800bd10:	2000      	movs	r0, #0
 800bd12:	460c      	mov	r4, r1
 800bd14:	4605      	mov	r5, r0
 800bd16:	eb12 0804 	adds.w	r8, r2, r4
 800bd1a:	eb43 0905 	adc.w	r9, r3, r5
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	469a      	mov	sl, r3
 800bd26:	4693      	mov	fp, r2
 800bd28:	4652      	mov	r2, sl
 800bd2a:	465b      	mov	r3, fp
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4649      	mov	r1, r9
 800bd30:	f7f4 ffb2 	bl	8000c98 <__aeabi_uldivmod>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4613      	mov	r3, r2
 800bd3a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd42:	d308      	bcc.n	800bd56 <UART_SetConfig+0x3d2>
 800bd44:	6a3b      	ldr	r3, [r7, #32]
 800bd46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd4a:	d204      	bcs.n	800bd56 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6a3a      	ldr	r2, [r7, #32]
 800bd52:	60da      	str	r2, [r3, #12]
 800bd54:	e0c8      	b.n	800bee8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd5c:	e0c4      	b.n	800bee8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd66:	d167      	bne.n	800be38 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800bd68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd6c:	2b08      	cmp	r3, #8
 800bd6e:	d828      	bhi.n	800bdc2 <UART_SetConfig+0x43e>
 800bd70:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <UART_SetConfig+0x3f4>)
 800bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd76:	bf00      	nop
 800bd78:	0800bd9d 	.word	0x0800bd9d
 800bd7c:	0800bda5 	.word	0x0800bda5
 800bd80:	0800bdad 	.word	0x0800bdad
 800bd84:	0800bdc3 	.word	0x0800bdc3
 800bd88:	0800bdb3 	.word	0x0800bdb3
 800bd8c:	0800bdc3 	.word	0x0800bdc3
 800bd90:	0800bdc3 	.word	0x0800bdc3
 800bd94:	0800bdc3 	.word	0x0800bdc3
 800bd98:	0800bdbb 	.word	0x0800bdbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd9c:	f7fd f8ae 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 800bda0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bda2:	e014      	b.n	800bdce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bda4:	f7fd f8c0 	bl	8008f28 <HAL_RCC_GetPCLK2Freq>
 800bda8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdaa:	e010      	b.n	800bdce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdac:	4b5a      	ldr	r3, [pc, #360]	; (800bf18 <UART_SetConfig+0x594>)
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdb0:	e00d      	b.n	800bdce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdb2:	f7fd f835 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800bdb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdb8:	e009      	b.n	800bdce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdc0:	e005      	b.n	800bdce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bdcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 8089 	beq.w	800bee8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdda:	4a4e      	ldr	r2, [pc, #312]	; (800bf14 <UART_SetConfig+0x590>)
 800bddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bde8:	005a      	lsls	r2, r3, #1
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	085b      	lsrs	r3, r3, #1
 800bdf0:	441a      	add	r2, r3
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	2b0f      	cmp	r3, #15
 800be00:	d916      	bls.n	800be30 <UART_SetConfig+0x4ac>
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be08:	d212      	bcs.n	800be30 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be0a:	6a3b      	ldr	r3, [r7, #32]
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	f023 030f 	bic.w	r3, r3, #15
 800be12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	085b      	lsrs	r3, r3, #1
 800be18:	b29b      	uxth	r3, r3
 800be1a:	f003 0307 	and.w	r3, r3, #7
 800be1e:	b29a      	uxth	r2, r3
 800be20:	8bfb      	ldrh	r3, [r7, #30]
 800be22:	4313      	orrs	r3, r2
 800be24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	8bfa      	ldrh	r2, [r7, #30]
 800be2c:	60da      	str	r2, [r3, #12]
 800be2e:	e05b      	b.n	800bee8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be36:	e057      	b.n	800bee8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be3c:	2b08      	cmp	r3, #8
 800be3e:	d828      	bhi.n	800be92 <UART_SetConfig+0x50e>
 800be40:	a201      	add	r2, pc, #4	; (adr r2, 800be48 <UART_SetConfig+0x4c4>)
 800be42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be46:	bf00      	nop
 800be48:	0800be6d 	.word	0x0800be6d
 800be4c:	0800be75 	.word	0x0800be75
 800be50:	0800be7d 	.word	0x0800be7d
 800be54:	0800be93 	.word	0x0800be93
 800be58:	0800be83 	.word	0x0800be83
 800be5c:	0800be93 	.word	0x0800be93
 800be60:	0800be93 	.word	0x0800be93
 800be64:	0800be93 	.word	0x0800be93
 800be68:	0800be8b 	.word	0x0800be8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be6c:	f7fd f846 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 800be70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be72:	e014      	b.n	800be9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be74:	f7fd f858 	bl	8008f28 <HAL_RCC_GetPCLK2Freq>
 800be78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be7a:	e010      	b.n	800be9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be7c:	4b26      	ldr	r3, [pc, #152]	; (800bf18 <UART_SetConfig+0x594>)
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be80:	e00d      	b.n	800be9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be82:	f7fc ffcd 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800be86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be88:	e009      	b.n	800be9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be90:	e005      	b.n	800be9e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800be92:	2300      	movs	r3, #0
 800be94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be9c:	bf00      	nop
    }

    if (pclk != 0U)
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d021      	beq.n	800bee8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	4a1a      	ldr	r2, [pc, #104]	; (800bf14 <UART_SetConfig+0x590>)
 800beaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beae:	461a      	mov	r2, r3
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	085b      	lsrs	r3, r3, #1
 800bebc:	441a      	add	r2, r3
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	2b0f      	cmp	r3, #15
 800becc:	d909      	bls.n	800bee2 <UART_SetConfig+0x55e>
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed4:	d205      	bcs.n	800bee2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	b29a      	uxth	r2, r3
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60da      	str	r2, [r3, #12]
 800bee0:	e002      	b.n	800bee8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2201      	movs	r2, #1
 800beec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	2200      	movs	r2, #0
 800befc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2200      	movs	r2, #0
 800bf02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bf04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3730      	adds	r7, #48	; 0x30
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf12:	bf00      	nop
 800bf14:	08010170 	.word	0x08010170
 800bf18:	00f42400 	.word	0x00f42400

0800bf1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00a      	beq.n	800bf46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4a:	f003 0302 	and.w	r3, r3, #2
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00a      	beq.n	800bf68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	430a      	orrs	r2, r1
 800bf66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6c:	f003 0304 	and.w	r3, r3, #4
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00a      	beq.n	800bf8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	430a      	orrs	r2, r1
 800bf88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8e:	f003 0308 	and.w	r3, r3, #8
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00a      	beq.n	800bfac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	f003 0310 	and.w	r3, r3, #16
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	430a      	orrs	r2, r1
 800bfcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00a      	beq.n	800bff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	430a      	orrs	r2, r1
 800bfee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d01a      	beq.n	800c032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	430a      	orrs	r2, r1
 800c010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c01a:	d10a      	bne.n	800c032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00a      	beq.n	800c054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	430a      	orrs	r2, r1
 800c052:	605a      	str	r2, [r3, #4]
  }
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af02      	add	r7, sp, #8
 800c066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c070:	f7f9 f9ce 	bl	8005410 <HAL_GetTick>
 800c074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0308 	and.w	r3, r3, #8
 800c080:	2b08      	cmp	r3, #8
 800c082:	d10e      	bne.n	800c0a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f82f 	bl	800c0f6 <UART_WaitOnFlagUntilTimeout>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e025      	b.n	800c0ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d10e      	bne.n	800c0ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f819 	bl	800c0f6 <UART_WaitOnFlagUntilTimeout>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e00f      	b.n	800c0ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b09c      	sub	sp, #112	; 0x70
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	603b      	str	r3, [r7, #0]
 800c102:	4613      	mov	r3, r2
 800c104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c106:	e0a9      	b.n	800c25c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	f000 80a5 	beq.w	800c25c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c112:	f7f9 f97d 	bl	8005410 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c11e:	429a      	cmp	r2, r3
 800c120:	d302      	bcc.n	800c128 <UART_WaitOnFlagUntilTimeout+0x32>
 800c122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c124:	2b00      	cmp	r3, #0
 800c126:	d140      	bne.n	800c1aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c130:	e853 3f00 	ldrex	r3, [r3]
 800c134:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c13c:	667b      	str	r3, [r7, #100]	; 0x64
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	461a      	mov	r2, r3
 800c144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c146:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c148:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c14c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c14e:	e841 2300 	strex	r3, r2, [r1]
 800c152:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1e6      	bne.n	800c128 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3308      	adds	r3, #8
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	f023 0301 	bic.w	r3, r3, #1
 800c170:	663b      	str	r3, [r7, #96]	; 0x60
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3308      	adds	r3, #8
 800c178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c17a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c17c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c182:	e841 2300 	strex	r3, r2, [r1]
 800c186:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1e5      	bne.n	800c15a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2220      	movs	r2, #32
 800c192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2220      	movs	r2, #32
 800c19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e069      	b.n	800c27e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d051      	beq.n	800c25c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	69db      	ldr	r3, [r3, #28]
 800c1be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1c6:	d149      	bne.n	800c25c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	e853 3f00 	ldrex	r3, [r3]
 800c1de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f0:	637b      	str	r3, [r7, #52]	; 0x34
 800c1f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1f8:	e841 2300 	strex	r3, r2, [r1]
 800c1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1e6      	bne.n	800c1d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3308      	adds	r3, #8
 800c20a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	613b      	str	r3, [r7, #16]
   return(result);
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f023 0301 	bic.w	r3, r3, #1
 800c21a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3308      	adds	r3, #8
 800c222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c224:	623a      	str	r2, [r7, #32]
 800c226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c228:	69f9      	ldr	r1, [r7, #28]
 800c22a:	6a3a      	ldr	r2, [r7, #32]
 800c22c:	e841 2300 	strex	r3, r2, [r1]
 800c230:	61bb      	str	r3, [r7, #24]
   return(result);
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e5      	bne.n	800c204 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2220      	movs	r2, #32
 800c23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2220      	movs	r2, #32
 800c244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c258:	2303      	movs	r3, #3
 800c25a:	e010      	b.n	800c27e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	69da      	ldr	r2, [r3, #28]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	4013      	ands	r3, r2
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	429a      	cmp	r2, r3
 800c26a:	bf0c      	ite	eq
 800c26c:	2301      	moveq	r3, #1
 800c26e:	2300      	movne	r3, #0
 800c270:	b2db      	uxtb	r3, r3
 800c272:	461a      	mov	r2, r3
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	429a      	cmp	r2, r3
 800c278:	f43f af46 	beq.w	800c108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3770      	adds	r7, #112	; 0x70
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c286:	b480      	push	{r7}
 800c288:	b085      	sub	sp, #20
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c294:	2b01      	cmp	r3, #1
 800c296:	d101      	bne.n	800c29c <HAL_UARTEx_DisableFifoMode+0x16>
 800c298:	2302      	movs	r3, #2
 800c29a:	e027      	b.n	800c2ec <HAL_UARTEx_DisableFifoMode+0x66>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2224      	movs	r2, #36	; 0x24
 800c2a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0201 	bic.w	r2, r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c2ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d101      	bne.n	800c310 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c30c:	2302      	movs	r3, #2
 800c30e:	e02d      	b.n	800c36c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2224      	movs	r2, #36	; 0x24
 800c31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 0201 	bic.w	r2, r2, #1
 800c336:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f84f 	bl	800c3f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2220      	movs	r2, #32
 800c35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c384:	2b01      	cmp	r3, #1
 800c386:	d101      	bne.n	800c38c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c388:	2302      	movs	r3, #2
 800c38a:	e02d      	b.n	800c3e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2224      	movs	r2, #36	; 0x24
 800c398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0201 	bic.w	r2, r2, #1
 800c3b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	430a      	orrs	r2, r1
 800c3c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f811 	bl	800c3f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2220      	movs	r2, #32
 800c3da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d108      	bne.n	800c412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c410:	e031      	b.n	800c476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c412:	2308      	movs	r3, #8
 800c414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c416:	2308      	movs	r3, #8
 800c418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	0e5b      	lsrs	r3, r3, #25
 800c422:	b2db      	uxtb	r3, r3
 800c424:	f003 0307 	and.w	r3, r3, #7
 800c428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	0f5b      	lsrs	r3, r3, #29
 800c432:	b2db      	uxtb	r3, r3
 800c434:	f003 0307 	and.w	r3, r3, #7
 800c438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	7b3a      	ldrb	r2, [r7, #12]
 800c43e:	4911      	ldr	r1, [pc, #68]	; (800c484 <UARTEx_SetNbDataToProcess+0x94>)
 800c440:	5c8a      	ldrb	r2, [r1, r2]
 800c442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c446:	7b3a      	ldrb	r2, [r7, #12]
 800c448:	490f      	ldr	r1, [pc, #60]	; (800c488 <UARTEx_SetNbDataToProcess+0x98>)
 800c44a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c44c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c450:	b29a      	uxth	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	7b7a      	ldrb	r2, [r7, #13]
 800c45c:	4909      	ldr	r1, [pc, #36]	; (800c484 <UARTEx_SetNbDataToProcess+0x94>)
 800c45e:	5c8a      	ldrb	r2, [r1, r2]
 800c460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c464:	7b7a      	ldrb	r2, [r7, #13]
 800c466:	4908      	ldr	r1, [pc, #32]	; (800c488 <UARTEx_SetNbDataToProcess+0x98>)
 800c468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c46a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c46e:	b29a      	uxth	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c476:	bf00      	nop
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	08010188 	.word	0x08010188
 800c488:	08010190 	.word	0x08010190

0800c48c <__errno>:
 800c48c:	4b01      	ldr	r3, [pc, #4]	; (800c494 <__errno+0x8>)
 800c48e:	6818      	ldr	r0, [r3, #0]
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	2000002c 	.word	0x2000002c

0800c498 <__libc_init_array>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	4d0d      	ldr	r5, [pc, #52]	; (800c4d0 <__libc_init_array+0x38>)
 800c49c:	4c0d      	ldr	r4, [pc, #52]	; (800c4d4 <__libc_init_array+0x3c>)
 800c49e:	1b64      	subs	r4, r4, r5
 800c4a0:	10a4      	asrs	r4, r4, #2
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	42a6      	cmp	r6, r4
 800c4a6:	d109      	bne.n	800c4bc <__libc_init_array+0x24>
 800c4a8:	4d0b      	ldr	r5, [pc, #44]	; (800c4d8 <__libc_init_array+0x40>)
 800c4aa:	4c0c      	ldr	r4, [pc, #48]	; (800c4dc <__libc_init_array+0x44>)
 800c4ac:	f003 fdba 	bl	8010024 <_init>
 800c4b0:	1b64      	subs	r4, r4, r5
 800c4b2:	10a4      	asrs	r4, r4, #2
 800c4b4:	2600      	movs	r6, #0
 800c4b6:	42a6      	cmp	r6, r4
 800c4b8:	d105      	bne.n	800c4c6 <__libc_init_array+0x2e>
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4c0:	4798      	blx	r3
 800c4c2:	3601      	adds	r6, #1
 800c4c4:	e7ee      	b.n	800c4a4 <__libc_init_array+0xc>
 800c4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ca:	4798      	blx	r3
 800c4cc:	3601      	adds	r6, #1
 800c4ce:	e7f2      	b.n	800c4b6 <__libc_init_array+0x1e>
 800c4d0:	08010954 	.word	0x08010954
 800c4d4:	08010954 	.word	0x08010954
 800c4d8:	08010954 	.word	0x08010954
 800c4dc:	08010958 	.word	0x08010958

0800c4e0 <memset>:
 800c4e0:	4402      	add	r2, r0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d100      	bne.n	800c4ea <memset+0xa>
 800c4e8:	4770      	bx	lr
 800c4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ee:	e7f9      	b.n	800c4e4 <memset+0x4>

0800c4f0 <__cvt>:
 800c4f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f4:	ec55 4b10 	vmov	r4, r5, d0
 800c4f8:	2d00      	cmp	r5, #0
 800c4fa:	460e      	mov	r6, r1
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	462b      	mov	r3, r5
 800c500:	bfbb      	ittet	lt
 800c502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c506:	461d      	movlt	r5, r3
 800c508:	2300      	movge	r3, #0
 800c50a:	232d      	movlt	r3, #45	; 0x2d
 800c50c:	700b      	strb	r3, [r1, #0]
 800c50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c514:	4691      	mov	r9, r2
 800c516:	f023 0820 	bic.w	r8, r3, #32
 800c51a:	bfbc      	itt	lt
 800c51c:	4622      	movlt	r2, r4
 800c51e:	4614      	movlt	r4, r2
 800c520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c524:	d005      	beq.n	800c532 <__cvt+0x42>
 800c526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c52a:	d100      	bne.n	800c52e <__cvt+0x3e>
 800c52c:	3601      	adds	r6, #1
 800c52e:	2102      	movs	r1, #2
 800c530:	e000      	b.n	800c534 <__cvt+0x44>
 800c532:	2103      	movs	r1, #3
 800c534:	ab03      	add	r3, sp, #12
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	ab02      	add	r3, sp, #8
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	ec45 4b10 	vmov	d0, r4, r5
 800c540:	4653      	mov	r3, sl
 800c542:	4632      	mov	r2, r6
 800c544:	f000 fcec 	bl	800cf20 <_dtoa_r>
 800c548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c54c:	4607      	mov	r7, r0
 800c54e:	d102      	bne.n	800c556 <__cvt+0x66>
 800c550:	f019 0f01 	tst.w	r9, #1
 800c554:	d022      	beq.n	800c59c <__cvt+0xac>
 800c556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c55a:	eb07 0906 	add.w	r9, r7, r6
 800c55e:	d110      	bne.n	800c582 <__cvt+0x92>
 800c560:	783b      	ldrb	r3, [r7, #0]
 800c562:	2b30      	cmp	r3, #48	; 0x30
 800c564:	d10a      	bne.n	800c57c <__cvt+0x8c>
 800c566:	2200      	movs	r2, #0
 800c568:	2300      	movs	r3, #0
 800c56a:	4620      	mov	r0, r4
 800c56c:	4629      	mov	r1, r5
 800c56e:	f7f4 fad3 	bl	8000b18 <__aeabi_dcmpeq>
 800c572:	b918      	cbnz	r0, 800c57c <__cvt+0x8c>
 800c574:	f1c6 0601 	rsb	r6, r6, #1
 800c578:	f8ca 6000 	str.w	r6, [sl]
 800c57c:	f8da 3000 	ldr.w	r3, [sl]
 800c580:	4499      	add	r9, r3
 800c582:	2200      	movs	r2, #0
 800c584:	2300      	movs	r3, #0
 800c586:	4620      	mov	r0, r4
 800c588:	4629      	mov	r1, r5
 800c58a:	f7f4 fac5 	bl	8000b18 <__aeabi_dcmpeq>
 800c58e:	b108      	cbz	r0, 800c594 <__cvt+0xa4>
 800c590:	f8cd 900c 	str.w	r9, [sp, #12]
 800c594:	2230      	movs	r2, #48	; 0x30
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	454b      	cmp	r3, r9
 800c59a:	d307      	bcc.n	800c5ac <__cvt+0xbc>
 800c59c:	9b03      	ldr	r3, [sp, #12]
 800c59e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5a0:	1bdb      	subs	r3, r3, r7
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	6013      	str	r3, [r2, #0]
 800c5a6:	b004      	add	sp, #16
 800c5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ac:	1c59      	adds	r1, r3, #1
 800c5ae:	9103      	str	r1, [sp, #12]
 800c5b0:	701a      	strb	r2, [r3, #0]
 800c5b2:	e7f0      	b.n	800c596 <__cvt+0xa6>

0800c5b4 <__exponent>:
 800c5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2900      	cmp	r1, #0
 800c5ba:	bfb8      	it	lt
 800c5bc:	4249      	neglt	r1, r1
 800c5be:	f803 2b02 	strb.w	r2, [r3], #2
 800c5c2:	bfb4      	ite	lt
 800c5c4:	222d      	movlt	r2, #45	; 0x2d
 800c5c6:	222b      	movge	r2, #43	; 0x2b
 800c5c8:	2909      	cmp	r1, #9
 800c5ca:	7042      	strb	r2, [r0, #1]
 800c5cc:	dd2a      	ble.n	800c624 <__exponent+0x70>
 800c5ce:	f10d 0407 	add.w	r4, sp, #7
 800c5d2:	46a4      	mov	ip, r4
 800c5d4:	270a      	movs	r7, #10
 800c5d6:	46a6      	mov	lr, r4
 800c5d8:	460a      	mov	r2, r1
 800c5da:	fb91 f6f7 	sdiv	r6, r1, r7
 800c5de:	fb07 1516 	mls	r5, r7, r6, r1
 800c5e2:	3530      	adds	r5, #48	; 0x30
 800c5e4:	2a63      	cmp	r2, #99	; 0x63
 800c5e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	dcf1      	bgt.n	800c5d6 <__exponent+0x22>
 800c5f2:	3130      	adds	r1, #48	; 0x30
 800c5f4:	f1ae 0502 	sub.w	r5, lr, #2
 800c5f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c5fc:	1c44      	adds	r4, r0, #1
 800c5fe:	4629      	mov	r1, r5
 800c600:	4561      	cmp	r1, ip
 800c602:	d30a      	bcc.n	800c61a <__exponent+0x66>
 800c604:	f10d 0209 	add.w	r2, sp, #9
 800c608:	eba2 020e 	sub.w	r2, r2, lr
 800c60c:	4565      	cmp	r5, ip
 800c60e:	bf88      	it	hi
 800c610:	2200      	movhi	r2, #0
 800c612:	4413      	add	r3, r2
 800c614:	1a18      	subs	r0, r3, r0
 800c616:	b003      	add	sp, #12
 800c618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c61e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c622:	e7ed      	b.n	800c600 <__exponent+0x4c>
 800c624:	2330      	movs	r3, #48	; 0x30
 800c626:	3130      	adds	r1, #48	; 0x30
 800c628:	7083      	strb	r3, [r0, #2]
 800c62a:	70c1      	strb	r1, [r0, #3]
 800c62c:	1d03      	adds	r3, r0, #4
 800c62e:	e7f1      	b.n	800c614 <__exponent+0x60>

0800c630 <_printf_float>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	ed2d 8b02 	vpush	{d8}
 800c638:	b08d      	sub	sp, #52	; 0x34
 800c63a:	460c      	mov	r4, r1
 800c63c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c640:	4616      	mov	r6, r2
 800c642:	461f      	mov	r7, r3
 800c644:	4605      	mov	r5, r0
 800c646:	f001 fa59 	bl	800dafc <_localeconv_r>
 800c64a:	f8d0 a000 	ldr.w	sl, [r0]
 800c64e:	4650      	mov	r0, sl
 800c650:	f7f3 fde6 	bl	8000220 <strlen>
 800c654:	2300      	movs	r3, #0
 800c656:	930a      	str	r3, [sp, #40]	; 0x28
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	9305      	str	r3, [sp, #20]
 800c65c:	f8d8 3000 	ldr.w	r3, [r8]
 800c660:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c664:	3307      	adds	r3, #7
 800c666:	f023 0307 	bic.w	r3, r3, #7
 800c66a:	f103 0208 	add.w	r2, r3, #8
 800c66e:	f8c8 2000 	str.w	r2, [r8]
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c67a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c67e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c682:	9307      	str	r3, [sp, #28]
 800c684:	f8cd 8018 	str.w	r8, [sp, #24]
 800c688:	ee08 0a10 	vmov	s16, r0
 800c68c:	4b9f      	ldr	r3, [pc, #636]	; (800c90c <_printf_float+0x2dc>)
 800c68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c692:	f04f 32ff 	mov.w	r2, #4294967295
 800c696:	f7f4 fa71 	bl	8000b7c <__aeabi_dcmpun>
 800c69a:	bb88      	cbnz	r0, 800c700 <_printf_float+0xd0>
 800c69c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6a0:	4b9a      	ldr	r3, [pc, #616]	; (800c90c <_printf_float+0x2dc>)
 800c6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a6:	f7f4 fa4b 	bl	8000b40 <__aeabi_dcmple>
 800c6aa:	bb48      	cbnz	r0, 800c700 <_printf_float+0xd0>
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f7f4 fa3a 	bl	8000b2c <__aeabi_dcmplt>
 800c6b8:	b110      	cbz	r0, 800c6c0 <_printf_float+0x90>
 800c6ba:	232d      	movs	r3, #45	; 0x2d
 800c6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6c0:	4b93      	ldr	r3, [pc, #588]	; (800c910 <_printf_float+0x2e0>)
 800c6c2:	4894      	ldr	r0, [pc, #592]	; (800c914 <_printf_float+0x2e4>)
 800c6c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c6c8:	bf94      	ite	ls
 800c6ca:	4698      	movls	r8, r3
 800c6cc:	4680      	movhi	r8, r0
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	f023 0204 	bic.w	r2, r3, #4
 800c6d8:	6022      	str	r2, [r4, #0]
 800c6da:	f04f 0900 	mov.w	r9, #0
 800c6de:	9700      	str	r7, [sp, #0]
 800c6e0:	4633      	mov	r3, r6
 800c6e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f000 f9d8 	bl	800ca9c <_printf_common>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	f040 8090 	bne.w	800c812 <_printf_float+0x1e2>
 800c6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f6:	b00d      	add	sp, #52	; 0x34
 800c6f8:	ecbd 8b02 	vpop	{d8}
 800c6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c700:	4642      	mov	r2, r8
 800c702:	464b      	mov	r3, r9
 800c704:	4640      	mov	r0, r8
 800c706:	4649      	mov	r1, r9
 800c708:	f7f4 fa38 	bl	8000b7c <__aeabi_dcmpun>
 800c70c:	b140      	cbz	r0, 800c720 <_printf_float+0xf0>
 800c70e:	464b      	mov	r3, r9
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfbc      	itt	lt
 800c714:	232d      	movlt	r3, #45	; 0x2d
 800c716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c71a:	487f      	ldr	r0, [pc, #508]	; (800c918 <_printf_float+0x2e8>)
 800c71c:	4b7f      	ldr	r3, [pc, #508]	; (800c91c <_printf_float+0x2ec>)
 800c71e:	e7d1      	b.n	800c6c4 <_printf_float+0x94>
 800c720:	6863      	ldr	r3, [r4, #4]
 800c722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c726:	9206      	str	r2, [sp, #24]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	d13f      	bne.n	800c7ac <_printf_float+0x17c>
 800c72c:	2306      	movs	r3, #6
 800c72e:	6063      	str	r3, [r4, #4]
 800c730:	9b05      	ldr	r3, [sp, #20]
 800c732:	6861      	ldr	r1, [r4, #4]
 800c734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c738:	2300      	movs	r3, #0
 800c73a:	9303      	str	r3, [sp, #12]
 800c73c:	ab0a      	add	r3, sp, #40	; 0x28
 800c73e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c742:	ab09      	add	r3, sp, #36	; 0x24
 800c744:	ec49 8b10 	vmov	d0, r8, r9
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	6022      	str	r2, [r4, #0]
 800c74c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c750:	4628      	mov	r0, r5
 800c752:	f7ff fecd 	bl	800c4f0 <__cvt>
 800c756:	9b06      	ldr	r3, [sp, #24]
 800c758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c75a:	2b47      	cmp	r3, #71	; 0x47
 800c75c:	4680      	mov	r8, r0
 800c75e:	d108      	bne.n	800c772 <_printf_float+0x142>
 800c760:	1cc8      	adds	r0, r1, #3
 800c762:	db02      	blt.n	800c76a <_printf_float+0x13a>
 800c764:	6863      	ldr	r3, [r4, #4]
 800c766:	4299      	cmp	r1, r3
 800c768:	dd41      	ble.n	800c7ee <_printf_float+0x1be>
 800c76a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c76e:	fa5f fb8b 	uxtb.w	fp, fp
 800c772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c776:	d820      	bhi.n	800c7ba <_printf_float+0x18a>
 800c778:	3901      	subs	r1, #1
 800c77a:	465a      	mov	r2, fp
 800c77c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c780:	9109      	str	r1, [sp, #36]	; 0x24
 800c782:	f7ff ff17 	bl	800c5b4 <__exponent>
 800c786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c788:	1813      	adds	r3, r2, r0
 800c78a:	2a01      	cmp	r2, #1
 800c78c:	4681      	mov	r9, r0
 800c78e:	6123      	str	r3, [r4, #16]
 800c790:	dc02      	bgt.n	800c798 <_printf_float+0x168>
 800c792:	6822      	ldr	r2, [r4, #0]
 800c794:	07d2      	lsls	r2, r2, #31
 800c796:	d501      	bpl.n	800c79c <_printf_float+0x16c>
 800c798:	3301      	adds	r3, #1
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d09c      	beq.n	800c6de <_printf_float+0xae>
 800c7a4:	232d      	movs	r3, #45	; 0x2d
 800c7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7aa:	e798      	b.n	800c6de <_printf_float+0xae>
 800c7ac:	9a06      	ldr	r2, [sp, #24]
 800c7ae:	2a47      	cmp	r2, #71	; 0x47
 800c7b0:	d1be      	bne.n	800c730 <_printf_float+0x100>
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1bc      	bne.n	800c730 <_printf_float+0x100>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e7b9      	b.n	800c72e <_printf_float+0xfe>
 800c7ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c7be:	d118      	bne.n	800c7f2 <_printf_float+0x1c2>
 800c7c0:	2900      	cmp	r1, #0
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	dd0b      	ble.n	800c7de <_printf_float+0x1ae>
 800c7c6:	6121      	str	r1, [r4, #16]
 800c7c8:	b913      	cbnz	r3, 800c7d0 <_printf_float+0x1a0>
 800c7ca:	6822      	ldr	r2, [r4, #0]
 800c7cc:	07d0      	lsls	r0, r2, #31
 800c7ce:	d502      	bpl.n	800c7d6 <_printf_float+0x1a6>
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	440b      	add	r3, r1
 800c7d4:	6123      	str	r3, [r4, #16]
 800c7d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c7d8:	f04f 0900 	mov.w	r9, #0
 800c7dc:	e7de      	b.n	800c79c <_printf_float+0x16c>
 800c7de:	b913      	cbnz	r3, 800c7e6 <_printf_float+0x1b6>
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	07d2      	lsls	r2, r2, #31
 800c7e4:	d501      	bpl.n	800c7ea <_printf_float+0x1ba>
 800c7e6:	3302      	adds	r3, #2
 800c7e8:	e7f4      	b.n	800c7d4 <_printf_float+0x1a4>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e7f2      	b.n	800c7d4 <_printf_float+0x1a4>
 800c7ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f4:	4299      	cmp	r1, r3
 800c7f6:	db05      	blt.n	800c804 <_printf_float+0x1d4>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	6121      	str	r1, [r4, #16]
 800c7fc:	07d8      	lsls	r0, r3, #31
 800c7fe:	d5ea      	bpl.n	800c7d6 <_printf_float+0x1a6>
 800c800:	1c4b      	adds	r3, r1, #1
 800c802:	e7e7      	b.n	800c7d4 <_printf_float+0x1a4>
 800c804:	2900      	cmp	r1, #0
 800c806:	bfd4      	ite	le
 800c808:	f1c1 0202 	rsble	r2, r1, #2
 800c80c:	2201      	movgt	r2, #1
 800c80e:	4413      	add	r3, r2
 800c810:	e7e0      	b.n	800c7d4 <_printf_float+0x1a4>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	055a      	lsls	r2, r3, #21
 800c816:	d407      	bmi.n	800c828 <_printf_float+0x1f8>
 800c818:	6923      	ldr	r3, [r4, #16]
 800c81a:	4642      	mov	r2, r8
 800c81c:	4631      	mov	r1, r6
 800c81e:	4628      	mov	r0, r5
 800c820:	47b8      	blx	r7
 800c822:	3001      	adds	r0, #1
 800c824:	d12c      	bne.n	800c880 <_printf_float+0x250>
 800c826:	e764      	b.n	800c6f2 <_printf_float+0xc2>
 800c828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c82c:	f240 80e0 	bls.w	800c9f0 <_printf_float+0x3c0>
 800c830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c834:	2200      	movs	r2, #0
 800c836:	2300      	movs	r3, #0
 800c838:	f7f4 f96e 	bl	8000b18 <__aeabi_dcmpeq>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d034      	beq.n	800c8aa <_printf_float+0x27a>
 800c840:	4a37      	ldr	r2, [pc, #220]	; (800c920 <_printf_float+0x2f0>)
 800c842:	2301      	movs	r3, #1
 800c844:	4631      	mov	r1, r6
 800c846:	4628      	mov	r0, r5
 800c848:	47b8      	blx	r7
 800c84a:	3001      	adds	r0, #1
 800c84c:	f43f af51 	beq.w	800c6f2 <_printf_float+0xc2>
 800c850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c854:	429a      	cmp	r2, r3
 800c856:	db02      	blt.n	800c85e <_printf_float+0x22e>
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	07d8      	lsls	r0, r3, #31
 800c85c:	d510      	bpl.n	800c880 <_printf_float+0x250>
 800c85e:	ee18 3a10 	vmov	r3, s16
 800c862:	4652      	mov	r2, sl
 800c864:	4631      	mov	r1, r6
 800c866:	4628      	mov	r0, r5
 800c868:	47b8      	blx	r7
 800c86a:	3001      	adds	r0, #1
 800c86c:	f43f af41 	beq.w	800c6f2 <_printf_float+0xc2>
 800c870:	f04f 0800 	mov.w	r8, #0
 800c874:	f104 091a 	add.w	r9, r4, #26
 800c878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87a:	3b01      	subs	r3, #1
 800c87c:	4543      	cmp	r3, r8
 800c87e:	dc09      	bgt.n	800c894 <_printf_float+0x264>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	079b      	lsls	r3, r3, #30
 800c884:	f100 8105 	bmi.w	800ca92 <_printf_float+0x462>
 800c888:	68e0      	ldr	r0, [r4, #12]
 800c88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c88c:	4298      	cmp	r0, r3
 800c88e:	bfb8      	it	lt
 800c890:	4618      	movlt	r0, r3
 800c892:	e730      	b.n	800c6f6 <_printf_float+0xc6>
 800c894:	2301      	movs	r3, #1
 800c896:	464a      	mov	r2, r9
 800c898:	4631      	mov	r1, r6
 800c89a:	4628      	mov	r0, r5
 800c89c:	47b8      	blx	r7
 800c89e:	3001      	adds	r0, #1
 800c8a0:	f43f af27 	beq.w	800c6f2 <_printf_float+0xc2>
 800c8a4:	f108 0801 	add.w	r8, r8, #1
 800c8a8:	e7e6      	b.n	800c878 <_printf_float+0x248>
 800c8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	dc39      	bgt.n	800c924 <_printf_float+0x2f4>
 800c8b0:	4a1b      	ldr	r2, [pc, #108]	; (800c920 <_printf_float+0x2f0>)
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b8      	blx	r7
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	f43f af19 	beq.w	800c6f2 <_printf_float+0xc2>
 800c8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	d102      	bne.n	800c8ce <_printf_float+0x29e>
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	07d9      	lsls	r1, r3, #31
 800c8cc:	d5d8      	bpl.n	800c880 <_printf_float+0x250>
 800c8ce:	ee18 3a10 	vmov	r3, s16
 800c8d2:	4652      	mov	r2, sl
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	47b8      	blx	r7
 800c8da:	3001      	adds	r0, #1
 800c8dc:	f43f af09 	beq.w	800c6f2 <_printf_float+0xc2>
 800c8e0:	f04f 0900 	mov.w	r9, #0
 800c8e4:	f104 0a1a 	add.w	sl, r4, #26
 800c8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ea:	425b      	negs	r3, r3
 800c8ec:	454b      	cmp	r3, r9
 800c8ee:	dc01      	bgt.n	800c8f4 <_printf_float+0x2c4>
 800c8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f2:	e792      	b.n	800c81a <_printf_float+0x1ea>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	47b8      	blx	r7
 800c8fe:	3001      	adds	r0, #1
 800c900:	f43f aef7 	beq.w	800c6f2 <_printf_float+0xc2>
 800c904:	f109 0901 	add.w	r9, r9, #1
 800c908:	e7ee      	b.n	800c8e8 <_printf_float+0x2b8>
 800c90a:	bf00      	nop
 800c90c:	7fefffff 	.word	0x7fefffff
 800c910:	0801019c 	.word	0x0801019c
 800c914:	080101a0 	.word	0x080101a0
 800c918:	080101a8 	.word	0x080101a8
 800c91c:	080101a4 	.word	0x080101a4
 800c920:	080101ac 	.word	0x080101ac
 800c924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c928:	429a      	cmp	r2, r3
 800c92a:	bfa8      	it	ge
 800c92c:	461a      	movge	r2, r3
 800c92e:	2a00      	cmp	r2, #0
 800c930:	4691      	mov	r9, r2
 800c932:	dc37      	bgt.n	800c9a4 <_printf_float+0x374>
 800c934:	f04f 0b00 	mov.w	fp, #0
 800c938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c93c:	f104 021a 	add.w	r2, r4, #26
 800c940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	eba3 0309 	sub.w	r3, r3, r9
 800c948:	455b      	cmp	r3, fp
 800c94a:	dc33      	bgt.n	800c9b4 <_printf_float+0x384>
 800c94c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c950:	429a      	cmp	r2, r3
 800c952:	db3b      	blt.n	800c9cc <_printf_float+0x39c>
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	07da      	lsls	r2, r3, #31
 800c958:	d438      	bmi.n	800c9cc <_printf_float+0x39c>
 800c95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c95c:	9a05      	ldr	r2, [sp, #20]
 800c95e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c960:	1a9a      	subs	r2, r3, r2
 800c962:	eba3 0901 	sub.w	r9, r3, r1
 800c966:	4591      	cmp	r9, r2
 800c968:	bfa8      	it	ge
 800c96a:	4691      	movge	r9, r2
 800c96c:	f1b9 0f00 	cmp.w	r9, #0
 800c970:	dc35      	bgt.n	800c9de <_printf_float+0x3ae>
 800c972:	f04f 0800 	mov.w	r8, #0
 800c976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c97a:	f104 0a1a 	add.w	sl, r4, #26
 800c97e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c982:	1a9b      	subs	r3, r3, r2
 800c984:	eba3 0309 	sub.w	r3, r3, r9
 800c988:	4543      	cmp	r3, r8
 800c98a:	f77f af79 	ble.w	800c880 <_printf_float+0x250>
 800c98e:	2301      	movs	r3, #1
 800c990:	4652      	mov	r2, sl
 800c992:	4631      	mov	r1, r6
 800c994:	4628      	mov	r0, r5
 800c996:	47b8      	blx	r7
 800c998:	3001      	adds	r0, #1
 800c99a:	f43f aeaa 	beq.w	800c6f2 <_printf_float+0xc2>
 800c99e:	f108 0801 	add.w	r8, r8, #1
 800c9a2:	e7ec      	b.n	800c97e <_printf_float+0x34e>
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4642      	mov	r2, r8
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	47b8      	blx	r7
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	d1c0      	bne.n	800c934 <_printf_float+0x304>
 800c9b2:	e69e      	b.n	800c6f2 <_printf_float+0xc2>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	9205      	str	r2, [sp, #20]
 800c9bc:	47b8      	blx	r7
 800c9be:	3001      	adds	r0, #1
 800c9c0:	f43f ae97 	beq.w	800c6f2 <_printf_float+0xc2>
 800c9c4:	9a05      	ldr	r2, [sp, #20]
 800c9c6:	f10b 0b01 	add.w	fp, fp, #1
 800c9ca:	e7b9      	b.n	800c940 <_printf_float+0x310>
 800c9cc:	ee18 3a10 	vmov	r3, s16
 800c9d0:	4652      	mov	r2, sl
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b8      	blx	r7
 800c9d8:	3001      	adds	r0, #1
 800c9da:	d1be      	bne.n	800c95a <_printf_float+0x32a>
 800c9dc:	e689      	b.n	800c6f2 <_printf_float+0xc2>
 800c9de:	9a05      	ldr	r2, [sp, #20]
 800c9e0:	464b      	mov	r3, r9
 800c9e2:	4442      	add	r2, r8
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	47b8      	blx	r7
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	d1c1      	bne.n	800c972 <_printf_float+0x342>
 800c9ee:	e680      	b.n	800c6f2 <_printf_float+0xc2>
 800c9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9f2:	2a01      	cmp	r2, #1
 800c9f4:	dc01      	bgt.n	800c9fa <_printf_float+0x3ca>
 800c9f6:	07db      	lsls	r3, r3, #31
 800c9f8:	d538      	bpl.n	800ca6c <_printf_float+0x43c>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	4642      	mov	r2, r8
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4628      	mov	r0, r5
 800ca02:	47b8      	blx	r7
 800ca04:	3001      	adds	r0, #1
 800ca06:	f43f ae74 	beq.w	800c6f2 <_printf_float+0xc2>
 800ca0a:	ee18 3a10 	vmov	r3, s16
 800ca0e:	4652      	mov	r2, sl
 800ca10:	4631      	mov	r1, r6
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b8      	blx	r7
 800ca16:	3001      	adds	r0, #1
 800ca18:	f43f ae6b 	beq.w	800c6f2 <_printf_float+0xc2>
 800ca1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca20:	2200      	movs	r2, #0
 800ca22:	2300      	movs	r3, #0
 800ca24:	f7f4 f878 	bl	8000b18 <__aeabi_dcmpeq>
 800ca28:	b9d8      	cbnz	r0, 800ca62 <_printf_float+0x432>
 800ca2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2c:	f108 0201 	add.w	r2, r8, #1
 800ca30:	3b01      	subs	r3, #1
 800ca32:	4631      	mov	r1, r6
 800ca34:	4628      	mov	r0, r5
 800ca36:	47b8      	blx	r7
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d10e      	bne.n	800ca5a <_printf_float+0x42a>
 800ca3c:	e659      	b.n	800c6f2 <_printf_float+0xc2>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	4652      	mov	r2, sl
 800ca42:	4631      	mov	r1, r6
 800ca44:	4628      	mov	r0, r5
 800ca46:	47b8      	blx	r7
 800ca48:	3001      	adds	r0, #1
 800ca4a:	f43f ae52 	beq.w	800c6f2 <_printf_float+0xc2>
 800ca4e:	f108 0801 	add.w	r8, r8, #1
 800ca52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca54:	3b01      	subs	r3, #1
 800ca56:	4543      	cmp	r3, r8
 800ca58:	dcf1      	bgt.n	800ca3e <_printf_float+0x40e>
 800ca5a:	464b      	mov	r3, r9
 800ca5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca60:	e6dc      	b.n	800c81c <_printf_float+0x1ec>
 800ca62:	f04f 0800 	mov.w	r8, #0
 800ca66:	f104 0a1a 	add.w	sl, r4, #26
 800ca6a:	e7f2      	b.n	800ca52 <_printf_float+0x422>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4642      	mov	r2, r8
 800ca70:	e7df      	b.n	800ca32 <_printf_float+0x402>
 800ca72:	2301      	movs	r3, #1
 800ca74:	464a      	mov	r2, r9
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	f43f ae38 	beq.w	800c6f2 <_printf_float+0xc2>
 800ca82:	f108 0801 	add.w	r8, r8, #1
 800ca86:	68e3      	ldr	r3, [r4, #12]
 800ca88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca8a:	1a5b      	subs	r3, r3, r1
 800ca8c:	4543      	cmp	r3, r8
 800ca8e:	dcf0      	bgt.n	800ca72 <_printf_float+0x442>
 800ca90:	e6fa      	b.n	800c888 <_printf_float+0x258>
 800ca92:	f04f 0800 	mov.w	r8, #0
 800ca96:	f104 0919 	add.w	r9, r4, #25
 800ca9a:	e7f4      	b.n	800ca86 <_printf_float+0x456>

0800ca9c <_printf_common>:
 800ca9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa0:	4616      	mov	r6, r2
 800caa2:	4699      	mov	r9, r3
 800caa4:	688a      	ldr	r2, [r1, #8]
 800caa6:	690b      	ldr	r3, [r1, #16]
 800caa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800caac:	4293      	cmp	r3, r2
 800caae:	bfb8      	it	lt
 800cab0:	4613      	movlt	r3, r2
 800cab2:	6033      	str	r3, [r6, #0]
 800cab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cab8:	4607      	mov	r7, r0
 800caba:	460c      	mov	r4, r1
 800cabc:	b10a      	cbz	r2, 800cac2 <_printf_common+0x26>
 800cabe:	3301      	adds	r3, #1
 800cac0:	6033      	str	r3, [r6, #0]
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	0699      	lsls	r1, r3, #26
 800cac6:	bf42      	ittt	mi
 800cac8:	6833      	ldrmi	r3, [r6, #0]
 800caca:	3302      	addmi	r3, #2
 800cacc:	6033      	strmi	r3, [r6, #0]
 800cace:	6825      	ldr	r5, [r4, #0]
 800cad0:	f015 0506 	ands.w	r5, r5, #6
 800cad4:	d106      	bne.n	800cae4 <_printf_common+0x48>
 800cad6:	f104 0a19 	add.w	sl, r4, #25
 800cada:	68e3      	ldr	r3, [r4, #12]
 800cadc:	6832      	ldr	r2, [r6, #0]
 800cade:	1a9b      	subs	r3, r3, r2
 800cae0:	42ab      	cmp	r3, r5
 800cae2:	dc26      	bgt.n	800cb32 <_printf_common+0x96>
 800cae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cae8:	1e13      	subs	r3, r2, #0
 800caea:	6822      	ldr	r2, [r4, #0]
 800caec:	bf18      	it	ne
 800caee:	2301      	movne	r3, #1
 800caf0:	0692      	lsls	r2, r2, #26
 800caf2:	d42b      	bmi.n	800cb4c <_printf_common+0xb0>
 800caf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800caf8:	4649      	mov	r1, r9
 800cafa:	4638      	mov	r0, r7
 800cafc:	47c0      	blx	r8
 800cafe:	3001      	adds	r0, #1
 800cb00:	d01e      	beq.n	800cb40 <_printf_common+0xa4>
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	68e5      	ldr	r5, [r4, #12]
 800cb06:	6832      	ldr	r2, [r6, #0]
 800cb08:	f003 0306 	and.w	r3, r3, #6
 800cb0c:	2b04      	cmp	r3, #4
 800cb0e:	bf08      	it	eq
 800cb10:	1aad      	subeq	r5, r5, r2
 800cb12:	68a3      	ldr	r3, [r4, #8]
 800cb14:	6922      	ldr	r2, [r4, #16]
 800cb16:	bf0c      	ite	eq
 800cb18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb1c:	2500      	movne	r5, #0
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	bfc4      	itt	gt
 800cb22:	1a9b      	subgt	r3, r3, r2
 800cb24:	18ed      	addgt	r5, r5, r3
 800cb26:	2600      	movs	r6, #0
 800cb28:	341a      	adds	r4, #26
 800cb2a:	42b5      	cmp	r5, r6
 800cb2c:	d11a      	bne.n	800cb64 <_printf_common+0xc8>
 800cb2e:	2000      	movs	r0, #0
 800cb30:	e008      	b.n	800cb44 <_printf_common+0xa8>
 800cb32:	2301      	movs	r3, #1
 800cb34:	4652      	mov	r2, sl
 800cb36:	4649      	mov	r1, r9
 800cb38:	4638      	mov	r0, r7
 800cb3a:	47c0      	blx	r8
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d103      	bne.n	800cb48 <_printf_common+0xac>
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb48:	3501      	adds	r5, #1
 800cb4a:	e7c6      	b.n	800cada <_printf_common+0x3e>
 800cb4c:	18e1      	adds	r1, r4, r3
 800cb4e:	1c5a      	adds	r2, r3, #1
 800cb50:	2030      	movs	r0, #48	; 0x30
 800cb52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb56:	4422      	add	r2, r4
 800cb58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb60:	3302      	adds	r3, #2
 800cb62:	e7c7      	b.n	800caf4 <_printf_common+0x58>
 800cb64:	2301      	movs	r3, #1
 800cb66:	4622      	mov	r2, r4
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	47c0      	blx	r8
 800cb6e:	3001      	adds	r0, #1
 800cb70:	d0e6      	beq.n	800cb40 <_printf_common+0xa4>
 800cb72:	3601      	adds	r6, #1
 800cb74:	e7d9      	b.n	800cb2a <_printf_common+0x8e>
	...

0800cb78 <_printf_i>:
 800cb78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb7c:	7e0f      	ldrb	r7, [r1, #24]
 800cb7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb80:	2f78      	cmp	r7, #120	; 0x78
 800cb82:	4691      	mov	r9, r2
 800cb84:	4680      	mov	r8, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	469a      	mov	sl, r3
 800cb8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb8e:	d807      	bhi.n	800cba0 <_printf_i+0x28>
 800cb90:	2f62      	cmp	r7, #98	; 0x62
 800cb92:	d80a      	bhi.n	800cbaa <_printf_i+0x32>
 800cb94:	2f00      	cmp	r7, #0
 800cb96:	f000 80d8 	beq.w	800cd4a <_printf_i+0x1d2>
 800cb9a:	2f58      	cmp	r7, #88	; 0x58
 800cb9c:	f000 80a3 	beq.w	800cce6 <_printf_i+0x16e>
 800cba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cba8:	e03a      	b.n	800cc20 <_printf_i+0xa8>
 800cbaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbae:	2b15      	cmp	r3, #21
 800cbb0:	d8f6      	bhi.n	800cba0 <_printf_i+0x28>
 800cbb2:	a101      	add	r1, pc, #4	; (adr r1, 800cbb8 <_printf_i+0x40>)
 800cbb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbb8:	0800cc11 	.word	0x0800cc11
 800cbbc:	0800cc25 	.word	0x0800cc25
 800cbc0:	0800cba1 	.word	0x0800cba1
 800cbc4:	0800cba1 	.word	0x0800cba1
 800cbc8:	0800cba1 	.word	0x0800cba1
 800cbcc:	0800cba1 	.word	0x0800cba1
 800cbd0:	0800cc25 	.word	0x0800cc25
 800cbd4:	0800cba1 	.word	0x0800cba1
 800cbd8:	0800cba1 	.word	0x0800cba1
 800cbdc:	0800cba1 	.word	0x0800cba1
 800cbe0:	0800cba1 	.word	0x0800cba1
 800cbe4:	0800cd31 	.word	0x0800cd31
 800cbe8:	0800cc55 	.word	0x0800cc55
 800cbec:	0800cd13 	.word	0x0800cd13
 800cbf0:	0800cba1 	.word	0x0800cba1
 800cbf4:	0800cba1 	.word	0x0800cba1
 800cbf8:	0800cd53 	.word	0x0800cd53
 800cbfc:	0800cba1 	.word	0x0800cba1
 800cc00:	0800cc55 	.word	0x0800cc55
 800cc04:	0800cba1 	.word	0x0800cba1
 800cc08:	0800cba1 	.word	0x0800cba1
 800cc0c:	0800cd1b 	.word	0x0800cd1b
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	1d1a      	adds	r2, r3, #4
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	602a      	str	r2, [r5, #0]
 800cc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc20:	2301      	movs	r3, #1
 800cc22:	e0a3      	b.n	800cd6c <_printf_i+0x1f4>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	6829      	ldr	r1, [r5, #0]
 800cc28:	0606      	lsls	r6, r0, #24
 800cc2a:	f101 0304 	add.w	r3, r1, #4
 800cc2e:	d50a      	bpl.n	800cc46 <_printf_i+0xce>
 800cc30:	680e      	ldr	r6, [r1, #0]
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	2e00      	cmp	r6, #0
 800cc36:	da03      	bge.n	800cc40 <_printf_i+0xc8>
 800cc38:	232d      	movs	r3, #45	; 0x2d
 800cc3a:	4276      	negs	r6, r6
 800cc3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc40:	485e      	ldr	r0, [pc, #376]	; (800cdbc <_printf_i+0x244>)
 800cc42:	230a      	movs	r3, #10
 800cc44:	e019      	b.n	800cc7a <_printf_i+0x102>
 800cc46:	680e      	ldr	r6, [r1, #0]
 800cc48:	602b      	str	r3, [r5, #0]
 800cc4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc4e:	bf18      	it	ne
 800cc50:	b236      	sxthne	r6, r6
 800cc52:	e7ef      	b.n	800cc34 <_printf_i+0xbc>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	6820      	ldr	r0, [r4, #0]
 800cc58:	1d19      	adds	r1, r3, #4
 800cc5a:	6029      	str	r1, [r5, #0]
 800cc5c:	0601      	lsls	r1, r0, #24
 800cc5e:	d501      	bpl.n	800cc64 <_printf_i+0xec>
 800cc60:	681e      	ldr	r6, [r3, #0]
 800cc62:	e002      	b.n	800cc6a <_printf_i+0xf2>
 800cc64:	0646      	lsls	r6, r0, #25
 800cc66:	d5fb      	bpl.n	800cc60 <_printf_i+0xe8>
 800cc68:	881e      	ldrh	r6, [r3, #0]
 800cc6a:	4854      	ldr	r0, [pc, #336]	; (800cdbc <_printf_i+0x244>)
 800cc6c:	2f6f      	cmp	r7, #111	; 0x6f
 800cc6e:	bf0c      	ite	eq
 800cc70:	2308      	moveq	r3, #8
 800cc72:	230a      	movne	r3, #10
 800cc74:	2100      	movs	r1, #0
 800cc76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc7a:	6865      	ldr	r5, [r4, #4]
 800cc7c:	60a5      	str	r5, [r4, #8]
 800cc7e:	2d00      	cmp	r5, #0
 800cc80:	bfa2      	ittt	ge
 800cc82:	6821      	ldrge	r1, [r4, #0]
 800cc84:	f021 0104 	bicge.w	r1, r1, #4
 800cc88:	6021      	strge	r1, [r4, #0]
 800cc8a:	b90e      	cbnz	r6, 800cc90 <_printf_i+0x118>
 800cc8c:	2d00      	cmp	r5, #0
 800cc8e:	d04d      	beq.n	800cd2c <_printf_i+0x1b4>
 800cc90:	4615      	mov	r5, r2
 800cc92:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc96:	fb03 6711 	mls	r7, r3, r1, r6
 800cc9a:	5dc7      	ldrb	r7, [r0, r7]
 800cc9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cca0:	4637      	mov	r7, r6
 800cca2:	42bb      	cmp	r3, r7
 800cca4:	460e      	mov	r6, r1
 800cca6:	d9f4      	bls.n	800cc92 <_printf_i+0x11a>
 800cca8:	2b08      	cmp	r3, #8
 800ccaa:	d10b      	bne.n	800ccc4 <_printf_i+0x14c>
 800ccac:	6823      	ldr	r3, [r4, #0]
 800ccae:	07de      	lsls	r6, r3, #31
 800ccb0:	d508      	bpl.n	800ccc4 <_printf_i+0x14c>
 800ccb2:	6923      	ldr	r3, [r4, #16]
 800ccb4:	6861      	ldr	r1, [r4, #4]
 800ccb6:	4299      	cmp	r1, r3
 800ccb8:	bfde      	ittt	le
 800ccba:	2330      	movle	r3, #48	; 0x30
 800ccbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ccc4:	1b52      	subs	r2, r2, r5
 800ccc6:	6122      	str	r2, [r4, #16]
 800ccc8:	f8cd a000 	str.w	sl, [sp]
 800cccc:	464b      	mov	r3, r9
 800ccce:	aa03      	add	r2, sp, #12
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	f7ff fee2 	bl	800ca9c <_printf_common>
 800ccd8:	3001      	adds	r0, #1
 800ccda:	d14c      	bne.n	800cd76 <_printf_i+0x1fe>
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	b004      	add	sp, #16
 800cce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce6:	4835      	ldr	r0, [pc, #212]	; (800cdbc <_printf_i+0x244>)
 800cce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ccec:	6829      	ldr	r1, [r5, #0]
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccf4:	6029      	str	r1, [r5, #0]
 800ccf6:	061d      	lsls	r5, r3, #24
 800ccf8:	d514      	bpl.n	800cd24 <_printf_i+0x1ac>
 800ccfa:	07df      	lsls	r7, r3, #31
 800ccfc:	bf44      	itt	mi
 800ccfe:	f043 0320 	orrmi.w	r3, r3, #32
 800cd02:	6023      	strmi	r3, [r4, #0]
 800cd04:	b91e      	cbnz	r6, 800cd0e <_printf_i+0x196>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	f023 0320 	bic.w	r3, r3, #32
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	2310      	movs	r3, #16
 800cd10:	e7b0      	b.n	800cc74 <_printf_i+0xfc>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	f043 0320 	orr.w	r3, r3, #32
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	2378      	movs	r3, #120	; 0x78
 800cd1c:	4828      	ldr	r0, [pc, #160]	; (800cdc0 <_printf_i+0x248>)
 800cd1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd22:	e7e3      	b.n	800ccec <_printf_i+0x174>
 800cd24:	0659      	lsls	r1, r3, #25
 800cd26:	bf48      	it	mi
 800cd28:	b2b6      	uxthmi	r6, r6
 800cd2a:	e7e6      	b.n	800ccfa <_printf_i+0x182>
 800cd2c:	4615      	mov	r5, r2
 800cd2e:	e7bb      	b.n	800cca8 <_printf_i+0x130>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	6826      	ldr	r6, [r4, #0]
 800cd34:	6961      	ldr	r1, [r4, #20]
 800cd36:	1d18      	adds	r0, r3, #4
 800cd38:	6028      	str	r0, [r5, #0]
 800cd3a:	0635      	lsls	r5, r6, #24
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	d501      	bpl.n	800cd44 <_printf_i+0x1cc>
 800cd40:	6019      	str	r1, [r3, #0]
 800cd42:	e002      	b.n	800cd4a <_printf_i+0x1d2>
 800cd44:	0670      	lsls	r0, r6, #25
 800cd46:	d5fb      	bpl.n	800cd40 <_printf_i+0x1c8>
 800cd48:	8019      	strh	r1, [r3, #0]
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	6123      	str	r3, [r4, #16]
 800cd4e:	4615      	mov	r5, r2
 800cd50:	e7ba      	b.n	800ccc8 <_printf_i+0x150>
 800cd52:	682b      	ldr	r3, [r5, #0]
 800cd54:	1d1a      	adds	r2, r3, #4
 800cd56:	602a      	str	r2, [r5, #0]
 800cd58:	681d      	ldr	r5, [r3, #0]
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f7f3 fa66 	bl	8000230 <memchr>
 800cd64:	b108      	cbz	r0, 800cd6a <_printf_i+0x1f2>
 800cd66:	1b40      	subs	r0, r0, r5
 800cd68:	6060      	str	r0, [r4, #4]
 800cd6a:	6863      	ldr	r3, [r4, #4]
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd74:	e7a8      	b.n	800ccc8 <_printf_i+0x150>
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	462a      	mov	r2, r5
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	4640      	mov	r0, r8
 800cd7e:	47d0      	blx	sl
 800cd80:	3001      	adds	r0, #1
 800cd82:	d0ab      	beq.n	800ccdc <_printf_i+0x164>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	079b      	lsls	r3, r3, #30
 800cd88:	d413      	bmi.n	800cdb2 <_printf_i+0x23a>
 800cd8a:	68e0      	ldr	r0, [r4, #12]
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	4298      	cmp	r0, r3
 800cd90:	bfb8      	it	lt
 800cd92:	4618      	movlt	r0, r3
 800cd94:	e7a4      	b.n	800cce0 <_printf_i+0x168>
 800cd96:	2301      	movs	r3, #1
 800cd98:	4632      	mov	r2, r6
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	47d0      	blx	sl
 800cda0:	3001      	adds	r0, #1
 800cda2:	d09b      	beq.n	800ccdc <_printf_i+0x164>
 800cda4:	3501      	adds	r5, #1
 800cda6:	68e3      	ldr	r3, [r4, #12]
 800cda8:	9903      	ldr	r1, [sp, #12]
 800cdaa:	1a5b      	subs	r3, r3, r1
 800cdac:	42ab      	cmp	r3, r5
 800cdae:	dcf2      	bgt.n	800cd96 <_printf_i+0x21e>
 800cdb0:	e7eb      	b.n	800cd8a <_printf_i+0x212>
 800cdb2:	2500      	movs	r5, #0
 800cdb4:	f104 0619 	add.w	r6, r4, #25
 800cdb8:	e7f5      	b.n	800cda6 <_printf_i+0x22e>
 800cdba:	bf00      	nop
 800cdbc:	080101ae 	.word	0x080101ae
 800cdc0:	080101bf 	.word	0x080101bf

0800cdc4 <siprintf>:
 800cdc4:	b40e      	push	{r1, r2, r3}
 800cdc6:	b500      	push	{lr}
 800cdc8:	b09c      	sub	sp, #112	; 0x70
 800cdca:	ab1d      	add	r3, sp, #116	; 0x74
 800cdcc:	9002      	str	r0, [sp, #8]
 800cdce:	9006      	str	r0, [sp, #24]
 800cdd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cdd4:	4809      	ldr	r0, [pc, #36]	; (800cdfc <siprintf+0x38>)
 800cdd6:	9107      	str	r1, [sp, #28]
 800cdd8:	9104      	str	r1, [sp, #16]
 800cdda:	4909      	ldr	r1, [pc, #36]	; (800ce00 <siprintf+0x3c>)
 800cddc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cde0:	9105      	str	r1, [sp, #20]
 800cde2:	6800      	ldr	r0, [r0, #0]
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	a902      	add	r1, sp, #8
 800cde8:	f001 fb78 	bl	800e4dc <_svfiprintf_r>
 800cdec:	9b02      	ldr	r3, [sp, #8]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	b01c      	add	sp, #112	; 0x70
 800cdf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdf8:	b003      	add	sp, #12
 800cdfa:	4770      	bx	lr
 800cdfc:	2000002c 	.word	0x2000002c
 800ce00:	ffff0208 	.word	0xffff0208

0800ce04 <quorem>:
 800ce04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce08:	6903      	ldr	r3, [r0, #16]
 800ce0a:	690c      	ldr	r4, [r1, #16]
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	4607      	mov	r7, r0
 800ce10:	f2c0 8081 	blt.w	800cf16 <quorem+0x112>
 800ce14:	3c01      	subs	r4, #1
 800ce16:	f101 0814 	add.w	r8, r1, #20
 800ce1a:	f100 0514 	add.w	r5, r0, #20
 800ce1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce22:	9301      	str	r3, [sp, #4]
 800ce24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ce34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce38:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce3c:	d331      	bcc.n	800cea2 <quorem+0x9e>
 800ce3e:	f04f 0e00 	mov.w	lr, #0
 800ce42:	4640      	mov	r0, r8
 800ce44:	46ac      	mov	ip, r5
 800ce46:	46f2      	mov	sl, lr
 800ce48:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce4c:	b293      	uxth	r3, r2
 800ce4e:	fb06 e303 	mla	r3, r6, r3, lr
 800ce52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	ebaa 0303 	sub.w	r3, sl, r3
 800ce5c:	f8dc a000 	ldr.w	sl, [ip]
 800ce60:	0c12      	lsrs	r2, r2, #16
 800ce62:	fa13 f38a 	uxtah	r3, r3, sl
 800ce66:	fb06 e202 	mla	r2, r6, r2, lr
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	9b00      	ldr	r3, [sp, #0]
 800ce6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce72:	b292      	uxth	r2, r2
 800ce74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ce78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce80:	4581      	cmp	r9, r0
 800ce82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce86:	f84c 3b04 	str.w	r3, [ip], #4
 800ce8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce8e:	d2db      	bcs.n	800ce48 <quorem+0x44>
 800ce90:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce94:	b92b      	cbnz	r3, 800cea2 <quorem+0x9e>
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	3b04      	subs	r3, #4
 800ce9a:	429d      	cmp	r5, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	d32e      	bcc.n	800cefe <quorem+0xfa>
 800cea0:	613c      	str	r4, [r7, #16]
 800cea2:	4638      	mov	r0, r7
 800cea4:	f001 f8c6 	bl	800e034 <__mcmp>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	db24      	blt.n	800cef6 <quorem+0xf2>
 800ceac:	3601      	adds	r6, #1
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f04f 0c00 	mov.w	ip, #0
 800ceb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ceb8:	f8d0 e000 	ldr.w	lr, [r0]
 800cebc:	b293      	uxth	r3, r2
 800cebe:	ebac 0303 	sub.w	r3, ip, r3
 800cec2:	0c12      	lsrs	r2, r2, #16
 800cec4:	fa13 f38e 	uxtah	r3, r3, lr
 800cec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ced6:	45c1      	cmp	r9, r8
 800ced8:	f840 3b04 	str.w	r3, [r0], #4
 800cedc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cee0:	d2e8      	bcs.n	800ceb4 <quorem+0xb0>
 800cee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ceea:	b922      	cbnz	r2, 800cef6 <quorem+0xf2>
 800ceec:	3b04      	subs	r3, #4
 800ceee:	429d      	cmp	r5, r3
 800cef0:	461a      	mov	r2, r3
 800cef2:	d30a      	bcc.n	800cf0a <quorem+0x106>
 800cef4:	613c      	str	r4, [r7, #16]
 800cef6:	4630      	mov	r0, r6
 800cef8:	b003      	add	sp, #12
 800cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	3b04      	subs	r3, #4
 800cf02:	2a00      	cmp	r2, #0
 800cf04:	d1cc      	bne.n	800cea0 <quorem+0x9c>
 800cf06:	3c01      	subs	r4, #1
 800cf08:	e7c7      	b.n	800ce9a <quorem+0x96>
 800cf0a:	6812      	ldr	r2, [r2, #0]
 800cf0c:	3b04      	subs	r3, #4
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	d1f0      	bne.n	800cef4 <quorem+0xf0>
 800cf12:	3c01      	subs	r4, #1
 800cf14:	e7eb      	b.n	800ceee <quorem+0xea>
 800cf16:	2000      	movs	r0, #0
 800cf18:	e7ee      	b.n	800cef8 <quorem+0xf4>
 800cf1a:	0000      	movs	r0, r0
 800cf1c:	0000      	movs	r0, r0
	...

0800cf20 <_dtoa_r>:
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	ed2d 8b04 	vpush	{d8-d9}
 800cf28:	ec57 6b10 	vmov	r6, r7, d0
 800cf2c:	b093      	sub	sp, #76	; 0x4c
 800cf2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cf34:	9106      	str	r1, [sp, #24]
 800cf36:	ee10 aa10 	vmov	sl, s0
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf40:	46bb      	mov	fp, r7
 800cf42:	b975      	cbnz	r5, 800cf62 <_dtoa_r+0x42>
 800cf44:	2010      	movs	r0, #16
 800cf46:	f000 fddd 	bl	800db04 <malloc>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6260      	str	r0, [r4, #36]	; 0x24
 800cf4e:	b920      	cbnz	r0, 800cf5a <_dtoa_r+0x3a>
 800cf50:	4ba7      	ldr	r3, [pc, #668]	; (800d1f0 <_dtoa_r+0x2d0>)
 800cf52:	21ea      	movs	r1, #234	; 0xea
 800cf54:	48a7      	ldr	r0, [pc, #668]	; (800d1f4 <_dtoa_r+0x2d4>)
 800cf56:	f001 fbd1 	bl	800e6fc <__assert_func>
 800cf5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf5e:	6005      	str	r5, [r0, #0]
 800cf60:	60c5      	str	r5, [r0, #12]
 800cf62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf64:	6819      	ldr	r1, [r3, #0]
 800cf66:	b151      	cbz	r1, 800cf7e <_dtoa_r+0x5e>
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	604a      	str	r2, [r1, #4]
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4093      	lsls	r3, r2
 800cf70:	608b      	str	r3, [r1, #8]
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 fe1c 	bl	800dbb0 <_Bfree>
 800cf78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	1e3b      	subs	r3, r7, #0
 800cf80:	bfaa      	itet	ge
 800cf82:	2300      	movge	r3, #0
 800cf84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cf88:	f8c8 3000 	strge.w	r3, [r8]
 800cf8c:	4b9a      	ldr	r3, [pc, #616]	; (800d1f8 <_dtoa_r+0x2d8>)
 800cf8e:	bfbc      	itt	lt
 800cf90:	2201      	movlt	r2, #1
 800cf92:	f8c8 2000 	strlt.w	r2, [r8]
 800cf96:	ea33 030b 	bics.w	r3, r3, fp
 800cf9a:	d11b      	bne.n	800cfd4 <_dtoa_r+0xb4>
 800cf9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfa8:	4333      	orrs	r3, r6
 800cfaa:	f000 8592 	beq.w	800dad2 <_dtoa_r+0xbb2>
 800cfae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfb0:	b963      	cbnz	r3, 800cfcc <_dtoa_r+0xac>
 800cfb2:	4b92      	ldr	r3, [pc, #584]	; (800d1fc <_dtoa_r+0x2dc>)
 800cfb4:	e022      	b.n	800cffc <_dtoa_r+0xdc>
 800cfb6:	4b92      	ldr	r3, [pc, #584]	; (800d200 <_dtoa_r+0x2e0>)
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	3308      	adds	r3, #8
 800cfbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	9801      	ldr	r0, [sp, #4]
 800cfc2:	b013      	add	sp, #76	; 0x4c
 800cfc4:	ecbd 8b04 	vpop	{d8-d9}
 800cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	4b8b      	ldr	r3, [pc, #556]	; (800d1fc <_dtoa_r+0x2dc>)
 800cfce:	9301      	str	r3, [sp, #4]
 800cfd0:	3303      	adds	r3, #3
 800cfd2:	e7f3      	b.n	800cfbc <_dtoa_r+0x9c>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4650      	mov	r0, sl
 800cfda:	4659      	mov	r1, fp
 800cfdc:	f7f3 fd9c 	bl	8000b18 <__aeabi_dcmpeq>
 800cfe0:	ec4b ab19 	vmov	d9, sl, fp
 800cfe4:	4680      	mov	r8, r0
 800cfe6:	b158      	cbz	r0, 800d000 <_dtoa_r+0xe0>
 800cfe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfea:	2301      	movs	r3, #1
 800cfec:	6013      	str	r3, [r2, #0]
 800cfee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 856b 	beq.w	800dacc <_dtoa_r+0xbac>
 800cff6:	4883      	ldr	r0, [pc, #524]	; (800d204 <_dtoa_r+0x2e4>)
 800cff8:	6018      	str	r0, [r3, #0]
 800cffa:	1e43      	subs	r3, r0, #1
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	e7df      	b.n	800cfc0 <_dtoa_r+0xa0>
 800d000:	ec4b ab10 	vmov	d0, sl, fp
 800d004:	aa10      	add	r2, sp, #64	; 0x40
 800d006:	a911      	add	r1, sp, #68	; 0x44
 800d008:	4620      	mov	r0, r4
 800d00a:	f001 f8b9 	bl	800e180 <__d2b>
 800d00e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d012:	ee08 0a10 	vmov	s16, r0
 800d016:	2d00      	cmp	r5, #0
 800d018:	f000 8084 	beq.w	800d124 <_dtoa_r+0x204>
 800d01c:	ee19 3a90 	vmov	r3, s19
 800d020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d024:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d028:	4656      	mov	r6, sl
 800d02a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d02e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d032:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d036:	4b74      	ldr	r3, [pc, #464]	; (800d208 <_dtoa_r+0x2e8>)
 800d038:	2200      	movs	r2, #0
 800d03a:	4630      	mov	r0, r6
 800d03c:	4639      	mov	r1, r7
 800d03e:	f7f3 f94b 	bl	80002d8 <__aeabi_dsub>
 800d042:	a365      	add	r3, pc, #404	; (adr r3, 800d1d8 <_dtoa_r+0x2b8>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	f7f3 fafe 	bl	8000648 <__aeabi_dmul>
 800d04c:	a364      	add	r3, pc, #400	; (adr r3, 800d1e0 <_dtoa_r+0x2c0>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f943 	bl	80002dc <__adddf3>
 800d056:	4606      	mov	r6, r0
 800d058:	4628      	mov	r0, r5
 800d05a:	460f      	mov	r7, r1
 800d05c:	f7f3 fa8a 	bl	8000574 <__aeabi_i2d>
 800d060:	a361      	add	r3, pc, #388	; (adr r3, 800d1e8 <_dtoa_r+0x2c8>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	f7f3 faef 	bl	8000648 <__aeabi_dmul>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4630      	mov	r0, r6
 800d070:	4639      	mov	r1, r7
 800d072:	f7f3 f933 	bl	80002dc <__adddf3>
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	f7f3 fd95 	bl	8000ba8 <__aeabi_d2iz>
 800d07e:	2200      	movs	r2, #0
 800d080:	9000      	str	r0, [sp, #0]
 800d082:	2300      	movs	r3, #0
 800d084:	4630      	mov	r0, r6
 800d086:	4639      	mov	r1, r7
 800d088:	f7f3 fd50 	bl	8000b2c <__aeabi_dcmplt>
 800d08c:	b150      	cbz	r0, 800d0a4 <_dtoa_r+0x184>
 800d08e:	9800      	ldr	r0, [sp, #0]
 800d090:	f7f3 fa70 	bl	8000574 <__aeabi_i2d>
 800d094:	4632      	mov	r2, r6
 800d096:	463b      	mov	r3, r7
 800d098:	f7f3 fd3e 	bl	8000b18 <__aeabi_dcmpeq>
 800d09c:	b910      	cbnz	r0, 800d0a4 <_dtoa_r+0x184>
 800d09e:	9b00      	ldr	r3, [sp, #0]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	9b00      	ldr	r3, [sp, #0]
 800d0a6:	2b16      	cmp	r3, #22
 800d0a8:	d85a      	bhi.n	800d160 <_dtoa_r+0x240>
 800d0aa:	9a00      	ldr	r2, [sp, #0]
 800d0ac:	4b57      	ldr	r3, [pc, #348]	; (800d20c <_dtoa_r+0x2ec>)
 800d0ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	ec51 0b19 	vmov	r0, r1, d9
 800d0ba:	f7f3 fd37 	bl	8000b2c <__aeabi_dcmplt>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d050      	beq.n	800d164 <_dtoa_r+0x244>
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0ce:	1b5d      	subs	r5, r3, r5
 800d0d0:	1e6b      	subs	r3, r5, #1
 800d0d2:	9305      	str	r3, [sp, #20]
 800d0d4:	bf45      	ittet	mi
 800d0d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d0da:	9304      	strmi	r3, [sp, #16]
 800d0dc:	2300      	movpl	r3, #0
 800d0de:	2300      	movmi	r3, #0
 800d0e0:	bf4c      	ite	mi
 800d0e2:	9305      	strmi	r3, [sp, #20]
 800d0e4:	9304      	strpl	r3, [sp, #16]
 800d0e6:	9b00      	ldr	r3, [sp, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	db3d      	blt.n	800d168 <_dtoa_r+0x248>
 800d0ec:	9b05      	ldr	r3, [sp, #20]
 800d0ee:	9a00      	ldr	r2, [sp, #0]
 800d0f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d0f2:	4413      	add	r3, r2
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9307      	str	r3, [sp, #28]
 800d0fa:	9b06      	ldr	r3, [sp, #24]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	f200 8089 	bhi.w	800d214 <_dtoa_r+0x2f4>
 800d102:	2b05      	cmp	r3, #5
 800d104:	bfc4      	itt	gt
 800d106:	3b04      	subgt	r3, #4
 800d108:	9306      	strgt	r3, [sp, #24]
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	f1a3 0302 	sub.w	r3, r3, #2
 800d110:	bfcc      	ite	gt
 800d112:	2500      	movgt	r5, #0
 800d114:	2501      	movle	r5, #1
 800d116:	2b03      	cmp	r3, #3
 800d118:	f200 8087 	bhi.w	800d22a <_dtoa_r+0x30a>
 800d11c:	e8df f003 	tbb	[pc, r3]
 800d120:	59383a2d 	.word	0x59383a2d
 800d124:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d128:	441d      	add	r5, r3
 800d12a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d12e:	2b20      	cmp	r3, #32
 800d130:	bfc1      	itttt	gt
 800d132:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d136:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d13a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d13e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d142:	bfda      	itte	le
 800d144:	f1c3 0320 	rsble	r3, r3, #32
 800d148:	fa06 f003 	lslle.w	r0, r6, r3
 800d14c:	4318      	orrgt	r0, r3
 800d14e:	f7f3 fa01 	bl	8000554 <__aeabi_ui2d>
 800d152:	2301      	movs	r3, #1
 800d154:	4606      	mov	r6, r0
 800d156:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d15a:	3d01      	subs	r5, #1
 800d15c:	930e      	str	r3, [sp, #56]	; 0x38
 800d15e:	e76a      	b.n	800d036 <_dtoa_r+0x116>
 800d160:	2301      	movs	r3, #1
 800d162:	e7b2      	b.n	800d0ca <_dtoa_r+0x1aa>
 800d164:	900b      	str	r0, [sp, #44]	; 0x2c
 800d166:	e7b1      	b.n	800d0cc <_dtoa_r+0x1ac>
 800d168:	9b04      	ldr	r3, [sp, #16]
 800d16a:	9a00      	ldr	r2, [sp, #0]
 800d16c:	1a9b      	subs	r3, r3, r2
 800d16e:	9304      	str	r3, [sp, #16]
 800d170:	4253      	negs	r3, r2
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	2300      	movs	r3, #0
 800d176:	930a      	str	r3, [sp, #40]	; 0x28
 800d178:	e7bf      	b.n	800d0fa <_dtoa_r+0x1da>
 800d17a:	2300      	movs	r3, #0
 800d17c:	9308      	str	r3, [sp, #32]
 800d17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d180:	2b00      	cmp	r3, #0
 800d182:	dc55      	bgt.n	800d230 <_dtoa_r+0x310>
 800d184:	2301      	movs	r3, #1
 800d186:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d18a:	461a      	mov	r2, r3
 800d18c:	9209      	str	r2, [sp, #36]	; 0x24
 800d18e:	e00c      	b.n	800d1aa <_dtoa_r+0x28a>
 800d190:	2301      	movs	r3, #1
 800d192:	e7f3      	b.n	800d17c <_dtoa_r+0x25c>
 800d194:	2300      	movs	r3, #0
 800d196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d198:	9308      	str	r3, [sp, #32]
 800d19a:	9b00      	ldr	r3, [sp, #0]
 800d19c:	4413      	add	r3, r2
 800d19e:	9302      	str	r3, [sp, #8]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	9303      	str	r3, [sp, #12]
 800d1a6:	bfb8      	it	lt
 800d1a8:	2301      	movlt	r3, #1
 800d1aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	6042      	str	r2, [r0, #4]
 800d1b0:	2204      	movs	r2, #4
 800d1b2:	f102 0614 	add.w	r6, r2, #20
 800d1b6:	429e      	cmp	r6, r3
 800d1b8:	6841      	ldr	r1, [r0, #4]
 800d1ba:	d93d      	bls.n	800d238 <_dtoa_r+0x318>
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f000 fcb7 	bl	800db30 <_Balloc>
 800d1c2:	9001      	str	r0, [sp, #4]
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d13b      	bne.n	800d240 <_dtoa_r+0x320>
 800d1c8:	4b11      	ldr	r3, [pc, #68]	; (800d210 <_dtoa_r+0x2f0>)
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d1d0:	e6c0      	b.n	800cf54 <_dtoa_r+0x34>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e7df      	b.n	800d196 <_dtoa_r+0x276>
 800d1d6:	bf00      	nop
 800d1d8:	636f4361 	.word	0x636f4361
 800d1dc:	3fd287a7 	.word	0x3fd287a7
 800d1e0:	8b60c8b3 	.word	0x8b60c8b3
 800d1e4:	3fc68a28 	.word	0x3fc68a28
 800d1e8:	509f79fb 	.word	0x509f79fb
 800d1ec:	3fd34413 	.word	0x3fd34413
 800d1f0:	080101dd 	.word	0x080101dd
 800d1f4:	080101f4 	.word	0x080101f4
 800d1f8:	7ff00000 	.word	0x7ff00000
 800d1fc:	080101d9 	.word	0x080101d9
 800d200:	080101d0 	.word	0x080101d0
 800d204:	080101ad 	.word	0x080101ad
 800d208:	3ff80000 	.word	0x3ff80000
 800d20c:	080102e8 	.word	0x080102e8
 800d210:	0801024f 	.word	0x0801024f
 800d214:	2501      	movs	r5, #1
 800d216:	2300      	movs	r3, #0
 800d218:	9306      	str	r3, [sp, #24]
 800d21a:	9508      	str	r5, [sp, #32]
 800d21c:	f04f 33ff 	mov.w	r3, #4294967295
 800d220:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d224:	2200      	movs	r2, #0
 800d226:	2312      	movs	r3, #18
 800d228:	e7b0      	b.n	800d18c <_dtoa_r+0x26c>
 800d22a:	2301      	movs	r3, #1
 800d22c:	9308      	str	r3, [sp, #32]
 800d22e:	e7f5      	b.n	800d21c <_dtoa_r+0x2fc>
 800d230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d232:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d236:	e7b8      	b.n	800d1aa <_dtoa_r+0x28a>
 800d238:	3101      	adds	r1, #1
 800d23a:	6041      	str	r1, [r0, #4]
 800d23c:	0052      	lsls	r2, r2, #1
 800d23e:	e7b8      	b.n	800d1b2 <_dtoa_r+0x292>
 800d240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d242:	9a01      	ldr	r2, [sp, #4]
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	2b0e      	cmp	r3, #14
 800d24a:	f200 809d 	bhi.w	800d388 <_dtoa_r+0x468>
 800d24e:	2d00      	cmp	r5, #0
 800d250:	f000 809a 	beq.w	800d388 <_dtoa_r+0x468>
 800d254:	9b00      	ldr	r3, [sp, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	dd32      	ble.n	800d2c0 <_dtoa_r+0x3a0>
 800d25a:	4ab7      	ldr	r2, [pc, #732]	; (800d538 <_dtoa_r+0x618>)
 800d25c:	f003 030f 	and.w	r3, r3, #15
 800d260:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d264:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d268:	9b00      	ldr	r3, [sp, #0]
 800d26a:	05d8      	lsls	r0, r3, #23
 800d26c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d270:	d516      	bpl.n	800d2a0 <_dtoa_r+0x380>
 800d272:	4bb2      	ldr	r3, [pc, #712]	; (800d53c <_dtoa_r+0x61c>)
 800d274:	ec51 0b19 	vmov	r0, r1, d9
 800d278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d27c:	f7f3 fb0e 	bl	800089c <__aeabi_ddiv>
 800d280:	f007 070f 	and.w	r7, r7, #15
 800d284:	4682      	mov	sl, r0
 800d286:	468b      	mov	fp, r1
 800d288:	2503      	movs	r5, #3
 800d28a:	4eac      	ldr	r6, [pc, #688]	; (800d53c <_dtoa_r+0x61c>)
 800d28c:	b957      	cbnz	r7, 800d2a4 <_dtoa_r+0x384>
 800d28e:	4642      	mov	r2, r8
 800d290:	464b      	mov	r3, r9
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	f7f3 fb01 	bl	800089c <__aeabi_ddiv>
 800d29a:	4682      	mov	sl, r0
 800d29c:	468b      	mov	fp, r1
 800d29e:	e028      	b.n	800d2f2 <_dtoa_r+0x3d2>
 800d2a0:	2502      	movs	r5, #2
 800d2a2:	e7f2      	b.n	800d28a <_dtoa_r+0x36a>
 800d2a4:	07f9      	lsls	r1, r7, #31
 800d2a6:	d508      	bpl.n	800d2ba <_dtoa_r+0x39a>
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2b0:	f7f3 f9ca 	bl	8000648 <__aeabi_dmul>
 800d2b4:	3501      	adds	r5, #1
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4689      	mov	r9, r1
 800d2ba:	107f      	asrs	r7, r7, #1
 800d2bc:	3608      	adds	r6, #8
 800d2be:	e7e5      	b.n	800d28c <_dtoa_r+0x36c>
 800d2c0:	f000 809b 	beq.w	800d3fa <_dtoa_r+0x4da>
 800d2c4:	9b00      	ldr	r3, [sp, #0]
 800d2c6:	4f9d      	ldr	r7, [pc, #628]	; (800d53c <_dtoa_r+0x61c>)
 800d2c8:	425e      	negs	r6, r3
 800d2ca:	4b9b      	ldr	r3, [pc, #620]	; (800d538 <_dtoa_r+0x618>)
 800d2cc:	f006 020f 	and.w	r2, r6, #15
 800d2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	ec51 0b19 	vmov	r0, r1, d9
 800d2dc:	f7f3 f9b4 	bl	8000648 <__aeabi_dmul>
 800d2e0:	1136      	asrs	r6, r6, #4
 800d2e2:	4682      	mov	sl, r0
 800d2e4:	468b      	mov	fp, r1
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2502      	movs	r5, #2
 800d2ea:	2e00      	cmp	r6, #0
 800d2ec:	d17a      	bne.n	800d3e4 <_dtoa_r+0x4c4>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1d3      	bne.n	800d29a <_dtoa_r+0x37a>
 800d2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 8082 	beq.w	800d3fe <_dtoa_r+0x4de>
 800d2fa:	4b91      	ldr	r3, [pc, #580]	; (800d540 <_dtoa_r+0x620>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4650      	mov	r0, sl
 800d300:	4659      	mov	r1, fp
 800d302:	f7f3 fc13 	bl	8000b2c <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	d079      	beq.n	800d3fe <_dtoa_r+0x4de>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d076      	beq.n	800d3fe <_dtoa_r+0x4de>
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	dd36      	ble.n	800d384 <_dtoa_r+0x464>
 800d316:	9b00      	ldr	r3, [sp, #0]
 800d318:	4650      	mov	r0, sl
 800d31a:	4659      	mov	r1, fp
 800d31c:	1e5f      	subs	r7, r3, #1
 800d31e:	2200      	movs	r2, #0
 800d320:	4b88      	ldr	r3, [pc, #544]	; (800d544 <_dtoa_r+0x624>)
 800d322:	f7f3 f991 	bl	8000648 <__aeabi_dmul>
 800d326:	9e02      	ldr	r6, [sp, #8]
 800d328:	4682      	mov	sl, r0
 800d32a:	468b      	mov	fp, r1
 800d32c:	3501      	adds	r5, #1
 800d32e:	4628      	mov	r0, r5
 800d330:	f7f3 f920 	bl	8000574 <__aeabi_i2d>
 800d334:	4652      	mov	r2, sl
 800d336:	465b      	mov	r3, fp
 800d338:	f7f3 f986 	bl	8000648 <__aeabi_dmul>
 800d33c:	4b82      	ldr	r3, [pc, #520]	; (800d548 <_dtoa_r+0x628>)
 800d33e:	2200      	movs	r2, #0
 800d340:	f7f2 ffcc 	bl	80002dc <__adddf3>
 800d344:	46d0      	mov	r8, sl
 800d346:	46d9      	mov	r9, fp
 800d348:	4682      	mov	sl, r0
 800d34a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d158      	bne.n	800d404 <_dtoa_r+0x4e4>
 800d352:	4b7e      	ldr	r3, [pc, #504]	; (800d54c <_dtoa_r+0x62c>)
 800d354:	2200      	movs	r2, #0
 800d356:	4640      	mov	r0, r8
 800d358:	4649      	mov	r1, r9
 800d35a:	f7f2 ffbd 	bl	80002d8 <__aeabi_dsub>
 800d35e:	4652      	mov	r2, sl
 800d360:	465b      	mov	r3, fp
 800d362:	4680      	mov	r8, r0
 800d364:	4689      	mov	r9, r1
 800d366:	f7f3 fbff 	bl	8000b68 <__aeabi_dcmpgt>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	f040 8295 	bne.w	800d89a <_dtoa_r+0x97a>
 800d370:	4652      	mov	r2, sl
 800d372:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	f7f3 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800d37e:	2800      	cmp	r0, #0
 800d380:	f040 8289 	bne.w	800d896 <_dtoa_r+0x976>
 800d384:	ec5b ab19 	vmov	sl, fp, d9
 800d388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f2c0 8148 	blt.w	800d620 <_dtoa_r+0x700>
 800d390:	9a00      	ldr	r2, [sp, #0]
 800d392:	2a0e      	cmp	r2, #14
 800d394:	f300 8144 	bgt.w	800d620 <_dtoa_r+0x700>
 800d398:	4b67      	ldr	r3, [pc, #412]	; (800d538 <_dtoa_r+0x618>)
 800d39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d39e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f280 80d5 	bge.w	800d554 <_dtoa_r+0x634>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f300 80d1 	bgt.w	800d554 <_dtoa_r+0x634>
 800d3b2:	f040 826f 	bne.w	800d894 <_dtoa_r+0x974>
 800d3b6:	4b65      	ldr	r3, [pc, #404]	; (800d54c <_dtoa_r+0x62c>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	f7f3 f943 	bl	8000648 <__aeabi_dmul>
 800d3c2:	4652      	mov	r2, sl
 800d3c4:	465b      	mov	r3, fp
 800d3c6:	f7f3 fbc5 	bl	8000b54 <__aeabi_dcmpge>
 800d3ca:	9e03      	ldr	r6, [sp, #12]
 800d3cc:	4637      	mov	r7, r6
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	f040 8245 	bne.w	800d85e <_dtoa_r+0x93e>
 800d3d4:	9d01      	ldr	r5, [sp, #4]
 800d3d6:	2331      	movs	r3, #49	; 0x31
 800d3d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d3dc:	9b00      	ldr	r3, [sp, #0]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	e240      	b.n	800d866 <_dtoa_r+0x946>
 800d3e4:	07f2      	lsls	r2, r6, #31
 800d3e6:	d505      	bpl.n	800d3f4 <_dtoa_r+0x4d4>
 800d3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ec:	f7f3 f92c 	bl	8000648 <__aeabi_dmul>
 800d3f0:	3501      	adds	r5, #1
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	1076      	asrs	r6, r6, #1
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	e777      	b.n	800d2ea <_dtoa_r+0x3ca>
 800d3fa:	2502      	movs	r5, #2
 800d3fc:	e779      	b.n	800d2f2 <_dtoa_r+0x3d2>
 800d3fe:	9f00      	ldr	r7, [sp, #0]
 800d400:	9e03      	ldr	r6, [sp, #12]
 800d402:	e794      	b.n	800d32e <_dtoa_r+0x40e>
 800d404:	9901      	ldr	r1, [sp, #4]
 800d406:	4b4c      	ldr	r3, [pc, #304]	; (800d538 <_dtoa_r+0x618>)
 800d408:	4431      	add	r1, r6
 800d40a:	910d      	str	r1, [sp, #52]	; 0x34
 800d40c:	9908      	ldr	r1, [sp, #32]
 800d40e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d416:	2900      	cmp	r1, #0
 800d418:	d043      	beq.n	800d4a2 <_dtoa_r+0x582>
 800d41a:	494d      	ldr	r1, [pc, #308]	; (800d550 <_dtoa_r+0x630>)
 800d41c:	2000      	movs	r0, #0
 800d41e:	f7f3 fa3d 	bl	800089c <__aeabi_ddiv>
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	f7f2 ff57 	bl	80002d8 <__aeabi_dsub>
 800d42a:	9d01      	ldr	r5, [sp, #4]
 800d42c:	4682      	mov	sl, r0
 800d42e:	468b      	mov	fp, r1
 800d430:	4649      	mov	r1, r9
 800d432:	4640      	mov	r0, r8
 800d434:	f7f3 fbb8 	bl	8000ba8 <__aeabi_d2iz>
 800d438:	4606      	mov	r6, r0
 800d43a:	f7f3 f89b 	bl	8000574 <__aeabi_i2d>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f2 ff47 	bl	80002d8 <__aeabi_dsub>
 800d44a:	3630      	adds	r6, #48	; 0x30
 800d44c:	f805 6b01 	strb.w	r6, [r5], #1
 800d450:	4652      	mov	r2, sl
 800d452:	465b      	mov	r3, fp
 800d454:	4680      	mov	r8, r0
 800d456:	4689      	mov	r9, r1
 800d458:	f7f3 fb68 	bl	8000b2c <__aeabi_dcmplt>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d163      	bne.n	800d528 <_dtoa_r+0x608>
 800d460:	4642      	mov	r2, r8
 800d462:	464b      	mov	r3, r9
 800d464:	4936      	ldr	r1, [pc, #216]	; (800d540 <_dtoa_r+0x620>)
 800d466:	2000      	movs	r0, #0
 800d468:	f7f2 ff36 	bl	80002d8 <__aeabi_dsub>
 800d46c:	4652      	mov	r2, sl
 800d46e:	465b      	mov	r3, fp
 800d470:	f7f3 fb5c 	bl	8000b2c <__aeabi_dcmplt>
 800d474:	2800      	cmp	r0, #0
 800d476:	f040 80b5 	bne.w	800d5e4 <_dtoa_r+0x6c4>
 800d47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d47c:	429d      	cmp	r5, r3
 800d47e:	d081      	beq.n	800d384 <_dtoa_r+0x464>
 800d480:	4b30      	ldr	r3, [pc, #192]	; (800d544 <_dtoa_r+0x624>)
 800d482:	2200      	movs	r2, #0
 800d484:	4650      	mov	r0, sl
 800d486:	4659      	mov	r1, fp
 800d488:	f7f3 f8de 	bl	8000648 <__aeabi_dmul>
 800d48c:	4b2d      	ldr	r3, [pc, #180]	; (800d544 <_dtoa_r+0x624>)
 800d48e:	4682      	mov	sl, r0
 800d490:	468b      	mov	fp, r1
 800d492:	4640      	mov	r0, r8
 800d494:	4649      	mov	r1, r9
 800d496:	2200      	movs	r2, #0
 800d498:	f7f3 f8d6 	bl	8000648 <__aeabi_dmul>
 800d49c:	4680      	mov	r8, r0
 800d49e:	4689      	mov	r9, r1
 800d4a0:	e7c6      	b.n	800d430 <_dtoa_r+0x510>
 800d4a2:	4650      	mov	r0, sl
 800d4a4:	4659      	mov	r1, fp
 800d4a6:	f7f3 f8cf 	bl	8000648 <__aeabi_dmul>
 800d4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ac:	9d01      	ldr	r5, [sp, #4]
 800d4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	468b      	mov	fp, r1
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4640      	mov	r0, r8
 800d4b8:	f7f3 fb76 	bl	8000ba8 <__aeabi_d2iz>
 800d4bc:	4606      	mov	r6, r0
 800d4be:	f7f3 f859 	bl	8000574 <__aeabi_i2d>
 800d4c2:	3630      	adds	r6, #48	; 0x30
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	f7f2 ff04 	bl	80002d8 <__aeabi_dsub>
 800d4d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d4d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4d6:	429d      	cmp	r5, r3
 800d4d8:	4680      	mov	r8, r0
 800d4da:	4689      	mov	r9, r1
 800d4dc:	f04f 0200 	mov.w	r2, #0
 800d4e0:	d124      	bne.n	800d52c <_dtoa_r+0x60c>
 800d4e2:	4b1b      	ldr	r3, [pc, #108]	; (800d550 <_dtoa_r+0x630>)
 800d4e4:	4650      	mov	r0, sl
 800d4e6:	4659      	mov	r1, fp
 800d4e8:	f7f2 fef8 	bl	80002dc <__adddf3>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f7f3 fb38 	bl	8000b68 <__aeabi_dcmpgt>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d173      	bne.n	800d5e4 <_dtoa_r+0x6c4>
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	465b      	mov	r3, fp
 800d500:	4913      	ldr	r1, [pc, #76]	; (800d550 <_dtoa_r+0x630>)
 800d502:	2000      	movs	r0, #0
 800d504:	f7f2 fee8 	bl	80002d8 <__aeabi_dsub>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 fb0c 	bl	8000b2c <__aeabi_dcmplt>
 800d514:	2800      	cmp	r0, #0
 800d516:	f43f af35 	beq.w	800d384 <_dtoa_r+0x464>
 800d51a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d51c:	1e6b      	subs	r3, r5, #1
 800d51e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d520:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d524:	2b30      	cmp	r3, #48	; 0x30
 800d526:	d0f8      	beq.n	800d51a <_dtoa_r+0x5fa>
 800d528:	9700      	str	r7, [sp, #0]
 800d52a:	e049      	b.n	800d5c0 <_dtoa_r+0x6a0>
 800d52c:	4b05      	ldr	r3, [pc, #20]	; (800d544 <_dtoa_r+0x624>)
 800d52e:	f7f3 f88b 	bl	8000648 <__aeabi_dmul>
 800d532:	4680      	mov	r8, r0
 800d534:	4689      	mov	r9, r1
 800d536:	e7bd      	b.n	800d4b4 <_dtoa_r+0x594>
 800d538:	080102e8 	.word	0x080102e8
 800d53c:	080102c0 	.word	0x080102c0
 800d540:	3ff00000 	.word	0x3ff00000
 800d544:	40240000 	.word	0x40240000
 800d548:	401c0000 	.word	0x401c0000
 800d54c:	40140000 	.word	0x40140000
 800d550:	3fe00000 	.word	0x3fe00000
 800d554:	9d01      	ldr	r5, [sp, #4]
 800d556:	4656      	mov	r6, sl
 800d558:	465f      	mov	r7, fp
 800d55a:	4642      	mov	r2, r8
 800d55c:	464b      	mov	r3, r9
 800d55e:	4630      	mov	r0, r6
 800d560:	4639      	mov	r1, r7
 800d562:	f7f3 f99b 	bl	800089c <__aeabi_ddiv>
 800d566:	f7f3 fb1f 	bl	8000ba8 <__aeabi_d2iz>
 800d56a:	4682      	mov	sl, r0
 800d56c:	f7f3 f802 	bl	8000574 <__aeabi_i2d>
 800d570:	4642      	mov	r2, r8
 800d572:	464b      	mov	r3, r9
 800d574:	f7f3 f868 	bl	8000648 <__aeabi_dmul>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4630      	mov	r0, r6
 800d57e:	4639      	mov	r1, r7
 800d580:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d584:	f7f2 fea8 	bl	80002d8 <__aeabi_dsub>
 800d588:	f805 6b01 	strb.w	r6, [r5], #1
 800d58c:	9e01      	ldr	r6, [sp, #4]
 800d58e:	9f03      	ldr	r7, [sp, #12]
 800d590:	1bae      	subs	r6, r5, r6
 800d592:	42b7      	cmp	r7, r6
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	d135      	bne.n	800d606 <_dtoa_r+0x6e6>
 800d59a:	f7f2 fe9f 	bl	80002dc <__adddf3>
 800d59e:	4642      	mov	r2, r8
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	460f      	mov	r7, r1
 800d5a6:	f7f3 fadf 	bl	8000b68 <__aeabi_dcmpgt>
 800d5aa:	b9d0      	cbnz	r0, 800d5e2 <_dtoa_r+0x6c2>
 800d5ac:	4642      	mov	r2, r8
 800d5ae:	464b      	mov	r3, r9
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f7f3 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 800d5b8:	b110      	cbz	r0, 800d5c0 <_dtoa_r+0x6a0>
 800d5ba:	f01a 0f01 	tst.w	sl, #1
 800d5be:	d110      	bne.n	800d5e2 <_dtoa_r+0x6c2>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	ee18 1a10 	vmov	r1, s16
 800d5c6:	f000 faf3 	bl	800dbb0 <_Bfree>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	9800      	ldr	r0, [sp, #0]
 800d5ce:	702b      	strb	r3, [r5, #0]
 800d5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	6018      	str	r0, [r3, #0]
 800d5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f43f acf1 	beq.w	800cfc0 <_dtoa_r+0xa0>
 800d5de:	601d      	str	r5, [r3, #0]
 800d5e0:	e4ee      	b.n	800cfc0 <_dtoa_r+0xa0>
 800d5e2:	9f00      	ldr	r7, [sp, #0]
 800d5e4:	462b      	mov	r3, r5
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ec:	2a39      	cmp	r2, #57	; 0x39
 800d5ee:	d106      	bne.n	800d5fe <_dtoa_r+0x6de>
 800d5f0:	9a01      	ldr	r2, [sp, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d1f7      	bne.n	800d5e6 <_dtoa_r+0x6c6>
 800d5f6:	9901      	ldr	r1, [sp, #4]
 800d5f8:	2230      	movs	r2, #48	; 0x30
 800d5fa:	3701      	adds	r7, #1
 800d5fc:	700a      	strb	r2, [r1, #0]
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	3201      	adds	r2, #1
 800d602:	701a      	strb	r2, [r3, #0]
 800d604:	e790      	b.n	800d528 <_dtoa_r+0x608>
 800d606:	4ba6      	ldr	r3, [pc, #664]	; (800d8a0 <_dtoa_r+0x980>)
 800d608:	2200      	movs	r2, #0
 800d60a:	f7f3 f81d 	bl	8000648 <__aeabi_dmul>
 800d60e:	2200      	movs	r2, #0
 800d610:	2300      	movs	r3, #0
 800d612:	4606      	mov	r6, r0
 800d614:	460f      	mov	r7, r1
 800d616:	f7f3 fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d09d      	beq.n	800d55a <_dtoa_r+0x63a>
 800d61e:	e7cf      	b.n	800d5c0 <_dtoa_r+0x6a0>
 800d620:	9a08      	ldr	r2, [sp, #32]
 800d622:	2a00      	cmp	r2, #0
 800d624:	f000 80d7 	beq.w	800d7d6 <_dtoa_r+0x8b6>
 800d628:	9a06      	ldr	r2, [sp, #24]
 800d62a:	2a01      	cmp	r2, #1
 800d62c:	f300 80ba 	bgt.w	800d7a4 <_dtoa_r+0x884>
 800d630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d632:	2a00      	cmp	r2, #0
 800d634:	f000 80b2 	beq.w	800d79c <_dtoa_r+0x87c>
 800d638:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d63c:	9e07      	ldr	r6, [sp, #28]
 800d63e:	9d04      	ldr	r5, [sp, #16]
 800d640:	9a04      	ldr	r2, [sp, #16]
 800d642:	441a      	add	r2, r3
 800d644:	9204      	str	r2, [sp, #16]
 800d646:	9a05      	ldr	r2, [sp, #20]
 800d648:	2101      	movs	r1, #1
 800d64a:	441a      	add	r2, r3
 800d64c:	4620      	mov	r0, r4
 800d64e:	9205      	str	r2, [sp, #20]
 800d650:	f000 fb66 	bl	800dd20 <__i2b>
 800d654:	4607      	mov	r7, r0
 800d656:	2d00      	cmp	r5, #0
 800d658:	dd0c      	ble.n	800d674 <_dtoa_r+0x754>
 800d65a:	9b05      	ldr	r3, [sp, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	dd09      	ble.n	800d674 <_dtoa_r+0x754>
 800d660:	42ab      	cmp	r3, r5
 800d662:	9a04      	ldr	r2, [sp, #16]
 800d664:	bfa8      	it	ge
 800d666:	462b      	movge	r3, r5
 800d668:	1ad2      	subs	r2, r2, r3
 800d66a:	9204      	str	r2, [sp, #16]
 800d66c:	9a05      	ldr	r2, [sp, #20]
 800d66e:	1aed      	subs	r5, r5, r3
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	9305      	str	r3, [sp, #20]
 800d674:	9b07      	ldr	r3, [sp, #28]
 800d676:	b31b      	cbz	r3, 800d6c0 <_dtoa_r+0x7a0>
 800d678:	9b08      	ldr	r3, [sp, #32]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f000 80af 	beq.w	800d7de <_dtoa_r+0x8be>
 800d680:	2e00      	cmp	r6, #0
 800d682:	dd13      	ble.n	800d6ac <_dtoa_r+0x78c>
 800d684:	4639      	mov	r1, r7
 800d686:	4632      	mov	r2, r6
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 fc09 	bl	800dea0 <__pow5mult>
 800d68e:	ee18 2a10 	vmov	r2, s16
 800d692:	4601      	mov	r1, r0
 800d694:	4607      	mov	r7, r0
 800d696:	4620      	mov	r0, r4
 800d698:	f000 fb58 	bl	800dd4c <__multiply>
 800d69c:	ee18 1a10 	vmov	r1, s16
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f000 fa84 	bl	800dbb0 <_Bfree>
 800d6a8:	ee08 8a10 	vmov	s16, r8
 800d6ac:	9b07      	ldr	r3, [sp, #28]
 800d6ae:	1b9a      	subs	r2, r3, r6
 800d6b0:	d006      	beq.n	800d6c0 <_dtoa_r+0x7a0>
 800d6b2:	ee18 1a10 	vmov	r1, s16
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f000 fbf2 	bl	800dea0 <__pow5mult>
 800d6bc:	ee08 0a10 	vmov	s16, r0
 800d6c0:	2101      	movs	r1, #1
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f000 fb2c 	bl	800dd20 <__i2b>
 800d6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	f340 8088 	ble.w	800d7e2 <_dtoa_r+0x8c2>
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	4601      	mov	r1, r0
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 fbe2 	bl	800dea0 <__pow5mult>
 800d6dc:	9b06      	ldr	r3, [sp, #24]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	f340 8081 	ble.w	800d7e8 <_dtoa_r+0x8c8>
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	6933      	ldr	r3, [r6, #16]
 800d6ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d6f0:	6918      	ldr	r0, [r3, #16]
 800d6f2:	f000 fac5 	bl	800dc80 <__hi0bits>
 800d6f6:	f1c0 0020 	rsb	r0, r0, #32
 800d6fa:	9b05      	ldr	r3, [sp, #20]
 800d6fc:	4418      	add	r0, r3
 800d6fe:	f010 001f 	ands.w	r0, r0, #31
 800d702:	f000 8092 	beq.w	800d82a <_dtoa_r+0x90a>
 800d706:	f1c0 0320 	rsb	r3, r0, #32
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	f340 808a 	ble.w	800d824 <_dtoa_r+0x904>
 800d710:	f1c0 001c 	rsb	r0, r0, #28
 800d714:	9b04      	ldr	r3, [sp, #16]
 800d716:	4403      	add	r3, r0
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	9b05      	ldr	r3, [sp, #20]
 800d71c:	4403      	add	r3, r0
 800d71e:	4405      	add	r5, r0
 800d720:	9305      	str	r3, [sp, #20]
 800d722:	9b04      	ldr	r3, [sp, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	dd07      	ble.n	800d738 <_dtoa_r+0x818>
 800d728:	ee18 1a10 	vmov	r1, s16
 800d72c:	461a      	mov	r2, r3
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 fc10 	bl	800df54 <__lshift>
 800d734:	ee08 0a10 	vmov	s16, r0
 800d738:	9b05      	ldr	r3, [sp, #20]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	dd05      	ble.n	800d74a <_dtoa_r+0x82a>
 800d73e:	4631      	mov	r1, r6
 800d740:	461a      	mov	r2, r3
 800d742:	4620      	mov	r0, r4
 800d744:	f000 fc06 	bl	800df54 <__lshift>
 800d748:	4606      	mov	r6, r0
 800d74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d06e      	beq.n	800d82e <_dtoa_r+0x90e>
 800d750:	ee18 0a10 	vmov	r0, s16
 800d754:	4631      	mov	r1, r6
 800d756:	f000 fc6d 	bl	800e034 <__mcmp>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	da67      	bge.n	800d82e <_dtoa_r+0x90e>
 800d75e:	9b00      	ldr	r3, [sp, #0]
 800d760:	3b01      	subs	r3, #1
 800d762:	ee18 1a10 	vmov	r1, s16
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	220a      	movs	r2, #10
 800d76a:	2300      	movs	r3, #0
 800d76c:	4620      	mov	r0, r4
 800d76e:	f000 fa41 	bl	800dbf4 <__multadd>
 800d772:	9b08      	ldr	r3, [sp, #32]
 800d774:	ee08 0a10 	vmov	s16, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 81b1 	beq.w	800dae0 <_dtoa_r+0xbc0>
 800d77e:	2300      	movs	r3, #0
 800d780:	4639      	mov	r1, r7
 800d782:	220a      	movs	r2, #10
 800d784:	4620      	mov	r0, r4
 800d786:	f000 fa35 	bl	800dbf4 <__multadd>
 800d78a:	9b02      	ldr	r3, [sp, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	4607      	mov	r7, r0
 800d790:	f300 808e 	bgt.w	800d8b0 <_dtoa_r+0x990>
 800d794:	9b06      	ldr	r3, [sp, #24]
 800d796:	2b02      	cmp	r3, #2
 800d798:	dc51      	bgt.n	800d83e <_dtoa_r+0x91e>
 800d79a:	e089      	b.n	800d8b0 <_dtoa_r+0x990>
 800d79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d79e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d7a2:	e74b      	b.n	800d63c <_dtoa_r+0x71c>
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	1e5e      	subs	r6, r3, #1
 800d7a8:	9b07      	ldr	r3, [sp, #28]
 800d7aa:	42b3      	cmp	r3, r6
 800d7ac:	bfbf      	itttt	lt
 800d7ae:	9b07      	ldrlt	r3, [sp, #28]
 800d7b0:	9607      	strlt	r6, [sp, #28]
 800d7b2:	1af2      	sublt	r2, r6, r3
 800d7b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d7b6:	bfb6      	itet	lt
 800d7b8:	189b      	addlt	r3, r3, r2
 800d7ba:	1b9e      	subge	r6, r3, r6
 800d7bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d7be:	9b03      	ldr	r3, [sp, #12]
 800d7c0:	bfb8      	it	lt
 800d7c2:	2600      	movlt	r6, #0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bfb7      	itett	lt
 800d7c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d7cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d7d0:	1a9d      	sublt	r5, r3, r2
 800d7d2:	2300      	movlt	r3, #0
 800d7d4:	e734      	b.n	800d640 <_dtoa_r+0x720>
 800d7d6:	9e07      	ldr	r6, [sp, #28]
 800d7d8:	9d04      	ldr	r5, [sp, #16]
 800d7da:	9f08      	ldr	r7, [sp, #32]
 800d7dc:	e73b      	b.n	800d656 <_dtoa_r+0x736>
 800d7de:	9a07      	ldr	r2, [sp, #28]
 800d7e0:	e767      	b.n	800d6b2 <_dtoa_r+0x792>
 800d7e2:	9b06      	ldr	r3, [sp, #24]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	dc18      	bgt.n	800d81a <_dtoa_r+0x8fa>
 800d7e8:	f1ba 0f00 	cmp.w	sl, #0
 800d7ec:	d115      	bne.n	800d81a <_dtoa_r+0x8fa>
 800d7ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7f2:	b993      	cbnz	r3, 800d81a <_dtoa_r+0x8fa>
 800d7f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7f8:	0d1b      	lsrs	r3, r3, #20
 800d7fa:	051b      	lsls	r3, r3, #20
 800d7fc:	b183      	cbz	r3, 800d820 <_dtoa_r+0x900>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	3301      	adds	r3, #1
 800d802:	9304      	str	r3, [sp, #16]
 800d804:	9b05      	ldr	r3, [sp, #20]
 800d806:	3301      	adds	r3, #1
 800d808:	9305      	str	r3, [sp, #20]
 800d80a:	f04f 0801 	mov.w	r8, #1
 800d80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d810:	2b00      	cmp	r3, #0
 800d812:	f47f af6a 	bne.w	800d6ea <_dtoa_r+0x7ca>
 800d816:	2001      	movs	r0, #1
 800d818:	e76f      	b.n	800d6fa <_dtoa_r+0x7da>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	e7f6      	b.n	800d80e <_dtoa_r+0x8ee>
 800d820:	4698      	mov	r8, r3
 800d822:	e7f4      	b.n	800d80e <_dtoa_r+0x8ee>
 800d824:	f43f af7d 	beq.w	800d722 <_dtoa_r+0x802>
 800d828:	4618      	mov	r0, r3
 800d82a:	301c      	adds	r0, #28
 800d82c:	e772      	b.n	800d714 <_dtoa_r+0x7f4>
 800d82e:	9b03      	ldr	r3, [sp, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	dc37      	bgt.n	800d8a4 <_dtoa_r+0x984>
 800d834:	9b06      	ldr	r3, [sp, #24]
 800d836:	2b02      	cmp	r3, #2
 800d838:	dd34      	ble.n	800d8a4 <_dtoa_r+0x984>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	9b02      	ldr	r3, [sp, #8]
 800d840:	b96b      	cbnz	r3, 800d85e <_dtoa_r+0x93e>
 800d842:	4631      	mov	r1, r6
 800d844:	2205      	movs	r2, #5
 800d846:	4620      	mov	r0, r4
 800d848:	f000 f9d4 	bl	800dbf4 <__multadd>
 800d84c:	4601      	mov	r1, r0
 800d84e:	4606      	mov	r6, r0
 800d850:	ee18 0a10 	vmov	r0, s16
 800d854:	f000 fbee 	bl	800e034 <__mcmp>
 800d858:	2800      	cmp	r0, #0
 800d85a:	f73f adbb 	bgt.w	800d3d4 <_dtoa_r+0x4b4>
 800d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d860:	9d01      	ldr	r5, [sp, #4]
 800d862:	43db      	mvns	r3, r3
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	f04f 0800 	mov.w	r8, #0
 800d86a:	4631      	mov	r1, r6
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 f99f 	bl	800dbb0 <_Bfree>
 800d872:	2f00      	cmp	r7, #0
 800d874:	f43f aea4 	beq.w	800d5c0 <_dtoa_r+0x6a0>
 800d878:	f1b8 0f00 	cmp.w	r8, #0
 800d87c:	d005      	beq.n	800d88a <_dtoa_r+0x96a>
 800d87e:	45b8      	cmp	r8, r7
 800d880:	d003      	beq.n	800d88a <_dtoa_r+0x96a>
 800d882:	4641      	mov	r1, r8
 800d884:	4620      	mov	r0, r4
 800d886:	f000 f993 	bl	800dbb0 <_Bfree>
 800d88a:	4639      	mov	r1, r7
 800d88c:	4620      	mov	r0, r4
 800d88e:	f000 f98f 	bl	800dbb0 <_Bfree>
 800d892:	e695      	b.n	800d5c0 <_dtoa_r+0x6a0>
 800d894:	2600      	movs	r6, #0
 800d896:	4637      	mov	r7, r6
 800d898:	e7e1      	b.n	800d85e <_dtoa_r+0x93e>
 800d89a:	9700      	str	r7, [sp, #0]
 800d89c:	4637      	mov	r7, r6
 800d89e:	e599      	b.n	800d3d4 <_dtoa_r+0x4b4>
 800d8a0:	40240000 	.word	0x40240000
 800d8a4:	9b08      	ldr	r3, [sp, #32]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 80ca 	beq.w	800da40 <_dtoa_r+0xb20>
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	9302      	str	r3, [sp, #8]
 800d8b0:	2d00      	cmp	r5, #0
 800d8b2:	dd05      	ble.n	800d8c0 <_dtoa_r+0x9a0>
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f000 fb4b 	bl	800df54 <__lshift>
 800d8be:	4607      	mov	r7, r0
 800d8c0:	f1b8 0f00 	cmp.w	r8, #0
 800d8c4:	d05b      	beq.n	800d97e <_dtoa_r+0xa5e>
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f000 f931 	bl	800db30 <_Balloc>
 800d8ce:	4605      	mov	r5, r0
 800d8d0:	b928      	cbnz	r0, 800d8de <_dtoa_r+0x9be>
 800d8d2:	4b87      	ldr	r3, [pc, #540]	; (800daf0 <_dtoa_r+0xbd0>)
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d8da:	f7ff bb3b 	b.w	800cf54 <_dtoa_r+0x34>
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	3202      	adds	r2, #2
 800d8e2:	0092      	lsls	r2, r2, #2
 800d8e4:	f107 010c 	add.w	r1, r7, #12
 800d8e8:	300c      	adds	r0, #12
 800d8ea:	f000 f913 	bl	800db14 <memcpy>
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 fb2e 	bl	800df54 <__lshift>
 800d8f8:	9b01      	ldr	r3, [sp, #4]
 800d8fa:	f103 0901 	add.w	r9, r3, #1
 800d8fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d902:	4413      	add	r3, r2
 800d904:	9305      	str	r3, [sp, #20]
 800d906:	f00a 0301 	and.w	r3, sl, #1
 800d90a:	46b8      	mov	r8, r7
 800d90c:	9304      	str	r3, [sp, #16]
 800d90e:	4607      	mov	r7, r0
 800d910:	4631      	mov	r1, r6
 800d912:	ee18 0a10 	vmov	r0, s16
 800d916:	f7ff fa75 	bl	800ce04 <quorem>
 800d91a:	4641      	mov	r1, r8
 800d91c:	9002      	str	r0, [sp, #8]
 800d91e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d922:	ee18 0a10 	vmov	r0, s16
 800d926:	f000 fb85 	bl	800e034 <__mcmp>
 800d92a:	463a      	mov	r2, r7
 800d92c:	9003      	str	r0, [sp, #12]
 800d92e:	4631      	mov	r1, r6
 800d930:	4620      	mov	r0, r4
 800d932:	f000 fb9b 	bl	800e06c <__mdiff>
 800d936:	68c2      	ldr	r2, [r0, #12]
 800d938:	f109 3bff 	add.w	fp, r9, #4294967295
 800d93c:	4605      	mov	r5, r0
 800d93e:	bb02      	cbnz	r2, 800d982 <_dtoa_r+0xa62>
 800d940:	4601      	mov	r1, r0
 800d942:	ee18 0a10 	vmov	r0, s16
 800d946:	f000 fb75 	bl	800e034 <__mcmp>
 800d94a:	4602      	mov	r2, r0
 800d94c:	4629      	mov	r1, r5
 800d94e:	4620      	mov	r0, r4
 800d950:	9207      	str	r2, [sp, #28]
 800d952:	f000 f92d 	bl	800dbb0 <_Bfree>
 800d956:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d95a:	ea43 0102 	orr.w	r1, r3, r2
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	430b      	orrs	r3, r1
 800d962:	464d      	mov	r5, r9
 800d964:	d10f      	bne.n	800d986 <_dtoa_r+0xa66>
 800d966:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d96a:	d02a      	beq.n	800d9c2 <_dtoa_r+0xaa2>
 800d96c:	9b03      	ldr	r3, [sp, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	dd02      	ble.n	800d978 <_dtoa_r+0xa58>
 800d972:	9b02      	ldr	r3, [sp, #8]
 800d974:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d978:	f88b a000 	strb.w	sl, [fp]
 800d97c:	e775      	b.n	800d86a <_dtoa_r+0x94a>
 800d97e:	4638      	mov	r0, r7
 800d980:	e7ba      	b.n	800d8f8 <_dtoa_r+0x9d8>
 800d982:	2201      	movs	r2, #1
 800d984:	e7e2      	b.n	800d94c <_dtoa_r+0xa2c>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	db04      	blt.n	800d996 <_dtoa_r+0xa76>
 800d98c:	9906      	ldr	r1, [sp, #24]
 800d98e:	430b      	orrs	r3, r1
 800d990:	9904      	ldr	r1, [sp, #16]
 800d992:	430b      	orrs	r3, r1
 800d994:	d122      	bne.n	800d9dc <_dtoa_r+0xabc>
 800d996:	2a00      	cmp	r2, #0
 800d998:	ddee      	ble.n	800d978 <_dtoa_r+0xa58>
 800d99a:	ee18 1a10 	vmov	r1, s16
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f000 fad7 	bl	800df54 <__lshift>
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	ee08 0a10 	vmov	s16, r0
 800d9ac:	f000 fb42 	bl	800e034 <__mcmp>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	dc03      	bgt.n	800d9bc <_dtoa_r+0xa9c>
 800d9b4:	d1e0      	bne.n	800d978 <_dtoa_r+0xa58>
 800d9b6:	f01a 0f01 	tst.w	sl, #1
 800d9ba:	d0dd      	beq.n	800d978 <_dtoa_r+0xa58>
 800d9bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9c0:	d1d7      	bne.n	800d972 <_dtoa_r+0xa52>
 800d9c2:	2339      	movs	r3, #57	; 0x39
 800d9c4:	f88b 3000 	strb.w	r3, [fp]
 800d9c8:	462b      	mov	r3, r5
 800d9ca:	461d      	mov	r5, r3
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d9d2:	2a39      	cmp	r2, #57	; 0x39
 800d9d4:	d071      	beq.n	800daba <_dtoa_r+0xb9a>
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	701a      	strb	r2, [r3, #0]
 800d9da:	e746      	b.n	800d86a <_dtoa_r+0x94a>
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	dd07      	ble.n	800d9f0 <_dtoa_r+0xad0>
 800d9e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9e4:	d0ed      	beq.n	800d9c2 <_dtoa_r+0xaa2>
 800d9e6:	f10a 0301 	add.w	r3, sl, #1
 800d9ea:	f88b 3000 	strb.w	r3, [fp]
 800d9ee:	e73c      	b.n	800d86a <_dtoa_r+0x94a>
 800d9f0:	9b05      	ldr	r3, [sp, #20]
 800d9f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d9f6:	4599      	cmp	r9, r3
 800d9f8:	d047      	beq.n	800da8a <_dtoa_r+0xb6a>
 800d9fa:	ee18 1a10 	vmov	r1, s16
 800d9fe:	2300      	movs	r3, #0
 800da00:	220a      	movs	r2, #10
 800da02:	4620      	mov	r0, r4
 800da04:	f000 f8f6 	bl	800dbf4 <__multadd>
 800da08:	45b8      	cmp	r8, r7
 800da0a:	ee08 0a10 	vmov	s16, r0
 800da0e:	f04f 0300 	mov.w	r3, #0
 800da12:	f04f 020a 	mov.w	r2, #10
 800da16:	4641      	mov	r1, r8
 800da18:	4620      	mov	r0, r4
 800da1a:	d106      	bne.n	800da2a <_dtoa_r+0xb0a>
 800da1c:	f000 f8ea 	bl	800dbf4 <__multadd>
 800da20:	4680      	mov	r8, r0
 800da22:	4607      	mov	r7, r0
 800da24:	f109 0901 	add.w	r9, r9, #1
 800da28:	e772      	b.n	800d910 <_dtoa_r+0x9f0>
 800da2a:	f000 f8e3 	bl	800dbf4 <__multadd>
 800da2e:	4639      	mov	r1, r7
 800da30:	4680      	mov	r8, r0
 800da32:	2300      	movs	r3, #0
 800da34:	220a      	movs	r2, #10
 800da36:	4620      	mov	r0, r4
 800da38:	f000 f8dc 	bl	800dbf4 <__multadd>
 800da3c:	4607      	mov	r7, r0
 800da3e:	e7f1      	b.n	800da24 <_dtoa_r+0xb04>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	9302      	str	r3, [sp, #8]
 800da44:	9d01      	ldr	r5, [sp, #4]
 800da46:	ee18 0a10 	vmov	r0, s16
 800da4a:	4631      	mov	r1, r6
 800da4c:	f7ff f9da 	bl	800ce04 <quorem>
 800da50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da54:	9b01      	ldr	r3, [sp, #4]
 800da56:	f805 ab01 	strb.w	sl, [r5], #1
 800da5a:	1aea      	subs	r2, r5, r3
 800da5c:	9b02      	ldr	r3, [sp, #8]
 800da5e:	4293      	cmp	r3, r2
 800da60:	dd09      	ble.n	800da76 <_dtoa_r+0xb56>
 800da62:	ee18 1a10 	vmov	r1, s16
 800da66:	2300      	movs	r3, #0
 800da68:	220a      	movs	r2, #10
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 f8c2 	bl	800dbf4 <__multadd>
 800da70:	ee08 0a10 	vmov	s16, r0
 800da74:	e7e7      	b.n	800da46 <_dtoa_r+0xb26>
 800da76:	9b02      	ldr	r3, [sp, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	bfc8      	it	gt
 800da7c:	461d      	movgt	r5, r3
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	bfd8      	it	le
 800da82:	2501      	movle	r5, #1
 800da84:	441d      	add	r5, r3
 800da86:	f04f 0800 	mov.w	r8, #0
 800da8a:	ee18 1a10 	vmov	r1, s16
 800da8e:	2201      	movs	r2, #1
 800da90:	4620      	mov	r0, r4
 800da92:	f000 fa5f 	bl	800df54 <__lshift>
 800da96:	4631      	mov	r1, r6
 800da98:	ee08 0a10 	vmov	s16, r0
 800da9c:	f000 faca 	bl	800e034 <__mcmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	dc91      	bgt.n	800d9c8 <_dtoa_r+0xaa8>
 800daa4:	d102      	bne.n	800daac <_dtoa_r+0xb8c>
 800daa6:	f01a 0f01 	tst.w	sl, #1
 800daaa:	d18d      	bne.n	800d9c8 <_dtoa_r+0xaa8>
 800daac:	462b      	mov	r3, r5
 800daae:	461d      	mov	r5, r3
 800dab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dab4:	2a30      	cmp	r2, #48	; 0x30
 800dab6:	d0fa      	beq.n	800daae <_dtoa_r+0xb8e>
 800dab8:	e6d7      	b.n	800d86a <_dtoa_r+0x94a>
 800daba:	9a01      	ldr	r2, [sp, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d184      	bne.n	800d9ca <_dtoa_r+0xaaa>
 800dac0:	9b00      	ldr	r3, [sp, #0]
 800dac2:	3301      	adds	r3, #1
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	2331      	movs	r3, #49	; 0x31
 800dac8:	7013      	strb	r3, [r2, #0]
 800daca:	e6ce      	b.n	800d86a <_dtoa_r+0x94a>
 800dacc:	4b09      	ldr	r3, [pc, #36]	; (800daf4 <_dtoa_r+0xbd4>)
 800dace:	f7ff ba95 	b.w	800cffc <_dtoa_r+0xdc>
 800dad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f47f aa6e 	bne.w	800cfb6 <_dtoa_r+0x96>
 800dada:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <_dtoa_r+0xbd8>)
 800dadc:	f7ff ba8e 	b.w	800cffc <_dtoa_r+0xdc>
 800dae0:	9b02      	ldr	r3, [sp, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dcae      	bgt.n	800da44 <_dtoa_r+0xb24>
 800dae6:	9b06      	ldr	r3, [sp, #24]
 800dae8:	2b02      	cmp	r3, #2
 800daea:	f73f aea8 	bgt.w	800d83e <_dtoa_r+0x91e>
 800daee:	e7a9      	b.n	800da44 <_dtoa_r+0xb24>
 800daf0:	0801024f 	.word	0x0801024f
 800daf4:	080101ac 	.word	0x080101ac
 800daf8:	080101d0 	.word	0x080101d0

0800dafc <_localeconv_r>:
 800dafc:	4800      	ldr	r0, [pc, #0]	; (800db00 <_localeconv_r+0x4>)
 800dafe:	4770      	bx	lr
 800db00:	20000180 	.word	0x20000180

0800db04 <malloc>:
 800db04:	4b02      	ldr	r3, [pc, #8]	; (800db10 <malloc+0xc>)
 800db06:	4601      	mov	r1, r0
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	f000 bc17 	b.w	800e33c <_malloc_r>
 800db0e:	bf00      	nop
 800db10:	2000002c 	.word	0x2000002c

0800db14 <memcpy>:
 800db14:	440a      	add	r2, r1
 800db16:	4291      	cmp	r1, r2
 800db18:	f100 33ff 	add.w	r3, r0, #4294967295
 800db1c:	d100      	bne.n	800db20 <memcpy+0xc>
 800db1e:	4770      	bx	lr
 800db20:	b510      	push	{r4, lr}
 800db22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db2a:	4291      	cmp	r1, r2
 800db2c:	d1f9      	bne.n	800db22 <memcpy+0xe>
 800db2e:	bd10      	pop	{r4, pc}

0800db30 <_Balloc>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db34:	4604      	mov	r4, r0
 800db36:	460d      	mov	r5, r1
 800db38:	b976      	cbnz	r6, 800db58 <_Balloc+0x28>
 800db3a:	2010      	movs	r0, #16
 800db3c:	f7ff ffe2 	bl	800db04 <malloc>
 800db40:	4602      	mov	r2, r0
 800db42:	6260      	str	r0, [r4, #36]	; 0x24
 800db44:	b920      	cbnz	r0, 800db50 <_Balloc+0x20>
 800db46:	4b18      	ldr	r3, [pc, #96]	; (800dba8 <_Balloc+0x78>)
 800db48:	4818      	ldr	r0, [pc, #96]	; (800dbac <_Balloc+0x7c>)
 800db4a:	2166      	movs	r1, #102	; 0x66
 800db4c:	f000 fdd6 	bl	800e6fc <__assert_func>
 800db50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db54:	6006      	str	r6, [r0, #0]
 800db56:	60c6      	str	r6, [r0, #12]
 800db58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800db5a:	68f3      	ldr	r3, [r6, #12]
 800db5c:	b183      	cbz	r3, 800db80 <_Balloc+0x50>
 800db5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db66:	b9b8      	cbnz	r0, 800db98 <_Balloc+0x68>
 800db68:	2101      	movs	r1, #1
 800db6a:	fa01 f605 	lsl.w	r6, r1, r5
 800db6e:	1d72      	adds	r2, r6, #5
 800db70:	0092      	lsls	r2, r2, #2
 800db72:	4620      	mov	r0, r4
 800db74:	f000 fb60 	bl	800e238 <_calloc_r>
 800db78:	b160      	cbz	r0, 800db94 <_Balloc+0x64>
 800db7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db7e:	e00e      	b.n	800db9e <_Balloc+0x6e>
 800db80:	2221      	movs	r2, #33	; 0x21
 800db82:	2104      	movs	r1, #4
 800db84:	4620      	mov	r0, r4
 800db86:	f000 fb57 	bl	800e238 <_calloc_r>
 800db8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db8c:	60f0      	str	r0, [r6, #12]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1e4      	bne.n	800db5e <_Balloc+0x2e>
 800db94:	2000      	movs	r0, #0
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	6802      	ldr	r2, [r0, #0]
 800db9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db9e:	2300      	movs	r3, #0
 800dba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dba4:	e7f7      	b.n	800db96 <_Balloc+0x66>
 800dba6:	bf00      	nop
 800dba8:	080101dd 	.word	0x080101dd
 800dbac:	08010260 	.word	0x08010260

0800dbb0 <_Bfree>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	b976      	cbnz	r6, 800dbd8 <_Bfree+0x28>
 800dbba:	2010      	movs	r0, #16
 800dbbc:	f7ff ffa2 	bl	800db04 <malloc>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	6268      	str	r0, [r5, #36]	; 0x24
 800dbc4:	b920      	cbnz	r0, 800dbd0 <_Bfree+0x20>
 800dbc6:	4b09      	ldr	r3, [pc, #36]	; (800dbec <_Bfree+0x3c>)
 800dbc8:	4809      	ldr	r0, [pc, #36]	; (800dbf0 <_Bfree+0x40>)
 800dbca:	218a      	movs	r1, #138	; 0x8a
 800dbcc:	f000 fd96 	bl	800e6fc <__assert_func>
 800dbd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbd4:	6006      	str	r6, [r0, #0]
 800dbd6:	60c6      	str	r6, [r0, #12]
 800dbd8:	b13c      	cbz	r4, 800dbea <_Bfree+0x3a>
 800dbda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dbdc:	6862      	ldr	r2, [r4, #4]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbe4:	6021      	str	r1, [r4, #0]
 800dbe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	080101dd 	.word	0x080101dd
 800dbf0:	08010260 	.word	0x08010260

0800dbf4 <__multadd>:
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	690d      	ldr	r5, [r1, #16]
 800dbfa:	4607      	mov	r7, r0
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	461e      	mov	r6, r3
 800dc00:	f101 0c14 	add.w	ip, r1, #20
 800dc04:	2000      	movs	r0, #0
 800dc06:	f8dc 3000 	ldr.w	r3, [ip]
 800dc0a:	b299      	uxth	r1, r3
 800dc0c:	fb02 6101 	mla	r1, r2, r1, r6
 800dc10:	0c1e      	lsrs	r6, r3, #16
 800dc12:	0c0b      	lsrs	r3, r1, #16
 800dc14:	fb02 3306 	mla	r3, r2, r6, r3
 800dc18:	b289      	uxth	r1, r1
 800dc1a:	3001      	adds	r0, #1
 800dc1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc20:	4285      	cmp	r5, r0
 800dc22:	f84c 1b04 	str.w	r1, [ip], #4
 800dc26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc2a:	dcec      	bgt.n	800dc06 <__multadd+0x12>
 800dc2c:	b30e      	cbz	r6, 800dc72 <__multadd+0x7e>
 800dc2e:	68a3      	ldr	r3, [r4, #8]
 800dc30:	42ab      	cmp	r3, r5
 800dc32:	dc19      	bgt.n	800dc68 <__multadd+0x74>
 800dc34:	6861      	ldr	r1, [r4, #4]
 800dc36:	4638      	mov	r0, r7
 800dc38:	3101      	adds	r1, #1
 800dc3a:	f7ff ff79 	bl	800db30 <_Balloc>
 800dc3e:	4680      	mov	r8, r0
 800dc40:	b928      	cbnz	r0, 800dc4e <__multadd+0x5a>
 800dc42:	4602      	mov	r2, r0
 800dc44:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <__multadd+0x84>)
 800dc46:	480d      	ldr	r0, [pc, #52]	; (800dc7c <__multadd+0x88>)
 800dc48:	21b5      	movs	r1, #181	; 0xb5
 800dc4a:	f000 fd57 	bl	800e6fc <__assert_func>
 800dc4e:	6922      	ldr	r2, [r4, #16]
 800dc50:	3202      	adds	r2, #2
 800dc52:	f104 010c 	add.w	r1, r4, #12
 800dc56:	0092      	lsls	r2, r2, #2
 800dc58:	300c      	adds	r0, #12
 800dc5a:	f7ff ff5b 	bl	800db14 <memcpy>
 800dc5e:	4621      	mov	r1, r4
 800dc60:	4638      	mov	r0, r7
 800dc62:	f7ff ffa5 	bl	800dbb0 <_Bfree>
 800dc66:	4644      	mov	r4, r8
 800dc68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc6c:	3501      	adds	r5, #1
 800dc6e:	615e      	str	r6, [r3, #20]
 800dc70:	6125      	str	r5, [r4, #16]
 800dc72:	4620      	mov	r0, r4
 800dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc78:	0801024f 	.word	0x0801024f
 800dc7c:	08010260 	.word	0x08010260

0800dc80 <__hi0bits>:
 800dc80:	0c03      	lsrs	r3, r0, #16
 800dc82:	041b      	lsls	r3, r3, #16
 800dc84:	b9d3      	cbnz	r3, 800dcbc <__hi0bits+0x3c>
 800dc86:	0400      	lsls	r0, r0, #16
 800dc88:	2310      	movs	r3, #16
 800dc8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc8e:	bf04      	itt	eq
 800dc90:	0200      	lsleq	r0, r0, #8
 800dc92:	3308      	addeq	r3, #8
 800dc94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc98:	bf04      	itt	eq
 800dc9a:	0100      	lsleq	r0, r0, #4
 800dc9c:	3304      	addeq	r3, #4
 800dc9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dca2:	bf04      	itt	eq
 800dca4:	0080      	lsleq	r0, r0, #2
 800dca6:	3302      	addeq	r3, #2
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	db05      	blt.n	800dcb8 <__hi0bits+0x38>
 800dcac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dcb0:	f103 0301 	add.w	r3, r3, #1
 800dcb4:	bf08      	it	eq
 800dcb6:	2320      	moveq	r3, #32
 800dcb8:	4618      	mov	r0, r3
 800dcba:	4770      	bx	lr
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	e7e4      	b.n	800dc8a <__hi0bits+0xa>

0800dcc0 <__lo0bits>:
 800dcc0:	6803      	ldr	r3, [r0, #0]
 800dcc2:	f013 0207 	ands.w	r2, r3, #7
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	d00b      	beq.n	800dce2 <__lo0bits+0x22>
 800dcca:	07da      	lsls	r2, r3, #31
 800dccc:	d423      	bmi.n	800dd16 <__lo0bits+0x56>
 800dcce:	0798      	lsls	r0, r3, #30
 800dcd0:	bf49      	itett	mi
 800dcd2:	085b      	lsrmi	r3, r3, #1
 800dcd4:	089b      	lsrpl	r3, r3, #2
 800dcd6:	2001      	movmi	r0, #1
 800dcd8:	600b      	strmi	r3, [r1, #0]
 800dcda:	bf5c      	itt	pl
 800dcdc:	600b      	strpl	r3, [r1, #0]
 800dcde:	2002      	movpl	r0, #2
 800dce0:	4770      	bx	lr
 800dce2:	b298      	uxth	r0, r3
 800dce4:	b9a8      	cbnz	r0, 800dd12 <__lo0bits+0x52>
 800dce6:	0c1b      	lsrs	r3, r3, #16
 800dce8:	2010      	movs	r0, #16
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	b90a      	cbnz	r2, 800dcf2 <__lo0bits+0x32>
 800dcee:	3008      	adds	r0, #8
 800dcf0:	0a1b      	lsrs	r3, r3, #8
 800dcf2:	071a      	lsls	r2, r3, #28
 800dcf4:	bf04      	itt	eq
 800dcf6:	091b      	lsreq	r3, r3, #4
 800dcf8:	3004      	addeq	r0, #4
 800dcfa:	079a      	lsls	r2, r3, #30
 800dcfc:	bf04      	itt	eq
 800dcfe:	089b      	lsreq	r3, r3, #2
 800dd00:	3002      	addeq	r0, #2
 800dd02:	07da      	lsls	r2, r3, #31
 800dd04:	d403      	bmi.n	800dd0e <__lo0bits+0x4e>
 800dd06:	085b      	lsrs	r3, r3, #1
 800dd08:	f100 0001 	add.w	r0, r0, #1
 800dd0c:	d005      	beq.n	800dd1a <__lo0bits+0x5a>
 800dd0e:	600b      	str	r3, [r1, #0]
 800dd10:	4770      	bx	lr
 800dd12:	4610      	mov	r0, r2
 800dd14:	e7e9      	b.n	800dcea <__lo0bits+0x2a>
 800dd16:	2000      	movs	r0, #0
 800dd18:	4770      	bx	lr
 800dd1a:	2020      	movs	r0, #32
 800dd1c:	4770      	bx	lr
	...

0800dd20 <__i2b>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	460c      	mov	r4, r1
 800dd24:	2101      	movs	r1, #1
 800dd26:	f7ff ff03 	bl	800db30 <_Balloc>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	b928      	cbnz	r0, 800dd3a <__i2b+0x1a>
 800dd2e:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <__i2b+0x24>)
 800dd30:	4805      	ldr	r0, [pc, #20]	; (800dd48 <__i2b+0x28>)
 800dd32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dd36:	f000 fce1 	bl	800e6fc <__assert_func>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	6144      	str	r4, [r0, #20]
 800dd3e:	6103      	str	r3, [r0, #16]
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	bf00      	nop
 800dd44:	0801024f 	.word	0x0801024f
 800dd48:	08010260 	.word	0x08010260

0800dd4c <__multiply>:
 800dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	4691      	mov	r9, r2
 800dd52:	690a      	ldr	r2, [r1, #16]
 800dd54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	bfb8      	it	lt
 800dd5c:	460b      	movlt	r3, r1
 800dd5e:	460c      	mov	r4, r1
 800dd60:	bfbc      	itt	lt
 800dd62:	464c      	movlt	r4, r9
 800dd64:	4699      	movlt	r9, r3
 800dd66:	6927      	ldr	r7, [r4, #16]
 800dd68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd6c:	68a3      	ldr	r3, [r4, #8]
 800dd6e:	6861      	ldr	r1, [r4, #4]
 800dd70:	eb07 060a 	add.w	r6, r7, sl
 800dd74:	42b3      	cmp	r3, r6
 800dd76:	b085      	sub	sp, #20
 800dd78:	bfb8      	it	lt
 800dd7a:	3101      	addlt	r1, #1
 800dd7c:	f7ff fed8 	bl	800db30 <_Balloc>
 800dd80:	b930      	cbnz	r0, 800dd90 <__multiply+0x44>
 800dd82:	4602      	mov	r2, r0
 800dd84:	4b44      	ldr	r3, [pc, #272]	; (800de98 <__multiply+0x14c>)
 800dd86:	4845      	ldr	r0, [pc, #276]	; (800de9c <__multiply+0x150>)
 800dd88:	f240 115d 	movw	r1, #349	; 0x15d
 800dd8c:	f000 fcb6 	bl	800e6fc <__assert_func>
 800dd90:	f100 0514 	add.w	r5, r0, #20
 800dd94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd98:	462b      	mov	r3, r5
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	4543      	cmp	r3, r8
 800dd9e:	d321      	bcc.n	800dde4 <__multiply+0x98>
 800dda0:	f104 0314 	add.w	r3, r4, #20
 800dda4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dda8:	f109 0314 	add.w	r3, r9, #20
 800ddac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ddb0:	9202      	str	r2, [sp, #8]
 800ddb2:	1b3a      	subs	r2, r7, r4
 800ddb4:	3a15      	subs	r2, #21
 800ddb6:	f022 0203 	bic.w	r2, r2, #3
 800ddba:	3204      	adds	r2, #4
 800ddbc:	f104 0115 	add.w	r1, r4, #21
 800ddc0:	428f      	cmp	r7, r1
 800ddc2:	bf38      	it	cc
 800ddc4:	2204      	movcc	r2, #4
 800ddc6:	9201      	str	r2, [sp, #4]
 800ddc8:	9a02      	ldr	r2, [sp, #8]
 800ddca:	9303      	str	r3, [sp, #12]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d80c      	bhi.n	800ddea <__multiply+0x9e>
 800ddd0:	2e00      	cmp	r6, #0
 800ddd2:	dd03      	ble.n	800dddc <__multiply+0x90>
 800ddd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d05a      	beq.n	800de92 <__multiply+0x146>
 800dddc:	6106      	str	r6, [r0, #16]
 800ddde:	b005      	add	sp, #20
 800dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde4:	f843 2b04 	str.w	r2, [r3], #4
 800dde8:	e7d8      	b.n	800dd9c <__multiply+0x50>
 800ddea:	f8b3 a000 	ldrh.w	sl, [r3]
 800ddee:	f1ba 0f00 	cmp.w	sl, #0
 800ddf2:	d024      	beq.n	800de3e <__multiply+0xf2>
 800ddf4:	f104 0e14 	add.w	lr, r4, #20
 800ddf8:	46a9      	mov	r9, r5
 800ddfa:	f04f 0c00 	mov.w	ip, #0
 800ddfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800de02:	f8d9 1000 	ldr.w	r1, [r9]
 800de06:	fa1f fb82 	uxth.w	fp, r2
 800de0a:	b289      	uxth	r1, r1
 800de0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800de10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800de14:	f8d9 2000 	ldr.w	r2, [r9]
 800de18:	4461      	add	r1, ip
 800de1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800de22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800de26:	b289      	uxth	r1, r1
 800de28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de2c:	4577      	cmp	r7, lr
 800de2e:	f849 1b04 	str.w	r1, [r9], #4
 800de32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de36:	d8e2      	bhi.n	800ddfe <__multiply+0xb2>
 800de38:	9a01      	ldr	r2, [sp, #4]
 800de3a:	f845 c002 	str.w	ip, [r5, r2]
 800de3e:	9a03      	ldr	r2, [sp, #12]
 800de40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de44:	3304      	adds	r3, #4
 800de46:	f1b9 0f00 	cmp.w	r9, #0
 800de4a:	d020      	beq.n	800de8e <__multiply+0x142>
 800de4c:	6829      	ldr	r1, [r5, #0]
 800de4e:	f104 0c14 	add.w	ip, r4, #20
 800de52:	46ae      	mov	lr, r5
 800de54:	f04f 0a00 	mov.w	sl, #0
 800de58:	f8bc b000 	ldrh.w	fp, [ip]
 800de5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de60:	fb09 220b 	mla	r2, r9, fp, r2
 800de64:	4492      	add	sl, r2
 800de66:	b289      	uxth	r1, r1
 800de68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de6c:	f84e 1b04 	str.w	r1, [lr], #4
 800de70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de74:	f8be 1000 	ldrh.w	r1, [lr]
 800de78:	0c12      	lsrs	r2, r2, #16
 800de7a:	fb09 1102 	mla	r1, r9, r2, r1
 800de7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de82:	4567      	cmp	r7, ip
 800de84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de88:	d8e6      	bhi.n	800de58 <__multiply+0x10c>
 800de8a:	9a01      	ldr	r2, [sp, #4]
 800de8c:	50a9      	str	r1, [r5, r2]
 800de8e:	3504      	adds	r5, #4
 800de90:	e79a      	b.n	800ddc8 <__multiply+0x7c>
 800de92:	3e01      	subs	r6, #1
 800de94:	e79c      	b.n	800ddd0 <__multiply+0x84>
 800de96:	bf00      	nop
 800de98:	0801024f 	.word	0x0801024f
 800de9c:	08010260 	.word	0x08010260

0800dea0 <__pow5mult>:
 800dea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea4:	4615      	mov	r5, r2
 800dea6:	f012 0203 	ands.w	r2, r2, #3
 800deaa:	4606      	mov	r6, r0
 800deac:	460f      	mov	r7, r1
 800deae:	d007      	beq.n	800dec0 <__pow5mult+0x20>
 800deb0:	4c25      	ldr	r4, [pc, #148]	; (800df48 <__pow5mult+0xa8>)
 800deb2:	3a01      	subs	r2, #1
 800deb4:	2300      	movs	r3, #0
 800deb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800deba:	f7ff fe9b 	bl	800dbf4 <__multadd>
 800debe:	4607      	mov	r7, r0
 800dec0:	10ad      	asrs	r5, r5, #2
 800dec2:	d03d      	beq.n	800df40 <__pow5mult+0xa0>
 800dec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dec6:	b97c      	cbnz	r4, 800dee8 <__pow5mult+0x48>
 800dec8:	2010      	movs	r0, #16
 800deca:	f7ff fe1b 	bl	800db04 <malloc>
 800dece:	4602      	mov	r2, r0
 800ded0:	6270      	str	r0, [r6, #36]	; 0x24
 800ded2:	b928      	cbnz	r0, 800dee0 <__pow5mult+0x40>
 800ded4:	4b1d      	ldr	r3, [pc, #116]	; (800df4c <__pow5mult+0xac>)
 800ded6:	481e      	ldr	r0, [pc, #120]	; (800df50 <__pow5mult+0xb0>)
 800ded8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dedc:	f000 fc0e 	bl	800e6fc <__assert_func>
 800dee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dee4:	6004      	str	r4, [r0, #0]
 800dee6:	60c4      	str	r4, [r0, #12]
 800dee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800deec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800def0:	b94c      	cbnz	r4, 800df06 <__pow5mult+0x66>
 800def2:	f240 2171 	movw	r1, #625	; 0x271
 800def6:	4630      	mov	r0, r6
 800def8:	f7ff ff12 	bl	800dd20 <__i2b>
 800defc:	2300      	movs	r3, #0
 800defe:	f8c8 0008 	str.w	r0, [r8, #8]
 800df02:	4604      	mov	r4, r0
 800df04:	6003      	str	r3, [r0, #0]
 800df06:	f04f 0900 	mov.w	r9, #0
 800df0a:	07eb      	lsls	r3, r5, #31
 800df0c:	d50a      	bpl.n	800df24 <__pow5mult+0x84>
 800df0e:	4639      	mov	r1, r7
 800df10:	4622      	mov	r2, r4
 800df12:	4630      	mov	r0, r6
 800df14:	f7ff ff1a 	bl	800dd4c <__multiply>
 800df18:	4639      	mov	r1, r7
 800df1a:	4680      	mov	r8, r0
 800df1c:	4630      	mov	r0, r6
 800df1e:	f7ff fe47 	bl	800dbb0 <_Bfree>
 800df22:	4647      	mov	r7, r8
 800df24:	106d      	asrs	r5, r5, #1
 800df26:	d00b      	beq.n	800df40 <__pow5mult+0xa0>
 800df28:	6820      	ldr	r0, [r4, #0]
 800df2a:	b938      	cbnz	r0, 800df3c <__pow5mult+0x9c>
 800df2c:	4622      	mov	r2, r4
 800df2e:	4621      	mov	r1, r4
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff ff0b 	bl	800dd4c <__multiply>
 800df36:	6020      	str	r0, [r4, #0]
 800df38:	f8c0 9000 	str.w	r9, [r0]
 800df3c:	4604      	mov	r4, r0
 800df3e:	e7e4      	b.n	800df0a <__pow5mult+0x6a>
 800df40:	4638      	mov	r0, r7
 800df42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df46:	bf00      	nop
 800df48:	080103b0 	.word	0x080103b0
 800df4c:	080101dd 	.word	0x080101dd
 800df50:	08010260 	.word	0x08010260

0800df54 <__lshift>:
 800df54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df58:	460c      	mov	r4, r1
 800df5a:	6849      	ldr	r1, [r1, #4]
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df62:	68a3      	ldr	r3, [r4, #8]
 800df64:	4607      	mov	r7, r0
 800df66:	4691      	mov	r9, r2
 800df68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df6c:	f108 0601 	add.w	r6, r8, #1
 800df70:	42b3      	cmp	r3, r6
 800df72:	db0b      	blt.n	800df8c <__lshift+0x38>
 800df74:	4638      	mov	r0, r7
 800df76:	f7ff fddb 	bl	800db30 <_Balloc>
 800df7a:	4605      	mov	r5, r0
 800df7c:	b948      	cbnz	r0, 800df92 <__lshift+0x3e>
 800df7e:	4602      	mov	r2, r0
 800df80:	4b2a      	ldr	r3, [pc, #168]	; (800e02c <__lshift+0xd8>)
 800df82:	482b      	ldr	r0, [pc, #172]	; (800e030 <__lshift+0xdc>)
 800df84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df88:	f000 fbb8 	bl	800e6fc <__assert_func>
 800df8c:	3101      	adds	r1, #1
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	e7ee      	b.n	800df70 <__lshift+0x1c>
 800df92:	2300      	movs	r3, #0
 800df94:	f100 0114 	add.w	r1, r0, #20
 800df98:	f100 0210 	add.w	r2, r0, #16
 800df9c:	4618      	mov	r0, r3
 800df9e:	4553      	cmp	r3, sl
 800dfa0:	db37      	blt.n	800e012 <__lshift+0xbe>
 800dfa2:	6920      	ldr	r0, [r4, #16]
 800dfa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfa8:	f104 0314 	add.w	r3, r4, #20
 800dfac:	f019 091f 	ands.w	r9, r9, #31
 800dfb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dfb8:	d02f      	beq.n	800e01a <__lshift+0xc6>
 800dfba:	f1c9 0e20 	rsb	lr, r9, #32
 800dfbe:	468a      	mov	sl, r1
 800dfc0:	f04f 0c00 	mov.w	ip, #0
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	fa02 f209 	lsl.w	r2, r2, r9
 800dfca:	ea42 020c 	orr.w	r2, r2, ip
 800dfce:	f84a 2b04 	str.w	r2, [sl], #4
 800dfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfd6:	4298      	cmp	r0, r3
 800dfd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dfdc:	d8f2      	bhi.n	800dfc4 <__lshift+0x70>
 800dfde:	1b03      	subs	r3, r0, r4
 800dfe0:	3b15      	subs	r3, #21
 800dfe2:	f023 0303 	bic.w	r3, r3, #3
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	f104 0215 	add.w	r2, r4, #21
 800dfec:	4290      	cmp	r0, r2
 800dfee:	bf38      	it	cc
 800dff0:	2304      	movcc	r3, #4
 800dff2:	f841 c003 	str.w	ip, [r1, r3]
 800dff6:	f1bc 0f00 	cmp.w	ip, #0
 800dffa:	d001      	beq.n	800e000 <__lshift+0xac>
 800dffc:	f108 0602 	add.w	r6, r8, #2
 800e000:	3e01      	subs	r6, #1
 800e002:	4638      	mov	r0, r7
 800e004:	612e      	str	r6, [r5, #16]
 800e006:	4621      	mov	r1, r4
 800e008:	f7ff fdd2 	bl	800dbb0 <_Bfree>
 800e00c:	4628      	mov	r0, r5
 800e00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e012:	f842 0f04 	str.w	r0, [r2, #4]!
 800e016:	3301      	adds	r3, #1
 800e018:	e7c1      	b.n	800df9e <__lshift+0x4a>
 800e01a:	3904      	subs	r1, #4
 800e01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e020:	f841 2f04 	str.w	r2, [r1, #4]!
 800e024:	4298      	cmp	r0, r3
 800e026:	d8f9      	bhi.n	800e01c <__lshift+0xc8>
 800e028:	e7ea      	b.n	800e000 <__lshift+0xac>
 800e02a:	bf00      	nop
 800e02c:	0801024f 	.word	0x0801024f
 800e030:	08010260 	.word	0x08010260

0800e034 <__mcmp>:
 800e034:	b530      	push	{r4, r5, lr}
 800e036:	6902      	ldr	r2, [r0, #16]
 800e038:	690c      	ldr	r4, [r1, #16]
 800e03a:	1b12      	subs	r2, r2, r4
 800e03c:	d10e      	bne.n	800e05c <__mcmp+0x28>
 800e03e:	f100 0314 	add.w	r3, r0, #20
 800e042:	3114      	adds	r1, #20
 800e044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e04c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e054:	42a5      	cmp	r5, r4
 800e056:	d003      	beq.n	800e060 <__mcmp+0x2c>
 800e058:	d305      	bcc.n	800e066 <__mcmp+0x32>
 800e05a:	2201      	movs	r2, #1
 800e05c:	4610      	mov	r0, r2
 800e05e:	bd30      	pop	{r4, r5, pc}
 800e060:	4283      	cmp	r3, r0
 800e062:	d3f3      	bcc.n	800e04c <__mcmp+0x18>
 800e064:	e7fa      	b.n	800e05c <__mcmp+0x28>
 800e066:	f04f 32ff 	mov.w	r2, #4294967295
 800e06a:	e7f7      	b.n	800e05c <__mcmp+0x28>

0800e06c <__mdiff>:
 800e06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	460c      	mov	r4, r1
 800e072:	4606      	mov	r6, r0
 800e074:	4611      	mov	r1, r2
 800e076:	4620      	mov	r0, r4
 800e078:	4690      	mov	r8, r2
 800e07a:	f7ff ffdb 	bl	800e034 <__mcmp>
 800e07e:	1e05      	subs	r5, r0, #0
 800e080:	d110      	bne.n	800e0a4 <__mdiff+0x38>
 800e082:	4629      	mov	r1, r5
 800e084:	4630      	mov	r0, r6
 800e086:	f7ff fd53 	bl	800db30 <_Balloc>
 800e08a:	b930      	cbnz	r0, 800e09a <__mdiff+0x2e>
 800e08c:	4b3a      	ldr	r3, [pc, #232]	; (800e178 <__mdiff+0x10c>)
 800e08e:	4602      	mov	r2, r0
 800e090:	f240 2132 	movw	r1, #562	; 0x232
 800e094:	4839      	ldr	r0, [pc, #228]	; (800e17c <__mdiff+0x110>)
 800e096:	f000 fb31 	bl	800e6fc <__assert_func>
 800e09a:	2301      	movs	r3, #1
 800e09c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e0a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a4:	bfa4      	itt	ge
 800e0a6:	4643      	movge	r3, r8
 800e0a8:	46a0      	movge	r8, r4
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e0b0:	bfa6      	itte	ge
 800e0b2:	461c      	movge	r4, r3
 800e0b4:	2500      	movge	r5, #0
 800e0b6:	2501      	movlt	r5, #1
 800e0b8:	f7ff fd3a 	bl	800db30 <_Balloc>
 800e0bc:	b920      	cbnz	r0, 800e0c8 <__mdiff+0x5c>
 800e0be:	4b2e      	ldr	r3, [pc, #184]	; (800e178 <__mdiff+0x10c>)
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e0c6:	e7e5      	b.n	800e094 <__mdiff+0x28>
 800e0c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e0cc:	6926      	ldr	r6, [r4, #16]
 800e0ce:	60c5      	str	r5, [r0, #12]
 800e0d0:	f104 0914 	add.w	r9, r4, #20
 800e0d4:	f108 0514 	add.w	r5, r8, #20
 800e0d8:	f100 0e14 	add.w	lr, r0, #20
 800e0dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e0e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e0e4:	f108 0210 	add.w	r2, r8, #16
 800e0e8:	46f2      	mov	sl, lr
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e0f4:	fa1f f883 	uxth.w	r8, r3
 800e0f8:	fa11 f18b 	uxtah	r1, r1, fp
 800e0fc:	0c1b      	lsrs	r3, r3, #16
 800e0fe:	eba1 0808 	sub.w	r8, r1, r8
 800e102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e10a:	fa1f f888 	uxth.w	r8, r8
 800e10e:	1419      	asrs	r1, r3, #16
 800e110:	454e      	cmp	r6, r9
 800e112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e116:	f84a 3b04 	str.w	r3, [sl], #4
 800e11a:	d8e7      	bhi.n	800e0ec <__mdiff+0x80>
 800e11c:	1b33      	subs	r3, r6, r4
 800e11e:	3b15      	subs	r3, #21
 800e120:	f023 0303 	bic.w	r3, r3, #3
 800e124:	3304      	adds	r3, #4
 800e126:	3415      	adds	r4, #21
 800e128:	42a6      	cmp	r6, r4
 800e12a:	bf38      	it	cc
 800e12c:	2304      	movcc	r3, #4
 800e12e:	441d      	add	r5, r3
 800e130:	4473      	add	r3, lr
 800e132:	469e      	mov	lr, r3
 800e134:	462e      	mov	r6, r5
 800e136:	4566      	cmp	r6, ip
 800e138:	d30e      	bcc.n	800e158 <__mdiff+0xec>
 800e13a:	f10c 0203 	add.w	r2, ip, #3
 800e13e:	1b52      	subs	r2, r2, r5
 800e140:	f022 0203 	bic.w	r2, r2, #3
 800e144:	3d03      	subs	r5, #3
 800e146:	45ac      	cmp	ip, r5
 800e148:	bf38      	it	cc
 800e14a:	2200      	movcc	r2, #0
 800e14c:	441a      	add	r2, r3
 800e14e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e152:	b17b      	cbz	r3, 800e174 <__mdiff+0x108>
 800e154:	6107      	str	r7, [r0, #16]
 800e156:	e7a3      	b.n	800e0a0 <__mdiff+0x34>
 800e158:	f856 8b04 	ldr.w	r8, [r6], #4
 800e15c:	fa11 f288 	uxtah	r2, r1, r8
 800e160:	1414      	asrs	r4, r2, #16
 800e162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e166:	b292      	uxth	r2, r2
 800e168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e16c:	f84e 2b04 	str.w	r2, [lr], #4
 800e170:	1421      	asrs	r1, r4, #16
 800e172:	e7e0      	b.n	800e136 <__mdiff+0xca>
 800e174:	3f01      	subs	r7, #1
 800e176:	e7ea      	b.n	800e14e <__mdiff+0xe2>
 800e178:	0801024f 	.word	0x0801024f
 800e17c:	08010260 	.word	0x08010260

0800e180 <__d2b>:
 800e180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e184:	4689      	mov	r9, r1
 800e186:	2101      	movs	r1, #1
 800e188:	ec57 6b10 	vmov	r6, r7, d0
 800e18c:	4690      	mov	r8, r2
 800e18e:	f7ff fccf 	bl	800db30 <_Balloc>
 800e192:	4604      	mov	r4, r0
 800e194:	b930      	cbnz	r0, 800e1a4 <__d2b+0x24>
 800e196:	4602      	mov	r2, r0
 800e198:	4b25      	ldr	r3, [pc, #148]	; (800e230 <__d2b+0xb0>)
 800e19a:	4826      	ldr	r0, [pc, #152]	; (800e234 <__d2b+0xb4>)
 800e19c:	f240 310a 	movw	r1, #778	; 0x30a
 800e1a0:	f000 faac 	bl	800e6fc <__assert_func>
 800e1a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e1a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1ac:	bb35      	cbnz	r5, 800e1fc <__d2b+0x7c>
 800e1ae:	2e00      	cmp	r6, #0
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	d028      	beq.n	800e206 <__d2b+0x86>
 800e1b4:	4668      	mov	r0, sp
 800e1b6:	9600      	str	r6, [sp, #0]
 800e1b8:	f7ff fd82 	bl	800dcc0 <__lo0bits>
 800e1bc:	9900      	ldr	r1, [sp, #0]
 800e1be:	b300      	cbz	r0, 800e202 <__d2b+0x82>
 800e1c0:	9a01      	ldr	r2, [sp, #4]
 800e1c2:	f1c0 0320 	rsb	r3, r0, #32
 800e1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ca:	430b      	orrs	r3, r1
 800e1cc:	40c2      	lsrs	r2, r0
 800e1ce:	6163      	str	r3, [r4, #20]
 800e1d0:	9201      	str	r2, [sp, #4]
 800e1d2:	9b01      	ldr	r3, [sp, #4]
 800e1d4:	61a3      	str	r3, [r4, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	bf14      	ite	ne
 800e1da:	2202      	movne	r2, #2
 800e1dc:	2201      	moveq	r2, #1
 800e1de:	6122      	str	r2, [r4, #16]
 800e1e0:	b1d5      	cbz	r5, 800e218 <__d2b+0x98>
 800e1e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1e6:	4405      	add	r5, r0
 800e1e8:	f8c9 5000 	str.w	r5, [r9]
 800e1ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1f0:	f8c8 0000 	str.w	r0, [r8]
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	b003      	add	sp, #12
 800e1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e200:	e7d5      	b.n	800e1ae <__d2b+0x2e>
 800e202:	6161      	str	r1, [r4, #20]
 800e204:	e7e5      	b.n	800e1d2 <__d2b+0x52>
 800e206:	a801      	add	r0, sp, #4
 800e208:	f7ff fd5a 	bl	800dcc0 <__lo0bits>
 800e20c:	9b01      	ldr	r3, [sp, #4]
 800e20e:	6163      	str	r3, [r4, #20]
 800e210:	2201      	movs	r2, #1
 800e212:	6122      	str	r2, [r4, #16]
 800e214:	3020      	adds	r0, #32
 800e216:	e7e3      	b.n	800e1e0 <__d2b+0x60>
 800e218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e21c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e220:	f8c9 0000 	str.w	r0, [r9]
 800e224:	6918      	ldr	r0, [r3, #16]
 800e226:	f7ff fd2b 	bl	800dc80 <__hi0bits>
 800e22a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e22e:	e7df      	b.n	800e1f0 <__d2b+0x70>
 800e230:	0801024f 	.word	0x0801024f
 800e234:	08010260 	.word	0x08010260

0800e238 <_calloc_r>:
 800e238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e23a:	fba1 2402 	umull	r2, r4, r1, r2
 800e23e:	b94c      	cbnz	r4, 800e254 <_calloc_r+0x1c>
 800e240:	4611      	mov	r1, r2
 800e242:	9201      	str	r2, [sp, #4]
 800e244:	f000 f87a 	bl	800e33c <_malloc_r>
 800e248:	9a01      	ldr	r2, [sp, #4]
 800e24a:	4605      	mov	r5, r0
 800e24c:	b930      	cbnz	r0, 800e25c <_calloc_r+0x24>
 800e24e:	4628      	mov	r0, r5
 800e250:	b003      	add	sp, #12
 800e252:	bd30      	pop	{r4, r5, pc}
 800e254:	220c      	movs	r2, #12
 800e256:	6002      	str	r2, [r0, #0]
 800e258:	2500      	movs	r5, #0
 800e25a:	e7f8      	b.n	800e24e <_calloc_r+0x16>
 800e25c:	4621      	mov	r1, r4
 800e25e:	f7fe f93f 	bl	800c4e0 <memset>
 800e262:	e7f4      	b.n	800e24e <_calloc_r+0x16>

0800e264 <_free_r>:
 800e264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e266:	2900      	cmp	r1, #0
 800e268:	d044      	beq.n	800e2f4 <_free_r+0x90>
 800e26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e26e:	9001      	str	r0, [sp, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	f1a1 0404 	sub.w	r4, r1, #4
 800e276:	bfb8      	it	lt
 800e278:	18e4      	addlt	r4, r4, r3
 800e27a:	f000 fa9b 	bl	800e7b4 <__malloc_lock>
 800e27e:	4a1e      	ldr	r2, [pc, #120]	; (800e2f8 <_free_r+0x94>)
 800e280:	9801      	ldr	r0, [sp, #4]
 800e282:	6813      	ldr	r3, [r2, #0]
 800e284:	b933      	cbnz	r3, 800e294 <_free_r+0x30>
 800e286:	6063      	str	r3, [r4, #4]
 800e288:	6014      	str	r4, [r2, #0]
 800e28a:	b003      	add	sp, #12
 800e28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e290:	f000 ba96 	b.w	800e7c0 <__malloc_unlock>
 800e294:	42a3      	cmp	r3, r4
 800e296:	d908      	bls.n	800e2aa <_free_r+0x46>
 800e298:	6825      	ldr	r5, [r4, #0]
 800e29a:	1961      	adds	r1, r4, r5
 800e29c:	428b      	cmp	r3, r1
 800e29e:	bf01      	itttt	eq
 800e2a0:	6819      	ldreq	r1, [r3, #0]
 800e2a2:	685b      	ldreq	r3, [r3, #4]
 800e2a4:	1949      	addeq	r1, r1, r5
 800e2a6:	6021      	streq	r1, [r4, #0]
 800e2a8:	e7ed      	b.n	800e286 <_free_r+0x22>
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	b10b      	cbz	r3, 800e2b4 <_free_r+0x50>
 800e2b0:	42a3      	cmp	r3, r4
 800e2b2:	d9fa      	bls.n	800e2aa <_free_r+0x46>
 800e2b4:	6811      	ldr	r1, [r2, #0]
 800e2b6:	1855      	adds	r5, r2, r1
 800e2b8:	42a5      	cmp	r5, r4
 800e2ba:	d10b      	bne.n	800e2d4 <_free_r+0x70>
 800e2bc:	6824      	ldr	r4, [r4, #0]
 800e2be:	4421      	add	r1, r4
 800e2c0:	1854      	adds	r4, r2, r1
 800e2c2:	42a3      	cmp	r3, r4
 800e2c4:	6011      	str	r1, [r2, #0]
 800e2c6:	d1e0      	bne.n	800e28a <_free_r+0x26>
 800e2c8:	681c      	ldr	r4, [r3, #0]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	6053      	str	r3, [r2, #4]
 800e2ce:	4421      	add	r1, r4
 800e2d0:	6011      	str	r1, [r2, #0]
 800e2d2:	e7da      	b.n	800e28a <_free_r+0x26>
 800e2d4:	d902      	bls.n	800e2dc <_free_r+0x78>
 800e2d6:	230c      	movs	r3, #12
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	e7d6      	b.n	800e28a <_free_r+0x26>
 800e2dc:	6825      	ldr	r5, [r4, #0]
 800e2de:	1961      	adds	r1, r4, r5
 800e2e0:	428b      	cmp	r3, r1
 800e2e2:	bf04      	itt	eq
 800e2e4:	6819      	ldreq	r1, [r3, #0]
 800e2e6:	685b      	ldreq	r3, [r3, #4]
 800e2e8:	6063      	str	r3, [r4, #4]
 800e2ea:	bf04      	itt	eq
 800e2ec:	1949      	addeq	r1, r1, r5
 800e2ee:	6021      	streq	r1, [r4, #0]
 800e2f0:	6054      	str	r4, [r2, #4]
 800e2f2:	e7ca      	b.n	800e28a <_free_r+0x26>
 800e2f4:	b003      	add	sp, #12
 800e2f6:	bd30      	pop	{r4, r5, pc}
 800e2f8:	2000079c 	.word	0x2000079c

0800e2fc <sbrk_aligned>:
 800e2fc:	b570      	push	{r4, r5, r6, lr}
 800e2fe:	4e0e      	ldr	r6, [pc, #56]	; (800e338 <sbrk_aligned+0x3c>)
 800e300:	460c      	mov	r4, r1
 800e302:	6831      	ldr	r1, [r6, #0]
 800e304:	4605      	mov	r5, r0
 800e306:	b911      	cbnz	r1, 800e30e <sbrk_aligned+0x12>
 800e308:	f000 f9e8 	bl	800e6dc <_sbrk_r>
 800e30c:	6030      	str	r0, [r6, #0]
 800e30e:	4621      	mov	r1, r4
 800e310:	4628      	mov	r0, r5
 800e312:	f000 f9e3 	bl	800e6dc <_sbrk_r>
 800e316:	1c43      	adds	r3, r0, #1
 800e318:	d00a      	beq.n	800e330 <sbrk_aligned+0x34>
 800e31a:	1cc4      	adds	r4, r0, #3
 800e31c:	f024 0403 	bic.w	r4, r4, #3
 800e320:	42a0      	cmp	r0, r4
 800e322:	d007      	beq.n	800e334 <sbrk_aligned+0x38>
 800e324:	1a21      	subs	r1, r4, r0
 800e326:	4628      	mov	r0, r5
 800e328:	f000 f9d8 	bl	800e6dc <_sbrk_r>
 800e32c:	3001      	adds	r0, #1
 800e32e:	d101      	bne.n	800e334 <sbrk_aligned+0x38>
 800e330:	f04f 34ff 	mov.w	r4, #4294967295
 800e334:	4620      	mov	r0, r4
 800e336:	bd70      	pop	{r4, r5, r6, pc}
 800e338:	200007a0 	.word	0x200007a0

0800e33c <_malloc_r>:
 800e33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e340:	1ccd      	adds	r5, r1, #3
 800e342:	f025 0503 	bic.w	r5, r5, #3
 800e346:	3508      	adds	r5, #8
 800e348:	2d0c      	cmp	r5, #12
 800e34a:	bf38      	it	cc
 800e34c:	250c      	movcc	r5, #12
 800e34e:	2d00      	cmp	r5, #0
 800e350:	4607      	mov	r7, r0
 800e352:	db01      	blt.n	800e358 <_malloc_r+0x1c>
 800e354:	42a9      	cmp	r1, r5
 800e356:	d905      	bls.n	800e364 <_malloc_r+0x28>
 800e358:	230c      	movs	r3, #12
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	2600      	movs	r6, #0
 800e35e:	4630      	mov	r0, r6
 800e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e364:	4e2e      	ldr	r6, [pc, #184]	; (800e420 <_malloc_r+0xe4>)
 800e366:	f000 fa25 	bl	800e7b4 <__malloc_lock>
 800e36a:	6833      	ldr	r3, [r6, #0]
 800e36c:	461c      	mov	r4, r3
 800e36e:	bb34      	cbnz	r4, 800e3be <_malloc_r+0x82>
 800e370:	4629      	mov	r1, r5
 800e372:	4638      	mov	r0, r7
 800e374:	f7ff ffc2 	bl	800e2fc <sbrk_aligned>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	4604      	mov	r4, r0
 800e37c:	d14d      	bne.n	800e41a <_malloc_r+0xde>
 800e37e:	6834      	ldr	r4, [r6, #0]
 800e380:	4626      	mov	r6, r4
 800e382:	2e00      	cmp	r6, #0
 800e384:	d140      	bne.n	800e408 <_malloc_r+0xcc>
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	4631      	mov	r1, r6
 800e38a:	4638      	mov	r0, r7
 800e38c:	eb04 0803 	add.w	r8, r4, r3
 800e390:	f000 f9a4 	bl	800e6dc <_sbrk_r>
 800e394:	4580      	cmp	r8, r0
 800e396:	d13a      	bne.n	800e40e <_malloc_r+0xd2>
 800e398:	6821      	ldr	r1, [r4, #0]
 800e39a:	3503      	adds	r5, #3
 800e39c:	1a6d      	subs	r5, r5, r1
 800e39e:	f025 0503 	bic.w	r5, r5, #3
 800e3a2:	3508      	adds	r5, #8
 800e3a4:	2d0c      	cmp	r5, #12
 800e3a6:	bf38      	it	cc
 800e3a8:	250c      	movcc	r5, #12
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	f7ff ffa5 	bl	800e2fc <sbrk_aligned>
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d02b      	beq.n	800e40e <_malloc_r+0xd2>
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	442b      	add	r3, r5
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	e00e      	b.n	800e3dc <_malloc_r+0xa0>
 800e3be:	6822      	ldr	r2, [r4, #0]
 800e3c0:	1b52      	subs	r2, r2, r5
 800e3c2:	d41e      	bmi.n	800e402 <_malloc_r+0xc6>
 800e3c4:	2a0b      	cmp	r2, #11
 800e3c6:	d916      	bls.n	800e3f6 <_malloc_r+0xba>
 800e3c8:	1961      	adds	r1, r4, r5
 800e3ca:	42a3      	cmp	r3, r4
 800e3cc:	6025      	str	r5, [r4, #0]
 800e3ce:	bf18      	it	ne
 800e3d0:	6059      	strne	r1, [r3, #4]
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	bf08      	it	eq
 800e3d6:	6031      	streq	r1, [r6, #0]
 800e3d8:	5162      	str	r2, [r4, r5]
 800e3da:	604b      	str	r3, [r1, #4]
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f104 060b 	add.w	r6, r4, #11
 800e3e2:	f000 f9ed 	bl	800e7c0 <__malloc_unlock>
 800e3e6:	f026 0607 	bic.w	r6, r6, #7
 800e3ea:	1d23      	adds	r3, r4, #4
 800e3ec:	1af2      	subs	r2, r6, r3
 800e3ee:	d0b6      	beq.n	800e35e <_malloc_r+0x22>
 800e3f0:	1b9b      	subs	r3, r3, r6
 800e3f2:	50a3      	str	r3, [r4, r2]
 800e3f4:	e7b3      	b.n	800e35e <_malloc_r+0x22>
 800e3f6:	6862      	ldr	r2, [r4, #4]
 800e3f8:	42a3      	cmp	r3, r4
 800e3fa:	bf0c      	ite	eq
 800e3fc:	6032      	streq	r2, [r6, #0]
 800e3fe:	605a      	strne	r2, [r3, #4]
 800e400:	e7ec      	b.n	800e3dc <_malloc_r+0xa0>
 800e402:	4623      	mov	r3, r4
 800e404:	6864      	ldr	r4, [r4, #4]
 800e406:	e7b2      	b.n	800e36e <_malloc_r+0x32>
 800e408:	4634      	mov	r4, r6
 800e40a:	6876      	ldr	r6, [r6, #4]
 800e40c:	e7b9      	b.n	800e382 <_malloc_r+0x46>
 800e40e:	230c      	movs	r3, #12
 800e410:	603b      	str	r3, [r7, #0]
 800e412:	4638      	mov	r0, r7
 800e414:	f000 f9d4 	bl	800e7c0 <__malloc_unlock>
 800e418:	e7a1      	b.n	800e35e <_malloc_r+0x22>
 800e41a:	6025      	str	r5, [r4, #0]
 800e41c:	e7de      	b.n	800e3dc <_malloc_r+0xa0>
 800e41e:	bf00      	nop
 800e420:	2000079c 	.word	0x2000079c

0800e424 <__ssputs_r>:
 800e424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e428:	688e      	ldr	r6, [r1, #8]
 800e42a:	429e      	cmp	r6, r3
 800e42c:	4682      	mov	sl, r0
 800e42e:	460c      	mov	r4, r1
 800e430:	4690      	mov	r8, r2
 800e432:	461f      	mov	r7, r3
 800e434:	d838      	bhi.n	800e4a8 <__ssputs_r+0x84>
 800e436:	898a      	ldrh	r2, [r1, #12]
 800e438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e43c:	d032      	beq.n	800e4a4 <__ssputs_r+0x80>
 800e43e:	6825      	ldr	r5, [r4, #0]
 800e440:	6909      	ldr	r1, [r1, #16]
 800e442:	eba5 0901 	sub.w	r9, r5, r1
 800e446:	6965      	ldr	r5, [r4, #20]
 800e448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e44c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e450:	3301      	adds	r3, #1
 800e452:	444b      	add	r3, r9
 800e454:	106d      	asrs	r5, r5, #1
 800e456:	429d      	cmp	r5, r3
 800e458:	bf38      	it	cc
 800e45a:	461d      	movcc	r5, r3
 800e45c:	0553      	lsls	r3, r2, #21
 800e45e:	d531      	bpl.n	800e4c4 <__ssputs_r+0xa0>
 800e460:	4629      	mov	r1, r5
 800e462:	f7ff ff6b 	bl	800e33c <_malloc_r>
 800e466:	4606      	mov	r6, r0
 800e468:	b950      	cbnz	r0, 800e480 <__ssputs_r+0x5c>
 800e46a:	230c      	movs	r3, #12
 800e46c:	f8ca 3000 	str.w	r3, [sl]
 800e470:	89a3      	ldrh	r3, [r4, #12]
 800e472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e476:	81a3      	strh	r3, [r4, #12]
 800e478:	f04f 30ff 	mov.w	r0, #4294967295
 800e47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e480:	6921      	ldr	r1, [r4, #16]
 800e482:	464a      	mov	r2, r9
 800e484:	f7ff fb46 	bl	800db14 <memcpy>
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	6126      	str	r6, [r4, #16]
 800e496:	6165      	str	r5, [r4, #20]
 800e498:	444e      	add	r6, r9
 800e49a:	eba5 0509 	sub.w	r5, r5, r9
 800e49e:	6026      	str	r6, [r4, #0]
 800e4a0:	60a5      	str	r5, [r4, #8]
 800e4a2:	463e      	mov	r6, r7
 800e4a4:	42be      	cmp	r6, r7
 800e4a6:	d900      	bls.n	800e4aa <__ssputs_r+0x86>
 800e4a8:	463e      	mov	r6, r7
 800e4aa:	6820      	ldr	r0, [r4, #0]
 800e4ac:	4632      	mov	r2, r6
 800e4ae:	4641      	mov	r1, r8
 800e4b0:	f000 f966 	bl	800e780 <memmove>
 800e4b4:	68a3      	ldr	r3, [r4, #8]
 800e4b6:	1b9b      	subs	r3, r3, r6
 800e4b8:	60a3      	str	r3, [r4, #8]
 800e4ba:	6823      	ldr	r3, [r4, #0]
 800e4bc:	4433      	add	r3, r6
 800e4be:	6023      	str	r3, [r4, #0]
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	e7db      	b.n	800e47c <__ssputs_r+0x58>
 800e4c4:	462a      	mov	r2, r5
 800e4c6:	f000 f981 	bl	800e7cc <_realloc_r>
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d1e1      	bne.n	800e494 <__ssputs_r+0x70>
 800e4d0:	6921      	ldr	r1, [r4, #16]
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	f7ff fec6 	bl	800e264 <_free_r>
 800e4d8:	e7c7      	b.n	800e46a <__ssputs_r+0x46>
	...

0800e4dc <_svfiprintf_r>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	4698      	mov	r8, r3
 800e4e2:	898b      	ldrh	r3, [r1, #12]
 800e4e4:	061b      	lsls	r3, r3, #24
 800e4e6:	b09d      	sub	sp, #116	; 0x74
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	460d      	mov	r5, r1
 800e4ec:	4614      	mov	r4, r2
 800e4ee:	d50e      	bpl.n	800e50e <_svfiprintf_r+0x32>
 800e4f0:	690b      	ldr	r3, [r1, #16]
 800e4f2:	b963      	cbnz	r3, 800e50e <_svfiprintf_r+0x32>
 800e4f4:	2140      	movs	r1, #64	; 0x40
 800e4f6:	f7ff ff21 	bl	800e33c <_malloc_r>
 800e4fa:	6028      	str	r0, [r5, #0]
 800e4fc:	6128      	str	r0, [r5, #16]
 800e4fe:	b920      	cbnz	r0, 800e50a <_svfiprintf_r+0x2e>
 800e500:	230c      	movs	r3, #12
 800e502:	603b      	str	r3, [r7, #0]
 800e504:	f04f 30ff 	mov.w	r0, #4294967295
 800e508:	e0d1      	b.n	800e6ae <_svfiprintf_r+0x1d2>
 800e50a:	2340      	movs	r3, #64	; 0x40
 800e50c:	616b      	str	r3, [r5, #20]
 800e50e:	2300      	movs	r3, #0
 800e510:	9309      	str	r3, [sp, #36]	; 0x24
 800e512:	2320      	movs	r3, #32
 800e514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e518:	f8cd 800c 	str.w	r8, [sp, #12]
 800e51c:	2330      	movs	r3, #48	; 0x30
 800e51e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e6c8 <_svfiprintf_r+0x1ec>
 800e522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e526:	f04f 0901 	mov.w	r9, #1
 800e52a:	4623      	mov	r3, r4
 800e52c:	469a      	mov	sl, r3
 800e52e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e532:	b10a      	cbz	r2, 800e538 <_svfiprintf_r+0x5c>
 800e534:	2a25      	cmp	r2, #37	; 0x25
 800e536:	d1f9      	bne.n	800e52c <_svfiprintf_r+0x50>
 800e538:	ebba 0b04 	subs.w	fp, sl, r4
 800e53c:	d00b      	beq.n	800e556 <_svfiprintf_r+0x7a>
 800e53e:	465b      	mov	r3, fp
 800e540:	4622      	mov	r2, r4
 800e542:	4629      	mov	r1, r5
 800e544:	4638      	mov	r0, r7
 800e546:	f7ff ff6d 	bl	800e424 <__ssputs_r>
 800e54a:	3001      	adds	r0, #1
 800e54c:	f000 80aa 	beq.w	800e6a4 <_svfiprintf_r+0x1c8>
 800e550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e552:	445a      	add	r2, fp
 800e554:	9209      	str	r2, [sp, #36]	; 0x24
 800e556:	f89a 3000 	ldrb.w	r3, [sl]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 80a2 	beq.w	800e6a4 <_svfiprintf_r+0x1c8>
 800e560:	2300      	movs	r3, #0
 800e562:	f04f 32ff 	mov.w	r2, #4294967295
 800e566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e56a:	f10a 0a01 	add.w	sl, sl, #1
 800e56e:	9304      	str	r3, [sp, #16]
 800e570:	9307      	str	r3, [sp, #28]
 800e572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e576:	931a      	str	r3, [sp, #104]	; 0x68
 800e578:	4654      	mov	r4, sl
 800e57a:	2205      	movs	r2, #5
 800e57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e580:	4851      	ldr	r0, [pc, #324]	; (800e6c8 <_svfiprintf_r+0x1ec>)
 800e582:	f7f1 fe55 	bl	8000230 <memchr>
 800e586:	9a04      	ldr	r2, [sp, #16]
 800e588:	b9d8      	cbnz	r0, 800e5c2 <_svfiprintf_r+0xe6>
 800e58a:	06d0      	lsls	r0, r2, #27
 800e58c:	bf44      	itt	mi
 800e58e:	2320      	movmi	r3, #32
 800e590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e594:	0711      	lsls	r1, r2, #28
 800e596:	bf44      	itt	mi
 800e598:	232b      	movmi	r3, #43	; 0x2b
 800e59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e59e:	f89a 3000 	ldrb.w	r3, [sl]
 800e5a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e5a4:	d015      	beq.n	800e5d2 <_svfiprintf_r+0xf6>
 800e5a6:	9a07      	ldr	r2, [sp, #28]
 800e5a8:	4654      	mov	r4, sl
 800e5aa:	2000      	movs	r0, #0
 800e5ac:	f04f 0c0a 	mov.w	ip, #10
 800e5b0:	4621      	mov	r1, r4
 800e5b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5b6:	3b30      	subs	r3, #48	; 0x30
 800e5b8:	2b09      	cmp	r3, #9
 800e5ba:	d94e      	bls.n	800e65a <_svfiprintf_r+0x17e>
 800e5bc:	b1b0      	cbz	r0, 800e5ec <_svfiprintf_r+0x110>
 800e5be:	9207      	str	r2, [sp, #28]
 800e5c0:	e014      	b.n	800e5ec <_svfiprintf_r+0x110>
 800e5c2:	eba0 0308 	sub.w	r3, r0, r8
 800e5c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	9304      	str	r3, [sp, #16]
 800e5ce:	46a2      	mov	sl, r4
 800e5d0:	e7d2      	b.n	800e578 <_svfiprintf_r+0x9c>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	1d19      	adds	r1, r3, #4
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	9103      	str	r1, [sp, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bfbb      	ittet	lt
 800e5de:	425b      	neglt	r3, r3
 800e5e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e5e4:	9307      	strge	r3, [sp, #28]
 800e5e6:	9307      	strlt	r3, [sp, #28]
 800e5e8:	bfb8      	it	lt
 800e5ea:	9204      	strlt	r2, [sp, #16]
 800e5ec:	7823      	ldrb	r3, [r4, #0]
 800e5ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e5f0:	d10c      	bne.n	800e60c <_svfiprintf_r+0x130>
 800e5f2:	7863      	ldrb	r3, [r4, #1]
 800e5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5f6:	d135      	bne.n	800e664 <_svfiprintf_r+0x188>
 800e5f8:	9b03      	ldr	r3, [sp, #12]
 800e5fa:	1d1a      	adds	r2, r3, #4
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	9203      	str	r2, [sp, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	bfb8      	it	lt
 800e604:	f04f 33ff 	movlt.w	r3, #4294967295
 800e608:	3402      	adds	r4, #2
 800e60a:	9305      	str	r3, [sp, #20]
 800e60c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6d8 <_svfiprintf_r+0x1fc>
 800e610:	7821      	ldrb	r1, [r4, #0]
 800e612:	2203      	movs	r2, #3
 800e614:	4650      	mov	r0, sl
 800e616:	f7f1 fe0b 	bl	8000230 <memchr>
 800e61a:	b140      	cbz	r0, 800e62e <_svfiprintf_r+0x152>
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	eba0 000a 	sub.w	r0, r0, sl
 800e622:	fa03 f000 	lsl.w	r0, r3, r0
 800e626:	9b04      	ldr	r3, [sp, #16]
 800e628:	4303      	orrs	r3, r0
 800e62a:	3401      	adds	r4, #1
 800e62c:	9304      	str	r3, [sp, #16]
 800e62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e632:	4826      	ldr	r0, [pc, #152]	; (800e6cc <_svfiprintf_r+0x1f0>)
 800e634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e638:	2206      	movs	r2, #6
 800e63a:	f7f1 fdf9 	bl	8000230 <memchr>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d038      	beq.n	800e6b4 <_svfiprintf_r+0x1d8>
 800e642:	4b23      	ldr	r3, [pc, #140]	; (800e6d0 <_svfiprintf_r+0x1f4>)
 800e644:	bb1b      	cbnz	r3, 800e68e <_svfiprintf_r+0x1b2>
 800e646:	9b03      	ldr	r3, [sp, #12]
 800e648:	3307      	adds	r3, #7
 800e64a:	f023 0307 	bic.w	r3, r3, #7
 800e64e:	3308      	adds	r3, #8
 800e650:	9303      	str	r3, [sp, #12]
 800e652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e654:	4433      	add	r3, r6
 800e656:	9309      	str	r3, [sp, #36]	; 0x24
 800e658:	e767      	b.n	800e52a <_svfiprintf_r+0x4e>
 800e65a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e65e:	460c      	mov	r4, r1
 800e660:	2001      	movs	r0, #1
 800e662:	e7a5      	b.n	800e5b0 <_svfiprintf_r+0xd4>
 800e664:	2300      	movs	r3, #0
 800e666:	3401      	adds	r4, #1
 800e668:	9305      	str	r3, [sp, #20]
 800e66a:	4619      	mov	r1, r3
 800e66c:	f04f 0c0a 	mov.w	ip, #10
 800e670:	4620      	mov	r0, r4
 800e672:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e676:	3a30      	subs	r2, #48	; 0x30
 800e678:	2a09      	cmp	r2, #9
 800e67a:	d903      	bls.n	800e684 <_svfiprintf_r+0x1a8>
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d0c5      	beq.n	800e60c <_svfiprintf_r+0x130>
 800e680:	9105      	str	r1, [sp, #20]
 800e682:	e7c3      	b.n	800e60c <_svfiprintf_r+0x130>
 800e684:	fb0c 2101 	mla	r1, ip, r1, r2
 800e688:	4604      	mov	r4, r0
 800e68a:	2301      	movs	r3, #1
 800e68c:	e7f0      	b.n	800e670 <_svfiprintf_r+0x194>
 800e68e:	ab03      	add	r3, sp, #12
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	462a      	mov	r2, r5
 800e694:	4b0f      	ldr	r3, [pc, #60]	; (800e6d4 <_svfiprintf_r+0x1f8>)
 800e696:	a904      	add	r1, sp, #16
 800e698:	4638      	mov	r0, r7
 800e69a:	f7fd ffc9 	bl	800c630 <_printf_float>
 800e69e:	1c42      	adds	r2, r0, #1
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	d1d6      	bne.n	800e652 <_svfiprintf_r+0x176>
 800e6a4:	89ab      	ldrh	r3, [r5, #12]
 800e6a6:	065b      	lsls	r3, r3, #25
 800e6a8:	f53f af2c 	bmi.w	800e504 <_svfiprintf_r+0x28>
 800e6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6ae:	b01d      	add	sp, #116	; 0x74
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	ab03      	add	r3, sp, #12
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	462a      	mov	r2, r5
 800e6ba:	4b06      	ldr	r3, [pc, #24]	; (800e6d4 <_svfiprintf_r+0x1f8>)
 800e6bc:	a904      	add	r1, sp, #16
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f7fe fa5a 	bl	800cb78 <_printf_i>
 800e6c4:	e7eb      	b.n	800e69e <_svfiprintf_r+0x1c2>
 800e6c6:	bf00      	nop
 800e6c8:	080103bc 	.word	0x080103bc
 800e6cc:	080103c6 	.word	0x080103c6
 800e6d0:	0800c631 	.word	0x0800c631
 800e6d4:	0800e425 	.word	0x0800e425
 800e6d8:	080103c2 	.word	0x080103c2

0800e6dc <_sbrk_r>:
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	4d06      	ldr	r5, [pc, #24]	; (800e6f8 <_sbrk_r+0x1c>)
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	4608      	mov	r0, r1
 800e6e6:	602b      	str	r3, [r5, #0]
 800e6e8:	f7f6 fdbc 	bl	8005264 <_sbrk>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d102      	bne.n	800e6f6 <_sbrk_r+0x1a>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	b103      	cbz	r3, 800e6f6 <_sbrk_r+0x1a>
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	200007a4 	.word	0x200007a4

0800e6fc <__assert_func>:
 800e6fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6fe:	4614      	mov	r4, r2
 800e700:	461a      	mov	r2, r3
 800e702:	4b09      	ldr	r3, [pc, #36]	; (800e728 <__assert_func+0x2c>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4605      	mov	r5, r0
 800e708:	68d8      	ldr	r0, [r3, #12]
 800e70a:	b14c      	cbz	r4, 800e720 <__assert_func+0x24>
 800e70c:	4b07      	ldr	r3, [pc, #28]	; (800e72c <__assert_func+0x30>)
 800e70e:	9100      	str	r1, [sp, #0]
 800e710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e714:	4906      	ldr	r1, [pc, #24]	; (800e730 <__assert_func+0x34>)
 800e716:	462b      	mov	r3, r5
 800e718:	f000 f80e 	bl	800e738 <fiprintf>
 800e71c:	f000 faac 	bl	800ec78 <abort>
 800e720:	4b04      	ldr	r3, [pc, #16]	; (800e734 <__assert_func+0x38>)
 800e722:	461c      	mov	r4, r3
 800e724:	e7f3      	b.n	800e70e <__assert_func+0x12>
 800e726:	bf00      	nop
 800e728:	2000002c 	.word	0x2000002c
 800e72c:	080103cd 	.word	0x080103cd
 800e730:	080103da 	.word	0x080103da
 800e734:	08010408 	.word	0x08010408

0800e738 <fiprintf>:
 800e738:	b40e      	push	{r1, r2, r3}
 800e73a:	b503      	push	{r0, r1, lr}
 800e73c:	4601      	mov	r1, r0
 800e73e:	ab03      	add	r3, sp, #12
 800e740:	4805      	ldr	r0, [pc, #20]	; (800e758 <fiprintf+0x20>)
 800e742:	f853 2b04 	ldr.w	r2, [r3], #4
 800e746:	6800      	ldr	r0, [r0, #0]
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	f000 f897 	bl	800e87c <_vfiprintf_r>
 800e74e:	b002      	add	sp, #8
 800e750:	f85d eb04 	ldr.w	lr, [sp], #4
 800e754:	b003      	add	sp, #12
 800e756:	4770      	bx	lr
 800e758:	2000002c 	.word	0x2000002c

0800e75c <__ascii_mbtowc>:
 800e75c:	b082      	sub	sp, #8
 800e75e:	b901      	cbnz	r1, 800e762 <__ascii_mbtowc+0x6>
 800e760:	a901      	add	r1, sp, #4
 800e762:	b142      	cbz	r2, 800e776 <__ascii_mbtowc+0x1a>
 800e764:	b14b      	cbz	r3, 800e77a <__ascii_mbtowc+0x1e>
 800e766:	7813      	ldrb	r3, [r2, #0]
 800e768:	600b      	str	r3, [r1, #0]
 800e76a:	7812      	ldrb	r2, [r2, #0]
 800e76c:	1e10      	subs	r0, r2, #0
 800e76e:	bf18      	it	ne
 800e770:	2001      	movne	r0, #1
 800e772:	b002      	add	sp, #8
 800e774:	4770      	bx	lr
 800e776:	4610      	mov	r0, r2
 800e778:	e7fb      	b.n	800e772 <__ascii_mbtowc+0x16>
 800e77a:	f06f 0001 	mvn.w	r0, #1
 800e77e:	e7f8      	b.n	800e772 <__ascii_mbtowc+0x16>

0800e780 <memmove>:
 800e780:	4288      	cmp	r0, r1
 800e782:	b510      	push	{r4, lr}
 800e784:	eb01 0402 	add.w	r4, r1, r2
 800e788:	d902      	bls.n	800e790 <memmove+0x10>
 800e78a:	4284      	cmp	r4, r0
 800e78c:	4623      	mov	r3, r4
 800e78e:	d807      	bhi.n	800e7a0 <memmove+0x20>
 800e790:	1e43      	subs	r3, r0, #1
 800e792:	42a1      	cmp	r1, r4
 800e794:	d008      	beq.n	800e7a8 <memmove+0x28>
 800e796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e79a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e79e:	e7f8      	b.n	800e792 <memmove+0x12>
 800e7a0:	4402      	add	r2, r0
 800e7a2:	4601      	mov	r1, r0
 800e7a4:	428a      	cmp	r2, r1
 800e7a6:	d100      	bne.n	800e7aa <memmove+0x2a>
 800e7a8:	bd10      	pop	{r4, pc}
 800e7aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7b2:	e7f7      	b.n	800e7a4 <memmove+0x24>

0800e7b4 <__malloc_lock>:
 800e7b4:	4801      	ldr	r0, [pc, #4]	; (800e7bc <__malloc_lock+0x8>)
 800e7b6:	f000 bc1f 	b.w	800eff8 <__retarget_lock_acquire_recursive>
 800e7ba:	bf00      	nop
 800e7bc:	200007a8 	.word	0x200007a8

0800e7c0 <__malloc_unlock>:
 800e7c0:	4801      	ldr	r0, [pc, #4]	; (800e7c8 <__malloc_unlock+0x8>)
 800e7c2:	f000 bc1a 	b.w	800effa <__retarget_lock_release_recursive>
 800e7c6:	bf00      	nop
 800e7c8:	200007a8 	.word	0x200007a8

0800e7cc <_realloc_r>:
 800e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	4680      	mov	r8, r0
 800e7d2:	4614      	mov	r4, r2
 800e7d4:	460e      	mov	r6, r1
 800e7d6:	b921      	cbnz	r1, 800e7e2 <_realloc_r+0x16>
 800e7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	4611      	mov	r1, r2
 800e7de:	f7ff bdad 	b.w	800e33c <_malloc_r>
 800e7e2:	b92a      	cbnz	r2, 800e7f0 <_realloc_r+0x24>
 800e7e4:	f7ff fd3e 	bl	800e264 <_free_r>
 800e7e8:	4625      	mov	r5, r4
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f0:	f000 fc6a 	bl	800f0c8 <_malloc_usable_size_r>
 800e7f4:	4284      	cmp	r4, r0
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	d802      	bhi.n	800e800 <_realloc_r+0x34>
 800e7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7fe:	d812      	bhi.n	800e826 <_realloc_r+0x5a>
 800e800:	4621      	mov	r1, r4
 800e802:	4640      	mov	r0, r8
 800e804:	f7ff fd9a 	bl	800e33c <_malloc_r>
 800e808:	4605      	mov	r5, r0
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d0ed      	beq.n	800e7ea <_realloc_r+0x1e>
 800e80e:	42bc      	cmp	r4, r7
 800e810:	4622      	mov	r2, r4
 800e812:	4631      	mov	r1, r6
 800e814:	bf28      	it	cs
 800e816:	463a      	movcs	r2, r7
 800e818:	f7ff f97c 	bl	800db14 <memcpy>
 800e81c:	4631      	mov	r1, r6
 800e81e:	4640      	mov	r0, r8
 800e820:	f7ff fd20 	bl	800e264 <_free_r>
 800e824:	e7e1      	b.n	800e7ea <_realloc_r+0x1e>
 800e826:	4635      	mov	r5, r6
 800e828:	e7df      	b.n	800e7ea <_realloc_r+0x1e>

0800e82a <__sfputc_r>:
 800e82a:	6893      	ldr	r3, [r2, #8]
 800e82c:	3b01      	subs	r3, #1
 800e82e:	2b00      	cmp	r3, #0
 800e830:	b410      	push	{r4}
 800e832:	6093      	str	r3, [r2, #8]
 800e834:	da08      	bge.n	800e848 <__sfputc_r+0x1e>
 800e836:	6994      	ldr	r4, [r2, #24]
 800e838:	42a3      	cmp	r3, r4
 800e83a:	db01      	blt.n	800e840 <__sfputc_r+0x16>
 800e83c:	290a      	cmp	r1, #10
 800e83e:	d103      	bne.n	800e848 <__sfputc_r+0x1e>
 800e840:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e844:	f000 b94a 	b.w	800eadc <__swbuf_r>
 800e848:	6813      	ldr	r3, [r2, #0]
 800e84a:	1c58      	adds	r0, r3, #1
 800e84c:	6010      	str	r0, [r2, #0]
 800e84e:	7019      	strb	r1, [r3, #0]
 800e850:	4608      	mov	r0, r1
 800e852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <__sfputs_r>:
 800e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85a:	4606      	mov	r6, r0
 800e85c:	460f      	mov	r7, r1
 800e85e:	4614      	mov	r4, r2
 800e860:	18d5      	adds	r5, r2, r3
 800e862:	42ac      	cmp	r4, r5
 800e864:	d101      	bne.n	800e86a <__sfputs_r+0x12>
 800e866:	2000      	movs	r0, #0
 800e868:	e007      	b.n	800e87a <__sfputs_r+0x22>
 800e86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86e:	463a      	mov	r2, r7
 800e870:	4630      	mov	r0, r6
 800e872:	f7ff ffda 	bl	800e82a <__sfputc_r>
 800e876:	1c43      	adds	r3, r0, #1
 800e878:	d1f3      	bne.n	800e862 <__sfputs_r+0xa>
 800e87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e87c <_vfiprintf_r>:
 800e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e880:	460d      	mov	r5, r1
 800e882:	b09d      	sub	sp, #116	; 0x74
 800e884:	4614      	mov	r4, r2
 800e886:	4698      	mov	r8, r3
 800e888:	4606      	mov	r6, r0
 800e88a:	b118      	cbz	r0, 800e894 <_vfiprintf_r+0x18>
 800e88c:	6983      	ldr	r3, [r0, #24]
 800e88e:	b90b      	cbnz	r3, 800e894 <_vfiprintf_r+0x18>
 800e890:	f000 fb14 	bl	800eebc <__sinit>
 800e894:	4b89      	ldr	r3, [pc, #548]	; (800eabc <_vfiprintf_r+0x240>)
 800e896:	429d      	cmp	r5, r3
 800e898:	d11b      	bne.n	800e8d2 <_vfiprintf_r+0x56>
 800e89a:	6875      	ldr	r5, [r6, #4]
 800e89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e89e:	07d9      	lsls	r1, r3, #31
 800e8a0:	d405      	bmi.n	800e8ae <_vfiprintf_r+0x32>
 800e8a2:	89ab      	ldrh	r3, [r5, #12]
 800e8a4:	059a      	lsls	r2, r3, #22
 800e8a6:	d402      	bmi.n	800e8ae <_vfiprintf_r+0x32>
 800e8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8aa:	f000 fba5 	bl	800eff8 <__retarget_lock_acquire_recursive>
 800e8ae:	89ab      	ldrh	r3, [r5, #12]
 800e8b0:	071b      	lsls	r3, r3, #28
 800e8b2:	d501      	bpl.n	800e8b8 <_vfiprintf_r+0x3c>
 800e8b4:	692b      	ldr	r3, [r5, #16]
 800e8b6:	b9eb      	cbnz	r3, 800e8f4 <_vfiprintf_r+0x78>
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f000 f96e 	bl	800eb9c <__swsetup_r>
 800e8c0:	b1c0      	cbz	r0, 800e8f4 <_vfiprintf_r+0x78>
 800e8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8c4:	07dc      	lsls	r4, r3, #31
 800e8c6:	d50e      	bpl.n	800e8e6 <_vfiprintf_r+0x6a>
 800e8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8cc:	b01d      	add	sp, #116	; 0x74
 800e8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d2:	4b7b      	ldr	r3, [pc, #492]	; (800eac0 <_vfiprintf_r+0x244>)
 800e8d4:	429d      	cmp	r5, r3
 800e8d6:	d101      	bne.n	800e8dc <_vfiprintf_r+0x60>
 800e8d8:	68b5      	ldr	r5, [r6, #8]
 800e8da:	e7df      	b.n	800e89c <_vfiprintf_r+0x20>
 800e8dc:	4b79      	ldr	r3, [pc, #484]	; (800eac4 <_vfiprintf_r+0x248>)
 800e8de:	429d      	cmp	r5, r3
 800e8e0:	bf08      	it	eq
 800e8e2:	68f5      	ldreq	r5, [r6, #12]
 800e8e4:	e7da      	b.n	800e89c <_vfiprintf_r+0x20>
 800e8e6:	89ab      	ldrh	r3, [r5, #12]
 800e8e8:	0598      	lsls	r0, r3, #22
 800e8ea:	d4ed      	bmi.n	800e8c8 <_vfiprintf_r+0x4c>
 800e8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ee:	f000 fb84 	bl	800effa <__retarget_lock_release_recursive>
 800e8f2:	e7e9      	b.n	800e8c8 <_vfiprintf_r+0x4c>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e902:	2330      	movs	r3, #48	; 0x30
 800e904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eac8 <_vfiprintf_r+0x24c>
 800e908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e90c:	f04f 0901 	mov.w	r9, #1
 800e910:	4623      	mov	r3, r4
 800e912:	469a      	mov	sl, r3
 800e914:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e918:	b10a      	cbz	r2, 800e91e <_vfiprintf_r+0xa2>
 800e91a:	2a25      	cmp	r2, #37	; 0x25
 800e91c:	d1f9      	bne.n	800e912 <_vfiprintf_r+0x96>
 800e91e:	ebba 0b04 	subs.w	fp, sl, r4
 800e922:	d00b      	beq.n	800e93c <_vfiprintf_r+0xc0>
 800e924:	465b      	mov	r3, fp
 800e926:	4622      	mov	r2, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	4630      	mov	r0, r6
 800e92c:	f7ff ff94 	bl	800e858 <__sfputs_r>
 800e930:	3001      	adds	r0, #1
 800e932:	f000 80aa 	beq.w	800ea8a <_vfiprintf_r+0x20e>
 800e936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e938:	445a      	add	r2, fp
 800e93a:	9209      	str	r2, [sp, #36]	; 0x24
 800e93c:	f89a 3000 	ldrb.w	r3, [sl]
 800e940:	2b00      	cmp	r3, #0
 800e942:	f000 80a2 	beq.w	800ea8a <_vfiprintf_r+0x20e>
 800e946:	2300      	movs	r3, #0
 800e948:	f04f 32ff 	mov.w	r2, #4294967295
 800e94c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e950:	f10a 0a01 	add.w	sl, sl, #1
 800e954:	9304      	str	r3, [sp, #16]
 800e956:	9307      	str	r3, [sp, #28]
 800e958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e95c:	931a      	str	r3, [sp, #104]	; 0x68
 800e95e:	4654      	mov	r4, sl
 800e960:	2205      	movs	r2, #5
 800e962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e966:	4858      	ldr	r0, [pc, #352]	; (800eac8 <_vfiprintf_r+0x24c>)
 800e968:	f7f1 fc62 	bl	8000230 <memchr>
 800e96c:	9a04      	ldr	r2, [sp, #16]
 800e96e:	b9d8      	cbnz	r0, 800e9a8 <_vfiprintf_r+0x12c>
 800e970:	06d1      	lsls	r1, r2, #27
 800e972:	bf44      	itt	mi
 800e974:	2320      	movmi	r3, #32
 800e976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e97a:	0713      	lsls	r3, r2, #28
 800e97c:	bf44      	itt	mi
 800e97e:	232b      	movmi	r3, #43	; 0x2b
 800e980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e984:	f89a 3000 	ldrb.w	r3, [sl]
 800e988:	2b2a      	cmp	r3, #42	; 0x2a
 800e98a:	d015      	beq.n	800e9b8 <_vfiprintf_r+0x13c>
 800e98c:	9a07      	ldr	r2, [sp, #28]
 800e98e:	4654      	mov	r4, sl
 800e990:	2000      	movs	r0, #0
 800e992:	f04f 0c0a 	mov.w	ip, #10
 800e996:	4621      	mov	r1, r4
 800e998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e99c:	3b30      	subs	r3, #48	; 0x30
 800e99e:	2b09      	cmp	r3, #9
 800e9a0:	d94e      	bls.n	800ea40 <_vfiprintf_r+0x1c4>
 800e9a2:	b1b0      	cbz	r0, 800e9d2 <_vfiprintf_r+0x156>
 800e9a4:	9207      	str	r2, [sp, #28]
 800e9a6:	e014      	b.n	800e9d2 <_vfiprintf_r+0x156>
 800e9a8:	eba0 0308 	sub.w	r3, r0, r8
 800e9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	9304      	str	r3, [sp, #16]
 800e9b4:	46a2      	mov	sl, r4
 800e9b6:	e7d2      	b.n	800e95e <_vfiprintf_r+0xe2>
 800e9b8:	9b03      	ldr	r3, [sp, #12]
 800e9ba:	1d19      	adds	r1, r3, #4
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	9103      	str	r1, [sp, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	bfbb      	ittet	lt
 800e9c4:	425b      	neglt	r3, r3
 800e9c6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ca:	9307      	strge	r3, [sp, #28]
 800e9cc:	9307      	strlt	r3, [sp, #28]
 800e9ce:	bfb8      	it	lt
 800e9d0:	9204      	strlt	r2, [sp, #16]
 800e9d2:	7823      	ldrb	r3, [r4, #0]
 800e9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9d6:	d10c      	bne.n	800e9f2 <_vfiprintf_r+0x176>
 800e9d8:	7863      	ldrb	r3, [r4, #1]
 800e9da:	2b2a      	cmp	r3, #42	; 0x2a
 800e9dc:	d135      	bne.n	800ea4a <_vfiprintf_r+0x1ce>
 800e9de:	9b03      	ldr	r3, [sp, #12]
 800e9e0:	1d1a      	adds	r2, r3, #4
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	9203      	str	r2, [sp, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	bfb8      	it	lt
 800e9ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9ee:	3402      	adds	r4, #2
 800e9f0:	9305      	str	r3, [sp, #20]
 800e9f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ead8 <_vfiprintf_r+0x25c>
 800e9f6:	7821      	ldrb	r1, [r4, #0]
 800e9f8:	2203      	movs	r2, #3
 800e9fa:	4650      	mov	r0, sl
 800e9fc:	f7f1 fc18 	bl	8000230 <memchr>
 800ea00:	b140      	cbz	r0, 800ea14 <_vfiprintf_r+0x198>
 800ea02:	2340      	movs	r3, #64	; 0x40
 800ea04:	eba0 000a 	sub.w	r0, r0, sl
 800ea08:	fa03 f000 	lsl.w	r0, r3, r0
 800ea0c:	9b04      	ldr	r3, [sp, #16]
 800ea0e:	4303      	orrs	r3, r0
 800ea10:	3401      	adds	r4, #1
 800ea12:	9304      	str	r3, [sp, #16]
 800ea14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea18:	482c      	ldr	r0, [pc, #176]	; (800eacc <_vfiprintf_r+0x250>)
 800ea1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea1e:	2206      	movs	r2, #6
 800ea20:	f7f1 fc06 	bl	8000230 <memchr>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d03f      	beq.n	800eaa8 <_vfiprintf_r+0x22c>
 800ea28:	4b29      	ldr	r3, [pc, #164]	; (800ead0 <_vfiprintf_r+0x254>)
 800ea2a:	bb1b      	cbnz	r3, 800ea74 <_vfiprintf_r+0x1f8>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	3307      	adds	r3, #7
 800ea30:	f023 0307 	bic.w	r3, r3, #7
 800ea34:	3308      	adds	r3, #8
 800ea36:	9303      	str	r3, [sp, #12]
 800ea38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea3a:	443b      	add	r3, r7
 800ea3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea3e:	e767      	b.n	800e910 <_vfiprintf_r+0x94>
 800ea40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea44:	460c      	mov	r4, r1
 800ea46:	2001      	movs	r0, #1
 800ea48:	e7a5      	b.n	800e996 <_vfiprintf_r+0x11a>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	3401      	adds	r4, #1
 800ea4e:	9305      	str	r3, [sp, #20]
 800ea50:	4619      	mov	r1, r3
 800ea52:	f04f 0c0a 	mov.w	ip, #10
 800ea56:	4620      	mov	r0, r4
 800ea58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea5c:	3a30      	subs	r2, #48	; 0x30
 800ea5e:	2a09      	cmp	r2, #9
 800ea60:	d903      	bls.n	800ea6a <_vfiprintf_r+0x1ee>
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d0c5      	beq.n	800e9f2 <_vfiprintf_r+0x176>
 800ea66:	9105      	str	r1, [sp, #20]
 800ea68:	e7c3      	b.n	800e9f2 <_vfiprintf_r+0x176>
 800ea6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea6e:	4604      	mov	r4, r0
 800ea70:	2301      	movs	r3, #1
 800ea72:	e7f0      	b.n	800ea56 <_vfiprintf_r+0x1da>
 800ea74:	ab03      	add	r3, sp, #12
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	462a      	mov	r2, r5
 800ea7a:	4b16      	ldr	r3, [pc, #88]	; (800ead4 <_vfiprintf_r+0x258>)
 800ea7c:	a904      	add	r1, sp, #16
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f7fd fdd6 	bl	800c630 <_printf_float>
 800ea84:	4607      	mov	r7, r0
 800ea86:	1c78      	adds	r0, r7, #1
 800ea88:	d1d6      	bne.n	800ea38 <_vfiprintf_r+0x1bc>
 800ea8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea8c:	07d9      	lsls	r1, r3, #31
 800ea8e:	d405      	bmi.n	800ea9c <_vfiprintf_r+0x220>
 800ea90:	89ab      	ldrh	r3, [r5, #12]
 800ea92:	059a      	lsls	r2, r3, #22
 800ea94:	d402      	bmi.n	800ea9c <_vfiprintf_r+0x220>
 800ea96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea98:	f000 faaf 	bl	800effa <__retarget_lock_release_recursive>
 800ea9c:	89ab      	ldrh	r3, [r5, #12]
 800ea9e:	065b      	lsls	r3, r3, #25
 800eaa0:	f53f af12 	bmi.w	800e8c8 <_vfiprintf_r+0x4c>
 800eaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaa6:	e711      	b.n	800e8cc <_vfiprintf_r+0x50>
 800eaa8:	ab03      	add	r3, sp, #12
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	462a      	mov	r2, r5
 800eaae:	4b09      	ldr	r3, [pc, #36]	; (800ead4 <_vfiprintf_r+0x258>)
 800eab0:	a904      	add	r1, sp, #16
 800eab2:	4630      	mov	r0, r6
 800eab4:	f7fe f860 	bl	800cb78 <_printf_i>
 800eab8:	e7e4      	b.n	800ea84 <_vfiprintf_r+0x208>
 800eaba:	bf00      	nop
 800eabc:	08010534 	.word	0x08010534
 800eac0:	08010554 	.word	0x08010554
 800eac4:	08010514 	.word	0x08010514
 800eac8:	080103bc 	.word	0x080103bc
 800eacc:	080103c6 	.word	0x080103c6
 800ead0:	0800c631 	.word	0x0800c631
 800ead4:	0800e859 	.word	0x0800e859
 800ead8:	080103c2 	.word	0x080103c2

0800eadc <__swbuf_r>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	460e      	mov	r6, r1
 800eae0:	4614      	mov	r4, r2
 800eae2:	4605      	mov	r5, r0
 800eae4:	b118      	cbz	r0, 800eaee <__swbuf_r+0x12>
 800eae6:	6983      	ldr	r3, [r0, #24]
 800eae8:	b90b      	cbnz	r3, 800eaee <__swbuf_r+0x12>
 800eaea:	f000 f9e7 	bl	800eebc <__sinit>
 800eaee:	4b21      	ldr	r3, [pc, #132]	; (800eb74 <__swbuf_r+0x98>)
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	d12b      	bne.n	800eb4c <__swbuf_r+0x70>
 800eaf4:	686c      	ldr	r4, [r5, #4]
 800eaf6:	69a3      	ldr	r3, [r4, #24]
 800eaf8:	60a3      	str	r3, [r4, #8]
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	071a      	lsls	r2, r3, #28
 800eafe:	d52f      	bpl.n	800eb60 <__swbuf_r+0x84>
 800eb00:	6923      	ldr	r3, [r4, #16]
 800eb02:	b36b      	cbz	r3, 800eb60 <__swbuf_r+0x84>
 800eb04:	6923      	ldr	r3, [r4, #16]
 800eb06:	6820      	ldr	r0, [r4, #0]
 800eb08:	1ac0      	subs	r0, r0, r3
 800eb0a:	6963      	ldr	r3, [r4, #20]
 800eb0c:	b2f6      	uxtb	r6, r6
 800eb0e:	4283      	cmp	r3, r0
 800eb10:	4637      	mov	r7, r6
 800eb12:	dc04      	bgt.n	800eb1e <__swbuf_r+0x42>
 800eb14:	4621      	mov	r1, r4
 800eb16:	4628      	mov	r0, r5
 800eb18:	f000 f93c 	bl	800ed94 <_fflush_r>
 800eb1c:	bb30      	cbnz	r0, 800eb6c <__swbuf_r+0x90>
 800eb1e:	68a3      	ldr	r3, [r4, #8]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	60a3      	str	r3, [r4, #8]
 800eb24:	6823      	ldr	r3, [r4, #0]
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	6022      	str	r2, [r4, #0]
 800eb2a:	701e      	strb	r6, [r3, #0]
 800eb2c:	6963      	ldr	r3, [r4, #20]
 800eb2e:	3001      	adds	r0, #1
 800eb30:	4283      	cmp	r3, r0
 800eb32:	d004      	beq.n	800eb3e <__swbuf_r+0x62>
 800eb34:	89a3      	ldrh	r3, [r4, #12]
 800eb36:	07db      	lsls	r3, r3, #31
 800eb38:	d506      	bpl.n	800eb48 <__swbuf_r+0x6c>
 800eb3a:	2e0a      	cmp	r6, #10
 800eb3c:	d104      	bne.n	800eb48 <__swbuf_r+0x6c>
 800eb3e:	4621      	mov	r1, r4
 800eb40:	4628      	mov	r0, r5
 800eb42:	f000 f927 	bl	800ed94 <_fflush_r>
 800eb46:	b988      	cbnz	r0, 800eb6c <__swbuf_r+0x90>
 800eb48:	4638      	mov	r0, r7
 800eb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb4c:	4b0a      	ldr	r3, [pc, #40]	; (800eb78 <__swbuf_r+0x9c>)
 800eb4e:	429c      	cmp	r4, r3
 800eb50:	d101      	bne.n	800eb56 <__swbuf_r+0x7a>
 800eb52:	68ac      	ldr	r4, [r5, #8]
 800eb54:	e7cf      	b.n	800eaf6 <__swbuf_r+0x1a>
 800eb56:	4b09      	ldr	r3, [pc, #36]	; (800eb7c <__swbuf_r+0xa0>)
 800eb58:	429c      	cmp	r4, r3
 800eb5a:	bf08      	it	eq
 800eb5c:	68ec      	ldreq	r4, [r5, #12]
 800eb5e:	e7ca      	b.n	800eaf6 <__swbuf_r+0x1a>
 800eb60:	4621      	mov	r1, r4
 800eb62:	4628      	mov	r0, r5
 800eb64:	f000 f81a 	bl	800eb9c <__swsetup_r>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d0cb      	beq.n	800eb04 <__swbuf_r+0x28>
 800eb6c:	f04f 37ff 	mov.w	r7, #4294967295
 800eb70:	e7ea      	b.n	800eb48 <__swbuf_r+0x6c>
 800eb72:	bf00      	nop
 800eb74:	08010534 	.word	0x08010534
 800eb78:	08010554 	.word	0x08010554
 800eb7c:	08010514 	.word	0x08010514

0800eb80 <__ascii_wctomb>:
 800eb80:	b149      	cbz	r1, 800eb96 <__ascii_wctomb+0x16>
 800eb82:	2aff      	cmp	r2, #255	; 0xff
 800eb84:	bf85      	ittet	hi
 800eb86:	238a      	movhi	r3, #138	; 0x8a
 800eb88:	6003      	strhi	r3, [r0, #0]
 800eb8a:	700a      	strbls	r2, [r1, #0]
 800eb8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb90:	bf98      	it	ls
 800eb92:	2001      	movls	r0, #1
 800eb94:	4770      	bx	lr
 800eb96:	4608      	mov	r0, r1
 800eb98:	4770      	bx	lr
	...

0800eb9c <__swsetup_r>:
 800eb9c:	4b32      	ldr	r3, [pc, #200]	; (800ec68 <__swsetup_r+0xcc>)
 800eb9e:	b570      	push	{r4, r5, r6, lr}
 800eba0:	681d      	ldr	r5, [r3, #0]
 800eba2:	4606      	mov	r6, r0
 800eba4:	460c      	mov	r4, r1
 800eba6:	b125      	cbz	r5, 800ebb2 <__swsetup_r+0x16>
 800eba8:	69ab      	ldr	r3, [r5, #24]
 800ebaa:	b913      	cbnz	r3, 800ebb2 <__swsetup_r+0x16>
 800ebac:	4628      	mov	r0, r5
 800ebae:	f000 f985 	bl	800eebc <__sinit>
 800ebb2:	4b2e      	ldr	r3, [pc, #184]	; (800ec6c <__swsetup_r+0xd0>)
 800ebb4:	429c      	cmp	r4, r3
 800ebb6:	d10f      	bne.n	800ebd8 <__swsetup_r+0x3c>
 800ebb8:	686c      	ldr	r4, [r5, #4]
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebc0:	0719      	lsls	r1, r3, #28
 800ebc2:	d42c      	bmi.n	800ec1e <__swsetup_r+0x82>
 800ebc4:	06dd      	lsls	r5, r3, #27
 800ebc6:	d411      	bmi.n	800ebec <__swsetup_r+0x50>
 800ebc8:	2309      	movs	r3, #9
 800ebca:	6033      	str	r3, [r6, #0]
 800ebcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebd0:	81a3      	strh	r3, [r4, #12]
 800ebd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd6:	e03e      	b.n	800ec56 <__swsetup_r+0xba>
 800ebd8:	4b25      	ldr	r3, [pc, #148]	; (800ec70 <__swsetup_r+0xd4>)
 800ebda:	429c      	cmp	r4, r3
 800ebdc:	d101      	bne.n	800ebe2 <__swsetup_r+0x46>
 800ebde:	68ac      	ldr	r4, [r5, #8]
 800ebe0:	e7eb      	b.n	800ebba <__swsetup_r+0x1e>
 800ebe2:	4b24      	ldr	r3, [pc, #144]	; (800ec74 <__swsetup_r+0xd8>)
 800ebe4:	429c      	cmp	r4, r3
 800ebe6:	bf08      	it	eq
 800ebe8:	68ec      	ldreq	r4, [r5, #12]
 800ebea:	e7e6      	b.n	800ebba <__swsetup_r+0x1e>
 800ebec:	0758      	lsls	r0, r3, #29
 800ebee:	d512      	bpl.n	800ec16 <__swsetup_r+0x7a>
 800ebf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebf2:	b141      	cbz	r1, 800ec06 <__swsetup_r+0x6a>
 800ebf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebf8:	4299      	cmp	r1, r3
 800ebfa:	d002      	beq.n	800ec02 <__swsetup_r+0x66>
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f7ff fb31 	bl	800e264 <_free_r>
 800ec02:	2300      	movs	r3, #0
 800ec04:	6363      	str	r3, [r4, #52]	; 0x34
 800ec06:	89a3      	ldrh	r3, [r4, #12]
 800ec08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec0c:	81a3      	strh	r3, [r4, #12]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	6063      	str	r3, [r4, #4]
 800ec12:	6923      	ldr	r3, [r4, #16]
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	f043 0308 	orr.w	r3, r3, #8
 800ec1c:	81a3      	strh	r3, [r4, #12]
 800ec1e:	6923      	ldr	r3, [r4, #16]
 800ec20:	b94b      	cbnz	r3, 800ec36 <__swsetup_r+0x9a>
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec2c:	d003      	beq.n	800ec36 <__swsetup_r+0x9a>
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4630      	mov	r0, r6
 800ec32:	f000 fa09 	bl	800f048 <__smakebuf_r>
 800ec36:	89a0      	ldrh	r0, [r4, #12]
 800ec38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec3c:	f010 0301 	ands.w	r3, r0, #1
 800ec40:	d00a      	beq.n	800ec58 <__swsetup_r+0xbc>
 800ec42:	2300      	movs	r3, #0
 800ec44:	60a3      	str	r3, [r4, #8]
 800ec46:	6963      	ldr	r3, [r4, #20]
 800ec48:	425b      	negs	r3, r3
 800ec4a:	61a3      	str	r3, [r4, #24]
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	b943      	cbnz	r3, 800ec62 <__swsetup_r+0xc6>
 800ec50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec54:	d1ba      	bne.n	800ebcc <__swsetup_r+0x30>
 800ec56:	bd70      	pop	{r4, r5, r6, pc}
 800ec58:	0781      	lsls	r1, r0, #30
 800ec5a:	bf58      	it	pl
 800ec5c:	6963      	ldrpl	r3, [r4, #20]
 800ec5e:	60a3      	str	r3, [r4, #8]
 800ec60:	e7f4      	b.n	800ec4c <__swsetup_r+0xb0>
 800ec62:	2000      	movs	r0, #0
 800ec64:	e7f7      	b.n	800ec56 <__swsetup_r+0xba>
 800ec66:	bf00      	nop
 800ec68:	2000002c 	.word	0x2000002c
 800ec6c:	08010534 	.word	0x08010534
 800ec70:	08010554 	.word	0x08010554
 800ec74:	08010514 	.word	0x08010514

0800ec78 <abort>:
 800ec78:	b508      	push	{r3, lr}
 800ec7a:	2006      	movs	r0, #6
 800ec7c:	f000 fa54 	bl	800f128 <raise>
 800ec80:	2001      	movs	r0, #1
 800ec82:	f7f6 fa77 	bl	8005174 <_exit>
	...

0800ec88 <__sflush_r>:
 800ec88:	898a      	ldrh	r2, [r1, #12]
 800ec8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8e:	4605      	mov	r5, r0
 800ec90:	0710      	lsls	r0, r2, #28
 800ec92:	460c      	mov	r4, r1
 800ec94:	d458      	bmi.n	800ed48 <__sflush_r+0xc0>
 800ec96:	684b      	ldr	r3, [r1, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	dc05      	bgt.n	800eca8 <__sflush_r+0x20>
 800ec9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	dc02      	bgt.n	800eca8 <__sflush_r+0x20>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecaa:	2e00      	cmp	r6, #0
 800ecac:	d0f9      	beq.n	800eca2 <__sflush_r+0x1a>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ecb4:	682f      	ldr	r7, [r5, #0]
 800ecb6:	602b      	str	r3, [r5, #0]
 800ecb8:	d032      	beq.n	800ed20 <__sflush_r+0x98>
 800ecba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	075a      	lsls	r2, r3, #29
 800ecc0:	d505      	bpl.n	800ecce <__sflush_r+0x46>
 800ecc2:	6863      	ldr	r3, [r4, #4]
 800ecc4:	1ac0      	subs	r0, r0, r3
 800ecc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecc8:	b10b      	cbz	r3, 800ecce <__sflush_r+0x46>
 800ecca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eccc:	1ac0      	subs	r0, r0, r3
 800ecce:	2300      	movs	r3, #0
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecd4:	6a21      	ldr	r1, [r4, #32]
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	47b0      	blx	r6
 800ecda:	1c43      	adds	r3, r0, #1
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	d106      	bne.n	800ecee <__sflush_r+0x66>
 800ece0:	6829      	ldr	r1, [r5, #0]
 800ece2:	291d      	cmp	r1, #29
 800ece4:	d82c      	bhi.n	800ed40 <__sflush_r+0xb8>
 800ece6:	4a2a      	ldr	r2, [pc, #168]	; (800ed90 <__sflush_r+0x108>)
 800ece8:	40ca      	lsrs	r2, r1
 800ecea:	07d6      	lsls	r6, r2, #31
 800ecec:	d528      	bpl.n	800ed40 <__sflush_r+0xb8>
 800ecee:	2200      	movs	r2, #0
 800ecf0:	6062      	str	r2, [r4, #4]
 800ecf2:	04d9      	lsls	r1, r3, #19
 800ecf4:	6922      	ldr	r2, [r4, #16]
 800ecf6:	6022      	str	r2, [r4, #0]
 800ecf8:	d504      	bpl.n	800ed04 <__sflush_r+0x7c>
 800ecfa:	1c42      	adds	r2, r0, #1
 800ecfc:	d101      	bne.n	800ed02 <__sflush_r+0x7a>
 800ecfe:	682b      	ldr	r3, [r5, #0]
 800ed00:	b903      	cbnz	r3, 800ed04 <__sflush_r+0x7c>
 800ed02:	6560      	str	r0, [r4, #84]	; 0x54
 800ed04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed06:	602f      	str	r7, [r5, #0]
 800ed08:	2900      	cmp	r1, #0
 800ed0a:	d0ca      	beq.n	800eca2 <__sflush_r+0x1a>
 800ed0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed10:	4299      	cmp	r1, r3
 800ed12:	d002      	beq.n	800ed1a <__sflush_r+0x92>
 800ed14:	4628      	mov	r0, r5
 800ed16:	f7ff faa5 	bl	800e264 <_free_r>
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ed1e:	e7c1      	b.n	800eca4 <__sflush_r+0x1c>
 800ed20:	6a21      	ldr	r1, [r4, #32]
 800ed22:	2301      	movs	r3, #1
 800ed24:	4628      	mov	r0, r5
 800ed26:	47b0      	blx	r6
 800ed28:	1c41      	adds	r1, r0, #1
 800ed2a:	d1c7      	bne.n	800ecbc <__sflush_r+0x34>
 800ed2c:	682b      	ldr	r3, [r5, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0c4      	beq.n	800ecbc <__sflush_r+0x34>
 800ed32:	2b1d      	cmp	r3, #29
 800ed34:	d001      	beq.n	800ed3a <__sflush_r+0xb2>
 800ed36:	2b16      	cmp	r3, #22
 800ed38:	d101      	bne.n	800ed3e <__sflush_r+0xb6>
 800ed3a:	602f      	str	r7, [r5, #0]
 800ed3c:	e7b1      	b.n	800eca2 <__sflush_r+0x1a>
 800ed3e:	89a3      	ldrh	r3, [r4, #12]
 800ed40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed44:	81a3      	strh	r3, [r4, #12]
 800ed46:	e7ad      	b.n	800eca4 <__sflush_r+0x1c>
 800ed48:	690f      	ldr	r7, [r1, #16]
 800ed4a:	2f00      	cmp	r7, #0
 800ed4c:	d0a9      	beq.n	800eca2 <__sflush_r+0x1a>
 800ed4e:	0793      	lsls	r3, r2, #30
 800ed50:	680e      	ldr	r6, [r1, #0]
 800ed52:	bf08      	it	eq
 800ed54:	694b      	ldreq	r3, [r1, #20]
 800ed56:	600f      	str	r7, [r1, #0]
 800ed58:	bf18      	it	ne
 800ed5a:	2300      	movne	r3, #0
 800ed5c:	eba6 0807 	sub.w	r8, r6, r7
 800ed60:	608b      	str	r3, [r1, #8]
 800ed62:	f1b8 0f00 	cmp.w	r8, #0
 800ed66:	dd9c      	ble.n	800eca2 <__sflush_r+0x1a>
 800ed68:	6a21      	ldr	r1, [r4, #32]
 800ed6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed6c:	4643      	mov	r3, r8
 800ed6e:	463a      	mov	r2, r7
 800ed70:	4628      	mov	r0, r5
 800ed72:	47b0      	blx	r6
 800ed74:	2800      	cmp	r0, #0
 800ed76:	dc06      	bgt.n	800ed86 <__sflush_r+0xfe>
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295
 800ed84:	e78e      	b.n	800eca4 <__sflush_r+0x1c>
 800ed86:	4407      	add	r7, r0
 800ed88:	eba8 0800 	sub.w	r8, r8, r0
 800ed8c:	e7e9      	b.n	800ed62 <__sflush_r+0xda>
 800ed8e:	bf00      	nop
 800ed90:	20400001 	.word	0x20400001

0800ed94 <_fflush_r>:
 800ed94:	b538      	push	{r3, r4, r5, lr}
 800ed96:	690b      	ldr	r3, [r1, #16]
 800ed98:	4605      	mov	r5, r0
 800ed9a:	460c      	mov	r4, r1
 800ed9c:	b913      	cbnz	r3, 800eda4 <_fflush_r+0x10>
 800ed9e:	2500      	movs	r5, #0
 800eda0:	4628      	mov	r0, r5
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	b118      	cbz	r0, 800edae <_fflush_r+0x1a>
 800eda6:	6983      	ldr	r3, [r0, #24]
 800eda8:	b90b      	cbnz	r3, 800edae <_fflush_r+0x1a>
 800edaa:	f000 f887 	bl	800eebc <__sinit>
 800edae:	4b14      	ldr	r3, [pc, #80]	; (800ee00 <_fflush_r+0x6c>)
 800edb0:	429c      	cmp	r4, r3
 800edb2:	d11b      	bne.n	800edec <_fflush_r+0x58>
 800edb4:	686c      	ldr	r4, [r5, #4]
 800edb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d0ef      	beq.n	800ed9e <_fflush_r+0xa>
 800edbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800edc0:	07d0      	lsls	r0, r2, #31
 800edc2:	d404      	bmi.n	800edce <_fflush_r+0x3a>
 800edc4:	0599      	lsls	r1, r3, #22
 800edc6:	d402      	bmi.n	800edce <_fflush_r+0x3a>
 800edc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edca:	f000 f915 	bl	800eff8 <__retarget_lock_acquire_recursive>
 800edce:	4628      	mov	r0, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	f7ff ff59 	bl	800ec88 <__sflush_r>
 800edd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edd8:	07da      	lsls	r2, r3, #31
 800edda:	4605      	mov	r5, r0
 800eddc:	d4e0      	bmi.n	800eda0 <_fflush_r+0xc>
 800edde:	89a3      	ldrh	r3, [r4, #12]
 800ede0:	059b      	lsls	r3, r3, #22
 800ede2:	d4dd      	bmi.n	800eda0 <_fflush_r+0xc>
 800ede4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ede6:	f000 f908 	bl	800effa <__retarget_lock_release_recursive>
 800edea:	e7d9      	b.n	800eda0 <_fflush_r+0xc>
 800edec:	4b05      	ldr	r3, [pc, #20]	; (800ee04 <_fflush_r+0x70>)
 800edee:	429c      	cmp	r4, r3
 800edf0:	d101      	bne.n	800edf6 <_fflush_r+0x62>
 800edf2:	68ac      	ldr	r4, [r5, #8]
 800edf4:	e7df      	b.n	800edb6 <_fflush_r+0x22>
 800edf6:	4b04      	ldr	r3, [pc, #16]	; (800ee08 <_fflush_r+0x74>)
 800edf8:	429c      	cmp	r4, r3
 800edfa:	bf08      	it	eq
 800edfc:	68ec      	ldreq	r4, [r5, #12]
 800edfe:	e7da      	b.n	800edb6 <_fflush_r+0x22>
 800ee00:	08010534 	.word	0x08010534
 800ee04:	08010554 	.word	0x08010554
 800ee08:	08010514 	.word	0x08010514

0800ee0c <std>:
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	b510      	push	{r4, lr}
 800ee10:	4604      	mov	r4, r0
 800ee12:	e9c0 3300 	strd	r3, r3, [r0]
 800ee16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee1a:	6083      	str	r3, [r0, #8]
 800ee1c:	8181      	strh	r1, [r0, #12]
 800ee1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ee20:	81c2      	strh	r2, [r0, #14]
 800ee22:	6183      	str	r3, [r0, #24]
 800ee24:	4619      	mov	r1, r3
 800ee26:	2208      	movs	r2, #8
 800ee28:	305c      	adds	r0, #92	; 0x5c
 800ee2a:	f7fd fb59 	bl	800c4e0 <memset>
 800ee2e:	4b05      	ldr	r3, [pc, #20]	; (800ee44 <std+0x38>)
 800ee30:	6263      	str	r3, [r4, #36]	; 0x24
 800ee32:	4b05      	ldr	r3, [pc, #20]	; (800ee48 <std+0x3c>)
 800ee34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee36:	4b05      	ldr	r3, [pc, #20]	; (800ee4c <std+0x40>)
 800ee38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee3a:	4b05      	ldr	r3, [pc, #20]	; (800ee50 <std+0x44>)
 800ee3c:	6224      	str	r4, [r4, #32]
 800ee3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee40:	bd10      	pop	{r4, pc}
 800ee42:	bf00      	nop
 800ee44:	0800f161 	.word	0x0800f161
 800ee48:	0800f183 	.word	0x0800f183
 800ee4c:	0800f1bb 	.word	0x0800f1bb
 800ee50:	0800f1df 	.word	0x0800f1df

0800ee54 <_cleanup_r>:
 800ee54:	4901      	ldr	r1, [pc, #4]	; (800ee5c <_cleanup_r+0x8>)
 800ee56:	f000 b8af 	b.w	800efb8 <_fwalk_reent>
 800ee5a:	bf00      	nop
 800ee5c:	0800ed95 	.word	0x0800ed95

0800ee60 <__sfmoreglue>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	2268      	movs	r2, #104	; 0x68
 800ee64:	1e4d      	subs	r5, r1, #1
 800ee66:	4355      	muls	r5, r2
 800ee68:	460e      	mov	r6, r1
 800ee6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee6e:	f7ff fa65 	bl	800e33c <_malloc_r>
 800ee72:	4604      	mov	r4, r0
 800ee74:	b140      	cbz	r0, 800ee88 <__sfmoreglue+0x28>
 800ee76:	2100      	movs	r1, #0
 800ee78:	e9c0 1600 	strd	r1, r6, [r0]
 800ee7c:	300c      	adds	r0, #12
 800ee7e:	60a0      	str	r0, [r4, #8]
 800ee80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee84:	f7fd fb2c 	bl	800c4e0 <memset>
 800ee88:	4620      	mov	r0, r4
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}

0800ee8c <__sfp_lock_acquire>:
 800ee8c:	4801      	ldr	r0, [pc, #4]	; (800ee94 <__sfp_lock_acquire+0x8>)
 800ee8e:	f000 b8b3 	b.w	800eff8 <__retarget_lock_acquire_recursive>
 800ee92:	bf00      	nop
 800ee94:	200007a9 	.word	0x200007a9

0800ee98 <__sfp_lock_release>:
 800ee98:	4801      	ldr	r0, [pc, #4]	; (800eea0 <__sfp_lock_release+0x8>)
 800ee9a:	f000 b8ae 	b.w	800effa <__retarget_lock_release_recursive>
 800ee9e:	bf00      	nop
 800eea0:	200007a9 	.word	0x200007a9

0800eea4 <__sinit_lock_acquire>:
 800eea4:	4801      	ldr	r0, [pc, #4]	; (800eeac <__sinit_lock_acquire+0x8>)
 800eea6:	f000 b8a7 	b.w	800eff8 <__retarget_lock_acquire_recursive>
 800eeaa:	bf00      	nop
 800eeac:	200007aa 	.word	0x200007aa

0800eeb0 <__sinit_lock_release>:
 800eeb0:	4801      	ldr	r0, [pc, #4]	; (800eeb8 <__sinit_lock_release+0x8>)
 800eeb2:	f000 b8a2 	b.w	800effa <__retarget_lock_release_recursive>
 800eeb6:	bf00      	nop
 800eeb8:	200007aa 	.word	0x200007aa

0800eebc <__sinit>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	4604      	mov	r4, r0
 800eec0:	f7ff fff0 	bl	800eea4 <__sinit_lock_acquire>
 800eec4:	69a3      	ldr	r3, [r4, #24]
 800eec6:	b11b      	cbz	r3, 800eed0 <__sinit+0x14>
 800eec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eecc:	f7ff bff0 	b.w	800eeb0 <__sinit_lock_release>
 800eed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eed4:	6523      	str	r3, [r4, #80]	; 0x50
 800eed6:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <__sinit+0x68>)
 800eed8:	4a13      	ldr	r2, [pc, #76]	; (800ef28 <__sinit+0x6c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	62a2      	str	r2, [r4, #40]	; 0x28
 800eede:	42a3      	cmp	r3, r4
 800eee0:	bf04      	itt	eq
 800eee2:	2301      	moveq	r3, #1
 800eee4:	61a3      	streq	r3, [r4, #24]
 800eee6:	4620      	mov	r0, r4
 800eee8:	f000 f820 	bl	800ef2c <__sfp>
 800eeec:	6060      	str	r0, [r4, #4]
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 f81c 	bl	800ef2c <__sfp>
 800eef4:	60a0      	str	r0, [r4, #8]
 800eef6:	4620      	mov	r0, r4
 800eef8:	f000 f818 	bl	800ef2c <__sfp>
 800eefc:	2200      	movs	r2, #0
 800eefe:	60e0      	str	r0, [r4, #12]
 800ef00:	2104      	movs	r1, #4
 800ef02:	6860      	ldr	r0, [r4, #4]
 800ef04:	f7ff ff82 	bl	800ee0c <std>
 800ef08:	68a0      	ldr	r0, [r4, #8]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	2109      	movs	r1, #9
 800ef0e:	f7ff ff7d 	bl	800ee0c <std>
 800ef12:	68e0      	ldr	r0, [r4, #12]
 800ef14:	2202      	movs	r2, #2
 800ef16:	2112      	movs	r1, #18
 800ef18:	f7ff ff78 	bl	800ee0c <std>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	61a3      	str	r3, [r4, #24]
 800ef20:	e7d2      	b.n	800eec8 <__sinit+0xc>
 800ef22:	bf00      	nop
 800ef24:	08010198 	.word	0x08010198
 800ef28:	0800ee55 	.word	0x0800ee55

0800ef2c <__sfp>:
 800ef2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2e:	4607      	mov	r7, r0
 800ef30:	f7ff ffac 	bl	800ee8c <__sfp_lock_acquire>
 800ef34:	4b1e      	ldr	r3, [pc, #120]	; (800efb0 <__sfp+0x84>)
 800ef36:	681e      	ldr	r6, [r3, #0]
 800ef38:	69b3      	ldr	r3, [r6, #24]
 800ef3a:	b913      	cbnz	r3, 800ef42 <__sfp+0x16>
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7ff ffbd 	bl	800eebc <__sinit>
 800ef42:	3648      	adds	r6, #72	; 0x48
 800ef44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	d503      	bpl.n	800ef54 <__sfp+0x28>
 800ef4c:	6833      	ldr	r3, [r6, #0]
 800ef4e:	b30b      	cbz	r3, 800ef94 <__sfp+0x68>
 800ef50:	6836      	ldr	r6, [r6, #0]
 800ef52:	e7f7      	b.n	800ef44 <__sfp+0x18>
 800ef54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef58:	b9d5      	cbnz	r5, 800ef90 <__sfp+0x64>
 800ef5a:	4b16      	ldr	r3, [pc, #88]	; (800efb4 <__sfp+0x88>)
 800ef5c:	60e3      	str	r3, [r4, #12]
 800ef5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef62:	6665      	str	r5, [r4, #100]	; 0x64
 800ef64:	f000 f847 	bl	800eff6 <__retarget_lock_init_recursive>
 800ef68:	f7ff ff96 	bl	800ee98 <__sfp_lock_release>
 800ef6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef74:	6025      	str	r5, [r4, #0]
 800ef76:	61a5      	str	r5, [r4, #24]
 800ef78:	2208      	movs	r2, #8
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef80:	f7fd faae 	bl	800c4e0 <memset>
 800ef84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef90:	3468      	adds	r4, #104	; 0x68
 800ef92:	e7d9      	b.n	800ef48 <__sfp+0x1c>
 800ef94:	2104      	movs	r1, #4
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7ff ff62 	bl	800ee60 <__sfmoreglue>
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	6030      	str	r0, [r6, #0]
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d1d5      	bne.n	800ef50 <__sfp+0x24>
 800efa4:	f7ff ff78 	bl	800ee98 <__sfp_lock_release>
 800efa8:	230c      	movs	r3, #12
 800efaa:	603b      	str	r3, [r7, #0]
 800efac:	e7ee      	b.n	800ef8c <__sfp+0x60>
 800efae:	bf00      	nop
 800efb0:	08010198 	.word	0x08010198
 800efb4:	ffff0001 	.word	0xffff0001

0800efb8 <_fwalk_reent>:
 800efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efbc:	4606      	mov	r6, r0
 800efbe:	4688      	mov	r8, r1
 800efc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efc4:	2700      	movs	r7, #0
 800efc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efca:	f1b9 0901 	subs.w	r9, r9, #1
 800efce:	d505      	bpl.n	800efdc <_fwalk_reent+0x24>
 800efd0:	6824      	ldr	r4, [r4, #0]
 800efd2:	2c00      	cmp	r4, #0
 800efd4:	d1f7      	bne.n	800efc6 <_fwalk_reent+0xe>
 800efd6:	4638      	mov	r0, r7
 800efd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efdc:	89ab      	ldrh	r3, [r5, #12]
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d907      	bls.n	800eff2 <_fwalk_reent+0x3a>
 800efe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efe6:	3301      	adds	r3, #1
 800efe8:	d003      	beq.n	800eff2 <_fwalk_reent+0x3a>
 800efea:	4629      	mov	r1, r5
 800efec:	4630      	mov	r0, r6
 800efee:	47c0      	blx	r8
 800eff0:	4307      	orrs	r7, r0
 800eff2:	3568      	adds	r5, #104	; 0x68
 800eff4:	e7e9      	b.n	800efca <_fwalk_reent+0x12>

0800eff6 <__retarget_lock_init_recursive>:
 800eff6:	4770      	bx	lr

0800eff8 <__retarget_lock_acquire_recursive>:
 800eff8:	4770      	bx	lr

0800effa <__retarget_lock_release_recursive>:
 800effa:	4770      	bx	lr

0800effc <__swhatbuf_r>:
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	460e      	mov	r6, r1
 800f000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f004:	2900      	cmp	r1, #0
 800f006:	b096      	sub	sp, #88	; 0x58
 800f008:	4614      	mov	r4, r2
 800f00a:	461d      	mov	r5, r3
 800f00c:	da08      	bge.n	800f020 <__swhatbuf_r+0x24>
 800f00e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	602a      	str	r2, [r5, #0]
 800f016:	061a      	lsls	r2, r3, #24
 800f018:	d410      	bmi.n	800f03c <__swhatbuf_r+0x40>
 800f01a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f01e:	e00e      	b.n	800f03e <__swhatbuf_r+0x42>
 800f020:	466a      	mov	r2, sp
 800f022:	f000 f903 	bl	800f22c <_fstat_r>
 800f026:	2800      	cmp	r0, #0
 800f028:	dbf1      	blt.n	800f00e <__swhatbuf_r+0x12>
 800f02a:	9a01      	ldr	r2, [sp, #4]
 800f02c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f030:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f034:	425a      	negs	r2, r3
 800f036:	415a      	adcs	r2, r3
 800f038:	602a      	str	r2, [r5, #0]
 800f03a:	e7ee      	b.n	800f01a <__swhatbuf_r+0x1e>
 800f03c:	2340      	movs	r3, #64	; 0x40
 800f03e:	2000      	movs	r0, #0
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	b016      	add	sp, #88	; 0x58
 800f044:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f048 <__smakebuf_r>:
 800f048:	898b      	ldrh	r3, [r1, #12]
 800f04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f04c:	079d      	lsls	r5, r3, #30
 800f04e:	4606      	mov	r6, r0
 800f050:	460c      	mov	r4, r1
 800f052:	d507      	bpl.n	800f064 <__smakebuf_r+0x1c>
 800f054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	6123      	str	r3, [r4, #16]
 800f05c:	2301      	movs	r3, #1
 800f05e:	6163      	str	r3, [r4, #20]
 800f060:	b002      	add	sp, #8
 800f062:	bd70      	pop	{r4, r5, r6, pc}
 800f064:	ab01      	add	r3, sp, #4
 800f066:	466a      	mov	r2, sp
 800f068:	f7ff ffc8 	bl	800effc <__swhatbuf_r>
 800f06c:	9900      	ldr	r1, [sp, #0]
 800f06e:	4605      	mov	r5, r0
 800f070:	4630      	mov	r0, r6
 800f072:	f7ff f963 	bl	800e33c <_malloc_r>
 800f076:	b948      	cbnz	r0, 800f08c <__smakebuf_r+0x44>
 800f078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f07c:	059a      	lsls	r2, r3, #22
 800f07e:	d4ef      	bmi.n	800f060 <__smakebuf_r+0x18>
 800f080:	f023 0303 	bic.w	r3, r3, #3
 800f084:	f043 0302 	orr.w	r3, r3, #2
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	e7e3      	b.n	800f054 <__smakebuf_r+0xc>
 800f08c:	4b0d      	ldr	r3, [pc, #52]	; (800f0c4 <__smakebuf_r+0x7c>)
 800f08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	6020      	str	r0, [r4, #0]
 800f094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	9b00      	ldr	r3, [sp, #0]
 800f09c:	6163      	str	r3, [r4, #20]
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	6120      	str	r0, [r4, #16]
 800f0a2:	b15b      	cbz	r3, 800f0bc <__smakebuf_r+0x74>
 800f0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	f000 f8d1 	bl	800f250 <_isatty_r>
 800f0ae:	b128      	cbz	r0, 800f0bc <__smakebuf_r+0x74>
 800f0b0:	89a3      	ldrh	r3, [r4, #12]
 800f0b2:	f023 0303 	bic.w	r3, r3, #3
 800f0b6:	f043 0301 	orr.w	r3, r3, #1
 800f0ba:	81a3      	strh	r3, [r4, #12]
 800f0bc:	89a0      	ldrh	r0, [r4, #12]
 800f0be:	4305      	orrs	r5, r0
 800f0c0:	81a5      	strh	r5, [r4, #12]
 800f0c2:	e7cd      	b.n	800f060 <__smakebuf_r+0x18>
 800f0c4:	0800ee55 	.word	0x0800ee55

0800f0c8 <_malloc_usable_size_r>:
 800f0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0cc:	1f18      	subs	r0, r3, #4
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	bfbc      	itt	lt
 800f0d2:	580b      	ldrlt	r3, [r1, r0]
 800f0d4:	18c0      	addlt	r0, r0, r3
 800f0d6:	4770      	bx	lr

0800f0d8 <_raise_r>:
 800f0d8:	291f      	cmp	r1, #31
 800f0da:	b538      	push	{r3, r4, r5, lr}
 800f0dc:	4604      	mov	r4, r0
 800f0de:	460d      	mov	r5, r1
 800f0e0:	d904      	bls.n	800f0ec <_raise_r+0x14>
 800f0e2:	2316      	movs	r3, #22
 800f0e4:	6003      	str	r3, [r0, #0]
 800f0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0ee:	b112      	cbz	r2, 800f0f6 <_raise_r+0x1e>
 800f0f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0f4:	b94b      	cbnz	r3, 800f10a <_raise_r+0x32>
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 f830 	bl	800f15c <_getpid_r>
 800f0fc:	462a      	mov	r2, r5
 800f0fe:	4601      	mov	r1, r0
 800f100:	4620      	mov	r0, r4
 800f102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f106:	f000 b817 	b.w	800f138 <_kill_r>
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d00a      	beq.n	800f124 <_raise_r+0x4c>
 800f10e:	1c59      	adds	r1, r3, #1
 800f110:	d103      	bne.n	800f11a <_raise_r+0x42>
 800f112:	2316      	movs	r3, #22
 800f114:	6003      	str	r3, [r0, #0]
 800f116:	2001      	movs	r0, #1
 800f118:	e7e7      	b.n	800f0ea <_raise_r+0x12>
 800f11a:	2400      	movs	r4, #0
 800f11c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f120:	4628      	mov	r0, r5
 800f122:	4798      	blx	r3
 800f124:	2000      	movs	r0, #0
 800f126:	e7e0      	b.n	800f0ea <_raise_r+0x12>

0800f128 <raise>:
 800f128:	4b02      	ldr	r3, [pc, #8]	; (800f134 <raise+0xc>)
 800f12a:	4601      	mov	r1, r0
 800f12c:	6818      	ldr	r0, [r3, #0]
 800f12e:	f7ff bfd3 	b.w	800f0d8 <_raise_r>
 800f132:	bf00      	nop
 800f134:	2000002c 	.word	0x2000002c

0800f138 <_kill_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4d07      	ldr	r5, [pc, #28]	; (800f158 <_kill_r+0x20>)
 800f13c:	2300      	movs	r3, #0
 800f13e:	4604      	mov	r4, r0
 800f140:	4608      	mov	r0, r1
 800f142:	4611      	mov	r1, r2
 800f144:	602b      	str	r3, [r5, #0]
 800f146:	f7f6 f805 	bl	8005154 <_kill>
 800f14a:	1c43      	adds	r3, r0, #1
 800f14c:	d102      	bne.n	800f154 <_kill_r+0x1c>
 800f14e:	682b      	ldr	r3, [r5, #0]
 800f150:	b103      	cbz	r3, 800f154 <_kill_r+0x1c>
 800f152:	6023      	str	r3, [r4, #0]
 800f154:	bd38      	pop	{r3, r4, r5, pc}
 800f156:	bf00      	nop
 800f158:	200007a4 	.word	0x200007a4

0800f15c <_getpid_r>:
 800f15c:	f7f5 bff2 	b.w	8005144 <_getpid>

0800f160 <__sread>:
 800f160:	b510      	push	{r4, lr}
 800f162:	460c      	mov	r4, r1
 800f164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f168:	f000 f894 	bl	800f294 <_read_r>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	bfab      	itete	ge
 800f170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f172:	89a3      	ldrhlt	r3, [r4, #12]
 800f174:	181b      	addge	r3, r3, r0
 800f176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f17a:	bfac      	ite	ge
 800f17c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f17e:	81a3      	strhlt	r3, [r4, #12]
 800f180:	bd10      	pop	{r4, pc}

0800f182 <__swrite>:
 800f182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f186:	461f      	mov	r7, r3
 800f188:	898b      	ldrh	r3, [r1, #12]
 800f18a:	05db      	lsls	r3, r3, #23
 800f18c:	4605      	mov	r5, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	4616      	mov	r6, r2
 800f192:	d505      	bpl.n	800f1a0 <__swrite+0x1e>
 800f194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f198:	2302      	movs	r3, #2
 800f19a:	2200      	movs	r2, #0
 800f19c:	f000 f868 	bl	800f270 <_lseek_r>
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	4632      	mov	r2, r6
 800f1ae:	463b      	mov	r3, r7
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b6:	f000 b817 	b.w	800f1e8 <_write_r>

0800f1ba <__sseek>:
 800f1ba:	b510      	push	{r4, lr}
 800f1bc:	460c      	mov	r4, r1
 800f1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c2:	f000 f855 	bl	800f270 <_lseek_r>
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	bf15      	itete	ne
 800f1cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1d6:	81a3      	strheq	r3, [r4, #12]
 800f1d8:	bf18      	it	ne
 800f1da:	81a3      	strhne	r3, [r4, #12]
 800f1dc:	bd10      	pop	{r4, pc}

0800f1de <__sclose>:
 800f1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e2:	f000 b813 	b.w	800f20c <_close_r>
	...

0800f1e8 <_write_r>:
 800f1e8:	b538      	push	{r3, r4, r5, lr}
 800f1ea:	4d07      	ldr	r5, [pc, #28]	; (800f208 <_write_r+0x20>)
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	4608      	mov	r0, r1
 800f1f0:	4611      	mov	r1, r2
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	602a      	str	r2, [r5, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	f7f5 ffe3 	bl	80051c2 <_write>
 800f1fc:	1c43      	adds	r3, r0, #1
 800f1fe:	d102      	bne.n	800f206 <_write_r+0x1e>
 800f200:	682b      	ldr	r3, [r5, #0]
 800f202:	b103      	cbz	r3, 800f206 <_write_r+0x1e>
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	bd38      	pop	{r3, r4, r5, pc}
 800f208:	200007a4 	.word	0x200007a4

0800f20c <_close_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4d06      	ldr	r5, [pc, #24]	; (800f228 <_close_r+0x1c>)
 800f210:	2300      	movs	r3, #0
 800f212:	4604      	mov	r4, r0
 800f214:	4608      	mov	r0, r1
 800f216:	602b      	str	r3, [r5, #0]
 800f218:	f7f5 ffef 	bl	80051fa <_close>
 800f21c:	1c43      	adds	r3, r0, #1
 800f21e:	d102      	bne.n	800f226 <_close_r+0x1a>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	b103      	cbz	r3, 800f226 <_close_r+0x1a>
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	bd38      	pop	{r3, r4, r5, pc}
 800f228:	200007a4 	.word	0x200007a4

0800f22c <_fstat_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4d07      	ldr	r5, [pc, #28]	; (800f24c <_fstat_r+0x20>)
 800f230:	2300      	movs	r3, #0
 800f232:	4604      	mov	r4, r0
 800f234:	4608      	mov	r0, r1
 800f236:	4611      	mov	r1, r2
 800f238:	602b      	str	r3, [r5, #0]
 800f23a:	f7f5 ffea 	bl	8005212 <_fstat>
 800f23e:	1c43      	adds	r3, r0, #1
 800f240:	d102      	bne.n	800f248 <_fstat_r+0x1c>
 800f242:	682b      	ldr	r3, [r5, #0]
 800f244:	b103      	cbz	r3, 800f248 <_fstat_r+0x1c>
 800f246:	6023      	str	r3, [r4, #0]
 800f248:	bd38      	pop	{r3, r4, r5, pc}
 800f24a:	bf00      	nop
 800f24c:	200007a4 	.word	0x200007a4

0800f250 <_isatty_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4d06      	ldr	r5, [pc, #24]	; (800f26c <_isatty_r+0x1c>)
 800f254:	2300      	movs	r3, #0
 800f256:	4604      	mov	r4, r0
 800f258:	4608      	mov	r0, r1
 800f25a:	602b      	str	r3, [r5, #0]
 800f25c:	f7f5 ffe9 	bl	8005232 <_isatty>
 800f260:	1c43      	adds	r3, r0, #1
 800f262:	d102      	bne.n	800f26a <_isatty_r+0x1a>
 800f264:	682b      	ldr	r3, [r5, #0]
 800f266:	b103      	cbz	r3, 800f26a <_isatty_r+0x1a>
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	bd38      	pop	{r3, r4, r5, pc}
 800f26c:	200007a4 	.word	0x200007a4

0800f270 <_lseek_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d07      	ldr	r5, [pc, #28]	; (800f290 <_lseek_r+0x20>)
 800f274:	4604      	mov	r4, r0
 800f276:	4608      	mov	r0, r1
 800f278:	4611      	mov	r1, r2
 800f27a:	2200      	movs	r2, #0
 800f27c:	602a      	str	r2, [r5, #0]
 800f27e:	461a      	mov	r2, r3
 800f280:	f7f5 ffe2 	bl	8005248 <_lseek>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d102      	bne.n	800f28e <_lseek_r+0x1e>
 800f288:	682b      	ldr	r3, [r5, #0]
 800f28a:	b103      	cbz	r3, 800f28e <_lseek_r+0x1e>
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	bd38      	pop	{r3, r4, r5, pc}
 800f290:	200007a4 	.word	0x200007a4

0800f294 <_read_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	4d07      	ldr	r5, [pc, #28]	; (800f2b4 <_read_r+0x20>)
 800f298:	4604      	mov	r4, r0
 800f29a:	4608      	mov	r0, r1
 800f29c:	4611      	mov	r1, r2
 800f29e:	2200      	movs	r2, #0
 800f2a0:	602a      	str	r2, [r5, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	f7f5 ff70 	bl	8005188 <_read>
 800f2a8:	1c43      	adds	r3, r0, #1
 800f2aa:	d102      	bne.n	800f2b2 <_read_r+0x1e>
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	b103      	cbz	r3, 800f2b2 <_read_r+0x1e>
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	bd38      	pop	{r3, r4, r5, pc}
 800f2b4:	200007a4 	.word	0x200007a4

0800f2b8 <cosf>:
 800f2b8:	ee10 3a10 	vmov	r3, s0
 800f2bc:	b507      	push	{r0, r1, r2, lr}
 800f2be:	4a1e      	ldr	r2, [pc, #120]	; (800f338 <cosf+0x80>)
 800f2c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	dc06      	bgt.n	800f2d6 <cosf+0x1e>
 800f2c8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f33c <cosf+0x84>
 800f2cc:	b003      	add	sp, #12
 800f2ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d2:	f000 bacd 	b.w	800f870 <__kernel_cosf>
 800f2d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f2da:	db04      	blt.n	800f2e6 <cosf+0x2e>
 800f2dc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f2e0:	b003      	add	sp, #12
 800f2e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2e6:	4668      	mov	r0, sp
 800f2e8:	f000 f982 	bl	800f5f0 <__ieee754_rem_pio2f>
 800f2ec:	f000 0003 	and.w	r0, r0, #3
 800f2f0:	2801      	cmp	r0, #1
 800f2f2:	d009      	beq.n	800f308 <cosf+0x50>
 800f2f4:	2802      	cmp	r0, #2
 800f2f6:	d010      	beq.n	800f31a <cosf+0x62>
 800f2f8:	b9b0      	cbnz	r0, 800f328 <cosf+0x70>
 800f2fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2fe:	ed9d 0a00 	vldr	s0, [sp]
 800f302:	f000 fab5 	bl	800f870 <__kernel_cosf>
 800f306:	e7eb      	b.n	800f2e0 <cosf+0x28>
 800f308:	eddd 0a01 	vldr	s1, [sp, #4]
 800f30c:	ed9d 0a00 	vldr	s0, [sp]
 800f310:	f000 fd84 	bl	800fe1c <__kernel_sinf>
 800f314:	eeb1 0a40 	vneg.f32	s0, s0
 800f318:	e7e2      	b.n	800f2e0 <cosf+0x28>
 800f31a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f31e:	ed9d 0a00 	vldr	s0, [sp]
 800f322:	f000 faa5 	bl	800f870 <__kernel_cosf>
 800f326:	e7f5      	b.n	800f314 <cosf+0x5c>
 800f328:	eddd 0a01 	vldr	s1, [sp, #4]
 800f32c:	ed9d 0a00 	vldr	s0, [sp]
 800f330:	2001      	movs	r0, #1
 800f332:	f000 fd73 	bl	800fe1c <__kernel_sinf>
 800f336:	e7d3      	b.n	800f2e0 <cosf+0x28>
 800f338:	3f490fd8 	.word	0x3f490fd8
 800f33c:	00000000 	.word	0x00000000

0800f340 <fmaxf>:
 800f340:	b508      	push	{r3, lr}
 800f342:	ed2d 8b02 	vpush	{d8}
 800f346:	eeb0 8a40 	vmov.f32	s16, s0
 800f34a:	eef0 8a60 	vmov.f32	s17, s1
 800f34e:	f000 f82d 	bl	800f3ac <__fpclassifyf>
 800f352:	b148      	cbz	r0, 800f368 <fmaxf+0x28>
 800f354:	eeb0 0a68 	vmov.f32	s0, s17
 800f358:	f000 f828 	bl	800f3ac <__fpclassifyf>
 800f35c:	b130      	cbz	r0, 800f36c <fmaxf+0x2c>
 800f35e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f366:	dc01      	bgt.n	800f36c <fmaxf+0x2c>
 800f368:	eeb0 8a68 	vmov.f32	s16, s17
 800f36c:	eeb0 0a48 	vmov.f32	s0, s16
 800f370:	ecbd 8b02 	vpop	{d8}
 800f374:	bd08      	pop	{r3, pc}

0800f376 <fminf>:
 800f376:	b508      	push	{r3, lr}
 800f378:	ed2d 8b02 	vpush	{d8}
 800f37c:	eeb0 8a40 	vmov.f32	s16, s0
 800f380:	eef0 8a60 	vmov.f32	s17, s1
 800f384:	f000 f812 	bl	800f3ac <__fpclassifyf>
 800f388:	b148      	cbz	r0, 800f39e <fminf+0x28>
 800f38a:	eeb0 0a68 	vmov.f32	s0, s17
 800f38e:	f000 f80d 	bl	800f3ac <__fpclassifyf>
 800f392:	b130      	cbz	r0, 800f3a2 <fminf+0x2c>
 800f394:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39c:	d401      	bmi.n	800f3a2 <fminf+0x2c>
 800f39e:	eeb0 8a68 	vmov.f32	s16, s17
 800f3a2:	eeb0 0a48 	vmov.f32	s0, s16
 800f3a6:	ecbd 8b02 	vpop	{d8}
 800f3aa:	bd08      	pop	{r3, pc}

0800f3ac <__fpclassifyf>:
 800f3ac:	ee10 3a10 	vmov	r3, s0
 800f3b0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800f3b4:	d00d      	beq.n	800f3d2 <__fpclassifyf+0x26>
 800f3b6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800f3ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f3be:	d30a      	bcc.n	800f3d6 <__fpclassifyf+0x2a>
 800f3c0:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <__fpclassifyf+0x34>)
 800f3c2:	1e42      	subs	r2, r0, #1
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d908      	bls.n	800f3da <__fpclassifyf+0x2e>
 800f3c8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800f3cc:	4258      	negs	r0, r3
 800f3ce:	4158      	adcs	r0, r3
 800f3d0:	4770      	bx	lr
 800f3d2:	2002      	movs	r0, #2
 800f3d4:	4770      	bx	lr
 800f3d6:	2004      	movs	r0, #4
 800f3d8:	4770      	bx	lr
 800f3da:	2003      	movs	r0, #3
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	007ffffe 	.word	0x007ffffe

0800f3e4 <sinf>:
 800f3e4:	ee10 3a10 	vmov	r3, s0
 800f3e8:	b507      	push	{r0, r1, r2, lr}
 800f3ea:	4a1f      	ldr	r2, [pc, #124]	; (800f468 <sinf+0x84>)
 800f3ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	dc07      	bgt.n	800f404 <sinf+0x20>
 800f3f4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f46c <sinf+0x88>
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	b003      	add	sp, #12
 800f3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f400:	f000 bd0c 	b.w	800fe1c <__kernel_sinf>
 800f404:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f408:	db04      	blt.n	800f414 <sinf+0x30>
 800f40a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f40e:	b003      	add	sp, #12
 800f410:	f85d fb04 	ldr.w	pc, [sp], #4
 800f414:	4668      	mov	r0, sp
 800f416:	f000 f8eb 	bl	800f5f0 <__ieee754_rem_pio2f>
 800f41a:	f000 0003 	and.w	r0, r0, #3
 800f41e:	2801      	cmp	r0, #1
 800f420:	d00a      	beq.n	800f438 <sinf+0x54>
 800f422:	2802      	cmp	r0, #2
 800f424:	d00f      	beq.n	800f446 <sinf+0x62>
 800f426:	b9c0      	cbnz	r0, 800f45a <sinf+0x76>
 800f428:	eddd 0a01 	vldr	s1, [sp, #4]
 800f42c:	ed9d 0a00 	vldr	s0, [sp]
 800f430:	2001      	movs	r0, #1
 800f432:	f000 fcf3 	bl	800fe1c <__kernel_sinf>
 800f436:	e7ea      	b.n	800f40e <sinf+0x2a>
 800f438:	eddd 0a01 	vldr	s1, [sp, #4]
 800f43c:	ed9d 0a00 	vldr	s0, [sp]
 800f440:	f000 fa16 	bl	800f870 <__kernel_cosf>
 800f444:	e7e3      	b.n	800f40e <sinf+0x2a>
 800f446:	eddd 0a01 	vldr	s1, [sp, #4]
 800f44a:	ed9d 0a00 	vldr	s0, [sp]
 800f44e:	2001      	movs	r0, #1
 800f450:	f000 fce4 	bl	800fe1c <__kernel_sinf>
 800f454:	eeb1 0a40 	vneg.f32	s0, s0
 800f458:	e7d9      	b.n	800f40e <sinf+0x2a>
 800f45a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f45e:	ed9d 0a00 	vldr	s0, [sp]
 800f462:	f000 fa05 	bl	800f870 <__kernel_cosf>
 800f466:	e7f5      	b.n	800f454 <sinf+0x70>
 800f468:	3f490fd8 	.word	0x3f490fd8
 800f46c:	00000000 	.word	0x00000000

0800f470 <fmodf>:
 800f470:	b508      	push	{r3, lr}
 800f472:	ed2d 8b02 	vpush	{d8}
 800f476:	eef0 8a40 	vmov.f32	s17, s0
 800f47a:	eeb0 8a60 	vmov.f32	s16, s1
 800f47e:	f000 f835 	bl	800f4ec <__ieee754_fmodf>
 800f482:	eef4 8a48 	vcmp.f32	s17, s16
 800f486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48a:	d60c      	bvs.n	800f4a6 <fmodf+0x36>
 800f48c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f4ac <fmodf+0x3c>
 800f490:	eeb4 8a68 	vcmp.f32	s16, s17
 800f494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f498:	d105      	bne.n	800f4a6 <fmodf+0x36>
 800f49a:	f7fc fff7 	bl	800c48c <__errno>
 800f49e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f4a2:	2321      	movs	r3, #33	; 0x21
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	ecbd 8b02 	vpop	{d8}
 800f4aa:	bd08      	pop	{r3, pc}
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <sqrtf>:
 800f4b0:	b508      	push	{r3, lr}
 800f4b2:	ed2d 8b02 	vpush	{d8}
 800f4b6:	eeb0 8a40 	vmov.f32	s16, s0
 800f4ba:	f000 f9d5 	bl	800f868 <__ieee754_sqrtf>
 800f4be:	eeb4 8a48 	vcmp.f32	s16, s16
 800f4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c6:	d60c      	bvs.n	800f4e2 <sqrtf+0x32>
 800f4c8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f4e8 <sqrtf+0x38>
 800f4cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d4:	d505      	bpl.n	800f4e2 <sqrtf+0x32>
 800f4d6:	f7fc ffd9 	bl	800c48c <__errno>
 800f4da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f4de:	2321      	movs	r3, #33	; 0x21
 800f4e0:	6003      	str	r3, [r0, #0]
 800f4e2:	ecbd 8b02 	vpop	{d8}
 800f4e6:	bd08      	pop	{r3, pc}
 800f4e8:	00000000 	.word	0x00000000

0800f4ec <__ieee754_fmodf>:
 800f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ee:	ee10 5a90 	vmov	r5, s1
 800f4f2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800f4f6:	d009      	beq.n	800f50c <__ieee754_fmodf+0x20>
 800f4f8:	ee10 2a10 	vmov	r2, s0
 800f4fc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f500:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f504:	da02      	bge.n	800f50c <__ieee754_fmodf+0x20>
 800f506:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f50a:	dd04      	ble.n	800f516 <__ieee754_fmodf+0x2a>
 800f50c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f510:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f516:	42a3      	cmp	r3, r4
 800f518:	dbfc      	blt.n	800f514 <__ieee754_fmodf+0x28>
 800f51a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800f51e:	d105      	bne.n	800f52c <__ieee754_fmodf+0x40>
 800f520:	4b32      	ldr	r3, [pc, #200]	; (800f5ec <__ieee754_fmodf+0x100>)
 800f522:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800f526:	ed93 0a00 	vldr	s0, [r3]
 800f52a:	e7f3      	b.n	800f514 <__ieee754_fmodf+0x28>
 800f52c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800f530:	d13f      	bne.n	800f5b2 <__ieee754_fmodf+0xc6>
 800f532:	0219      	lsls	r1, r3, #8
 800f534:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800f538:	2900      	cmp	r1, #0
 800f53a:	dc37      	bgt.n	800f5ac <__ieee754_fmodf+0xc0>
 800f53c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800f540:	d13d      	bne.n	800f5be <__ieee754_fmodf+0xd2>
 800f542:	0227      	lsls	r7, r4, #8
 800f544:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800f548:	2f00      	cmp	r7, #0
 800f54a:	da35      	bge.n	800f5b8 <__ieee754_fmodf+0xcc>
 800f54c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800f550:	bfbb      	ittet	lt
 800f552:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f556:	1a12      	sublt	r2, r2, r0
 800f558:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800f55c:	4093      	lsllt	r3, r2
 800f55e:	bfa8      	it	ge
 800f560:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800f564:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f568:	bfb5      	itete	lt
 800f56a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f56e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800f572:	1a52      	sublt	r2, r2, r1
 800f574:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800f578:	bfb8      	it	lt
 800f57a:	4094      	lsllt	r4, r2
 800f57c:	1a40      	subs	r0, r0, r1
 800f57e:	1b1a      	subs	r2, r3, r4
 800f580:	bb00      	cbnz	r0, 800f5c4 <__ieee754_fmodf+0xd8>
 800f582:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800f586:	bf38      	it	cc
 800f588:	4613      	movcc	r3, r2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d0c8      	beq.n	800f520 <__ieee754_fmodf+0x34>
 800f58e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f592:	db1f      	blt.n	800f5d4 <__ieee754_fmodf+0xe8>
 800f594:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f598:	db1f      	blt.n	800f5da <__ieee754_fmodf+0xee>
 800f59a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800f59e:	317f      	adds	r1, #127	; 0x7f
 800f5a0:	4333      	orrs	r3, r6
 800f5a2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800f5a6:	ee00 3a10 	vmov	s0, r3
 800f5aa:	e7b3      	b.n	800f514 <__ieee754_fmodf+0x28>
 800f5ac:	3801      	subs	r0, #1
 800f5ae:	0049      	lsls	r1, r1, #1
 800f5b0:	e7c2      	b.n	800f538 <__ieee754_fmodf+0x4c>
 800f5b2:	15d8      	asrs	r0, r3, #23
 800f5b4:	387f      	subs	r0, #127	; 0x7f
 800f5b6:	e7c1      	b.n	800f53c <__ieee754_fmodf+0x50>
 800f5b8:	3901      	subs	r1, #1
 800f5ba:	007f      	lsls	r7, r7, #1
 800f5bc:	e7c4      	b.n	800f548 <__ieee754_fmodf+0x5c>
 800f5be:	15e1      	asrs	r1, r4, #23
 800f5c0:	397f      	subs	r1, #127	; 0x7f
 800f5c2:	e7c3      	b.n	800f54c <__ieee754_fmodf+0x60>
 800f5c4:	2a00      	cmp	r2, #0
 800f5c6:	da02      	bge.n	800f5ce <__ieee754_fmodf+0xe2>
 800f5c8:	005b      	lsls	r3, r3, #1
 800f5ca:	3801      	subs	r0, #1
 800f5cc:	e7d7      	b.n	800f57e <__ieee754_fmodf+0x92>
 800f5ce:	d0a7      	beq.n	800f520 <__ieee754_fmodf+0x34>
 800f5d0:	0053      	lsls	r3, r2, #1
 800f5d2:	e7fa      	b.n	800f5ca <__ieee754_fmodf+0xde>
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	3901      	subs	r1, #1
 800f5d8:	e7d9      	b.n	800f58e <__ieee754_fmodf+0xa2>
 800f5da:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800f5de:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800f5e2:	3182      	adds	r1, #130	; 0x82
 800f5e4:	410b      	asrs	r3, r1
 800f5e6:	4333      	orrs	r3, r6
 800f5e8:	e7dd      	b.n	800f5a6 <__ieee754_fmodf+0xba>
 800f5ea:	bf00      	nop
 800f5ec:	08010574 	.word	0x08010574

0800f5f0 <__ieee754_rem_pio2f>:
 800f5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5f2:	ee10 6a10 	vmov	r6, s0
 800f5f6:	4b8e      	ldr	r3, [pc, #568]	; (800f830 <__ieee754_rem_pio2f+0x240>)
 800f5f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f5fc:	429d      	cmp	r5, r3
 800f5fe:	b087      	sub	sp, #28
 800f600:	eef0 7a40 	vmov.f32	s15, s0
 800f604:	4604      	mov	r4, r0
 800f606:	dc05      	bgt.n	800f614 <__ieee754_rem_pio2f+0x24>
 800f608:	2300      	movs	r3, #0
 800f60a:	ed80 0a00 	vstr	s0, [r0]
 800f60e:	6043      	str	r3, [r0, #4]
 800f610:	2000      	movs	r0, #0
 800f612:	e01a      	b.n	800f64a <__ieee754_rem_pio2f+0x5a>
 800f614:	4b87      	ldr	r3, [pc, #540]	; (800f834 <__ieee754_rem_pio2f+0x244>)
 800f616:	429d      	cmp	r5, r3
 800f618:	dc46      	bgt.n	800f6a8 <__ieee754_rem_pio2f+0xb8>
 800f61a:	2e00      	cmp	r6, #0
 800f61c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f838 <__ieee754_rem_pio2f+0x248>
 800f620:	4b86      	ldr	r3, [pc, #536]	; (800f83c <__ieee754_rem_pio2f+0x24c>)
 800f622:	f025 050f 	bic.w	r5, r5, #15
 800f626:	dd1f      	ble.n	800f668 <__ieee754_rem_pio2f+0x78>
 800f628:	429d      	cmp	r5, r3
 800f62a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f62e:	d00e      	beq.n	800f64e <__ieee754_rem_pio2f+0x5e>
 800f630:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f840 <__ieee754_rem_pio2f+0x250>
 800f634:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f638:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f63c:	ed80 0a00 	vstr	s0, [r0]
 800f640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f644:	2001      	movs	r0, #1
 800f646:	edc4 7a01 	vstr	s15, [r4, #4]
 800f64a:	b007      	add	sp, #28
 800f64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f64e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f844 <__ieee754_rem_pio2f+0x254>
 800f652:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f848 <__ieee754_rem_pio2f+0x258>
 800f656:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f65a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f65e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f662:	edc0 6a00 	vstr	s13, [r0]
 800f666:	e7eb      	b.n	800f640 <__ieee754_rem_pio2f+0x50>
 800f668:	429d      	cmp	r5, r3
 800f66a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f66e:	d00e      	beq.n	800f68e <__ieee754_rem_pio2f+0x9e>
 800f670:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f840 <__ieee754_rem_pio2f+0x250>
 800f674:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f678:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f67c:	ed80 0a00 	vstr	s0, [r0]
 800f680:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f684:	f04f 30ff 	mov.w	r0, #4294967295
 800f688:	edc4 7a01 	vstr	s15, [r4, #4]
 800f68c:	e7dd      	b.n	800f64a <__ieee754_rem_pio2f+0x5a>
 800f68e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f844 <__ieee754_rem_pio2f+0x254>
 800f692:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f848 <__ieee754_rem_pio2f+0x258>
 800f696:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f69a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f69e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f6a2:	edc0 6a00 	vstr	s13, [r0]
 800f6a6:	e7eb      	b.n	800f680 <__ieee754_rem_pio2f+0x90>
 800f6a8:	4b68      	ldr	r3, [pc, #416]	; (800f84c <__ieee754_rem_pio2f+0x25c>)
 800f6aa:	429d      	cmp	r5, r3
 800f6ac:	dc72      	bgt.n	800f794 <__ieee754_rem_pio2f+0x1a4>
 800f6ae:	f000 fbfd 	bl	800feac <fabsf>
 800f6b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f850 <__ieee754_rem_pio2f+0x260>
 800f6b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f6ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f6be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6c6:	ee17 0a90 	vmov	r0, s15
 800f6ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f838 <__ieee754_rem_pio2f+0x248>
 800f6ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f6d2:	281f      	cmp	r0, #31
 800f6d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f840 <__ieee754_rem_pio2f+0x250>
 800f6d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6dc:	eeb1 6a47 	vneg.f32	s12, s14
 800f6e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f6e4:	ee16 2a90 	vmov	r2, s13
 800f6e8:	dc1c      	bgt.n	800f724 <__ieee754_rem_pio2f+0x134>
 800f6ea:	495a      	ldr	r1, [pc, #360]	; (800f854 <__ieee754_rem_pio2f+0x264>)
 800f6ec:	1e47      	subs	r7, r0, #1
 800f6ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f6f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f6f6:	428b      	cmp	r3, r1
 800f6f8:	d014      	beq.n	800f724 <__ieee754_rem_pio2f+0x134>
 800f6fa:	6022      	str	r2, [r4, #0]
 800f6fc:	ed94 7a00 	vldr	s14, [r4]
 800f700:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f704:	2e00      	cmp	r6, #0
 800f706:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f70a:	ed84 0a01 	vstr	s0, [r4, #4]
 800f70e:	da9c      	bge.n	800f64a <__ieee754_rem_pio2f+0x5a>
 800f710:	eeb1 7a47 	vneg.f32	s14, s14
 800f714:	eeb1 0a40 	vneg.f32	s0, s0
 800f718:	ed84 7a00 	vstr	s14, [r4]
 800f71c:	ed84 0a01 	vstr	s0, [r4, #4]
 800f720:	4240      	negs	r0, r0
 800f722:	e792      	b.n	800f64a <__ieee754_rem_pio2f+0x5a>
 800f724:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f728:	15eb      	asrs	r3, r5, #23
 800f72a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f72e:	2d08      	cmp	r5, #8
 800f730:	dde3      	ble.n	800f6fa <__ieee754_rem_pio2f+0x10a>
 800f732:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f844 <__ieee754_rem_pio2f+0x254>
 800f736:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f848 <__ieee754_rem_pio2f+0x258>
 800f73a:	eef0 6a40 	vmov.f32	s13, s0
 800f73e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f742:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f746:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f74a:	eef0 7a40 	vmov.f32	s15, s0
 800f74e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f752:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f756:	ee15 2a90 	vmov	r2, s11
 800f75a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f75e:	1a5b      	subs	r3, r3, r1
 800f760:	2b19      	cmp	r3, #25
 800f762:	dc04      	bgt.n	800f76e <__ieee754_rem_pio2f+0x17e>
 800f764:	edc4 5a00 	vstr	s11, [r4]
 800f768:	eeb0 0a66 	vmov.f32	s0, s13
 800f76c:	e7c6      	b.n	800f6fc <__ieee754_rem_pio2f+0x10c>
 800f76e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f858 <__ieee754_rem_pio2f+0x268>
 800f772:	eeb0 0a66 	vmov.f32	s0, s13
 800f776:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f77a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f77e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f85c <__ieee754_rem_pio2f+0x26c>
 800f782:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f786:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f78a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f78e:	ed84 7a00 	vstr	s14, [r4]
 800f792:	e7b3      	b.n	800f6fc <__ieee754_rem_pio2f+0x10c>
 800f794:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f798:	db06      	blt.n	800f7a8 <__ieee754_rem_pio2f+0x1b8>
 800f79a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f79e:	edc0 7a01 	vstr	s15, [r0, #4]
 800f7a2:	edc0 7a00 	vstr	s15, [r0]
 800f7a6:	e733      	b.n	800f610 <__ieee754_rem_pio2f+0x20>
 800f7a8:	15ea      	asrs	r2, r5, #23
 800f7aa:	3a86      	subs	r2, #134	; 0x86
 800f7ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f7b0:	ee07 3a90 	vmov	s15, r3
 800f7b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f7b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f860 <__ieee754_rem_pio2f+0x270>
 800f7bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f7c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7c4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f7c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f7d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f7d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7d8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f7dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e8:	edcd 7a05 	vstr	s15, [sp, #20]
 800f7ec:	d11e      	bne.n	800f82c <__ieee754_rem_pio2f+0x23c>
 800f7ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f6:	bf14      	ite	ne
 800f7f8:	2302      	movne	r3, #2
 800f7fa:	2301      	moveq	r3, #1
 800f7fc:	4919      	ldr	r1, [pc, #100]	; (800f864 <__ieee754_rem_pio2f+0x274>)
 800f7fe:	9101      	str	r1, [sp, #4]
 800f800:	2102      	movs	r1, #2
 800f802:	9100      	str	r1, [sp, #0]
 800f804:	a803      	add	r0, sp, #12
 800f806:	4621      	mov	r1, r4
 800f808:	f000 f892 	bl	800f930 <__kernel_rem_pio2f>
 800f80c:	2e00      	cmp	r6, #0
 800f80e:	f6bf af1c 	bge.w	800f64a <__ieee754_rem_pio2f+0x5a>
 800f812:	edd4 7a00 	vldr	s15, [r4]
 800f816:	eef1 7a67 	vneg.f32	s15, s15
 800f81a:	edc4 7a00 	vstr	s15, [r4]
 800f81e:	edd4 7a01 	vldr	s15, [r4, #4]
 800f822:	eef1 7a67 	vneg.f32	s15, s15
 800f826:	edc4 7a01 	vstr	s15, [r4, #4]
 800f82a:	e779      	b.n	800f720 <__ieee754_rem_pio2f+0x130>
 800f82c:	2303      	movs	r3, #3
 800f82e:	e7e5      	b.n	800f7fc <__ieee754_rem_pio2f+0x20c>
 800f830:	3f490fd8 	.word	0x3f490fd8
 800f834:	4016cbe3 	.word	0x4016cbe3
 800f838:	3fc90f80 	.word	0x3fc90f80
 800f83c:	3fc90fd0 	.word	0x3fc90fd0
 800f840:	37354443 	.word	0x37354443
 800f844:	37354400 	.word	0x37354400
 800f848:	2e85a308 	.word	0x2e85a308
 800f84c:	43490f80 	.word	0x43490f80
 800f850:	3f22f984 	.word	0x3f22f984
 800f854:	0801057c 	.word	0x0801057c
 800f858:	2e85a300 	.word	0x2e85a300
 800f85c:	248d3132 	.word	0x248d3132
 800f860:	43800000 	.word	0x43800000
 800f864:	080105fc 	.word	0x080105fc

0800f868 <__ieee754_sqrtf>:
 800f868:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f86c:	4770      	bx	lr
	...

0800f870 <__kernel_cosf>:
 800f870:	ee10 3a10 	vmov	r3, s0
 800f874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f878:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f87c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f880:	da05      	bge.n	800f88e <__kernel_cosf+0x1e>
 800f882:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f886:	ee17 2a90 	vmov	r2, s15
 800f88a:	2a00      	cmp	r2, #0
 800f88c:	d03d      	beq.n	800f90a <__kernel_cosf+0x9a>
 800f88e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800f892:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f910 <__kernel_cosf+0xa0>
 800f896:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f914 <__kernel_cosf+0xa4>
 800f89a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800f918 <__kernel_cosf+0xa8>
 800f89e:	4a1f      	ldr	r2, [pc, #124]	; (800f91c <__kernel_cosf+0xac>)
 800f8a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f920 <__kernel_cosf+0xb0>
 800f8aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f8ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800f924 <__kernel_cosf+0xb4>
 800f8b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f8b6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800f928 <__kernel_cosf+0xb8>
 800f8ba:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f8be:	eeb0 7a66 	vmov.f32	s14, s13
 800f8c2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f8c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f8ca:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800f8ce:	ee67 6a25 	vmul.f32	s13, s14, s11
 800f8d2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800f8d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f8da:	dc04      	bgt.n	800f8e6 <__kernel_cosf+0x76>
 800f8dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f8e0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800f8e4:	4770      	bx	lr
 800f8e6:	4a11      	ldr	r2, [pc, #68]	; (800f92c <__kernel_cosf+0xbc>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	bfda      	itte	le
 800f8ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f8f0:	ee06 3a90 	vmovle	s13, r3
 800f8f4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800f8f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f8fc:	ee36 0a66 	vsub.f32	s0, s12, s13
 800f900:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f904:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f908:	4770      	bx	lr
 800f90a:	eeb0 0a46 	vmov.f32	s0, s12
 800f90e:	4770      	bx	lr
 800f910:	ad47d74e 	.word	0xad47d74e
 800f914:	310f74f6 	.word	0x310f74f6
 800f918:	3d2aaaab 	.word	0x3d2aaaab
 800f91c:	3e999999 	.word	0x3e999999
 800f920:	b493f27c 	.word	0xb493f27c
 800f924:	37d00d01 	.word	0x37d00d01
 800f928:	bab60b61 	.word	0xbab60b61
 800f92c:	3f480000 	.word	0x3f480000

0800f930 <__kernel_rem_pio2f>:
 800f930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f934:	ed2d 8b04 	vpush	{d8-d9}
 800f938:	b0d9      	sub	sp, #356	; 0x164
 800f93a:	4688      	mov	r8, r1
 800f93c:	9002      	str	r0, [sp, #8]
 800f93e:	49bb      	ldr	r1, [pc, #748]	; (800fc2c <__kernel_rem_pio2f+0x2fc>)
 800f940:	9866      	ldr	r0, [sp, #408]	; 0x198
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800f948:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800f94c:	1e59      	subs	r1, r3, #1
 800f94e:	1d13      	adds	r3, r2, #4
 800f950:	db27      	blt.n	800f9a2 <__kernel_rem_pio2f+0x72>
 800f952:	f1b2 0b03 	subs.w	fp, r2, #3
 800f956:	bf48      	it	mi
 800f958:	f102 0b04 	addmi.w	fp, r2, #4
 800f95c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800f960:	1c45      	adds	r5, r0, #1
 800f962:	00ec      	lsls	r4, r5, #3
 800f964:	1a47      	subs	r7, r0, r1
 800f966:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800f96a:	9403      	str	r4, [sp, #12]
 800f96c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800f970:	eb0a 0c01 	add.w	ip, sl, r1
 800f974:	ae1c      	add	r6, sp, #112	; 0x70
 800f976:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800f97a:	2400      	movs	r4, #0
 800f97c:	4564      	cmp	r4, ip
 800f97e:	dd12      	ble.n	800f9a6 <__kernel_rem_pio2f+0x76>
 800f980:	9b01      	ldr	r3, [sp, #4]
 800f982:	ac1c      	add	r4, sp, #112	; 0x70
 800f984:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f988:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800f98c:	f04f 0c00 	mov.w	ip, #0
 800f990:	45d4      	cmp	ip, sl
 800f992:	dc27      	bgt.n	800f9e4 <__kernel_rem_pio2f+0xb4>
 800f994:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f998:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800f99c:	4627      	mov	r7, r4
 800f99e:	2600      	movs	r6, #0
 800f9a0:	e016      	b.n	800f9d0 <__kernel_rem_pio2f+0xa0>
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	e7dc      	b.n	800f960 <__kernel_rem_pio2f+0x30>
 800f9a6:	42e7      	cmn	r7, r4
 800f9a8:	bf5d      	ittte	pl
 800f9aa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800f9ae:	ee07 3a90 	vmovpl	s15, r3
 800f9b2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f9b6:	eef0 7a47 	vmovmi.f32	s15, s14
 800f9ba:	ece6 7a01 	vstmia	r6!, {s15}
 800f9be:	3401      	adds	r4, #1
 800f9c0:	e7dc      	b.n	800f97c <__kernel_rem_pio2f+0x4c>
 800f9c2:	ecf9 6a01 	vldmia	r9!, {s13}
 800f9c6:	ed97 7a00 	vldr	s14, [r7]
 800f9ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f9ce:	3601      	adds	r6, #1
 800f9d0:	428e      	cmp	r6, r1
 800f9d2:	f1a7 0704 	sub.w	r7, r7, #4
 800f9d6:	ddf4      	ble.n	800f9c2 <__kernel_rem_pio2f+0x92>
 800f9d8:	eceb 7a01 	vstmia	fp!, {s15}
 800f9dc:	f10c 0c01 	add.w	ip, ip, #1
 800f9e0:	3404      	adds	r4, #4
 800f9e2:	e7d5      	b.n	800f990 <__kernel_rem_pio2f+0x60>
 800f9e4:	ab08      	add	r3, sp, #32
 800f9e6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f9ea:	eddf 8a93 	vldr	s17, [pc, #588]	; 800fc38 <__kernel_rem_pio2f+0x308>
 800f9ee:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800fc34 <__kernel_rem_pio2f+0x304>
 800f9f2:	9304      	str	r3, [sp, #16]
 800f9f4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800f9f8:	4656      	mov	r6, sl
 800f9fa:	00b3      	lsls	r3, r6, #2
 800f9fc:	9305      	str	r3, [sp, #20]
 800f9fe:	ab58      	add	r3, sp, #352	; 0x160
 800fa00:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fa04:	ac08      	add	r4, sp, #32
 800fa06:	ab44      	add	r3, sp, #272	; 0x110
 800fa08:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800fa0c:	46a4      	mov	ip, r4
 800fa0e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fa12:	4637      	mov	r7, r6
 800fa14:	2f00      	cmp	r7, #0
 800fa16:	f1a0 0004 	sub.w	r0, r0, #4
 800fa1a:	dc4f      	bgt.n	800fabc <__kernel_rem_pio2f+0x18c>
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800fa22:	f000 fa8d 	bl	800ff40 <scalbnf>
 800fa26:	eeb0 8a40 	vmov.f32	s16, s0
 800fa2a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fa2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fa32:	f000 fa43 	bl	800febc <floorf>
 800fa36:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fa3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fa3e:	2d00      	cmp	r5, #0
 800fa40:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fa44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fa48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800fa4c:	ee17 9a90 	vmov	r9, s15
 800fa50:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fa54:	dd44      	ble.n	800fae0 <__kernel_rem_pio2f+0x1b0>
 800fa56:	f106 3cff 	add.w	ip, r6, #4294967295
 800fa5a:	ab08      	add	r3, sp, #32
 800fa5c:	f1c5 0e08 	rsb	lr, r5, #8
 800fa60:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fa64:	fa47 f00e 	asr.w	r0, r7, lr
 800fa68:	4481      	add	r9, r0
 800fa6a:	fa00 f00e 	lsl.w	r0, r0, lr
 800fa6e:	1a3f      	subs	r7, r7, r0
 800fa70:	f1c5 0007 	rsb	r0, r5, #7
 800fa74:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800fa78:	4107      	asrs	r7, r0
 800fa7a:	2f00      	cmp	r7, #0
 800fa7c:	dd3f      	ble.n	800fafe <__kernel_rem_pio2f+0x1ce>
 800fa7e:	f04f 0e00 	mov.w	lr, #0
 800fa82:	f109 0901 	add.w	r9, r9, #1
 800fa86:	4673      	mov	r3, lr
 800fa88:	4576      	cmp	r6, lr
 800fa8a:	dc6b      	bgt.n	800fb64 <__kernel_rem_pio2f+0x234>
 800fa8c:	2d00      	cmp	r5, #0
 800fa8e:	dd04      	ble.n	800fa9a <__kernel_rem_pio2f+0x16a>
 800fa90:	2d01      	cmp	r5, #1
 800fa92:	d078      	beq.n	800fb86 <__kernel_rem_pio2f+0x256>
 800fa94:	2d02      	cmp	r5, #2
 800fa96:	f000 8081 	beq.w	800fb9c <__kernel_rem_pio2f+0x26c>
 800fa9a:	2f02      	cmp	r7, #2
 800fa9c:	d12f      	bne.n	800fafe <__kernel_rem_pio2f+0x1ce>
 800fa9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800faa2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800faa6:	b353      	cbz	r3, 800fafe <__kernel_rem_pio2f+0x1ce>
 800faa8:	4628      	mov	r0, r5
 800faaa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800faae:	f000 fa47 	bl	800ff40 <scalbnf>
 800fab2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fab6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800faba:	e020      	b.n	800fafe <__kernel_rem_pio2f+0x1ce>
 800fabc:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fac0:	3f01      	subs	r7, #1
 800fac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800faca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800face:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fad2:	ecac 0a01 	vstmia	ip!, {s0}
 800fad6:	ed90 0a00 	vldr	s0, [r0]
 800fada:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fade:	e799      	b.n	800fa14 <__kernel_rem_pio2f+0xe4>
 800fae0:	d105      	bne.n	800faee <__kernel_rem_pio2f+0x1be>
 800fae2:	1e70      	subs	r0, r6, #1
 800fae4:	ab08      	add	r3, sp, #32
 800fae6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800faea:	11ff      	asrs	r7, r7, #7
 800faec:	e7c5      	b.n	800fa7a <__kernel_rem_pio2f+0x14a>
 800faee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800faf2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800faf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafa:	da31      	bge.n	800fb60 <__kernel_rem_pio2f+0x230>
 800fafc:	2700      	movs	r7, #0
 800fafe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb06:	f040 809b 	bne.w	800fc40 <__kernel_rem_pio2f+0x310>
 800fb0a:	1e74      	subs	r4, r6, #1
 800fb0c:	46a4      	mov	ip, r4
 800fb0e:	2000      	movs	r0, #0
 800fb10:	45d4      	cmp	ip, sl
 800fb12:	da4a      	bge.n	800fbaa <__kernel_rem_pio2f+0x27a>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d07a      	beq.n	800fc0e <__kernel_rem_pio2f+0x2de>
 800fb18:	ab08      	add	r3, sp, #32
 800fb1a:	3d08      	subs	r5, #8
 800fb1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f000 8081 	beq.w	800fc28 <__kernel_rem_pio2f+0x2f8>
 800fb26:	4628      	mov	r0, r5
 800fb28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb2c:	00a5      	lsls	r5, r4, #2
 800fb2e:	f000 fa07 	bl	800ff40 <scalbnf>
 800fb32:	aa44      	add	r2, sp, #272	; 0x110
 800fb34:	1d2b      	adds	r3, r5, #4
 800fb36:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800fc38 <__kernel_rem_pio2f+0x308>
 800fb3a:	18d1      	adds	r1, r2, r3
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	f280 80ae 	bge.w	800fca0 <__kernel_rem_pio2f+0x370>
 800fb44:	4622      	mov	r2, r4
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	f2c0 80cc 	blt.w	800fce4 <__kernel_rem_pio2f+0x3b4>
 800fb4c:	a944      	add	r1, sp, #272	; 0x110
 800fb4e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800fb52:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800fc30 <__kernel_rem_pio2f+0x300>
 800fb56:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	1aa1      	subs	r1, r4, r2
 800fb5e:	e0b6      	b.n	800fcce <__kernel_rem_pio2f+0x39e>
 800fb60:	2702      	movs	r7, #2
 800fb62:	e78c      	b.n	800fa7e <__kernel_rem_pio2f+0x14e>
 800fb64:	6820      	ldr	r0, [r4, #0]
 800fb66:	b94b      	cbnz	r3, 800fb7c <__kernel_rem_pio2f+0x24c>
 800fb68:	b118      	cbz	r0, 800fb72 <__kernel_rem_pio2f+0x242>
 800fb6a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800fb6e:	6020      	str	r0, [r4, #0]
 800fb70:	2001      	movs	r0, #1
 800fb72:	f10e 0e01 	add.w	lr, lr, #1
 800fb76:	3404      	adds	r4, #4
 800fb78:	4603      	mov	r3, r0
 800fb7a:	e785      	b.n	800fa88 <__kernel_rem_pio2f+0x158>
 800fb7c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800fb80:	6020      	str	r0, [r4, #0]
 800fb82:	4618      	mov	r0, r3
 800fb84:	e7f5      	b.n	800fb72 <__kernel_rem_pio2f+0x242>
 800fb86:	1e74      	subs	r4, r6, #1
 800fb88:	a808      	add	r0, sp, #32
 800fb8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fb8e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800fb92:	f10d 0c20 	add.w	ip, sp, #32
 800fb96:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800fb9a:	e77e      	b.n	800fa9a <__kernel_rem_pio2f+0x16a>
 800fb9c:	1e74      	subs	r4, r6, #1
 800fb9e:	a808      	add	r0, sp, #32
 800fba0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fba4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fba8:	e7f3      	b.n	800fb92 <__kernel_rem_pio2f+0x262>
 800fbaa:	ab08      	add	r3, sp, #32
 800fbac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800fbb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fbb4:	4318      	orrs	r0, r3
 800fbb6:	e7ab      	b.n	800fb10 <__kernel_rem_pio2f+0x1e0>
 800fbb8:	f10c 0c01 	add.w	ip, ip, #1
 800fbbc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800fbc0:	2c00      	cmp	r4, #0
 800fbc2:	d0f9      	beq.n	800fbb8 <__kernel_rem_pio2f+0x288>
 800fbc4:	9b05      	ldr	r3, [sp, #20]
 800fbc6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fbca:	eb0d 0003 	add.w	r0, sp, r3
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	18f4      	adds	r4, r6, r3
 800fbd2:	ab1c      	add	r3, sp, #112	; 0x70
 800fbd4:	1c77      	adds	r7, r6, #1
 800fbd6:	384c      	subs	r0, #76	; 0x4c
 800fbd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbdc:	4466      	add	r6, ip
 800fbde:	42be      	cmp	r6, r7
 800fbe0:	f6ff af0b 	blt.w	800f9fa <__kernel_rem_pio2f+0xca>
 800fbe4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800fbe8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fbec:	ee07 3a90 	vmov	s15, r3
 800fbf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbf4:	f04f 0c00 	mov.w	ip, #0
 800fbf8:	ece4 7a01 	vstmia	r4!, {s15}
 800fbfc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800fc00:	46a1      	mov	r9, r4
 800fc02:	458c      	cmp	ip, r1
 800fc04:	dd07      	ble.n	800fc16 <__kernel_rem_pio2f+0x2e6>
 800fc06:	ece0 7a01 	vstmia	r0!, {s15}
 800fc0a:	3701      	adds	r7, #1
 800fc0c:	e7e7      	b.n	800fbde <__kernel_rem_pio2f+0x2ae>
 800fc0e:	9804      	ldr	r0, [sp, #16]
 800fc10:	f04f 0c01 	mov.w	ip, #1
 800fc14:	e7d2      	b.n	800fbbc <__kernel_rem_pio2f+0x28c>
 800fc16:	ecfe 6a01 	vldmia	lr!, {s13}
 800fc1a:	ed39 7a01 	vldmdb	r9!, {s14}
 800fc1e:	f10c 0c01 	add.w	ip, ip, #1
 800fc22:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc26:	e7ec      	b.n	800fc02 <__kernel_rem_pio2f+0x2d2>
 800fc28:	3c01      	subs	r4, #1
 800fc2a:	e775      	b.n	800fb18 <__kernel_rem_pio2f+0x1e8>
 800fc2c:	08010940 	.word	0x08010940
 800fc30:	08010914 	.word	0x08010914
 800fc34:	43800000 	.word	0x43800000
 800fc38:	3b800000 	.word	0x3b800000
 800fc3c:	00000000 	.word	0x00000000
 800fc40:	9b03      	ldr	r3, [sp, #12]
 800fc42:	eeb0 0a48 	vmov.f32	s0, s16
 800fc46:	1a98      	subs	r0, r3, r2
 800fc48:	f000 f97a 	bl	800ff40 <scalbnf>
 800fc4c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800fc34 <__kernel_rem_pio2f+0x304>
 800fc50:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc58:	db19      	blt.n	800fc8e <__kernel_rem_pio2f+0x35e>
 800fc5a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800fc38 <__kernel_rem_pio2f+0x308>
 800fc5e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fc62:	aa08      	add	r2, sp, #32
 800fc64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc68:	1c74      	adds	r4, r6, #1
 800fc6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc6e:	3508      	adds	r5, #8
 800fc70:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fc74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc7c:	ee10 3a10 	vmov	r3, s0
 800fc80:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fc84:	ee17 3a90 	vmov	r3, s15
 800fc88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fc8c:	e74b      	b.n	800fb26 <__kernel_rem_pio2f+0x1f6>
 800fc8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc92:	aa08      	add	r2, sp, #32
 800fc94:	ee10 3a10 	vmov	r3, s0
 800fc98:	4634      	mov	r4, r6
 800fc9a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fc9e:	e742      	b.n	800fb26 <__kernel_rem_pio2f+0x1f6>
 800fca0:	a808      	add	r0, sp, #32
 800fca2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800fca6:	9001      	str	r0, [sp, #4]
 800fca8:	ee07 0a90 	vmov	s15, r0
 800fcac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcb0:	3a01      	subs	r2, #1
 800fcb2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fcb6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fcba:	ed61 7a01 	vstmdb	r1!, {s15}
 800fcbe:	e73e      	b.n	800fb3e <__kernel_rem_pio2f+0x20e>
 800fcc0:	ecfc 6a01 	vldmia	ip!, {s13}
 800fcc4:	ecb6 7a01 	vldmia	r6!, {s14}
 800fcc8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fccc:	3001      	adds	r0, #1
 800fcce:	4550      	cmp	r0, sl
 800fcd0:	dc01      	bgt.n	800fcd6 <__kernel_rem_pio2f+0x3a6>
 800fcd2:	4288      	cmp	r0, r1
 800fcd4:	ddf4      	ble.n	800fcc0 <__kernel_rem_pio2f+0x390>
 800fcd6:	a858      	add	r0, sp, #352	; 0x160
 800fcd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcdc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800fce0:	3a01      	subs	r2, #1
 800fce2:	e730      	b.n	800fb46 <__kernel_rem_pio2f+0x216>
 800fce4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800fce6:	2a02      	cmp	r2, #2
 800fce8:	dc09      	bgt.n	800fcfe <__kernel_rem_pio2f+0x3ce>
 800fcea:	2a00      	cmp	r2, #0
 800fcec:	dc2a      	bgt.n	800fd44 <__kernel_rem_pio2f+0x414>
 800fcee:	d043      	beq.n	800fd78 <__kernel_rem_pio2f+0x448>
 800fcf0:	f009 0007 	and.w	r0, r9, #7
 800fcf4:	b059      	add	sp, #356	; 0x164
 800fcf6:	ecbd 8b04 	vpop	{d8-d9}
 800fcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcfe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fd00:	2b03      	cmp	r3, #3
 800fd02:	d1f5      	bne.n	800fcf0 <__kernel_rem_pio2f+0x3c0>
 800fd04:	ab30      	add	r3, sp, #192	; 0xc0
 800fd06:	442b      	add	r3, r5
 800fd08:	461a      	mov	r2, r3
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	f1a1 0104 	sub.w	r1, r1, #4
 800fd14:	dc51      	bgt.n	800fdba <__kernel_rem_pio2f+0x48a>
 800fd16:	4621      	mov	r1, r4
 800fd18:	2901      	cmp	r1, #1
 800fd1a:	f1a2 0204 	sub.w	r2, r2, #4
 800fd1e:	dc5c      	bgt.n	800fdda <__kernel_rem_pio2f+0x4aa>
 800fd20:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800fd24:	3304      	adds	r3, #4
 800fd26:	2c01      	cmp	r4, #1
 800fd28:	dc67      	bgt.n	800fdfa <__kernel_rem_pio2f+0x4ca>
 800fd2a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800fd2e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800fd32:	2f00      	cmp	r7, #0
 800fd34:	d167      	bne.n	800fe06 <__kernel_rem_pio2f+0x4d6>
 800fd36:	edc8 6a00 	vstr	s13, [r8]
 800fd3a:	ed88 7a01 	vstr	s14, [r8, #4]
 800fd3e:	edc8 7a02 	vstr	s15, [r8, #8]
 800fd42:	e7d5      	b.n	800fcf0 <__kernel_rem_pio2f+0x3c0>
 800fd44:	aa30      	add	r2, sp, #192	; 0xc0
 800fd46:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800fd4a:	4413      	add	r3, r2
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	2a00      	cmp	r2, #0
 800fd50:	da24      	bge.n	800fd9c <__kernel_rem_pio2f+0x46c>
 800fd52:	b34f      	cbz	r7, 800fda8 <__kernel_rem_pio2f+0x478>
 800fd54:	eef1 7a47 	vneg.f32	s15, s14
 800fd58:	edc8 7a00 	vstr	s15, [r8]
 800fd5c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800fd60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd64:	aa31      	add	r2, sp, #196	; 0xc4
 800fd66:	2301      	movs	r3, #1
 800fd68:	429c      	cmp	r4, r3
 800fd6a:	da20      	bge.n	800fdae <__kernel_rem_pio2f+0x47e>
 800fd6c:	b10f      	cbz	r7, 800fd72 <__kernel_rem_pio2f+0x442>
 800fd6e:	eef1 7a67 	vneg.f32	s15, s15
 800fd72:	edc8 7a01 	vstr	s15, [r8, #4]
 800fd76:	e7bb      	b.n	800fcf0 <__kernel_rem_pio2f+0x3c0>
 800fd78:	aa30      	add	r2, sp, #192	; 0xc0
 800fd7a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800fc3c <__kernel_rem_pio2f+0x30c>
 800fd7e:	4413      	add	r3, r2
 800fd80:	2c00      	cmp	r4, #0
 800fd82:	da05      	bge.n	800fd90 <__kernel_rem_pio2f+0x460>
 800fd84:	b10f      	cbz	r7, 800fd8a <__kernel_rem_pio2f+0x45a>
 800fd86:	eef1 7a67 	vneg.f32	s15, s15
 800fd8a:	edc8 7a00 	vstr	s15, [r8]
 800fd8e:	e7af      	b.n	800fcf0 <__kernel_rem_pio2f+0x3c0>
 800fd90:	ed33 7a01 	vldmdb	r3!, {s14}
 800fd94:	3c01      	subs	r4, #1
 800fd96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd9a:	e7f1      	b.n	800fd80 <__kernel_rem_pio2f+0x450>
 800fd9c:	ed73 7a01 	vldmdb	r3!, {s15}
 800fda0:	3a01      	subs	r2, #1
 800fda2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fda6:	e7d2      	b.n	800fd4e <__kernel_rem_pio2f+0x41e>
 800fda8:	eef0 7a47 	vmov.f32	s15, s14
 800fdac:	e7d4      	b.n	800fd58 <__kernel_rem_pio2f+0x428>
 800fdae:	ecb2 7a01 	vldmia	r2!, {s14}
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdb8:	e7d6      	b.n	800fd68 <__kernel_rem_pio2f+0x438>
 800fdba:	edd1 7a00 	vldr	s15, [r1]
 800fdbe:	edd1 6a01 	vldr	s13, [r1, #4]
 800fdc2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fdc6:	3801      	subs	r0, #1
 800fdc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdcc:	ed81 7a00 	vstr	s14, [r1]
 800fdd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdd4:	edc1 7a01 	vstr	s15, [r1, #4]
 800fdd8:	e799      	b.n	800fd0e <__kernel_rem_pio2f+0x3de>
 800fdda:	edd2 7a00 	vldr	s15, [r2]
 800fdde:	edd2 6a01 	vldr	s13, [r2, #4]
 800fde2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fde6:	3901      	subs	r1, #1
 800fde8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdec:	ed82 7a00 	vstr	s14, [r2]
 800fdf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdf4:	edc2 7a01 	vstr	s15, [r2, #4]
 800fdf8:	e78e      	b.n	800fd18 <__kernel_rem_pio2f+0x3e8>
 800fdfa:	ed33 7a01 	vldmdb	r3!, {s14}
 800fdfe:	3c01      	subs	r4, #1
 800fe00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe04:	e78f      	b.n	800fd26 <__kernel_rem_pio2f+0x3f6>
 800fe06:	eef1 6a66 	vneg.f32	s13, s13
 800fe0a:	eeb1 7a47 	vneg.f32	s14, s14
 800fe0e:	edc8 6a00 	vstr	s13, [r8]
 800fe12:	ed88 7a01 	vstr	s14, [r8, #4]
 800fe16:	eef1 7a67 	vneg.f32	s15, s15
 800fe1a:	e790      	b.n	800fd3e <__kernel_rem_pio2f+0x40e>

0800fe1c <__kernel_sinf>:
 800fe1c:	ee10 3a10 	vmov	r3, s0
 800fe20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fe28:	da04      	bge.n	800fe34 <__kernel_sinf+0x18>
 800fe2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fe2e:	ee17 3a90 	vmov	r3, s15
 800fe32:	b35b      	cbz	r3, 800fe8c <__kernel_sinf+0x70>
 800fe34:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fe38:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fe90 <__kernel_sinf+0x74>
 800fe3c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fe94 <__kernel_sinf+0x78>
 800fe40:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fe44:	eddf 7a14 	vldr	s15, [pc, #80]	; 800fe98 <__kernel_sinf+0x7c>
 800fe48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe4c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fe9c <__kernel_sinf+0x80>
 800fe50:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fe54:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fea0 <__kernel_sinf+0x84>
 800fe58:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fe5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe60:	b930      	cbnz	r0, 800fe70 <__kernel_sinf+0x54>
 800fe62:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800fea4 <__kernel_sinf+0x88>
 800fe66:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fe6a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fe6e:	4770      	bx	lr
 800fe70:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fe74:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fe78:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fe7c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fe80:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fea8 <__kernel_sinf+0x8c>
 800fe84:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fe88:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	2f2ec9d3 	.word	0x2f2ec9d3
 800fe94:	b2d72f34 	.word	0xb2d72f34
 800fe98:	3638ef1b 	.word	0x3638ef1b
 800fe9c:	b9500d01 	.word	0xb9500d01
 800fea0:	3c088889 	.word	0x3c088889
 800fea4:	be2aaaab 	.word	0xbe2aaaab
 800fea8:	3e2aaaab 	.word	0x3e2aaaab

0800feac <fabsf>:
 800feac:	ee10 3a10 	vmov	r3, s0
 800feb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800feb4:	ee00 3a10 	vmov	s0, r3
 800feb8:	4770      	bx	lr
	...

0800febc <floorf>:
 800febc:	ee10 3a10 	vmov	r3, s0
 800fec0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fec4:	3a7f      	subs	r2, #127	; 0x7f
 800fec6:	2a16      	cmp	r2, #22
 800fec8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fecc:	dc2a      	bgt.n	800ff24 <floorf+0x68>
 800fece:	2a00      	cmp	r2, #0
 800fed0:	da11      	bge.n	800fef6 <floorf+0x3a>
 800fed2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ff34 <floorf+0x78>
 800fed6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800feda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee2:	dd05      	ble.n	800fef0 <floorf+0x34>
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	da23      	bge.n	800ff30 <floorf+0x74>
 800fee8:	4a13      	ldr	r2, [pc, #76]	; (800ff38 <floorf+0x7c>)
 800feea:	2900      	cmp	r1, #0
 800feec:	bf18      	it	ne
 800feee:	4613      	movne	r3, r2
 800fef0:	ee00 3a10 	vmov	s0, r3
 800fef4:	4770      	bx	lr
 800fef6:	4911      	ldr	r1, [pc, #68]	; (800ff3c <floorf+0x80>)
 800fef8:	4111      	asrs	r1, r2
 800fefa:	420b      	tst	r3, r1
 800fefc:	d0fa      	beq.n	800fef4 <floorf+0x38>
 800fefe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ff34 <floorf+0x78>
 800ff02:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0e:	ddef      	ble.n	800fef0 <floorf+0x34>
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	bfbe      	ittt	lt
 800ff14:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ff18:	fa40 f202 	asrlt.w	r2, r0, r2
 800ff1c:	189b      	addlt	r3, r3, r2
 800ff1e:	ea23 0301 	bic.w	r3, r3, r1
 800ff22:	e7e5      	b.n	800fef0 <floorf+0x34>
 800ff24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ff28:	d3e4      	bcc.n	800fef4 <floorf+0x38>
 800ff2a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff2e:	4770      	bx	lr
 800ff30:	2300      	movs	r3, #0
 800ff32:	e7dd      	b.n	800fef0 <floorf+0x34>
 800ff34:	7149f2ca 	.word	0x7149f2ca
 800ff38:	bf800000 	.word	0xbf800000
 800ff3c:	007fffff 	.word	0x007fffff

0800ff40 <scalbnf>:
 800ff40:	ee10 3a10 	vmov	r3, s0
 800ff44:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ff48:	d025      	beq.n	800ff96 <scalbnf+0x56>
 800ff4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ff4e:	d302      	bcc.n	800ff56 <scalbnf+0x16>
 800ff50:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff54:	4770      	bx	lr
 800ff56:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff5a:	d122      	bne.n	800ffa2 <scalbnf+0x62>
 800ff5c:	4b2a      	ldr	r3, [pc, #168]	; (8010008 <scalbnf+0xc8>)
 800ff5e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801000c <scalbnf+0xcc>
 800ff62:	4298      	cmp	r0, r3
 800ff64:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff68:	db16      	blt.n	800ff98 <scalbnf+0x58>
 800ff6a:	ee10 3a10 	vmov	r3, s0
 800ff6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ff72:	3a19      	subs	r2, #25
 800ff74:	4402      	add	r2, r0
 800ff76:	2afe      	cmp	r2, #254	; 0xfe
 800ff78:	dd15      	ble.n	800ffa6 <scalbnf+0x66>
 800ff7a:	ee10 3a10 	vmov	r3, s0
 800ff7e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010010 <scalbnf+0xd0>
 800ff82:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010014 <scalbnf+0xd4>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	eeb0 7a67 	vmov.f32	s14, s15
 800ff8c:	bfb8      	it	lt
 800ff8e:	eef0 7a66 	vmovlt.f32	s15, s13
 800ff92:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ff96:	4770      	bx	lr
 800ff98:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010018 <scalbnf+0xd8>
 800ff9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ffa0:	4770      	bx	lr
 800ffa2:	0dd2      	lsrs	r2, r2, #23
 800ffa4:	e7e6      	b.n	800ff74 <scalbnf+0x34>
 800ffa6:	2a00      	cmp	r2, #0
 800ffa8:	dd06      	ble.n	800ffb8 <scalbnf+0x78>
 800ffaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ffb2:	ee00 3a10 	vmov	s0, r3
 800ffb6:	4770      	bx	lr
 800ffb8:	f112 0f16 	cmn.w	r2, #22
 800ffbc:	da1a      	bge.n	800fff4 <scalbnf+0xb4>
 800ffbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ffc2:	4298      	cmp	r0, r3
 800ffc4:	ee10 3a10 	vmov	r3, s0
 800ffc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffcc:	dd0a      	ble.n	800ffe4 <scalbnf+0xa4>
 800ffce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010010 <scalbnf+0xd0>
 800ffd2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010014 <scalbnf+0xd4>
 800ffd6:	eef0 7a40 	vmov.f32	s15, s0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	bf18      	it	ne
 800ffde:	eeb0 0a47 	vmovne.f32	s0, s14
 800ffe2:	e7db      	b.n	800ff9c <scalbnf+0x5c>
 800ffe4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010018 <scalbnf+0xd8>
 800ffe8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801001c <scalbnf+0xdc>
 800ffec:	eef0 7a40 	vmov.f32	s15, s0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	e7f3      	b.n	800ffdc <scalbnf+0x9c>
 800fff4:	3219      	adds	r2, #25
 800fff6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fffa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fffe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010020 <scalbnf+0xe0>
 8010002:	ee07 3a10 	vmov	s14, r3
 8010006:	e7c4      	b.n	800ff92 <scalbnf+0x52>
 8010008:	ffff3cb0 	.word	0xffff3cb0
 801000c:	4c000000 	.word	0x4c000000
 8010010:	7149f2ca 	.word	0x7149f2ca
 8010014:	f149f2ca 	.word	0xf149f2ca
 8010018:	0da24260 	.word	0x0da24260
 801001c:	8da24260 	.word	0x8da24260
 8010020:	33000000 	.word	0x33000000

08010024 <_init>:
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010026:	bf00      	nop
 8010028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801002a:	bc08      	pop	{r3}
 801002c:	469e      	mov	lr, r3
 801002e:	4770      	bx	lr

08010030 <_fini>:
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010032:	bf00      	nop
 8010034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010036:	bc08      	pop	{r3}
 8010038:	469e      	mov	lr, r3
 801003a:	4770      	bx	lr
