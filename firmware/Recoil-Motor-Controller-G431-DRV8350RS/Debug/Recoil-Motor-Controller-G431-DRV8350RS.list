
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800fff8  0800fff8  0001fff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108c4  080108c4  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080108c4  080108c4  000208c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108cc  080108cc  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108cc  080108cc  000208cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108d0  080108d0  000208d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080108d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  200001fc  08010ad0  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  08010ad0  000307b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f0d  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000483b  00000000  00000000  00058139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  0005c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ca8  00000000  00000000  0005e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a7f  00000000  00000000  000604c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c21  00000000  00000000  00084f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f49  00000000  00000000  000a8b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097a0  00000000  00000000  00192afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ffdc 	.word	0x0800ffdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800ffdc 	.word	0x0800ffdc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:

float user_input_pot;
uint8_t user_input_button;
uint8_t user_output_led;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000fae:	f000 f8f3 	bl	8001198 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000fba:	f002 fc09 	bl	80037d0 <MotorController_handleCANMessage>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000460 	.word	0x20000460
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d110      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fe8:	f007 f8e4 	bl	80081b4 <HAL_GPIO_WritePin>
    MotorController_updateCommutation(&controller, &hadc1);
 8000fec:	490e      	ldr	r1, [pc, #56]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ff0:	f001 ffea 	bl	8002fc8 <MotorController_updateCommutation>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ffc:	f007 f8da 	bl	80081b4 <HAL_GPIO_WritePin>
    #endif
  }
  else if (htim == &htim4) {
    MotorController_triggerPositionUpdate(&controller);
  }
}
 8001000:	e00a      	b.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim == &htim2) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d006      	beq.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim == &htim4) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a09      	ldr	r2, [pc, #36]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d102      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
    MotorController_triggerPositionUpdate(&controller);
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001014:	f002 f850 	bl	80030b8 <MotorController_triggerPositionUpdate>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200005dc 	.word	0x200005dc
 8001024:	48000800 	.word	0x48000800
 8001028:	20000360 	.word	0x20000360
 800102c:	20000218 	.word	0x20000218
 8001030:	20000628 	.word	0x20000628
 8001034:	20000674 	.word	0x20000674

08001038 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_SPI_TxRxCpltCallback+0x44>)
 8001048:	f007 f8b4 	bl	80081b4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f007 f8ad 	bl	80081b4 <HAL_GPIO_WritePin>
  MotorController_updatePositionReading(&controller);
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <HAL_SPI_TxRxCpltCallback+0x48>)
 800105c:	f002 f880 	bl	8003160 <MotorController_updatePositionReading>
  /* ====== Start user APP code ====== */
//  controller.position_controller.position_target = APP_getUserPot() * M_PI;

  /* ====== End user APP code ====== */

  MotorController_updatePositionController(&controller);
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <HAL_SPI_TxRxCpltCallback+0x48>)
 8001062:	f002 f8cd 	bl	8003200 <MotorController_updatePositionController>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <HAL_SPI_TxRxCpltCallback+0x44>)
 800106e:	f007 f8a1 	bl	80081b4 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	48000800 	.word	0x48000800
 8001080:	20000218 	.word	0x20000218

08001084 <APP_init>:
  // so putting it here
  // can also comment out this line and just power cycle to update the flash settings
  HAL_FLASH_OB_Launch();
}

void APP_init() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  #if INITIAL_PROG
  APP_initFlashOption();
  #endif

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f007 f890 	bl	80081b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f007 f88a 	bl	80081b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f007 f884 	bl	80081b4 <HAL_GPIO_WritePin>

  MotorController_init(&controller);
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <APP_init+0x64>)
 80010ae:	f001 fc4d 	bl	800294c <MotorController_init>

  MotorController_setMode(&controller, MODE_IDLE);
 80010b2:	2101      	movs	r1, #1
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <APP_init+0x64>)
 80010b6:	f001 fd6b 	bl	8002b90 <MotorController_setMode>

//  controller.position_controller.position_kp = 0.1;
  controller.position_controller.torque_limit_lower = -0.2;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <APP_init+0x64>)
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <APP_init+0x68>)
 80010be:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  controller.position_controller.torque_limit_upper = 0.2;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <APP_init+0x64>)
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <APP_init+0x6c>)
 80010c6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  HAL_Delay(3000);
 80010ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010ce:	f004 f987 	bl	80053e0 <HAL_Delay>
//  MotorController_setMode(&controller, MODE_CALIBRATION);
//  MotorController_updateService(&controller);
//  MotorController_setMode(&controller, MODE_POSITION);

  controller.current_controller.i_q_target = 0.1;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <APP_init+0x64>)
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <APP_init+0x70>)
 80010d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
//  controller.current_controller.v_d_target = 0;
  MotorController_setMode(&controller, MODE_OPEN_IDQ);
 80010da:	2121      	movs	r1, #33	; 0x21
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <APP_init+0x64>)
 80010de:	f001 fd57 	bl	8002b90 <MotorController_setMode>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000218 	.word	0x20000218
 80010ec:	be4ccccd 	.word	0xbe4ccccd
 80010f0:	3e4ccccd 	.word	0x3e4ccccd
 80010f4:	3dcccccd 	.word	0x3dcccccd

080010f8 <APP_main>:


void APP_main() {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b0a2      	sub	sp, #136	; 0x88
 80010fc:	af02      	add	r7, sp, #8
  MotorController_updateService(&controller);
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <APP_main+0x90>)
 8001100:	f002 f8ba 	bl	8003278 <MotorController_updateService>

  if (controller.mode != MODE_IDLE) {
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <APP_main+0x90>)
 8001106:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800110a:	2b01      	cmp	r3, #1
 800110c:	d006      	beq.n	800111c <APP_main+0x24>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);    // blue LED
 800110e:	2201      	movs	r2, #1
 8001110:	2140      	movs	r1, #64	; 0x40
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f007 f84d 	bl	80081b4 <HAL_GPIO_WritePin>
 800111a:	e005      	b.n	8001128 <APP_main+0x30>
  }
  else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);    // blue LED
 800111c:	2200      	movs	r2, #0
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f007 f846 	bl	80081b4 <HAL_GPIO_WritePin>
//  sprintf(str, "error: %d encoder:%d\n",
//      ((uint16_t)controller.position_controller.position_measured) >> 14,
//      ((uint16_t)controller.position_controller.position_measured) & 0x3FFF);

  sprintf(str, "ts:%f\ttm:%f\n",
      controller.current_controller.i_q_measured,
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <APP_main+0x90>)
 800112a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
  sprintf(str, "ts:%f\ttm:%f\n",
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa32 	bl	8000598 <__aeabi_f2d>
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
      controller.position_controller.torque_measured*1000);
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <APP_main+0x90>)
 800113a:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 800113e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800118c <APP_main+0x94>
 8001142:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(str, "ts:%f\ttm:%f\n",
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff fa25 	bl	8000598 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4638      	mov	r0, r7
 8001154:	e9cd 2300 	strd	r2, r3, [sp]
 8001158:	4622      	mov	r2, r4
 800115a:	462b      	mov	r3, r5
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <APP_main+0x98>)
 800115e:	f00b fe0d 	bl	800cd7c <siprintf>
//      controller.current_controller.i_b_measured,
//      controller.current_controller.i_c_measured);
//    sprintf(str, "pos:%f\tvbus:%f\r\n",
//        controller.position_controller.position_measured,
//        controller.powerstage.bus_voltage_measured);
  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 8001162:	463b      	mov	r3, r7
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f85b 	bl	8000220 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	4639      	mov	r1, r7
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <APP_main+0x9c>)
 8001176:	f00a fb4a 	bl	800b80e <HAL_UART_Transmit>
////
  HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f004 f930 	bl	80053e0 <HAL_Delay>

}
 8001180:	bf00      	nop
 8001182:	3780      	adds	r7, #128	; 0x80
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	20000218 	.word	0x20000218
 800118c:	447a0000 	.word	0x447a0000
 8001190:	0800fff8 	.word	0x0800fff8
 8001194:	2000070c 	.word	0x2000070c

08001198 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3308      	adds	r3, #8
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f005 ffc1 	bl	8007134 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <CAN_getRxFrame+0x3c>
 80011d0:	2201      	movs	r2, #1
 80011d2:	e000      	b.n	80011d6 <CAN_getRxFrame+0x3e>
 80011d4:	2200      	movs	r2, #0
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011e0:	d04c      	beq.n	800127c <CAN_getRxFrame+0xe4>
 80011e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011e6:	d84d      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 80011e8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011ec:	d042      	beq.n	8001274 <CAN_getRxFrame+0xdc>
 80011ee:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011f2:	d847      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 80011f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011f8:	d038      	beq.n	800126c <CAN_getRxFrame+0xd4>
 80011fa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011fe:	d841      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d02e      	beq.n	8001264 <CAN_getRxFrame+0xcc>
 8001206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120a:	d83b      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 800120c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001210:	d024      	beq.n	800125c <CAN_getRxFrame+0xc4>
 8001212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001216:	d835      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 8001218:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800121c:	d01a      	beq.n	8001254 <CAN_getRxFrame+0xbc>
 800121e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001222:	d82f      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 8001224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001228:	d010      	beq.n	800124c <CAN_getRxFrame+0xb4>
 800122a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800122e:	d829      	bhi.n	8001284 <CAN_getRxFrame+0xec>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <CAN_getRxFrame+0xa4>
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d004      	beq.n	8001244 <CAN_getRxFrame+0xac>
 800123a:	e023      	b.n	8001284 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	80da      	strh	r2, [r3, #6]
 8001242:	e023      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	80da      	strh	r2, [r3, #6]
 800124a:	e01f      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2202      	movs	r2, #2
 8001250:	80da      	strh	r2, [r3, #6]
 8001252:	e01b      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2203      	movs	r2, #3
 8001258:	80da      	strh	r2, [r3, #6]
 800125a:	e017      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2204      	movs	r2, #4
 8001260:	80da      	strh	r2, [r3, #6]
 8001262:	e013      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2205      	movs	r2, #5
 8001268:	80da      	strh	r2, [r3, #6]
 800126a:	e00f      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2206      	movs	r2, #6
 8001270:	80da      	strh	r2, [r3, #6]
 8001272:	e00b      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2207      	movs	r2, #7
 8001278:	80da      	strh	r2, [r3, #6]
 800127a:	e007      	b.n	800128c <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2208      	movs	r2, #8
 8001280:	80da      	strh	r2, [r3, #6]
 8001282:	e003      	b.n	800128c <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	80da      	strh	r2, [r3, #6]
  }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <CAN_putTxFrame+0x1c>
 80012ac:	2300      	movs	r3, #0
 80012ae:	e001      	b.n	80012b4 <CAN_putTxFrame+0x20>
 80012b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b4:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <CAN_putTxFrame+0x2e>
 80012be:	2300      	movs	r3, #0
 80012c0:	e001      	b.n	80012c6 <CAN_putTxFrame+0x32>
 80012c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012c6:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	88db      	ldrh	r3, [r3, #6]
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d838      	bhi.n	8001342 <CAN_putTxFrame+0xae>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <CAN_putTxFrame+0x44>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012fd 	.word	0x080012fd
 80012dc:	08001303 	.word	0x08001303
 80012e0:	0800130b 	.word	0x0800130b
 80012e4:	08001313 	.word	0x08001313
 80012e8:	0800131b 	.word	0x0800131b
 80012ec:	08001323 	.word	0x08001323
 80012f0:	0800132b 	.word	0x0800132b
 80012f4:	08001333 	.word	0x08001333
 80012f8:	0800133b 	.word	0x0800133b
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	e021      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 8001302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e01d      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 800130a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e019      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 8001312:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	e015      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 800131a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	e011      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8001322:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	e00d      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800132a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	e009      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8001332:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	e005      	b.n	8001346 <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 800133a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	e001      	b.n	8001346 <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8001346:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800134a:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f103 0208 	add.w	r2, r3, #8
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f005 fe9f 	bl	80070ac <HAL_FDCAN_AddMessageToTxFifoQ>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <clampf>:

static inline int32_t min(int32_t a, int32_t b) {
  return a < b ? a : b;
}

static inline float clampf(float value, float min, float max) {
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001382:	edc7 0a02 	vstr	s1, [r7, #8]
 8001386:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 800138a:	ed97 7a03 	vldr	s14, [r7, #12]
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	dd01      	ble.n	80013a0 <clampf+0x28>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	e00b      	b.n	80013b8 <clampf+0x40>
 80013a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d501      	bpl.n	80013b6 <clampf+0x3e>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	e000      	b.n	80013b8 <clampf+0x40>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	ee07 3a90 	vmov	s15, r3
}
 80013bc:	eeb0 0a67 	vmov.f32	s0, s15
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <CurrentController_init>:

#include "current_controller.h"

void CurrentController_init(CurrentController *controller) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  controller->current_filter_alpha = 0.1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <CurrentController_init+0x48>)
 80013d8:	601a      	str	r2, [r3, #0]

  controller->i_q_kp = 3.;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <CurrentController_init+0x4c>)
 80013de:	605a      	str	r2, [r3, #4]
  controller->i_q_ki = 0.; // 0.01
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]

  controller->i_d_kp = 3.;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <CurrentController_init+0x4c>)
 80013ec:	60da      	str	r2, [r3, #12]
  controller->i_d_ki = 0.;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]

  controller->i_q_measured = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	669a      	str	r2, [r3, #104]	; 0x68
  controller->i_d_measured = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	3dcccccd 	.word	0x3dcccccd
 8001418:	40400000 	.word	0x40400000
 800141c:	00000000 	.word	0x00000000

08001420 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6178      	str	r0, [r7, #20]
 8001428:	460b      	mov	r3, r1
 800142a:	ed87 0a03 	vstr	s0, [r7, #12]
 800142e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001432:	ed87 1a01 	vstr	s2, [r7, #4]
 8001436:	74fb      	strb	r3, [r7, #19]
  //  current_error = command_current - feedback_current
  //  current_integrator = limit(current_integrator + ki * current_error, ilimit)
  //  voltage = current_integrator + kp * current_error

  FOC_clarkTransform(
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	edd3 7a08 	vldr	s15, [r3, #32]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001456:	eeb0 1a66 	vmov.f32	s2, s13
 800145a:	eef0 0a47 	vmov.f32	s1, s14
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	4610      	mov	r0, r2
 8001464:	f000 fb9a 	bl	8001b9c <FOC_clarkTransform>
    controller->i_c_measured);

  float i_q;
  float i_d;

  FOC_parkTransform(
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001474:	f107 021c 	add.w	r2, r7, #28
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	edd7 1a02 	vldr	s3, [r7, #8]
 8001480:	ed97 1a03 	vldr	s2, [r7, #12]
 8001484:	eef0 0a47 	vmov.f32	s1, s14
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fbba 	bl	8001c08 <FOC_parkTransform>
    &i_d,
    controller->i_alpha_measured,
    controller->i_beta_measured,
    sin_theta, cos_theta);

  controller->i_q_measured = controller->current_filter_alpha * (i_q - controller->i_q_measured);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 6a08 	vldr	s13, [r7, #32]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80014a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  controller->i_d_measured = controller->current_filter_alpha * (i_d - controller->i_d_measured);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  if (mode != MODE_OPEN_IDQ) {
 80014d0:	7cfb      	ldrb	r3, [r7, #19]
 80014d2:	2b21      	cmp	r3, #33	; 0x21
 80014d4:	d016      	beq.n	8001504 <CurrentController_update+0xe4>
    controller->i_q_setpoint = controller->i_q_target - controller->i_q_measured;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->i_d_setpoint = controller->i_d_target - controller->i_d_measured;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8001502:	e007      	b.n	8001514 <CurrentController_update+0xf4>
  }
  else {
    controller->i_q_setpoint = controller->i_q_target;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	671a      	str	r2, [r3, #112]	; 0x70
    controller->i_d_setpoint = controller->i_d_target;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	675a      	str	r2, [r3, #116]	; 0x74
  }

  if (mode != MODE_OPEN_VDQ) {
 8001514:	7cfb      	ldrb	r3, [r7, #19]
 8001516:	2b22      	cmp	r3, #34	; 0x22
 8001518:	d054      	beq.n	80015c4 <CurrentController_update+0x1a4>
    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_q_ki * controller->i_q_setpoint, -1, 1);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	edd3 6a02 	vldr	s13, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_q_integrator = clampf(
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001538:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	f7ff ff1a 	bl	8001378 <clampf>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->i_d_integrator = clampf(
        controller->i_d_integrator + controller->i_d_ki * controller->i_d_setpoint, -1, 1);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edd3 6a04 	vldr	s13, [r3, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_d_integrator = clampf(
 8001564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001568:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800156c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	f7ff ff00 	bl	8001378 <clampf>
 8001578:	eef0 7a40 	vmov.f32	s15, s0
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

    controller->v_q_setpoint =
        controller->i_q_kp * controller->i_q_setpoint + controller->i_q_integrator;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	ed93 7a01 	vldr	s14, [r3, #4]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800158e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_q_setpoint =
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    controller->v_d_setpoint =
        controller->i_d_kp * controller->i_d_setpoint + controller->i_d_integrator;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80015ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_d_setpoint =
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80015c2:	e007      	b.n	80015d4 <CurrentController_update+0x1b4>
  }
  else {
    controller->v_q_setpoint = controller->v_q_target;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d_setpoint = controller->v_d_target;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  // clamp voltage
  if (v_bus > 0) {
 80015d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	dd53      	ble.n	800168a <CurrentController_update+0x26a>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15;
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015ea:	ee17 0a90 	vmov	r0, s15
 80015ee:	f7fe ffd3 	bl	8000598 <__aeabi_f2d>
 80015f2:	a34d      	add	r3, pc, #308	; (adr r3, 8001728 <CurrentController_update+0x308>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f826 	bl	8000648 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff faf8 	bl	8000bf8 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_norm = (
        (controller->v_q_setpoint * controller->v_q_setpoint)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001618:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (controller->v_d_setpoint * controller->v_d_setpoint)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float v_norm = (
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        );
    if (v_norm > v_max_sq) {
 8001634:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001638:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800163c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	dd21      	ble.n	800168a <CurrentController_update+0x26a>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 8001646:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800164a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800164e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001652:	eef0 7ae7 	vabs.f32	s15, s15
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f00d ff05 	bl	800f468 <sqrtf>
 800165e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      controller->v_q_setpoint *= k;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001668:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      controller->v_d_setpoint *= k;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800167c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    }
  }

  if (mode != MODE_OPEN_VALPHABETA && mode != MODE_CALIBRATION) {
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	2b23      	cmp	r3, #35	; 0x23
 800168e:	d01a      	beq.n	80016c6 <CurrentController_update+0x2a6>
 8001690:	7cfb      	ldrb	r3, [r7, #19]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d017      	beq.n	80016c6 <CurrentController_update+0x2a6>
    FOC_invParkTransform(
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80016ae:	edd7 1a02 	vldr	s3, [r7, #8]
 80016b2:	ed97 1a03 	vldr	s2, [r7, #12]
 80016b6:	eef0 0a47 	vmov.f32	s1, s14
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	4610      	mov	r0, r2
 80016c0:	f000 fad7 	bl	8001c72 <FOC_invParkTransform>
 80016c4:	e007      	b.n	80016d6 <CurrentController_update+0x2b6>
      controller->v_q_setpoint,
      controller->v_d_setpoint,
      sin_theta, cos_theta);
  }
  else {
    controller->v_alpha_setpoint = controller->v_alpha_target;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	649a      	str	r2, [r3, #72]	; 0x48
    controller->v_beta_setpoint = controller->v_beta_target;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (mode != MODE_OPEN_VABC) {
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2b24      	cmp	r3, #36	; 0x24
 80016da:	d015      	beq.n	8001708 <CurrentController_update+0x2e8>
    FOC_invClarkSVPWM(
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80016fa:	eef0 0a47 	vmov.f32	s1, s14
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	f000 faeb 	bl	8001cdc <FOC_invClarkSVPWM>
  else {
    controller->v_a_setpoint = controller->v_a_target;
    controller->v_b_setpoint = controller->v_b_target;
    controller->v_c_setpoint = controller->v_c_target;
  }
}
 8001706:	e00b      	b.n	8001720 <CurrentController_update+0x300>
    controller->v_a_setpoint = controller->v_a_target;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
    controller->v_b_setpoint = controller->v_b_target;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
    controller->v_c_setpoint = controller->v_c_target;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	66666666 	.word	0x66666666
 800172c:	3ff26666 	.word	0x3ff26666

08001730 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 800173a:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001790 <wrapTo2Pi+0x60>
 800173e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001742:	f00d fe71 	bl	800f428 <fmodf>
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	db01      	blt.n	800175c <wrapTo2Pi+0x2c>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	e00e      	b.n	800177a <wrapTo2Pi+0x4a>
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7fe ff1b 	bl	8000598 <__aeabi_f2d>
 8001762:	a309      	add	r3, pc, #36	; (adr r3, 8001788 <wrapTo2Pi+0x58>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe fdb8 	bl	80002dc <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff fa40 	bl	8000bf8 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	ee07 3a90 	vmov	s15, r3
}
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	54442d18 	.word	0x54442d18
 800178c:	401921fb 	.word	0x401921fb
 8001790:	40c90fdb 	.word	0x40c90fdb

08001794 <getParity>:
 * If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number.
 * If the count of 1s in a given set of bits is already even, the parity bit's value is 0.
 *
 * @return true if the number of ones in the data package is even, else false.
 */
uint16_t getParity(uint16_t data) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 8;              // example for 8-bit (this line scales it up to 16 bit)
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	4053      	eors	r3, r2
 80017a8:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4053      	eors	r3, r2
 80017b4:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4053      	eors	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	4053      	eors	r3, r2
 80017cc:	80fb      	strh	r3, [r7, #6]
  return data & 1;                // if lsb of data is 0 -> data is even. if lsb of data is 1 -> data is odd.
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b29b      	uxth	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <Encoder_init>:


void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim) {
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  encoder->hspi = hspi;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	601a      	str	r2, [r3, #0]
  encoder->htim = htim;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	605a      	str	r2, [r3, #4]

  encoder->cpr = 1U << 14;  // 14 bit precision
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001802:	819a      	strh	r2, [r3, #12]
  encoder->direction = -1;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	739a      	strb	r2, [r3, #14]

  encoder->position_offset = 0;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	611a      	str	r2, [r3, #16]

  encoder->filter_bandwidth = 400;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <Encoder_init+0x64>)
 8001816:	615a      	str	r2, [r3, #20]

  encoder->filter_integral = 0;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	621a      	str	r2, [r3, #32]

  encoder->position_reading = 0;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	849a      	strh	r2, [r3, #36]	; 0x24
  encoder->position = 0;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
  encoder->velocity = 0;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	; 0x34

  encoder->n_rotations = 0;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	43c80000 	.word	0x43c80000
 800184c:	00000000 	.word	0x00000000

08001850 <Encoder_setFilterBandwidth>:

void Encoder_setFilterBandwidth(Encoder *encoder, float bandwidth) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	ed87 0a00 	vstr	s0, [r7]
  encoder->filter_bandwidth = bandwidth;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	615a      	str	r2, [r3, #20]
  float w3db = (1. / 8000.) * 2 * M_PI * encoder->filter_bandwidth;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe96 	bl	8000598 <__aeabi_f2d>
 800186c:	a314      	add	r3, pc, #80	; (adr r3, 80018c0 <Encoder_setFilterBandwidth+0x70>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fee9 	bl	8000648 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f9bb 	bl	8000bf8 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	60fb      	str	r3, [r7, #12]
  encoder->filter_k_p = .5 * (2 * w3db);
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800188e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edc3 7a06 	vstr	s15, [r3, #24]
  encoder->filter_k_i = .5 * (w3db * w3db);
 800189c:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	b68b71c3 	.word	0xb68b71c3
 80018c4:	3f49bc65 	.word	0x3f49bc65

080018c8 <Encoder_triggerUpdate>:

void Encoder_triggerUpdate(Encoder *encoder) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  encoder->spi_tx_buffer = 0x3FFF;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80018d6:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= 1 << 14;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	891b      	ldrh	r3, [r3, #8]
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	891b      	ldrh	r3, [r3, #8]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff52 	bl	8001794 <getParity>
 80018f0:	4603      	mov	r3, r0
 80018f2:	03d9      	lsls	r1, r3, #15
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	891b      	ldrh	r3, [r3, #8]
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	b20b      	sxth	r3, r1
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	811a      	strh	r2, [r3, #8]

  __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191a:	f006 fc4b 	bl	80081b4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_IT(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f103 0108 	add.w	r1, r3, #8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f103 020a 	add.w	r2, r3, #10
 800192e:	2301      	movs	r3, #1
 8001930:	f007 fdce 	bl	80094d0 <HAL_SPI_TransmitReceive_IT>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	0000      	movs	r0, r0
	...

08001940 <Encoder_update>:

void Encoder_update(Encoder *encoder) {
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
//  float dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 1000000.;
  float dt = 1 / 4000.;
 8001948:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <Encoder_update+0x1f8>)
 800194a:	627b      	str	r3, [r7, #36]	; 0x24

  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - (encoder->cpr / 2);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	895b      	ldrh	r3, [r3, #10]
 8001950:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	899b      	ldrh	r3, [r3, #12]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	b29b      	uxth	r3, r3
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	847b      	strh	r3, [r7, #34]	; 0x22

  // handle multi-rotation crossing
  int16_t reading_delta = encoder->position_reading - reading;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800196a:	b29a      	uxth	r2, r3
 800196c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	843b      	strh	r3, [r7, #32]
  if (abs(reading_delta) > 0.75 * encoder->cpr) {
 8001974:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001978:	2b00      	cmp	r3, #0
 800197a:	bfb8      	it	lt
 800197c:	425b      	neglt	r3, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdf7 	bl	8000574 <__aeabi_i2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	899b      	ldrh	r3, [r3, #12]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdf0 	bl	8000574 <__aeabi_i2d>
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <Encoder_update+0x1fc>)
 800199a:	f7fe fe55 	bl	8000648 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7ff f8df 	bl	8000b68 <__aeabi_dcmpgt>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <Encoder_update+0x8a>
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	dd02      	ble.n	80019c2 <Encoder_update+0x82>
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	e000      	b.n	80019c4 <Encoder_update+0x84>
 80019c2:	2201      	movs	r2, #1
 80019c4:	441a      	add	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  encoder->position_reading = reading;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80019ce:	849a      	strh	r2, [r3, #36]	; 0x24
  float position_measured = (encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	ee17 0a90 	vmov	r0, s15
 8001a02:	f7fe fdc9 	bl	8000598 <__aeabi_f2d>
 8001a06:	a348      	add	r3, pc, #288	; (adr r3, 8001b28 <Encoder_update+0x1e8>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fe1c 	bl	8000648 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
      + encoder->n_rotations * 2 * M_PI
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fda8 	bl	8000574 <__aeabi_i2d>
 8001a24:	a342      	add	r3, pc, #264	; (adr r3, 8001b30 <Encoder_update+0x1f0>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fe0d 	bl	8000648 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7fe fc51 	bl	80002dc <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4614      	mov	r4, r2
 8001a40:	461d      	mov	r5, r3
      + encoder->position_offset);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fda6 	bl	8000598 <__aeabi_f2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fc42 	bl	80002dc <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
  float position_measured = (encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI)
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f8ca 	bl	8000bf8 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	61fb      	str	r3, [r7, #28]
  float position_prev = encoder->position;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	61bb      	str	r3, [r7, #24]
  float position_error = position_measured - position_prev;
 8001a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7a:	edc7 7a05 	vstr	s15, [r7, #20]

  encoder->filter_integral += encoder->filter_k_i * position_error;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edc3 7a08 	vstr	s15, [r3, #32]

  float position_tune = encoder->filter_k_p * position_error + encoder->filter_integral;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab4:	edc7 7a04 	vstr	s15, [r7, #16]

  encoder->position = position_prev + position_tune;
 8001ab8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001abc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  // subtract the offset to get "true" revolution
  encoder->position_relative = wrapTo2Pi(encoder->position - encoder->position_offset);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ada:	eeb0 0a67 	vmov.f32	s0, s15
 8001ade:	f7ff fe27 	bl	8001730 <wrapTo2Pi>
 8001ae2:	eef0 7a40 	vmov.f32	s15, s0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  float delta_position = encoder->position - position_prev;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afa:	edc7 7a03 	vstr	s15, [r7, #12]
  if (dt > 0) {
 8001afe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	dc00      	bgt.n	8001b0e <Encoder_update+0x1ce>
    encoder->velocity = (delta_position / dt);
  }
}
 8001b0c:	e008      	b.n	8001b20 <Encoder_update+0x1e0>
    encoder->velocity = (delta_position / dt);
 8001b0e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bdb0      	pop	{r4, r5, r7, pc}
 8001b28:	54442d18 	.word	0x54442d18
 8001b2c:	401921fb 	.word	0x401921fb
 8001b30:	54442d18 	.word	0x54442d18
 8001b34:	400921fb 	.word	0x400921fb
 8001b38:	3983126f 	.word	0x3983126f
 8001b3c:	3fe80000 	.word	0x3fe80000

08001b40 <Encoder_getRelativePosition>:

void Encoder_setOffset(Encoder *encoder, float offset) {
  encoder->position_offset = offset;
}

float Encoder_getRelativePosition(Encoder *encoder) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return encoder->position_relative;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	ee07 3a90 	vmov	s15, r3
}
 8001b50:	eeb0 0a67 	vmov.f32	s0, s15
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <Encoder_getPosition>:

float Encoder_getPosition(Encoder *encoder) {
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return encoder->position;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	ee07 3a90 	vmov	s15, r3
}
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <Encoder_getVelocity>:

float Encoder_getVelocity(Encoder *encoder) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return encoder->velocity;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	ee07 3a90 	vmov	s15, r3
}
 8001b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <FOC_clarkTransform>:
 *      Author: TK
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6178      	str	r0, [r7, #20]
 8001ba4:	6139      	str	r1, [r7, #16]
 8001ba6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001baa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bae:	ed87 1a01 	vstr	s2, [r7, #4]
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001c00 <FOC_clarkTransform+0x64>
 8001bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001bd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c04 <FOC_clarkTransform+0x68>
 8001be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	edc3 7a00 	vstr	s15, [r3]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	3eaaaaab 	.word	0x3eaaaaab
 8001c04:	3f13cd3a 	.word	0x3f13cd3a

08001c08 <FOC_parkTransform>:

void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6178      	str	r0, [r7, #20]
 8001c10:	6139      	str	r1, [r7, #16]
 8001c12:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c16:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c1a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c1e:	edc7 1a00 	vstr	s3, [r7]
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001c22:	ed97 7a00 	vldr	s14, [r7]
 8001c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	edc3 7a00 	vstr	s15, [r3]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8001c44:	ed97 7a00 	vldr	s14, [r7]
 8001c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c50:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	edc3 7a00 	vstr	s15, [r3]

}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <FOC_invParkTransform>:

void FOC_invParkTransform(float *v_alpha, float *v_beta, float v_q, float v_d, float sin_theta, float cos_theta) {
 8001c72:	b480      	push	{r7}
 8001c74:	b087      	sub	sp, #28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6178      	str	r0, [r7, #20]
 8001c7a:	6139      	str	r1, [r7, #16]
 8001c7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c80:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c84:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c88:	edc7 1a00 	vstr	s3, [r7]
  *v_alpha  = -(sin_theta * v_q) + (cos_theta * v_d);
 8001c8c:	ed97 7a00 	vldr	s14, [r7]
 8001c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c98:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	edc3 7a00 	vstr	s15, [r3]
  *v_beta   =  (cos_theta * v_q) + (sin_theta * v_d);
 8001cae:	ed97 7a00 	vldr	s14, [r7]
 8001cb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cba:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
}
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <FOC_invClarkSVPWM>:

void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	ed2d 8b02 	vpush	{d8}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6178      	str	r0, [r7, #20]
 8001ce8:	6139      	str	r1, [r7, #16]
 8001cea:	60fa      	str	r2, [r7, #12]
 8001cec:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cf0:	edc7 0a01 	vstr	s1, [r7, #4]
  float v_a_phase = v_alpha;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 8001cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001d00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d08:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001dcc <FOC_invClarkSVPWM+0xf0>
 8001d0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	edc7 7a08 	vstr	s15, [r7, #32]
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 8001d18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001d20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d28:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001dcc <FOC_invClarkSVPWM+0xf0>
 8001d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d34:	edc7 7a07 	vstr	s15, [r7, #28]

  float v_neutral = .5f * (fmaxf(fmaxf(v_a_phase, v_b_phase), v_c_phase) + fminf(fminf(v_a_phase, v_b_phase), v_c_phase));
 8001d38:	edd7 0a08 	vldr	s1, [r7, #32]
 8001d3c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001d40:	f00d fada 	bl	800f2f8 <fmaxf>
 8001d44:	eef0 7a40 	vmov.f32	s15, s0
 8001d48:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d50:	f00d fad2 	bl	800f2f8 <fmaxf>
 8001d54:	eeb0 8a40 	vmov.f32	s16, s0
 8001d58:	edd7 0a08 	vldr	s1, [r7, #32]
 8001d5c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001d60:	f00d fae5 	bl	800f32e <fminf>
 8001d64:	eef0 7a40 	vmov.f32	s15, s0
 8001d68:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f00d fadd 	bl	800f32e <fminf>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
 8001d78:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d84:	edc7 7a06 	vstr	s15, [r7, #24]

  *v_a = v_a_phase - v_neutral;
 8001d88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	edc3 7a00 	vstr	s15, [r3]
  *v_b = v_b_phase - v_neutral;
 8001d9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	edc3 7a00 	vstr	s15, [r3]
  *v_c = v_c_phase - v_neutral;
 8001dac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	edc3 7a00 	vstr	s15, [r3]
}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	ecbd 8b02 	vpop	{d8}
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	3f5db3d7 	.word	0x3f5db3d7

08001dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd4:	f003 fa93 	bl	80052fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd8:	f000 f821 	bl	8001e1e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ddc:	f000 fcae 	bl	800273c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001de0:	f000 f868 	bl	8001eb4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001de4:	f000 f9a4 	bl	8002130 <MX_FDCAN1_Init>
  MX_OPAMP1_Init();
 8001de8:	f000 f9e8 	bl	80021bc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001dec:	f000 fa14 	bl	8002218 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001df0:	f000 fa40 	bl	8002274 <MX_OPAMP3_Init>
  MX_SPI1_Init();
 8001df4:	f000 fa6c 	bl	80022d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001df8:	f000 faa8 	bl	800234c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001dfc:	f000 fc50 	bl	80026a0 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001e00:	f000 f8fe 	bl	8002000 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001e04:	f000 fb7a 	bl	80024fc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001e08:	f000 fbc6 	bl	8002598 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001e0c:	f000 fc12 	bl	8002634 <MX_TIM6_Init>
  MX_CORDIC_Init();
 8001e10:	f000 f97a 	bl	8002108 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8001e14:	f7ff f936 	bl	8001084 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8001e18:	f7ff f96e 	bl	80010f8 <APP_main>
  {
 8001e1c:	e7fc      	b.n	8001e18 <main+0x48>

08001e1e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b094      	sub	sp, #80	; 0x50
 8001e22:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	2238      	movs	r2, #56	; 0x38
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00a fb33 	bl	800c498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f006 fad1 	bl	80083e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e54:	2302      	movs	r3, #2
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e60:	2314      	movs	r3, #20
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	4618      	mov	r0, r3
 8001e76:	f006 fb5b 	bl	8008530 <HAL_RCC_OscConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e80:	f000 fd16 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e84:	230f      	movs	r3, #15
 8001e86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f006 fe5f 	bl	8008b60 <HAL_RCC_ClockConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ea8:	f000 fd02 	bl	80028b0 <Error_Handler>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3750      	adds	r7, #80	; 0x50
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b092      	sub	sp, #72	; 0x48
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	223c      	movs	r2, #60	; 0x3c
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00a fae3 	bl	800c498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001ed4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ed8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001eda:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001edc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee2:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ef4:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001efc:	2208      	movs	r2, #8
 8001efe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f1a:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f32:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f34:	f003 fb24 	bl	8005580 <HAL_ADC_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f3e:	f000 fcb7 	bl	80028b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4828      	ldr	r0, [pc, #160]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f4e:	f004 fc49 	bl	80067e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001f58:	f000 fcaa 	bl	80028b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <MX_ADC1_Init+0x140>)
 8001f5e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001f60:	2309      	movs	r3, #9
 8001f62:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001f68:	237f      	movs	r3, #127	; 0x7f
 8001f6a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001f74:	2303      	movs	r3, #3
 8001f76:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001f9e:	f003 ff41 	bl	8005e24 <HAL_ADCEx_InjectedConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001fa8:	f000 fc82 	bl	80028b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_ADC1_Init+0x144>)
 8001fae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001fb0:	f240 130f 	movw	r3, #271	; 0x10f
 8001fb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001fbc:	f003 ff32 	bl	8005e24 <HAL_ADCEx_InjectedConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001fc6:	f000 fc73 	bl	80028b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_ADC1_Init+0x148>)
 8001fcc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001fce:	f240 2315 	movw	r3, #533	; 0x215
 8001fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_ADC1_Init+0x13c>)
 8001fda:	f003 ff23 	bl	8005e24 <HAL_ADCEx_InjectedConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001fe4:	f000 fc64 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3748      	adds	r7, #72	; 0x48
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000360 	.word	0x20000360
 8001ff4:	b6902000 	.word	0xb6902000
 8001ff8:	04300002 	.word	0x04300002
 8001ffc:	2e300800 	.word	0x2e300800

08002000 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b090      	sub	sp, #64	; 0x40
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	223c      	movs	r2, #60	; 0x3c
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f00a fa43 	bl	800c498 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002014:	4a39      	ldr	r2, [pc, #228]	; (80020fc <MX_ADC2_Init+0xfc>)
 8002016:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002018:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <MX_ADC2_Init+0xf8>)
 800201a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800201e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <MX_ADC2_Init+0xf8>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002034:	2201      	movs	r2, #1
 8002036:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <MX_ADC2_Init+0xf8>)
 800203a:	2208      	movs	r2, #8
 800203c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002046:	2200      	movs	r2, #0
 8002048:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <MX_ADC2_Init+0xf8>)
 800204c:	2201      	movs	r2, #1
 800204e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <MX_ADC2_Init+0xf8>)
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <MX_ADC2_Init+0xf8>)
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002070:	4821      	ldr	r0, [pc, #132]	; (80020f8 <MX_ADC2_Init+0xf8>)
 8002072:	f003 fa85 	bl	8005580 <HAL_ADC_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800207c:	f000 fc18 	bl	80028b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP2;
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <MX_ADC2_Init+0x100>)
 8002082:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002084:	2309      	movs	r3, #9
 8002086:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800208c:	237f      	movs	r3, #127	; 0x7f
 800208e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002090:	2304      	movs	r3, #4
 8002092:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002098:	2302      	movs	r3, #2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <MX_ADC2_Init+0xf8>)
 80020c2:	f003 feaf 	bl	8005e24 <HAL_ADCEx_InjectedConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80020cc:	f000 fbf0 	bl	80028b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_ADC2_Init+0x104>)
 80020d2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80020d4:	f240 130f 	movw	r3, #271	; 0x10f
 80020d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_ADC2_Init+0xf8>)
 80020e0:	f003 fea0 	bl	8005e24 <HAL_ADCEx_InjectedConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80020ea:	f000 fbe1 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3740      	adds	r7, #64	; 0x40
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003cc 	.word	0x200003cc
 80020fc:	50000100 	.word	0x50000100
 8002100:	c3290000 	.word	0xc3290000
 8002104:	cb8c0000 	.word	0xcb8c0000

08002108 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_CORDIC_Init+0x20>)
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <MX_CORDIC_Init+0x24>)
 8002110:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_CORDIC_Init+0x20>)
 8002114:	f004 fc0a 	bl	800692c <HAL_CORDIC_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800211e:	f000 fbc7 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000438 	.word	0x20000438
 800212c:	40020c00 	.word	0x40020c00

08002130 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002136:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <MX_FDCAN1_Init+0x88>)
 8002138:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800214e:	2200      	movs	r2, #0
 8002150:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002154:	2200      	movs	r2, #0
 8002156:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800215a:	2200      	movs	r2, #0
 800215c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002160:	2210      	movs	r2, #16
 8002162:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002166:	2201      	movs	r2, #1
 8002168:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800216c:	2207      	movs	r2, #7
 800216e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002172:	2202      	movs	r2, #2
 8002174:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002178:	2201      	movs	r2, #1
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800217e:	2201      	movs	r2, #1
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002184:	2201      	movs	r2, #1
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800218a:	2201      	movs	r2, #1
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002190:	2200      	movs	r2, #0
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 8002196:	2200      	movs	r2, #0
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 800219c:	2200      	movs	r2, #0
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MX_FDCAN1_Init+0x84>)
 80021a2:	f004 fda7 	bl	8006cf4 <HAL_FDCAN_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80021ac:	f000 fb80 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000460 	.word	0x20000460
 80021b8:	40006400 	.word	0x40006400

080021bc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <MX_OPAMP1_Init+0x58>)
 80021c4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021da:	2201      	movs	r2, #1
 80021dc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021ee:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_OPAMP1_Init+0x54>)
 80021fc:	f005 fff2 	bl	80081e4 <HAL_OPAMP_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002206:	f000 fb53 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200004c4 	.word	0x200004c4
 8002214:	40010300 	.word	0x40010300

08002218 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <MX_OPAMP2_Init+0x54>)
 800221e:	4a14      	ldr	r2, [pc, #80]	; (8002270 <MX_OPAMP2_Init+0x58>)
 8002220:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_OPAMP2_Init+0x54>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <MX_OPAMP2_Init+0x54>)
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_OPAMP2_Init+0x54>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <MX_OPAMP2_Init+0x54>)
 8002236:	2201      	movs	r2, #1
 8002238:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_OPAMP2_Init+0x54>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <MX_OPAMP2_Init+0x54>)
 8002242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_OPAMP2_Init+0x54>)
 800224a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_OPAMP2_Init+0x54>)
 8002252:	2200      	movs	r2, #0
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_OPAMP2_Init+0x54>)
 8002258:	f005 ffc4 	bl	80081e4 <HAL_OPAMP_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8002262:	f000 fb25 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000500 	.word	0x20000500
 8002270:	40010304 	.word	0x40010304

08002274 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <MX_OPAMP3_Init+0x58>)
 800227c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 8002292:	2201      	movs	r2, #1
 8002294:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 800229e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 80022a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_OPAMP3_Init+0x54>)
 80022b4:	f005 ff96 	bl	80081e4 <HAL_OPAMP_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 80022be:	f000 faf7 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000053c 	.word	0x2000053c
 80022cc:	40010308 	.word	0x40010308

080022d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <MX_SPI1_Init+0x74>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <MX_SPI1_Init+0x78>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_SPI1_Init+0x74>)
 80022dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_SPI1_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_SPI1_Init+0x74>)
 80022ea:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80022ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_SPI1_Init+0x74>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_SPI1_Init+0x74>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_SPI1_Init+0x74>)
 80022fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002302:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_SPI1_Init+0x74>)
 8002306:	2218      	movs	r2, #24
 8002308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_SPI1_Init+0x74>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_SPI1_Init+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <MX_SPI1_Init+0x74>)
 8002318:	2200      	movs	r2, #0
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_SPI1_Init+0x74>)
 800231e:	2207      	movs	r2, #7
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <MX_SPI1_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_SPI1_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_SPI1_Init+0x74>)
 8002330:	f007 f822 	bl	8009378 <HAL_SPI_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800233a:	f000 fab9 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000578 	.word	0x20000578
 8002348:	40013000 	.word	0x40013000

0800234c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b09c      	sub	sp, #112	; 0x70
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800236c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	615a      	str	r2, [r3, #20]
 800237e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2234      	movs	r2, #52	; 0x34
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f00a f886 	bl	800c498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 800238e:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <MX_TIM1_Init+0x1ac>)
 8002390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002392:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002398:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 800239a:	2220      	movs	r2, #32
 800239c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800239e:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023a0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80023a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80023ac:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b8:	484e      	ldr	r0, [pc, #312]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023ba:	f007 fd13 	bl	8009de4 <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023c4:	f000 fa74 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023d2:	4619      	mov	r1, r3
 80023d4:	4847      	ldr	r0, [pc, #284]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023d6:	f008 fa1f 	bl	800a818 <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80023e0:	f000 fa66 	bl	80028b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023e4:	4843      	ldr	r0, [pc, #268]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80023e6:	f007 fe21 	bl	800a02c <HAL_TIM_PWM_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80023f0:	f000 fa5e 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80023f4:	2370      	movs	r3, #112	; 0x70
 80023f6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002404:	4619      	mov	r1, r3
 8002406:	483b      	ldr	r0, [pc, #236]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 8002408:	f009 f824 	bl	800b454 <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002412:	f000 fa4d 	bl	80028b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002416:	2360      	movs	r3, #96	; 0x60
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241e:	2300      	movs	r3, #0
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002422:	2300      	movs	r3, #0
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002432:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002436:	2200      	movs	r2, #0
 8002438:	4619      	mov	r1, r3
 800243a:	482e      	ldr	r0, [pc, #184]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 800243c:	f008 f8d8 	bl	800a5f0 <HAL_TIM_PWM_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002446:	f000 fa33 	bl	80028b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800244a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800244e:	2204      	movs	r2, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4828      	ldr	r0, [pc, #160]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 8002454:	f008 f8cc 	bl	800a5f0 <HAL_TIM_PWM_ConfigChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800245e:	f000 fa27 	bl	80028b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002462:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002466:	2208      	movs	r2, #8
 8002468:	4619      	mov	r1, r3
 800246a:	4822      	ldr	r0, [pc, #136]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 800246c:	f008 f8c0 	bl	800a5f0 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002476:	f000 fa1b 	bl	80028b0 <Error_Handler>
  }
  sConfigOC.Pulse = 3998;
 800247a:	f640 739e 	movw	r3, #3998	; 0xf9e
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002480:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002484:	220c      	movs	r2, #12
 8002486:	4619      	mov	r1, r3
 8002488:	481a      	ldr	r0, [pc, #104]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 800248a:	f008 f8b1 	bl	800a5f0 <HAL_TIM_PWM_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002494:	f000 fa0c 	bl	80028b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4807      	ldr	r0, [pc, #28]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80024d6:	f009 f83f 	bl	800b558 <HAL_TIMEx_ConfigBreakDeadTime>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 80024e0:	f000 f9e6 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024e4:	4803      	ldr	r0, [pc, #12]	; (80024f4 <MX_TIM1_Init+0x1a8>)
 80024e6:	f002 fce1 	bl	8004eac <HAL_TIM_MspPostInit>

}
 80024ea:	bf00      	nop
 80024ec:	3770      	adds	r7, #112	; 0x70
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200005dc 	.word	0x200005dc
 80024f8:	40012c00 	.word	0x40012c00

080024fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <MX_TIM2_Init+0x98>)
 800251c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <MX_TIM2_Init+0x98>)
 8002524:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_TIM2_Init+0x98>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <MX_TIM2_Init+0x98>)
 8002532:	f242 720f 	movw	r2, #9999	; 0x270f
 8002536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <MX_TIM2_Init+0x98>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <MX_TIM2_Init+0x98>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002544:	4813      	ldr	r0, [pc, #76]	; (8002594 <MX_TIM2_Init+0x98>)
 8002546:	f007 fc4d 	bl	8009de4 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002550:	f000 f9ae 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002558:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <MX_TIM2_Init+0x98>)
 8002562:	f008 f959 	bl	800a818 <HAL_TIM_ConfigClockSource>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800256c:	f000 f9a0 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002570:	2320      	movs	r3, #32
 8002572:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_TIM2_Init+0x98>)
 800257e:	f008 ff69 	bl	800b454 <HAL_TIMEx_MasterConfigSynchronization>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002588:	f000 f992 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000628 	.word	0x20000628

08002598 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <MX_TIM4_Init+0x94>)
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <MX_TIM4_Init+0x98>)
 80025ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <MX_TIM4_Init+0x94>)
 80025be:	2213      	movs	r2, #19
 80025c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_TIM4_Init+0x94>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_TIM4_Init+0x94>)
 80025ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <MX_TIM4_Init+0x94>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_TIM4_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025dc:	4813      	ldr	r0, [pc, #76]	; (800262c <MX_TIM4_Init+0x94>)
 80025de:	f007 fc01 	bl	8009de4 <HAL_TIM_Base_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80025e8:	f000 f962 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4619      	mov	r1, r3
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <MX_TIM4_Init+0x94>)
 80025fa:	f008 f90d 	bl	800a818 <HAL_TIM_ConfigClockSource>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002604:	f000 f954 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002608:	2320      	movs	r3, #32
 800260a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_TIM4_Init+0x94>)
 8002616:	f008 ff1d 	bl	800b454 <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002620:	f000 f946 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000674 	.word	0x20000674
 8002630:	40000800 	.word	0x40000800

08002634 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <MX_TIM6_Init+0x64>)
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <MX_TIM6_Init+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_TIM6_Init+0x64>)
 800264c:	229f      	movs	r2, #159	; 0x9f
 800264e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_TIM6_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_TIM6_Init+0x64>)
 8002658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_TIM6_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <MX_TIM6_Init+0x64>)
 8002666:	f007 fbbd 	bl	8009de4 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002670:	f000 f91e 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_TIM6_Init+0x64>)
 8002682:	f008 fee7 	bl	800b454 <HAL_TIMEx_MasterConfigSynchronization>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800268c:	f000 f910 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200006c0 	.word	0x200006c0
 800269c:	40001000 	.word	0x40001000

080026a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <MX_USART3_UART_Init+0x94>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <MX_USART3_UART_Init+0x98>)
 80026ae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026c4:	220c      	movs	r2, #12
 80026c6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026e6:	4812      	ldr	r0, [pc, #72]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026e8:	f009 f841 	bl	800b76e <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80026f2:	f000 f8dd 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f6:	2100      	movs	r1, #0
 80026f8:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_USART3_UART_Init+0x90>)
 80026fa:	f009 fdd9 	bl	800c2b0 <HAL_UARTEx_SetTxFifoThreshold>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002704:	f000 f8d4 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <MX_USART3_UART_Init+0x90>)
 800270c:	f009 fe0e 	bl	800c32c <HAL_UARTEx_SetRxFifoThreshold>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002716:	f000 f8cb 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_USART3_UART_Init+0x90>)
 800271c:	f009 fd8f 	bl	800c23e <HAL_UARTEx_DisableFifoMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002726:	f000 f8c3 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000070c 	.word	0x2000070c
 8002734:	40004800 	.word	0x40004800
 8002738:	000f4240 	.word	0x000f4240

0800273c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	4a53      	ldr	r2, [pc, #332]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275e:	4b51      	ldr	r3, [pc, #324]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800276a:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <MX_GPIO_Init+0x168>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4a4d      	ldr	r2, [pc, #308]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002776:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a47      	ldr	r2, [pc, #284]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4b45      	ldr	r3, [pc, #276]	; (80028a4 <MX_GPIO_Init+0x168>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <MX_GPIO_Init+0x168>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <MX_GPIO_Init+0x168>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <MX_GPIO_Init+0x168>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80027b8:	483b      	ldr	r0, [pc, #236]	; (80028a8 <MX_GPIO_Init+0x16c>)
 80027ba:	f005 fcfb 	bl	80081b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	2154      	movs	r1, #84	; 0x54
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c6:	f005 fcf5 	bl	80081b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d4:	f005 fcee 	bl	80081b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	4833      	ldr	r0, [pc, #204]	; (80028ac <MX_GPIO_Init+0x170>)
 80027de:	f005 fce9 	bl	80081b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	4831      	ldr	r0, [pc, #196]	; (80028ac <MX_GPIO_Init+0x170>)
 80027e8:	f005 fce4 	bl	80081b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4828      	ldr	r0, [pc, #160]	; (80028a8 <MX_GPIO_Init+0x16c>)
 8002806:	f005 fb3b 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 800280a:	2354      	movs	r3, #84	; 0x54
 800280c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f005 fb2c 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002836:	2302      	movs	r3, #2
 8002838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002844:	f005 fb1c 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002848:	2340      	movs	r3, #64	; 0x40
 800284a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002854:	2302      	movs	r3, #2
 8002856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <MX_GPIO_Init+0x170>)
 8002860:	f005 fb0e 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	480c      	ldr	r0, [pc, #48]	; (80028ac <MX_GPIO_Init+0x170>)
 800287c:	f005 fb00 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_GPIO_Init+0x170>)
 8002896:	f005 faf3 	bl	8007e80 <HAL_GPIO_Init>

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	48000800 	.word	0x48000800
 80028ac:	48000400 	.word	0x48000400

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>

080028ba <Motor_init>:


#include "motor.h"


void Motor_init(Motor *motor) {
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  motor->pole_pairs = 14;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	220e      	movs	r2, #14
 80028c6:	601a      	str	r2, [r3, #0]
  motor->kv_rating = 150;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2296      	movs	r2, #150	; 0x96
 80028cc:	605a      	str	r2, [r3, #4]

  motor->flux_angle_offset = 0.;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	0000      	movs	r0, r0
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <wrapTo2Pi>:
static inline float wrapTo2Pi(float value) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 80028f2:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002948 <wrapTo2Pi+0x60>
 80028f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80028fa:	f00c fd95 	bl	800f428 <fmodf>
 80028fe:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 8002902:	edd7 7a01 	vldr	s15, [r7, #4]
 8002906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	db01      	blt.n	8002914 <wrapTo2Pi+0x2c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	e00e      	b.n	8002932 <wrapTo2Pi+0x4a>
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fd fe3f 	bl	8000598 <__aeabi_f2d>
 800291a:	a309      	add	r3, pc, #36	; (adr r3, 8002940 <wrapTo2Pi+0x58>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fcdc 	bl	80002dc <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe f964 	bl	8000bf8 <__aeabi_d2f>
 8002930:	4603      	mov	r3, r0
 8002932:	ee07 3a90 	vmov	s15, r3
}
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	54442d18 	.word	0x54442d18
 8002944:	401921fb 	.word	0x401921fb
 8002948:	40c90fdb 	.word	0x40c90fdb

0800294c <MotorController_init>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart3;

void MotorController_init(MotorController *controller) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b090      	sub	sp, #64	; 0x40
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  controller->mode = MODE_DISABLED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  controller->device_id = DEVICE_CAN_ID;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
  controller->firmware_version = FIRMWARE_VERSION;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a76      	ldr	r2, [pc, #472]	; (8002b40 <MotorController_init+0x1f4>)
 8002968:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  filter_config.FilterIndex = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_config.FilterType = FDCAN_FILTER_MASK;
 8002974:	2302      	movs	r3, #2
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002978:	2301      	movs	r3, #1
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  filter_config.FilterID1 = controller->device_id;    // filter
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8002984:	2300      	movs	r3, #0
 8002986:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  CORDIC_ConfigTypeDef cordic_config;
  cordic_config.Function = CORDIC_FUNCTION_COSINE; // ouput : cosine, then sine
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  cordic_config.Scale = CORDIC_SCALE_0; // not used
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
  cordic_config.InSize = CORDIC_INSIZE_32BITS; // q31
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  cordic_config.OutSize = CORDIC_OUTSIZE_32BITS; // q31
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  cordic_config.NbWrite = CORDIC_NBWRITE_1; // ARG2 is 1 default
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  cordic_config.NbRead = CORDIC_NBREAD_2; // read cosine and sine
 80029a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029a6:	61fb      	str	r3, [r7, #28]
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 80029a8:	2350      	movs	r3, #80	; 0x50
 80029aa:	623b      	str	r3, [r7, #32]
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	4619      	mov	r1, r3
 80029b2:	4864      	ldr	r0, [pc, #400]	; (8002b44 <MotorController_init+0x1f8>)
 80029b4:	f003 ffec 	bl	8006990 <HAL_CORDIC_Configure>

  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 80029b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029bc:	4619      	mov	r1, r3
 80029be:	4862      	ldr	r0, [pc, #392]	; (8002b48 <MotorController_init+0x1fc>)
 80029c0:	f004 faf2 	bl	8006fa8 <HAL_FDCAN_ConfigFilter>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_FDCAN_Start(&hfdcan1);
 80029d2:	485d      	ldr	r0, [pc, #372]	; (8002b48 <MotorController_init+0x1fc>)
 80029d4:	f004 fb42 	bl	800705c <HAL_FDCAN_Start>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2101      	movs	r1, #1
 80029ea:	4857      	ldr	r0, [pc, #348]	; (8002b48 <MotorController_init+0x1fc>)
 80029ec:	f004 fc7c 	bl	80072e8 <HAL_FDCAN_ActivateNotification>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  Encoder_init(&controller->encoder, &hspi1, &htim6);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <MotorController_init+0x200>)
 8002a02:	4953      	ldr	r1, [pc, #332]	; (8002b50 <MotorController_init+0x204>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe feed 	bl	80017e4 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <MotorController_init+0x208>)
 8002a12:	4a51      	ldr	r2, [pc, #324]	; (8002b58 <MotorController_init+0x20c>)
 8002a14:	4951      	ldr	r1, [pc, #324]	; (8002b5c <MotorController_init+0x210>)
 8002a16:	f001 fde1 	bl	80045dc <PowerStage_init>
  Motor_init(&controller->motor);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff4b 	bl	80028ba <Motor_init>

  CurrentController_init(&controller->current_controller);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3368      	adds	r3, #104	; 0x68
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fccf 	bl	80013cc <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	33e8      	adds	r3, #232	; 0xe8
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 fcd8 	bl	80043e8 <PositionController_init>

#if OVERWRITE_CONFIG
  MotorController_storeConfig(controller);
#else
  MotorController_loadConfig(controller);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f99b 	bl	8002d74 <MotorController_loadConfig>
#endif

  Encoder_setFilterBandwidth(&controller->encoder, controller->encoder.filter_bandwidth);
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a46:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7fe ff00 	bl	8001850 <Encoder_setFilterBandwidth>

  PowerStage_start(&controller->powerstage);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3338      	adds	r3, #56	; 0x38
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fddd 	bl	8004614 <PowerStage_start>

  status |= HAL_OPAMP_Start(&hopamp1);
 8002a5a:	4841      	ldr	r0, [pc, #260]	; (8002b60 <MotorController_init+0x214>)
 8002a5c:	f005 fc92 	bl	8008384 <HAL_OPAMP_Start>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_OPAMP_Start(&hopamp2);
 8002a6e:	483d      	ldr	r0, [pc, #244]	; (8002b64 <MotorController_init+0x218>)
 8002a70:	f005 fc88 	bl	8008384 <HAL_OPAMP_Start>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_OPAMP_Start(&hopamp3);
 8002a82:	4839      	ldr	r0, [pc, #228]	; (8002b68 <MotorController_init+0x21c>)
 8002a84:	f005 fc7e 	bl	8008384 <HAL_OPAMP_Start>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_TIM_Base_Start_IT(&htim2);    // safety watchdog timer
 8002a96:	4835      	ldr	r0, [pc, #212]	; (8002b6c <MotorController_init+0x220>)
 8002a98:	f007 fa5e 	bl	8009f58 <HAL_TIM_Base_Start_IT>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_Base_Start_IT(&htim4);    // position update trigger timer
 8002aaa:	4831      	ldr	r0, [pc, #196]	; (8002b70 <MotorController_init+0x224>)
 8002aac:	f007 fa54 	bl	8009f58 <HAL_TIM_Base_Start_IT>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_Base_Start(&htim6);       // time keeper timer
 8002abe:	4823      	ldr	r0, [pc, #140]	; (8002b4c <MotorController_init+0x200>)
 8002ac0:	f007 f9e8 	bl	8009e94 <HAL_TIM_Base_Start>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002ad2:	4821      	ldr	r0, [pc, #132]	; (8002b58 <MotorController_init+0x20c>)
 8002ad4:	f003 f8be 	bl	8005c54 <HAL_ADCEx_InjectedStart>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002ae6:	481b      	ldr	r0, [pc, #108]	; (8002b54 <MotorController_init+0x208>)
 8002ae8:	f003 f8b4 	bl	8005c54 <HAL_ADCEx_InjectedStart>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (status != HAL_OK) {
 8002afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d000      	beq.n	8002b04 <MotorController_init+0x1b8>
    while (1) {
 8002b02:	e7fe      	b.n	8002b02 <MotorController_init+0x1b6>
      // error loop
    }
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fede 	bl	80018c8 <Encoder_triggerUpdate>

  HAL_Delay(100);
 8002b0c:	2064      	movs	r0, #100	; 0x64
 8002b0e:	f002 fc67 	bl	80053e0 <HAL_Delay>
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3338      	adds	r3, #56	; 0x38
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fe8a 	bl	8004830 <PowerStage_calibratePhaseCurrentOffset>

  if (controller->mode == MODE_DISABLED) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <MotorController_init+0x1ea>
    controller->mode = MODE_IDLE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    controller->error = ERROR_NO_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  }
}
 8002b36:	bf00      	nop
 8002b38:	3740      	adds	r7, #64	; 0x40
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	00100003 	.word	0x00100003
 8002b44:	20000438 	.word	0x20000438
 8002b48:	20000460 	.word	0x20000460
 8002b4c:	200006c0 	.word	0x200006c0
 8002b50:	20000578 	.word	0x20000578
 8002b54:	200003cc 	.word	0x200003cc
 8002b58:	20000360 	.word	0x20000360
 8002b5c:	200005dc 	.word	0x200005dc
 8002b60:	200004c4 	.word	0x200004c4
 8002b64:	20000500 	.word	0x20000500
 8002b68:	2000053c 	.word	0x2000053c
 8002b6c:	20000628 	.word	0x20000628
 8002b70:	20000674 	.word	0x20000674

08002b74 <MotorController_getMode>:

ErrorCode MotorController_getError(MotorController *controller) {
  return controller->error;
}

Mode MotorController_getMode(MotorController *controller) {
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return controller->mode;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <MotorController_setMode>:

void MotorController_setMode(MotorController *controller, Mode mode) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  switch (mode) {
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	2b24      	cmp	r3, #36	; 0x24
 8002ba0:	dc52      	bgt.n	8002c48 <MotorController_setMode+0xb8>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f2c0 8088 	blt.w	8002cb8 <MotorController_setMode+0x128>
 8002ba8:	2b24      	cmp	r3, #36	; 0x24
 8002baa:	f200 8085 	bhi.w	8002cb8 <MotorController_setMode+0x128>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <MotorController_setMode+0x24>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002c4f 	.word	0x08002c4f
 8002bb8:	08002c5b 	.word	0x08002c5b
 8002bbc:	08002cb9 	.word	0x08002cb9
 8002bc0:	08002cb9 	.word	0x08002cb9
 8002bc4:	08002cb9 	.word	0x08002cb9
 8002bc8:	08002c6f 	.word	0x08002c6f
 8002bcc:	08002cb9 	.word	0x08002cb9
 8002bd0:	08002cb9 	.word	0x08002cb9
 8002bd4:	08002cb9 	.word	0x08002cb9
 8002bd8:	08002cb9 	.word	0x08002cb9
 8002bdc:	08002cb9 	.word	0x08002cb9
 8002be0:	08002cb9 	.word	0x08002cb9
 8002be4:	08002cb9 	.word	0x08002cb9
 8002be8:	08002cb9 	.word	0x08002cb9
 8002bec:	08002cb9 	.word	0x08002cb9
 8002bf0:	08002cb9 	.word	0x08002cb9
 8002bf4:	08002c7b 	.word	0x08002c7b
 8002bf8:	08002c7b 	.word	0x08002c7b
 8002bfc:	08002c7b 	.word	0x08002c7b
 8002c00:	08002cb9 	.word	0x08002cb9
 8002c04:	08002cb9 	.word	0x08002cb9
 8002c08:	08002cb9 	.word	0x08002cb9
 8002c0c:	08002cb9 	.word	0x08002cb9
 8002c10:	08002cb9 	.word	0x08002cb9
 8002c14:	08002cb9 	.word	0x08002cb9
 8002c18:	08002cb9 	.word	0x08002cb9
 8002c1c:	08002cb9 	.word	0x08002cb9
 8002c20:	08002cb9 	.word	0x08002cb9
 8002c24:	08002cb9 	.word	0x08002cb9
 8002c28:	08002cb9 	.word	0x08002cb9
 8002c2c:	08002cb9 	.word	0x08002cb9
 8002c30:	08002cb9 	.word	0x08002cb9
 8002c34:	08002cb9 	.word	0x08002cb9
 8002c38:	08002c7b 	.word	0x08002c7b
 8002c3c:	08002c7b 	.word	0x08002c7b
 8002c40:	08002c7b 	.word	0x08002c7b
 8002c44:	08002c7b 	.word	0x08002c7b
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d016      	beq.n	8002c7a <MotorController_setMode+0xea>
 8002c4c:	e034      	b.n	8002cb8 <MotorController_setMode+0x128>
    case MODE_DISABLED:
      PowerStage_disable(&controller->powerstage);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3338      	adds	r3, #56	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fd10 	bl	8004678 <PowerStage_disable>
      break;
 8002c58:	e03c      	b.n	8002cd4 <MotorController_setMode+0x144>

    case MODE_IDLE:
      PowerStage_enable(&controller->powerstage);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3338      	adds	r3, #56	; 0x38
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fd24 	bl	80046ac <PowerStage_enable>
      controller->error = ERROR_NO_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
      break;
 8002c6c:	e032      	b.n	8002cd4 <MotorController_setMode+0x144>

    case MODE_CALIBRATION:
      PowerStage_enable(&controller->powerstage);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3338      	adds	r3, #56	; 0x38
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fd1a 	bl	80046ac <PowerStage_enable>
      break;
 8002c78:	e02c      	b.n	8002cd4 <MotorController_setMode+0x144>
    case MODE_DEBUG:
    case MODE_OPEN_VDQ:
    case MODE_OPEN_VALPHABETA:
    case MODE_OPEN_VABC:
    case MODE_OPEN_IDQ:
      if (controller->mode != MODE_IDLE && controller->mode != mode) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d013      	beq.n	8002cac <MotorController_setMode+0x11c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d00d      	beq.n	8002cac <MotorController_setMode+0x11c>
        PowerStage_disable(&controller->powerstage);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 fcef 	bl	8004678 <PowerStage_disable>
        controller->mode = MODE_DISABLED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        controller->error = ERROR_INVALID_MODE_SWITCH;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
        return;  // return directly, do not update mode
 8002caa:	e017      	b.n	8002cdc <MotorController_setMode+0x14c>
      }
      PowerStage_enable(&controller->powerstage);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3338      	adds	r3, #56	; 0x38
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 fcfb 	bl	80046ac <PowerStage_enable>
      break;
 8002cb6:	e00d      	b.n	8002cd4 <MotorController_setMode+0x144>

    default:
      PowerStage_disable(&controller->powerstage);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3338      	adds	r3, #56	; 0x38
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fcdb 	bl	8004678 <PowerStage_disable>
      controller->mode = MODE_DISABLED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
      controller->error = ERROR_INVALID_MODE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
      return;  // return directly, do not update mode
 8002cd2:	e003      	b.n	8002cdc <MotorController_setMode+0x14c>
  }
  controller->mode = mode;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
}
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <MotorController_setFluxAngle>:

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cf0:	edc7 0a01 	vstr	s1, [r7, #4]
  float theta = wrapTo2Pi(angle_setpoint);
 8002cf4:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cf8:	f7ff fdf6 	bl	80028e8 <wrapTo2Pi>
 8002cfc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float sin_theta = sinf(theta);
 8002d00:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d04:	f00c fb4a 	bl	800f39c <sinf>
 8002d08:	ed87 0a08 	vstr	s0, [r7, #32]
  float cos_theta = cosf(theta);
 8002d0c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d10:	f00c faae 	bl	800f270 <cosf>
 8002d14:	ed87 0a07 	vstr	s0, [r7, #28]
  float v_q = 0.0;
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  float v_d = voltage_setpoint;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	617b      	str	r3, [r7, #20]

  controller->current_controller.v_alpha_target = -sin_theta * v_q + cos_theta * v_d;
 8002d22:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d26:	eeb1 7a67 	vneg.f32	s14, s15
 8002d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
  controller->current_controller.v_beta_target =   cos_theta * v_q + sin_theta * v_d;
 8002d48:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d54:	edd7 6a08 	vldr	s13, [r7, #32]
 8002d58:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <MotorController_loadConfig>:

void MotorController_loadConfig(MotorController *controller) {
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  EEPROMConfig *config = (EEPROMConfig *)FLASH_CONFIG_ADDRESS;
 8002d7c:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <MotorController_loadConfig+0x104>)
 8002d7e:	60fb      	str	r3, [r7, #12]

  controller->firmware_version                  = config->firmware_version;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  controller->device_id                         = config->device_id;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144

  controller->encoder.cpr                       = abs(config->encoder_dir_cpr);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bfb8      	it	lt
 8002d9e:	425b      	neglt	r3, r3
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	819a      	strh	r2, [r3, #12]
  controller->encoder.direction                 = config->encoder_dir_cpr > 0 ? 1 : -1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	dd01      	ble.n	8002db2 <MotorController_loadConfig+0x3e>
 8002dae:	2201      	movs	r2, #1
 8002db0:	e001      	b.n	8002db6 <MotorController_loadConfig+0x42>
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	739a      	strb	r2, [r3, #14]
  controller->encoder.position_offset           = config->encoder_position_offset;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]

  controller->powerstage.undervoltage_threshold = config->powerstage_undervoltage_threshold;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
  controller->powerstage.overvoltage_threshold  = config->powerstage_overvoltage_threshold;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	649a      	str	r2, [r3, #72]	; 0x48

  controller->motor.pole_pairs                  = config->motor_pole_pairs;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	65da      	str	r2, [r3, #92]	; 0x5c
  controller->motor.kv_rating                   = config->motor_kv_rating;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	661a      	str	r2, [r3, #96]	; 0x60
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	665a      	str	r2, [r3, #100]	; 0x64

  controller->current_controller.current_filter_alpha   =   config->current_controller_current_filter_alpha;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	669a      	str	r2, [r3, #104]	; 0x68
  controller->current_controller.i_q_kp         = config->current_controller_i_q_kp;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	66da      	str	r2, [r3, #108]	; 0x6c
  controller->current_controller.i_q_ki         = config->current_controller_i_q_ki;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	671a      	str	r2, [r3, #112]	; 0x70
  controller->current_controller.i_d_kp         = config->current_controller_i_d_kp;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	675a      	str	r2, [r3, #116]	; 0x74
  controller->current_controller.i_d_ki         = config->current_controller_i_d_ki;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	679a      	str	r2, [r3, #120]	; 0x78

  controller->position_controller.position_kp   = config->position_controller_position_kp;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  controller->position_controller.position_ki   = config->position_controller_position_ki;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  controller->position_controller.position_kd   = config->position_controller_position_kd;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  controller->position_controller.torque_limit_upper    = config->position_controller_torque_limit_upper;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  controller->position_controller.torque_limit_lower    = config->position_controller_torque_limit_lower;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  controller->position_controller.velocity_limit_upper  = config->position_controller_velocity_limit_upper;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  controller->position_controller.velocity_limit_lower  = config->position_controller_velocity_limit_lower;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	0801f800 	.word	0x0801f800

08002e7c <MotorController_storeConfig>:

uint32_t MotorController_storeConfig(MotorController *controller) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0a4      	sub	sp, #144	; 0x90
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  EEPROMConfig config;

  config.firmware_version                     = controller->firmware_version;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e8a:	623b      	str	r3, [r7, #32]
  config.device_id                            = controller->device_id;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002e92:	61fb      	str	r3, [r7, #28]

  config.encoder_dir_cpr                      = controller->encoder.direction * (int32_t)controller->encoder.cpr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	899b      	ldrh	r3, [r3, #12]
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  config.encoder_position_offset              = controller->encoder.position_offset;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40

  config.current_controller_current_filter_alpha  = controller->current_controller.current_filter_alpha;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
  config.current_controller_i_q_kp            = controller->current_controller.i_q_kp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  config.current_controller_i_q_ki            = controller->current_controller.i_q_ki;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  config.current_controller_i_d_kp            = controller->current_controller.i_d_kp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee0:	653b      	str	r3, [r7, #80]	; 0x50
  config.current_controller_i_d_ki            = controller->current_controller.i_d_ki;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee6:	657b      	str	r3, [r7, #84]	; 0x54

  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eee:	65bb      	str	r3, [r7, #88]	; 0x58
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
  config.position_controller_position_kd      = controller->position_controller.position_kd;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002efe:	663b      	str	r3, [r7, #96]	; 0x60
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_upper;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002f06:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_lower;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002f0e:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_velocity_limit_upper     = controller->position_controller.velocity_limit_upper;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002f16:	66fb      	str	r3, [r7, #108]	; 0x6c
  config.position_controller_velocity_limit_lower     = controller->position_controller.velocity_limit_lower;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002f1e:	673b      	str	r3, [r7, #112]	; 0x70
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f26:	677b      	str	r3, [r7, #116]	; 0x74
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002f2e:	67bb      	str	r3, [r7, #120]	; 0x78

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_error;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8002f30:	f004 fd8a 	bl	8007a48 <HAL_FLASH_Unlock>

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8002f3c:	233f      	movs	r3, #63	; 0x3f
 8002f3e:	617b      	str	r3, [r7, #20]
  erase_init_struct.NbPages = 1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61bb      	str	r3, [r7, #24]

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8002f44:	f107 0208 	add.w	r2, r7, #8
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 fe72 	bl	8007c38 <HAL_FLASHEx_Erase>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <MotorController_storeConfig+0xe6>
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
 8002f5a:	f004 fdb1 	bl	8007ac0 <HAL_FLASH_GetError>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	e02e      	b.n	8002fc0 <MotorController_storeConfig+0x144>
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002f68:	e023      	b.n	8002fb2 <MotorController_storeConfig+0x136>
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 8002f6a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	f107 021c 	add.w	r2, r7, #28
 8002f74:	4413      	add	r3, r2
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
 8002f7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002f88:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 8002f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8002f8e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002f92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f94:	2000      	movs	r0, #0
 8002f96:	f004 fd01 	bl	800799c <HAL_FLASH_Program>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <MotorController_storeConfig+0x12c>
      return HAL_FLASH_GetError();
 8002fa0:	f004 fd8e 	bl	8007ac0 <HAL_FLASH_GetError>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	e00b      	b.n	8002fc0 <MotorController_storeConfig+0x144>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002fa8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002fac:	3301      	adds	r3, #1
 8002fae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002fb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002fb6:	2b0b      	cmp	r3, #11
 8002fb8:	d9d7      	bls.n	8002f6a <MotorController_storeConfig+0xee>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8002fba:	f004 fd67 	bl	8007a8c <HAL_FLASH_Lock>

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3790      	adds	r7, #144	; 0x90
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <MotorController_updateCommutation>:

float MotorController_getPosition(MotorController *controller) {
  return controller->position_controller.position_measured;
}

void MotorController_updateCommutation(MotorController *controller, ADC_HandleTypeDef *hadc) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  float position_measured = Encoder_getRelativePosition(&controller->encoder);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fdb3 	bl	8001b40 <Encoder_getRelativePosition>
 8002fda:	ed87 0a05 	vstr	s0, [r7, #20]

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8003000:	f7ff fc72 	bl	80028e8 <wrapTo2Pi>
 8003004:	ed87 0a04 	vstr	s0, [r7, #16]
//  else {
//    cos_theta = cosf(theta);
//    sin_theta = sinf(theta);
//  }

  float sin_theta = sinf(theta);
 8003008:	ed97 0a04 	vldr	s0, [r7, #16]
 800300c:	f00c f9c6 	bl	800f39c <sinf>
 8003010:	ed87 0a03 	vstr	s0, [r7, #12]
  float cos_theta = cosf(theta);
 8003014:	ed97 0a04 	vldr	s0, [r7, #16]
 8003018:	f00c f92a 	bl	800f270 <cosf>
 800301c:	ed87 0a02 	vstr	s0, [r7, #8]


  PowerStage_getPhaseCurrent(&controller->powerstage,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3390      	adds	r3, #144	; 0x90
 8003036:	f001 fc4b 	bl	80048d0 <PowerStage_getPhaseCurrent>
    &controller->current_controller.i_a_measured,
    &controller->current_controller.i_b_measured,
    &controller->current_controller.i_c_measured);

  CurrentController_update(&controller->current_controller,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800304c:	eeb0 1a67 	vmov.f32	s2, s15
 8003050:	edd7 0a02 	vldr	s1, [r7, #8]
 8003054:	ed97 0a03 	vldr	s0, [r7, #12]
 8003058:	4610      	mov	r0, r2
 800305a:	f7fe f9e1 	bl	8001420 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d015      	beq.n	8003094 <MotorController_updateCommutation+0xcc>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8003080:	eeb0 1a66 	vmov.f32	s2, s13
 8003084:	eef0 0a47 	vmov.f32	s1, s14
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	4610      	mov	r0, r2
 800308e:	f001 fb27 	bl	80046e0 <PowerStage_setBridgeOutput>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 8003092:	e00a      	b.n	80030aa <MotorController_updateCommutation+0xe2>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3338      	adds	r3, #56	; 0x38
 8003098:	ed9f 1a06 	vldr	s2, [pc, #24]	; 80030b4 <MotorController_updateCommutation+0xec>
 800309c:	eddf 0a05 	vldr	s1, [pc, #20]	; 80030b4 <MotorController_updateCommutation+0xec>
 80030a0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80030b4 <MotorController_updateCommutation+0xec>
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fb1b 	bl	80046e0 <PowerStage_setBridgeOutput>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00000000 	.word	0x00000000

080030b8 <MotorController_triggerPositionUpdate>:

void MotorController_triggerPositionUpdate(MotorController *controller) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_DISABLED
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <MotorController_triggerPositionUpdate+0x1c>
      || controller->mode == MODE_IDLE) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <MotorController_triggerPositionUpdate+0x28>
    PowerStage_disable(&controller->powerstage);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3338      	adds	r3, #56	; 0x38
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 facd 	bl	8004678 <PowerStage_disable>
 80030de:	e035      	b.n	800314c <MotorController_triggerPositionUpdate+0x94>
  }
  else if (controller->mode == MODE_CALIBRATION
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d022      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_TORQUE
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d01d      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_VELOCITY
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030fa:	2b11      	cmp	r3, #17
 80030fc:	d018      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_POSITION
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003104:	2b12      	cmp	r3, #18
 8003106:	d013      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VDQ
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800310e:	2b22      	cmp	r3, #34	; 0x22
 8003110:	d00e      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VALPHABETA
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003118:	2b23      	cmp	r3, #35	; 0x23
 800311a:	d009      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VABC
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003122:	2b24      	cmp	r3, #36	; 0x24
 8003124:	d004      	beq.n	8003130 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_IDQ) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800312c:	2b21      	cmp	r3, #33	; 0x21
 800312e:	d105      	bne.n	800313c <MotorController_triggerPositionUpdate+0x84>
    PowerStage_enable(&controller->powerstage);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3338      	adds	r3, #56	; 0x38
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fab9 	bl	80046ac <PowerStage_enable>
 800313a:	e007      	b.n	800314c <MotorController_triggerPositionUpdate+0x94>
  }
  else {
    MotorController_setMode(controller, MODE_DISABLED);
 800313c:	2100      	movs	r1, #0
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fd26 	bl	8002b90 <MotorController_setMode>
    controller->error = ERROR_INVALID_MODE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  }

  Encoder_triggerUpdate(&controller->encoder);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fbba 	bl	80018c8 <Encoder_triggerUpdate>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0000      	movs	r0, r0
	...

08003160 <MotorController_updatePositionReading>:

void MotorController_updatePositionReading(MotorController *controller) {
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  Encoder_update(&controller->encoder);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fbe8 	bl	8001940 <Encoder_update>

  PowerStage_getBusVoltage(&controller->powerstage);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3338      	adds	r3, #56	; 0x38
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fb83 	bl	8004880 <PowerStage_getBusVoltage>

  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fcee 	bl	8001b5e <Encoder_getPosition>
 8003182:	eef0 7a40 	vmov.f32	s15, s0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fcf4 	bl	8001b7c <Encoder_getVelocity>
 8003194:	eef0 7a40 	vmov.f32	s15, s0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
  controller->position_controller.torque_measured = (8.3 * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f9f7 	bl	8000598 <__aeabi_f2d>
 80031aa:	a313      	add	r3, pc, #76	; (adr r3, 80031f8 <MotorController_updatePositionReading+0x98>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd fa4a 	bl	8000648 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	461d      	mov	r5, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c8:	ee17 0a90 	vmov	r0, s15
 80031cc:	f7fd f9e4 	bl	8000598 <__aeabi_f2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4620      	mov	r0, r4
 80031d6:	4629      	mov	r1, r5
 80031d8:	f7fd fb60 	bl	800089c <__aeabi_ddiv>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fd08 	bl	8000bf8 <__aeabi_d2f>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bdb0      	pop	{r4, r5, r7, pc}
 80031f8:	9999999a 	.word	0x9999999a
 80031fc:	40209999 	.word	0x40209999

08003200 <MotorController_updatePositionController>:

void MotorController_updatePositionController(MotorController *controller) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  PositionController_update(&controller->position_controller);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	33e8      	adds	r3, #232	; 0xe8
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f92b 	bl	8004468 <PositionController_update>

  if (controller->mode != MODE_OPEN_IDQ) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003218:	2b21      	cmp	r3, #33	; 0x21
 800321a:	d022      	beq.n	8003262 <MotorController_updatePositionController+0x62>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	ee17 0a90 	vmov	r0, s15
 8003236:	f7fd f9af 	bl	8000598 <__aeabi_f2d>
 800323a:	a30d      	add	r3, pc, #52	; (adr r3, 8003270 <MotorController_updatePositionController+0x70>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f7fd fb2c 	bl	800089c <__aeabi_ddiv>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	f7fd fcd4 	bl	8000bf8 <__aeabi_d2f>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    controller->current_controller.i_d_target = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  }
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	f3af 8000 	nop.w
 8003270:	9999999a 	.word	0x9999999a
 8003274:	40209999 	.word	0x40209999

08003278 <MotorController_updateService>:

void MotorController_updateService(MotorController *controller) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_CALIBRATION) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003286:	2b05      	cmp	r3, #5
 8003288:	d103      	bne.n	8003292 <MotorController_updateService+0x1a>
    MotorController_runCalibrationSequence(controller);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f81c 	bl	80032c8 <MotorController_runCalibrationSequence>
    return;
 8003290:	e014      	b.n	80032bc <MotorController_updateService+0x44>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 8003292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003296:	480b      	ldr	r0, [pc, #44]	; (80032c4 <MotorController_updateService+0x4c>)
 8003298:	f004 ff74 	bl	8008184 <HAL_GPIO_ReadPin>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <MotorController_updateService+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80032a2:	2201      	movs	r2, #1
 80032a4:	2104      	movs	r1, #4
 80032a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032aa:	f004 ff83 	bl	80081b4 <HAL_GPIO_WritePin>
 80032ae:	e005      	b.n	80032bc <MotorController_updateService+0x44>
  }
  else {
    // red
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2104      	movs	r1, #4
 80032b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b8:	f004 ff7c 	bl	80081b4 <HAL_GPIO_WritePin>
  }
}
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	48000400 	.word	0x48000400

080032c8 <MotorController_runCalibrationSequence>:

void MotorController_runCalibrationSequence(MotorController *controller) {
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b0ae      	sub	sp, #184	; 0xb8
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);    // green LED
 80032d0:	2200      	movs	r2, #0
 80032d2:	2110      	movs	r1, #16
 80032d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d8:	f004 ff6c 	bl	80081b4 <HAL_GPIO_WritePin>
  MotorController_setMode(controller, MODE_CALIBRATION);
 80032dc:	2105      	movs	r1, #5
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fc56 	bl	8002b90 <MotorController_setMode>

  // open loop calibration
  float prev_v_alpha_target = controller->current_controller.v_alpha_target;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  float prev_v_beta_target = controller->current_controller.v_beta_target;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  float flux_angle_setpoint = 0;
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float voltage_setpoint = 0.2;
 8003300:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <MotorController_runCalibrationSequence+0x228>)
 8003302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003306:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 800330a:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fce8 	bl	8002ce4 <MotorController_setFluxAngle>
  HAL_Delay(100);
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	f002 f863 	bl	80053e0 <HAL_Delay>
  PowerStage_enable(&controller->powerstage);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3338      	adds	r3, #56	; 0x38
 800331e:	4618      	mov	r0, r3
 8003320:	f001 f9c4 	bl	80046ac <PowerStage_enable>
  HAL_Delay(500);
 8003324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003328:	f002 f85a 	bl	80053e0 <HAL_Delay>

  float phase_current = 0;
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  while (phase_current < CALIBRATION_CURRENT) {
 8003334:	e07c      	b.n	8003430 <MotorController_runCalibrationSequence+0x168>
    HAL_Delay(100);
 8003336:	2064      	movs	r0, #100	; 0x64
 8003338:	f002 f852 	bl	80053e0 <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 800333c:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003340:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fccd 	bl	8002ce4 <MotorController_setFluxAngle>

    voltage_setpoint += 0.1;
 800334a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800334e:	f7fd f923 	bl	8000598 <__aeabi_f2d>
 8003352:	a361      	add	r3, pc, #388	; (adr r3, 80034d8 <MotorController_runCalibrationSequence+0x210>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fc ffc0 	bl	80002dc <__adddf3>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	f7fd fc48 	bl	8000bf8 <__aeabi_d2f>
 8003368:	4603      	mov	r3, r0
 800336a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003374:	eef0 7ae7 	vabs.f32	s15, s15
 8003378:	ee17 0a90 	vmov	r0, s15
 800337c:	f7fd f90c 	bl	8000598 <__aeabi_f2d>
 8003380:	4604      	mov	r4, r0
 8003382:	460d      	mov	r5, r1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800338a:	eef0 7ae7 	vabs.f32	s15, s15
 800338e:	ee17 0a90 	vmov	r0, s15
 8003392:	f7fd f901 	bl	8000598 <__aeabi_f2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f7fc ff9d 	bl	80002dc <__adddf3>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4614      	mov	r4, r2
 80033a8:	461d      	mov	r5, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80033b0:	eef0 7ae7 	vabs.f32	s15, s15
 80033b4:	ee17 0a90 	vmov	r0, s15
 80033b8:	f7fd f8ee 	bl	8000598 <__aeabi_f2d>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4620      	mov	r0, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	f7fc ff8a 	bl	80002dc <__adddf3>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	a343      	add	r3, pc, #268	; (adr r3, 80034e0 <MotorController_runCalibrationSequence+0x218>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fd f937 	bl	8000648 <__aeabi_dmul>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	f7fd fc09 	bl	8000bf8 <__aeabi_d2f>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 80033ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80033f0:	f7fd f8d2 	bl	8000598 <__aeabi_f2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80033fc:	f7fd f8cc 	bl	8000598 <__aeabi_f2d>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	f107 000c 	add.w	r0, r7, #12
 8003408:	e9cd 2300 	strd	r2, r3, [sp]
 800340c:	4622      	mov	r2, r4
 800340e:	462b      	mov	r3, r5
 8003410:	4938      	ldr	r1, [pc, #224]	; (80034f4 <MotorController_runCalibrationSequence+0x22c>)
 8003412:	f009 fcb3 	bl	800cd7c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	4618      	mov	r0, r3
 800341c:	f7fc ff00 	bl	8000220 <strlen>
 8003420:	4603      	mov	r3, r0
 8003422:	b29a      	uxth	r2, r3
 8003424:	f107 010c 	add.w	r1, r7, #12
 8003428:	230a      	movs	r3, #10
 800342a:	4833      	ldr	r0, [pc, #204]	; (80034f8 <MotorController_runCalibrationSequence+0x230>)
 800342c:	f008 f9ef 	bl	800b80e <HAL_UART_Transmit>
  while (phase_current < CALIBRATION_CURRENT) {
 8003430:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003434:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	f53f af79 	bmi.w	8003336 <MotorController_runCalibrationSequence+0x6e>
    }
  }


  float start_position = Encoder_getPosition(&controller->encoder);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fb89 	bl	8001b5e <Encoder_getPosition>
 800344c:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 8003450:	2300      	movs	r3, #0
 8003452:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003456:	e02b      	b.n	80034b0 <MotorController_runCalibrationSequence+0x1e8>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003458:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003464:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80034fc <MotorController_runCalibrationSequence+0x234>
 8003468:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800346c:	ee16 0a90 	vmov	r0, s13
 8003470:	f7fd f892 	bl	8000598 <__aeabi_f2d>
 8003474:	a31c      	add	r3, pc, #112	; (adr r3, 80034e8 <MotorController_runCalibrationSequence+0x220>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f7fd f8e5 	bl	8000648 <__aeabi_dmul>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	f7fd fbb7 	bl	8000bf8 <__aeabi_d2f>
 800348a:	4603      	mov	r3, r0
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003490:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003494:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fc23 	bl	8002ce4 <MotorController_setFluxAngle>
    HAL_Delay(2);
 800349e:	2002      	movs	r0, #2
 80034a0:	f001 ff9e 	bl	80053e0 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 80034a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80034a8:	3301      	adds	r3, #1
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80034b0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80034b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034b8:	ddce      	ble.n	8003458 <MotorController_runCalibrationSequence+0x190>
  }
  HAL_Delay(500);
 80034ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034be:	f001 ff8f 	bl	80053e0 <HAL_Delay>

  float end_position = Encoder_getPosition(&controller->encoder);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fb4a 	bl	8001b5e <Encoder_getPosition>
 80034ca:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

  for (int16_t i=500; i>=0; i-=1) {
 80034ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80034d6:	e03f      	b.n	8003558 <MotorController_runCalibrationSequence+0x290>
 80034d8:	9999999a 	.word	0x9999999a
 80034dc:	3fb99999 	.word	0x3fb99999
 80034e0:	55555555 	.word	0x55555555
 80034e4:	3fd55555 	.word	0x3fd55555
 80034e8:	54442d18 	.word	0x54442d18
 80034ec:	401921fb 	.word	0x401921fb
 80034f0:	3e4ccccd 	.word	0x3e4ccccd
 80034f4:	08010008 	.word	0x08010008
 80034f8:	2000070c 	.word	0x2000070c
 80034fc:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003500:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800350c:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80034fc <MotorController_runCalibrationSequence+0x234>
 8003510:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003514:	ee16 0a90 	vmov	r0, s13
 8003518:	f7fd f83e 	bl	8000598 <__aeabi_f2d>
 800351c:	a3a2      	add	r3, pc, #648	; (adr r3, 80037a8 <MotorController_runCalibrationSequence+0x4e0>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fd f891 	bl	8000648 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fb63 	bl	8000bf8 <__aeabi_d2f>
 8003532:	4603      	mov	r3, r0
 8003534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003538:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 800353c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fbcf 	bl	8002ce4 <MotorController_setFluxAngle>
    HAL_Delay(2);
 8003546:	2002      	movs	r0, #2
 8003548:	f001 ff4a 	bl	80053e0 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 800354c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003550:	3b01      	subs	r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003558:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800355c:	2b00      	cmp	r3, #0
 800355e:	dacf      	bge.n	8003500 <MotorController_runCalibrationSequence+0x238>
  }

  flux_angle_setpoint = 0;
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003568:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 800356c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fbb7 	bl	8002ce4 <MotorController_setFluxAngle>
  HAL_Delay(500);
 8003576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800357a:	f001 ff31 	bl	80053e0 <HAL_Delay>

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe faec 	bl	8001b5e <Encoder_getPosition>
 8003586:	ee10 3a10 	vmov	r3, s0
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd f804 	bl	8000598 <__aeabi_f2d>
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	4b86      	ldr	r3, [pc, #536]	; (80037b0 <MotorController_runCalibrationSequence+0x4e8>)
 8003596:	f7fd f857 	bl	8000648 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4614      	mov	r4, r2
 80035a0:	461d      	mov	r5, r3
 80035a2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80035a6:	f7fc fff7 	bl	8000598 <__aeabi_f2d>
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b80      	ldr	r3, [pc, #512]	; (80037b0 <MotorController_runCalibrationSequence+0x4e8>)
 80035b0:	f7fd f84a 	bl	8000648 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4620      	mov	r0, r4
 80035ba:	4629      	mov	r1, r5
 80035bc:	f7fc fe8e 	bl	80002dc <__adddf3>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f7fd fb16 	bl	8000bf8 <__aeabi_d2f>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Delay(500);
 80035d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035d6:	f001 ff03 	bl	80053e0 <HAL_Delay>

  // release motor
  PowerStage_disable(&controller->powerstage);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3338      	adds	r3, #56	; 0x38
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 f84a 	bl	8004678 <PowerStage_disable>

  controller->current_controller.v_alpha_target = prev_v_alpha_target;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80035ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  controller->current_controller.v_beta_target = prev_v_beta_target;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80035f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  float delta_position = end_position - start_position;
 80035f8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80035fc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003604:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 8003608:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800360c:	f7fc ffc4 	bl	8000598 <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	f107 000c 	add.w	r0, r7, #12
 8003618:	4966      	ldr	r1, [pc, #408]	; (80037b4 <MotorController_runCalibrationSequence+0x4ec>)
 800361a:	f009 fbaf 	bl	800cd7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc fdfc 	bl	8000220 <strlen>
 8003628:	4603      	mov	r3, r0
 800362a:	b29a      	uxth	r2, r3
 800362c:	f107 010c 	add.w	r1, r7, #12
 8003630:	230a      	movs	r3, #10
 8003632:	4861      	ldr	r0, [pc, #388]	; (80037b8 <MotorController_runCalibrationSequence+0x4f0>)
 8003634:	f008 f8eb 	bl	800b80e <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 8003638:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800363c:	f7fc ffac 	bl	8000598 <__aeabi_f2d>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	f107 000c 	add.w	r0, r7, #12
 8003648:	495c      	ldr	r1, [pc, #368]	; (80037bc <MotorController_runCalibrationSequence+0x4f4>)
 800364a:	f009 fb97 	bl	800cd7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc fde4 	bl	8000220 <strlen>
 8003658:	4603      	mov	r3, r0
 800365a:	b29a      	uxth	r2, r3
 800365c:	f107 010c 	add.w	r1, r7, #12
 8003660:	230a      	movs	r3, #10
 8003662:	4855      	ldr	r0, [pc, #340]	; (80037b8 <MotorController_runCalibrationSequence+0x4f0>)
 8003664:	f008 f8d3 	bl	800b80e <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 8003668:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800366c:	f7fc ff94 	bl	8000598 <__aeabi_f2d>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	f107 000c 	add.w	r0, r7, #12
 8003678:	4951      	ldr	r1, [pc, #324]	; (80037c0 <MotorController_runCalibrationSequence+0x4f8>)
 800367a:	f009 fb7f 	bl	800cd7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc fdcc 	bl	8000220 <strlen>
 8003688:	4603      	mov	r3, r0
 800368a:	b29a      	uxth	r2, r3
 800368c:	f107 010c 	add.w	r1, r7, #12
 8003690:	230a      	movs	r3, #10
 8003692:	4849      	ldr	r0, [pc, #292]	; (80037b8 <MotorController_runCalibrationSequence+0x4f0>)
 8003694:	f008 f8bb 	bl	800b80e <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 8003698:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800369c:	eef0 7ae7 	vabs.f32	s15, s15
 80036a0:	ee17 0a90 	vmov	r0, s15
 80036a4:	f7fc ff78 	bl	8000598 <__aeabi_f2d>
 80036a8:	a33d      	add	r3, pc, #244	; (adr r3, 80037a0 <MotorController_runCalibrationSequence+0x4d8>)
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f7fd fa3d 	bl	8000b2c <__aeabi_dcmplt>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <MotorController_runCalibrationSequence+0x3fc>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 80036b8:	230a      	movs	r3, #10
 80036ba:	221b      	movs	r2, #27
 80036bc:	4941      	ldr	r1, [pc, #260]	; (80037c4 <MotorController_runCalibrationSequence+0x4fc>)
 80036be:	483e      	ldr	r0, [pc, #248]	; (80037b8 <MotorController_runCalibrationSequence+0x4f0>)
 80036c0:	f008 f8a5 	bl	800b80e <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 80036c4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80036c8:	eeb0 7ae7 	vabs.f32	s14, s15
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036dc:	ee17 0a90 	vmov	r0, s15
 80036e0:	f7fc ff5a 	bl	8000598 <__aeabi_f2d>
 80036e4:	a330      	add	r3, pc, #192	; (adr r3, 80037a8 <MotorController_runCalibrationSequence+0x4e0>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc fdf5 	bl	80002d8 <__aeabi_dsub>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	f7fd fa7f 	bl	8000bf8 <__aeabi_d2f>
 80036fa:	ee07 0a90 	vmov	s15, r0
 80036fe:	eef0 7ae7 	vabs.f32	s15, s15
 8003702:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370e:	dd05      	ble.n	800371c <MotorController_runCalibrationSequence+0x454>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 8003710:	230a      	movs	r3, #10
 8003712:	2221      	movs	r2, #33	; 0x21
 8003714:	492c      	ldr	r1, [pc, #176]	; (80037c8 <MotorController_runCalibrationSequence+0x500>)
 8003716:	4828      	ldr	r0, [pc, #160]	; (80037b8 <MotorController_runCalibrationSequence+0x4f0>)
 8003718:	f008 f879 	bl	800b80e <HAL_UART_Transmit>
  }


  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003728:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800372c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003730:	eeb0 0a67 	vmov.f32	s0, s15
 8003734:	f7ff f8d8 	bl	80028e8 <wrapTo2Pi>
 8003738:	eef0 7a40 	vmov.f32	s15, s0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc ff26 	bl	8000598 <__aeabi_f2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	f107 000c 	add.w	r0, r7, #12
 8003754:	491d      	ldr	r1, [pc, #116]	; (80037cc <MotorController_runCalibrationSequence+0x504>)
 8003756:	f009 fb11 	bl	800cd7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fd5e 	bl	8000220 <strlen>
 8003764:	4603      	mov	r3, r0
 8003766:	b29a      	uxth	r2, r3
 8003768:	f107 010c 	add.w	r1, r7, #12
 800376c:	230a      	movs	r3, #10
 800376e:	4812      	ldr	r0, [pc, #72]	; (80037b8 <MotorController_runCalibrationSequence+0x4f0>)
 8003770:	f008 f84d 	bl	800b80e <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fb81 	bl	8002e7c <MotorController_storeConfig>

  HAL_Delay(1000);
 800377a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800377e:	f001 fe2f 	bl	80053e0 <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 8003782:	2101      	movs	r1, #1
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fa03 	bl	8002b90 <MotorController_setMode>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);    // green LED
 800378a:	2201      	movs	r2, #1
 800378c:	2110      	movs	r1, #16
 800378e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003792:	f004 fd0f 	bl	80081b4 <HAL_GPIO_WritePin>
}
 8003796:	bf00      	nop
 8003798:	37b0      	adds	r7, #176	; 0xb0
 800379a:	46bd      	mov	sp, r7
 800379c:	bdb0      	pop	{r4, r5, r7, pc}
 800379e:	bf00      	nop
 80037a0:	9999999a 	.word	0x9999999a
 80037a4:	3fb99999 	.word	0x3fb99999
 80037a8:	54442d18 	.word	0x54442d18
 80037ac:	401921fb 	.word	0x401921fb
 80037b0:	3fe00000 	.word	0x3fe00000
 80037b4:	08010028 	.word	0x08010028
 80037b8:	2000070c 	.word	0x2000070c
 80037bc:	08010044 	.word	0x08010044
 80037c0:	0801005c 	.word	0x0801005c
 80037c4:	08010070 	.word	0x08010070
 80037c8:	0801008c 	.word	0x0801008c
 80037cc:	080100b0 	.word	0x080100b0

080037d0 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint16_t device_id = (rx_frame->id) & 0b1111;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	83fb      	strh	r3, [r7, #30]
  if (device_id && device_id != controller->device_id) {
 80037e6:	8bfb      	ldrh	r3, [r7, #30]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <MotorController_handleCANMessage+0x2c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8bfa      	ldrh	r2, [r7, #30]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f040 85c8 	bne.w	800438c <MotorController_handleCANMessage+0xbbc>
    return;
  }

  uint16_t func_id = (rx_frame->id) >> 4;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	83bb      	strh	r3, [r7, #28]
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	795b      	ldrb	r3, [r3, #5]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <MotorController_handleCANMessage+0x44>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	88db      	ldrh	r3, [r3, #6]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <MotorController_handleCANMessage+0x48>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <MotorController_handleCANMessage+0x4a>
 8003818:	2300      	movs	r3, #0
 800381a:	76fb      	strb	r3, [r7, #27]

  if (is_get_request) {
 800381c:	7efb      	ldrb	r3, [r7, #27]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 83b1 	beq.w	8003f86 <MotorController_handleCANMessage+0x7b6>
    CAN_Frame tx_frame;

    tx_frame.id = rx_frame->id;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]
    tx_frame.id_type = CAN_ID_STANDARD;
 800382a:	2300      	movs	r3, #0
 800382c:	733b      	strb	r3, [r7, #12]
    tx_frame.frame_type = CAN_FRAME_DATA;
 800382e:	2301      	movs	r3, #1
 8003830:	737b      	strb	r3, [r7, #13]
    tx_frame.size = 8;
 8003832:	2308      	movs	r3, #8
 8003834:	81fb      	strh	r3, [r7, #14]

    switch (func_id) {
 8003836:	8bbb      	ldrh	r3, [r7, #28]
 8003838:	2b7f      	cmp	r3, #127	; 0x7f
 800383a:	f200 839d 	bhi.w	8003f78 <MotorController_handleCANMessage+0x7a8>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <MotorController_handleCANMessage+0x74>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003a45 	.word	0x08003a45
 8003848:	08003a57 	.word	0x08003a57
 800384c:	08003a65 	.word	0x08003a65
 8003850:	08003a75 	.word	0x08003a75
 8003854:	08003f79 	.word	0x08003f79
 8003858:	08003f79 	.word	0x08003f79
 800385c:	08003a91 	.word	0x08003a91
 8003860:	08003f79 	.word	0x08003f79
 8003864:	08003f79 	.word	0x08003f79
 8003868:	08003f79 	.word	0x08003f79
 800386c:	08003f79 	.word	0x08003f79
 8003870:	08003f79 	.word	0x08003f79
 8003874:	08003f79 	.word	0x08003f79
 8003878:	08003f79 	.word	0x08003f79
 800387c:	08003f79 	.word	0x08003f79
 8003880:	08003f79 	.word	0x08003f79
 8003884:	08003aa1 	.word	0x08003aa1
 8003888:	08003f79 	.word	0x08003f79
 800388c:	08003ac1 	.word	0x08003ac1
 8003890:	08003ad3 	.word	0x08003ad3
 8003894:	08003aef 	.word	0x08003aef
 8003898:	08003f79 	.word	0x08003f79
 800389c:	08003b01 	.word	0x08003b01
 80038a0:	08003b13 	.word	0x08003b13
 80038a4:	08003f79 	.word	0x08003f79
 80038a8:	08003f79 	.word	0x08003f79
 80038ac:	08003f79 	.word	0x08003f79
 80038b0:	08003f79 	.word	0x08003f79
 80038b4:	08003f79 	.word	0x08003f79
 80038b8:	08003f79 	.word	0x08003f79
 80038bc:	08003f79 	.word	0x08003f79
 80038c0:	08003f79 	.word	0x08003f79
 80038c4:	08003b25 	.word	0x08003b25
 80038c8:	08003b45 	.word	0x08003b45
 80038cc:	08003b79 	.word	0x08003b79
 80038d0:	08003bad 	.word	0x08003bad
 80038d4:	08003f79 	.word	0x08003f79
 80038d8:	08003f79 	.word	0x08003f79
 80038dc:	08003f79 	.word	0x08003f79
 80038e0:	08003f79 	.word	0x08003f79
 80038e4:	08003f79 	.word	0x08003f79
 80038e8:	08003f79 	.word	0x08003f79
 80038ec:	08003f79 	.word	0x08003f79
 80038f0:	08003f79 	.word	0x08003f79
 80038f4:	08003f79 	.word	0x08003f79
 80038f8:	08003f79 	.word	0x08003f79
 80038fc:	08003f79 	.word	0x08003f79
 8003900:	08003f79 	.word	0x08003f79
 8003904:	08003bbf 	.word	0x08003bbf
 8003908:	08003bd1 	.word	0x08003bd1
 800390c:	08003be3 	.word	0x08003be3
 8003910:	08003f79 	.word	0x08003f79
 8003914:	08003f79 	.word	0x08003f79
 8003918:	08003f79 	.word	0x08003f79
 800391c:	08003f79 	.word	0x08003f79
 8003920:	08003f79 	.word	0x08003f79
 8003924:	08003f79 	.word	0x08003f79
 8003928:	08003f79 	.word	0x08003f79
 800392c:	08003f79 	.word	0x08003f79
 8003930:	08003f79 	.word	0x08003f79
 8003934:	08003f79 	.word	0x08003f79
 8003938:	08003f79 	.word	0x08003f79
 800393c:	08003f79 	.word	0x08003f79
 8003940:	08003f79 	.word	0x08003f79
 8003944:	08003bf5 	.word	0x08003bf5
 8003948:	08003c07 	.word	0x08003c07
 800394c:	08003c27 	.word	0x08003c27
 8003950:	08003c47 	.word	0x08003c47
 8003954:	08003c69 	.word	0x08003c69
 8003958:	08003c8d 	.word	0x08003c8d
 800395c:	08003cb1 	.word	0x08003cb1
 8003960:	08003cd5 	.word	0x08003cd5
 8003964:	08003ce9 	.word	0x08003ce9
 8003968:	08003d0d 	.word	0x08003d0d
 800396c:	08003d31 	.word	0x08003d31
 8003970:	08003d55 	.word	0x08003d55
 8003974:	08003d79 	.word	0x08003d79
 8003978:	08003d9d 	.word	0x08003d9d
 800397c:	08003dc1 	.word	0x08003dc1
 8003980:	08003de5 	.word	0x08003de5
 8003984:	08003e09 	.word	0x08003e09
 8003988:	08003f79 	.word	0x08003f79
 800398c:	08003f79 	.word	0x08003f79
 8003990:	08003f79 	.word	0x08003f79
 8003994:	08003f79 	.word	0x08003f79
 8003998:	08003f79 	.word	0x08003f79
 800399c:	08003f79 	.word	0x08003f79
 80039a0:	08003f79 	.word	0x08003f79
 80039a4:	08003f79 	.word	0x08003f79
 80039a8:	08003f79 	.word	0x08003f79
 80039ac:	08003f79 	.word	0x08003f79
 80039b0:	08003f79 	.word	0x08003f79
 80039b4:	08003f79 	.word	0x08003f79
 80039b8:	08003f79 	.word	0x08003f79
 80039bc:	08003f79 	.word	0x08003f79
 80039c0:	08003f79 	.word	0x08003f79
 80039c4:	08003e2d 	.word	0x08003e2d
 80039c8:	08003e51 	.word	0x08003e51
 80039cc:	08003e65 	.word	0x08003e65
 80039d0:	08003e89 	.word	0x08003e89
 80039d4:	08003ead 	.word	0x08003ead
 80039d8:	08003ed1 	.word	0x08003ed1
 80039dc:	08003ef5 	.word	0x08003ef5
 80039e0:	08003f09 	.word	0x08003f09
 80039e4:	08003f2d 	.word	0x08003f2d
 80039e8:	08003f41 	.word	0x08003f41
 80039ec:	08003f65 	.word	0x08003f65
 80039f0:	08003f79 	.word	0x08003f79
 80039f4:	08003f79 	.word	0x08003f79
 80039f8:	08003f79 	.word	0x08003f79
 80039fc:	08003f79 	.word	0x08003f79
 8003a00:	08003f79 	.word	0x08003f79
 8003a04:	08003f79 	.word	0x08003f79
 8003a08:	08003f79 	.word	0x08003f79
 8003a0c:	08003f79 	.word	0x08003f79
 8003a10:	08003f79 	.word	0x08003f79
 8003a14:	08003f79 	.word	0x08003f79
 8003a18:	08003f79 	.word	0x08003f79
 8003a1c:	08003f79 	.word	0x08003f79
 8003a20:	08003f79 	.word	0x08003f79
 8003a24:	08003f79 	.word	0x08003f79
 8003a28:	08003f79 	.word	0x08003f79
 8003a2c:	08003f79 	.word	0x08003f79
 8003a30:	08003f79 	.word	0x08003f79
 8003a34:	08003f79 	.word	0x08003f79
 8003a38:	08003f79 	.word	0x08003f79
 8003a3c:	08003f79 	.word	0x08003f79
 8003a40:	08003a83 	.word	0x08003a83
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 8003a44:	2100      	movs	r1, #0
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff f8a2 	bl	8002b90 <MotorController_setMode>
        tx_frame.size = 1;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8003a50:	23ac      	movs	r3, #172	; 0xac
 8003a52:	743b      	strb	r3, [r7, #16]
        break;
 8003a54:	e290      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ID:
        tx_frame.size = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003a60:	743b      	strb	r3, [r7, #16]
        break;
 8003a62:	e289      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_VERSION:
        tx_frame.size = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	743b      	strb	r3, [r7, #16]
        break;
 8003a72:	e281      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_SAFETY:
        tx_frame.size = 1;
 8003a74:	2301      	movs	r3, #1
 8003a76:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->error;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8003a7e:	743b      	strb	r3, [r7, #16]
        break;
 8003a80:	e27a      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_PING:
        tx_frame.size = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003a8c:	743b      	strb	r3, [r7, #16]
        break;
 8003a8e:	e273      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_MODE:
        tx_frame.size = 1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = MotorController_getMode(controller);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff f86d 	bl	8002b74 <MotorController_getMode>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	743b      	strb	r3, [r7, #16]
        break;
 8003a9e:	e26b      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ENCODER_CPR:
        tx_frame.size = 4;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	81fb      	strh	r3, [r7, #14]
        *((int32_t *)tx_frame.data) = controller->encoder.direction * (int32_t)controller->encoder.cpr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	899b      	ldrh	r3, [r3, #12]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	fb01 f202 	mul.w	r2, r1, r2
 8003abc:	601a      	str	r2, [r3, #0]
        break;
 8003abe:	e25b      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        tx_frame.size = 4;
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_offset;
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	3308      	adds	r3, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6912      	ldr	r2, [r2, #16]
 8003ace:	601a      	str	r2, [r3, #0]
        break;
 8003ad0:	e252      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ENCODER_N_ROTATIONS:
        tx_frame.size = 4;
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	3308      	adds	r3, #8
 8003ae0:	ee07 2a90 	vmov	s15, r2
 8003ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae8:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003aec:	e244      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ENCODER_POSITION_RELATIVE:
        tx_frame.size = 4;
 8003aee:	2304      	movs	r3, #4
 8003af0:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_relative;
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	3308      	adds	r3, #8
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003afc:	601a      	str	r2, [r3, #0]
        break;
 8003afe:	e23b      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ENCODER_POSITION:
        tx_frame.size = 4;
 8003b00:	2304      	movs	r3, #4
 8003b02:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position;
 8003b04:	f107 0308 	add.w	r3, r7, #8
 8003b08:	3308      	adds	r3, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b0e:	601a      	str	r2, [r3, #0]
        break;
 8003b10:	e232      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_ENCODER_VELOCITY:
        tx_frame.size = 4;
 8003b12:	2304      	movs	r3, #4
 8003b14:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity;
 8003b16:	f107 0308 	add.w	r3, r7, #8
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b20:	601a      	str	r2, [r3, #0]
        break;
 8003b22:	e229      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        tx_frame.size = 8;
 8003b24:	2308      	movs	r3, #8
 8003b26:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8003b28:	f107 0308 	add.w	r3, r7, #8
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b32:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8003b34:	f107 0308 	add.w	r3, r7, #8
 8003b38:	3308      	adds	r3, #8
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b40:	601a      	str	r2, [r3, #0]
        break;
 8003b42:	e219      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POWERSTAGE_ADC_READING_RAW_A_B_C:
        tx_frame.size = 6;
 8003b44:	2306      	movs	r3, #6
 8003b46:	81fb      	strh	r3, [r7, #14]
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8003b48:	f107 0308 	add.w	r3, r7, #8
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8003b54:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_raw[1];
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8003b64:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003b74:	801a      	strh	r2, [r3, #0]
        break;
 8003b76:	e1ff      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POWERSTAGE_ADC_READING_OFFSET_A_B_C:
        tx_frame.size = 6;
 8003b78:	2306      	movs	r3, #6
 8003b7a:	81fb      	strh	r3, [r7, #14]
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8003b7c:	f107 0308 	add.w	r3, r7, #8
 8003b80:	3308      	adds	r3, #8
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8003b88:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	3308      	adds	r3, #8
 8003b90:	3302      	adds	r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	f9b2 2054 	ldrsh.w	r2, [r2, #84]	; 0x54
 8003b98:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8003ba8:	801a      	strh	r2, [r3, #0]
        break;
 8003baa:	e1e5      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POWERSTAGE_BUS_VOLTAGE:
        tx_frame.size = 4;
 8003bac:	2304      	movs	r3, #4
 8003bae:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8003bb0:	f107 0308 	add.w	r3, r7, #8
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bba:	601a      	str	r2, [r3, #0]
        break;
 8003bbc:	e1dc      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_MOTOR_POLE_PAIRS:
        tx_frame.size = 4;
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8003bc2:	f107 0308 	add.w	r3, r7, #8
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bcc:	601a      	str	r2, [r3, #0]
        break;
 8003bce:	e1d3      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_MOTOR_KV_RATING:
        tx_frame.size = 4;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	3308      	adds	r3, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003bde:	601a      	str	r2, [r3, #0]
        break;
 8003be0:	e1ca      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_MOTOR_FLUX_ANGLE_OFFSET:
        tx_frame.size = 4;
 8003be2:	2304      	movs	r3, #4
 8003be4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8003be6:	f107 0308 	add.w	r3, r7, #8
 8003bea:	3308      	adds	r3, #8
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003bf0:	601a      	str	r2, [r3, #0]
        break;
 8003bf2:	e1c1      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        tx_frame.size = 4;
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.current_filter_alpha;
 8003bf8:	f107 0308 	add.w	r3, r7, #8
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c02:	601a      	str	r2, [r3, #0]
        break;
 8003c04:	e1b8      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        tx_frame.size = 8;
 8003c06:	2308      	movs	r3, #8
 8003c08:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_kp;
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	3308      	adds	r3, #8
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c14:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_ki;
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c22:	601a      	str	r2, [r3, #0]
        break;
 8003c24:	e1a8      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        tx_frame.size = 8;
 8003c26:	2308      	movs	r3, #8
 8003c28:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_kp;
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	3308      	adds	r3, #8
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c34:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_ki;
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003c42:	601a      	str	r2, [r3, #0]
        break;
 8003c44:	e198      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_A_TARGET_I_A_MEASURED:
        tx_frame.size = 8;
 8003c46:	2308      	movs	r3, #8
 8003c48:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_target;
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	3308      	adds	r3, #8
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003c54:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_a_measured;
 8003c56:	f107 0308 	add.w	r3, r7, #8
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003c64:	601a      	str	r2, [r3, #0]
        break;
 8003c66:	e187      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_B_TARGET_I_B_MEASURED:
        tx_frame.size = 8;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_b_target;
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	3308      	adds	r3, #8
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003c78:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	3308      	adds	r3, #8
 8003c80:	3304      	adds	r3, #4
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003c88:	601a      	str	r2, [r3, #0]
        break;
 8003c8a:	e175      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_C_TARGET_I_C_MEASURED:
        tx_frame.size = 8;
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_target;
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	3308      	adds	r3, #8
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003c9c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8003c9e:	f107 0308 	add.w	r3, r7, #8
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cac:	601a      	str	r2, [r3, #0]
        break;
 8003cae:	e163      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        tx_frame.size = 8;
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	3308      	adds	r3, #8
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003cc0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	3304      	adds	r3, #4
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8003cd0:	601a      	str	r2, [r3, #0]
        break;
 8003cd2:	e151      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        tx_frame.size = 4;
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	3308      	adds	r3, #8
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003ce4:	601a      	str	r2, [r3, #0]
        break;
 8003ce6:	e147      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_TARGET_I_ALPHA_MEASURED:
        tx_frame.size = 8;
 8003ce8:	2308      	movs	r3, #8
 8003cea:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_target;
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003cf8:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_alpha_measured;
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	3308      	adds	r3, #8
 8003d00:	3304      	adds	r3, #4
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8003d08:	601a      	str	r2, [r3, #0]
        break;
 8003d0a:	e135      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_BETA_TARGET_I_BETA_MEASURED:
        tx_frame.size = 8;
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_beta_target;
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	3308      	adds	r3, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8003d1c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	3308      	adds	r3, #8
 8003d24:	3304      	adds	r3, #4
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003d2c:	601a      	str	r2, [r3, #0]
        break;
 8003d2e:	e123      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        tx_frame.size = 8;
 8003d30:	2308      	movs	r3, #8
 8003d32:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8003d34:	f107 0308 	add.w	r3, r7, #8
 8003d38:	3308      	adds	r3, #8
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8003d40:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	3308      	adds	r3, #8
 8003d48:	3304      	adds	r3, #4
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8003d50:	601a      	str	r2, [r3, #0]
        break;
 8003d52:	e111      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_TARGET:
        tx_frame.size = 8;
 8003d54:	2308      	movs	r3, #8
 8003d56:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_target;
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8003d64:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_target;
 8003d66:	f107 0308 	add.w	r3, r7, #8
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8003d74:	601a      	str	r2, [r3, #0]
        break;
 8003d76:	e0ff      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        tx_frame.size = 8;
 8003d78:	2308      	movs	r3, #8
 8003d7a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	3308      	adds	r3, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8003d88:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	3308      	adds	r3, #8
 8003d90:	3304      	adds	r3, #4
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 8003d98:	601a      	str	r2, [r3, #0]
        break;
 8003d9a:	e0ed      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_TARGET_MEASURED:
        tx_frame.size = 8;
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	3308      	adds	r3, #8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003dac:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_measured;
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	3308      	adds	r3, #8
 8003db4:	3304      	adds	r3, #4
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 8003dbc:	601a      	str	r2, [r3, #0]
        break;
 8003dbe:	e0db      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_I_D_TARGET_MEASURED:
        tx_frame.size = 8;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_target;
 8003dc4:	f107 0308 	add.w	r3, r7, #8
 8003dc8:	3308      	adds	r3, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003dd0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	3304      	adds	r3, #4
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8003de0:	601a      	str	r2, [r3, #0]
        break;
 8003de2:	e0c9      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        tx_frame.size = 8;
 8003de4:	2308      	movs	r3, #8
 8003de6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	3308      	adds	r3, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8003df4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8003df6:	f107 0308 	add.w	r3, r7, #8
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8003e04:	601a      	str	r2, [r3, #0]
        break;
 8003e06:	e0b7      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_INTEGRATOR:
        tx_frame.size = 8;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8003e0c:	f107 0308 	add.w	r3, r7, #8
 8003e10:	3308      	adds	r3, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8003e18:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	3308      	adds	r3, #8
 8003e20:	3304      	adds	r3, #4
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8003e28:	601a      	str	r2, [r3, #0]
        break;
 8003e2a:	e0a5      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_KP_KI:
        tx_frame.size = 8;
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	3308      	adds	r3, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 8003e3c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8003e3e:	f107 0308 	add.w	r3, r7, #8
 8003e42:	3308      	adds	r3, #8
 8003e44:	3304      	adds	r3, #4
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8003e4c:	601a      	str	r2, [r3, #0]
        break;
 8003e4e:	e093      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_KD:
        tx_frame.size = 4;
 8003e50:	2304      	movs	r3, #4
 8003e52:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kd;
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	3308      	adds	r3, #8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8003e60:	601a      	str	r2, [r3, #0]
        break;
 8003e62:	e089      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        tx_frame.size = 8;
 8003e64:	2308      	movs	r3, #8
 8003e66:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_limit_lower;
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 8003e74:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_limit_upper;
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8003e84:	601a      	str	r2, [r3, #0]
        break;
 8003e86:	e077      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        tx_frame.size = 8;
 8003e88:	2308      	movs	r3, #8
 8003e8a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_limit_lower;
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	3308      	adds	r3, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8003e98:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit_upper;
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8003ea8:	601a      	str	r2, [r3, #0]
        break;
 8003eaa:	e065      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        tx_frame.size = 8;
 8003eac:	2308      	movs	r3, #8
 8003eae:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003ebc:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8003ecc:	601a      	str	r2, [r3, #0]
        break;
 8003ece:	e053      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        tx_frame.size = 8;
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8003ed4:	f107 0308 	add.w	r3, r7, #8
 8003ed8:	3308      	adds	r3, #8
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8003ee0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	3304      	adds	r3, #4
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 8003ef0:	601a      	str	r2, [r3, #0]
        break;
 8003ef2:	e041      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_SETPOINT:
        tx_frame.size = 4;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	3308      	adds	r3, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8003f04:	601a      	str	r2, [r3, #0]
        break;
 8003f06:	e037      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        tx_frame.size = 8;
 8003f08:	2308      	movs	r3, #8
 8003f0a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	3308      	adds	r3, #8
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
 8003f18:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	3308      	adds	r3, #8
 8003f20:	3304      	adds	r3, #4
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8003f28:	601a      	str	r2, [r3, #0]
        break;
 8003f2a:	e025      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_SETPOINT:
        tx_frame.size = 4;
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	3308      	adds	r3, #8
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8003f3c:	601a      	str	r2, [r3, #0]
        break;
 8003f3e:	e01b      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        tx_frame.size = 8;
 8003f40:	2308      	movs	r3, #8
 8003f42:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	3308      	adds	r3, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 8003f50:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	3308      	adds	r3, #8
 8003f58:	3304      	adds	r3, #4
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 8003f60:	601a      	str	r2, [r3, #0]
        break;
 8003f62:	e009      	b.n	8003f78 <MotorController_handleCANMessage+0x7a8>
      case CAN_ID_POSITION_CONTROLLER_POSITION_SETPOINT:
        tx_frame.size = 4;
 8003f64:	2304      	movs	r3, #4
 8003f66:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 8003f74:	601a      	str	r2, [r3, #0]
        break;
 8003f76:	bf00      	nop
    }
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	48c9      	ldr	r0, [pc, #804]	; (80042a4 <MotorController_handleCANMessage+0xad4>)
 8003f80:	f7fd f988 	bl	8001294 <CAN_putTxFrame>
 8003f84:	e203      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
  }
  else {
    switch (func_id) {
 8003f86:	8bbb      	ldrh	r3, [r7, #28]
 8003f88:	2b7e      	cmp	r3, #126	; 0x7e
 8003f8a:	f200 8200 	bhi.w	800438e <MotorController_handleCANMessage+0xbbe>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <MotorController_handleCANMessage+0x7c4>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08004191 	.word	0x08004191
 8003f98:	0800419b 	.word	0x0800419b
 8003f9c:	0800438f 	.word	0x0800438f
 8003fa0:	0800438f 	.word	0x0800438f
 8003fa4:	080041a7 	.word	0x080041a7
 8003fa8:	0800438f 	.word	0x0800438f
 8003fac:	080041c9 	.word	0x080041c9
 8003fb0:	0800438f 	.word	0x0800438f
 8003fb4:	0800438f 	.word	0x0800438f
 8003fb8:	0800438f 	.word	0x0800438f
 8003fbc:	0800438f 	.word	0x0800438f
 8003fc0:	0800438f 	.word	0x0800438f
 8003fc4:	0800438f 	.word	0x0800438f
 8003fc8:	0800438f 	.word	0x0800438f
 8003fcc:	0800438f 	.word	0x0800438f
 8003fd0:	0800438f 	.word	0x0800438f
 8003fd4:	080041d7 	.word	0x080041d7
 8003fd8:	0800438f 	.word	0x0800438f
 8003fdc:	08004201 	.word	0x08004201
 8003fe0:	0800438f 	.word	0x0800438f
 8003fe4:	0800438f 	.word	0x0800438f
 8003fe8:	0800438f 	.word	0x0800438f
 8003fec:	0800438f 	.word	0x0800438f
 8003ff0:	0800438f 	.word	0x0800438f
 8003ff4:	0800438f 	.word	0x0800438f
 8003ff8:	0800438f 	.word	0x0800438f
 8003ffc:	0800438f 	.word	0x0800438f
 8004000:	0800438f 	.word	0x0800438f
 8004004:	0800438f 	.word	0x0800438f
 8004008:	0800438f 	.word	0x0800438f
 800400c:	0800438f 	.word	0x0800438f
 8004010:	0800438f 	.word	0x0800438f
 8004014:	0800420d 	.word	0x0800420d
 8004018:	0800438f 	.word	0x0800438f
 800401c:	0800438f 	.word	0x0800438f
 8004020:	0800438f 	.word	0x0800438f
 8004024:	0800438f 	.word	0x0800438f
 8004028:	0800438f 	.word	0x0800438f
 800402c:	0800438f 	.word	0x0800438f
 8004030:	0800438f 	.word	0x0800438f
 8004034:	0800438f 	.word	0x0800438f
 8004038:	0800438f 	.word	0x0800438f
 800403c:	0800438f 	.word	0x0800438f
 8004040:	0800438f 	.word	0x0800438f
 8004044:	0800438f 	.word	0x0800438f
 8004048:	0800438f 	.word	0x0800438f
 800404c:	0800438f 	.word	0x0800438f
 8004050:	0800438f 	.word	0x0800438f
 8004054:	0800438f 	.word	0x0800438f
 8004058:	0800438f 	.word	0x0800438f
 800405c:	0800438f 	.word	0x0800438f
 8004060:	0800438f 	.word	0x0800438f
 8004064:	0800438f 	.word	0x0800438f
 8004068:	0800438f 	.word	0x0800438f
 800406c:	0800438f 	.word	0x0800438f
 8004070:	0800438f 	.word	0x0800438f
 8004074:	0800438f 	.word	0x0800438f
 8004078:	0800438f 	.word	0x0800438f
 800407c:	0800438f 	.word	0x0800438f
 8004080:	0800438f 	.word	0x0800438f
 8004084:	0800438f 	.word	0x0800438f
 8004088:	0800438f 	.word	0x0800438f
 800408c:	0800438f 	.word	0x0800438f
 8004090:	0800438f 	.word	0x0800438f
 8004094:	08004225 	.word	0x08004225
 8004098:	08004231 	.word	0x08004231
 800409c:	08004249 	.word	0x08004249
 80040a0:	08004261 	.word	0x08004261
 80040a4:	0800426d 	.word	0x0800426d
 80040a8:	0800427b 	.word	0x0800427b
 80040ac:	0800438f 	.word	0x0800438f
 80040b0:	0800438f 	.word	0x0800438f
 80040b4:	08004289 	.word	0x08004289
 80040b8:	08004297 	.word	0x08004297
 80040bc:	0800438f 	.word	0x0800438f
 80040c0:	080042ad 	.word	0x080042ad
 80040c4:	0800438f 	.word	0x0800438f
 80040c8:	080042c9 	.word	0x080042c9
 80040cc:	080042d7 	.word	0x080042d7
 80040d0:	0800438f 	.word	0x0800438f
 80040d4:	0800438f 	.word	0x0800438f
 80040d8:	0800438f 	.word	0x0800438f
 80040dc:	0800438f 	.word	0x0800438f
 80040e0:	0800438f 	.word	0x0800438f
 80040e4:	0800438f 	.word	0x0800438f
 80040e8:	0800438f 	.word	0x0800438f
 80040ec:	0800438f 	.word	0x0800438f
 80040f0:	0800438f 	.word	0x0800438f
 80040f4:	0800438f 	.word	0x0800438f
 80040f8:	0800438f 	.word	0x0800438f
 80040fc:	0800438f 	.word	0x0800438f
 8004100:	0800438f 	.word	0x0800438f
 8004104:	0800438f 	.word	0x0800438f
 8004108:	0800438f 	.word	0x0800438f
 800410c:	0800438f 	.word	0x0800438f
 8004110:	0800438f 	.word	0x0800438f
 8004114:	080042e5 	.word	0x080042e5
 8004118:	08004301 	.word	0x08004301
 800411c:	0800430f 	.word	0x0800430f
 8004120:	0800432b 	.word	0x0800432b
 8004124:	08004347 	.word	0x08004347
 8004128:	08004363 	.word	0x08004363
 800412c:	0800438f 	.word	0x0800438f
 8004130:	08004371 	.word	0x08004371
 8004134:	0800438f 	.word	0x0800438f
 8004138:	0800437f 	.word	0x0800437f
 800413c:	0800438f 	.word	0x0800438f
 8004140:	0800438f 	.word	0x0800438f
 8004144:	0800438f 	.word	0x0800438f
 8004148:	0800438f 	.word	0x0800438f
 800414c:	0800438f 	.word	0x0800438f
 8004150:	0800438f 	.word	0x0800438f
 8004154:	0800438f 	.word	0x0800438f
 8004158:	0800438f 	.word	0x0800438f
 800415c:	0800438f 	.word	0x0800438f
 8004160:	0800438f 	.word	0x0800438f
 8004164:	0800438f 	.word	0x0800438f
 8004168:	0800438f 	.word	0x0800438f
 800416c:	0800438f 	.word	0x0800438f
 8004170:	0800438f 	.word	0x0800438f
 8004174:	0800438f 	.word	0x0800438f
 8004178:	0800438f 	.word	0x0800438f
 800417c:	0800438f 	.word	0x0800438f
 8004180:	0800438f 	.word	0x0800438f
 8004184:	0800438f 	.word	0x0800438f
 8004188:	0800438f 	.word	0x0800438f
 800418c:	080041bf 	.word	0x080041bf
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 8004190:	2100      	movs	r1, #0
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fe fcfc 	bl	8002b90 <MotorController_setMode>
        break;
 8004198:	e0f9      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_ID:
        controller->device_id = *((uint8_t *)rx_frame->data);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	7a1a      	ldrb	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        break;
 80041a4:	e0f3      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_FLASH:
        if (*((uint8_t *)rx_frame->data)) {
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7a1b      	ldrb	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <MotorController_handleCANMessage+0x9e6>
          MotorController_storeConfig(controller);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fe fe64 	bl	8002e7c <MotorController_storeConfig>
        }
        else {
          MotorController_loadConfig(controller);
        }
        break;
 80041b4:	e0eb      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
          MotorController_loadConfig(controller);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fddc 	bl	8002d74 <MotorController_loadConfig>
        break;
 80041bc:	e0e7      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_HEARTBEAT:
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80041be:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <MotorController_handleCANMessage+0xad8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80041c6:	e0e2      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_MODE:
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	7a1b      	ldrb	r3, [r3, #8]
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe fcde 	bl	8002b90 <MotorController_setMode>
        break;
 80041d4:	e0db      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_ENCODER_CPR:
        controller->encoder.cpr = abs(*((int32_t *)rx_frame->data));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bfb8      	it	lt
 80041e0:	425b      	neglt	r3, r3
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	819a      	strh	r2, [r3, #12]
        controller->encoder.direction = *((int32_t *)rx_frame->data) > 0 ? 1 : -1;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	3308      	adds	r3, #8
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	dd01      	ble.n	80041f6 <MotorController_handleCANMessage+0xa26>
 80041f2:	2201      	movs	r2, #1
 80041f4:	e001      	b.n	80041fa <MotorController_handleCANMessage+0xa2a>
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	739a      	strb	r2, [r3, #14]
        break;
 80041fe:	e0c6      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        controller->encoder.position_offset = *((float *)rx_frame->data);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	3308      	adds	r3, #8
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	611a      	str	r2, [r3, #16]
        break;
 800420a:	e0c0      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	3304      	adds	r3, #4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004222:	e0b4      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        controller->current_controller.current_filter_alpha = *((float *)rx_frame->data);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800422e:	e0ae      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        controller->current_controller.i_q_kp = *((float *)rx_frame->data);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	66da      	str	r2, [r3, #108]	; 0x6c
        controller->current_controller.i_q_ki = *((float *)rx_frame->data + 1);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	3304      	adds	r3, #4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004246:	e0a2      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        controller->current_controller.i_d_kp = *((float *)rx_frame->data);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	675a      	str	r2, [r3, #116]	; 0x74
        controller->current_controller.i_d_ki = *((float *)rx_frame->data + 1);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	3304      	adds	r3, #4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800425e:	e096      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_V_A_TARGET_I_A_MEASURED:
        controller->current_controller.v_a_target = *((float *)rx_frame->data);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800426a:	e090      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_V_B_TARGET_I_B_MEASURED:
        controller->current_controller.v_b_target = *((float *)rx_frame->data);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004278:	e089      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_V_C_TARGET_I_C_MEASURED:
        controller->current_controller.v_c_target = *((float *)rx_frame->data);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004286:	e082      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_TARGET_I_ALPHA_MEASURED:
        controller->current_controller.v_alpha_target = *((float *)rx_frame->data);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004294:	e07b      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_V_BETA_TARGET_I_BETA_MEASURED:
        controller->current_controller.v_beta_target = *((float *)rx_frame->data);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80042a2:	e074      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
 80042a4:	20000460 	.word	0x20000460
 80042a8:	20000628 	.word	0x20000628
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_TARGET:
        controller->current_controller.v_q_target = *((float *)rx_frame->data);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        controller->current_controller.v_d_target = *((float *)rx_frame->data + 1);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	3304      	adds	r3, #4
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 80042c6:	e062      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_TARGET_MEASURED:
        controller->current_controller.i_q_target = *((float *)rx_frame->data);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3308      	adds	r3, #8
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80042d4:	e05b      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_CURRENT_CONTROLLER_I_D_TARGET_MEASURED:
        controller->current_controller.i_d_target = *((float *)rx_frame->data);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        break;
 80042e2:	e054      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_KP_KI:
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	3304      	adds	r3, #4
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        break;
 80042fe:	e046      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_KD:
        controller->position_controller.position_kd = *((float *)rx_frame->data);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        break;
 800430c:	e03f      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        controller->position_controller.torque_limit_lower = *((float *)rx_frame->data);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        controller->position_controller.torque_limit_upper = *((float *)rx_frame->data + 1);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	3304      	adds	r3, #4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        break;
 8004328:	e031      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        controller->position_controller.velocity_limit_lower = *((float *)rx_frame->data);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        controller->position_controller.velocity_limit_upper = *((float *)rx_frame->data + 1);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	3304      	adds	r3, #4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        break;
 8004344:	e023      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	3304      	adds	r3, #4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        break;
 8004360:	e015      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        break;
 800436e:	e00e      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        break;
 800437c:	e007      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        break;
 800438a:	e000      	b.n	800438e <MotorController_handleCANMessage+0xbbe>
    return;
 800438c:	bf00      	nop
    }
  }
}
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	ed87 0a03 	vstr	s0, [r7, #12]
 800439e:	edc7 0a02 	vstr	s1, [r7, #8]
 80043a2:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 80043a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80043aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80043ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b6:	dd01      	ble.n	80043bc <clampf+0x28>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	e00b      	b.n	80043d4 <clampf+0x40>
 80043bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80043c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80043c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	d501      	bpl.n	80043d2 <clampf+0x3e>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	e000      	b.n	80043d4 <clampf+0x40>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	ee07 3a90 	vmov	s15, r3
}
 80043d8:	eeb0 0a67 	vmov.f32	s0, s15
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  controller->position_kp = 0.03;//0.03;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <PositionController_init+0x60>)
 80043f4:	601a      	str	r2, [r3, #0]
  controller->position_ki = 0;//0;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
  controller->position_kd = 0.01;//0.01;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a12      	ldr	r2, [pc, #72]	; (800444c <PositionController_init+0x64>)
 8004402:	609a      	str	r2, [r3, #8]
  controller->position_kdd = 0.01;//0.01;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a11      	ldr	r2, [pc, #68]	; (800444c <PositionController_init+0x64>)
 8004408:	60da      	str	r2, [r3, #12]

  controller->torque_limit_lower = -0.1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a10      	ldr	r2, [pc, #64]	; (8004450 <PositionController_init+0x68>)
 800440e:	615a      	str	r2, [r3, #20]
  controller->torque_limit_upper = 0.1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <PositionController_init+0x6c>)
 8004414:	611a      	str	r2, [r3, #16]

  controller->velocity_limit_lower = -20;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <PositionController_init+0x70>)
 800441a:	61da      	str	r2, [r3, #28]
  controller->velocity_limit_upper = 20;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0f      	ldr	r2, [pc, #60]	; (800445c <PositionController_init+0x74>)
 8004420:	619a      	str	r2, [r3, #24]

  controller->position_limit_lower = -100;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <PositionController_init+0x78>)
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
  controller->position_limit_upper = 100;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <PositionController_init+0x7c>)
 800442c:	621a      	str	r2, [r3, #32]

  controller->acceleration_limit_lower = -20;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <PositionController_init+0x70>)
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  controller->acceleration_limit_upper = 20;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <PositionController_init+0x74>)
 8004438:	629a      	str	r2, [r3, #40]	; 0x28
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	3cf5c28f 	.word	0x3cf5c28f
 800444c:	3c23d70a 	.word	0x3c23d70a
 8004450:	bdcccccd 	.word	0xbdcccccd
 8004454:	3dcccccd 	.word	0x3dcccccd
 8004458:	c1a00000 	.word	0xc1a00000
 800445c:	41a00000 	.word	0x41a00000
 8004460:	c2c80000 	.word	0xc2c80000
 8004464:	42c80000 	.word	0x42c80000

08004468 <PositionController_update>:

void PositionController_update(PositionController *controller) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  //  torque = position_integrator +
  //           kp * kp_scale * position_error +
  //           kd * kd_scale * velocity_error +
  //           command_torque

  controller->position_target = clampf(
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	edd3 6a08 	vldr	s13, [r3, #32]
 8004482:	eeb0 1a66 	vmov.f32	s2, s13
 8004486:	eef0 0a47 	vmov.f32	s1, s14
 800448a:	eeb0 0a67 	vmov.f32	s0, s15
 800448e:	f7ff ff81 	bl	8004394 <clampf>
 8004492:	eef0 7a40 	vmov.f32	s15, s0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
      controller->position_target,
      controller->position_limit_lower,
      controller->position_limit_upper);

  controller->position_setpoint =
      controller->position_target - controller->position_measured;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80044a8:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->position_setpoint =
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  controller->velocity_target = controller->velocity_measured;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	; 0x3c

  controller->velocity_target = clampf(
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	ed93 7a07 	vldr	s14, [r3, #28]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	edd3 6a06 	vldr	s13, [r3, #24]
 80044cc:	eeb0 1a66 	vmov.f32	s2, s13
 80044d0:	eef0 0a47 	vmov.f32	s1, s14
 80044d4:	eeb0 0a67 	vmov.f32	s0, s15
 80044d8:	f7ff ff5c 	bl	8004394 <clampf>
 80044dc:	eef0 7a40 	vmov.f32	s15, s0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
      controller->velocity_target,
      controller->velocity_limit_lower,
      controller->velocity_limit_upper);

  controller->velocity_setpoint =
      controller->velocity_target - controller->velocity_measured;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80044f2:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->velocity_setpoint =
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44


  controller->torque_target =
      controller->position_kp * controller->position_setpoint
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	ed93 7a00 	vldr	s14, [r3]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004508:	ee27 7a27 	vmul.f32	s14, s14, s15
    + controller->position_kd * controller->velocity_setpoint
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800451c:	ee37 7a27 	vadd.f32	s14, s14, s15
    + controller->position_kdd * 0;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	edd3 7a03 	vldr	s15, [r3, #12]
 8004526:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004584 <PositionController_update+0x11c>
 800452a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800452e:	ee77 7a27 	vadd.f32	s15, s14, s15
  controller->torque_target =
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  controller->torque_target = clampf(
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	ed93 7a05 	vldr	s14, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	edd3 6a04 	vldr	s13, [r3, #16]
 800454a:	eeb0 1a66 	vmov.f32	s2, s13
 800454e:	eef0 0a47 	vmov.f32	s1, s14
 8004552:	eeb0 0a67 	vmov.f32	s0, s15
 8004556:	f7ff ff1d 	bl	8004394 <clampf>
 800455a:	eef0 7a40 	vmov.f32	s15, s0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
      controller->torque_target,
      controller->torque_limit_lower,
      controller->torque_limit_upper);

  controller->torque_setpoint =
      controller->torque_target - controller->torque_measured;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004570:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->torque_setpoint =
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//  controller->torque_setpoint = clampf(
//      controller->torque_setpoint,
//      controller->torque_limit_lower,
//      controller->torque_limit_upper);
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	00000000 	.word	0x00000000

08004588 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004592:	edc7 0a02 	vstr	s1, [r7, #8]
 8004596:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 800459a:	ed97 7a03 	vldr	s14, [r7, #12]
 800459e:	edd7 7a01 	vldr	s15, [r7, #4]
 80045a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045aa:	dd01      	ble.n	80045b0 <clampf+0x28>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	e00b      	b.n	80045c8 <clampf+0x40>
 80045b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80045b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	d501      	bpl.n	80045c6 <clampf+0x3e>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	e000      	b.n	80045c8 <clampf+0x40>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	ee07 3a90 	vmov	s15, r3
}
 80045cc:	eeb0 0a67 	vmov.f32	s0, s15
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <PowerStage_init>:
 *      Author: TK
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  powerstage->htim = htim;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	601a      	str	r2, [r3, #0]
  powerstage->hadc1 = hadc1;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	605a      	str	r2, [r3, #4]
  powerstage->hadc2 = hadc2;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	609a      	str	r2, [r3, #8]

  powerstage->bus_voltage_measured = 12.;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a04      	ldr	r2, [pc, #16]	; (8004610 <PowerStage_init+0x34>)
 8004600:	621a      	str	r2, [r3, #32]

  PowerStage_disable(powerstage);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f838 	bl	8004678 <PowerStage_disable>
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	41400000 	.word	0x41400000

08004614 <PowerStage_start>:

void PowerStage_start(PowerStage *powerstage) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(powerstage->htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f005 fc99 	bl	8009f58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f005 fd5f 	bl	800a0f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f006 fe57 	bl	800b2ec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2104      	movs	r1, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f005 fd53 	bl	800a0f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2104      	movs	r1, #4
 8004650:	4618      	mov	r0, r3
 8004652:	f006 fe4b 	bl	800b2ec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2108      	movs	r1, #8
 800465c:	4618      	mov	r0, r3
 800465e:	f005 fd47 	bl	800a0f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2108      	movs	r1, #8
 8004668:	4618      	mov	r0, r3
 800466a:	f006 fe3f 	bl	800b2ec <HAL_TIMEx_PWMN_Start>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <PowerStage_disable>:

uint8_t PowerStage_isEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disable(PowerStage *powerstage) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8004680:	2200      	movs	r2, #0
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	4808      	ldr	r0, [pc, #32]	; (80046a8 <PowerStage_disable+0x30>)
 8004686:	f003 fd95 	bl	80081b4 <HAL_GPIO_WritePin>
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	48000400 	.word	0x48000400

080046ac <PowerStage_enable>:

void PowerStage_enable(PowerStage *powerstage) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80046c8:	2201      	movs	r2, #1
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	4803      	ldr	r0, [pc, #12]	; (80046dc <PowerStage_enable+0x30>)
 80046ce:	f003 fd71 	bl	80081b4 <HAL_GPIO_WritePin>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	48000400 	.word	0x48000400

080046e0 <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80046ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80046f0:	ed87 1a00 	vstr	s2, [r7]
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80046fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80046fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800470a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800470e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004712:	edc7 7a02 	vstr	s15, [r7, #8]
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	ed93 7a08 	vldr	s14, [r3, #32]
 800471c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800472c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004734:	edc7 7a01 	vstr	s15, [r7, #4]
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	ed93 7a08 	vldr	s14, [r3, #32]
 800473e:	edd7 6a00 	vldr	s13, [r7]
 8004742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800474a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800474e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004756:	edc7 7a00 	vstr	s15, [r7]

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 800475a:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004828 <PowerStage_setBridgeOutput+0x148>
 800475e:	eddf 0a33 	vldr	s1, [pc, #204]	; 800482c <PowerStage_setBridgeOutput+0x14c>
 8004762:	ed97 0a02 	vldr	s0, [r7, #8]
 8004766:	f7ff ff0f 	bl	8004588 <clampf>
 800476a:	ed87 0a02 	vstr	s0, [r7, #8]
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
 800476e:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8004828 <PowerStage_setBridgeOutput+0x148>
 8004772:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800482c <PowerStage_setBridgeOutput+0x14c>
 8004776:	ed97 0a01 	vldr	s0, [r7, #4]
 800477a:	f7ff ff05 	bl	8004588 <clampf>
 800477e:	ed87 0a01 	vstr	s0, [r7, #4]
  v_c = clampf(v_c, 0.02f, 0.98f);
 8004782:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8004828 <PowerStage_setBridgeOutput+0x148>
 8004786:	eddf 0a29 	vldr	s1, [pc, #164]	; 800482c <PowerStage_setBridgeOutput+0x14c>
 800478a:	ed97 0a00 	vldr	s0, [r7]
 800478e:	f7ff fefb 	bl	8004588 <clampf>
 8004792:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	3301      	adds	r3, #1
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80047ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b4:	ee17 3a90 	vmov	r3, s15
 80047b8:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	3301      	adds	r3, #1
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d8:	ee17 3a90 	vmov	r3, s15
 80047dc:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	3301      	adds	r3, #1
 80047e8:	ee07 3a90 	vmov	s15, r3
 80047ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047f0:	edd7 7a00 	vldr	s15, [r7]
 80047f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fc:	ee17 3a90 	vmov	r3, s15
 8004800:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	8afa      	ldrh	r2, [r7, #22]
 800480a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	8aba      	ldrh	r2, [r7, #20]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	8a7a      	ldrh	r2, [r7, #18]
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004820:	bf00      	nop
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	3f7ae148 	.word	0x3f7ae148
 800482c:	3ca3d70a 	.word	0x3ca3d70a

08004830 <PowerStage_calibratePhaseCurrentOffset>:


void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  powerstage->adc_reading_offset[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2109      	movs	r1, #9
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fab8 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 8004844:	4603      	mov	r3, r0
 8004846:	b21a      	sxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	835a      	strh	r2, [r3, #26]
  powerstage->adc_reading_offset[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2109      	movs	r1, #9
 8004852:	4618      	mov	r0, r3
 8004854:	f001 faae 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 8004858:	4603      	mov	r3, r0
 800485a:	b21a      	sxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	839a      	strh	r2, [r3, #28]
  powerstage->adc_reading_offset[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f240 110f 	movw	r1, #271	; 0x10f
 8004868:	4618      	mov	r0, r3
 800486a:	f001 faa3 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 800486e:	4603      	mov	r3, r0
 8004870:	b21a      	sxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	83da      	strh	r2, [r3, #30]

}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <PowerStage_getBusVoltage>:

void PowerStage_getBusVoltage(PowerStage *powerstage) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  powerstage->bus_voltage_measured = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f240 110f 	movw	r1, #271	; 0x10f
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fa8f 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 8004896:	4603      	mov	r3, r0
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe5b 	bl	8000554 <__aeabi_ui2d>
 800489e:	a30a      	add	r3, pc, #40	; (adr r3, 80048c8 <PowerStage_getBusVoltage+0x48>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fb fed0 	bl	8000648 <__aeabi_dmul>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fc f9a2 	bl	8000bf8 <__aeabi_d2f>
 80048b4:	4602      	mov	r2, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	f3af 8000 	nop.w
 80048c8:	99999999 	.word	0x99999999
 80048cc:	3f92f999 	.word	0x3f92f999

080048d0 <PowerStage_getPhaseCurrent>:

void PowerStage_getPhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2109      	movs	r1, #9
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fa65 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 80048ea:	4603      	mov	r3, r0
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	829a      	strh	r2, [r3, #20]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2109      	movs	r1, #9
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fa5b 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 80048fe:	4603      	mov	r3, r0
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	82da      	strh	r2, [r3, #22]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f240 110f 	movw	r1, #271	; 0x10f
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fa50 	bl	8005db4 <HAL_ADCEx_InjectedGetValue>
 8004914:	4603      	mov	r3, r0
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	831a      	strh	r2, [r3, #24]

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8a9b      	ldrh	r3, [r3, #20]
 8004920:	461a      	mov	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004932:	eef1 7a67 	vneg.f32	s15, s15
 8004936:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800499c <PowerStage_getPhaseCurrent+0xcc>
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	edc3 7a00 	vstr	s15, [r3]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8adb      	ldrh	r3, [r3, #22]
 8004948:	461a      	mov	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800495a:	eef1 7a67 	vneg.f32	s15, s15
 800495e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800499c <PowerStage_getPhaseCurrent+0xcc>
 8004962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	edc3 7a00 	vstr	s15, [r3]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8b1b      	ldrh	r3, [r3, #24]
 8004970:	461a      	mov	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004982:	eef1 7a67 	vneg.f32	s15, s15
 8004986:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800499c <PowerStage_getPhaseCurrent+0xcc>
 800498a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	edc3 7a00 	vstr	s15, [r3]
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	3c898000 	.word	0x3c898000

080049a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_MspInit+0x44>)
 80049a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049aa:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <HAL_MspInit+0x44>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6613      	str	r3, [r2, #96]	; 0x60
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_MspInit+0x44>)
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_MspInit+0x44>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <HAL_MspInit+0x44>)
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6593      	str	r3, [r2, #88]	; 0x58
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_MspInit+0x44>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b09c      	sub	sp, #112	; 0x70
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a00:	f107 0318 	add.w	r3, r7, #24
 8004a04:	2244      	movs	r2, #68	; 0x44
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f007 fd45 	bl	800c498 <memset>
  if(hadc->Instance==ADC1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a16:	d157      	bne.n	8004ac8 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a1e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a24:	f107 0318 	add.w	r3, r7, #24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f004 fab5 	bl	8008f98 <HAL_RCCEx_PeriphCLKConfig>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004a34:	f7fd ff3c 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a38:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_ADC_MspInit+0x13c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <HAL_ADC_MspInit+0x13c>)
 8004a40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <HAL_ADC_MspInit+0x13c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10b      	bne.n	8004a62 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a62:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	4a30      	ldr	r2, [pc, #192]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a86:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a92:	2301      	movs	r3, #1
 8004a94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a96:	2303      	movs	r3, #3
 8004a98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aa8:	f003 f9ea 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8004aac:	f241 0302 	movw	r3, #4098	; 0x1002
 8004ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004abe:	4619      	mov	r1, r3
 8004ac0:	481a      	ldr	r0, [pc, #104]	; (8004b2c <HAL_ADC_MspInit+0x144>)
 8004ac2:	f003 f9dd 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004ac6:	e029      	b.n	8004b1c <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <HAL_ADC_MspInit+0x148>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d124      	bne.n	8004b1c <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ad8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004adc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ade:	f107 0318 	add.w	r3, r7, #24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f004 fa58 	bl	8008f98 <HAL_RCCEx_PeriphCLKConfig>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_ADC_MspInit+0x10a>
      Error_Handler();
 8004aee:	f7fd fedf 	bl	80028b0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <HAL_ADC_MspInit+0x13c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <HAL_ADC_MspInit+0x13c>)
 8004afa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_ADC_MspInit+0x13c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10b      	bne.n	8004b1c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004b04:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b08:	4a07      	ldr	r2, [pc, #28]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004b0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_ADC_MspInit+0x140>)
 8004b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	3770      	adds	r7, #112	; 0x70
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000079c 	.word	0x2000079c
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	48000400 	.word	0x48000400
 8004b30:	50000100 	.word	0x50000100

08004b34 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <HAL_CORDIC_MspInit+0x38>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10b      	bne.n	8004b5e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <HAL_CORDIC_MspInit+0x3c>)
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <HAL_CORDIC_MspInit+0x3c>)
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	6493      	str	r3, [r2, #72]	; 0x48
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <HAL_CORDIC_MspInit+0x3c>)
 8004b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021000 	.word	0x40021000

08004b74 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b09a      	sub	sp, #104	; 0x68
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b8c:	f107 0310 	add.w	r3, r7, #16
 8004b90:	2244      	movs	r2, #68	; 0x44
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f007 fc7f 	bl	800c498 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a28      	ldr	r2, [pc, #160]	; (8004c40 <HAL_FDCAN_MspInit+0xcc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d149      	bne.n	8004c38 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f004 f9ef 	bl	8008f98 <HAL_RCCEx_PeriphCLKConfig>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004bc0:	f7fd fe76 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <HAL_FDCAN_MspInit+0xd0>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <HAL_FDCAN_MspInit+0xd0>)
 8004bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bce:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <HAL_FDCAN_MspInit+0xd0>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bdc:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <HAL_FDCAN_MspInit+0xd0>)
 8004bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_FDCAN_MspInit+0xd0>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_FDCAN_MspInit+0xd0>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004bf4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004bf8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c02:	2300      	movs	r3, #0
 8004c04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004c06:	2309      	movs	r3, #9
 8004c08:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c14:	f003 f934 	bl	8007e80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	2015      	movs	r0, #21
 8004c1e:	f001 ffce 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004c22:	2015      	movs	r0, #21
 8004c24:	f001 ffe5 	bl	8006bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	2016      	movs	r0, #22
 8004c2e:	f001 ffc6 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004c32:	2016      	movs	r0, #22
 8004c34:	f001 ffdd 	bl	8006bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004c38:	bf00      	nop
 8004c3a:	3768      	adds	r7, #104	; 0x68
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40006400 	.word	0x40006400
 8004c44:	40021000 	.word	0x40021000

08004c48 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	f107 0314 	add.w	r3, r7, #20
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2e      	ldr	r2, [pc, #184]	; (8004d20 <HAL_OPAMP_MspInit+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d119      	bne.n	8004c9e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c76:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004c82:	230a      	movs	r3, #10
 8004c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c86:	2303      	movs	r3, #3
 8004c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8e:	f107 0314 	add.w	r3, r7, #20
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c98:	f003 f8f2 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004c9c:	e03b      	b.n	8004d16 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <HAL_OPAMP_MspInit+0xe0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d119      	bne.n	8004cdc <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004cc0:	23a0      	movs	r3, #160	; 0xa0
 8004cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd6:	f003 f8d3 	bl	8007e80 <HAL_GPIO_Init>
}
 8004cda:	e01c      	b.n	8004d16 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <HAL_OPAMP_MspInit+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d117      	bne.n	8004d16 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <HAL_OPAMP_MspInit+0xdc>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004cfe:	2305      	movs	r3, #5
 8004d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d02:	2303      	movs	r3, #3
 8004d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4807      	ldr	r0, [pc, #28]	; (8004d30 <HAL_OPAMP_MspInit+0xe8>)
 8004d12:	f003 f8b5 	bl	8007e80 <HAL_GPIO_Init>
}
 8004d16:	bf00      	nop
 8004d18:	3728      	adds	r7, #40	; 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40010300 	.word	0x40010300
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40010304 	.word	0x40010304
 8004d2c:	40010308 	.word	0x40010308
 8004d30:	48000400 	.word	0x48000400

08004d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_SPI_MspInit+0x8c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d12f      	bne.n	8004db6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_SPI_MspInit+0x90>)
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_SPI_MspInit+0x90>)
 8004d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d60:	6613      	str	r3, [r2, #96]	; 0x60
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_SPI_MspInit+0x90>)
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_SPI_MspInit+0x90>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <HAL_SPI_MspInit+0x90>)
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_SPI_MspInit+0x90>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d86:	2338      	movs	r3, #56	; 0x38
 8004d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d92:	2302      	movs	r3, #2
 8004d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d96:	2305      	movs	r3, #5
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4809      	ldr	r0, [pc, #36]	; (8004dc8 <HAL_SPI_MspInit+0x94>)
 8004da2:	f003 f86d 	bl	8007e80 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2102      	movs	r1, #2
 8004daa:	2023      	movs	r0, #35	; 0x23
 8004dac:	f001 ff07 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004db0:	2023      	movs	r0, #35	; 0x23
 8004db2:	f001 ff1e 	bl	8006bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004db6:	bf00      	nop
 8004db8:	3728      	adds	r7, #40	; 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40013000 	.word	0x40013000
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	48000400 	.word	0x48000400

08004dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a30      	ldr	r2, [pc, #192]	; (8004e9c <HAL_TIM_Base_MspInit+0xd0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d114      	bne.n	8004e08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dde:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	4a2f      	ldr	r2, [pc, #188]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004de8:	6613      	str	r3, [r2, #96]	; 0x60
 8004dea:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2101      	movs	r1, #1
 8004dfa:	2019      	movs	r0, #25
 8004dfc:	f001 fedf 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e00:	2019      	movs	r0, #25
 8004e02:	f001 fef6 	bl	8006bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004e06:	e044      	b.n	8004e92 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d114      	bne.n	8004e3c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	201c      	movs	r0, #28
 8004e30:	f001 fec5 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e34:	201c      	movs	r0, #28
 8004e36:	f001 fedc 	bl	8006bf2 <HAL_NVIC_EnableIRQ>
}
 8004e3a:	e02a      	b.n	8004e92 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_TIM_Base_MspInit+0xd8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d114      	bne.n	8004e70 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e46:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e4c:	f043 0304 	orr.w	r3, r3, #4
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2102      	movs	r1, #2
 8004e62:	201e      	movs	r0, #30
 8004e64:	f001 feab 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e68:	201e      	movs	r0, #30
 8004e6a:	f001 fec2 	bl	8006bf2 <HAL_NVIC_EnableIRQ>
}
 8004e6e:	e010      	b.n	8004e92 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <HAL_TIM_Base_MspInit+0xdc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10b      	bne.n	8004e92 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	6593      	str	r3, [r2, #88]	; 0x58
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_TIM_Base_MspInit+0xd4>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
}
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40001000 	.word	0x40001000

08004eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <HAL_TIM_MspPostInit+0xc4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d14b      	bne.n	8004f66 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <HAL_TIM_MspPostInit+0xc8>)
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <HAL_TIM_MspPostInit+0xc8>)
 8004ed4:	f043 0302 	orr.w	r3, r3, #2
 8004ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eda:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <HAL_TIM_MspPostInit+0xc8>)
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee6:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <HAL_TIM_MspPostInit+0xc8>)
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	4a22      	ldr	r2, [pc, #136]	; (8004f74 <HAL_TIM_MspPostInit+0xc8>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_TIM_MspPostInit+0xc8>)
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004efe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004f10:	2306      	movs	r3, #6
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4817      	ldr	r0, [pc, #92]	; (8004f78 <HAL_TIM_MspPostInit+0xcc>)
 8004f1c:	f002 ffb0 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f26:	2302      	movs	r3, #2
 8004f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004f32:	2304      	movs	r3, #4
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	480e      	ldr	r0, [pc, #56]	; (8004f78 <HAL_TIM_MspPostInit+0xcc>)
 8004f3e:	f002 ff9f 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004f42:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004f54:	2306      	movs	r3, #6
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f58:	f107 0314 	add.w	r3, r7, #20
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f62:	f002 ff8d 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004f66:	bf00      	nop
 8004f68:	3728      	adds	r7, #40	; 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40021000 	.word	0x40021000
 8004f78:	48000400 	.word	0x48000400

08004f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b09a      	sub	sp, #104	; 0x68
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f94:	f107 0310 	add.w	r3, r7, #16
 8004f98:	2244      	movs	r2, #68	; 0x44
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f007 fa7b 	bl	800c498 <memset>
  if(huart->Instance==USART3)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <HAL_UART_MspInit+0xa8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d136      	bne.n	800501a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004fac:	2304      	movs	r3, #4
 8004fae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fb4:	f107 0310 	add.w	r3, r7, #16
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f003 ffed 	bl	8008f98 <HAL_RCCEx_PeriphCLKConfig>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004fc4:	f7fd fc74 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <HAL_UART_MspInit+0xac>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <HAL_UART_MspInit+0xac>)
 8004fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <HAL_UART_MspInit+0xac>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <HAL_UART_MspInit+0xac>)
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	4a10      	ldr	r2, [pc, #64]	; (8005028 <HAL_UART_MspInit+0xac>)
 8004fe6:	f043 0302 	orr.w	r3, r3, #2
 8004fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <HAL_UART_MspInit+0xac>)
 8004fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ff8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ffc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffe:	2302      	movs	r3, #2
 8005000:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005006:	2300      	movs	r3, #0
 8005008:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800500a:	2307      	movs	r3, #7
 800500c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005012:	4619      	mov	r1, r3
 8005014:	4805      	ldr	r0, [pc, #20]	; (800502c <HAL_UART_MspInit+0xb0>)
 8005016:	f002 ff33 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800501a:	bf00      	nop
 800501c:	3768      	adds	r7, #104	; 0x68
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40004800 	.word	0x40004800
 8005028:	40021000 	.word	0x40021000
 800502c:	48000400 	.word	0x48000400

08005030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005034:	e7fe      	b.n	8005034 <NMI_Handler+0x4>

08005036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800503a:	e7fe      	b.n	800503a <HardFault_Handler+0x4>

0800503c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005040:	e7fe      	b.n	8005040 <MemManage_Handler+0x4>

08005042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005042:	b480      	push	{r7}
 8005044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005046:	e7fe      	b.n	8005046 <BusFault_Handler+0x4>

08005048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800504c:	e7fe      	b.n	800504c <UsageFault_Handler+0x4>

0800504e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800504e:	b480      	push	{r7}
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800507c:	f000 f992 	bl	80053a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}

08005084 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005088:	4802      	ldr	r0, [pc, #8]	; (8005094 <FDCAN1_IT0_IRQHandler+0x10>)
 800508a:	f002 fa13 	bl	80074b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000460 	.word	0x20000460

08005098 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800509c:	4802      	ldr	r0, [pc, #8]	; (80050a8 <FDCAN1_IT1_IRQHandler+0x10>)
 800509e:	f002 fa09 	bl	80074b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000460 	.word	0x20000460

080050ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050b0:	4802      	ldr	r0, [pc, #8]	; (80050bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80050b2:	f005 f91d 	bl	800a2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050b6:	bf00      	nop
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200005dc 	.word	0x200005dc

080050c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80050c4:	4802      	ldr	r0, [pc, #8]	; (80050d0 <TIM2_IRQHandler+0x10>)
 80050c6:	f005 f913 	bl	800a2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000628 	.word	0x20000628

080050d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80050d8:	4802      	ldr	r0, [pc, #8]	; (80050e4 <TIM4_IRQHandler+0x10>)
 80050da:	f005 f909 	bl	800a2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000674 	.word	0x20000674

080050e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80050ec:	4802      	ldr	r0, [pc, #8]	; (80050f8 <SPI1_IRQHandler+0x10>)
 80050ee:	f004 fa9f 	bl	8009630 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000578 	.word	0x20000578

080050fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
	return 1;
 8005100:	2301      	movs	r3, #1
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <_kill>:

int _kill(int pid, int sig)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005116:	f007 f995 	bl	800c444 <__errno>
 800511a:	4603      	mov	r3, r0
 800511c:	2216      	movs	r2, #22
 800511e:	601a      	str	r2, [r3, #0]
	return -1;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_exit>:

void _exit (int status)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005134:	f04f 31ff 	mov.w	r1, #4294967295
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff ffe7 	bl	800510c <_kill>
	while (1) {}		/* Make sure we hang here */
 800513e:	e7fe      	b.n	800513e <_exit+0x12>

08005140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e00a      	b.n	8005168 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005152:	f3af 8000 	nop.w
 8005156:	4601      	mov	r1, r0
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	60ba      	str	r2, [r7, #8]
 800515e:	b2ca      	uxtb	r2, r1
 8005160:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	dbf0      	blt.n	8005152 <_read+0x12>
	}

return len;
 8005170:	687b      	ldr	r3, [r7, #4]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e009      	b.n	80051a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	60ba      	str	r2, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	3301      	adds	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	dbf1      	blt.n	800518c <_write+0x12>
	}
	return len;
 80051a8:	687b      	ldr	r3, [r7, #4]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_close>:

int _close(int file)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
	return -1;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051da:	605a      	str	r2, [r3, #4]
	return 0;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <_isatty>:

int _isatty(int file)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
	return 1;
 80051f2:	2301      	movs	r3, #1
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	return 0;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <_sbrk+0x5c>)
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <_sbrk+0x60>)
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <_sbrk+0x64>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <_sbrk+0x64>)
 800523a:	4a12      	ldr	r2, [pc, #72]	; (8005284 <_sbrk+0x68>)
 800523c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <_sbrk+0x64>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d207      	bcs.n	800525c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800524c:	f007 f8fa 	bl	800c444 <__errno>
 8005250:	4603      	mov	r3, r0
 8005252:	220c      	movs	r2, #12
 8005254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	e009      	b.n	8005270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <_sbrk+0x64>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <_sbrk+0x64>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	4a05      	ldr	r2, [pc, #20]	; (8005280 <_sbrk+0x64>)
 800526c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20008000 	.word	0x20008000
 800527c:	00000400 	.word	0x00000400
 8005280:	200007a0 	.word	0x200007a0
 8005284:	200007b8 	.word	0x200007b8

08005288 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <SystemInit+0x20>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <SystemInit+0x20>)
 8005294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052ac:	480d      	ldr	r0, [pc, #52]	; (80052e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052b0:	480d      	ldr	r0, [pc, #52]	; (80052e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80052b2:	490e      	ldr	r1, [pc, #56]	; (80052ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80052b4:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <LoopForever+0xe>)
  movs r3, #0
 80052b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80052b8:	e002      	b.n	80052c0 <LoopCopyDataInit>

080052ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052be:	3304      	adds	r3, #4

080052c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052c4:	d3f9      	bcc.n	80052ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052c6:	4a0b      	ldr	r2, [pc, #44]	; (80052f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052c8:	4c0b      	ldr	r4, [pc, #44]	; (80052f8 <LoopForever+0x16>)
  movs r3, #0
 80052ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052cc:	e001      	b.n	80052d2 <LoopFillZerobss>

080052ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052d0:	3204      	adds	r2, #4

080052d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052d4:	d3fb      	bcc.n	80052ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052d6:	f7ff ffd7 	bl	8005288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052da:	f007 f8b9 	bl	800c450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052de:	f7fc fd77 	bl	8001dd0 <main>

080052e2 <LoopForever>:

LoopForever:
    b LoopForever
 80052e2:	e7fe      	b.n	80052e2 <LoopForever>
  ldr   r0, =_estack
 80052e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80052e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052ec:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80052f0:	080108d4 	.word	0x080108d4
  ldr r2, =_sbss
 80052f4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80052f8:	200007b8 	.word	0x200007b8

080052fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052fc:	e7fe      	b.n	80052fc <ADC1_2_IRQHandler>

080052fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005308:	2003      	movs	r0, #3
 800530a:	f001 fc4d 	bl	8006ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800530e:	200f      	movs	r0, #15
 8005310:	f000 f80e 	bl	8005330 <HAL_InitTick>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	71fb      	strb	r3, [r7, #7]
 800531e:	e001      	b.n	8005324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005320:	f7ff fb3e 	bl	80049a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005324:	79fb      	ldrb	r3, [r7, #7]

}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800533c:	4b16      	ldr	r3, [pc, #88]	; (8005398 <HAL_InitTick+0x68>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d022      	beq.n	800538a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005344:	4b15      	ldr	r3, [pc, #84]	; (800539c <HAL_InitTick+0x6c>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b13      	ldr	r3, [pc, #76]	; (8005398 <HAL_InitTick+0x68>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005350:	fbb1 f3f3 	udiv	r3, r1, r3
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	4618      	mov	r0, r3
 800535a:	f001 fc58 	bl	8006c0e <HAL_SYSTICK_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10f      	bne.n	8005384 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	d809      	bhi.n	800537e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800536a:	2200      	movs	r2, #0
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	f001 fc24 	bl	8006bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_InitTick+0x70>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e007      	b.n	800538e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
 8005382:	e004      	b.n	800538e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e001      	b.n	800538e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000008 	.word	0x20000008
 800539c:	20000000 	.word	0x20000000
 80053a0:	20000004 	.word	0x20000004

080053a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_IncTick+0x1c>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_IncTick+0x20>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	4a03      	ldr	r2, [pc, #12]	; (80053c0 <HAL_IncTick+0x1c>)
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	bf00      	nop
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	200007a4 	.word	0x200007a4
 80053c4:	20000008 	.word	0x20000008

080053c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return uwTick;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_GetTick+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	200007a4 	.word	0x200007a4

080053e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053e8:	f7ff ffee 	bl	80053c8 <HAL_GetTick>
 80053ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d004      	beq.n	8005404 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_Delay+0x40>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005404:	bf00      	nop
 8005406:	f7ff ffdf 	bl	80053c8 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	429a      	cmp	r2, r3
 8005414:	d8f7      	bhi.n	8005406 <HAL_Delay+0x26>
  {
  }
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000008 	.word	0x20000008

08005424 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609a      	str	r2, [r3, #8]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800545a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6093      	str	r3, [r2, #8]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005482:	d101      	bne.n	8005488 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80054a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d2:	d101      	bne.n	80054d8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054fa:	f043 0201 	orr.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <LL_ADC_IsEnabled+0x18>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <LL_ADC_IsEnabled+0x1a>
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b04      	cmp	r3, #4
 8005546:	d101      	bne.n	800554c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b08      	cmp	r3, #8
 800556c:	d101      	bne.n	8005572 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800558c:	2300      	movs	r3, #0
 800558e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e177      	b.n	800588a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff fa1d 	bl	80049e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff54 	bl	800546e <LL_ADC_IsDeepPowerDownEnabled>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff3a 	bl	800544a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ff6f 	bl	80054be <LL_ADC_IsInternalRegulatorEnabled>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff53 	bl	8005496 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055f0:	4b9c      	ldr	r3, [pc, #624]	; (8005864 <HAL_ADC_Init+0x2e4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	4a9c      	ldr	r2, [pc, #624]	; (8005868 <HAL_ADC_Init+0x2e8>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	099b      	lsrs	r3, r3, #6
 80055fe:	3301      	adds	r3, #1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005604:	e002      	b.n	800560c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3b01      	subs	r3, #1
 800560a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f9      	bne.n	8005606 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ff51 	bl	80054be <LL_ADC_IsInternalRegulatorEnabled>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005632:	f043 0201 	orr.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff ff76 	bl	8005534 <LL_ADC_REG_IsConversionOngoing>
 8005648:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	f040 8110 	bne.w	8005878 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 810c 	bne.w	8005878 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005664:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005668:	f043 0202 	orr.w	r2, r3, #2
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff4a 	bl	800550e <LL_ADC_IsEnabled>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d111      	bne.n	80056a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005680:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005684:	f7ff ff43 	bl	800550e <LL_ADC_IsEnabled>
 8005688:	4604      	mov	r4, r0
 800568a:	4878      	ldr	r0, [pc, #480]	; (800586c <HAL_ADC_Init+0x2ec>)
 800568c:	f7ff ff3f 	bl	800550e <LL_ADC_IsEnabled>
 8005690:	4603      	mov	r3, r0
 8005692:	4323      	orrs	r3, r4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4619      	mov	r1, r3
 800569e:	4874      	ldr	r0, [pc, #464]	; (8005870 <HAL_ADC_Init+0x2f0>)
 80056a0:	f7ff fec0 	bl	8005424 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7f5b      	ldrb	r3, [r3, #29]
 80056a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80056b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80056ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d106      	bne.n	80056e0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	3b01      	subs	r3, #1
 80056d8:	045b      	lsls	r3, r3, #17
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <HAL_ADC_Init+0x2f4>)
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	430b      	orrs	r3, r1
 800570e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ff02 	bl	8005534 <LL_ADC_REG_IsConversionOngoing>
 8005730:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ff0f 	bl	800555a <LL_ADC_INJ_IsConversionOngoing>
 800573c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d16d      	bne.n	8005820 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d16a      	bne.n	8005820 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800574e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005756:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005766:	f023 0302 	bic.w	r3, r3, #2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	69b9      	ldr	r1, [r7, #24]
 8005770:	430b      	orrs	r3, r1
 8005772:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800578a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005794:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6911      	ldr	r1, [r2, #16]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80057aa:	e013      	b.n	80057d4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d118      	bne.n	8005810 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80057fa:	4311      	orrs	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005800:	430a      	orrs	r2, r1
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	e007      	b.n	8005820 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10c      	bne.n	8005842 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f023 010f 	bic.w	r1, r3, #15
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
 8005840:	e007      	b.n	8005852 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 020f 	bic.w	r2, r2, #15
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	65da      	str	r2, [r3, #92]	; 0x5c
 8005862:	e011      	b.n	8005888 <HAL_ADC_Init+0x308>
 8005864:	20000000 	.word	0x20000000
 8005868:	053e2d63 	.word	0x053e2d63
 800586c:	50000100 	.word	0x50000100
 8005870:	50000300 	.word	0x50000300
 8005874:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	f043 0210 	orr.w	r2, r3, #16
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005888:	7ffb      	ldrb	r3, [r7, #31]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd90      	pop	{r4, r7, pc}
 8005892:	bf00      	nop

08005894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff fe34 	bl	800550e <LL_ADC_IsEnabled>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d14d      	bne.n	8005948 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	4b28      	ldr	r3, [pc, #160]	; (8005954 <ADC_Enable+0xc0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	f043 0210 	orr.w	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e039      	b.n	800594a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fe03 	bl	80054e6 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80058e0:	f7ff fd72 	bl	80053c8 <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058e6:	e028      	b.n	800593a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fe0e 	bl	800550e <LL_ADC_IsEnabled>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fdf2 	bl	80054e6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005902:	f7ff fd61 	bl	80053c8 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d914      	bls.n	800593a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d00d      	beq.n	800593a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005922:	f043 0210 	orr.w	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e007      	b.n	800594a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b01      	cmp	r3, #1
 8005946:	d1cf      	bne.n	80058e8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	8000003f 	.word	0x8000003f

08005958 <LL_ADC_SetCommonPathInternalCh>:
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	609a      	str	r2, [r3, #8]
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_ADC_GetCommonPathInternalCh>:
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <LL_ADC_SetOffset>:
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3360      	adds	r3, #96	; 0x60
 80059ae:	461a      	mov	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <LL_ADC_SetOffset+0x44>)
 80059be:	4013      	ands	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	03fff000 	.word	0x03fff000

080059e4 <LL_ADC_GetOffsetChannel>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3360      	adds	r3, #96	; 0x60
 80059f2:	461a      	mov	r2, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <LL_ADC_SetOffsetState>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3360      	adds	r3, #96	; 0x60
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	601a      	str	r2, [r3, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <LL_ADC_SetOffsetSign>:
{
 8005a46:	b480      	push	{r7}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3360      	adds	r3, #96	; 0x60
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	601a      	str	r2, [r3, #0]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_SetOffsetSaturation>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3360      	adds	r3, #96	; 0x60
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	615a      	str	r2, [r3, #20]
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_ADC_INJ_GetTrigAuto>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_ADC_SetChannelSamplingTime>:
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3314      	adds	r3, #20
 8005b04:	461a      	mov	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0e5b      	lsrs	r3, r3, #25
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	4413      	add	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	0d1b      	lsrs	r3, r3, #20
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	2107      	movs	r1, #7
 8005b22:	fa01 f303 	lsl.w	r3, r1, r3
 8005b26:	43db      	mvns	r3, r3
 8005b28:	401a      	ands	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	0d1b      	lsrs	r3, r3, #20
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <LL_ADC_SetChannelSingleDiff>:
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10a      	bne.n	8005b76 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005b74:	e00a      	b.n	8005b8c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b82:	43db      	mvns	r3, r3
 8005b84:	401a      	ands	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	407f0000 	.word	0x407f0000

08005b9c <LL_ADC_GetMultimode>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 031f 	and.w	r3, r3, #31
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_ADC_IsEnabled>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <LL_ADC_IsEnabled+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_ADC_IsEnabled+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LL_ADC_REG_IsConversionOngoing>:
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d101      	bne.n	8005bf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <LL_ADC_INJ_StartConversion>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c18:	f043 0208 	orr.w	r2, r3, #8
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_ADC_INJ_IsConversionOngoing>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d101      	bne.n	8005c44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c5c:	4853      	ldr	r0, [pc, #332]	; (8005dac <HAL_ADCEx_InjectedStart+0x158>)
 8005c5e:	f7ff ff9d 	bl	8005b9c <LL_ADC_GetMultimode>
 8005c62:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ffdf 	bl	8005c2c <LL_ADC_INJ_IsConversionOngoing>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e094      	b.n	8005da2 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d107      	bne.n	8005ca8 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	f043 0220 	orr.w	r2, r3, #32
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e07c      	b.n	8005da2 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADCEx_InjectedStart+0x62>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e075      	b.n	8005da2 <HAL_ADCEx_InjectedStart+0x14e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fde8 	bl	8005894 <ADC_Enable>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d164      	bne.n	8005d98 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	f023 0208 	bic.w	r2, r3, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60
 8005ce6:	e002      	b.n	8005cee <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_ADCEx_InjectedStart+0x15c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d002      	beq.n	8005d12 <HAL_ADCEx_InjectedStart+0xbe>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	e001      	b.n	8005d16 <HAL_ADCEx_InjectedStart+0xc2>
 8005d12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d002      	beq.n	8005d24 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2260      	movs	r2, #96	; 0x60
 8005d36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1a      	ldr	r2, [pc, #104]	; (8005db0 <HAL_ADCEx_InjectedStart+0x15c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d002      	beq.n	8005d50 <HAL_ADCEx_InjectedStart+0xfc>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	e001      	b.n	8005d54 <HAL_ADCEx_InjectedStart+0x100>
 8005d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d008      	beq.n	8005d6e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b06      	cmp	r3, #6
 8005d66:	d002      	beq.n	8005d6e <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b07      	cmp	r3, #7
 8005d6c:	d10d      	bne.n	8005d8a <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff feb0 	bl	8005ad8 <LL_ADC_INJ_GetTrigAuto>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d110      	bne.n	8005da0 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff ff3e 	bl	8005c04 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005d88:	e00a      	b.n	8005da0 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d96:	e003      	b.n	8005da0 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	50000300 	.word	0x50000300
 8005db0:	50000100 	.word	0x50000100

08005db4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f240 321b 	movw	r2, #795	; 0x31b
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_ADCEx_InjectedGetValue+0x32>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8005dce:	d21c      	bcs.n	8005e0a <HAL_ADCEx_InjectedGetValue+0x56>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f240 120f 	movw	r2, #271	; 0x10f
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d011      	beq.n	8005dfe <HAL_ADCEx_InjectedGetValue+0x4a>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f240 2215 	movw	r2, #533	; 0x215
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d006      	beq.n	8005df2 <HAL_ADCEx_InjectedGetValue+0x3e>
 8005de4:	e011      	b.n	8005e0a <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dee:	60fb      	str	r3, [r7, #12]
      break;
 8005df0:	e011      	b.n	8005e16 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	60fb      	str	r3, [r7, #12]
      break;
 8005dfc:	e00b      	b.n	8005e16 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e06:	60fb      	str	r3, [r7, #12]
      break;
 8005e08:	e005      	b.n	8005e16 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e12:	60fb      	str	r3, [r7, #12]
      break;
 8005e14:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b0b6      	sub	sp, #216	; 0xd8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d102      	bne.n	8005e4e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f000 bcb5 	b.w	80067b8 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d130      	bne.n	8005ec8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b09      	cmp	r3, #9
 8005e6c:	d179      	bne.n	8005f62 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d010      	beq.n	8005e98 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	0e9b      	lsrs	r3, r3, #26
 8005e7c:	025b      	lsls	r3, r3, #9
 8005e7e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005e8a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e96:	e007      	b.n	8005ea8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0e9b      	lsrs	r3, r3, #26
 8005e9e:	025b      	lsls	r3, r3, #9
 8005ea0:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eae:	4b84      	ldr	r3, [pc, #528]	; (80060c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ec4:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005ec6:	e04c      	b.n	8005f62 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11d      	bne.n	8005f0c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00d      	beq.n	8005f02 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005ef4:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f00:	e004      	b.n	8005f0c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	0e9b      	lsrs	r3, r3, #26
 8005f12:	f003 021f 	and.w	r2, r3, #31
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f52:	4b5b      	ldr	r3, [pc, #364]	; (80060c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fe60 	bl	8005c2c <LL_ADC_INJ_IsConversionOngoing>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d124      	bne.n	8005fbc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d112      	bne.n	8005fa2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f8c:	055a      	lsls	r2, r3, #21
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e00c      	b.n	8005fbc <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005fb2:	055a      	lsls	r2, r3, #21
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fe0c 	bl	8005bde <LL_ADC_REG_IsConversionOngoing>
 8005fc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fe2c 	bl	8005c2c <LL_ADC_INJ_IsConversionOngoing>
 8005fd4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 822e 	bne.w	800643e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 8229 	bne.w	800643e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d116      	bne.n	800602a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006002:	2b01      	cmp	r3, #1
 8006004:	d108      	bne.n	8006018 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006014:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006016:	e01f      	b.n	8006058 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006026:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006028:	e016      	b.n	8006058 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006030:	2b01      	cmp	r3, #1
 8006032:	d109      	bne.n	8006048 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	f043 0220 	orr.w	r2, r3, #32
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006046:	e007      	b.n	8006058 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006056:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800605e:	2b01      	cmp	r3, #1
 8006060:	d110      	bne.n	8006084 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	430b      	orrs	r3, r1
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0202 	orr.w	r2, r2, #2
 8006080:	611a      	str	r2, [r3, #16]
 8006082:	e007      	b.n	8006094 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0202 	bic.w	r2, r2, #2
 8006092:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609c:	d112      	bne.n	80060c4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2200      	movs	r2, #0
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7ff fd23 	bl	8005af4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fcfb 	bl	8005ab2 <LL_ADC_SetSamplingTimeCommonConfig>
 80060bc:	e011      	b.n	80060e2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80060be:	bf00      	nop
 80060c0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6819      	ldr	r1, [r3, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f7ff fd0f 	bl	8005af4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fce8 	bl	8005ab2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	08db      	lsrs	r3, r3, #3
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d022      	beq.n	800614a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6919      	ldr	r1, [r3, #16]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006114:	f7ff fc42 	bl	800599c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6919      	ldr	r1, [r3, #16]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	461a      	mov	r2, r3
 8006126:	f7ff fc8e 	bl	8005a46 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8006136:	2b01      	cmp	r3, #1
 8006138:	d102      	bne.n	8006140 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800613a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800613e:	e000      	b.n	8006142 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8006140:	2300      	movs	r3, #0
 8006142:	461a      	mov	r2, r3
 8006144:	f7ff fc9a 	bl	8005a7c <LL_ADC_SetOffsetSaturation>
 8006148:	e179      	b.n	800643e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fc47 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 8006156:	4603      	mov	r3, r0
 8006158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fc3c 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 800616c:	4603      	mov	r3, r0
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	e01e      	b.n	80061b4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fc31 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006188:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800618c:	fa93 f3a3 	rbit	r3, r3
 8006190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800619c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 80061a4:	2320      	movs	r3, #32
 80061a6:	e004      	b.n	80061b2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 80061a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061ac:	fab3 f383 	clz	r3, r3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	0e9b      	lsrs	r3, r3, #26
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	e018      	b.n	80061fe <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80061e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80061e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80061f0:	2320      	movs	r3, #32
 80061f2:	e004      	b.n	80061fe <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80061f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061f8:	fab3 f383 	clz	r3, r3
 80061fc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061fe:	429a      	cmp	r2, r3
 8006200:	d106      	bne.n	8006210 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fc00 	bl	8005a10 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2101      	movs	r1, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fbe4 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 800621c:	4603      	mov	r3, r0
 800621e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2101      	movs	r1, #1
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fbd9 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 8006232:	4603      	mov	r3, r0
 8006234:	0e9b      	lsrs	r3, r3, #26
 8006236:	f003 021f 	and.w	r2, r3, #31
 800623a:	e01e      	b.n	800627a <HAL_ADCEx_InjectedConfigChannel+0x456>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2101      	movs	r1, #1
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fbce 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 8006248:	4603      	mov	r3, r0
 800624a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800625a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800625e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800626a:	2320      	movs	r3, #32
 800626c:	e004      	b.n	8006278 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800626e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006272:	fab3 f383 	clz	r3, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	0e9b      	lsrs	r3, r3, #26
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	e018      	b.n	80062c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80062a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80062ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80062b6:	2320      	movs	r3, #32
 80062b8:	e004      	b.n	80062c4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80062ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062be:	fab3 f383 	clz	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d106      	bne.n	80062d6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2200      	movs	r2, #0
 80062ce:	2101      	movs	r1, #1
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fb9d 	bl	8005a10 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff fb81 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fb76 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 80062f8:	4603      	mov	r3, r0
 80062fa:	0e9b      	lsrs	r3, r3, #26
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	e01e      	b.n	8006340 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2102      	movs	r1, #2
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fb6b 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 800630e:	4603      	mov	r3, r0
 8006310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006318:	fa93 f3a3 	rbit	r3, r3
 800631c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8006330:	2320      	movs	r3, #32
 8006332:	e004      	b.n	800633e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8006334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006338:	fab3 f383 	clz	r3, r3
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	0e9b      	lsrs	r3, r3, #26
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	e014      	b.n	8006382 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006360:	fa93 f3a3 	rbit	r3, r3
 8006364:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800636c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8006374:	2320      	movs	r3, #32
 8006376:	e004      	b.n	8006382 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8006378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800637c:	fab3 f383 	clz	r3, r3
 8006380:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006382:	429a      	cmp	r2, r3
 8006384:	d106      	bne.n	8006394 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	2102      	movs	r1, #2
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fb3e 	bl	8005a10 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2103      	movs	r1, #3
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fb22 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2103      	movs	r1, #3
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fb17 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 80063b6:	4603      	mov	r3, r0
 80063b8:	0e9b      	lsrs	r3, r3, #26
 80063ba:	f003 021f 	and.w	r2, r3, #31
 80063be:	e017      	b.n	80063f0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2103      	movs	r1, #3
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fb0c 	bl	80059e4 <LL_ADC_GetOffsetChannel>
 80063cc:	4603      	mov	r3, r0
 80063ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d2:	fa93 f3a3 	rbit	r3, r3
 80063d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80063dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80063e2:	2320      	movs	r3, #32
 80063e4:	e003      	b.n	80063ee <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80063e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e8:	fab3 f383 	clz	r3, r3
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0e9b      	lsrs	r3, r3, #26
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	e011      	b.n	800642c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006410:	fa93 f3a3 	rbit	r3, r3
 8006414:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006418:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800641a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8006420:	2320      	movs	r3, #32
 8006422:	e003      	b.n	800642c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8006424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006426:	fab3 f383 	clz	r3, r3
 800642a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800642c:	429a      	cmp	r2, r3
 800642e:	d106      	bne.n	800643e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2200      	movs	r2, #0
 8006436:	2103      	movs	r1, #3
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fae9 	bl	8005a10 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fbb8 	bl	8005bb8 <LL_ADC_IsEnabled>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 8140 	bne.w	80066d0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6819      	ldr	r1, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	461a      	mov	r2, r3
 800645e:	f7ff fb75 	bl	8005b4c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	4a8f      	ldr	r2, [pc, #572]	; (80066a4 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8006468:	4293      	cmp	r3, r2
 800646a:	f040 8131 	bne.w	80066d0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	0e9b      	lsrs	r3, r3, #26
 8006484:	3301      	adds	r3, #1
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2b09      	cmp	r3, #9
 800648c:	bf94      	ite	ls
 800648e:	2301      	movls	r3, #1
 8006490:	2300      	movhi	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	e019      	b.n	80064ca <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80064a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80064a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80064ae:	2320      	movs	r3, #32
 80064b0:	e003      	b.n	80064ba <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80064b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2b09      	cmp	r3, #9
 80064c2:	bf94      	ite	ls
 80064c4:	2301      	movls	r3, #1
 80064c6:	2300      	movhi	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d079      	beq.n	80065c2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d107      	bne.n	80064ea <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	0e9b      	lsrs	r3, r3, #26
 80064e0:	3301      	adds	r3, #1
 80064e2:	069b      	lsls	r3, r3, #26
 80064e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064e8:	e015      	b.n	8006516 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f2:	fa93 f3a3 	rbit	r3, r3
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80064f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80064fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8006502:	2320      	movs	r3, #32
 8006504:	e003      	b.n	800650e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8006506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006508:	fab3 f383 	clz	r3, r3
 800650c:	b2db      	uxtb	r3, r3
 800650e:	3301      	adds	r3, #1
 8006510:	069b      	lsls	r3, r3, #26
 8006512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	0e9b      	lsrs	r3, r3, #26
 8006528:	3301      	adds	r3, #1
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	e017      	b.n	8006566 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800653e:	fa93 f3a3 	rbit	r3, r3
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006546:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800654e:	2320      	movs	r3, #32
 8006550:	e003      	b.n	800655a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8006552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006554:	fab3 f383 	clz	r3, r3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	3301      	adds	r3, #1
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2101      	movs	r1, #1
 8006562:	fa01 f303 	lsl.w	r3, r1, r3
 8006566:	ea42 0103 	orr.w	r1, r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	0e9b      	lsrs	r3, r3, #26
 800657c:	3301      	adds	r3, #1
 800657e:	f003 021f 	and.w	r2, r3, #31
 8006582:	4613      	mov	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4413      	add	r3, r2
 8006588:	051b      	lsls	r3, r3, #20
 800658a:	e018      	b.n	80065be <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	fa93 f3a3 	rbit	r3, r3
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80065a4:	2320      	movs	r3, #32
 80065a6:	e003      	b.n	80065b0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	fab3 f383 	clz	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	3301      	adds	r3, #1
 80065b2:	f003 021f 	and.w	r2, r3, #31
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065be:	430b      	orrs	r3, r1
 80065c0:	e081      	b.n	80066c6 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	0e9b      	lsrs	r3, r3, #26
 80065d4:	3301      	adds	r3, #1
 80065d6:	069b      	lsls	r3, r3, #26
 80065d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065dc:	e015      	b.n	800660a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	fa93 f3a3 	rbit	r3, r3
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80065f6:	2320      	movs	r3, #32
 80065f8:	e003      	b.n	8006602 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	fab3 f383 	clz	r3, r3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	3301      	adds	r3, #1
 8006604:	069b      	lsls	r3, r3, #26
 8006606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	0e9b      	lsrs	r3, r3, #26
 800661c:	3301      	adds	r3, #1
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2101      	movs	r1, #1
 8006624:	fa01 f303 	lsl.w	r3, r1, r3
 8006628:	e017      	b.n	800665a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	fa93 f3a3 	rbit	r3, r3
 8006636:	61bb      	str	r3, [r7, #24]
  return result;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8006642:	2320      	movs	r3, #32
 8006644:	e003      	b.n	800664e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	fab3 f383 	clz	r3, r3
 800664c:	b2db      	uxtb	r3, r3
 800664e:	3301      	adds	r3, #1
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	2101      	movs	r1, #1
 8006656:	fa01 f303 	lsl.w	r3, r1, r3
 800665a:	ea42 0103 	orr.w	r1, r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10d      	bne.n	8006686 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	0e9b      	lsrs	r3, r3, #26
 8006670:	3301      	adds	r3, #1
 8006672:	f003 021f 	and.w	r2, r3, #31
 8006676:	4613      	mov	r3, r2
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	4413      	add	r3, r2
 800667c:	3b1e      	subs	r3, #30
 800667e:	051b      	lsls	r3, r3, #20
 8006680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006684:	e01e      	b.n	80066c4 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	fa93 f3a3 	rbit	r3, r3
 8006692:	60fb      	str	r3, [r7, #12]
  return result;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800669e:	2320      	movs	r3, #32
 80066a0:	e006      	b.n	80066b0 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80066a2:	bf00      	nop
 80066a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	fab3 f383 	clz	r3, r3
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	3301      	adds	r3, #1
 80066b2:	f003 021f 	and.w	r2, r3, #31
 80066b6:	4613      	mov	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	4413      	add	r3, r2
 80066bc:	3b1e      	subs	r3, #30
 80066be:	051b      	lsls	r3, r3, #20
 80066c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066c4:	430b      	orrs	r3, r1
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	6892      	ldr	r2, [r2, #8]
 80066ca:	4619      	mov	r1, r3
 80066cc:	f7ff fa12 	bl	8005af4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b3a      	ldr	r3, [pc, #232]	; (80067c0 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d067      	beq.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066dc:	4839      	ldr	r0, [pc, #228]	; (80067c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80066de:	f7ff f94e 	bl	800597e <LL_ADC_GetCommonPathInternalCh>
 80066e2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a37      	ldr	r2, [pc, #220]	; (80067c8 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a35      	ldr	r2, [pc, #212]	; (80067cc <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d127      	bne.n	800674a <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80066fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d121      	bne.n	800674a <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800670e:	d14d      	bne.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006718:	4619      	mov	r1, r3
 800671a:	482a      	ldr	r0, [pc, #168]	; (80067c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800671c:	f7ff f91c 	bl	8005958 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006720:	4b2b      	ldr	r3, [pc, #172]	; (80067d0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	099b      	lsrs	r3, r3, #6
 8006726:	4a2b      	ldr	r2, [pc, #172]	; (80067d4 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	099a      	lsrs	r2, r3, #6
 800672e:	4613      	mov	r3, r2
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	3318      	adds	r3, #24
 8006738:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800673a:	e002      	b.n	8006742 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	3b01      	subs	r3, #1
 8006740:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f9      	bne.n	800673c <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006748:	e030      	b.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d113      	bne.n	800677c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10d      	bne.n	800677c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1d      	ldr	r2, [pc, #116]	; (80067dc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d020      	beq.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800676a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800676e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006772:	4619      	mov	r1, r3
 8006774:	4813      	ldr	r0, [pc, #76]	; (80067c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006776:	f7ff f8ef 	bl	8005958 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800677a:	e017      	b.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d112      	bne.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800678a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10c      	bne.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a11      	ldr	r2, [pc, #68]	; (80067dc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800679c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067a4:	4619      	mov	r1, r3
 80067a6:	4807      	ldr	r0, [pc, #28]	; (80067c4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80067a8:	f7ff f8d6 	bl	8005958 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80067b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	37d8      	adds	r7, #216	; 0xd8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	80080000 	.word	0x80080000
 80067c4:	50000300 	.word	0x50000300
 80067c8:	c3210000 	.word	0xc3210000
 80067cc:	90c00010 	.word	0x90c00010
 80067d0:	20000000 	.word	0x20000000
 80067d4:	053e2d63 	.word	0x053e2d63
 80067d8:	c7520000 	.word	0xc7520000
 80067dc:	50000100 	.word	0x50000100
 80067e0:	cb840000 	.word	0xcb840000

080067e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b0a1      	sub	sp, #132	; 0x84
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80067fe:	2302      	movs	r3, #2
 8006800:	e08b      	b.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800680a:	2300      	movs	r3, #0
 800680c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800680e:	2300      	movs	r3, #0
 8006810:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800681a:	d102      	bne.n	8006822 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800681c:	4b41      	ldr	r3, [pc, #260]	; (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	e001      	b.n	8006826 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	f043 0220 	orr.w	r2, r3, #32
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e06a      	b.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f9c9 	bl	8005bde <LL_ADC_REG_IsConversionOngoing>
 800684c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f9c3 	bl	8005bde <LL_ADC_REG_IsConversionOngoing>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d14c      	bne.n	80068f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800685e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006860:	2b00      	cmp	r3, #0
 8006862:	d149      	bne.n	80068f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006866:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d028      	beq.n	80068c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006882:	035b      	lsls	r3, r3, #13
 8006884:	430b      	orrs	r3, r1
 8006886:	431a      	orrs	r2, r3
 8006888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800688a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800688c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006890:	f7ff f992 	bl	8005bb8 <LL_ADC_IsEnabled>
 8006894:	4604      	mov	r4, r0
 8006896:	4823      	ldr	r0, [pc, #140]	; (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006898:	f7ff f98e 	bl	8005bb8 <LL_ADC_IsEnabled>
 800689c:	4603      	mov	r3, r0
 800689e:	4323      	orrs	r3, r4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d133      	bne.n	800690c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80068a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068ac:	f023 030f 	bic.w	r3, r3, #15
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	6811      	ldr	r1, [r2, #0]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	6892      	ldr	r2, [r2, #8]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	431a      	orrs	r2, r3
 80068bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068c0:	e024      	b.n	800690c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068d2:	f7ff f971 	bl	8005bb8 <LL_ADC_IsEnabled>
 80068d6:	4604      	mov	r4, r0
 80068d8:	4812      	ldr	r0, [pc, #72]	; (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80068da:	f7ff f96d 	bl	8005bb8 <LL_ADC_IsEnabled>
 80068de:	4603      	mov	r3, r0
 80068e0:	4323      	orrs	r3, r4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d112      	bne.n	800690c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068ee:	f023 030f 	bic.w	r3, r3, #15
 80068f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80068f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068f6:	e009      	b.n	800690c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800690a:	e000      	b.n	800690e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800690c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800691a:	4618      	mov	r0, r3
 800691c:	3784      	adds	r7, #132	; 0x84
 800691e:	46bd      	mov	sp, r7
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	bf00      	nop
 8006924:	50000100 	.word	0x50000100
 8006928:	50000300 	.word	0x50000300

0800692c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e023      	b.n	8006986 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fe f8ee 	bl	8004b34 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d11d      	bne.n	80069e6 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b14      	ldr	r3, [pc, #80]	; (8006a04 <HAL_CORDIC_Configure+0x74>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	6811      	ldr	r1, [r2, #0]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	6992      	ldr	r2, [r2, #24]
 80069bc:	4311      	orrs	r1, r2
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	6852      	ldr	r2, [r2, #4]
 80069c2:	4311      	orrs	r1, r2
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	6912      	ldr	r2, [r2, #16]
 80069c8:	4311      	orrs	r1, r2
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	6952      	ldr	r2, [r2, #20]
 80069ce:	4311      	orrs	r1, r2
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	6892      	ldr	r2, [r2, #8]
 80069d4:	4311      	orrs	r1, r2
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	68d2      	ldr	r2, [r2, #12]
 80069da:	4311      	orrs	r1, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	e007      	b.n	80069f6 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f043 0202 	orr.w	r2, r3, #2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	ff87f800 	.word	0xff87f800

08006a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <__NVIC_SetPriorityGrouping+0x44>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a24:	4013      	ands	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a3a:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <__NVIC_SetPriorityGrouping+0x44>)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	60d3      	str	r3, [r2, #12]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	e000ed00 	.word	0xe000ed00

08006a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <__NVIC_GetPriorityGrouping+0x18>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f003 0307 	and.w	r3, r3, #7
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	e000ed00 	.word	0xe000ed00

08006a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	db0b      	blt.n	8006a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	f003 021f 	and.w	r2, r3, #31
 8006a84:	4907      	ldr	r1, [pc, #28]	; (8006aa4 <__NVIC_EnableIRQ+0x38>)
 8006a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	e000e100 	.word	0xe000e100

08006aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db0a      	blt.n	8006ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	490c      	ldr	r1, [pc, #48]	; (8006af4 <__NVIC_SetPriority+0x4c>)
 8006ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	440b      	add	r3, r1
 8006acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ad0:	e00a      	b.n	8006ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4908      	ldr	r1, [pc, #32]	; (8006af8 <__NVIC_SetPriority+0x50>)
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	0112      	lsls	r2, r2, #4
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	761a      	strb	r2, [r3, #24]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	e000e100 	.word	0xe000e100
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b089      	sub	sp, #36	; 0x24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f1c3 0307 	rsb	r3, r3, #7
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf28      	it	cs
 8006b1a:	2304      	movcs	r3, #4
 8006b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d902      	bls.n	8006b2c <NVIC_EncodePriority+0x30>
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	3b03      	subs	r3, #3
 8006b2a:	e000      	b.n	8006b2e <NVIC_EncodePriority+0x32>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	43da      	mvns	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	401a      	ands	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b44:	f04f 31ff 	mov.w	r1, #4294967295
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	43d9      	mvns	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b54:	4313      	orrs	r3, r2
         );
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3724      	adds	r7, #36	; 0x24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b74:	d301      	bcc.n	8006b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00f      	b.n	8006b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <SysTick_Config+0x40>)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b82:	210f      	movs	r1, #15
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	f7ff ff8e 	bl	8006aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <SysTick_Config+0x40>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b92:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <SysTick_Config+0x40>)
 8006b94:	2207      	movs	r2, #7
 8006b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000e010 	.word	0xe000e010

08006ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ff29 	bl	8006a08 <__NVIC_SetPriorityGrouping>
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b086      	sub	sp, #24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006bcc:	f7ff ff40 	bl	8006a50 <__NVIC_GetPriorityGrouping>
 8006bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f7ff ff90 	bl	8006afc <NVIC_EncodePriority>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ff5f 	bl	8006aa8 <__NVIC_SetPriority>
}
 8006bea:	bf00      	nop
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff ff33 	bl	8006a6c <__NVIC_EnableIRQ>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff ffa4 	bl	8006b64 <SysTick_Config>
 8006c1c:	4603      	mov	r3, r0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d00d      	beq.n	8006c5a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2204      	movs	r2, #4
 8006c42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	e047      	b.n	8006cea <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 020e 	bic.w	r2, r2, #14
 8006c68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	f003 021f 	and.w	r2, r3, #31
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	2101      	movs	r1, #1
 8006c98:	fa01 f202 	lsl.w	r2, r1, r2
 8006c9c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ca6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006cc8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
    }
  }
  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e147      	b.n	8006f96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fd ff2a 	bl	8004b74 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0210 	bic.w	r2, r2, #16
 8006d2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d30:	f7fe fb4a 	bl	80053c8 <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006d36:	e012      	b.n	8006d5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006d38:	f7fe fb46 	bl	80053c8 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b0a      	cmp	r3, #10
 8006d44:	d90b      	bls.n	8006d5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	f043 0201 	orr.w	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2203      	movs	r2, #3
 8006d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e11b      	b.n	8006f96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d0e5      	beq.n	8006d38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d7c:	f7fe fb24 	bl	80053c8 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006d82:	e012      	b.n	8006daa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006d84:	f7fe fb20 	bl	80053c8 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b0a      	cmp	r3, #10
 8006d90:	d90b      	bls.n	8006daa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2203      	movs	r2, #3
 8006da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e0f5      	b.n	8006f96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0e5      	beq.n	8006d84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0202 	orr.w	r2, r2, #2
 8006dc6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a74      	ldr	r2, [pc, #464]	; (8006fa0 <HAL_FDCAN_Init+0x2ac>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d103      	bne.n	8006dda <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006dd2:	4a74      	ldr	r2, [pc, #464]	; (8006fa4 <HAL_FDCAN_Init+0x2b0>)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7c1b      	ldrb	r3, [r3, #16]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d108      	bne.n	8006df4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df0:	619a      	str	r2, [r3, #24]
 8006df2:	e007      	b.n	8006e04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7c5b      	ldrb	r3, [r3, #17]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d108      	bne.n	8006e1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e1a:	619a      	str	r2, [r3, #24]
 8006e1c:	e007      	b.n	8006e2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7c9b      	ldrb	r3, [r3, #18]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d108      	bne.n	8006e48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e44:	619a      	str	r2, [r3, #24]
 8006e46:	e007      	b.n	8006e58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699a      	ldr	r2, [r3, #24]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006e7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0210 	bic.w	r2, r2, #16
 8006e8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d108      	bne.n	8006ea8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0204 	orr.w	r2, r2, #4
 8006ea4:	619a      	str	r2, [r3, #24]
 8006ea6:	e02c      	b.n	8006f02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d028      	beq.n	8006f02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d01c      	beq.n	8006ef2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ec6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0210 	orr.w	r2, r2, #16
 8006ed6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d110      	bne.n	8006f02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0220 	orr.w	r2, r2, #32
 8006eee:	619a      	str	r2, [r3, #24]
 8006ef0:	e007      	b.n	8006f02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0220 	orr.w	r2, r2, #32
 8006f00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f36:	d115      	bne.n	8006f64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	3b01      	subs	r3, #1
 8006f44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fc3c 	bl	80077f8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40006400 	.word	0x40006400
 8006fa4:	40006500 	.word	0x40006500

08006fa8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fb8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d002      	beq.n	8006fc6 <HAL_FDCAN_ConfigFilter+0x1e>
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d13d      	bne.n	8007042 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d119      	bne.n	8007002 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006fda:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006fe2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e01d      	b.n	800703e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	075a      	lsls	r2, r3, #29
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	079a      	lsls	r2, r3, #30
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3304      	adds	r3, #4
 8007036:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e006      	b.n	8007050 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007046:	f043 0202 	orr.w	r2, r3, #2
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d110      	bne.n	8007092 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	e006      	b.n	80070a0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007096:	f043 0204 	orr.w	r2, r3, #4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
  }
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d12c      	bne.n	800711e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80070cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e023      	b.n	800712c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fbd2 	bl	80078a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2101      	movs	r1, #1
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	fa01 f202 	lsl.w	r2, r1, r2
 800710c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007110:	2201      	movs	r2, #1
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	409a      	lsls	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	e006      	b.n	800712c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007122:	f043 0208 	orr.w	r2, r3, #8
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
  }
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007134:	b480      	push	{r7}
 8007136:	b08b      	sub	sp, #44	; 0x2c
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007148:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800714a:	7efb      	ldrb	r3, [r7, #27]
 800714c:	2b02      	cmp	r3, #2
 800714e:	f040 80bc 	bne.w	80072ca <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d121      	bne.n	800719c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e0af      	b.n	80072d8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	0a1b      	lsrs	r3, r3, #8
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	4613      	mov	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4413      	add	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	440b      	add	r3, r1
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
 800719a:	e020      	b.n	80071de <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d107      	bne.n	80071bc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e08d      	b.n	80072d8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071c4:	0a1b      	lsrs	r3, r3, #8
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	4613      	mov	r3, r2
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	4413      	add	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	440b      	add	r3, r1
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d107      	bne.n	8007202 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	0c9b      	lsrs	r3, r3, #18
 80071f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e005      	b.n	800720e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	3304      	adds	r3, #4
 800722a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	b29a      	uxth	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	0e1b      	lsrs	r3, r3, #24
 8007260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	0fda      	lsrs	r2, r3, #31
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	3304      	adds	r3, #4
 8007276:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800727c:	2300      	movs	r3, #0
 800727e:	623b      	str	r3, [r7, #32]
 8007280:	e00a      	b.n	8007298 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	441a      	add	r2, r3
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	440b      	add	r3, r1
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	3301      	adds	r3, #1
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	0c1b      	lsrs	r3, r3, #16
 800729e:	4a11      	ldr	r2, [pc, #68]	; (80072e4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80072a0:	5cd3      	ldrb	r3, [r2, r3]
 80072a2:	461a      	mov	r2, r3
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d3eb      	bcc.n	8007282 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d105      	bne.n	80072bc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80072ba:	e004      	b.n	80072c6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e006      	b.n	80072d8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	f043 0208 	orr.w	r2, r3, #8
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
  }
}
 80072d8:	4618      	mov	r0, r3
 80072da:	372c      	adds	r7, #44	; 0x2c
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	080100dc 	.word	0x080100dc

080072e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072fa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d003      	beq.n	800730a <HAL_FDCAN_ActivateNotification+0x22>
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b02      	cmp	r3, #2
 8007306:	f040 80c8 	bne.w	800749a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007310:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d03b      	beq.n	800739e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d031      	beq.n	800739e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	d027      	beq.n	800739e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01d      	beq.n	800739e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	2b00      	cmp	r3, #0
 8007374:	d013      	beq.n	800739e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	d107      	bne.n	80073ae <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d13b      	bne.n	800743a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d131      	bne.n	800743a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d127      	bne.n	800743a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d11d      	bne.n	800743a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	2b00      	cmp	r3, #0
 8007410:	d113      	bne.n	800743a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00c      	beq.n	800744a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0202 	orr.w	r2, r2, #2
 8007448:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	430a      	orrs	r2, r1
 8007464:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	430a      	orrs	r2, r1
 8007482:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	430a      	orrs	r2, r1
 8007494:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	e006      	b.n	80074a8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749e:	f043 0202 	orr.w	r2, r3, #2
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d0:	4013      	ands	r3, r2
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	6a3a      	ldr	r2, [r7, #32]
 80074e8:	4013      	ands	r3, r2
 80074ea:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	4013      	ands	r3, r2
 8007502:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800750e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007522:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007526:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4013      	ands	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00d      	beq.n	800755e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2240      	movs	r2, #64	; 0x40
 8007556:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f92e 	bl	80077ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01b      	beq.n	80075a4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d014      	beq.n	80075a4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007582:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4013      	ands	r3, r2
 8007590:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800759a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800759c:	6939      	ldr	r1, [r7, #16]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f8ec 	bl	800777c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80075b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8b6 	bl	8007726 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80075c8:	6a39      	ldr	r1, [r7, #32]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f9 fce6 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80075de:	69f9      	ldr	r1, [r7, #28]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8ab 	bl	800773c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800760a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8a0 	bl	8007752 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01a      	beq.n	8007656 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d013      	beq.n	8007656 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007636:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4013      	ands	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f888 	bl	8007766 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00e      	beq.n	8007682 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800767a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f888 	bl	8007792 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00e      	beq.n	80076ae <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80076a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f87c 	bl	80077a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d011      	beq.n	80076e0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80076d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80076ee:	6979      	ldr	r1, [r7, #20]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f876 	bl	80077e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d009      	beq.n	8007710 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f858 	bl	80077ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800771e:	bf00      	nop
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007800:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007802:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007812:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	041a      	lsls	r2, r3, #16
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	061a      	lsls	r2, r3, #24
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e005      	b.n	8007886 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3304      	adds	r3, #4
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	429a      	cmp	r2, r3
 8007890:	d3f3      	bcc.n	800787a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	4000a400 	.word	0x4000a400

080078a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b089      	sub	sp, #36	; 0x24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80078c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80078ca:	4313      	orrs	r3, r2
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	e00a      	b.n	80078e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80078d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80078de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80078e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80078f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80078fc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	4413      	add	r3, r2
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	440b      	add	r3, r1
 8007916:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3304      	adds	r3, #4
 8007922:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	3304      	adds	r3, #4
 800792e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e020      	b.n	8007978 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3303      	adds	r3, #3
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	3302      	adds	r3, #2
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	440b      	add	r3, r1
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800794e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3301      	adds	r3, #1
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	440b      	add	r3, r1
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800795c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	440a      	add	r2, r1
 8007964:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007966:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	3304      	adds	r3, #4
 8007970:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	3304      	adds	r3, #4
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	4a06      	ldr	r2, [pc, #24]	; (8007998 <FDCAN_CopyMessageToRAM+0xf4>)
 8007980:	5cd3      	ldrb	r3, [r2, r3]
 8007982:	461a      	mov	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4293      	cmp	r3, r2
 8007988:	d3d5      	bcc.n	8007936 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	3724      	adds	r7, #36	; 0x24
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	080100dc 	.word	0x080100dc

0800799c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80079ae:	4b24      	ldr	r3, [pc, #144]	; (8007a40 <HAL_FLASH_Program+0xa4>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_FLASH_Program+0x1e>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e03e      	b.n	8007a38 <HAL_FLASH_Program+0x9c>
 80079ba:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <HAL_FLASH_Program+0xa4>)
 80079bc:	2201      	movs	r2, #1
 80079be:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079c4:	f000 f888 	bl	8007ad8 <FLASH_WaitForLastOperation>
 80079c8:	4603      	mov	r3, r0
 80079ca:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d12e      	bne.n	8007a30 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <HAL_FLASH_Program+0xa4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80079de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e2:	68b8      	ldr	r0, [r7, #8]
 80079e4:	f000 f8cc 	bl	8007b80 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80079e8:	2301      	movs	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	e010      	b.n	8007a10 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d002      	beq.n	80079fa <HAL_FLASH_Program+0x5e>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d10a      	bne.n	8007a10 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	68b8      	ldr	r0, [r7, #8]
 8007a00:	f000 f8e4 	bl	8007bcc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d102      	bne.n	8007a10 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007a0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a0e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a14:	f000 f860 	bl	8007ad8 <FLASH_WaitForLastOperation>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d006      	beq.n	8007a30 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007a22:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <HAL_FLASH_Program+0xa8>)
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	4906      	ldr	r1, [pc, #24]	; (8007a44 <HAL_FLASH_Program+0xa8>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <HAL_FLASH_Program+0xa4>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	2000000c 	.word	0x2000000c
 8007a44:	40022000 	.word	0x40022000

08007a48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007a52:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <HAL_FLASH_Unlock+0x38>)
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da0b      	bge.n	8007a72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_FLASH_Unlock+0x38>)
 8007a5c:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <HAL_FLASH_Unlock+0x3c>)
 8007a5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <HAL_FLASH_Unlock+0x38>)
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <HAL_FLASH_Unlock+0x40>)
 8007a64:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007a66:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <HAL_FLASH_Unlock+0x38>)
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da01      	bge.n	8007a72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007a72:	79fb      	ldrb	r3, [r7, #7]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	40022000 	.word	0x40022000
 8007a84:	45670123 	.word	0x45670123
 8007a88:	cdef89ab 	.word	0xcdef89ab

08007a8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007a96:	4b09      	ldr	r3, [pc, #36]	; (8007abc <HAL_FLASH_Lock+0x30>)
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	4a08      	ldr	r2, [pc, #32]	; (8007abc <HAL_FLASH_Lock+0x30>)
 8007a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aa0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007aa2:	4b06      	ldr	r3, [pc, #24]	; (8007abc <HAL_FLASH_Lock+0x30>)
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da01      	bge.n	8007aae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40022000 	.word	0x40022000

08007ac0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007ac4:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <HAL_FLASH_GetError+0x14>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	2000000c 	.word	0x2000000c

08007ad8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007ae0:	f7fd fc72 	bl	80053c8 <HAL_GetTick>
 8007ae4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007ae6:	e009      	b.n	8007afc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007ae8:	f7fd fc6e 	bl	80053c8 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d201      	bcs.n	8007afc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e038      	b.n	8007b6e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007afc:	4b1e      	ldr	r3, [pc, #120]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d0ee      	beq.n	8007ae8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007b12:	4013      	ands	r3, r2
 8007b14:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d01e      	beq.n	8007b5a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007b1c:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <FLASH_WaitForLastOperation+0xa4>)
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <FLASH_WaitForLastOperation+0xa4>)
 8007b26:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <FLASH_WaitForLastOperation+0x6a>
 8007b32:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b3c:	490e      	ldr	r1, [pc, #56]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	618b      	str	r3, [r1, #24]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d004      	beq.n	8007b56 <FLASH_WaitForLastOperation+0x7e>
 8007b4c:	4a0a      	ldr	r2, [pc, #40]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b54:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e009      	b.n	8007b6e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d102      	bne.n	8007b6c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007b66:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <FLASH_WaitForLastOperation+0xa0>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40022000 	.word	0x40022000
 8007b7c:	2000000c 	.word	0x2000000c

08007b80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <FLASH_Program_DoubleWord+0x48>)
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	4a0d      	ldr	r2, [pc, #52]	; (8007bc8 <FLASH_Program_DoubleWord+0x48>)
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007b9e:	f3bf 8f6f 	isb	sy
}
 8007ba2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	000a      	movs	r2, r1
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	68f9      	ldr	r1, [r7, #12]
 8007bb6:	3104      	adds	r1, #4
 8007bb8:	4613      	mov	r3, r2
 8007bba:	600b      	str	r3, [r1, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	40022000 	.word	0x40022000

08007bcc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b089      	sub	sp, #36	; 0x24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007bd6:	2340      	movs	r3, #64	; 0x40
 8007bd8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <FLASH_Program_Fast+0x68>)
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <FLASH_Program_Fast+0x68>)
 8007be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bee:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bf4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007bf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bf8:	b672      	cpsid	i
}
 8007bfa:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3304      	adds	r3, #4
 8007c08:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	617b      	str	r3, [r7, #20]
    row_index--;
 8007c10:	7ffb      	ldrb	r3, [r7, #31]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007c16:	7ffb      	ldrb	r3, [r7, #31]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ef      	bne.n	8007bfc <FLASH_Program_Fast+0x30>
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f383 8810 	msr	PRIMASK, r3
}
 8007c26:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007c28:	bf00      	nop
 8007c2a:	3724      	adds	r7, #36	; 0x24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	40022000 	.word	0x40022000

08007c38 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007c42:	4b47      	ldr	r3, [pc, #284]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_FLASHEx_Erase+0x16>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e083      	b.n	8007d56 <HAL_FLASHEx_Erase+0x11e>
 8007c4e:	4b44      	ldr	r3, [pc, #272]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c58:	f7ff ff3e 	bl	8007ad8 <FLASH_WaitForLastOperation>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d173      	bne.n	8007d4e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007c6c:	4b3d      	ldr	r3, [pc, #244]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d013      	beq.n	8007ca0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007c78:	4b3a      	ldr	r3, [pc, #232]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007c84:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a36      	ldr	r2, [pc, #216]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c8e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007c90:	4b33      	ldr	r3, [pc, #204]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007c92:	2203      	movs	r2, #3
 8007c94:	771a      	strb	r2, [r3, #28]
 8007c96:	e016      	b.n	8007cc6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	771a      	strb	r2, [r3, #28]
 8007c9e:	e012      	b.n	8007cc6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007ca0:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007cac:	4b2d      	ldr	r3, [pc, #180]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cb6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007cb8:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007cba:	2202      	movs	r2, #2
 8007cbc:	771a      	strb	r2, [r3, #28]
 8007cbe:	e002      	b.n	8007cc6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d111      	bne.n	8007cf2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f848 	bl	8007d68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cdc:	f7ff fefc 	bl	8007ad8 <FLASH_WaitForLastOperation>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007ce4:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007cea:	f023 0304 	bic.w	r3, r3, #4
 8007cee:	6153      	str	r3, [r2, #20]
 8007cf0:	e02b      	b.n	8007d4a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	60bb      	str	r3, [r7, #8]
 8007d00:	e01b      	b.n	8007d3a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4619      	mov	r1, r3
 8007d08:	68b8      	ldr	r0, [r7, #8]
 8007d0a:	f000 f84b 	bl	8007da4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d12:	f7ff fee1 	bl	8007ad8 <FLASH_WaitForLastOperation>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <HAL_FLASHEx_Erase+0x12c>)
 8007d20:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007d24:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	601a      	str	r2, [r3, #0]
          break;
 8007d32:	e00a      	b.n	8007d4a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d3db      	bcc.n	8007d02 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007d4a:	f000 f84f 	bl	8007dec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007d4e:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <HAL_FLASHEx_Erase+0x128>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	701a      	strb	r2, [r3, #0]

  return status;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000000c 	.word	0x2000000c
 8007d64:	40022000 	.word	0x40022000

08007d68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <FLASH_MassErase+0x38>)
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <FLASH_MassErase+0x38>)
 8007d80:	f043 0304 	orr.w	r3, r3, #4
 8007d84:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <FLASH_MassErase+0x38>)
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	4a05      	ldr	r2, [pc, #20]	; (8007da0 <FLASH_MassErase+0x38>)
 8007d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d90:	6153      	str	r3, [r2, #20]
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40022000 	.word	0x40022000

08007da4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007dae:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <FLASH_PageErase+0x44>)
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007dbe:	490a      	ldr	r1, [pc, #40]	; (8007de8 <FLASH_PageErase+0x44>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007dc4:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <FLASH_PageErase+0x44>)
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	4a07      	ldr	r2, [pc, #28]	; (8007de8 <FLASH_PageErase+0x44>)
 8007dca:	f043 0302 	orr.w	r3, r3, #2
 8007dce:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <FLASH_PageErase+0x44>)
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	4a04      	ldr	r2, [pc, #16]	; (8007de8 <FLASH_PageErase+0x44>)
 8007dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dda:	6153      	str	r3, [r2, #20]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40022000 	.word	0x40022000

08007dec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007df2:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <FLASH_FlushCaches+0x8c>)
 8007df4:	7f1b      	ldrb	r3, [r3, #28]
 8007df6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d002      	beq.n	8007e04 <FLASH_FlushCaches+0x18>
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d117      	bne.n	8007e34 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e04:	4b1d      	ldr	r3, [pc, #116]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1c      	ldr	r2, [pc, #112]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e10:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a19      	ldr	r2, [pc, #100]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	4b17      	ldr	r3, [pc, #92]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a16      	ldr	r2, [pc, #88]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e28:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d002      	beq.n	8007e40 <FLASH_FlushCaches+0x54>
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d111      	bne.n	8007e64 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007e40:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a0a      	ldr	r2, [pc, #40]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e58:	4b08      	ldr	r3, [pc, #32]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a07      	ldr	r2, [pc, #28]	; (8007e7c <FLASH_FlushCaches+0x90>)
 8007e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007e64:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <FLASH_FlushCaches+0x8c>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	771a      	strb	r2, [r3, #28]
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	2000000c 	.word	0x2000000c
 8007e7c:	40022000 	.word	0x40022000

08007e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e8e:	e15a      	b.n	8008146 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	2101      	movs	r1, #1
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 814c 	beq.w	8008140 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d005      	beq.n	8007ec0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d130      	bne.n	8007f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	2203      	movs	r2, #3
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	43db      	mvns	r3, r3
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4013      	ands	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f003 0201 	and.w	r2, r3, #1
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d017      	beq.n	8007f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	2203      	movs	r2, #3
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4013      	ands	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d123      	bne.n	8007fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	08da      	lsrs	r2, r3, #3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3208      	adds	r2, #8
 8007f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	220f      	movs	r2, #15
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43db      	mvns	r3, r3
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	691a      	ldr	r2, [r3, #16]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	08da      	lsrs	r2, r3, #3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3208      	adds	r2, #8
 8007fac:	6939      	ldr	r1, [r7, #16]
 8007fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc2:	43db      	mvns	r3, r3
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f003 0203 	and.w	r2, r3, #3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 80a6 	beq.w	8008140 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ff4:	4b5b      	ldr	r3, [pc, #364]	; (8008164 <HAL_GPIO_Init+0x2e4>)
 8007ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff8:	4a5a      	ldr	r2, [pc, #360]	; (8008164 <HAL_GPIO_Init+0x2e4>)
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8008000:	4b58      	ldr	r3, [pc, #352]	; (8008164 <HAL_GPIO_Init+0x2e4>)
 8008002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800800c:	4a56      	ldr	r2, [pc, #344]	; (8008168 <HAL_GPIO_Init+0x2e8>)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	089b      	lsrs	r3, r3, #2
 8008012:	3302      	adds	r3, #2
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	220f      	movs	r2, #15
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	43db      	mvns	r3, r3
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4013      	ands	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008036:	d01f      	beq.n	8008078 <HAL_GPIO_Init+0x1f8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a4c      	ldr	r2, [pc, #304]	; (800816c <HAL_GPIO_Init+0x2ec>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d019      	beq.n	8008074 <HAL_GPIO_Init+0x1f4>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a4b      	ldr	r2, [pc, #300]	; (8008170 <HAL_GPIO_Init+0x2f0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <HAL_GPIO_Init+0x1f0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a4a      	ldr	r2, [pc, #296]	; (8008174 <HAL_GPIO_Init+0x2f4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00d      	beq.n	800806c <HAL_GPIO_Init+0x1ec>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a49      	ldr	r2, [pc, #292]	; (8008178 <HAL_GPIO_Init+0x2f8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <HAL_GPIO_Init+0x1e8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a48      	ldr	r2, [pc, #288]	; (800817c <HAL_GPIO_Init+0x2fc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d101      	bne.n	8008064 <HAL_GPIO_Init+0x1e4>
 8008060:	2305      	movs	r3, #5
 8008062:	e00a      	b.n	800807a <HAL_GPIO_Init+0x1fa>
 8008064:	2306      	movs	r3, #6
 8008066:	e008      	b.n	800807a <HAL_GPIO_Init+0x1fa>
 8008068:	2304      	movs	r3, #4
 800806a:	e006      	b.n	800807a <HAL_GPIO_Init+0x1fa>
 800806c:	2303      	movs	r3, #3
 800806e:	e004      	b.n	800807a <HAL_GPIO_Init+0x1fa>
 8008070:	2302      	movs	r3, #2
 8008072:	e002      	b.n	800807a <HAL_GPIO_Init+0x1fa>
 8008074:	2301      	movs	r3, #1
 8008076:	e000      	b.n	800807a <HAL_GPIO_Init+0x1fa>
 8008078:	2300      	movs	r3, #0
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	f002 0203 	and.w	r2, r2, #3
 8008080:	0092      	lsls	r2, r2, #2
 8008082:	4093      	lsls	r3, r2
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800808a:	4937      	ldr	r1, [pc, #220]	; (8008168 <HAL_GPIO_Init+0x2e8>)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	089b      	lsrs	r3, r3, #2
 8008090:	3302      	adds	r3, #2
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008098:	4b39      	ldr	r3, [pc, #228]	; (8008180 <HAL_GPIO_Init+0x300>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4013      	ands	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80080bc:	4a30      	ldr	r2, [pc, #192]	; (8008180 <HAL_GPIO_Init+0x300>)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80080c2:	4b2f      	ldr	r3, [pc, #188]	; (8008180 <HAL_GPIO_Init+0x300>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4013      	ands	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80080e6:	4a26      	ldr	r2, [pc, #152]	; (8008180 <HAL_GPIO_Init+0x300>)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80080ec:	4b24      	ldr	r3, [pc, #144]	; (8008180 <HAL_GPIO_Init+0x300>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4013      	ands	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <HAL_GPIO_Init+0x300>)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008116:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <HAL_GPIO_Init+0x300>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	43db      	mvns	r3, r3
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4013      	ands	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800813a:	4a11      	ldr	r2, [pc, #68]	; (8008180 <HAL_GPIO_Init+0x300>)
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3301      	adds	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	fa22 f303 	lsr.w	r3, r2, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	f47f ae9d 	bne.w	8007e90 <HAL_GPIO_Init+0x10>
  }
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	40021000 	.word	0x40021000
 8008168:	40010000 	.word	0x40010000
 800816c:	48000400 	.word	0x48000400
 8008170:	48000800 	.word	0x48000800
 8008174:	48000c00 	.word	0x48000c00
 8008178:	48001000 	.word	0x48001000
 800817c:	48001400 	.word	0x48001400
 8008180:	40010400 	.word	0x40010400

08008184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	887b      	ldrh	r3, [r7, #2]
 8008196:	4013      	ands	r3, r2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800819c:	2301      	movs	r3, #1
 800819e:	73fb      	strb	r3, [r7, #15]
 80081a0:	e001      	b.n	80081a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
 80081c0:	4613      	mov	r3, r2
 80081c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081c4:	787b      	ldrb	r3, [r7, #1]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80081ca:	887a      	ldrh	r2, [r7, #2]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80081d0:	e002      	b.n	80081d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80081d2:	887a      	ldrh	r2, [r7, #2]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0bb      	b.n	8008372 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b05      	cmp	r3, #5
 8008204:	d101      	bne.n	800820a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e0b3      	b.n	8008372 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d101      	bne.n	800821a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e0ab      	b.n	8008372 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800821a:	4b58      	ldr	r3, [pc, #352]	; (800837c <HAL_OPAMP_Init+0x198>)
 800821c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800821e:	4a57      	ldr	r2, [pc, #348]	; (800837c <HAL_OPAMP_Init+0x198>)
 8008220:	f043 0301 	orr.w	r3, r3, #1
 8008224:	6613      	str	r3, [r2, #96]	; 0x60
 8008226:	4b55      	ldr	r3, [pc, #340]	; (800837c <HAL_OPAMP_Init+0x198>)
 8008228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	60bb      	str	r3, [r7, #8]
 8008230:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fc fcfe 	bl	8004c48 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d003      	beq.n	800825c <HAL_OPAMP_Init+0x78>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b60      	cmp	r3, #96	; 0x60
 800825a:	d133      	bne.n	80082c4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f023 0110 	bic.w	r1, r3, #16
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b41      	ldr	r3, [pc, #260]	; (8008380 <HAL_OPAMP_Init+0x19c>)
 800827a:	4013      	ands	r3, r2
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6851      	ldr	r1, [r2, #4]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6892      	ldr	r2, [r2, #8]
 8008284:	4311      	orrs	r1, r2
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6912      	ldr	r2, [r2, #16]
 800828a:	430a      	orrs	r2, r1
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	7d09      	ldrb	r1, [r1, #20]
 8008290:	2901      	cmp	r1, #1
 8008292:	d102      	bne.n	800829a <HAL_OPAMP_Init+0xb6>
 8008294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008298:	e000      	b.n	800829c <HAL_OPAMP_Init+0xb8>
 800829a:	2100      	movs	r1, #0
 800829c:	4311      	orrs	r1, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082a2:	4311      	orrs	r1, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80082a8:	4311      	orrs	r1, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80082ae:	04d2      	lsls	r2, r2, #19
 80082b0:	4311      	orrs	r1, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80082b6:	0612      	lsls	r2, r2, #24
 80082b8:	4311      	orrs	r1, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	430b      	orrs	r3, r1
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e035      	b.n	8008330 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 0110 	bic.w	r1, r3, #16
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b27      	ldr	r3, [pc, #156]	; (8008380 <HAL_OPAMP_Init+0x19c>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6851      	ldr	r1, [r2, #4]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6892      	ldr	r2, [r2, #8]
 80082ec:	4311      	orrs	r1, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	68d2      	ldr	r2, [r2, #12]
 80082f2:	4311      	orrs	r1, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6912      	ldr	r2, [r2, #16]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	7d09      	ldrb	r1, [r1, #20]
 80082fe:	2901      	cmp	r1, #1
 8008300:	d102      	bne.n	8008308 <HAL_OPAMP_Init+0x124>
 8008302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008306:	e000      	b.n	800830a <HAL_OPAMP_Init+0x126>
 8008308:	2100      	movs	r1, #0
 800830a:	4311      	orrs	r1, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008310:	4311      	orrs	r1, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008316:	4311      	orrs	r1, r2
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800831c:	04d2      	lsls	r2, r2, #19
 800831e:	4311      	orrs	r1, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008324:	0612      	lsls	r2, r2, #24
 8008326:	4311      	orrs	r1, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	430b      	orrs	r3, r1
 800832e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	db10      	blt.n	800835c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40021000 	.word	0x40021000
 8008380:	e0003e11 	.word	0xe0003e11

08008384 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	e01d      	b.n	80083d8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d102      	bne.n	80083ae <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	73fb      	strb	r3, [r7, #15]
 80083ac:	e014      	b.n	80083d8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d10c      	bne.n	80083d4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2204      	movs	r2, #4
 80083ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80083d2:	e001      	b.n	80083d8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d141      	bne.n	800847a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80083f6:	4b4b      	ldr	r3, [pc, #300]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008402:	d131      	bne.n	8008468 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008404:	4b47      	ldr	r3, [pc, #284]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800840a:	4a46      	ldr	r2, [pc, #280]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800840c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008414:	4b43      	ldr	r3, [pc, #268]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800841c:	4a41      	ldr	r2, [pc, #260]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800841e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008424:	4b40      	ldr	r3, [pc, #256]	; (8008528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2232      	movs	r2, #50	; 0x32
 800842a:	fb02 f303 	mul.w	r3, r2, r3
 800842e:	4a3f      	ldr	r2, [pc, #252]	; (800852c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008430:	fba2 2303 	umull	r2, r3, r2, r3
 8008434:	0c9b      	lsrs	r3, r3, #18
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800843a:	e002      	b.n	8008442 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008442:	4b38      	ldr	r3, [pc, #224]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844e:	d102      	bne.n	8008456 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f2      	bne.n	800843c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008456:	4b33      	ldr	r3, [pc, #204]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800845e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008462:	d158      	bne.n	8008516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e057      	b.n	8008518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008468:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800846a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846e:	4a2d      	ldr	r2, [pc, #180]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008478:	e04d      	b.n	8008516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008480:	d141      	bne.n	8008506 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008482:	4b28      	ldr	r3, [pc, #160]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800848a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848e:	d131      	bne.n	80084f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008490:	4b24      	ldr	r3, [pc, #144]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008496:	4a23      	ldr	r2, [pc, #140]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084a0:	4b20      	ldr	r3, [pc, #128]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084a8:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2232      	movs	r2, #50	; 0x32
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	4a1c      	ldr	r2, [pc, #112]	; (800852c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	0c9b      	lsrs	r3, r3, #18
 80084c2:	3301      	adds	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084c6:	e002      	b.n	80084ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084ce:	4b15      	ldr	r3, [pc, #84]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084da:	d102      	bne.n	80084e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f2      	bne.n	80084c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ee:	d112      	bne.n	8008516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e011      	b.n	8008518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084f4:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084fa:	4a0a      	ldr	r2, [pc, #40]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008504:	e007      	b.n	8008516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800850e:	4a05      	ldr	r2, [pc, #20]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008514:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	40007000 	.word	0x40007000
 8008528:	20000000 	.word	0x20000000
 800852c:	431bde83 	.word	0x431bde83

08008530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e306      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d075      	beq.n	800863a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800854e:	4b97      	ldr	r3, [pc, #604]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 030c 	and.w	r3, r3, #12
 8008556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008558:	4b94      	ldr	r3, [pc, #592]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b0c      	cmp	r3, #12
 8008566:	d102      	bne.n	800856e <HAL_RCC_OscConfig+0x3e>
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d002      	beq.n	8008574 <HAL_RCC_OscConfig+0x44>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b08      	cmp	r3, #8
 8008572:	d10b      	bne.n	800858c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008574:	4b8d      	ldr	r3, [pc, #564]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d05b      	beq.n	8008638 <HAL_RCC_OscConfig+0x108>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d157      	bne.n	8008638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e2e1      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008594:	d106      	bne.n	80085a4 <HAL_RCC_OscConfig+0x74>
 8008596:	4b85      	ldr	r3, [pc, #532]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a84      	ldr	r2, [pc, #528]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 800859c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e01d      	b.n	80085e0 <HAL_RCC_OscConfig+0xb0>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCC_OscConfig+0x98>
 80085ae:	4b7f      	ldr	r3, [pc, #508]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a7e      	ldr	r2, [pc, #504]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	4b7c      	ldr	r3, [pc, #496]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a7b      	ldr	r2, [pc, #492]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e00b      	b.n	80085e0 <HAL_RCC_OscConfig+0xb0>
 80085c8:	4b78      	ldr	r3, [pc, #480]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a77      	ldr	r2, [pc, #476]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	4b75      	ldr	r3, [pc, #468]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a74      	ldr	r2, [pc, #464]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80085da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d013      	beq.n	8008610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e8:	f7fc feee 	bl	80053c8 <HAL_GetTick>
 80085ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085ee:	e008      	b.n	8008602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085f0:	f7fc feea 	bl	80053c8 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	2b64      	cmp	r3, #100	; 0x64
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e2a6      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008602:	4b6a      	ldr	r3, [pc, #424]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f0      	beq.n	80085f0 <HAL_RCC_OscConfig+0xc0>
 800860e:	e014      	b.n	800863a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008610:	f7fc feda 	bl	80053c8 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008618:	f7fc fed6 	bl	80053c8 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b64      	cmp	r3, #100	; 0x64
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e292      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800862a:	4b60      	ldr	r3, [pc, #384]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <HAL_RCC_OscConfig+0xe8>
 8008636:	e000      	b.n	800863a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d075      	beq.n	8008732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008646:	4b59      	ldr	r3, [pc, #356]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
 800864e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008650:	4b56      	ldr	r3, [pc, #344]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b0c      	cmp	r3, #12
 800865e:	d102      	bne.n	8008666 <HAL_RCC_OscConfig+0x136>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <HAL_RCC_OscConfig+0x13c>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b04      	cmp	r3, #4
 800866a:	d11f      	bne.n	80086ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800866c:	4b4f      	ldr	r3, [pc, #316]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_RCC_OscConfig+0x154>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e265      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008684:	4b49      	ldr	r3, [pc, #292]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	061b      	lsls	r3, r3, #24
 8008692:	4946      	ldr	r1, [pc, #280]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008694:	4313      	orrs	r3, r2
 8008696:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008698:	4b45      	ldr	r3, [pc, #276]	; (80087b0 <HAL_RCC_OscConfig+0x280>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7fc fe47 	bl	8005330 <HAL_InitTick>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d043      	beq.n	8008730 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e251      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d023      	beq.n	80086fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086b4:	4b3d      	ldr	r3, [pc, #244]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80086ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7fc fe82 	bl	80053c8 <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086c8:	f7fc fe7e 	bl	80053c8 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e23a      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086da:	4b34      	ldr	r3, [pc, #208]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e6:	4b31      	ldr	r3, [pc, #196]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	061b      	lsls	r3, r3, #24
 80086f4:	492d      	ldr	r1, [pc, #180]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	604b      	str	r3, [r1, #4]
 80086fa:	e01a      	b.n	8008732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086fc:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a2a      	ldr	r2, [pc, #168]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008708:	f7fc fe5e 	bl	80053c8 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008710:	f7fc fe5a 	bl	80053c8 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e216      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008722:	4b22      	ldr	r3, [pc, #136]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f0      	bne.n	8008710 <HAL_RCC_OscConfig+0x1e0>
 800872e:	e000      	b.n	8008732 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d041      	beq.n	80087c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01c      	beq.n	8008780 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008746:	4b19      	ldr	r3, [pc, #100]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 800874e:	f043 0301 	orr.w	r3, r3, #1
 8008752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008756:	f7fc fe37 	bl	80053c8 <HAL_GetTick>
 800875a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800875c:	e008      	b.n	8008770 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875e:	f7fc fe33 	bl	80053c8 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e1ef      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008770:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0ef      	beq.n	800875e <HAL_RCC_OscConfig+0x22e>
 800877e:	e020      	b.n	80087c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008786:	4a09      	ldr	r2, [pc, #36]	; (80087ac <HAL_RCC_OscConfig+0x27c>)
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008790:	f7fc fe1a 	bl	80053c8 <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008796:	e00d      	b.n	80087b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008798:	f7fc fe16 	bl	80053c8 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d906      	bls.n	80087b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e1d2      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
 80087aa:	bf00      	nop
 80087ac:	40021000 	.word	0x40021000
 80087b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087b4:	4b8c      	ldr	r3, [pc, #560]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80087b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1ea      	bne.n	8008798 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80a6 	beq.w	800891c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087d0:	2300      	movs	r3, #0
 80087d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80087d4:	4b84      	ldr	r3, [pc, #528]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80087d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_RCC_OscConfig+0x2b4>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <HAL_RCC_OscConfig+0x2b6>
 80087e4:	2300      	movs	r3, #0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00d      	beq.n	8008806 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087ea:	4b7f      	ldr	r3, [pc, #508]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80087ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ee:	4a7e      	ldr	r2, [pc, #504]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80087f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f4:	6593      	str	r3, [r2, #88]	; 0x58
 80087f6:	4b7c      	ldr	r3, [pc, #496]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008802:	2301      	movs	r3, #1
 8008804:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008806:	4b79      	ldr	r3, [pc, #484]	; (80089ec <HAL_RCC_OscConfig+0x4bc>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d118      	bne.n	8008844 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008812:	4b76      	ldr	r3, [pc, #472]	; (80089ec <HAL_RCC_OscConfig+0x4bc>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a75      	ldr	r2, [pc, #468]	; (80089ec <HAL_RCC_OscConfig+0x4bc>)
 8008818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800881c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800881e:	f7fc fdd3 	bl	80053c8 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008826:	f7fc fdcf 	bl	80053c8 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e18b      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008838:	4b6c      	ldr	r3, [pc, #432]	; (80089ec <HAL_RCC_OscConfig+0x4bc>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d108      	bne.n	800885e <HAL_RCC_OscConfig+0x32e>
 800884c:	4b66      	ldr	r3, [pc, #408]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800884e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008852:	4a65      	ldr	r2, [pc, #404]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800885c:	e024      	b.n	80088a8 <HAL_RCC_OscConfig+0x378>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b05      	cmp	r3, #5
 8008864:	d110      	bne.n	8008888 <HAL_RCC_OscConfig+0x358>
 8008866:	4b60      	ldr	r3, [pc, #384]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886c:	4a5e      	ldr	r2, [pc, #376]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800886e:	f043 0304 	orr.w	r3, r3, #4
 8008872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008876:	4b5c      	ldr	r3, [pc, #368]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887c:	4a5a      	ldr	r2, [pc, #360]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800887e:	f043 0301 	orr.w	r3, r3, #1
 8008882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008886:	e00f      	b.n	80088a8 <HAL_RCC_OscConfig+0x378>
 8008888:	4b57      	ldr	r3, [pc, #348]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800888a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888e:	4a56      	ldr	r2, [pc, #344]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008898:	4b53      	ldr	r3, [pc, #332]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800889a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889e:	4a52      	ldr	r2, [pc, #328]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80088a0:	f023 0304 	bic.w	r3, r3, #4
 80088a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d016      	beq.n	80088de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b0:	f7fc fd8a 	bl	80053c8 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088b6:	e00a      	b.n	80088ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088b8:	f7fc fd86 	bl	80053c8 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e140      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088ce:	4b46      	ldr	r3, [pc, #280]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80088d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0ed      	beq.n	80088b8 <HAL_RCC_OscConfig+0x388>
 80088dc:	e015      	b.n	800890a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088de:	f7fc fd73 	bl	80053c8 <HAL_GetTick>
 80088e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088e4:	e00a      	b.n	80088fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088e6:	f7fc fd6f 	bl	80053c8 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e129      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088fc:	4b3a      	ldr	r3, [pc, #232]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80088fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1ed      	bne.n	80088e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800890a:	7ffb      	ldrb	r3, [r7, #31]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d105      	bne.n	800891c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008910:	4b35      	ldr	r3, [pc, #212]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008914:	4a34      	ldr	r2, [pc, #208]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800891a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d03c      	beq.n	80089a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01c      	beq.n	800896a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008930:	4b2d      	ldr	r3, [pc, #180]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008936:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008940:	f7fc fd42 	bl	80053c8 <HAL_GetTick>
 8008944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008948:	f7fc fd3e 	bl	80053c8 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e0fa      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800895a:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800895c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0ef      	beq.n	8008948 <HAL_RCC_OscConfig+0x418>
 8008968:	e01b      	b.n	80089a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800896a:	4b1f      	ldr	r3, [pc, #124]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 800896c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008970:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897a:	f7fc fd25 	bl	80053c8 <HAL_GetTick>
 800897e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008980:	e008      	b.n	8008994 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008982:	f7fc fd21 	bl	80053c8 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e0dd      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008994:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 8008996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1ef      	bne.n	8008982 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 80d1 	beq.w	8008b4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 030c 	and.w	r3, r3, #12
 80089b4:	2b0c      	cmp	r3, #12
 80089b6:	f000 808b 	beq.w	8008ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d15e      	bne.n	8008a80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <HAL_RCC_OscConfig+0x4b8>)
 80089c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7fc fcfb 	bl	80053c8 <HAL_GetTick>
 80089d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089d4:	e00c      	b.n	80089f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d6:	f7fc fcf7 	bl	80053c8 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d905      	bls.n	80089f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e0b3      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
 80089e8:	40021000 	.word	0x40021000
 80089ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089f0:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ec      	bne.n	80089d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089fc:	4b56      	ldr	r3, [pc, #344]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	4b56      	ldr	r3, [pc, #344]	; (8008b5c <HAL_RCC_OscConfig+0x62c>)
 8008a02:	4013      	ands	r3, r2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6a11      	ldr	r1, [r2, #32]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a0c:	3a01      	subs	r2, #1
 8008a0e:	0112      	lsls	r2, r2, #4
 8008a10:	4311      	orrs	r1, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008a16:	0212      	lsls	r2, r2, #8
 8008a18:	4311      	orrs	r1, r2
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a1e:	0852      	lsrs	r2, r2, #1
 8008a20:	3a01      	subs	r2, #1
 8008a22:	0552      	lsls	r2, r2, #21
 8008a24:	4311      	orrs	r1, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a2a:	0852      	lsrs	r2, r2, #1
 8008a2c:	3a01      	subs	r2, #1
 8008a2e:	0652      	lsls	r2, r2, #25
 8008a30:	4311      	orrs	r1, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a36:	06d2      	lsls	r2, r2, #27
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	4947      	ldr	r1, [pc, #284]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a40:	4b45      	ldr	r3, [pc, #276]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a44      	ldr	r2, [pc, #272]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a4c:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	4a41      	ldr	r2, [pc, #260]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a58:	f7fc fcb6 	bl	80053c8 <HAL_GetTick>
 8008a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a60:	f7fc fcb2 	bl	80053c8 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e06e      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a72:	4b39      	ldr	r3, [pc, #228]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0f0      	beq.n	8008a60 <HAL_RCC_OscConfig+0x530>
 8008a7e:	e066      	b.n	8008b4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a80:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a34      	ldr	r2, [pc, #208]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a8a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008a8c:	4b32      	ldr	r3, [pc, #200]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	4a31      	ldr	r2, [pc, #196]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a92:	f023 0303 	bic.w	r3, r3, #3
 8008a96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008a98:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	4a2e      	ldr	r2, [pc, #184]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008a9e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7fc fc8e 	bl	80053c8 <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab0:	f7fc fc8a 	bl	80053c8 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e046      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ac2:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f0      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x580>
 8008ace:	e03e      	b.n	8008b4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e039      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008adc:	4b1e      	ldr	r3, [pc, #120]	; (8008b58 <HAL_RCC_OscConfig+0x628>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f003 0203 	and.w	r2, r3, #3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d12c      	bne.n	8008b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	3b01      	subs	r3, #1
 8008afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d123      	bne.n	8008b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d11b      	bne.n	8008b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d113      	bne.n	8008b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d109      	bne.n	8008b4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	3b01      	subs	r3, #1
 8008b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d001      	beq.n	8008b4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3720      	adds	r7, #32
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	019f800c 	.word	0x019f800c

08008b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e11e      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b78:	4b91      	ldr	r3, [pc, #580]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d910      	bls.n	8008ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b86:	4b8e      	ldr	r3, [pc, #568]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f023 020f 	bic.w	r2, r3, #15
 8008b8e:	498c      	ldr	r1, [pc, #560]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b96:	4b8a      	ldr	r3, [pc, #552]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d001      	beq.n	8008ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e106      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d073      	beq.n	8008c9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d129      	bne.n	8008c10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bbc:	4b81      	ldr	r3, [pc, #516]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0f4      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008bcc:	f000 f99e 	bl	8008f0c <RCC_GetSysClockFreqFromPLLSource>
 8008bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	4a7c      	ldr	r2, [pc, #496]	; (8008dc8 <HAL_RCC_ClockConfig+0x268>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d93f      	bls.n	8008c5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bda:	4b7a      	ldr	r3, [pc, #488]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d009      	beq.n	8008bfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d033      	beq.n	8008c5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d12f      	bne.n	8008c5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008bfa:	4b72      	ldr	r3, [pc, #456]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c02:	4a70      	ldr	r2, [pc, #448]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c0a:	2380      	movs	r3, #128	; 0x80
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e024      	b.n	8008c5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d107      	bne.n	8008c28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c18:	4b6a      	ldr	r3, [pc, #424]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d109      	bne.n	8008c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0c6      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c28:	4b66      	ldr	r3, [pc, #408]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e0be      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008c38:	f000 f8ce 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 8008c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	4a61      	ldr	r2, [pc, #388]	; (8008dc8 <HAL_RCC_ClockConfig+0x268>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d909      	bls.n	8008c5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c46:	4b5f      	ldr	r3, [pc, #380]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c4e:	4a5d      	ldr	r2, [pc, #372]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008c56:	2380      	movs	r3, #128	; 0x80
 8008c58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c5a:	4b5a      	ldr	r3, [pc, #360]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f023 0203 	bic.w	r2, r3, #3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	4957      	ldr	r1, [pc, #348]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6c:	f7fc fbac 	bl	80053c8 <HAL_GetTick>
 8008c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c72:	e00a      	b.n	8008c8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c74:	f7fc fba8 	bl	80053c8 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e095      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8a:	4b4e      	ldr	r3, [pc, #312]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 020c 	and.w	r2, r3, #12
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d1eb      	bne.n	8008c74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d023      	beq.n	8008cf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cb4:	4b43      	ldr	r3, [pc, #268]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	4a42      	ldr	r2, [pc, #264]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008cbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008ccc:	4b3d      	ldr	r3, [pc, #244]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cd4:	4a3b      	ldr	r2, [pc, #236]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cdc:	4b39      	ldr	r3, [pc, #228]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	4936      	ldr	r1, [pc, #216]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	608b      	str	r3, [r1, #8]
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d105      	bne.n	8008d02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008cf6:	4b33      	ldr	r3, [pc, #204]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	4a32      	ldr	r2, [pc, #200]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d02:	4b2f      	ldr	r3, [pc, #188]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d21d      	bcs.n	8008d4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d10:	4b2b      	ldr	r3, [pc, #172]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f023 020f 	bic.w	r2, r3, #15
 8008d18:	4929      	ldr	r1, [pc, #164]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d20:	f7fc fb52 	bl	80053c8 <HAL_GetTick>
 8008d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d26:	e00a      	b.n	8008d3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d28:	f7fc fb4e 	bl	80053c8 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e03b      	b.n	8008db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d3e:	4b20      	ldr	r3, [pc, #128]	; (8008dc0 <HAL_RCC_ClockConfig+0x260>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d1ed      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d58:	4b1a      	ldr	r3, [pc, #104]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	4917      	ldr	r1, [pc, #92]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d76:	4b13      	ldr	r3, [pc, #76]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	490f      	ldr	r1, [pc, #60]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d8a:	f000 f825 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <HAL_RCC_ClockConfig+0x264>)
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	091b      	lsrs	r3, r3, #4
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	490c      	ldr	r1, [pc, #48]	; (8008dcc <HAL_RCC_ClockConfig+0x26c>)
 8008d9c:	5ccb      	ldrb	r3, [r1, r3]
 8008d9e:	f003 031f 	and.w	r3, r3, #31
 8008da2:	fa22 f303 	lsr.w	r3, r2, r3
 8008da6:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <HAL_RCC_ClockConfig+0x270>)
 8008da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <HAL_RCC_ClockConfig+0x274>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fc fabe 	bl	8005330 <HAL_InitTick>
 8008db4:	4603      	mov	r3, r0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	40022000 	.word	0x40022000
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	04c4b400 	.word	0x04c4b400
 8008dcc:	080100c4 	.word	0x080100c4
 8008dd0:	20000000 	.word	0x20000000
 8008dd4:	20000004 	.word	0x20000004

08008dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008dde:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 030c 	and.w	r3, r3, #12
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d102      	bne.n	8008df0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008dea:	4b2a      	ldr	r3, [pc, #168]	; (8008e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008dec:	613b      	str	r3, [r7, #16]
 8008dee:	e047      	b.n	8008e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008df0:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 030c 	and.w	r3, r3, #12
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d102      	bne.n	8008e02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008dfc:	4b26      	ldr	r3, [pc, #152]	; (8008e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e03e      	b.n	8008e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e02:	4b23      	ldr	r3, [pc, #140]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f003 030c 	and.w	r3, r3, #12
 8008e0a:	2b0c      	cmp	r3, #12
 8008e0c:	d136      	bne.n	8008e7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e0e:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	091b      	lsrs	r3, r3, #4
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	3301      	adds	r3, #1
 8008e24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d10c      	bne.n	8008e46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e2c:	4a1a      	ldr	r2, [pc, #104]	; (8008e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e34:	4a16      	ldr	r2, [pc, #88]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e36:	68d2      	ldr	r2, [r2, #12]
 8008e38:	0a12      	lsrs	r2, r2, #8
 8008e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e3e:	fb02 f303 	mul.w	r3, r2, r3
 8008e42:	617b      	str	r3, [r7, #20]
      break;
 8008e44:	e00c      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e46:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4e:	4a10      	ldr	r2, [pc, #64]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e50:	68d2      	ldr	r2, [r2, #12]
 8008e52:	0a12      	lsrs	r2, r2, #8
 8008e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
 8008e5c:	617b      	str	r3, [r7, #20]
      break;
 8008e5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	0e5b      	lsrs	r3, r3, #25
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	e001      	b.n	8008e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008e80:	693b      	ldr	r3, [r7, #16]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40021000 	.word	0x40021000
 8008e94:	00f42400 	.word	0x00f42400
 8008e98:	007a1200 	.word	0x007a1200

08008e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ea0:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20000000 	.word	0x20000000

08008eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008eb8:	f7ff fff0 	bl	8008e9c <HAL_RCC_GetHCLKFreq>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	4904      	ldr	r1, [pc, #16]	; (8008edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008eca:	5ccb      	ldrb	r3, [r1, r3]
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	080100d4 	.word	0x080100d4

08008ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ee4:	f7ff ffda 	bl	8008e9c <HAL_RCC_GetHCLKFreq>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	0adb      	lsrs	r3, r3, #11
 8008ef0:	f003 0307 	and.w	r3, r3, #7
 8008ef4:	4904      	ldr	r1, [pc, #16]	; (8008f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ef6:	5ccb      	ldrb	r3, [r1, r3]
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	40021000 	.word	0x40021000
 8008f08:	080100d4 	.word	0x080100d4

08008f0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f12:	4b1e      	ldr	r3, [pc, #120]	; (8008f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f1c:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	091b      	lsrs	r3, r3, #4
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d10c      	bne.n	8008f4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f30:	4a17      	ldr	r2, [pc, #92]	; (8008f90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f38:	4a14      	ldr	r2, [pc, #80]	; (8008f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f3a:	68d2      	ldr	r2, [r2, #12]
 8008f3c:	0a12      	lsrs	r2, r2, #8
 8008f3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f42:	fb02 f303 	mul.w	r3, r2, r3
 8008f46:	617b      	str	r3, [r7, #20]
    break;
 8008f48:	e00c      	b.n	8008f64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f4a:	4a12      	ldr	r2, [pc, #72]	; (8008f94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f52:	4a0e      	ldr	r2, [pc, #56]	; (8008f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f54:	68d2      	ldr	r2, [r2, #12]
 8008f56:	0a12      	lsrs	r2, r2, #8
 8008f58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f5c:	fb02 f303 	mul.w	r3, r2, r3
 8008f60:	617b      	str	r3, [r7, #20]
    break;
 8008f62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f64:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	0e5b      	lsrs	r3, r3, #25
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	3301      	adds	r3, #1
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008f7e:	687b      	ldr	r3, [r7, #4]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	40021000 	.word	0x40021000
 8008f90:	007a1200 	.word	0x007a1200
 8008f94:	00f42400 	.word	0x00f42400

08008f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8098 	beq.w	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fba:	4b43      	ldr	r3, [pc, #268]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10d      	bne.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fc6:	4b40      	ldr	r3, [pc, #256]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	4a3f      	ldr	r2, [pc, #252]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8008fd2:	4b3d      	ldr	r3, [pc, #244]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fda:	60bb      	str	r3, [r7, #8]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fe2:	4b3a      	ldr	r3, [pc, #232]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a39      	ldr	r2, [pc, #228]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fee:	f7fc f9eb 	bl	80053c8 <HAL_GetTick>
 8008ff2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ff4:	e009      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ff6:	f7fc f9e7 	bl	80053c8 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d902      	bls.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	74fb      	strb	r3, [r7, #19]
        break;
 8009008:	e005      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800900a:	4b30      	ldr	r3, [pc, #192]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0ef      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009016:	7cfb      	ldrb	r3, [r7, #19]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d159      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800901c:	4b2a      	ldr	r3, [pc, #168]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800901e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009026:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d01e      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	429a      	cmp	r2, r3
 8009036:	d019      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009038:	4b23      	ldr	r3, [pc, #140]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800903a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009042:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009044:	4b20      	ldr	r3, [pc, #128]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904a:	4a1f      	ldr	r2, [pc, #124]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800904c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009054:	4b1c      	ldr	r3, [pc, #112]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905a:	4a1b      	ldr	r2, [pc, #108]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800905c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009064:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d016      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009076:	f7fc f9a7 	bl	80053c8 <HAL_GetTick>
 800907a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800907c:	e00b      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907e:	f7fc f9a3 	bl	80053c8 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	f241 3288 	movw	r2, #5000	; 0x1388
 800908c:	4293      	cmp	r3, r2
 800908e:	d902      	bls.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	74fb      	strb	r3, [r7, #19]
            break;
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0ec      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80090a4:	7cfb      	ldrb	r3, [r7, #19]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10b      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	4903      	ldr	r1, [pc, #12]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80090c0:	e008      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090c2:	7cfb      	ldrb	r3, [r7, #19]
 80090c4:	74bb      	strb	r3, [r7, #18]
 80090c6:	e005      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80090c8:	40021000 	.word	0x40021000
 80090cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d0:	7cfb      	ldrb	r3, [r7, #19]
 80090d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090d4:	7c7b      	ldrb	r3, [r7, #17]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d105      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090da:	4ba6      	ldr	r3, [pc, #664]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090de:	4aa5      	ldr	r2, [pc, #660]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090f2:	4ba0      	ldr	r3, [pc, #640]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f8:	f023 0203 	bic.w	r2, r3, #3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	499c      	ldr	r1, [pc, #624]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009102:	4313      	orrs	r3, r2
 8009104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00a      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009114:	4b97      	ldr	r3, [pc, #604]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800911a:	f023 020c 	bic.w	r2, r3, #12
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	4994      	ldr	r1, [pc, #592]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009124:	4313      	orrs	r3, r2
 8009126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009136:	4b8f      	ldr	r3, [pc, #572]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	498b      	ldr	r1, [pc, #556]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009146:	4313      	orrs	r3, r2
 8009148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009158:	4b86      	ldr	r3, [pc, #536]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800915a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	4983      	ldr	r1, [pc, #524]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009168:	4313      	orrs	r3, r2
 800916a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800917a:	4b7e      	ldr	r3, [pc, #504]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800917c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	497a      	ldr	r1, [pc, #488]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800918a:	4313      	orrs	r3, r2
 800918c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800919c:	4b75      	ldr	r3, [pc, #468]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800919e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	4972      	ldr	r1, [pc, #456]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091be:	4b6d      	ldr	r3, [pc, #436]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	4969      	ldr	r1, [pc, #420]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091e0:	4b64      	ldr	r3, [pc, #400]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	4961      	ldr	r1, [pc, #388]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009202:	4b5c      	ldr	r3, [pc, #368]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	4958      	ldr	r1, [pc, #352]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009212:	4313      	orrs	r3, r2
 8009214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009220:	2b00      	cmp	r3, #0
 8009222:	d015      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009224:	4b53      	ldr	r3, [pc, #332]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	4950      	ldr	r1, [pc, #320]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009242:	d105      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009244:	4b4b      	ldr	r3, [pc, #300]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4a4a      	ldr	r2, [pc, #296]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800924a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800924e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009258:	2b00      	cmp	r3, #0
 800925a:	d015      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800925c:	4b45      	ldr	r3, [pc, #276]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800925e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	4942      	ldr	r1, [pc, #264]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800926c:	4313      	orrs	r3, r2
 800926e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800927a:	d105      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800927c:	4b3d      	ldr	r3, [pc, #244]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	4a3c      	ldr	r2, [pc, #240]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009286:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d015      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009294:	4b37      	ldr	r3, [pc, #220]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a2:	4934      	ldr	r1, [pc, #208]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092b2:	d105      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092b4:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	4a2e      	ldr	r2, [pc, #184]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d015      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092cc:	4b29      	ldr	r3, [pc, #164]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092da:	4926      	ldr	r1, [pc, #152]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ea:	d105      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092ec:	4b21      	ldr	r3, [pc, #132]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	4a20      	ldr	r2, [pc, #128]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d015      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009304:	4b1b      	ldr	r3, [pc, #108]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	4918      	ldr	r1, [pc, #96]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009314:	4313      	orrs	r3, r2
 8009316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009322:	d105      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009324:	4b13      	ldr	r3, [pc, #76]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	4a12      	ldr	r2, [pc, #72]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800932a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800932e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d015      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800933e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934a:	490a      	ldr	r1, [pc, #40]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800934c:	4313      	orrs	r3, r2
 800934e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800935a:	d105      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	4a04      	ldr	r2, [pc, #16]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009366:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009368:	7cbb      	ldrb	r3, [r7, #18]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	40021000 	.word	0x40021000

08009378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e09d      	b.n	80094c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d108      	bne.n	80093a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800939a:	d009      	beq.n	80093b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	61da      	str	r2, [r3, #28]
 80093a2:	e005      	b.n	80093b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7fb fcb2 	bl	8004d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093f0:	d902      	bls.n	80093f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e002      	b.n	80093fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009406:	d007      	beq.n	8009418 <HAL_SPI_Init+0xa0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009410:	d002      	beq.n	8009418 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945a:	ea42 0103 	orr.w	r1, r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	f003 0204 	and.w	r2, r3, #4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009494:	ea42 0103 	orr.w	r1, r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d101      	bne.n	80094f0 <HAL_SPI_TransmitReceive_IT+0x20>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e091      	b.n	8009614 <HAL_SPI_TransmitReceive_IT+0x144>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094fe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009506:	7dbb      	ldrb	r3, [r7, #22]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d00d      	beq.n	8009528 <HAL_SPI_TransmitReceive_IT+0x58>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009512:	d106      	bne.n	8009522 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <HAL_SPI_TransmitReceive_IT+0x52>
 800951c:	7dbb      	ldrb	r3, [r7, #22]
 800951e:	2b04      	cmp	r3, #4
 8009520:	d002      	beq.n	8009528 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009522:	2302      	movs	r3, #2
 8009524:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009526:	e070      	b.n	800960a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d005      	beq.n	800953a <HAL_SPI_TransmitReceive_IT+0x6a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <HAL_SPI_TransmitReceive_IT+0x6a>
 8009534:	887b      	ldrh	r3, [r7, #2]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800953e:	e064      	b.n	800960a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b04      	cmp	r3, #4
 800954a:	d003      	beq.n	8009554 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2205      	movs	r2, #5
 8009550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	887a      	ldrh	r2, [r7, #2]
 8009564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	887a      	ldrh	r2, [r7, #2]
 800956a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	887a      	ldrh	r2, [r7, #2]
 8009576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	887a      	ldrh	r2, [r7, #2]
 800957e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800958a:	d906      	bls.n	800959a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4a24      	ldr	r2, [pc, #144]	; (8009620 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009590:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4a23      	ldr	r2, [pc, #140]	; (8009624 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009596:	651a      	str	r2, [r3, #80]	; 0x50
 8009598:	e005      	b.n	80095a6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4a22      	ldr	r2, [pc, #136]	; (8009628 <HAL_SPI_TransmitReceive_IT+0x158>)
 800959e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4a22      	ldr	r2, [pc, #136]	; (800962c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80095a4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095ae:	d802      	bhi.n	80095b6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80095b0:	887b      	ldrh	r3, [r7, #2]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d908      	bls.n	80095c8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	e007      	b.n	80095d8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095d6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80095e6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d008      	beq.n	8009608 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e000      	b.n	800960a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009608:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
}
 8009614:	4618      	mov	r0, r3
 8009616:	371c      	adds	r7, #28
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	080099d3 	.word	0x080099d3
 8009624:	08009a39 	.word	0x08009a39
 8009628:	08009883 	.word	0x08009883
 800962c:	08009941 	.word	0x08009941

08009630 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	099b      	lsrs	r3, r3, #6
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10f      	bne.n	8009674 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	099b      	lsrs	r3, r3, #6
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d004      	beq.n	8009674 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
    return;
 8009672:	e0d7      	b.n	8009824 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <HAL_SPI_IRQHandler+0x66>
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	09db      	lsrs	r3, r3, #7
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	4798      	blx	r3
    return;
 8009694:	e0c6      	b.n	8009824 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	095b      	lsrs	r3, r3, #5
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10c      	bne.n	80096bc <HAL_SPI_IRQHandler+0x8c>
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	099b      	lsrs	r3, r3, #6
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d106      	bne.n	80096bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	0a1b      	lsrs	r3, r3, #8
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80b4 	beq.w	8009824 <HAL_SPI_IRQHandler+0x1f4>
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 80ad 	beq.w	8009824 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	099b      	lsrs	r3, r3, #6
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d023      	beq.n	800971e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d011      	beq.n	8009706 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e6:	f043 0204 	orr.w	r2, r3, #4
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096ee:	2300      	movs	r3, #0
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	e00b      	b.n	800971e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009706:	2300      	movs	r3, #0
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	693b      	ldr	r3, [r7, #16]
        return;
 800971c:	e082      	b.n	8009824 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d014      	beq.n	8009754 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972e:	f043 0201 	orr.w	r2, r3, #1
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	0a1b      	lsrs	r3, r3, #8
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00c      	beq.n	800977a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009764:	f043 0208 	orr.w	r2, r3, #8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800976c:	2300      	movs	r3, #0
 800976e:	60bb      	str	r3, [r7, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	60bb      	str	r3, [r7, #8]
 8009778:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977e:	2b00      	cmp	r3, #0
 8009780:	d04f      	beq.n	8009822 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009790:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <HAL_SPI_IRQHandler+0x17e>
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d034      	beq.n	8009818 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0203 	bic.w	r2, r2, #3
 80097bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d011      	beq.n	80097ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ca:	4a18      	ldr	r2, [pc, #96]	; (800982c <HAL_SPI_IRQHandler+0x1fc>)
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fd fa27 	bl	8006c26 <HAL_DMA_Abort_IT>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d016      	beq.n	8009820 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f6:	4a0d      	ldr	r2, [pc, #52]	; (800982c <HAL_SPI_IRQHandler+0x1fc>)
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fd fa11 	bl	8006c26 <HAL_DMA_Abort_IT>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009816:	e003      	b.n	8009820 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f813 	bl	8009844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800981e:	e000      	b.n	8009822 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009820:	bf00      	nop
    return;
 8009822:	bf00      	nop
  }
}
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	08009859 	.word	0x08009859

08009830 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009864:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7ff ffe5 	bl	8009844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b01      	cmp	r3, #1
 8009894:	d923      	bls.n	80098de <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	b292      	uxth	r2, r2
 80098a2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	1c9a      	adds	r2, r3, #2
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3b02      	subs	r3, #2
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d11f      	bne.n	800990c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098da:	605a      	str	r2, [r3, #4]
 80098dc:	e016      	b.n	800990c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f103 020c 	add.w	r2, r3, #12
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	7812      	ldrb	r2, [r2, #0]
 80098ec:	b2d2      	uxtb	r2, r2
 80098ee:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009900:	b29b      	uxth	r3, r3
 8009902:	3b01      	subs	r3, #1
 8009904:	b29a      	uxth	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009912:	b29b      	uxth	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10f      	bne.n	8009938 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009926:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fa14 	bl	8009d60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800994c:	b29b      	uxth	r3, r3
 800994e:	2b01      	cmp	r3, #1
 8009950:	d912      	bls.n	8009978 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	881a      	ldrh	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009962:	1c9a      	adds	r2, r3, #2
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b02      	subs	r3, #2
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009976:	e012      	b.n	800999e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	330c      	adds	r3, #12
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d110      	bne.n	80099ca <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099b6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f9cb 	bl	8009d60 <SPI_CloseRxTx_ISR>
    }
  }
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	b292      	uxth	r2, r2
 80099e6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	1c9a      	adds	r2, r3, #2
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10f      	bne.n	8009a30 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f998 	bl	8009d60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a44:	881a      	ldrh	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	1c9a      	adds	r2, r3, #2
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d110      	bne.n	8009a90 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a7c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f968 	bl	8009d60 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009aa8:	f7fb fc8e 	bl	80053c8 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ab8:	f7fb fc86 	bl	80053c8 <HAL_GetTick>
 8009abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009abe:	4b39      	ldr	r3, [pc, #228]	; (8009ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	015b      	lsls	r3, r3, #5
 8009ac4:	0d1b      	lsrs	r3, r3, #20
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
 8009acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ace:	e054      	b.n	8009b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad6:	d050      	beq.n	8009b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ad8:	f7fb fc76 	bl	80053c8 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d902      	bls.n	8009aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d13d      	bne.n	8009b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b06:	d111      	bne.n	8009b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b10:	d004      	beq.n	8009b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b1a:	d107      	bne.n	8009b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b34:	d10f      	bne.n	8009b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e017      	b.n	8009b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4013      	ands	r3, r2
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	bf0c      	ite	eq
 8009b8a:	2301      	moveq	r3, #1
 8009b8c:	2300      	movne	r3, #0
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d19b      	bne.n	8009ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3720      	adds	r7, #32
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000000 	.word	0x20000000

08009ba8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009bba:	f7fb fc05 	bl	80053c8 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009bca:	f7fb fbfd 	bl	80053c8 <HAL_GetTick>
 8009bce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	330c      	adds	r3, #12
 8009bd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009bd8:	4b3d      	ldr	r3, [pc, #244]	; (8009cd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	00da      	lsls	r2, r3, #3
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	0d1b      	lsrs	r3, r3, #20
 8009be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bea:	fb02 f303 	mul.w	r3, r2, r3
 8009bee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009bf0:	e060      	b.n	8009cb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009bf8:	d107      	bne.n	8009c0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d104      	bne.n	8009c0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d050      	beq.n	8009cb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c12:	f7fb fbd9 	bl	80053c8 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d902      	bls.n	8009c28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d13d      	bne.n	8009ca4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c40:	d111      	bne.n	8009c66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c4a:	d004      	beq.n	8009c56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c54:	d107      	bne.n	8009c66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6e:	d10f      	bne.n	8009c90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e010      	b.n	8009cc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d196      	bne.n	8009bf2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3728      	adds	r7, #40	; 0x28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000000 	.word	0x20000000

08009cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af02      	add	r7, sp, #8
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff ff5b 	bl	8009ba8 <SPI_WaitFifoStateUntilTimeout>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cfc:	f043 0220 	orr.w	r2, r3, #32
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e027      	b.n	8009d58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2180      	movs	r1, #128	; 0x80
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f7ff fec0 	bl	8009a98 <SPI_WaitFlagStateUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e014      	b.n	8009d58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff ff34 	bl	8009ba8 <SPI_WaitFifoStateUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d007      	beq.n	8009d56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d4a:	f043 0220 	orr.w	r2, r3, #32
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e000      	b.n	8009d58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d68:	f7fb fb2e 	bl	80053c8 <HAL_GetTick>
 8009d6c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0220 	bic.w	r2, r2, #32
 8009d7c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	2164      	movs	r1, #100	; 0x64
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff ffa6 	bl	8009cd4 <SPI_EndRxTxTransaction>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d92:	f043 0220 	orr.w	r2, r3, #32
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d115      	bne.n	8009dce <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d107      	bne.n	8009dbe <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fd3a 	bl	8009830 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009dbc:	e00e      	b.n	8009ddc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7f7 f936 	bl	8001038 <HAL_SPI_TxRxCpltCallback>
}
 8009dcc:	e006      	b.n	8009ddc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff fd34 	bl	8009844 <HAL_SPI_ErrorCallback>
}
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e049      	b.n	8009e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fa ffde 	bl	8004dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f000 fe1a 	bl	800aa5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d001      	beq.n	8009eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e042      	b.n	8009f32 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <HAL_TIM_Base_Start+0xac>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d018      	beq.n	8009ef0 <HAL_TIM_Base_Start+0x5c>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec6:	d013      	beq.n	8009ef0 <HAL_TIM_Base_Start+0x5c>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	; (8009f44 <HAL_TIM_Base_Start+0xb0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00e      	beq.n	8009ef0 <HAL_TIM_Base_Start+0x5c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a1c      	ldr	r2, [pc, #112]	; (8009f48 <HAL_TIM_Base_Start+0xb4>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d009      	beq.n	8009ef0 <HAL_TIM_Base_Start+0x5c>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1a      	ldr	r2, [pc, #104]	; (8009f4c <HAL_TIM_Base_Start+0xb8>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d004      	beq.n	8009ef0 <HAL_TIM_Base_Start+0x5c>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a19      	ldr	r2, [pc, #100]	; (8009f50 <HAL_TIM_Base_Start+0xbc>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d115      	bne.n	8009f1c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	4b17      	ldr	r3, [pc, #92]	; (8009f54 <HAL_TIM_Base_Start+0xc0>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d015      	beq.n	8009f2e <HAL_TIM_Base_Start+0x9a>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f08:	d011      	beq.n	8009f2e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f042 0201 	orr.w	r2, r2, #1
 8009f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f1a:	e008      	b.n	8009f2e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	e000      	b.n	8009f30 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40012c00 	.word	0x40012c00
 8009f44:	40000400 	.word	0x40000400
 8009f48:	40000800 	.word	0x40000800
 8009f4c:	40013400 	.word	0x40013400
 8009f50:	40014000 	.word	0x40014000
 8009f54:	00010007 	.word	0x00010007

08009f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d001      	beq.n	8009f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e04a      	b.n	800a006 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a21      	ldr	r2, [pc, #132]	; (800a014 <HAL_TIM_Base_Start_IT+0xbc>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d018      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9a:	d013      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1d      	ldr	r2, [pc, #116]	; (800a018 <HAL_TIM_Base_Start_IT+0xc0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d00e      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1c      	ldr	r2, [pc, #112]	; (800a01c <HAL_TIM_Base_Start_IT+0xc4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d009      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1a      	ldr	r2, [pc, #104]	; (800a020 <HAL_TIM_Base_Start_IT+0xc8>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d004      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x6c>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a19      	ldr	r2, [pc, #100]	; (800a024 <HAL_TIM_Base_Start_IT+0xcc>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d115      	bne.n	8009ff0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	4b17      	ldr	r3, [pc, #92]	; (800a028 <HAL_TIM_Base_Start_IT+0xd0>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b06      	cmp	r3, #6
 8009fd4:	d015      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0xaa>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fdc:	d011      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0201 	orr.w	r2, r2, #1
 8009fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fee:	e008      	b.n	800a002 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	e000      	b.n	800a004 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a002:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	40012c00 	.word	0x40012c00
 800a018:	40000400 	.word	0x40000400
 800a01c:	40000800 	.word	0x40000800
 800a020:	40013400 	.word	0x40013400
 800a024:	40014000 	.word	0x40014000
 800a028:	00010007 	.word	0x00010007

0800a02c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e049      	b.n	800a0d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f841 	bl	800a0da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f000 fcf6 	bl	800aa5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0e2:	bf00      	nop
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <HAL_TIM_PWM_Start+0x24>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b01      	cmp	r3, #1
 800a10a:	bf14      	ite	ne
 800a10c:	2301      	movne	r3, #1
 800a10e:	2300      	moveq	r3, #0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	e03c      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b04      	cmp	r3, #4
 800a118:	d109      	bne.n	800a12e <HAL_TIM_PWM_Start+0x3e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b01      	cmp	r3, #1
 800a124:	bf14      	ite	ne
 800a126:	2301      	movne	r3, #1
 800a128:	2300      	moveq	r3, #0
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	e02f      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b08      	cmp	r3, #8
 800a132:	d109      	bne.n	800a148 <HAL_TIM_PWM_Start+0x58>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	bf14      	ite	ne
 800a140:	2301      	movne	r3, #1
 800a142:	2300      	moveq	r3, #0
 800a144:	b2db      	uxtb	r3, r3
 800a146:	e022      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b0c      	cmp	r3, #12
 800a14c:	d109      	bne.n	800a162 <HAL_TIM_PWM_Start+0x72>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b01      	cmp	r3, #1
 800a158:	bf14      	ite	ne
 800a15a:	2301      	movne	r3, #1
 800a15c:	2300      	moveq	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	e015      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b10      	cmp	r3, #16
 800a166:	d109      	bne.n	800a17c <HAL_TIM_PWM_Start+0x8c>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	bf14      	ite	ne
 800a174:	2301      	movne	r3, #1
 800a176:	2300      	moveq	r3, #0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	e008      	b.n	800a18e <HAL_TIM_PWM_Start+0x9e>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e097      	b.n	800a2c6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <HAL_TIM_PWM_Start+0xb6>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1a4:	e023      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d104      	bne.n	800a1b6 <HAL_TIM_PWM_Start+0xc6>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1b4:	e01b      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d104      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0xd6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1c4:	e013      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b0c      	cmp	r3, #12
 800a1ca:	d104      	bne.n	800a1d6 <HAL_TIM_PWM_Start+0xe6>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1d4:	e00b      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d104      	bne.n	800a1e6 <HAL_TIM_PWM_Start+0xf6>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1e4:	e003      	b.n	800a1ee <HAL_TIM_PWM_Start+0xfe>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f001 f852 	bl	800b2a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a33      	ldr	r2, [pc, #204]	; (800a2d0 <HAL_TIM_PWM_Start+0x1e0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a32      	ldr	r2, [pc, #200]	; (800a2d4 <HAL_TIM_PWM_Start+0x1e4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00e      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a30      	ldr	r2, [pc, #192]	; (800a2d8 <HAL_TIM_PWM_Start+0x1e8>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d009      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a2f      	ldr	r2, [pc, #188]	; (800a2dc <HAL_TIM_PWM_Start+0x1ec>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <HAL_TIM_PWM_Start+0x13e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a2d      	ldr	r2, [pc, #180]	; (800a2e0 <HAL_TIM_PWM_Start+0x1f0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d101      	bne.n	800a232 <HAL_TIM_PWM_Start+0x142>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <HAL_TIM_PWM_Start+0x144>
 800a232:	2300      	movs	r3, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a246:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a20      	ldr	r2, [pc, #128]	; (800a2d0 <HAL_TIM_PWM_Start+0x1e0>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d018      	beq.n	800a284 <HAL_TIM_PWM_Start+0x194>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25a:	d013      	beq.n	800a284 <HAL_TIM_PWM_Start+0x194>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a20      	ldr	r2, [pc, #128]	; (800a2e4 <HAL_TIM_PWM_Start+0x1f4>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d00e      	beq.n	800a284 <HAL_TIM_PWM_Start+0x194>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <HAL_TIM_PWM_Start+0x1f8>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d009      	beq.n	800a284 <HAL_TIM_PWM_Start+0x194>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a17      	ldr	r2, [pc, #92]	; (800a2d4 <HAL_TIM_PWM_Start+0x1e4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d004      	beq.n	800a284 <HAL_TIM_PWM_Start+0x194>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a16      	ldr	r2, [pc, #88]	; (800a2d8 <HAL_TIM_PWM_Start+0x1e8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d115      	bne.n	800a2b0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	4b18      	ldr	r3, [pc, #96]	; (800a2ec <HAL_TIM_PWM_Start+0x1fc>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b06      	cmp	r3, #6
 800a294:	d015      	beq.n	800a2c2 <HAL_TIM_PWM_Start+0x1d2>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29c:	d011      	beq.n	800a2c2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f042 0201 	orr.w	r2, r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ae:	e008      	b.n	800a2c2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0201 	orr.w	r2, r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	e000      	b.n	800a2c4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	40012c00 	.word	0x40012c00
 800a2d4:	40013400 	.word	0x40013400
 800a2d8:	40014000 	.word	0x40014000
 800a2dc:	40014400 	.word	0x40014400
 800a2e0:	40014800 	.word	0x40014800
 800a2e4:	40000400 	.word	0x40000400
 800a2e8:	40000800 	.word	0x40000800
 800a2ec:	00010007 	.word	0x00010007

0800a2f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b02      	cmp	r3, #2
 800a304:	d122      	bne.n	800a34c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b02      	cmp	r3, #2
 800a312:	d11b      	bne.n	800a34c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f06f 0202 	mvn.w	r2, #2
 800a31c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fb74 	bl	800aa20 <HAL_TIM_IC_CaptureCallback>
 800a338:	e005      	b.n	800a346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fb66 	bl	800aa0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fb77 	bl	800aa34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b04      	cmp	r3, #4
 800a358:	d122      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b04      	cmp	r3, #4
 800a366:	d11b      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f06f 0204 	mvn.w	r2, #4
 800a370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2202      	movs	r2, #2
 800a376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fb4a 	bl	800aa20 <HAL_TIM_IC_CaptureCallback>
 800a38c:	e005      	b.n	800a39a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fb3c 	bl	800aa0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fb4d 	bl	800aa34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b08      	cmp	r3, #8
 800a3ac:	d122      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d11b      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0208 	mvn.w	r2, #8
 800a3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fb20 	bl	800aa20 <HAL_TIM_IC_CaptureCallback>
 800a3e0:	e005      	b.n	800a3ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fb12 	bl	800aa0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fb23 	bl	800aa34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b10      	cmp	r3, #16
 800a400:	d122      	bne.n	800a448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	d11b      	bne.n	800a448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f06f 0210 	mvn.w	r2, #16
 800a418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2208      	movs	r2, #8
 800a41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 faf6 	bl	800aa20 <HAL_TIM_IC_CaptureCallback>
 800a434:	e005      	b.n	800a442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fae8 	bl	800aa0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 faf9 	bl	800aa34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b01      	cmp	r3, #1
 800a454:	d10e      	bne.n	800a474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	d107      	bne.n	800a474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0201 	mvn.w	r2, #1
 800a46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7f6 fdae 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a47e:	2b80      	cmp	r3, #128	; 0x80
 800a480:	d10e      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48c:	2b80      	cmp	r3, #128	; 0x80
 800a48e:	d107      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 f906 	bl	800b6ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ae:	d10e      	bne.n	800a4ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ba:	2b80      	cmp	r3, #128	; 0x80
 800a4bc:	d107      	bne.n	800a4ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f001 f8f9 	bl	800b6c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	d10e      	bne.n	800a4fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e6:	2b40      	cmp	r3, #64	; 0x40
 800a4e8:	d107      	bne.n	800a4fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 faa7 	bl	800aa48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b20      	cmp	r3, #32
 800a506:	d10e      	bne.n	800a526 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b20      	cmp	r3, #32
 800a514:	d107      	bne.n	800a526 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f06f 0220 	mvn.w	r2, #32
 800a51e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 f8b9 	bl	800b698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a534:	d10f      	bne.n	800a556 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a544:	d107      	bne.n	800a556 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 f8bf 	bl	800b6d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a564:	d10f      	bne.n	800a586 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a574:	d107      	bne.n	800a586 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 f8b1 	bl	800b6e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a594:	d10f      	bne.n	800a5b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5a4:	d107      	bne.n	800a5b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a5ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 f8a3 	bl	800b6fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5c4:	d10f      	bne.n	800a5e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5d4:	d107      	bne.n	800a5e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a5de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f001 f895 	bl	800b710 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a60a:	2302      	movs	r3, #2
 800a60c:	e0ff      	b.n	800a80e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b14      	cmp	r3, #20
 800a61a:	f200 80f0 	bhi.w	800a7fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a61e:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a679 	.word	0x0800a679
 800a628:	0800a7ff 	.word	0x0800a7ff
 800a62c:	0800a7ff 	.word	0x0800a7ff
 800a630:	0800a7ff 	.word	0x0800a7ff
 800a634:	0800a6b9 	.word	0x0800a6b9
 800a638:	0800a7ff 	.word	0x0800a7ff
 800a63c:	0800a7ff 	.word	0x0800a7ff
 800a640:	0800a7ff 	.word	0x0800a7ff
 800a644:	0800a6fb 	.word	0x0800a6fb
 800a648:	0800a7ff 	.word	0x0800a7ff
 800a64c:	0800a7ff 	.word	0x0800a7ff
 800a650:	0800a7ff 	.word	0x0800a7ff
 800a654:	0800a73b 	.word	0x0800a73b
 800a658:	0800a7ff 	.word	0x0800a7ff
 800a65c:	0800a7ff 	.word	0x0800a7ff
 800a660:	0800a7ff 	.word	0x0800a7ff
 800a664:	0800a77d 	.word	0x0800a77d
 800a668:	0800a7ff 	.word	0x0800a7ff
 800a66c:	0800a7ff 	.word	0x0800a7ff
 800a670:	0800a7ff 	.word	0x0800a7ff
 800a674:	0800a7bd 	.word	0x0800a7bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 fa7c 	bl	800ab7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699a      	ldr	r2, [r3, #24]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f042 0208 	orr.w	r2, r2, #8
 800a692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	699a      	ldr	r2, [r3, #24]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0204 	bic.w	r2, r2, #4
 800a6a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6999      	ldr	r1, [r3, #24]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	691a      	ldr	r2, [r3, #16]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	619a      	str	r2, [r3, #24]
      break;
 800a6b6:	e0a5      	b.n	800a804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 faec 	bl	800ac9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6999      	ldr	r1, [r3, #24]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	021a      	lsls	r2, r3, #8
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	619a      	str	r2, [r3, #24]
      break;
 800a6f8:	e084      	b.n	800a804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fb55 	bl	800adb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	69da      	ldr	r2, [r3, #28]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f042 0208 	orr.w	r2, r2, #8
 800a714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	69da      	ldr	r2, [r3, #28]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0204 	bic.w	r2, r2, #4
 800a724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69d9      	ldr	r1, [r3, #28]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	691a      	ldr	r2, [r3, #16]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	61da      	str	r2, [r3, #28]
      break;
 800a738:	e064      	b.n	800a804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fbbd 	bl	800aec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69da      	ldr	r2, [r3, #28]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69da      	ldr	r2, [r3, #28]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69d9      	ldr	r1, [r3, #28]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	021a      	lsls	r2, r3, #8
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	61da      	str	r2, [r3, #28]
      break;
 800a77a:	e043      	b.n	800a804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68b9      	ldr	r1, [r7, #8]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fc26 	bl	800afd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f042 0208 	orr.w	r2, r2, #8
 800a796:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0204 	bic.w	r2, r2, #4
 800a7a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	691a      	ldr	r2, [r3, #16]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a7ba:	e023      	b.n	800a804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fc6a 	bl	800b09c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	021a      	lsls	r2, r3, #8
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a7fc:	e002      	b.n	800a804 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
      break;
 800a802:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop

0800a818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_TIM_ConfigClockSource+0x1c>
 800a830:	2302      	movs	r3, #2
 800a832:	e0de      	b.n	800a9f2 <HAL_TIM_ConfigClockSource+0x1da>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a85e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a63      	ldr	r2, [pc, #396]	; (800a9fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	f000 80a9 	beq.w	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a874:	4a61      	ldr	r2, [pc, #388]	; (800a9fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a876:	4293      	cmp	r3, r2
 800a878:	f200 80ae 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a87c:	4a60      	ldr	r2, [pc, #384]	; (800aa00 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	f000 80a1 	beq.w	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a884:	4a5e      	ldr	r2, [pc, #376]	; (800aa00 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	f200 80a6 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a88c:	4a5d      	ldr	r2, [pc, #372]	; (800aa04 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	f000 8099 	beq.w	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a894:	4a5b      	ldr	r2, [pc, #364]	; (800aa04 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a896:	4293      	cmp	r3, r2
 800a898:	f200 809e 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a89c:	4a5a      	ldr	r2, [pc, #360]	; (800aa08 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	f000 8091 	beq.w	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a8a4:	4a58      	ldr	r2, [pc, #352]	; (800aa08 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	f200 8096 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8b0:	f000 8089 	beq.w	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a8b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8b8:	f200 808e 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c0:	d03e      	beq.n	800a940 <HAL_TIM_ConfigClockSource+0x128>
 800a8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c6:	f200 8087 	bhi.w	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ce:	f000 8086 	beq.w	800a9de <HAL_TIM_ConfigClockSource+0x1c6>
 800a8d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8d6:	d87f      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8d8:	2b70      	cmp	r3, #112	; 0x70
 800a8da:	d01a      	beq.n	800a912 <HAL_TIM_ConfigClockSource+0xfa>
 800a8dc:	2b70      	cmp	r3, #112	; 0x70
 800a8de:	d87b      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8e0:	2b60      	cmp	r3, #96	; 0x60
 800a8e2:	d050      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x16e>
 800a8e4:	2b60      	cmp	r3, #96	; 0x60
 800a8e6:	d877      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8e8:	2b50      	cmp	r3, #80	; 0x50
 800a8ea:	d03c      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0x14e>
 800a8ec:	2b50      	cmp	r3, #80	; 0x50
 800a8ee:	d873      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8f0:	2b40      	cmp	r3, #64	; 0x40
 800a8f2:	d058      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x18e>
 800a8f4:	2b40      	cmp	r3, #64	; 0x40
 800a8f6:	d86f      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	d064      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a8fc:	2b30      	cmp	r3, #48	; 0x30
 800a8fe:	d86b      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a900:	2b20      	cmp	r3, #32
 800a902:	d060      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a904:	2b20      	cmp	r3, #32
 800a906:	d867      	bhi.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d05c      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	d05a      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a910:	e062      	b.n	800a9d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	6899      	ldr	r1, [r3, #8]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f000 fc9d 	bl	800b260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	609a      	str	r2, [r3, #8]
      break;
 800a93e:	e04f      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	6899      	ldr	r1, [r3, #8]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f000 fc86 	bl	800b260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a962:	609a      	str	r2, [r3, #8]
      break;
 800a964:	e03c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6818      	ldr	r0, [r3, #0]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	6859      	ldr	r1, [r3, #4]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	461a      	mov	r2, r3
 800a974:	f000 fbf8 	bl	800b168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2150      	movs	r1, #80	; 0x50
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fc51 	bl	800b226 <TIM_ITRx_SetConfig>
      break;
 800a984:	e02c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6859      	ldr	r1, [r3, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	461a      	mov	r2, r3
 800a994:	f000 fc17 	bl	800b1c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2160      	movs	r1, #96	; 0x60
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fc41 	bl	800b226 <TIM_ITRx_SetConfig>
      break;
 800a9a4:	e01c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	6859      	ldr	r1, [r3, #4]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f000 fbd8 	bl	800b168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2140      	movs	r1, #64	; 0x40
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fc31 	bl	800b226 <TIM_ITRx_SetConfig>
      break;
 800a9c4:	e00c      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f000 fc28 	bl	800b226 <TIM_ITRx_SetConfig>
      break;
 800a9d6:	e003      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
      break;
 800a9dc:	e000      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a9de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	00100070 	.word	0x00100070
 800aa00:	00100040 	.word	0x00100040
 800aa04:	00100030 	.word	0x00100030
 800aa08:	00100020 	.word	0x00100020

0800aa0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a3c      	ldr	r2, [pc, #240]	; (800ab60 <TIM_Base_SetConfig+0x104>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00f      	beq.n	800aa94 <TIM_Base_SetConfig+0x38>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa7a:	d00b      	beq.n	800aa94 <TIM_Base_SetConfig+0x38>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a39      	ldr	r2, [pc, #228]	; (800ab64 <TIM_Base_SetConfig+0x108>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d007      	beq.n	800aa94 <TIM_Base_SetConfig+0x38>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a38      	ldr	r2, [pc, #224]	; (800ab68 <TIM_Base_SetConfig+0x10c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_Base_SetConfig+0x38>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a37      	ldr	r2, [pc, #220]	; (800ab6c <TIM_Base_SetConfig+0x110>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d108      	bne.n	800aaa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a2d      	ldr	r2, [pc, #180]	; (800ab60 <TIM_Base_SetConfig+0x104>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d01b      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab4:	d017      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a2a      	ldr	r2, [pc, #168]	; (800ab64 <TIM_Base_SetConfig+0x108>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d013      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a29      	ldr	r2, [pc, #164]	; (800ab68 <TIM_Base_SetConfig+0x10c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00f      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a28      	ldr	r2, [pc, #160]	; (800ab6c <TIM_Base_SetConfig+0x110>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00b      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <TIM_Base_SetConfig+0x114>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d007      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a26      	ldr	r2, [pc, #152]	; (800ab74 <TIM_Base_SetConfig+0x118>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d003      	beq.n	800aae6 <TIM_Base_SetConfig+0x8a>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a25      	ldr	r2, [pc, #148]	; (800ab78 <TIM_Base_SetConfig+0x11c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d108      	bne.n	800aaf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a10      	ldr	r2, [pc, #64]	; (800ab60 <TIM_Base_SetConfig+0x104>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00f      	beq.n	800ab44 <TIM_Base_SetConfig+0xe8>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a11      	ldr	r2, [pc, #68]	; (800ab6c <TIM_Base_SetConfig+0x110>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00b      	beq.n	800ab44 <TIM_Base_SetConfig+0xe8>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a10      	ldr	r2, [pc, #64]	; (800ab70 <TIM_Base_SetConfig+0x114>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d007      	beq.n	800ab44 <TIM_Base_SetConfig+0xe8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a0f      	ldr	r2, [pc, #60]	; (800ab74 <TIM_Base_SetConfig+0x118>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d003      	beq.n	800ab44 <TIM_Base_SetConfig+0xe8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a0e      	ldr	r2, [pc, #56]	; (800ab78 <TIM_Base_SetConfig+0x11c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d103      	bne.n	800ab4c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	615a      	str	r2, [r3, #20]
}
 800ab52:	bf00      	nop
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	40012c00 	.word	0x40012c00
 800ab64:	40000400 	.word	0x40000400
 800ab68:	40000800 	.word	0x40000800
 800ab6c:	40013400 	.word	0x40013400
 800ab70:	40014000 	.word	0x40014000
 800ab74:	40014400 	.word	0x40014400
 800ab78:	40014800 	.word	0x40014800

0800ab7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	f023 0201 	bic.w	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0303 	bic.w	r3, r3, #3
 800abb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f023 0302 	bic.w	r3, r3, #2
 800abc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a2c      	ldr	r2, [pc, #176]	; (800ac88 <TIM_OC1_SetConfig+0x10c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00f      	beq.n	800abfc <TIM_OC1_SetConfig+0x80>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a2b      	ldr	r2, [pc, #172]	; (800ac8c <TIM_OC1_SetConfig+0x110>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00b      	beq.n	800abfc <TIM_OC1_SetConfig+0x80>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a2a      	ldr	r2, [pc, #168]	; (800ac90 <TIM_OC1_SetConfig+0x114>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d007      	beq.n	800abfc <TIM_OC1_SetConfig+0x80>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a29      	ldr	r2, [pc, #164]	; (800ac94 <TIM_OC1_SetConfig+0x118>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_OC1_SetConfig+0x80>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a28      	ldr	r2, [pc, #160]	; (800ac98 <TIM_OC1_SetConfig+0x11c>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d10c      	bne.n	800ac16 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 0308 	bic.w	r3, r3, #8
 800ac02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f023 0304 	bic.w	r3, r3, #4
 800ac14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a1b      	ldr	r2, [pc, #108]	; (800ac88 <TIM_OC1_SetConfig+0x10c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d00f      	beq.n	800ac3e <TIM_OC1_SetConfig+0xc2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a1a      	ldr	r2, [pc, #104]	; (800ac8c <TIM_OC1_SetConfig+0x110>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00b      	beq.n	800ac3e <TIM_OC1_SetConfig+0xc2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a19      	ldr	r2, [pc, #100]	; (800ac90 <TIM_OC1_SetConfig+0x114>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d007      	beq.n	800ac3e <TIM_OC1_SetConfig+0xc2>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a18      	ldr	r2, [pc, #96]	; (800ac94 <TIM_OC1_SetConfig+0x118>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d003      	beq.n	800ac3e <TIM_OC1_SetConfig+0xc2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a17      	ldr	r2, [pc, #92]	; (800ac98 <TIM_OC1_SetConfig+0x11c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d111      	bne.n	800ac62 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	621a      	str	r2, [r3, #32]
}
 800ac7c:	bf00      	nop
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	40012c00 	.word	0x40012c00
 800ac8c:	40013400 	.word	0x40013400
 800ac90:	40014000 	.word	0x40014000
 800ac94:	40014400 	.word	0x40014400
 800ac98:	40014800 	.word	0x40014800

0800ac9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	f023 0210 	bic.w	r2, r3, #16
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f023 0320 	bic.w	r3, r3, #32
 800acea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	011b      	lsls	r3, r3, #4
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a28      	ldr	r2, [pc, #160]	; (800ad9c <TIM_OC2_SetConfig+0x100>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d003      	beq.n	800ad08 <TIM_OC2_SetConfig+0x6c>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a27      	ldr	r2, [pc, #156]	; (800ada0 <TIM_OC2_SetConfig+0x104>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d10d      	bne.n	800ad24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a1d      	ldr	r2, [pc, #116]	; (800ad9c <TIM_OC2_SetConfig+0x100>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00f      	beq.n	800ad4c <TIM_OC2_SetConfig+0xb0>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a1c      	ldr	r2, [pc, #112]	; (800ada0 <TIM_OC2_SetConfig+0x104>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00b      	beq.n	800ad4c <TIM_OC2_SetConfig+0xb0>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1b      	ldr	r2, [pc, #108]	; (800ada4 <TIM_OC2_SetConfig+0x108>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d007      	beq.n	800ad4c <TIM_OC2_SetConfig+0xb0>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a1a      	ldr	r2, [pc, #104]	; (800ada8 <TIM_OC2_SetConfig+0x10c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d003      	beq.n	800ad4c <TIM_OC2_SetConfig+0xb0>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a19      	ldr	r2, [pc, #100]	; (800adac <TIM_OC2_SetConfig+0x110>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d113      	bne.n	800ad74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	621a      	str	r2, [r3, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40012c00 	.word	0x40012c00
 800ada0:	40013400 	.word	0x40013400
 800ada4:	40014000 	.word	0x40014000
 800ada8:	40014400 	.word	0x40014400
 800adac:	40014800 	.word	0x40014800

0800adb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0303 	bic.w	r3, r3, #3
 800adea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a27      	ldr	r2, [pc, #156]	; (800aeac <TIM_OC3_SetConfig+0xfc>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d003      	beq.n	800ae1a <TIM_OC3_SetConfig+0x6a>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a26      	ldr	r2, [pc, #152]	; (800aeb0 <TIM_OC3_SetConfig+0x100>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d10d      	bne.n	800ae36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	021b      	lsls	r3, r3, #8
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a1c      	ldr	r2, [pc, #112]	; (800aeac <TIM_OC3_SetConfig+0xfc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d00f      	beq.n	800ae5e <TIM_OC3_SetConfig+0xae>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a1b      	ldr	r2, [pc, #108]	; (800aeb0 <TIM_OC3_SetConfig+0x100>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d00b      	beq.n	800ae5e <TIM_OC3_SetConfig+0xae>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1a      	ldr	r2, [pc, #104]	; (800aeb4 <TIM_OC3_SetConfig+0x104>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d007      	beq.n	800ae5e <TIM_OC3_SetConfig+0xae>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a19      	ldr	r2, [pc, #100]	; (800aeb8 <TIM_OC3_SetConfig+0x108>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d003      	beq.n	800ae5e <TIM_OC3_SetConfig+0xae>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a18      	ldr	r2, [pc, #96]	; (800aebc <TIM_OC3_SetConfig+0x10c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d113      	bne.n	800ae86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	621a      	str	r2, [r3, #32]
}
 800aea0:	bf00      	nop
 800aea2:	371c      	adds	r7, #28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	40012c00 	.word	0x40012c00
 800aeb0:	40013400 	.word	0x40013400
 800aeb4:	40014000 	.word	0x40014000
 800aeb8:	40014400 	.word	0x40014400
 800aebc:	40014800 	.word	0x40014800

0800aec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	021b      	lsls	r3, r3, #8
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	4313      	orrs	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	031b      	lsls	r3, r3, #12
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	4313      	orrs	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a28      	ldr	r2, [pc, #160]	; (800afc0 <TIM_OC4_SetConfig+0x100>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d003      	beq.n	800af2c <TIM_OC4_SetConfig+0x6c>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a27      	ldr	r2, [pc, #156]	; (800afc4 <TIM_OC4_SetConfig+0x104>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d10d      	bne.n	800af48 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	031b      	lsls	r3, r3, #12
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a1d      	ldr	r2, [pc, #116]	; (800afc0 <TIM_OC4_SetConfig+0x100>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00f      	beq.n	800af70 <TIM_OC4_SetConfig+0xb0>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a1c      	ldr	r2, [pc, #112]	; (800afc4 <TIM_OC4_SetConfig+0x104>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00b      	beq.n	800af70 <TIM_OC4_SetConfig+0xb0>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a1b      	ldr	r2, [pc, #108]	; (800afc8 <TIM_OC4_SetConfig+0x108>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d007      	beq.n	800af70 <TIM_OC4_SetConfig+0xb0>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a1a      	ldr	r2, [pc, #104]	; (800afcc <TIM_OC4_SetConfig+0x10c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d003      	beq.n	800af70 <TIM_OC4_SetConfig+0xb0>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a19      	ldr	r2, [pc, #100]	; (800afd0 <TIM_OC4_SetConfig+0x110>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d113      	bne.n	800af98 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	019b      	lsls	r3, r3, #6
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	019b      	lsls	r3, r3, #6
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	621a      	str	r2, [r3, #32]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40012c00 	.word	0x40012c00
 800afc4:	40013400 	.word	0x40013400
 800afc8:	40014000 	.word	0x40014000
 800afcc:	40014400 	.word	0x40014400
 800afd0:	40014800 	.word	0x40014800

0800afd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	041b      	lsls	r3, r3, #16
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a17      	ldr	r2, [pc, #92]	; (800b088 <TIM_OC5_SetConfig+0xb4>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00f      	beq.n	800b04e <TIM_OC5_SetConfig+0x7a>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a16      	ldr	r2, [pc, #88]	; (800b08c <TIM_OC5_SetConfig+0xb8>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00b      	beq.n	800b04e <TIM_OC5_SetConfig+0x7a>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a15      	ldr	r2, [pc, #84]	; (800b090 <TIM_OC5_SetConfig+0xbc>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d007      	beq.n	800b04e <TIM_OC5_SetConfig+0x7a>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a14      	ldr	r2, [pc, #80]	; (800b094 <TIM_OC5_SetConfig+0xc0>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d003      	beq.n	800b04e <TIM_OC5_SetConfig+0x7a>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a13      	ldr	r2, [pc, #76]	; (800b098 <TIM_OC5_SetConfig+0xc4>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d109      	bne.n	800b062 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	021b      	lsls	r3, r3, #8
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	621a      	str	r2, [r3, #32]
}
 800b07c:	bf00      	nop
 800b07e:	371c      	adds	r7, #28
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	40012c00 	.word	0x40012c00
 800b08c:	40013400 	.word	0x40013400
 800b090:	40014000 	.word	0x40014000
 800b094:	40014400 	.word	0x40014400
 800b098:	40014800 	.word	0x40014800

0800b09c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	021b      	lsls	r3, r3, #8
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b0e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	051b      	lsls	r3, r3, #20
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a18      	ldr	r2, [pc, #96]	; (800b154 <TIM_OC6_SetConfig+0xb8>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d00f      	beq.n	800b118 <TIM_OC6_SetConfig+0x7c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a17      	ldr	r2, [pc, #92]	; (800b158 <TIM_OC6_SetConfig+0xbc>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d00b      	beq.n	800b118 <TIM_OC6_SetConfig+0x7c>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a16      	ldr	r2, [pc, #88]	; (800b15c <TIM_OC6_SetConfig+0xc0>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d007      	beq.n	800b118 <TIM_OC6_SetConfig+0x7c>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a15      	ldr	r2, [pc, #84]	; (800b160 <TIM_OC6_SetConfig+0xc4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d003      	beq.n	800b118 <TIM_OC6_SetConfig+0x7c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a14      	ldr	r2, [pc, #80]	; (800b164 <TIM_OC6_SetConfig+0xc8>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d109      	bne.n	800b12c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b11e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	029b      	lsls	r3, r3, #10
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	621a      	str	r2, [r3, #32]
}
 800b146:	bf00      	nop
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	40012c00 	.word	0x40012c00
 800b158:	40013400 	.word	0x40013400
 800b15c:	40014000 	.word	0x40014000
 800b160:	40014400 	.word	0x40014400
 800b164:	40014800 	.word	0x40014800

0800b168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	f023 0201 	bic.w	r2, r3, #1
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f023 030a 	bic.w	r3, r3, #10
 800b1a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	621a      	str	r2, [r3, #32]
}
 800b1ba:	bf00      	nop
 800b1bc:	371c      	adds	r7, #28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b087      	sub	sp, #28
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	f023 0210 	bic.w	r2, r3, #16
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a1b      	ldr	r3, [r3, #32]
 800b1e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	031b      	lsls	r3, r3, #12
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	011b      	lsls	r3, r3, #4
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b226:	b480      	push	{r7}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b23c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4313      	orrs	r3, r2
 800b248:	f043 0307 	orr.w	r3, r3, #7
 800b24c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	609a      	str	r2, [r3, #8]
}
 800b254:	bf00      	nop
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b260:	b480      	push	{r7}
 800b262:	b087      	sub	sp, #28
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b27a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	021a      	lsls	r2, r3, #8
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	431a      	orrs	r2, r3
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	4313      	orrs	r3, r2
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	609a      	str	r2, [r3, #8]
}
 800b294:	bf00      	nop
 800b296:	371c      	adds	r7, #28
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f003 031f 	and.w	r3, r3, #31
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6a1a      	ldr	r2, [r3, #32]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	43db      	mvns	r3, r3
 800b2c2:	401a      	ands	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1a      	ldr	r2, [r3, #32]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	f003 031f 	and.w	r3, r3, #31
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	621a      	str	r2, [r3, #32]
}
 800b2de:	bf00      	nop
 800b2e0:	371c      	adds	r7, #28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
	...

0800b2ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d109      	bne.n	800b310 <HAL_TIMEx_PWMN_Start+0x24>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b01      	cmp	r3, #1
 800b306:	bf14      	ite	ne
 800b308:	2301      	movne	r3, #1
 800b30a:	2300      	moveq	r3, #0
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	e022      	b.n	800b356 <HAL_TIMEx_PWMN_Start+0x6a>
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2b04      	cmp	r3, #4
 800b314:	d109      	bne.n	800b32a <HAL_TIMEx_PWMN_Start+0x3e>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b01      	cmp	r3, #1
 800b320:	bf14      	ite	ne
 800b322:	2301      	movne	r3, #1
 800b324:	2300      	moveq	r3, #0
 800b326:	b2db      	uxtb	r3, r3
 800b328:	e015      	b.n	800b356 <HAL_TIMEx_PWMN_Start+0x6a>
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	d109      	bne.n	800b344 <HAL_TIMEx_PWMN_Start+0x58>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b01      	cmp	r3, #1
 800b33a:	bf14      	ite	ne
 800b33c:	2301      	movne	r3, #1
 800b33e:	2300      	moveq	r3, #0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	e008      	b.n	800b356 <HAL_TIMEx_PWMN_Start+0x6a>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	bf14      	ite	ne
 800b350:	2301      	movne	r3, #1
 800b352:	2300      	moveq	r3, #0
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e069      	b.n	800b432 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d104      	bne.n	800b36e <HAL_TIMEx_PWMN_Start+0x82>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b36c:	e013      	b.n	800b396 <HAL_TIMEx_PWMN_Start+0xaa>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b04      	cmp	r3, #4
 800b372:	d104      	bne.n	800b37e <HAL_TIMEx_PWMN_Start+0x92>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b37c:	e00b      	b.n	800b396 <HAL_TIMEx_PWMN_Start+0xaa>
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b08      	cmp	r3, #8
 800b382:	d104      	bne.n	800b38e <HAL_TIMEx_PWMN_Start+0xa2>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b38c:	e003      	b.n	800b396 <HAL_TIMEx_PWMN_Start+0xaa>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2202      	movs	r2, #2
 800b392:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2204      	movs	r2, #4
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f9c0 	bl	800b724 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a20      	ldr	r2, [pc, #128]	; (800b43c <HAL_TIMEx_PWMN_Start+0x150>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d018      	beq.n	800b3f0 <HAL_TIMEx_PWMN_Start+0x104>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3c6:	d013      	beq.n	800b3f0 <HAL_TIMEx_PWMN_Start+0x104>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a1c      	ldr	r2, [pc, #112]	; (800b440 <HAL_TIMEx_PWMN_Start+0x154>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d00e      	beq.n	800b3f0 <HAL_TIMEx_PWMN_Start+0x104>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a1b      	ldr	r2, [pc, #108]	; (800b444 <HAL_TIMEx_PWMN_Start+0x158>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d009      	beq.n	800b3f0 <HAL_TIMEx_PWMN_Start+0x104>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a19      	ldr	r2, [pc, #100]	; (800b448 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d004      	beq.n	800b3f0 <HAL_TIMEx_PWMN_Start+0x104>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a18      	ldr	r2, [pc, #96]	; (800b44c <HAL_TIMEx_PWMN_Start+0x160>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d115      	bne.n	800b41c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689a      	ldr	r2, [r3, #8]
 800b3f6:	4b16      	ldr	r3, [pc, #88]	; (800b450 <HAL_TIMEx_PWMN_Start+0x164>)
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b06      	cmp	r3, #6
 800b400:	d015      	beq.n	800b42e <HAL_TIMEx_PWMN_Start+0x142>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b408:	d011      	beq.n	800b42e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f042 0201 	orr.w	r2, r2, #1
 800b418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b41a:	e008      	b.n	800b42e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 0201 	orr.w	r2, r2, #1
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	e000      	b.n	800b430 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b42e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	40012c00 	.word	0x40012c00
 800b440:	40000400 	.word	0x40000400
 800b444:	40000800 	.word	0x40000800
 800b448:	40013400 	.word	0x40013400
 800b44c:	40014000 	.word	0x40014000
 800b450:	00010007 	.word	0x00010007

0800b454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b464:	2b01      	cmp	r3, #1
 800b466:	d101      	bne.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b468:	2302      	movs	r3, #2
 800b46a:	e065      	b.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a2c      	ldr	r2, [pc, #176]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d004      	beq.n	800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a2b      	ldr	r2, [pc, #172]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d108      	bne.n	800b4b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b4a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a1b      	ldr	r2, [pc, #108]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d018      	beq.n	800b50c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e2:	d013      	beq.n	800b50c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a18      	ldr	r2, [pc, #96]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00e      	beq.n	800b50c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a17      	ldr	r2, [pc, #92]	; (800b550 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d009      	beq.n	800b50c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a12      	ldr	r2, [pc, #72]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d004      	beq.n	800b50c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a13      	ldr	r2, [pc, #76]	; (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d10c      	bne.n	800b526 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	40012c00 	.word	0x40012c00
 800b548:	40013400 	.word	0x40013400
 800b54c:	40000400 	.word	0x40000400
 800b550:	40000800 	.word	0x40000800
 800b554:	40014000 	.word	0x40014000

0800b558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b570:	2302      	movs	r3, #2
 800b572:	e087      	b.n	800b684 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	4313      	orrs	r3, r2
 800b588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	4313      	orrs	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	041b      	lsls	r3, r3, #16
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a27      	ldr	r2, [pc, #156]	; (800b690 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d004      	beq.n	800b602 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a25      	ldr	r2, [pc, #148]	; (800b694 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d106      	bne.n	800b610 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a1e      	ldr	r2, [pc, #120]	; (800b690 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d004      	beq.n	800b624 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a1d      	ldr	r2, [pc, #116]	; (800b694 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d126      	bne.n	800b672 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62e:	051b      	lsls	r3, r3, #20
 800b630:	4313      	orrs	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	4313      	orrs	r3, r2
 800b640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	4313      	orrs	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a0e      	ldr	r2, [pc, #56]	; (800b690 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d004      	beq.n	800b664 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a0d      	ldr	r2, [pc, #52]	; (800b694 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d106      	bne.n	800b672 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	40012c00 	.word	0x40012c00
 800b694:	40013400 	.word	0x40013400

0800b698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f003 031f 	and.w	r3, r3, #31
 800b736:	2204      	movs	r2, #4
 800b738:	fa02 f303 	lsl.w	r3, r2, r3
 800b73c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6a1a      	ldr	r2, [r3, #32]
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	43db      	mvns	r3, r3
 800b746:	401a      	ands	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6a1a      	ldr	r2, [r3, #32]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	f003 031f 	and.w	r3, r3, #31
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	fa01 f303 	lsl.w	r3, r1, r3
 800b75c:	431a      	orrs	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	621a      	str	r2, [r3, #32]
}
 800b762:	bf00      	nop
 800b764:	371c      	adds	r7, #28
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b082      	sub	sp, #8
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e042      	b.n	800b806 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7f9 fbf2 	bl	8004f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2224      	movs	r2, #36	; 0x24
 800b79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0201 	bic.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f8c3 	bl	800b93c <UART_SetConfig>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d101      	bne.n	800b7c0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e022      	b.n	800b806 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fb83 	bl	800bed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f042 0201 	orr.w	r2, r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fc0a 	bl	800c018 <UART_CheckIdleState>
 800b804:	4603      	mov	r3, r0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b08a      	sub	sp, #40	; 0x28
 800b812:	af02      	add	r7, sp, #8
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	603b      	str	r3, [r7, #0]
 800b81a:	4613      	mov	r3, r2
 800b81c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b824:	2b20      	cmp	r3, #32
 800b826:	f040 8083 	bne.w	800b930 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_UART_Transmit+0x28>
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e07b      	b.n	800b932 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b840:	2b01      	cmp	r3, #1
 800b842:	d101      	bne.n	800b848 <HAL_UART_Transmit+0x3a>
 800b844:	2302      	movs	r3, #2
 800b846:	e074      	b.n	800b932 <HAL_UART_Transmit+0x124>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2221      	movs	r2, #33	; 0x21
 800b85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b860:	f7f9 fdb2 	bl	80053c8 <HAL_GetTick>
 800b864:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	88fa      	ldrh	r2, [r7, #6]
 800b86a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	88fa      	ldrh	r2, [r7, #6]
 800b872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b87e:	d108      	bne.n	800b892 <HAL_UART_Transmit+0x84>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d104      	bne.n	800b892 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	61bb      	str	r3, [r7, #24]
 800b890:	e003      	b.n	800b89a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b896:	2300      	movs	r3, #0
 800b898:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b8a2:	e02c      	b.n	800b8fe <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2180      	movs	r1, #128	; 0x80
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 fbfd 	bl	800c0ae <UART_WaitOnFlagUntilTimeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e039      	b.n	800b932 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10b      	bne.n	800b8dc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	3302      	adds	r3, #2
 800b8d8:	61bb      	str	r3, [r7, #24]
 800b8da:	e007      	b.n	800b8ec <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	781a      	ldrb	r2, [r3, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b904:	b29b      	uxth	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1cc      	bne.n	800b8a4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2200      	movs	r2, #0
 800b912:	2140      	movs	r1, #64	; 0x40
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fbca 	bl	800c0ae <UART_WaitOnFlagUntilTimeout>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e006      	b.n	800b932 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2220      	movs	r2, #32
 800b928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	e000      	b.n	800b932 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b930:	2302      	movs	r3, #2
  }
}
 800b932:	4618      	mov	r0, r3
 800b934:	3720      	adds	r7, #32
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b93c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b940:	b08c      	sub	sp, #48	; 0x30
 800b942:	af00      	add	r7, sp, #0
 800b944:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	431a      	orrs	r2, r3
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	431a      	orrs	r2, r3
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	4313      	orrs	r3, r2
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4bab      	ldr	r3, [pc, #684]	; (800bc18 <UART_SetConfig+0x2dc>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	6812      	ldr	r2, [r2, #0]
 800b972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b974:	430b      	orrs	r3, r1
 800b976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4aa0      	ldr	r2, [pc, #640]	; (800bc1c <UART_SetConfig+0x2e0>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d004      	beq.n	800b9a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b9b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	6812      	ldr	r2, [r2, #0]
 800b9ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	f023 010f 	bic.w	r1, r3, #15
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a91      	ldr	r2, [pc, #580]	; (800bc20 <UART_SetConfig+0x2e4>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d125      	bne.n	800ba2c <UART_SetConfig+0xf0>
 800b9e0:	4b90      	ldr	r3, [pc, #576]	; (800bc24 <UART_SetConfig+0x2e8>)
 800b9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9e6:	f003 0303 	and.w	r3, r3, #3
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d81a      	bhi.n	800ba24 <UART_SetConfig+0xe8>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <UART_SetConfig+0xb8>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba05 	.word	0x0800ba05
 800b9f8:	0800ba15 	.word	0x0800ba15
 800b9fc:	0800ba0d 	.word	0x0800ba0d
 800ba00:	0800ba1d 	.word	0x0800ba1d
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba0a:	e0d6      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba12:	e0d2      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba14:	2304      	movs	r3, #4
 800ba16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba1a:	e0ce      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba1c:	2308      	movs	r3, #8
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba22:	e0ca      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba24:	2310      	movs	r3, #16
 800ba26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba2a:	e0c6      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a7d      	ldr	r2, [pc, #500]	; (800bc28 <UART_SetConfig+0x2ec>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d138      	bne.n	800baa8 <UART_SetConfig+0x16c>
 800ba36:	4b7b      	ldr	r3, [pc, #492]	; (800bc24 <UART_SetConfig+0x2e8>)
 800ba38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba3c:	f003 030c 	and.w	r3, r3, #12
 800ba40:	2b0c      	cmp	r3, #12
 800ba42:	d82d      	bhi.n	800baa0 <UART_SetConfig+0x164>
 800ba44:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <UART_SetConfig+0x110>)
 800ba46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4a:	bf00      	nop
 800ba4c:	0800ba81 	.word	0x0800ba81
 800ba50:	0800baa1 	.word	0x0800baa1
 800ba54:	0800baa1 	.word	0x0800baa1
 800ba58:	0800baa1 	.word	0x0800baa1
 800ba5c:	0800ba91 	.word	0x0800ba91
 800ba60:	0800baa1 	.word	0x0800baa1
 800ba64:	0800baa1 	.word	0x0800baa1
 800ba68:	0800baa1 	.word	0x0800baa1
 800ba6c:	0800ba89 	.word	0x0800ba89
 800ba70:	0800baa1 	.word	0x0800baa1
 800ba74:	0800baa1 	.word	0x0800baa1
 800ba78:	0800baa1 	.word	0x0800baa1
 800ba7c:	0800ba99 	.word	0x0800ba99
 800ba80:	2300      	movs	r3, #0
 800ba82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba86:	e098      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba8e:	e094      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba90:	2304      	movs	r3, #4
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba96:	e090      	b.n	800bbba <UART_SetConfig+0x27e>
 800ba98:	2308      	movs	r3, #8
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9e:	e08c      	b.n	800bbba <UART_SetConfig+0x27e>
 800baa0:	2310      	movs	r3, #16
 800baa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa6:	e088      	b.n	800bbba <UART_SetConfig+0x27e>
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a5f      	ldr	r2, [pc, #380]	; (800bc2c <UART_SetConfig+0x2f0>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d125      	bne.n	800bafe <UART_SetConfig+0x1c2>
 800bab2:	4b5c      	ldr	r3, [pc, #368]	; (800bc24 <UART_SetConfig+0x2e8>)
 800bab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800babc:	2b30      	cmp	r3, #48	; 0x30
 800babe:	d016      	beq.n	800baee <UART_SetConfig+0x1b2>
 800bac0:	2b30      	cmp	r3, #48	; 0x30
 800bac2:	d818      	bhi.n	800baf6 <UART_SetConfig+0x1ba>
 800bac4:	2b20      	cmp	r3, #32
 800bac6:	d00a      	beq.n	800bade <UART_SetConfig+0x1a2>
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d814      	bhi.n	800baf6 <UART_SetConfig+0x1ba>
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <UART_SetConfig+0x19a>
 800bad0:	2b10      	cmp	r3, #16
 800bad2:	d008      	beq.n	800bae6 <UART_SetConfig+0x1aa>
 800bad4:	e00f      	b.n	800baf6 <UART_SetConfig+0x1ba>
 800bad6:	2300      	movs	r3, #0
 800bad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800badc:	e06d      	b.n	800bbba <UART_SetConfig+0x27e>
 800bade:	2302      	movs	r3, #2
 800bae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bae4:	e069      	b.n	800bbba <UART_SetConfig+0x27e>
 800bae6:	2304      	movs	r3, #4
 800bae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baec:	e065      	b.n	800bbba <UART_SetConfig+0x27e>
 800baee:	2308      	movs	r3, #8
 800baf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf4:	e061      	b.n	800bbba <UART_SetConfig+0x27e>
 800baf6:	2310      	movs	r3, #16
 800baf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafc:	e05d      	b.n	800bbba <UART_SetConfig+0x27e>
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a4b      	ldr	r2, [pc, #300]	; (800bc30 <UART_SetConfig+0x2f4>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d125      	bne.n	800bb54 <UART_SetConfig+0x218>
 800bb08:	4b46      	ldr	r3, [pc, #280]	; (800bc24 <UART_SetConfig+0x2e8>)
 800bb0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb12:	2bc0      	cmp	r3, #192	; 0xc0
 800bb14:	d016      	beq.n	800bb44 <UART_SetConfig+0x208>
 800bb16:	2bc0      	cmp	r3, #192	; 0xc0
 800bb18:	d818      	bhi.n	800bb4c <UART_SetConfig+0x210>
 800bb1a:	2b80      	cmp	r3, #128	; 0x80
 800bb1c:	d00a      	beq.n	800bb34 <UART_SetConfig+0x1f8>
 800bb1e:	2b80      	cmp	r3, #128	; 0x80
 800bb20:	d814      	bhi.n	800bb4c <UART_SetConfig+0x210>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <UART_SetConfig+0x1f0>
 800bb26:	2b40      	cmp	r3, #64	; 0x40
 800bb28:	d008      	beq.n	800bb3c <UART_SetConfig+0x200>
 800bb2a:	e00f      	b.n	800bb4c <UART_SetConfig+0x210>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb32:	e042      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb34:	2302      	movs	r3, #2
 800bb36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb3a:	e03e      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb42:	e03a      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb44:	2308      	movs	r3, #8
 800bb46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb4a:	e036      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb4c:	2310      	movs	r3, #16
 800bb4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb52:	e032      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a30      	ldr	r2, [pc, #192]	; (800bc1c <UART_SetConfig+0x2e0>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d12a      	bne.n	800bbb4 <UART_SetConfig+0x278>
 800bb5e:	4b31      	ldr	r3, [pc, #196]	; (800bc24 <UART_SetConfig+0x2e8>)
 800bb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb6c:	d01a      	beq.n	800bba4 <UART_SetConfig+0x268>
 800bb6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb72:	d81b      	bhi.n	800bbac <UART_SetConfig+0x270>
 800bb74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb78:	d00c      	beq.n	800bb94 <UART_SetConfig+0x258>
 800bb7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb7e:	d815      	bhi.n	800bbac <UART_SetConfig+0x270>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d003      	beq.n	800bb8c <UART_SetConfig+0x250>
 800bb84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb88:	d008      	beq.n	800bb9c <UART_SetConfig+0x260>
 800bb8a:	e00f      	b.n	800bbac <UART_SetConfig+0x270>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb92:	e012      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb94:	2302      	movs	r3, #2
 800bb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb9a:	e00e      	b.n	800bbba <UART_SetConfig+0x27e>
 800bb9c:	2304      	movs	r3, #4
 800bb9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bba2:	e00a      	b.n	800bbba <UART_SetConfig+0x27e>
 800bba4:	2308      	movs	r3, #8
 800bba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbaa:	e006      	b.n	800bbba <UART_SetConfig+0x27e>
 800bbac:	2310      	movs	r3, #16
 800bbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbb2:	e002      	b.n	800bbba <UART_SetConfig+0x27e>
 800bbb4:	2310      	movs	r3, #16
 800bbb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a17      	ldr	r2, [pc, #92]	; (800bc1c <UART_SetConfig+0x2e0>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	f040 80a8 	bne.w	800bd16 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbca:	2b08      	cmp	r3, #8
 800bbcc:	d834      	bhi.n	800bc38 <UART_SetConfig+0x2fc>
 800bbce:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <UART_SetConfig+0x298>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbf9 	.word	0x0800bbf9
 800bbd8:	0800bc39 	.word	0x0800bc39
 800bbdc:	0800bc01 	.word	0x0800bc01
 800bbe0:	0800bc39 	.word	0x0800bc39
 800bbe4:	0800bc07 	.word	0x0800bc07
 800bbe8:	0800bc39 	.word	0x0800bc39
 800bbec:	0800bc39 	.word	0x0800bc39
 800bbf0:	0800bc39 	.word	0x0800bc39
 800bbf4:	0800bc0f 	.word	0x0800bc0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbf8:	f7fd f95c 	bl	8008eb4 <HAL_RCC_GetPCLK1Freq>
 800bbfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbfe:	e021      	b.n	800bc44 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc00:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <UART_SetConfig+0x2f8>)
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc04:	e01e      	b.n	800bc44 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc06:	f7fd f8e7 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 800bc0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc0c:	e01a      	b.n	800bc44 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc14:	e016      	b.n	800bc44 <UART_SetConfig+0x308>
 800bc16:	bf00      	nop
 800bc18:	cfff69f3 	.word	0xcfff69f3
 800bc1c:	40008000 	.word	0x40008000
 800bc20:	40013800 	.word	0x40013800
 800bc24:	40021000 	.word	0x40021000
 800bc28:	40004400 	.word	0x40004400
 800bc2c:	40004800 	.word	0x40004800
 800bc30:	40004c00 	.word	0x40004c00
 800bc34:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 812a 	beq.w	800bea0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	4a9e      	ldr	r2, [pc, #632]	; (800becc <UART_SetConfig+0x590>)
 800bc52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc5e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	4613      	mov	r3, r2
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	4413      	add	r3, r2
 800bc6a:	69ba      	ldr	r2, [r7, #24]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d305      	bcc.n	800bc7c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d903      	bls.n	800bc84 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc82:	e10d      	b.n	800bea0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	2200      	movs	r2, #0
 800bc88:	60bb      	str	r3, [r7, #8]
 800bc8a:	60fa      	str	r2, [r7, #12]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	4a8e      	ldr	r2, [pc, #568]	; (800becc <UART_SetConfig+0x590>)
 800bc92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2200      	movs	r2, #0
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	607a      	str	r2, [r7, #4]
 800bc9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bca6:	f7f4 fff7 	bl	8000c98 <__aeabi_uldivmod>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4610      	mov	r0, r2
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	020b      	lsls	r3, r1, #8
 800bcbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcc0:	0202      	lsls	r2, r0, #8
 800bcc2:	6979      	ldr	r1, [r7, #20]
 800bcc4:	6849      	ldr	r1, [r1, #4]
 800bcc6:	0849      	lsrs	r1, r1, #1
 800bcc8:	2000      	movs	r0, #0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4605      	mov	r5, r0
 800bcce:	eb12 0804 	adds.w	r8, r2, r4
 800bcd2:	eb43 0905 	adc.w	r9, r3, r5
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	469a      	mov	sl, r3
 800bcde:	4693      	mov	fp, r2
 800bce0:	4652      	mov	r2, sl
 800bce2:	465b      	mov	r3, fp
 800bce4:	4640      	mov	r0, r8
 800bce6:	4649      	mov	r1, r9
 800bce8:	f7f4 ffd6 	bl	8000c98 <__aeabi_uldivmod>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcfa:	d308      	bcc.n	800bd0e <UART_SetConfig+0x3d2>
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd02:	d204      	bcs.n	800bd0e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6a3a      	ldr	r2, [r7, #32]
 800bd0a:	60da      	str	r2, [r3, #12]
 800bd0c:	e0c8      	b.n	800bea0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd14:	e0c4      	b.n	800bea0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd1e:	d167      	bne.n	800bdf0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800bd20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d828      	bhi.n	800bd7a <UART_SetConfig+0x43e>
 800bd28:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <UART_SetConfig+0x3f4>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800bd55 	.word	0x0800bd55
 800bd34:	0800bd5d 	.word	0x0800bd5d
 800bd38:	0800bd65 	.word	0x0800bd65
 800bd3c:	0800bd7b 	.word	0x0800bd7b
 800bd40:	0800bd6b 	.word	0x0800bd6b
 800bd44:	0800bd7b 	.word	0x0800bd7b
 800bd48:	0800bd7b 	.word	0x0800bd7b
 800bd4c:	0800bd7b 	.word	0x0800bd7b
 800bd50:	0800bd73 	.word	0x0800bd73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd54:	f7fd f8ae 	bl	8008eb4 <HAL_RCC_GetPCLK1Freq>
 800bd58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd5a:	e014      	b.n	800bd86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd5c:	f7fd f8c0 	bl	8008ee0 <HAL_RCC_GetPCLK2Freq>
 800bd60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd62:	e010      	b.n	800bd86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd64:	4b5a      	ldr	r3, [pc, #360]	; (800bed0 <UART_SetConfig+0x594>)
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd68:	e00d      	b.n	800bd86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd6a:	f7fd f835 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 800bd6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd70:	e009      	b.n	800bd86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd78:	e005      	b.n	800bd86 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 8089 	beq.w	800bea0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd92:	4a4e      	ldr	r2, [pc, #312]	; (800becc <UART_SetConfig+0x590>)
 800bd94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bda0:	005a      	lsls	r2, r3, #1
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	085b      	lsrs	r3, r3, #1
 800bda8:	441a      	add	r2, r3
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	2b0f      	cmp	r3, #15
 800bdb8:	d916      	bls.n	800bde8 <UART_SetConfig+0x4ac>
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc0:	d212      	bcs.n	800bde8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f023 030f 	bic.w	r3, r3, #15
 800bdca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	085b      	lsrs	r3, r3, #1
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	8bfb      	ldrh	r3, [r7, #30]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	8bfa      	ldrh	r2, [r7, #30]
 800bde4:	60da      	str	r2, [r3, #12]
 800bde6:	e05b      	b.n	800bea0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bdee:	e057      	b.n	800bea0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bdf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d828      	bhi.n	800be4a <UART_SetConfig+0x50e>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <UART_SetConfig+0x4c4>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800be25 	.word	0x0800be25
 800be04:	0800be2d 	.word	0x0800be2d
 800be08:	0800be35 	.word	0x0800be35
 800be0c:	0800be4b 	.word	0x0800be4b
 800be10:	0800be3b 	.word	0x0800be3b
 800be14:	0800be4b 	.word	0x0800be4b
 800be18:	0800be4b 	.word	0x0800be4b
 800be1c:	0800be4b 	.word	0x0800be4b
 800be20:	0800be43 	.word	0x0800be43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be24:	f7fd f846 	bl	8008eb4 <HAL_RCC_GetPCLK1Freq>
 800be28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be2a:	e014      	b.n	800be56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be2c:	f7fd f858 	bl	8008ee0 <HAL_RCC_GetPCLK2Freq>
 800be30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be32:	e010      	b.n	800be56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be34:	4b26      	ldr	r3, [pc, #152]	; (800bed0 <UART_SetConfig+0x594>)
 800be36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be38:	e00d      	b.n	800be56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be3a:	f7fc ffcd 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 800be3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be40:	e009      	b.n	800be56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be48:	e005      	b.n	800be56 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be54:	bf00      	nop
    }

    if (pclk != 0U)
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d021      	beq.n	800bea0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	4a1a      	ldr	r2, [pc, #104]	; (800becc <UART_SetConfig+0x590>)
 800be62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be66:	461a      	mov	r2, r3
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	085b      	lsrs	r3, r3, #1
 800be74:	441a      	add	r2, r3
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	2b0f      	cmp	r3, #15
 800be84:	d909      	bls.n	800be9a <UART_SetConfig+0x55e>
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be8c:	d205      	bcs.n	800be9a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	b29a      	uxth	r2, r3
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	60da      	str	r2, [r3, #12]
 800be98:	e002      	b.n	800bea0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2201      	movs	r2, #1
 800beac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2200      	movs	r2, #0
 800beb4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2200      	movs	r2, #0
 800beba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bebc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3730      	adds	r7, #48	; 0x30
 800bec4:	46bd      	mov	sp, r7
 800bec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beca:	bf00      	nop
 800becc:	080100ec 	.word	0x080100ec
 800bed0:	00f42400 	.word	0x00f42400

0800bed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00a      	beq.n	800befe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	f003 0308 	and.w	r3, r3, #8
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf68:	f003 0310 	and.w	r3, r3, #16
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	f003 0320 	and.w	r3, r3, #32
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d01a      	beq.n	800bfea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd2:	d10a      	bne.n	800bfea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	430a      	orrs	r2, r1
 800c00a:	605a      	str	r2, [r3, #4]
  }
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c028:	f7f9 f9ce 	bl	80053c8 <HAL_GetTick>
 800c02c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b08      	cmp	r3, #8
 800c03a:	d10e      	bne.n	800c05a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c03c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f82f 	bl	800c0ae <UART_WaitOnFlagUntilTimeout>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c056:	2303      	movs	r3, #3
 800c058:	e025      	b.n	800c0a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b04      	cmp	r3, #4
 800c066:	d10e      	bne.n	800c086 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f819 	bl	800c0ae <UART_WaitOnFlagUntilTimeout>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e00f      	b.n	800c0a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b09c      	sub	sp, #112	; 0x70
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	603b      	str	r3, [r7, #0]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0be:	e0a9      	b.n	800c214 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	f000 80a5 	beq.w	800c214 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ca:	f7f9 f97d 	bl	80053c8 <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d302      	bcc.n	800c0e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800c0da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d140      	bne.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0f4:	667b      	str	r3, [r7, #100]	; 0x64
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c100:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e6      	bne.n	800c0e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f023 0301 	bic.w	r3, r3, #1
 800c128:	663b      	str	r3, [r7, #96]	; 0x60
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3308      	adds	r3, #8
 800c130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c132:	64ba      	str	r2, [r7, #72]	; 0x48
 800c134:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e5      	bne.n	800c112 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2220      	movs	r2, #32
 800c14a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2220      	movs	r2, #32
 800c152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e069      	b.n	800c236 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d051      	beq.n	800c214 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c17a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c17e:	d149      	bne.n	800c214 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c188:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c19e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e6      	bne.n	800c18a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3308      	adds	r3, #8
 800c1c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	e853 3f00 	ldrex	r3, [r3]
 800c1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3308      	adds	r3, #8
 800c1da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1dc:	623a      	str	r2, [r7, #32]
 800c1de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e0:	69f9      	ldr	r1, [r7, #28]
 800c1e2:	6a3a      	ldr	r2, [r7, #32]
 800c1e4:	e841 2300 	strex	r3, r2, [r1]
 800c1e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1e5      	bne.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2220      	movs	r2, #32
 800c204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c210:	2303      	movs	r3, #3
 800c212:	e010      	b.n	800c236 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	69da      	ldr	r2, [r3, #28]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	4013      	ands	r3, r2
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	429a      	cmp	r2, r3
 800c222:	bf0c      	ite	eq
 800c224:	2301      	moveq	r3, #1
 800c226:	2300      	movne	r3, #0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	461a      	mov	r2, r3
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	429a      	cmp	r2, r3
 800c230:	f43f af46 	beq.w	800c0c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3770      	adds	r7, #112	; 0x70
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d101      	bne.n	800c254 <HAL_UARTEx_DisableFifoMode+0x16>
 800c250:	2302      	movs	r3, #2
 800c252:	e027      	b.n	800c2a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2224      	movs	r2, #36	; 0x24
 800c260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f022 0201 	bic.w	r2, r2, #1
 800c27a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c282:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2220      	movs	r2, #32
 800c296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d101      	bne.n	800c2c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e02d      	b.n	800c324 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2224      	movs	r2, #36	; 0x24
 800c2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f022 0201 	bic.w	r2, r2, #1
 800c2ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	430a      	orrs	r2, r1
 800c302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f84f 	bl	800c3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d101      	bne.n	800c344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c340:	2302      	movs	r3, #2
 800c342:	e02d      	b.n	800c3a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2224      	movs	r2, #36	; 0x24
 800c350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f022 0201 	bic.w	r2, r2, #1
 800c36a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f811 	bl	800c3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2220      	movs	r2, #32
 800c392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d108      	bne.n	800c3ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3c8:	e031      	b.n	800c42e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3ce:	2308      	movs	r3, #8
 800c3d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	0e5b      	lsrs	r3, r3, #25
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	f003 0307 	and.w	r3, r3, #7
 800c3e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	0f5b      	lsrs	r3, r3, #29
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	7b3a      	ldrb	r2, [r7, #12]
 800c3f6:	4911      	ldr	r1, [pc, #68]	; (800c43c <UARTEx_SetNbDataToProcess+0x94>)
 800c3f8:	5c8a      	ldrb	r2, [r1, r2]
 800c3fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3fe:	7b3a      	ldrb	r2, [r7, #12]
 800c400:	490f      	ldr	r1, [pc, #60]	; (800c440 <UARTEx_SetNbDataToProcess+0x98>)
 800c402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c404:	fb93 f3f2 	sdiv	r3, r3, r2
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	7b7a      	ldrb	r2, [r7, #13]
 800c414:	4909      	ldr	r1, [pc, #36]	; (800c43c <UARTEx_SetNbDataToProcess+0x94>)
 800c416:	5c8a      	ldrb	r2, [r1, r2]
 800c418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c41c:	7b7a      	ldrb	r2, [r7, #13]
 800c41e:	4908      	ldr	r1, [pc, #32]	; (800c440 <UARTEx_SetNbDataToProcess+0x98>)
 800c420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c422:	fb93 f3f2 	sdiv	r3, r3, r2
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c42e:	bf00      	nop
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	08010104 	.word	0x08010104
 800c440:	0801010c 	.word	0x0801010c

0800c444 <__errno>:
 800c444:	4b01      	ldr	r3, [pc, #4]	; (800c44c <__errno+0x8>)
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	2000002c 	.word	0x2000002c

0800c450 <__libc_init_array>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	4d0d      	ldr	r5, [pc, #52]	; (800c488 <__libc_init_array+0x38>)
 800c454:	4c0d      	ldr	r4, [pc, #52]	; (800c48c <__libc_init_array+0x3c>)
 800c456:	1b64      	subs	r4, r4, r5
 800c458:	10a4      	asrs	r4, r4, #2
 800c45a:	2600      	movs	r6, #0
 800c45c:	42a6      	cmp	r6, r4
 800c45e:	d109      	bne.n	800c474 <__libc_init_array+0x24>
 800c460:	4d0b      	ldr	r5, [pc, #44]	; (800c490 <__libc_init_array+0x40>)
 800c462:	4c0c      	ldr	r4, [pc, #48]	; (800c494 <__libc_init_array+0x44>)
 800c464:	f003 fdba 	bl	800ffdc <_init>
 800c468:	1b64      	subs	r4, r4, r5
 800c46a:	10a4      	asrs	r4, r4, #2
 800c46c:	2600      	movs	r6, #0
 800c46e:	42a6      	cmp	r6, r4
 800c470:	d105      	bne.n	800c47e <__libc_init_array+0x2e>
 800c472:	bd70      	pop	{r4, r5, r6, pc}
 800c474:	f855 3b04 	ldr.w	r3, [r5], #4
 800c478:	4798      	blx	r3
 800c47a:	3601      	adds	r6, #1
 800c47c:	e7ee      	b.n	800c45c <__libc_init_array+0xc>
 800c47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c482:	4798      	blx	r3
 800c484:	3601      	adds	r6, #1
 800c486:	e7f2      	b.n	800c46e <__libc_init_array+0x1e>
 800c488:	080108cc 	.word	0x080108cc
 800c48c:	080108cc 	.word	0x080108cc
 800c490:	080108cc 	.word	0x080108cc
 800c494:	080108d0 	.word	0x080108d0

0800c498 <memset>:
 800c498:	4402      	add	r2, r0
 800c49a:	4603      	mov	r3, r0
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d100      	bne.n	800c4a2 <memset+0xa>
 800c4a0:	4770      	bx	lr
 800c4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4a6:	e7f9      	b.n	800c49c <memset+0x4>

0800c4a8 <__cvt>:
 800c4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ac:	ec55 4b10 	vmov	r4, r5, d0
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	460e      	mov	r6, r1
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	bfbb      	ittet	lt
 800c4ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c4be:	461d      	movlt	r5, r3
 800c4c0:	2300      	movge	r3, #0
 800c4c2:	232d      	movlt	r3, #45	; 0x2d
 800c4c4:	700b      	strb	r3, [r1, #0]
 800c4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c4cc:	4691      	mov	r9, r2
 800c4ce:	f023 0820 	bic.w	r8, r3, #32
 800c4d2:	bfbc      	itt	lt
 800c4d4:	4622      	movlt	r2, r4
 800c4d6:	4614      	movlt	r4, r2
 800c4d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4dc:	d005      	beq.n	800c4ea <__cvt+0x42>
 800c4de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c4e2:	d100      	bne.n	800c4e6 <__cvt+0x3e>
 800c4e4:	3601      	adds	r6, #1
 800c4e6:	2102      	movs	r1, #2
 800c4e8:	e000      	b.n	800c4ec <__cvt+0x44>
 800c4ea:	2103      	movs	r1, #3
 800c4ec:	ab03      	add	r3, sp, #12
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	ab02      	add	r3, sp, #8
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	ec45 4b10 	vmov	d0, r4, r5
 800c4f8:	4653      	mov	r3, sl
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	f000 fcec 	bl	800ced8 <_dtoa_r>
 800c500:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c504:	4607      	mov	r7, r0
 800c506:	d102      	bne.n	800c50e <__cvt+0x66>
 800c508:	f019 0f01 	tst.w	r9, #1
 800c50c:	d022      	beq.n	800c554 <__cvt+0xac>
 800c50e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c512:	eb07 0906 	add.w	r9, r7, r6
 800c516:	d110      	bne.n	800c53a <__cvt+0x92>
 800c518:	783b      	ldrb	r3, [r7, #0]
 800c51a:	2b30      	cmp	r3, #48	; 0x30
 800c51c:	d10a      	bne.n	800c534 <__cvt+0x8c>
 800c51e:	2200      	movs	r2, #0
 800c520:	2300      	movs	r3, #0
 800c522:	4620      	mov	r0, r4
 800c524:	4629      	mov	r1, r5
 800c526:	f7f4 faf7 	bl	8000b18 <__aeabi_dcmpeq>
 800c52a:	b918      	cbnz	r0, 800c534 <__cvt+0x8c>
 800c52c:	f1c6 0601 	rsb	r6, r6, #1
 800c530:	f8ca 6000 	str.w	r6, [sl]
 800c534:	f8da 3000 	ldr.w	r3, [sl]
 800c538:	4499      	add	r9, r3
 800c53a:	2200      	movs	r2, #0
 800c53c:	2300      	movs	r3, #0
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f7f4 fae9 	bl	8000b18 <__aeabi_dcmpeq>
 800c546:	b108      	cbz	r0, 800c54c <__cvt+0xa4>
 800c548:	f8cd 900c 	str.w	r9, [sp, #12]
 800c54c:	2230      	movs	r2, #48	; 0x30
 800c54e:	9b03      	ldr	r3, [sp, #12]
 800c550:	454b      	cmp	r3, r9
 800c552:	d307      	bcc.n	800c564 <__cvt+0xbc>
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c558:	1bdb      	subs	r3, r3, r7
 800c55a:	4638      	mov	r0, r7
 800c55c:	6013      	str	r3, [r2, #0]
 800c55e:	b004      	add	sp, #16
 800c560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c564:	1c59      	adds	r1, r3, #1
 800c566:	9103      	str	r1, [sp, #12]
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	e7f0      	b.n	800c54e <__cvt+0xa6>

0800c56c <__exponent>:
 800c56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c56e:	4603      	mov	r3, r0
 800c570:	2900      	cmp	r1, #0
 800c572:	bfb8      	it	lt
 800c574:	4249      	neglt	r1, r1
 800c576:	f803 2b02 	strb.w	r2, [r3], #2
 800c57a:	bfb4      	ite	lt
 800c57c:	222d      	movlt	r2, #45	; 0x2d
 800c57e:	222b      	movge	r2, #43	; 0x2b
 800c580:	2909      	cmp	r1, #9
 800c582:	7042      	strb	r2, [r0, #1]
 800c584:	dd2a      	ble.n	800c5dc <__exponent+0x70>
 800c586:	f10d 0407 	add.w	r4, sp, #7
 800c58a:	46a4      	mov	ip, r4
 800c58c:	270a      	movs	r7, #10
 800c58e:	46a6      	mov	lr, r4
 800c590:	460a      	mov	r2, r1
 800c592:	fb91 f6f7 	sdiv	r6, r1, r7
 800c596:	fb07 1516 	mls	r5, r7, r6, r1
 800c59a:	3530      	adds	r5, #48	; 0x30
 800c59c:	2a63      	cmp	r2, #99	; 0x63
 800c59e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	dcf1      	bgt.n	800c58e <__exponent+0x22>
 800c5aa:	3130      	adds	r1, #48	; 0x30
 800c5ac:	f1ae 0502 	sub.w	r5, lr, #2
 800c5b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c5b4:	1c44      	adds	r4, r0, #1
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4561      	cmp	r1, ip
 800c5ba:	d30a      	bcc.n	800c5d2 <__exponent+0x66>
 800c5bc:	f10d 0209 	add.w	r2, sp, #9
 800c5c0:	eba2 020e 	sub.w	r2, r2, lr
 800c5c4:	4565      	cmp	r5, ip
 800c5c6:	bf88      	it	hi
 800c5c8:	2200      	movhi	r2, #0
 800c5ca:	4413      	add	r3, r2
 800c5cc:	1a18      	subs	r0, r3, r0
 800c5ce:	b003      	add	sp, #12
 800c5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c5da:	e7ed      	b.n	800c5b8 <__exponent+0x4c>
 800c5dc:	2330      	movs	r3, #48	; 0x30
 800c5de:	3130      	adds	r1, #48	; 0x30
 800c5e0:	7083      	strb	r3, [r0, #2]
 800c5e2:	70c1      	strb	r1, [r0, #3]
 800c5e4:	1d03      	adds	r3, r0, #4
 800c5e6:	e7f1      	b.n	800c5cc <__exponent+0x60>

0800c5e8 <_printf_float>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	ed2d 8b02 	vpush	{d8}
 800c5f0:	b08d      	sub	sp, #52	; 0x34
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c5f8:	4616      	mov	r6, r2
 800c5fa:	461f      	mov	r7, r3
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	f001 fa59 	bl	800dab4 <_localeconv_r>
 800c602:	f8d0 a000 	ldr.w	sl, [r0]
 800c606:	4650      	mov	r0, sl
 800c608:	f7f3 fe0a 	bl	8000220 <strlen>
 800c60c:	2300      	movs	r3, #0
 800c60e:	930a      	str	r3, [sp, #40]	; 0x28
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	9305      	str	r3, [sp, #20]
 800c614:	f8d8 3000 	ldr.w	r3, [r8]
 800c618:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c61c:	3307      	adds	r3, #7
 800c61e:	f023 0307 	bic.w	r3, r3, #7
 800c622:	f103 0208 	add.w	r2, r3, #8
 800c626:	f8c8 2000 	str.w	r2, [r8]
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c632:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c63a:	9307      	str	r3, [sp, #28]
 800c63c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c640:	ee08 0a10 	vmov	s16, r0
 800c644:	4b9f      	ldr	r3, [pc, #636]	; (800c8c4 <_printf_float+0x2dc>)
 800c646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295
 800c64e:	f7f4 fa95 	bl	8000b7c <__aeabi_dcmpun>
 800c652:	bb88      	cbnz	r0, 800c6b8 <_printf_float+0xd0>
 800c654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c658:	4b9a      	ldr	r3, [pc, #616]	; (800c8c4 <_printf_float+0x2dc>)
 800c65a:	f04f 32ff 	mov.w	r2, #4294967295
 800c65e:	f7f4 fa6f 	bl	8000b40 <__aeabi_dcmple>
 800c662:	bb48      	cbnz	r0, 800c6b8 <_printf_float+0xd0>
 800c664:	2200      	movs	r2, #0
 800c666:	2300      	movs	r3, #0
 800c668:	4640      	mov	r0, r8
 800c66a:	4649      	mov	r1, r9
 800c66c:	f7f4 fa5e 	bl	8000b2c <__aeabi_dcmplt>
 800c670:	b110      	cbz	r0, 800c678 <_printf_float+0x90>
 800c672:	232d      	movs	r3, #45	; 0x2d
 800c674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c678:	4b93      	ldr	r3, [pc, #588]	; (800c8c8 <_printf_float+0x2e0>)
 800c67a:	4894      	ldr	r0, [pc, #592]	; (800c8cc <_printf_float+0x2e4>)
 800c67c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c680:	bf94      	ite	ls
 800c682:	4698      	movls	r8, r3
 800c684:	4680      	movhi	r8, r0
 800c686:	2303      	movs	r3, #3
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	9b05      	ldr	r3, [sp, #20]
 800c68c:	f023 0204 	bic.w	r2, r3, #4
 800c690:	6022      	str	r2, [r4, #0]
 800c692:	f04f 0900 	mov.w	r9, #0
 800c696:	9700      	str	r7, [sp, #0]
 800c698:	4633      	mov	r3, r6
 800c69a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c69c:	4621      	mov	r1, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f9d8 	bl	800ca54 <_printf_common>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	f040 8090 	bne.w	800c7ca <_printf_float+0x1e2>
 800c6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ae:	b00d      	add	sp, #52	; 0x34
 800c6b0:	ecbd 8b02 	vpop	{d8}
 800c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b8:	4642      	mov	r2, r8
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	4640      	mov	r0, r8
 800c6be:	4649      	mov	r1, r9
 800c6c0:	f7f4 fa5c 	bl	8000b7c <__aeabi_dcmpun>
 800c6c4:	b140      	cbz	r0, 800c6d8 <_printf_float+0xf0>
 800c6c6:	464b      	mov	r3, r9
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	bfbc      	itt	lt
 800c6cc:	232d      	movlt	r3, #45	; 0x2d
 800c6ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c6d2:	487f      	ldr	r0, [pc, #508]	; (800c8d0 <_printf_float+0x2e8>)
 800c6d4:	4b7f      	ldr	r3, [pc, #508]	; (800c8d4 <_printf_float+0x2ec>)
 800c6d6:	e7d1      	b.n	800c67c <_printf_float+0x94>
 800c6d8:	6863      	ldr	r3, [r4, #4]
 800c6da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c6de:	9206      	str	r2, [sp, #24]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	d13f      	bne.n	800c764 <_printf_float+0x17c>
 800c6e4:	2306      	movs	r3, #6
 800c6e6:	6063      	str	r3, [r4, #4]
 800c6e8:	9b05      	ldr	r3, [sp, #20]
 800c6ea:	6861      	ldr	r1, [r4, #4]
 800c6ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	9303      	str	r3, [sp, #12]
 800c6f4:	ab0a      	add	r3, sp, #40	; 0x28
 800c6f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c6fa:	ab09      	add	r3, sp, #36	; 0x24
 800c6fc:	ec49 8b10 	vmov	d0, r8, r9
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	6022      	str	r2, [r4, #0]
 800c704:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c708:	4628      	mov	r0, r5
 800c70a:	f7ff fecd 	bl	800c4a8 <__cvt>
 800c70e:	9b06      	ldr	r3, [sp, #24]
 800c710:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c712:	2b47      	cmp	r3, #71	; 0x47
 800c714:	4680      	mov	r8, r0
 800c716:	d108      	bne.n	800c72a <_printf_float+0x142>
 800c718:	1cc8      	adds	r0, r1, #3
 800c71a:	db02      	blt.n	800c722 <_printf_float+0x13a>
 800c71c:	6863      	ldr	r3, [r4, #4]
 800c71e:	4299      	cmp	r1, r3
 800c720:	dd41      	ble.n	800c7a6 <_printf_float+0x1be>
 800c722:	f1ab 0b02 	sub.w	fp, fp, #2
 800c726:	fa5f fb8b 	uxtb.w	fp, fp
 800c72a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c72e:	d820      	bhi.n	800c772 <_printf_float+0x18a>
 800c730:	3901      	subs	r1, #1
 800c732:	465a      	mov	r2, fp
 800c734:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c738:	9109      	str	r1, [sp, #36]	; 0x24
 800c73a:	f7ff ff17 	bl	800c56c <__exponent>
 800c73e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c740:	1813      	adds	r3, r2, r0
 800c742:	2a01      	cmp	r2, #1
 800c744:	4681      	mov	r9, r0
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	dc02      	bgt.n	800c750 <_printf_float+0x168>
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	07d2      	lsls	r2, r2, #31
 800c74e:	d501      	bpl.n	800c754 <_printf_float+0x16c>
 800c750:	3301      	adds	r3, #1
 800c752:	6123      	str	r3, [r4, #16]
 800c754:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d09c      	beq.n	800c696 <_printf_float+0xae>
 800c75c:	232d      	movs	r3, #45	; 0x2d
 800c75e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c762:	e798      	b.n	800c696 <_printf_float+0xae>
 800c764:	9a06      	ldr	r2, [sp, #24]
 800c766:	2a47      	cmp	r2, #71	; 0x47
 800c768:	d1be      	bne.n	800c6e8 <_printf_float+0x100>
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1bc      	bne.n	800c6e8 <_printf_float+0x100>
 800c76e:	2301      	movs	r3, #1
 800c770:	e7b9      	b.n	800c6e6 <_printf_float+0xfe>
 800c772:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c776:	d118      	bne.n	800c7aa <_printf_float+0x1c2>
 800c778:	2900      	cmp	r1, #0
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	dd0b      	ble.n	800c796 <_printf_float+0x1ae>
 800c77e:	6121      	str	r1, [r4, #16]
 800c780:	b913      	cbnz	r3, 800c788 <_printf_float+0x1a0>
 800c782:	6822      	ldr	r2, [r4, #0]
 800c784:	07d0      	lsls	r0, r2, #31
 800c786:	d502      	bpl.n	800c78e <_printf_float+0x1a6>
 800c788:	3301      	adds	r3, #1
 800c78a:	440b      	add	r3, r1
 800c78c:	6123      	str	r3, [r4, #16]
 800c78e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c790:	f04f 0900 	mov.w	r9, #0
 800c794:	e7de      	b.n	800c754 <_printf_float+0x16c>
 800c796:	b913      	cbnz	r3, 800c79e <_printf_float+0x1b6>
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	07d2      	lsls	r2, r2, #31
 800c79c:	d501      	bpl.n	800c7a2 <_printf_float+0x1ba>
 800c79e:	3302      	adds	r3, #2
 800c7a0:	e7f4      	b.n	800c78c <_printf_float+0x1a4>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e7f2      	b.n	800c78c <_printf_float+0x1a4>
 800c7a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ac:	4299      	cmp	r1, r3
 800c7ae:	db05      	blt.n	800c7bc <_printf_float+0x1d4>
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	6121      	str	r1, [r4, #16]
 800c7b4:	07d8      	lsls	r0, r3, #31
 800c7b6:	d5ea      	bpl.n	800c78e <_printf_float+0x1a6>
 800c7b8:	1c4b      	adds	r3, r1, #1
 800c7ba:	e7e7      	b.n	800c78c <_printf_float+0x1a4>
 800c7bc:	2900      	cmp	r1, #0
 800c7be:	bfd4      	ite	le
 800c7c0:	f1c1 0202 	rsble	r2, r1, #2
 800c7c4:	2201      	movgt	r2, #1
 800c7c6:	4413      	add	r3, r2
 800c7c8:	e7e0      	b.n	800c78c <_printf_float+0x1a4>
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	055a      	lsls	r2, r3, #21
 800c7ce:	d407      	bmi.n	800c7e0 <_printf_float+0x1f8>
 800c7d0:	6923      	ldr	r3, [r4, #16]
 800c7d2:	4642      	mov	r2, r8
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b8      	blx	r7
 800c7da:	3001      	adds	r0, #1
 800c7dc:	d12c      	bne.n	800c838 <_printf_float+0x250>
 800c7de:	e764      	b.n	800c6aa <_printf_float+0xc2>
 800c7e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7e4:	f240 80e0 	bls.w	800c9a8 <_printf_float+0x3c0>
 800c7e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f7f4 f992 	bl	8000b18 <__aeabi_dcmpeq>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d034      	beq.n	800c862 <_printf_float+0x27a>
 800c7f8:	4a37      	ldr	r2, [pc, #220]	; (800c8d8 <_printf_float+0x2f0>)
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b8      	blx	r7
 800c802:	3001      	adds	r0, #1
 800c804:	f43f af51 	beq.w	800c6aa <_printf_float+0xc2>
 800c808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c80c:	429a      	cmp	r2, r3
 800c80e:	db02      	blt.n	800c816 <_printf_float+0x22e>
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	07d8      	lsls	r0, r3, #31
 800c814:	d510      	bpl.n	800c838 <_printf_float+0x250>
 800c816:	ee18 3a10 	vmov	r3, s16
 800c81a:	4652      	mov	r2, sl
 800c81c:	4631      	mov	r1, r6
 800c81e:	4628      	mov	r0, r5
 800c820:	47b8      	blx	r7
 800c822:	3001      	adds	r0, #1
 800c824:	f43f af41 	beq.w	800c6aa <_printf_float+0xc2>
 800c828:	f04f 0800 	mov.w	r8, #0
 800c82c:	f104 091a 	add.w	r9, r4, #26
 800c830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c832:	3b01      	subs	r3, #1
 800c834:	4543      	cmp	r3, r8
 800c836:	dc09      	bgt.n	800c84c <_printf_float+0x264>
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	079b      	lsls	r3, r3, #30
 800c83c:	f100 8105 	bmi.w	800ca4a <_printf_float+0x462>
 800c840:	68e0      	ldr	r0, [r4, #12]
 800c842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c844:	4298      	cmp	r0, r3
 800c846:	bfb8      	it	lt
 800c848:	4618      	movlt	r0, r3
 800c84a:	e730      	b.n	800c6ae <_printf_float+0xc6>
 800c84c:	2301      	movs	r3, #1
 800c84e:	464a      	mov	r2, r9
 800c850:	4631      	mov	r1, r6
 800c852:	4628      	mov	r0, r5
 800c854:	47b8      	blx	r7
 800c856:	3001      	adds	r0, #1
 800c858:	f43f af27 	beq.w	800c6aa <_printf_float+0xc2>
 800c85c:	f108 0801 	add.w	r8, r8, #1
 800c860:	e7e6      	b.n	800c830 <_printf_float+0x248>
 800c862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c864:	2b00      	cmp	r3, #0
 800c866:	dc39      	bgt.n	800c8dc <_printf_float+0x2f4>
 800c868:	4a1b      	ldr	r2, [pc, #108]	; (800c8d8 <_printf_float+0x2f0>)
 800c86a:	2301      	movs	r3, #1
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	f43f af19 	beq.w	800c6aa <_printf_float+0xc2>
 800c878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c87c:	4313      	orrs	r3, r2
 800c87e:	d102      	bne.n	800c886 <_printf_float+0x29e>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	07d9      	lsls	r1, r3, #31
 800c884:	d5d8      	bpl.n	800c838 <_printf_float+0x250>
 800c886:	ee18 3a10 	vmov	r3, s16
 800c88a:	4652      	mov	r2, sl
 800c88c:	4631      	mov	r1, r6
 800c88e:	4628      	mov	r0, r5
 800c890:	47b8      	blx	r7
 800c892:	3001      	adds	r0, #1
 800c894:	f43f af09 	beq.w	800c6aa <_printf_float+0xc2>
 800c898:	f04f 0900 	mov.w	r9, #0
 800c89c:	f104 0a1a 	add.w	sl, r4, #26
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	425b      	negs	r3, r3
 800c8a4:	454b      	cmp	r3, r9
 800c8a6:	dc01      	bgt.n	800c8ac <_printf_float+0x2c4>
 800c8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8aa:	e792      	b.n	800c7d2 <_printf_float+0x1ea>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	4652      	mov	r2, sl
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	f43f aef7 	beq.w	800c6aa <_printf_float+0xc2>
 800c8bc:	f109 0901 	add.w	r9, r9, #1
 800c8c0:	e7ee      	b.n	800c8a0 <_printf_float+0x2b8>
 800c8c2:	bf00      	nop
 800c8c4:	7fefffff 	.word	0x7fefffff
 800c8c8:	08010118 	.word	0x08010118
 800c8cc:	0801011c 	.word	0x0801011c
 800c8d0:	08010124 	.word	0x08010124
 800c8d4:	08010120 	.word	0x08010120
 800c8d8:	08010128 	.word	0x08010128
 800c8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	bfa8      	it	ge
 800c8e4:	461a      	movge	r2, r3
 800c8e6:	2a00      	cmp	r2, #0
 800c8e8:	4691      	mov	r9, r2
 800c8ea:	dc37      	bgt.n	800c95c <_printf_float+0x374>
 800c8ec:	f04f 0b00 	mov.w	fp, #0
 800c8f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8f4:	f104 021a 	add.w	r2, r4, #26
 800c8f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8fa:	9305      	str	r3, [sp, #20]
 800c8fc:	eba3 0309 	sub.w	r3, r3, r9
 800c900:	455b      	cmp	r3, fp
 800c902:	dc33      	bgt.n	800c96c <_printf_float+0x384>
 800c904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c908:	429a      	cmp	r2, r3
 800c90a:	db3b      	blt.n	800c984 <_printf_float+0x39c>
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	07da      	lsls	r2, r3, #31
 800c910:	d438      	bmi.n	800c984 <_printf_float+0x39c>
 800c912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c914:	9a05      	ldr	r2, [sp, #20]
 800c916:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c918:	1a9a      	subs	r2, r3, r2
 800c91a:	eba3 0901 	sub.w	r9, r3, r1
 800c91e:	4591      	cmp	r9, r2
 800c920:	bfa8      	it	ge
 800c922:	4691      	movge	r9, r2
 800c924:	f1b9 0f00 	cmp.w	r9, #0
 800c928:	dc35      	bgt.n	800c996 <_printf_float+0x3ae>
 800c92a:	f04f 0800 	mov.w	r8, #0
 800c92e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c932:	f104 0a1a 	add.w	sl, r4, #26
 800c936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c93a:	1a9b      	subs	r3, r3, r2
 800c93c:	eba3 0309 	sub.w	r3, r3, r9
 800c940:	4543      	cmp	r3, r8
 800c942:	f77f af79 	ble.w	800c838 <_printf_float+0x250>
 800c946:	2301      	movs	r3, #1
 800c948:	4652      	mov	r2, sl
 800c94a:	4631      	mov	r1, r6
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	f43f aeaa 	beq.w	800c6aa <_printf_float+0xc2>
 800c956:	f108 0801 	add.w	r8, r8, #1
 800c95a:	e7ec      	b.n	800c936 <_printf_float+0x34e>
 800c95c:	4613      	mov	r3, r2
 800c95e:	4631      	mov	r1, r6
 800c960:	4642      	mov	r2, r8
 800c962:	4628      	mov	r0, r5
 800c964:	47b8      	blx	r7
 800c966:	3001      	adds	r0, #1
 800c968:	d1c0      	bne.n	800c8ec <_printf_float+0x304>
 800c96a:	e69e      	b.n	800c6aa <_printf_float+0xc2>
 800c96c:	2301      	movs	r3, #1
 800c96e:	4631      	mov	r1, r6
 800c970:	4628      	mov	r0, r5
 800c972:	9205      	str	r2, [sp, #20]
 800c974:	47b8      	blx	r7
 800c976:	3001      	adds	r0, #1
 800c978:	f43f ae97 	beq.w	800c6aa <_printf_float+0xc2>
 800c97c:	9a05      	ldr	r2, [sp, #20]
 800c97e:	f10b 0b01 	add.w	fp, fp, #1
 800c982:	e7b9      	b.n	800c8f8 <_printf_float+0x310>
 800c984:	ee18 3a10 	vmov	r3, s16
 800c988:	4652      	mov	r2, sl
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	47b8      	blx	r7
 800c990:	3001      	adds	r0, #1
 800c992:	d1be      	bne.n	800c912 <_printf_float+0x32a>
 800c994:	e689      	b.n	800c6aa <_printf_float+0xc2>
 800c996:	9a05      	ldr	r2, [sp, #20]
 800c998:	464b      	mov	r3, r9
 800c99a:	4442      	add	r2, r8
 800c99c:	4631      	mov	r1, r6
 800c99e:	4628      	mov	r0, r5
 800c9a0:	47b8      	blx	r7
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	d1c1      	bne.n	800c92a <_printf_float+0x342>
 800c9a6:	e680      	b.n	800c6aa <_printf_float+0xc2>
 800c9a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9aa:	2a01      	cmp	r2, #1
 800c9ac:	dc01      	bgt.n	800c9b2 <_printf_float+0x3ca>
 800c9ae:	07db      	lsls	r3, r3, #31
 800c9b0:	d538      	bpl.n	800ca24 <_printf_float+0x43c>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4642      	mov	r2, r8
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	47b8      	blx	r7
 800c9bc:	3001      	adds	r0, #1
 800c9be:	f43f ae74 	beq.w	800c6aa <_printf_float+0xc2>
 800c9c2:	ee18 3a10 	vmov	r3, s16
 800c9c6:	4652      	mov	r2, sl
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	47b8      	blx	r7
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	f43f ae6b 	beq.w	800c6aa <_printf_float+0xc2>
 800c9d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f7f4 f89c 	bl	8000b18 <__aeabi_dcmpeq>
 800c9e0:	b9d8      	cbnz	r0, 800ca1a <_printf_float+0x432>
 800c9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e4:	f108 0201 	add.w	r2, r8, #1
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	47b8      	blx	r7
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d10e      	bne.n	800ca12 <_printf_float+0x42a>
 800c9f4:	e659      	b.n	800c6aa <_printf_float+0xc2>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	4652      	mov	r2, sl
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	47b8      	blx	r7
 800ca00:	3001      	adds	r0, #1
 800ca02:	f43f ae52 	beq.w	800c6aa <_printf_float+0xc2>
 800ca06:	f108 0801 	add.w	r8, r8, #1
 800ca0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	4543      	cmp	r3, r8
 800ca10:	dcf1      	bgt.n	800c9f6 <_printf_float+0x40e>
 800ca12:	464b      	mov	r3, r9
 800ca14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca18:	e6dc      	b.n	800c7d4 <_printf_float+0x1ec>
 800ca1a:	f04f 0800 	mov.w	r8, #0
 800ca1e:	f104 0a1a 	add.w	sl, r4, #26
 800ca22:	e7f2      	b.n	800ca0a <_printf_float+0x422>
 800ca24:	2301      	movs	r3, #1
 800ca26:	4642      	mov	r2, r8
 800ca28:	e7df      	b.n	800c9ea <_printf_float+0x402>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	464a      	mov	r2, r9
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4628      	mov	r0, r5
 800ca32:	47b8      	blx	r7
 800ca34:	3001      	adds	r0, #1
 800ca36:	f43f ae38 	beq.w	800c6aa <_printf_float+0xc2>
 800ca3a:	f108 0801 	add.w	r8, r8, #1
 800ca3e:	68e3      	ldr	r3, [r4, #12]
 800ca40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca42:	1a5b      	subs	r3, r3, r1
 800ca44:	4543      	cmp	r3, r8
 800ca46:	dcf0      	bgt.n	800ca2a <_printf_float+0x442>
 800ca48:	e6fa      	b.n	800c840 <_printf_float+0x258>
 800ca4a:	f04f 0800 	mov.w	r8, #0
 800ca4e:	f104 0919 	add.w	r9, r4, #25
 800ca52:	e7f4      	b.n	800ca3e <_printf_float+0x456>

0800ca54 <_printf_common>:
 800ca54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca58:	4616      	mov	r6, r2
 800ca5a:	4699      	mov	r9, r3
 800ca5c:	688a      	ldr	r2, [r1, #8]
 800ca5e:	690b      	ldr	r3, [r1, #16]
 800ca60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca64:	4293      	cmp	r3, r2
 800ca66:	bfb8      	it	lt
 800ca68:	4613      	movlt	r3, r2
 800ca6a:	6033      	str	r3, [r6, #0]
 800ca6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca70:	4607      	mov	r7, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	b10a      	cbz	r2, 800ca7a <_printf_common+0x26>
 800ca76:	3301      	adds	r3, #1
 800ca78:	6033      	str	r3, [r6, #0]
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	0699      	lsls	r1, r3, #26
 800ca7e:	bf42      	ittt	mi
 800ca80:	6833      	ldrmi	r3, [r6, #0]
 800ca82:	3302      	addmi	r3, #2
 800ca84:	6033      	strmi	r3, [r6, #0]
 800ca86:	6825      	ldr	r5, [r4, #0]
 800ca88:	f015 0506 	ands.w	r5, r5, #6
 800ca8c:	d106      	bne.n	800ca9c <_printf_common+0x48>
 800ca8e:	f104 0a19 	add.w	sl, r4, #25
 800ca92:	68e3      	ldr	r3, [r4, #12]
 800ca94:	6832      	ldr	r2, [r6, #0]
 800ca96:	1a9b      	subs	r3, r3, r2
 800ca98:	42ab      	cmp	r3, r5
 800ca9a:	dc26      	bgt.n	800caea <_printf_common+0x96>
 800ca9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800caa0:	1e13      	subs	r3, r2, #0
 800caa2:	6822      	ldr	r2, [r4, #0]
 800caa4:	bf18      	it	ne
 800caa6:	2301      	movne	r3, #1
 800caa8:	0692      	lsls	r2, r2, #26
 800caaa:	d42b      	bmi.n	800cb04 <_printf_common+0xb0>
 800caac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cab0:	4649      	mov	r1, r9
 800cab2:	4638      	mov	r0, r7
 800cab4:	47c0      	blx	r8
 800cab6:	3001      	adds	r0, #1
 800cab8:	d01e      	beq.n	800caf8 <_printf_common+0xa4>
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	68e5      	ldr	r5, [r4, #12]
 800cabe:	6832      	ldr	r2, [r6, #0]
 800cac0:	f003 0306 	and.w	r3, r3, #6
 800cac4:	2b04      	cmp	r3, #4
 800cac6:	bf08      	it	eq
 800cac8:	1aad      	subeq	r5, r5, r2
 800caca:	68a3      	ldr	r3, [r4, #8]
 800cacc:	6922      	ldr	r2, [r4, #16]
 800cace:	bf0c      	ite	eq
 800cad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cad4:	2500      	movne	r5, #0
 800cad6:	4293      	cmp	r3, r2
 800cad8:	bfc4      	itt	gt
 800cada:	1a9b      	subgt	r3, r3, r2
 800cadc:	18ed      	addgt	r5, r5, r3
 800cade:	2600      	movs	r6, #0
 800cae0:	341a      	adds	r4, #26
 800cae2:	42b5      	cmp	r5, r6
 800cae4:	d11a      	bne.n	800cb1c <_printf_common+0xc8>
 800cae6:	2000      	movs	r0, #0
 800cae8:	e008      	b.n	800cafc <_printf_common+0xa8>
 800caea:	2301      	movs	r3, #1
 800caec:	4652      	mov	r2, sl
 800caee:	4649      	mov	r1, r9
 800caf0:	4638      	mov	r0, r7
 800caf2:	47c0      	blx	r8
 800caf4:	3001      	adds	r0, #1
 800caf6:	d103      	bne.n	800cb00 <_printf_common+0xac>
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb00:	3501      	adds	r5, #1
 800cb02:	e7c6      	b.n	800ca92 <_printf_common+0x3e>
 800cb04:	18e1      	adds	r1, r4, r3
 800cb06:	1c5a      	adds	r2, r3, #1
 800cb08:	2030      	movs	r0, #48	; 0x30
 800cb0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb0e:	4422      	add	r2, r4
 800cb10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb18:	3302      	adds	r3, #2
 800cb1a:	e7c7      	b.n	800caac <_printf_common+0x58>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	4622      	mov	r2, r4
 800cb20:	4649      	mov	r1, r9
 800cb22:	4638      	mov	r0, r7
 800cb24:	47c0      	blx	r8
 800cb26:	3001      	adds	r0, #1
 800cb28:	d0e6      	beq.n	800caf8 <_printf_common+0xa4>
 800cb2a:	3601      	adds	r6, #1
 800cb2c:	e7d9      	b.n	800cae2 <_printf_common+0x8e>
	...

0800cb30 <_printf_i>:
 800cb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	7e0f      	ldrb	r7, [r1, #24]
 800cb36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb38:	2f78      	cmp	r7, #120	; 0x78
 800cb3a:	4691      	mov	r9, r2
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	460c      	mov	r4, r1
 800cb40:	469a      	mov	sl, r3
 800cb42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb46:	d807      	bhi.n	800cb58 <_printf_i+0x28>
 800cb48:	2f62      	cmp	r7, #98	; 0x62
 800cb4a:	d80a      	bhi.n	800cb62 <_printf_i+0x32>
 800cb4c:	2f00      	cmp	r7, #0
 800cb4e:	f000 80d8 	beq.w	800cd02 <_printf_i+0x1d2>
 800cb52:	2f58      	cmp	r7, #88	; 0x58
 800cb54:	f000 80a3 	beq.w	800cc9e <_printf_i+0x16e>
 800cb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb60:	e03a      	b.n	800cbd8 <_printf_i+0xa8>
 800cb62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb66:	2b15      	cmp	r3, #21
 800cb68:	d8f6      	bhi.n	800cb58 <_printf_i+0x28>
 800cb6a:	a101      	add	r1, pc, #4	; (adr r1, 800cb70 <_printf_i+0x40>)
 800cb6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb70:	0800cbc9 	.word	0x0800cbc9
 800cb74:	0800cbdd 	.word	0x0800cbdd
 800cb78:	0800cb59 	.word	0x0800cb59
 800cb7c:	0800cb59 	.word	0x0800cb59
 800cb80:	0800cb59 	.word	0x0800cb59
 800cb84:	0800cb59 	.word	0x0800cb59
 800cb88:	0800cbdd 	.word	0x0800cbdd
 800cb8c:	0800cb59 	.word	0x0800cb59
 800cb90:	0800cb59 	.word	0x0800cb59
 800cb94:	0800cb59 	.word	0x0800cb59
 800cb98:	0800cb59 	.word	0x0800cb59
 800cb9c:	0800cce9 	.word	0x0800cce9
 800cba0:	0800cc0d 	.word	0x0800cc0d
 800cba4:	0800cccb 	.word	0x0800cccb
 800cba8:	0800cb59 	.word	0x0800cb59
 800cbac:	0800cb59 	.word	0x0800cb59
 800cbb0:	0800cd0b 	.word	0x0800cd0b
 800cbb4:	0800cb59 	.word	0x0800cb59
 800cbb8:	0800cc0d 	.word	0x0800cc0d
 800cbbc:	0800cb59 	.word	0x0800cb59
 800cbc0:	0800cb59 	.word	0x0800cb59
 800cbc4:	0800ccd3 	.word	0x0800ccd3
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	1d1a      	adds	r2, r3, #4
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	602a      	str	r2, [r5, #0]
 800cbd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e0a3      	b.n	800cd24 <_printf_i+0x1f4>
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	6829      	ldr	r1, [r5, #0]
 800cbe0:	0606      	lsls	r6, r0, #24
 800cbe2:	f101 0304 	add.w	r3, r1, #4
 800cbe6:	d50a      	bpl.n	800cbfe <_printf_i+0xce>
 800cbe8:	680e      	ldr	r6, [r1, #0]
 800cbea:	602b      	str	r3, [r5, #0]
 800cbec:	2e00      	cmp	r6, #0
 800cbee:	da03      	bge.n	800cbf8 <_printf_i+0xc8>
 800cbf0:	232d      	movs	r3, #45	; 0x2d
 800cbf2:	4276      	negs	r6, r6
 800cbf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbf8:	485e      	ldr	r0, [pc, #376]	; (800cd74 <_printf_i+0x244>)
 800cbfa:	230a      	movs	r3, #10
 800cbfc:	e019      	b.n	800cc32 <_printf_i+0x102>
 800cbfe:	680e      	ldr	r6, [r1, #0]
 800cc00:	602b      	str	r3, [r5, #0]
 800cc02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc06:	bf18      	it	ne
 800cc08:	b236      	sxthne	r6, r6
 800cc0a:	e7ef      	b.n	800cbec <_printf_i+0xbc>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	6820      	ldr	r0, [r4, #0]
 800cc10:	1d19      	adds	r1, r3, #4
 800cc12:	6029      	str	r1, [r5, #0]
 800cc14:	0601      	lsls	r1, r0, #24
 800cc16:	d501      	bpl.n	800cc1c <_printf_i+0xec>
 800cc18:	681e      	ldr	r6, [r3, #0]
 800cc1a:	e002      	b.n	800cc22 <_printf_i+0xf2>
 800cc1c:	0646      	lsls	r6, r0, #25
 800cc1e:	d5fb      	bpl.n	800cc18 <_printf_i+0xe8>
 800cc20:	881e      	ldrh	r6, [r3, #0]
 800cc22:	4854      	ldr	r0, [pc, #336]	; (800cd74 <_printf_i+0x244>)
 800cc24:	2f6f      	cmp	r7, #111	; 0x6f
 800cc26:	bf0c      	ite	eq
 800cc28:	2308      	moveq	r3, #8
 800cc2a:	230a      	movne	r3, #10
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc32:	6865      	ldr	r5, [r4, #4]
 800cc34:	60a5      	str	r5, [r4, #8]
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	bfa2      	ittt	ge
 800cc3a:	6821      	ldrge	r1, [r4, #0]
 800cc3c:	f021 0104 	bicge.w	r1, r1, #4
 800cc40:	6021      	strge	r1, [r4, #0]
 800cc42:	b90e      	cbnz	r6, 800cc48 <_printf_i+0x118>
 800cc44:	2d00      	cmp	r5, #0
 800cc46:	d04d      	beq.n	800cce4 <_printf_i+0x1b4>
 800cc48:	4615      	mov	r5, r2
 800cc4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc4e:	fb03 6711 	mls	r7, r3, r1, r6
 800cc52:	5dc7      	ldrb	r7, [r0, r7]
 800cc54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc58:	4637      	mov	r7, r6
 800cc5a:	42bb      	cmp	r3, r7
 800cc5c:	460e      	mov	r6, r1
 800cc5e:	d9f4      	bls.n	800cc4a <_printf_i+0x11a>
 800cc60:	2b08      	cmp	r3, #8
 800cc62:	d10b      	bne.n	800cc7c <_printf_i+0x14c>
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	07de      	lsls	r6, r3, #31
 800cc68:	d508      	bpl.n	800cc7c <_printf_i+0x14c>
 800cc6a:	6923      	ldr	r3, [r4, #16]
 800cc6c:	6861      	ldr	r1, [r4, #4]
 800cc6e:	4299      	cmp	r1, r3
 800cc70:	bfde      	ittt	le
 800cc72:	2330      	movle	r3, #48	; 0x30
 800cc74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc7c:	1b52      	subs	r2, r2, r5
 800cc7e:	6122      	str	r2, [r4, #16]
 800cc80:	f8cd a000 	str.w	sl, [sp]
 800cc84:	464b      	mov	r3, r9
 800cc86:	aa03      	add	r2, sp, #12
 800cc88:	4621      	mov	r1, r4
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	f7ff fee2 	bl	800ca54 <_printf_common>
 800cc90:	3001      	adds	r0, #1
 800cc92:	d14c      	bne.n	800cd2e <_printf_i+0x1fe>
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	b004      	add	sp, #16
 800cc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc9e:	4835      	ldr	r0, [pc, #212]	; (800cd74 <_printf_i+0x244>)
 800cca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cca4:	6829      	ldr	r1, [r5, #0]
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccac:	6029      	str	r1, [r5, #0]
 800ccae:	061d      	lsls	r5, r3, #24
 800ccb0:	d514      	bpl.n	800ccdc <_printf_i+0x1ac>
 800ccb2:	07df      	lsls	r7, r3, #31
 800ccb4:	bf44      	itt	mi
 800ccb6:	f043 0320 	orrmi.w	r3, r3, #32
 800ccba:	6023      	strmi	r3, [r4, #0]
 800ccbc:	b91e      	cbnz	r6, 800ccc6 <_printf_i+0x196>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	f023 0320 	bic.w	r3, r3, #32
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	2310      	movs	r3, #16
 800ccc8:	e7b0      	b.n	800cc2c <_printf_i+0xfc>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	f043 0320 	orr.w	r3, r3, #32
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	2378      	movs	r3, #120	; 0x78
 800ccd4:	4828      	ldr	r0, [pc, #160]	; (800cd78 <_printf_i+0x248>)
 800ccd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccda:	e7e3      	b.n	800cca4 <_printf_i+0x174>
 800ccdc:	0659      	lsls	r1, r3, #25
 800ccde:	bf48      	it	mi
 800cce0:	b2b6      	uxthmi	r6, r6
 800cce2:	e7e6      	b.n	800ccb2 <_printf_i+0x182>
 800cce4:	4615      	mov	r5, r2
 800cce6:	e7bb      	b.n	800cc60 <_printf_i+0x130>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	6826      	ldr	r6, [r4, #0]
 800ccec:	6961      	ldr	r1, [r4, #20]
 800ccee:	1d18      	adds	r0, r3, #4
 800ccf0:	6028      	str	r0, [r5, #0]
 800ccf2:	0635      	lsls	r5, r6, #24
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	d501      	bpl.n	800ccfc <_printf_i+0x1cc>
 800ccf8:	6019      	str	r1, [r3, #0]
 800ccfa:	e002      	b.n	800cd02 <_printf_i+0x1d2>
 800ccfc:	0670      	lsls	r0, r6, #25
 800ccfe:	d5fb      	bpl.n	800ccf8 <_printf_i+0x1c8>
 800cd00:	8019      	strh	r1, [r3, #0]
 800cd02:	2300      	movs	r3, #0
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	4615      	mov	r5, r2
 800cd08:	e7ba      	b.n	800cc80 <_printf_i+0x150>
 800cd0a:	682b      	ldr	r3, [r5, #0]
 800cd0c:	1d1a      	adds	r2, r3, #4
 800cd0e:	602a      	str	r2, [r5, #0]
 800cd10:	681d      	ldr	r5, [r3, #0]
 800cd12:	6862      	ldr	r2, [r4, #4]
 800cd14:	2100      	movs	r1, #0
 800cd16:	4628      	mov	r0, r5
 800cd18:	f7f3 fa8a 	bl	8000230 <memchr>
 800cd1c:	b108      	cbz	r0, 800cd22 <_printf_i+0x1f2>
 800cd1e:	1b40      	subs	r0, r0, r5
 800cd20:	6060      	str	r0, [r4, #4]
 800cd22:	6863      	ldr	r3, [r4, #4]
 800cd24:	6123      	str	r3, [r4, #16]
 800cd26:	2300      	movs	r3, #0
 800cd28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd2c:	e7a8      	b.n	800cc80 <_printf_i+0x150>
 800cd2e:	6923      	ldr	r3, [r4, #16]
 800cd30:	462a      	mov	r2, r5
 800cd32:	4649      	mov	r1, r9
 800cd34:	4640      	mov	r0, r8
 800cd36:	47d0      	blx	sl
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d0ab      	beq.n	800cc94 <_printf_i+0x164>
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	079b      	lsls	r3, r3, #30
 800cd40:	d413      	bmi.n	800cd6a <_printf_i+0x23a>
 800cd42:	68e0      	ldr	r0, [r4, #12]
 800cd44:	9b03      	ldr	r3, [sp, #12]
 800cd46:	4298      	cmp	r0, r3
 800cd48:	bfb8      	it	lt
 800cd4a:	4618      	movlt	r0, r3
 800cd4c:	e7a4      	b.n	800cc98 <_printf_i+0x168>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	4632      	mov	r2, r6
 800cd52:	4649      	mov	r1, r9
 800cd54:	4640      	mov	r0, r8
 800cd56:	47d0      	blx	sl
 800cd58:	3001      	adds	r0, #1
 800cd5a:	d09b      	beq.n	800cc94 <_printf_i+0x164>
 800cd5c:	3501      	adds	r5, #1
 800cd5e:	68e3      	ldr	r3, [r4, #12]
 800cd60:	9903      	ldr	r1, [sp, #12]
 800cd62:	1a5b      	subs	r3, r3, r1
 800cd64:	42ab      	cmp	r3, r5
 800cd66:	dcf2      	bgt.n	800cd4e <_printf_i+0x21e>
 800cd68:	e7eb      	b.n	800cd42 <_printf_i+0x212>
 800cd6a:	2500      	movs	r5, #0
 800cd6c:	f104 0619 	add.w	r6, r4, #25
 800cd70:	e7f5      	b.n	800cd5e <_printf_i+0x22e>
 800cd72:	bf00      	nop
 800cd74:	0801012a 	.word	0x0801012a
 800cd78:	0801013b 	.word	0x0801013b

0800cd7c <siprintf>:
 800cd7c:	b40e      	push	{r1, r2, r3}
 800cd7e:	b500      	push	{lr}
 800cd80:	b09c      	sub	sp, #112	; 0x70
 800cd82:	ab1d      	add	r3, sp, #116	; 0x74
 800cd84:	9002      	str	r0, [sp, #8]
 800cd86:	9006      	str	r0, [sp, #24]
 800cd88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <siprintf+0x38>)
 800cd8e:	9107      	str	r1, [sp, #28]
 800cd90:	9104      	str	r1, [sp, #16]
 800cd92:	4909      	ldr	r1, [pc, #36]	; (800cdb8 <siprintf+0x3c>)
 800cd94:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd98:	9105      	str	r1, [sp, #20]
 800cd9a:	6800      	ldr	r0, [r0, #0]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	a902      	add	r1, sp, #8
 800cda0:	f001 fb78 	bl	800e494 <_svfiprintf_r>
 800cda4:	9b02      	ldr	r3, [sp, #8]
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	b01c      	add	sp, #112	; 0x70
 800cdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb0:	b003      	add	sp, #12
 800cdb2:	4770      	bx	lr
 800cdb4:	2000002c 	.word	0x2000002c
 800cdb8:	ffff0208 	.word	0xffff0208

0800cdbc <quorem>:
 800cdbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	6903      	ldr	r3, [r0, #16]
 800cdc2:	690c      	ldr	r4, [r1, #16]
 800cdc4:	42a3      	cmp	r3, r4
 800cdc6:	4607      	mov	r7, r0
 800cdc8:	f2c0 8081 	blt.w	800cece <quorem+0x112>
 800cdcc:	3c01      	subs	r4, #1
 800cdce:	f101 0814 	add.w	r8, r1, #20
 800cdd2:	f100 0514 	add.w	r5, r0, #20
 800cdd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cde0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cde4:	3301      	adds	r3, #1
 800cde6:	429a      	cmp	r2, r3
 800cde8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cdec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdf4:	d331      	bcc.n	800ce5a <quorem+0x9e>
 800cdf6:	f04f 0e00 	mov.w	lr, #0
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	46ac      	mov	ip, r5
 800cdfe:	46f2      	mov	sl, lr
 800ce00:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce04:	b293      	uxth	r3, r2
 800ce06:	fb06 e303 	mla	r3, r6, r3, lr
 800ce0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	ebaa 0303 	sub.w	r3, sl, r3
 800ce14:	f8dc a000 	ldr.w	sl, [ip]
 800ce18:	0c12      	lsrs	r2, r2, #16
 800ce1a:	fa13 f38a 	uxtah	r3, r3, sl
 800ce1e:	fb06 e202 	mla	r2, r6, r2, lr
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	9b00      	ldr	r3, [sp, #0]
 800ce26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce2a:	b292      	uxth	r2, r2
 800ce2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ce30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce34:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce38:	4581      	cmp	r9, r0
 800ce3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce3e:	f84c 3b04 	str.w	r3, [ip], #4
 800ce42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce46:	d2db      	bcs.n	800ce00 <quorem+0x44>
 800ce48:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce4c:	b92b      	cbnz	r3, 800ce5a <quorem+0x9e>
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	3b04      	subs	r3, #4
 800ce52:	429d      	cmp	r5, r3
 800ce54:	461a      	mov	r2, r3
 800ce56:	d32e      	bcc.n	800ceb6 <quorem+0xfa>
 800ce58:	613c      	str	r4, [r7, #16]
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f001 f8c6 	bl	800dfec <__mcmp>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	db24      	blt.n	800ceae <quorem+0xf2>
 800ce64:	3601      	adds	r6, #1
 800ce66:	4628      	mov	r0, r5
 800ce68:	f04f 0c00 	mov.w	ip, #0
 800ce6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce70:	f8d0 e000 	ldr.w	lr, [r0]
 800ce74:	b293      	uxth	r3, r2
 800ce76:	ebac 0303 	sub.w	r3, ip, r3
 800ce7a:	0c12      	lsrs	r2, r2, #16
 800ce7c:	fa13 f38e 	uxtah	r3, r3, lr
 800ce80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ce84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce8e:	45c1      	cmp	r9, r8
 800ce90:	f840 3b04 	str.w	r3, [r0], #4
 800ce94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce98:	d2e8      	bcs.n	800ce6c <quorem+0xb0>
 800ce9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cea2:	b922      	cbnz	r2, 800ceae <quorem+0xf2>
 800cea4:	3b04      	subs	r3, #4
 800cea6:	429d      	cmp	r5, r3
 800cea8:	461a      	mov	r2, r3
 800ceaa:	d30a      	bcc.n	800cec2 <quorem+0x106>
 800ceac:	613c      	str	r4, [r7, #16]
 800ceae:	4630      	mov	r0, r6
 800ceb0:	b003      	add	sp, #12
 800ceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb6:	6812      	ldr	r2, [r2, #0]
 800ceb8:	3b04      	subs	r3, #4
 800ceba:	2a00      	cmp	r2, #0
 800cebc:	d1cc      	bne.n	800ce58 <quorem+0x9c>
 800cebe:	3c01      	subs	r4, #1
 800cec0:	e7c7      	b.n	800ce52 <quorem+0x96>
 800cec2:	6812      	ldr	r2, [r2, #0]
 800cec4:	3b04      	subs	r3, #4
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	d1f0      	bne.n	800ceac <quorem+0xf0>
 800ceca:	3c01      	subs	r4, #1
 800cecc:	e7eb      	b.n	800cea6 <quorem+0xea>
 800cece:	2000      	movs	r0, #0
 800ced0:	e7ee      	b.n	800ceb0 <quorem+0xf4>
 800ced2:	0000      	movs	r0, r0
 800ced4:	0000      	movs	r0, r0
	...

0800ced8 <_dtoa_r>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	ed2d 8b04 	vpush	{d8-d9}
 800cee0:	ec57 6b10 	vmov	r6, r7, d0
 800cee4:	b093      	sub	sp, #76	; 0x4c
 800cee6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cee8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ceec:	9106      	str	r1, [sp, #24]
 800ceee:	ee10 aa10 	vmov	sl, s0
 800cef2:	4604      	mov	r4, r0
 800cef4:	9209      	str	r2, [sp, #36]	; 0x24
 800cef6:	930c      	str	r3, [sp, #48]	; 0x30
 800cef8:	46bb      	mov	fp, r7
 800cefa:	b975      	cbnz	r5, 800cf1a <_dtoa_r+0x42>
 800cefc:	2010      	movs	r0, #16
 800cefe:	f000 fddd 	bl	800dabc <malloc>
 800cf02:	4602      	mov	r2, r0
 800cf04:	6260      	str	r0, [r4, #36]	; 0x24
 800cf06:	b920      	cbnz	r0, 800cf12 <_dtoa_r+0x3a>
 800cf08:	4ba7      	ldr	r3, [pc, #668]	; (800d1a8 <_dtoa_r+0x2d0>)
 800cf0a:	21ea      	movs	r1, #234	; 0xea
 800cf0c:	48a7      	ldr	r0, [pc, #668]	; (800d1ac <_dtoa_r+0x2d4>)
 800cf0e:	f001 fbd1 	bl	800e6b4 <__assert_func>
 800cf12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf16:	6005      	str	r5, [r0, #0]
 800cf18:	60c5      	str	r5, [r0, #12]
 800cf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf1c:	6819      	ldr	r1, [r3, #0]
 800cf1e:	b151      	cbz	r1, 800cf36 <_dtoa_r+0x5e>
 800cf20:	685a      	ldr	r2, [r3, #4]
 800cf22:	604a      	str	r2, [r1, #4]
 800cf24:	2301      	movs	r3, #1
 800cf26:	4093      	lsls	r3, r2
 800cf28:	608b      	str	r3, [r1, #8]
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 fe1c 	bl	800db68 <_Bfree>
 800cf30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	1e3b      	subs	r3, r7, #0
 800cf38:	bfaa      	itet	ge
 800cf3a:	2300      	movge	r3, #0
 800cf3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cf40:	f8c8 3000 	strge.w	r3, [r8]
 800cf44:	4b9a      	ldr	r3, [pc, #616]	; (800d1b0 <_dtoa_r+0x2d8>)
 800cf46:	bfbc      	itt	lt
 800cf48:	2201      	movlt	r2, #1
 800cf4a:	f8c8 2000 	strlt.w	r2, [r8]
 800cf4e:	ea33 030b 	bics.w	r3, r3, fp
 800cf52:	d11b      	bne.n	800cf8c <_dtoa_r+0xb4>
 800cf54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf56:	f242 730f 	movw	r3, #9999	; 0x270f
 800cf5a:	6013      	str	r3, [r2, #0]
 800cf5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf60:	4333      	orrs	r3, r6
 800cf62:	f000 8592 	beq.w	800da8a <_dtoa_r+0xbb2>
 800cf66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf68:	b963      	cbnz	r3, 800cf84 <_dtoa_r+0xac>
 800cf6a:	4b92      	ldr	r3, [pc, #584]	; (800d1b4 <_dtoa_r+0x2dc>)
 800cf6c:	e022      	b.n	800cfb4 <_dtoa_r+0xdc>
 800cf6e:	4b92      	ldr	r3, [pc, #584]	; (800d1b8 <_dtoa_r+0x2e0>)
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	3308      	adds	r3, #8
 800cf74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf76:	6013      	str	r3, [r2, #0]
 800cf78:	9801      	ldr	r0, [sp, #4]
 800cf7a:	b013      	add	sp, #76	; 0x4c
 800cf7c:	ecbd 8b04 	vpop	{d8-d9}
 800cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf84:	4b8b      	ldr	r3, [pc, #556]	; (800d1b4 <_dtoa_r+0x2dc>)
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	3303      	adds	r3, #3
 800cf8a:	e7f3      	b.n	800cf74 <_dtoa_r+0x9c>
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2300      	movs	r3, #0
 800cf90:	4650      	mov	r0, sl
 800cf92:	4659      	mov	r1, fp
 800cf94:	f7f3 fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 800cf98:	ec4b ab19 	vmov	d9, sl, fp
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	b158      	cbz	r0, 800cfb8 <_dtoa_r+0xe0>
 800cfa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	6013      	str	r3, [r2, #0]
 800cfa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 856b 	beq.w	800da84 <_dtoa_r+0xbac>
 800cfae:	4883      	ldr	r0, [pc, #524]	; (800d1bc <_dtoa_r+0x2e4>)
 800cfb0:	6018      	str	r0, [r3, #0]
 800cfb2:	1e43      	subs	r3, r0, #1
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	e7df      	b.n	800cf78 <_dtoa_r+0xa0>
 800cfb8:	ec4b ab10 	vmov	d0, sl, fp
 800cfbc:	aa10      	add	r2, sp, #64	; 0x40
 800cfbe:	a911      	add	r1, sp, #68	; 0x44
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f001 f8b9 	bl	800e138 <__d2b>
 800cfc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cfca:	ee08 0a10 	vmov	s16, r0
 800cfce:	2d00      	cmp	r5, #0
 800cfd0:	f000 8084 	beq.w	800d0dc <_dtoa_r+0x204>
 800cfd4:	ee19 3a90 	vmov	r3, s19
 800cfd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cfe0:	4656      	mov	r6, sl
 800cfe2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cfe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cfea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cfee:	4b74      	ldr	r3, [pc, #464]	; (800d1c0 <_dtoa_r+0x2e8>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	4630      	mov	r0, r6
 800cff4:	4639      	mov	r1, r7
 800cff6:	f7f3 f96f 	bl	80002d8 <__aeabi_dsub>
 800cffa:	a365      	add	r3, pc, #404	; (adr r3, 800d190 <_dtoa_r+0x2b8>)
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	f7f3 fb22 	bl	8000648 <__aeabi_dmul>
 800d004:	a364      	add	r3, pc, #400	; (adr r3, 800d198 <_dtoa_r+0x2c0>)
 800d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00a:	f7f3 f967 	bl	80002dc <__adddf3>
 800d00e:	4606      	mov	r6, r0
 800d010:	4628      	mov	r0, r5
 800d012:	460f      	mov	r7, r1
 800d014:	f7f3 faae 	bl	8000574 <__aeabi_i2d>
 800d018:	a361      	add	r3, pc, #388	; (adr r3, 800d1a0 <_dtoa_r+0x2c8>)
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	f7f3 fb13 	bl	8000648 <__aeabi_dmul>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4630      	mov	r0, r6
 800d028:	4639      	mov	r1, r7
 800d02a:	f7f3 f957 	bl	80002dc <__adddf3>
 800d02e:	4606      	mov	r6, r0
 800d030:	460f      	mov	r7, r1
 800d032:	f7f3 fdb9 	bl	8000ba8 <__aeabi_d2iz>
 800d036:	2200      	movs	r2, #0
 800d038:	9000      	str	r0, [sp, #0]
 800d03a:	2300      	movs	r3, #0
 800d03c:	4630      	mov	r0, r6
 800d03e:	4639      	mov	r1, r7
 800d040:	f7f3 fd74 	bl	8000b2c <__aeabi_dcmplt>
 800d044:	b150      	cbz	r0, 800d05c <_dtoa_r+0x184>
 800d046:	9800      	ldr	r0, [sp, #0]
 800d048:	f7f3 fa94 	bl	8000574 <__aeabi_i2d>
 800d04c:	4632      	mov	r2, r6
 800d04e:	463b      	mov	r3, r7
 800d050:	f7f3 fd62 	bl	8000b18 <__aeabi_dcmpeq>
 800d054:	b910      	cbnz	r0, 800d05c <_dtoa_r+0x184>
 800d056:	9b00      	ldr	r3, [sp, #0]
 800d058:	3b01      	subs	r3, #1
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	9b00      	ldr	r3, [sp, #0]
 800d05e:	2b16      	cmp	r3, #22
 800d060:	d85a      	bhi.n	800d118 <_dtoa_r+0x240>
 800d062:	9a00      	ldr	r2, [sp, #0]
 800d064:	4b57      	ldr	r3, [pc, #348]	; (800d1c4 <_dtoa_r+0x2ec>)
 800d066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	ec51 0b19 	vmov	r0, r1, d9
 800d072:	f7f3 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 800d076:	2800      	cmp	r0, #0
 800d078:	d050      	beq.n	800d11c <_dtoa_r+0x244>
 800d07a:	9b00      	ldr	r3, [sp, #0]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	2300      	movs	r3, #0
 800d082:	930b      	str	r3, [sp, #44]	; 0x2c
 800d084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d086:	1b5d      	subs	r5, r3, r5
 800d088:	1e6b      	subs	r3, r5, #1
 800d08a:	9305      	str	r3, [sp, #20]
 800d08c:	bf45      	ittet	mi
 800d08e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d092:	9304      	strmi	r3, [sp, #16]
 800d094:	2300      	movpl	r3, #0
 800d096:	2300      	movmi	r3, #0
 800d098:	bf4c      	ite	mi
 800d09a:	9305      	strmi	r3, [sp, #20]
 800d09c:	9304      	strpl	r3, [sp, #16]
 800d09e:	9b00      	ldr	r3, [sp, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	db3d      	blt.n	800d120 <_dtoa_r+0x248>
 800d0a4:	9b05      	ldr	r3, [sp, #20]
 800d0a6:	9a00      	ldr	r2, [sp, #0]
 800d0a8:	920a      	str	r2, [sp, #40]	; 0x28
 800d0aa:	4413      	add	r3, r2
 800d0ac:	9305      	str	r3, [sp, #20]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	9307      	str	r3, [sp, #28]
 800d0b2:	9b06      	ldr	r3, [sp, #24]
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	f200 8089 	bhi.w	800d1cc <_dtoa_r+0x2f4>
 800d0ba:	2b05      	cmp	r3, #5
 800d0bc:	bfc4      	itt	gt
 800d0be:	3b04      	subgt	r3, #4
 800d0c0:	9306      	strgt	r3, [sp, #24]
 800d0c2:	9b06      	ldr	r3, [sp, #24]
 800d0c4:	f1a3 0302 	sub.w	r3, r3, #2
 800d0c8:	bfcc      	ite	gt
 800d0ca:	2500      	movgt	r5, #0
 800d0cc:	2501      	movle	r5, #1
 800d0ce:	2b03      	cmp	r3, #3
 800d0d0:	f200 8087 	bhi.w	800d1e2 <_dtoa_r+0x30a>
 800d0d4:	e8df f003 	tbb	[pc, r3]
 800d0d8:	59383a2d 	.word	0x59383a2d
 800d0dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d0e0:	441d      	add	r5, r3
 800d0e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d0e6:	2b20      	cmp	r3, #32
 800d0e8:	bfc1      	itttt	gt
 800d0ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d0ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d0f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d0f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d0fa:	bfda      	itte	le
 800d0fc:	f1c3 0320 	rsble	r3, r3, #32
 800d100:	fa06 f003 	lslle.w	r0, r6, r3
 800d104:	4318      	orrgt	r0, r3
 800d106:	f7f3 fa25 	bl	8000554 <__aeabi_ui2d>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4606      	mov	r6, r0
 800d10e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d112:	3d01      	subs	r5, #1
 800d114:	930e      	str	r3, [sp, #56]	; 0x38
 800d116:	e76a      	b.n	800cfee <_dtoa_r+0x116>
 800d118:	2301      	movs	r3, #1
 800d11a:	e7b2      	b.n	800d082 <_dtoa_r+0x1aa>
 800d11c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d11e:	e7b1      	b.n	800d084 <_dtoa_r+0x1ac>
 800d120:	9b04      	ldr	r3, [sp, #16]
 800d122:	9a00      	ldr	r2, [sp, #0]
 800d124:	1a9b      	subs	r3, r3, r2
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	4253      	negs	r3, r2
 800d12a:	9307      	str	r3, [sp, #28]
 800d12c:	2300      	movs	r3, #0
 800d12e:	930a      	str	r3, [sp, #40]	; 0x28
 800d130:	e7bf      	b.n	800d0b2 <_dtoa_r+0x1da>
 800d132:	2300      	movs	r3, #0
 800d134:	9308      	str	r3, [sp, #32]
 800d136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d138:	2b00      	cmp	r3, #0
 800d13a:	dc55      	bgt.n	800d1e8 <_dtoa_r+0x310>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d142:	461a      	mov	r2, r3
 800d144:	9209      	str	r2, [sp, #36]	; 0x24
 800d146:	e00c      	b.n	800d162 <_dtoa_r+0x28a>
 800d148:	2301      	movs	r3, #1
 800d14a:	e7f3      	b.n	800d134 <_dtoa_r+0x25c>
 800d14c:	2300      	movs	r3, #0
 800d14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d150:	9308      	str	r3, [sp, #32]
 800d152:	9b00      	ldr	r3, [sp, #0]
 800d154:	4413      	add	r3, r2
 800d156:	9302      	str	r3, [sp, #8]
 800d158:	3301      	adds	r3, #1
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	9303      	str	r3, [sp, #12]
 800d15e:	bfb8      	it	lt
 800d160:	2301      	movlt	r3, #1
 800d162:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d164:	2200      	movs	r2, #0
 800d166:	6042      	str	r2, [r0, #4]
 800d168:	2204      	movs	r2, #4
 800d16a:	f102 0614 	add.w	r6, r2, #20
 800d16e:	429e      	cmp	r6, r3
 800d170:	6841      	ldr	r1, [r0, #4]
 800d172:	d93d      	bls.n	800d1f0 <_dtoa_r+0x318>
 800d174:	4620      	mov	r0, r4
 800d176:	f000 fcb7 	bl	800dae8 <_Balloc>
 800d17a:	9001      	str	r0, [sp, #4]
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d13b      	bne.n	800d1f8 <_dtoa_r+0x320>
 800d180:	4b11      	ldr	r3, [pc, #68]	; (800d1c8 <_dtoa_r+0x2f0>)
 800d182:	4602      	mov	r2, r0
 800d184:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d188:	e6c0      	b.n	800cf0c <_dtoa_r+0x34>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e7df      	b.n	800d14e <_dtoa_r+0x276>
 800d18e:	bf00      	nop
 800d190:	636f4361 	.word	0x636f4361
 800d194:	3fd287a7 	.word	0x3fd287a7
 800d198:	8b60c8b3 	.word	0x8b60c8b3
 800d19c:	3fc68a28 	.word	0x3fc68a28
 800d1a0:	509f79fb 	.word	0x509f79fb
 800d1a4:	3fd34413 	.word	0x3fd34413
 800d1a8:	08010159 	.word	0x08010159
 800d1ac:	08010170 	.word	0x08010170
 800d1b0:	7ff00000 	.word	0x7ff00000
 800d1b4:	08010155 	.word	0x08010155
 800d1b8:	0801014c 	.word	0x0801014c
 800d1bc:	08010129 	.word	0x08010129
 800d1c0:	3ff80000 	.word	0x3ff80000
 800d1c4:	08010260 	.word	0x08010260
 800d1c8:	080101cb 	.word	0x080101cb
 800d1cc:	2501      	movs	r5, #1
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	9306      	str	r3, [sp, #24]
 800d1d2:	9508      	str	r5, [sp, #32]
 800d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2312      	movs	r3, #18
 800d1e0:	e7b0      	b.n	800d144 <_dtoa_r+0x26c>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	9308      	str	r3, [sp, #32]
 800d1e6:	e7f5      	b.n	800d1d4 <_dtoa_r+0x2fc>
 800d1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d1ee:	e7b8      	b.n	800d162 <_dtoa_r+0x28a>
 800d1f0:	3101      	adds	r1, #1
 800d1f2:	6041      	str	r1, [r0, #4]
 800d1f4:	0052      	lsls	r2, r2, #1
 800d1f6:	e7b8      	b.n	800d16a <_dtoa_r+0x292>
 800d1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1fa:	9a01      	ldr	r2, [sp, #4]
 800d1fc:	601a      	str	r2, [r3, #0]
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	2b0e      	cmp	r3, #14
 800d202:	f200 809d 	bhi.w	800d340 <_dtoa_r+0x468>
 800d206:	2d00      	cmp	r5, #0
 800d208:	f000 809a 	beq.w	800d340 <_dtoa_r+0x468>
 800d20c:	9b00      	ldr	r3, [sp, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	dd32      	ble.n	800d278 <_dtoa_r+0x3a0>
 800d212:	4ab7      	ldr	r2, [pc, #732]	; (800d4f0 <_dtoa_r+0x618>)
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d21c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d220:	9b00      	ldr	r3, [sp, #0]
 800d222:	05d8      	lsls	r0, r3, #23
 800d224:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d228:	d516      	bpl.n	800d258 <_dtoa_r+0x380>
 800d22a:	4bb2      	ldr	r3, [pc, #712]	; (800d4f4 <_dtoa_r+0x61c>)
 800d22c:	ec51 0b19 	vmov	r0, r1, d9
 800d230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d234:	f7f3 fb32 	bl	800089c <__aeabi_ddiv>
 800d238:	f007 070f 	and.w	r7, r7, #15
 800d23c:	4682      	mov	sl, r0
 800d23e:	468b      	mov	fp, r1
 800d240:	2503      	movs	r5, #3
 800d242:	4eac      	ldr	r6, [pc, #688]	; (800d4f4 <_dtoa_r+0x61c>)
 800d244:	b957      	cbnz	r7, 800d25c <_dtoa_r+0x384>
 800d246:	4642      	mov	r2, r8
 800d248:	464b      	mov	r3, r9
 800d24a:	4650      	mov	r0, sl
 800d24c:	4659      	mov	r1, fp
 800d24e:	f7f3 fb25 	bl	800089c <__aeabi_ddiv>
 800d252:	4682      	mov	sl, r0
 800d254:	468b      	mov	fp, r1
 800d256:	e028      	b.n	800d2aa <_dtoa_r+0x3d2>
 800d258:	2502      	movs	r5, #2
 800d25a:	e7f2      	b.n	800d242 <_dtoa_r+0x36a>
 800d25c:	07f9      	lsls	r1, r7, #31
 800d25e:	d508      	bpl.n	800d272 <_dtoa_r+0x39a>
 800d260:	4640      	mov	r0, r8
 800d262:	4649      	mov	r1, r9
 800d264:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d268:	f7f3 f9ee 	bl	8000648 <__aeabi_dmul>
 800d26c:	3501      	adds	r5, #1
 800d26e:	4680      	mov	r8, r0
 800d270:	4689      	mov	r9, r1
 800d272:	107f      	asrs	r7, r7, #1
 800d274:	3608      	adds	r6, #8
 800d276:	e7e5      	b.n	800d244 <_dtoa_r+0x36c>
 800d278:	f000 809b 	beq.w	800d3b2 <_dtoa_r+0x4da>
 800d27c:	9b00      	ldr	r3, [sp, #0]
 800d27e:	4f9d      	ldr	r7, [pc, #628]	; (800d4f4 <_dtoa_r+0x61c>)
 800d280:	425e      	negs	r6, r3
 800d282:	4b9b      	ldr	r3, [pc, #620]	; (800d4f0 <_dtoa_r+0x618>)
 800d284:	f006 020f 	and.w	r2, r6, #15
 800d288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	ec51 0b19 	vmov	r0, r1, d9
 800d294:	f7f3 f9d8 	bl	8000648 <__aeabi_dmul>
 800d298:	1136      	asrs	r6, r6, #4
 800d29a:	4682      	mov	sl, r0
 800d29c:	468b      	mov	fp, r1
 800d29e:	2300      	movs	r3, #0
 800d2a0:	2502      	movs	r5, #2
 800d2a2:	2e00      	cmp	r6, #0
 800d2a4:	d17a      	bne.n	800d39c <_dtoa_r+0x4c4>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1d3      	bne.n	800d252 <_dtoa_r+0x37a>
 800d2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f000 8082 	beq.w	800d3b6 <_dtoa_r+0x4de>
 800d2b2:	4b91      	ldr	r3, [pc, #580]	; (800d4f8 <_dtoa_r+0x620>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4650      	mov	r0, sl
 800d2b8:	4659      	mov	r1, fp
 800d2ba:	f7f3 fc37 	bl	8000b2c <__aeabi_dcmplt>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d079      	beq.n	800d3b6 <_dtoa_r+0x4de>
 800d2c2:	9b03      	ldr	r3, [sp, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d076      	beq.n	800d3b6 <_dtoa_r+0x4de>
 800d2c8:	9b02      	ldr	r3, [sp, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	dd36      	ble.n	800d33c <_dtoa_r+0x464>
 800d2ce:	9b00      	ldr	r3, [sp, #0]
 800d2d0:	4650      	mov	r0, sl
 800d2d2:	4659      	mov	r1, fp
 800d2d4:	1e5f      	subs	r7, r3, #1
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4b88      	ldr	r3, [pc, #544]	; (800d4fc <_dtoa_r+0x624>)
 800d2da:	f7f3 f9b5 	bl	8000648 <__aeabi_dmul>
 800d2de:	9e02      	ldr	r6, [sp, #8]
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	468b      	mov	fp, r1
 800d2e4:	3501      	adds	r5, #1
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f7f3 f944 	bl	8000574 <__aeabi_i2d>
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	465b      	mov	r3, fp
 800d2f0:	f7f3 f9aa 	bl	8000648 <__aeabi_dmul>
 800d2f4:	4b82      	ldr	r3, [pc, #520]	; (800d500 <_dtoa_r+0x628>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f7f2 fff0 	bl	80002dc <__adddf3>
 800d2fc:	46d0      	mov	r8, sl
 800d2fe:	46d9      	mov	r9, fp
 800d300:	4682      	mov	sl, r0
 800d302:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d306:	2e00      	cmp	r6, #0
 800d308:	d158      	bne.n	800d3bc <_dtoa_r+0x4e4>
 800d30a:	4b7e      	ldr	r3, [pc, #504]	; (800d504 <_dtoa_r+0x62c>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	4640      	mov	r0, r8
 800d310:	4649      	mov	r1, r9
 800d312:	f7f2 ffe1 	bl	80002d8 <__aeabi_dsub>
 800d316:	4652      	mov	r2, sl
 800d318:	465b      	mov	r3, fp
 800d31a:	4680      	mov	r8, r0
 800d31c:	4689      	mov	r9, r1
 800d31e:	f7f3 fc23 	bl	8000b68 <__aeabi_dcmpgt>
 800d322:	2800      	cmp	r0, #0
 800d324:	f040 8295 	bne.w	800d852 <_dtoa_r+0x97a>
 800d328:	4652      	mov	r2, sl
 800d32a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d32e:	4640      	mov	r0, r8
 800d330:	4649      	mov	r1, r9
 800d332:	f7f3 fbfb 	bl	8000b2c <__aeabi_dcmplt>
 800d336:	2800      	cmp	r0, #0
 800d338:	f040 8289 	bne.w	800d84e <_dtoa_r+0x976>
 800d33c:	ec5b ab19 	vmov	sl, fp, d9
 800d340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d342:	2b00      	cmp	r3, #0
 800d344:	f2c0 8148 	blt.w	800d5d8 <_dtoa_r+0x700>
 800d348:	9a00      	ldr	r2, [sp, #0]
 800d34a:	2a0e      	cmp	r2, #14
 800d34c:	f300 8144 	bgt.w	800d5d8 <_dtoa_r+0x700>
 800d350:	4b67      	ldr	r3, [pc, #412]	; (800d4f0 <_dtoa_r+0x618>)
 800d352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f280 80d5 	bge.w	800d50c <_dtoa_r+0x634>
 800d362:	9b03      	ldr	r3, [sp, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f300 80d1 	bgt.w	800d50c <_dtoa_r+0x634>
 800d36a:	f040 826f 	bne.w	800d84c <_dtoa_r+0x974>
 800d36e:	4b65      	ldr	r3, [pc, #404]	; (800d504 <_dtoa_r+0x62c>)
 800d370:	2200      	movs	r2, #0
 800d372:	4640      	mov	r0, r8
 800d374:	4649      	mov	r1, r9
 800d376:	f7f3 f967 	bl	8000648 <__aeabi_dmul>
 800d37a:	4652      	mov	r2, sl
 800d37c:	465b      	mov	r3, fp
 800d37e:	f7f3 fbe9 	bl	8000b54 <__aeabi_dcmpge>
 800d382:	9e03      	ldr	r6, [sp, #12]
 800d384:	4637      	mov	r7, r6
 800d386:	2800      	cmp	r0, #0
 800d388:	f040 8245 	bne.w	800d816 <_dtoa_r+0x93e>
 800d38c:	9d01      	ldr	r5, [sp, #4]
 800d38e:	2331      	movs	r3, #49	; 0x31
 800d390:	f805 3b01 	strb.w	r3, [r5], #1
 800d394:	9b00      	ldr	r3, [sp, #0]
 800d396:	3301      	adds	r3, #1
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	e240      	b.n	800d81e <_dtoa_r+0x946>
 800d39c:	07f2      	lsls	r2, r6, #31
 800d39e:	d505      	bpl.n	800d3ac <_dtoa_r+0x4d4>
 800d3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3a4:	f7f3 f950 	bl	8000648 <__aeabi_dmul>
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	1076      	asrs	r6, r6, #1
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	e777      	b.n	800d2a2 <_dtoa_r+0x3ca>
 800d3b2:	2502      	movs	r5, #2
 800d3b4:	e779      	b.n	800d2aa <_dtoa_r+0x3d2>
 800d3b6:	9f00      	ldr	r7, [sp, #0]
 800d3b8:	9e03      	ldr	r6, [sp, #12]
 800d3ba:	e794      	b.n	800d2e6 <_dtoa_r+0x40e>
 800d3bc:	9901      	ldr	r1, [sp, #4]
 800d3be:	4b4c      	ldr	r3, [pc, #304]	; (800d4f0 <_dtoa_r+0x618>)
 800d3c0:	4431      	add	r1, r6
 800d3c2:	910d      	str	r1, [sp, #52]	; 0x34
 800d3c4:	9908      	ldr	r1, [sp, #32]
 800d3c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d3ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d3ce:	2900      	cmp	r1, #0
 800d3d0:	d043      	beq.n	800d45a <_dtoa_r+0x582>
 800d3d2:	494d      	ldr	r1, [pc, #308]	; (800d508 <_dtoa_r+0x630>)
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	f7f3 fa61 	bl	800089c <__aeabi_ddiv>
 800d3da:	4652      	mov	r2, sl
 800d3dc:	465b      	mov	r3, fp
 800d3de:	f7f2 ff7b 	bl	80002d8 <__aeabi_dsub>
 800d3e2:	9d01      	ldr	r5, [sp, #4]
 800d3e4:	4682      	mov	sl, r0
 800d3e6:	468b      	mov	fp, r1
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4640      	mov	r0, r8
 800d3ec:	f7f3 fbdc 	bl	8000ba8 <__aeabi_d2iz>
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	f7f3 f8bf 	bl	8000574 <__aeabi_i2d>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	f7f2 ff6b 	bl	80002d8 <__aeabi_dsub>
 800d402:	3630      	adds	r6, #48	; 0x30
 800d404:	f805 6b01 	strb.w	r6, [r5], #1
 800d408:	4652      	mov	r2, sl
 800d40a:	465b      	mov	r3, fp
 800d40c:	4680      	mov	r8, r0
 800d40e:	4689      	mov	r9, r1
 800d410:	f7f3 fb8c 	bl	8000b2c <__aeabi_dcmplt>
 800d414:	2800      	cmp	r0, #0
 800d416:	d163      	bne.n	800d4e0 <_dtoa_r+0x608>
 800d418:	4642      	mov	r2, r8
 800d41a:	464b      	mov	r3, r9
 800d41c:	4936      	ldr	r1, [pc, #216]	; (800d4f8 <_dtoa_r+0x620>)
 800d41e:	2000      	movs	r0, #0
 800d420:	f7f2 ff5a 	bl	80002d8 <__aeabi_dsub>
 800d424:	4652      	mov	r2, sl
 800d426:	465b      	mov	r3, fp
 800d428:	f7f3 fb80 	bl	8000b2c <__aeabi_dcmplt>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	f040 80b5 	bne.w	800d59c <_dtoa_r+0x6c4>
 800d432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d434:	429d      	cmp	r5, r3
 800d436:	d081      	beq.n	800d33c <_dtoa_r+0x464>
 800d438:	4b30      	ldr	r3, [pc, #192]	; (800d4fc <_dtoa_r+0x624>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	4650      	mov	r0, sl
 800d43e:	4659      	mov	r1, fp
 800d440:	f7f3 f902 	bl	8000648 <__aeabi_dmul>
 800d444:	4b2d      	ldr	r3, [pc, #180]	; (800d4fc <_dtoa_r+0x624>)
 800d446:	4682      	mov	sl, r0
 800d448:	468b      	mov	fp, r1
 800d44a:	4640      	mov	r0, r8
 800d44c:	4649      	mov	r1, r9
 800d44e:	2200      	movs	r2, #0
 800d450:	f7f3 f8fa 	bl	8000648 <__aeabi_dmul>
 800d454:	4680      	mov	r8, r0
 800d456:	4689      	mov	r9, r1
 800d458:	e7c6      	b.n	800d3e8 <_dtoa_r+0x510>
 800d45a:	4650      	mov	r0, sl
 800d45c:	4659      	mov	r1, fp
 800d45e:	f7f3 f8f3 	bl	8000648 <__aeabi_dmul>
 800d462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d464:	9d01      	ldr	r5, [sp, #4]
 800d466:	930f      	str	r3, [sp, #60]	; 0x3c
 800d468:	4682      	mov	sl, r0
 800d46a:	468b      	mov	fp, r1
 800d46c:	4649      	mov	r1, r9
 800d46e:	4640      	mov	r0, r8
 800d470:	f7f3 fb9a 	bl	8000ba8 <__aeabi_d2iz>
 800d474:	4606      	mov	r6, r0
 800d476:	f7f3 f87d 	bl	8000574 <__aeabi_i2d>
 800d47a:	3630      	adds	r6, #48	; 0x30
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4640      	mov	r0, r8
 800d482:	4649      	mov	r1, r9
 800d484:	f7f2 ff28 	bl	80002d8 <__aeabi_dsub>
 800d488:	f805 6b01 	strb.w	r6, [r5], #1
 800d48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d48e:	429d      	cmp	r5, r3
 800d490:	4680      	mov	r8, r0
 800d492:	4689      	mov	r9, r1
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	d124      	bne.n	800d4e4 <_dtoa_r+0x60c>
 800d49a:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <_dtoa_r+0x630>)
 800d49c:	4650      	mov	r0, sl
 800d49e:	4659      	mov	r1, fp
 800d4a0:	f7f2 ff1c 	bl	80002dc <__adddf3>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4640      	mov	r0, r8
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	f7f3 fb5c 	bl	8000b68 <__aeabi_dcmpgt>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d173      	bne.n	800d59c <_dtoa_r+0x6c4>
 800d4b4:	4652      	mov	r2, sl
 800d4b6:	465b      	mov	r3, fp
 800d4b8:	4913      	ldr	r1, [pc, #76]	; (800d508 <_dtoa_r+0x630>)
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	f7f2 ff0c 	bl	80002d8 <__aeabi_dsub>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	4649      	mov	r1, r9
 800d4c8:	f7f3 fb30 	bl	8000b2c <__aeabi_dcmplt>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	f43f af35 	beq.w	800d33c <_dtoa_r+0x464>
 800d4d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d4d4:	1e6b      	subs	r3, r5, #1
 800d4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d4dc:	2b30      	cmp	r3, #48	; 0x30
 800d4de:	d0f8      	beq.n	800d4d2 <_dtoa_r+0x5fa>
 800d4e0:	9700      	str	r7, [sp, #0]
 800d4e2:	e049      	b.n	800d578 <_dtoa_r+0x6a0>
 800d4e4:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <_dtoa_r+0x624>)
 800d4e6:	f7f3 f8af 	bl	8000648 <__aeabi_dmul>
 800d4ea:	4680      	mov	r8, r0
 800d4ec:	4689      	mov	r9, r1
 800d4ee:	e7bd      	b.n	800d46c <_dtoa_r+0x594>
 800d4f0:	08010260 	.word	0x08010260
 800d4f4:	08010238 	.word	0x08010238
 800d4f8:	3ff00000 	.word	0x3ff00000
 800d4fc:	40240000 	.word	0x40240000
 800d500:	401c0000 	.word	0x401c0000
 800d504:	40140000 	.word	0x40140000
 800d508:	3fe00000 	.word	0x3fe00000
 800d50c:	9d01      	ldr	r5, [sp, #4]
 800d50e:	4656      	mov	r6, sl
 800d510:	465f      	mov	r7, fp
 800d512:	4642      	mov	r2, r8
 800d514:	464b      	mov	r3, r9
 800d516:	4630      	mov	r0, r6
 800d518:	4639      	mov	r1, r7
 800d51a:	f7f3 f9bf 	bl	800089c <__aeabi_ddiv>
 800d51e:	f7f3 fb43 	bl	8000ba8 <__aeabi_d2iz>
 800d522:	4682      	mov	sl, r0
 800d524:	f7f3 f826 	bl	8000574 <__aeabi_i2d>
 800d528:	4642      	mov	r2, r8
 800d52a:	464b      	mov	r3, r9
 800d52c:	f7f3 f88c 	bl	8000648 <__aeabi_dmul>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d53c:	f7f2 fecc 	bl	80002d8 <__aeabi_dsub>
 800d540:	f805 6b01 	strb.w	r6, [r5], #1
 800d544:	9e01      	ldr	r6, [sp, #4]
 800d546:	9f03      	ldr	r7, [sp, #12]
 800d548:	1bae      	subs	r6, r5, r6
 800d54a:	42b7      	cmp	r7, r6
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	d135      	bne.n	800d5be <_dtoa_r+0x6e6>
 800d552:	f7f2 fec3 	bl	80002dc <__adddf3>
 800d556:	4642      	mov	r2, r8
 800d558:	464b      	mov	r3, r9
 800d55a:	4606      	mov	r6, r0
 800d55c:	460f      	mov	r7, r1
 800d55e:	f7f3 fb03 	bl	8000b68 <__aeabi_dcmpgt>
 800d562:	b9d0      	cbnz	r0, 800d59a <_dtoa_r+0x6c2>
 800d564:	4642      	mov	r2, r8
 800d566:	464b      	mov	r3, r9
 800d568:	4630      	mov	r0, r6
 800d56a:	4639      	mov	r1, r7
 800d56c:	f7f3 fad4 	bl	8000b18 <__aeabi_dcmpeq>
 800d570:	b110      	cbz	r0, 800d578 <_dtoa_r+0x6a0>
 800d572:	f01a 0f01 	tst.w	sl, #1
 800d576:	d110      	bne.n	800d59a <_dtoa_r+0x6c2>
 800d578:	4620      	mov	r0, r4
 800d57a:	ee18 1a10 	vmov	r1, s16
 800d57e:	f000 faf3 	bl	800db68 <_Bfree>
 800d582:	2300      	movs	r3, #0
 800d584:	9800      	ldr	r0, [sp, #0]
 800d586:	702b      	strb	r3, [r5, #0]
 800d588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d58a:	3001      	adds	r0, #1
 800d58c:	6018      	str	r0, [r3, #0]
 800d58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d590:	2b00      	cmp	r3, #0
 800d592:	f43f acf1 	beq.w	800cf78 <_dtoa_r+0xa0>
 800d596:	601d      	str	r5, [r3, #0]
 800d598:	e4ee      	b.n	800cf78 <_dtoa_r+0xa0>
 800d59a:	9f00      	ldr	r7, [sp, #0]
 800d59c:	462b      	mov	r3, r5
 800d59e:	461d      	mov	r5, r3
 800d5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5a4:	2a39      	cmp	r2, #57	; 0x39
 800d5a6:	d106      	bne.n	800d5b6 <_dtoa_r+0x6de>
 800d5a8:	9a01      	ldr	r2, [sp, #4]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d1f7      	bne.n	800d59e <_dtoa_r+0x6c6>
 800d5ae:	9901      	ldr	r1, [sp, #4]
 800d5b0:	2230      	movs	r2, #48	; 0x30
 800d5b2:	3701      	adds	r7, #1
 800d5b4:	700a      	strb	r2, [r1, #0]
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	3201      	adds	r2, #1
 800d5ba:	701a      	strb	r2, [r3, #0]
 800d5bc:	e790      	b.n	800d4e0 <_dtoa_r+0x608>
 800d5be:	4ba6      	ldr	r3, [pc, #664]	; (800d858 <_dtoa_r+0x980>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f7f3 f841 	bl	8000648 <__aeabi_dmul>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	f7f3 faa3 	bl	8000b18 <__aeabi_dcmpeq>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d09d      	beq.n	800d512 <_dtoa_r+0x63a>
 800d5d6:	e7cf      	b.n	800d578 <_dtoa_r+0x6a0>
 800d5d8:	9a08      	ldr	r2, [sp, #32]
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	f000 80d7 	beq.w	800d78e <_dtoa_r+0x8b6>
 800d5e0:	9a06      	ldr	r2, [sp, #24]
 800d5e2:	2a01      	cmp	r2, #1
 800d5e4:	f300 80ba 	bgt.w	800d75c <_dtoa_r+0x884>
 800d5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5ea:	2a00      	cmp	r2, #0
 800d5ec:	f000 80b2 	beq.w	800d754 <_dtoa_r+0x87c>
 800d5f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d5f4:	9e07      	ldr	r6, [sp, #28]
 800d5f6:	9d04      	ldr	r5, [sp, #16]
 800d5f8:	9a04      	ldr	r2, [sp, #16]
 800d5fa:	441a      	add	r2, r3
 800d5fc:	9204      	str	r2, [sp, #16]
 800d5fe:	9a05      	ldr	r2, [sp, #20]
 800d600:	2101      	movs	r1, #1
 800d602:	441a      	add	r2, r3
 800d604:	4620      	mov	r0, r4
 800d606:	9205      	str	r2, [sp, #20]
 800d608:	f000 fb66 	bl	800dcd8 <__i2b>
 800d60c:	4607      	mov	r7, r0
 800d60e:	2d00      	cmp	r5, #0
 800d610:	dd0c      	ble.n	800d62c <_dtoa_r+0x754>
 800d612:	9b05      	ldr	r3, [sp, #20]
 800d614:	2b00      	cmp	r3, #0
 800d616:	dd09      	ble.n	800d62c <_dtoa_r+0x754>
 800d618:	42ab      	cmp	r3, r5
 800d61a:	9a04      	ldr	r2, [sp, #16]
 800d61c:	bfa8      	it	ge
 800d61e:	462b      	movge	r3, r5
 800d620:	1ad2      	subs	r2, r2, r3
 800d622:	9204      	str	r2, [sp, #16]
 800d624:	9a05      	ldr	r2, [sp, #20]
 800d626:	1aed      	subs	r5, r5, r3
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	9305      	str	r3, [sp, #20]
 800d62c:	9b07      	ldr	r3, [sp, #28]
 800d62e:	b31b      	cbz	r3, 800d678 <_dtoa_r+0x7a0>
 800d630:	9b08      	ldr	r3, [sp, #32]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 80af 	beq.w	800d796 <_dtoa_r+0x8be>
 800d638:	2e00      	cmp	r6, #0
 800d63a:	dd13      	ble.n	800d664 <_dtoa_r+0x78c>
 800d63c:	4639      	mov	r1, r7
 800d63e:	4632      	mov	r2, r6
 800d640:	4620      	mov	r0, r4
 800d642:	f000 fc09 	bl	800de58 <__pow5mult>
 800d646:	ee18 2a10 	vmov	r2, s16
 800d64a:	4601      	mov	r1, r0
 800d64c:	4607      	mov	r7, r0
 800d64e:	4620      	mov	r0, r4
 800d650:	f000 fb58 	bl	800dd04 <__multiply>
 800d654:	ee18 1a10 	vmov	r1, s16
 800d658:	4680      	mov	r8, r0
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 fa84 	bl	800db68 <_Bfree>
 800d660:	ee08 8a10 	vmov	s16, r8
 800d664:	9b07      	ldr	r3, [sp, #28]
 800d666:	1b9a      	subs	r2, r3, r6
 800d668:	d006      	beq.n	800d678 <_dtoa_r+0x7a0>
 800d66a:	ee18 1a10 	vmov	r1, s16
 800d66e:	4620      	mov	r0, r4
 800d670:	f000 fbf2 	bl	800de58 <__pow5mult>
 800d674:	ee08 0a10 	vmov	s16, r0
 800d678:	2101      	movs	r1, #1
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 fb2c 	bl	800dcd8 <__i2b>
 800d680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d682:	2b00      	cmp	r3, #0
 800d684:	4606      	mov	r6, r0
 800d686:	f340 8088 	ble.w	800d79a <_dtoa_r+0x8c2>
 800d68a:	461a      	mov	r2, r3
 800d68c:	4601      	mov	r1, r0
 800d68e:	4620      	mov	r0, r4
 800d690:	f000 fbe2 	bl	800de58 <__pow5mult>
 800d694:	9b06      	ldr	r3, [sp, #24]
 800d696:	2b01      	cmp	r3, #1
 800d698:	4606      	mov	r6, r0
 800d69a:	f340 8081 	ble.w	800d7a0 <_dtoa_r+0x8c8>
 800d69e:	f04f 0800 	mov.w	r8, #0
 800d6a2:	6933      	ldr	r3, [r6, #16]
 800d6a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d6a8:	6918      	ldr	r0, [r3, #16]
 800d6aa:	f000 fac5 	bl	800dc38 <__hi0bits>
 800d6ae:	f1c0 0020 	rsb	r0, r0, #32
 800d6b2:	9b05      	ldr	r3, [sp, #20]
 800d6b4:	4418      	add	r0, r3
 800d6b6:	f010 001f 	ands.w	r0, r0, #31
 800d6ba:	f000 8092 	beq.w	800d7e2 <_dtoa_r+0x90a>
 800d6be:	f1c0 0320 	rsb	r3, r0, #32
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	f340 808a 	ble.w	800d7dc <_dtoa_r+0x904>
 800d6c8:	f1c0 001c 	rsb	r0, r0, #28
 800d6cc:	9b04      	ldr	r3, [sp, #16]
 800d6ce:	4403      	add	r3, r0
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	9b05      	ldr	r3, [sp, #20]
 800d6d4:	4403      	add	r3, r0
 800d6d6:	4405      	add	r5, r0
 800d6d8:	9305      	str	r3, [sp, #20]
 800d6da:	9b04      	ldr	r3, [sp, #16]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	dd07      	ble.n	800d6f0 <_dtoa_r+0x818>
 800d6e0:	ee18 1a10 	vmov	r1, s16
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f000 fc10 	bl	800df0c <__lshift>
 800d6ec:	ee08 0a10 	vmov	s16, r0
 800d6f0:	9b05      	ldr	r3, [sp, #20]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	dd05      	ble.n	800d702 <_dtoa_r+0x82a>
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fc06 	bl	800df0c <__lshift>
 800d700:	4606      	mov	r6, r0
 800d702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d06e      	beq.n	800d7e6 <_dtoa_r+0x90e>
 800d708:	ee18 0a10 	vmov	r0, s16
 800d70c:	4631      	mov	r1, r6
 800d70e:	f000 fc6d 	bl	800dfec <__mcmp>
 800d712:	2800      	cmp	r0, #0
 800d714:	da67      	bge.n	800d7e6 <_dtoa_r+0x90e>
 800d716:	9b00      	ldr	r3, [sp, #0]
 800d718:	3b01      	subs	r3, #1
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	220a      	movs	r2, #10
 800d722:	2300      	movs	r3, #0
 800d724:	4620      	mov	r0, r4
 800d726:	f000 fa41 	bl	800dbac <__multadd>
 800d72a:	9b08      	ldr	r3, [sp, #32]
 800d72c:	ee08 0a10 	vmov	s16, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	f000 81b1 	beq.w	800da98 <_dtoa_r+0xbc0>
 800d736:	2300      	movs	r3, #0
 800d738:	4639      	mov	r1, r7
 800d73a:	220a      	movs	r2, #10
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fa35 	bl	800dbac <__multadd>
 800d742:	9b02      	ldr	r3, [sp, #8]
 800d744:	2b00      	cmp	r3, #0
 800d746:	4607      	mov	r7, r0
 800d748:	f300 808e 	bgt.w	800d868 <_dtoa_r+0x990>
 800d74c:	9b06      	ldr	r3, [sp, #24]
 800d74e:	2b02      	cmp	r3, #2
 800d750:	dc51      	bgt.n	800d7f6 <_dtoa_r+0x91e>
 800d752:	e089      	b.n	800d868 <_dtoa_r+0x990>
 800d754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d75a:	e74b      	b.n	800d5f4 <_dtoa_r+0x71c>
 800d75c:	9b03      	ldr	r3, [sp, #12]
 800d75e:	1e5e      	subs	r6, r3, #1
 800d760:	9b07      	ldr	r3, [sp, #28]
 800d762:	42b3      	cmp	r3, r6
 800d764:	bfbf      	itttt	lt
 800d766:	9b07      	ldrlt	r3, [sp, #28]
 800d768:	9607      	strlt	r6, [sp, #28]
 800d76a:	1af2      	sublt	r2, r6, r3
 800d76c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d76e:	bfb6      	itet	lt
 800d770:	189b      	addlt	r3, r3, r2
 800d772:	1b9e      	subge	r6, r3, r6
 800d774:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	bfb8      	it	lt
 800d77a:	2600      	movlt	r6, #0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	bfb7      	itett	lt
 800d780:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d784:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d788:	1a9d      	sublt	r5, r3, r2
 800d78a:	2300      	movlt	r3, #0
 800d78c:	e734      	b.n	800d5f8 <_dtoa_r+0x720>
 800d78e:	9e07      	ldr	r6, [sp, #28]
 800d790:	9d04      	ldr	r5, [sp, #16]
 800d792:	9f08      	ldr	r7, [sp, #32]
 800d794:	e73b      	b.n	800d60e <_dtoa_r+0x736>
 800d796:	9a07      	ldr	r2, [sp, #28]
 800d798:	e767      	b.n	800d66a <_dtoa_r+0x792>
 800d79a:	9b06      	ldr	r3, [sp, #24]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	dc18      	bgt.n	800d7d2 <_dtoa_r+0x8fa>
 800d7a0:	f1ba 0f00 	cmp.w	sl, #0
 800d7a4:	d115      	bne.n	800d7d2 <_dtoa_r+0x8fa>
 800d7a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7aa:	b993      	cbnz	r3, 800d7d2 <_dtoa_r+0x8fa>
 800d7ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7b0:	0d1b      	lsrs	r3, r3, #20
 800d7b2:	051b      	lsls	r3, r3, #20
 800d7b4:	b183      	cbz	r3, 800d7d8 <_dtoa_r+0x900>
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	9304      	str	r3, [sp, #16]
 800d7bc:	9b05      	ldr	r3, [sp, #20]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	9305      	str	r3, [sp, #20]
 800d7c2:	f04f 0801 	mov.w	r8, #1
 800d7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f47f af6a 	bne.w	800d6a2 <_dtoa_r+0x7ca>
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	e76f      	b.n	800d6b2 <_dtoa_r+0x7da>
 800d7d2:	f04f 0800 	mov.w	r8, #0
 800d7d6:	e7f6      	b.n	800d7c6 <_dtoa_r+0x8ee>
 800d7d8:	4698      	mov	r8, r3
 800d7da:	e7f4      	b.n	800d7c6 <_dtoa_r+0x8ee>
 800d7dc:	f43f af7d 	beq.w	800d6da <_dtoa_r+0x802>
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	301c      	adds	r0, #28
 800d7e4:	e772      	b.n	800d6cc <_dtoa_r+0x7f4>
 800d7e6:	9b03      	ldr	r3, [sp, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	dc37      	bgt.n	800d85c <_dtoa_r+0x984>
 800d7ec:	9b06      	ldr	r3, [sp, #24]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	dd34      	ble.n	800d85c <_dtoa_r+0x984>
 800d7f2:	9b03      	ldr	r3, [sp, #12]
 800d7f4:	9302      	str	r3, [sp, #8]
 800d7f6:	9b02      	ldr	r3, [sp, #8]
 800d7f8:	b96b      	cbnz	r3, 800d816 <_dtoa_r+0x93e>
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	2205      	movs	r2, #5
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 f9d4 	bl	800dbac <__multadd>
 800d804:	4601      	mov	r1, r0
 800d806:	4606      	mov	r6, r0
 800d808:	ee18 0a10 	vmov	r0, s16
 800d80c:	f000 fbee 	bl	800dfec <__mcmp>
 800d810:	2800      	cmp	r0, #0
 800d812:	f73f adbb 	bgt.w	800d38c <_dtoa_r+0x4b4>
 800d816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d818:	9d01      	ldr	r5, [sp, #4]
 800d81a:	43db      	mvns	r3, r3
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	f04f 0800 	mov.w	r8, #0
 800d822:	4631      	mov	r1, r6
 800d824:	4620      	mov	r0, r4
 800d826:	f000 f99f 	bl	800db68 <_Bfree>
 800d82a:	2f00      	cmp	r7, #0
 800d82c:	f43f aea4 	beq.w	800d578 <_dtoa_r+0x6a0>
 800d830:	f1b8 0f00 	cmp.w	r8, #0
 800d834:	d005      	beq.n	800d842 <_dtoa_r+0x96a>
 800d836:	45b8      	cmp	r8, r7
 800d838:	d003      	beq.n	800d842 <_dtoa_r+0x96a>
 800d83a:	4641      	mov	r1, r8
 800d83c:	4620      	mov	r0, r4
 800d83e:	f000 f993 	bl	800db68 <_Bfree>
 800d842:	4639      	mov	r1, r7
 800d844:	4620      	mov	r0, r4
 800d846:	f000 f98f 	bl	800db68 <_Bfree>
 800d84a:	e695      	b.n	800d578 <_dtoa_r+0x6a0>
 800d84c:	2600      	movs	r6, #0
 800d84e:	4637      	mov	r7, r6
 800d850:	e7e1      	b.n	800d816 <_dtoa_r+0x93e>
 800d852:	9700      	str	r7, [sp, #0]
 800d854:	4637      	mov	r7, r6
 800d856:	e599      	b.n	800d38c <_dtoa_r+0x4b4>
 800d858:	40240000 	.word	0x40240000
 800d85c:	9b08      	ldr	r3, [sp, #32]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 80ca 	beq.w	800d9f8 <_dtoa_r+0xb20>
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	9302      	str	r3, [sp, #8]
 800d868:	2d00      	cmp	r5, #0
 800d86a:	dd05      	ble.n	800d878 <_dtoa_r+0x9a0>
 800d86c:	4639      	mov	r1, r7
 800d86e:	462a      	mov	r2, r5
 800d870:	4620      	mov	r0, r4
 800d872:	f000 fb4b 	bl	800df0c <__lshift>
 800d876:	4607      	mov	r7, r0
 800d878:	f1b8 0f00 	cmp.w	r8, #0
 800d87c:	d05b      	beq.n	800d936 <_dtoa_r+0xa5e>
 800d87e:	6879      	ldr	r1, [r7, #4]
 800d880:	4620      	mov	r0, r4
 800d882:	f000 f931 	bl	800dae8 <_Balloc>
 800d886:	4605      	mov	r5, r0
 800d888:	b928      	cbnz	r0, 800d896 <_dtoa_r+0x9be>
 800d88a:	4b87      	ldr	r3, [pc, #540]	; (800daa8 <_dtoa_r+0xbd0>)
 800d88c:	4602      	mov	r2, r0
 800d88e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d892:	f7ff bb3b 	b.w	800cf0c <_dtoa_r+0x34>
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	3202      	adds	r2, #2
 800d89a:	0092      	lsls	r2, r2, #2
 800d89c:	f107 010c 	add.w	r1, r7, #12
 800d8a0:	300c      	adds	r0, #12
 800d8a2:	f000 f913 	bl	800dacc <memcpy>
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f000 fb2e 	bl	800df0c <__lshift>
 800d8b0:	9b01      	ldr	r3, [sp, #4]
 800d8b2:	f103 0901 	add.w	r9, r3, #1
 800d8b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	9305      	str	r3, [sp, #20]
 800d8be:	f00a 0301 	and.w	r3, sl, #1
 800d8c2:	46b8      	mov	r8, r7
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	4607      	mov	r7, r0
 800d8c8:	4631      	mov	r1, r6
 800d8ca:	ee18 0a10 	vmov	r0, s16
 800d8ce:	f7ff fa75 	bl	800cdbc <quorem>
 800d8d2:	4641      	mov	r1, r8
 800d8d4:	9002      	str	r0, [sp, #8]
 800d8d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d8da:	ee18 0a10 	vmov	r0, s16
 800d8de:	f000 fb85 	bl	800dfec <__mcmp>
 800d8e2:	463a      	mov	r2, r7
 800d8e4:	9003      	str	r0, [sp, #12]
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 fb9b 	bl	800e024 <__mdiff>
 800d8ee:	68c2      	ldr	r2, [r0, #12]
 800d8f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	bb02      	cbnz	r2, 800d93a <_dtoa_r+0xa62>
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	ee18 0a10 	vmov	r0, s16
 800d8fe:	f000 fb75 	bl	800dfec <__mcmp>
 800d902:	4602      	mov	r2, r0
 800d904:	4629      	mov	r1, r5
 800d906:	4620      	mov	r0, r4
 800d908:	9207      	str	r2, [sp, #28]
 800d90a:	f000 f92d 	bl	800db68 <_Bfree>
 800d90e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d912:	ea43 0102 	orr.w	r1, r3, r2
 800d916:	9b04      	ldr	r3, [sp, #16]
 800d918:	430b      	orrs	r3, r1
 800d91a:	464d      	mov	r5, r9
 800d91c:	d10f      	bne.n	800d93e <_dtoa_r+0xa66>
 800d91e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d922:	d02a      	beq.n	800d97a <_dtoa_r+0xaa2>
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	dd02      	ble.n	800d930 <_dtoa_r+0xa58>
 800d92a:	9b02      	ldr	r3, [sp, #8]
 800d92c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d930:	f88b a000 	strb.w	sl, [fp]
 800d934:	e775      	b.n	800d822 <_dtoa_r+0x94a>
 800d936:	4638      	mov	r0, r7
 800d938:	e7ba      	b.n	800d8b0 <_dtoa_r+0x9d8>
 800d93a:	2201      	movs	r2, #1
 800d93c:	e7e2      	b.n	800d904 <_dtoa_r+0xa2c>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	db04      	blt.n	800d94e <_dtoa_r+0xa76>
 800d944:	9906      	ldr	r1, [sp, #24]
 800d946:	430b      	orrs	r3, r1
 800d948:	9904      	ldr	r1, [sp, #16]
 800d94a:	430b      	orrs	r3, r1
 800d94c:	d122      	bne.n	800d994 <_dtoa_r+0xabc>
 800d94e:	2a00      	cmp	r2, #0
 800d950:	ddee      	ble.n	800d930 <_dtoa_r+0xa58>
 800d952:	ee18 1a10 	vmov	r1, s16
 800d956:	2201      	movs	r2, #1
 800d958:	4620      	mov	r0, r4
 800d95a:	f000 fad7 	bl	800df0c <__lshift>
 800d95e:	4631      	mov	r1, r6
 800d960:	ee08 0a10 	vmov	s16, r0
 800d964:	f000 fb42 	bl	800dfec <__mcmp>
 800d968:	2800      	cmp	r0, #0
 800d96a:	dc03      	bgt.n	800d974 <_dtoa_r+0xa9c>
 800d96c:	d1e0      	bne.n	800d930 <_dtoa_r+0xa58>
 800d96e:	f01a 0f01 	tst.w	sl, #1
 800d972:	d0dd      	beq.n	800d930 <_dtoa_r+0xa58>
 800d974:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d978:	d1d7      	bne.n	800d92a <_dtoa_r+0xa52>
 800d97a:	2339      	movs	r3, #57	; 0x39
 800d97c:	f88b 3000 	strb.w	r3, [fp]
 800d980:	462b      	mov	r3, r5
 800d982:	461d      	mov	r5, r3
 800d984:	3b01      	subs	r3, #1
 800d986:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d98a:	2a39      	cmp	r2, #57	; 0x39
 800d98c:	d071      	beq.n	800da72 <_dtoa_r+0xb9a>
 800d98e:	3201      	adds	r2, #1
 800d990:	701a      	strb	r2, [r3, #0]
 800d992:	e746      	b.n	800d822 <_dtoa_r+0x94a>
 800d994:	2a00      	cmp	r2, #0
 800d996:	dd07      	ble.n	800d9a8 <_dtoa_r+0xad0>
 800d998:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d99c:	d0ed      	beq.n	800d97a <_dtoa_r+0xaa2>
 800d99e:	f10a 0301 	add.w	r3, sl, #1
 800d9a2:	f88b 3000 	strb.w	r3, [fp]
 800d9a6:	e73c      	b.n	800d822 <_dtoa_r+0x94a>
 800d9a8:	9b05      	ldr	r3, [sp, #20]
 800d9aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d9ae:	4599      	cmp	r9, r3
 800d9b0:	d047      	beq.n	800da42 <_dtoa_r+0xb6a>
 800d9b2:	ee18 1a10 	vmov	r1, s16
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	220a      	movs	r2, #10
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f000 f8f6 	bl	800dbac <__multadd>
 800d9c0:	45b8      	cmp	r8, r7
 800d9c2:	ee08 0a10 	vmov	s16, r0
 800d9c6:	f04f 0300 	mov.w	r3, #0
 800d9ca:	f04f 020a 	mov.w	r2, #10
 800d9ce:	4641      	mov	r1, r8
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	d106      	bne.n	800d9e2 <_dtoa_r+0xb0a>
 800d9d4:	f000 f8ea 	bl	800dbac <__multadd>
 800d9d8:	4680      	mov	r8, r0
 800d9da:	4607      	mov	r7, r0
 800d9dc:	f109 0901 	add.w	r9, r9, #1
 800d9e0:	e772      	b.n	800d8c8 <_dtoa_r+0x9f0>
 800d9e2:	f000 f8e3 	bl	800dbac <__multadd>
 800d9e6:	4639      	mov	r1, r7
 800d9e8:	4680      	mov	r8, r0
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	220a      	movs	r2, #10
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 f8dc 	bl	800dbac <__multadd>
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	e7f1      	b.n	800d9dc <_dtoa_r+0xb04>
 800d9f8:	9b03      	ldr	r3, [sp, #12]
 800d9fa:	9302      	str	r3, [sp, #8]
 800d9fc:	9d01      	ldr	r5, [sp, #4]
 800d9fe:	ee18 0a10 	vmov	r0, s16
 800da02:	4631      	mov	r1, r6
 800da04:	f7ff f9da 	bl	800cdbc <quorem>
 800da08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da0c:	9b01      	ldr	r3, [sp, #4]
 800da0e:	f805 ab01 	strb.w	sl, [r5], #1
 800da12:	1aea      	subs	r2, r5, r3
 800da14:	9b02      	ldr	r3, [sp, #8]
 800da16:	4293      	cmp	r3, r2
 800da18:	dd09      	ble.n	800da2e <_dtoa_r+0xb56>
 800da1a:	ee18 1a10 	vmov	r1, s16
 800da1e:	2300      	movs	r3, #0
 800da20:	220a      	movs	r2, #10
 800da22:	4620      	mov	r0, r4
 800da24:	f000 f8c2 	bl	800dbac <__multadd>
 800da28:	ee08 0a10 	vmov	s16, r0
 800da2c:	e7e7      	b.n	800d9fe <_dtoa_r+0xb26>
 800da2e:	9b02      	ldr	r3, [sp, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	bfc8      	it	gt
 800da34:	461d      	movgt	r5, r3
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	bfd8      	it	le
 800da3a:	2501      	movle	r5, #1
 800da3c:	441d      	add	r5, r3
 800da3e:	f04f 0800 	mov.w	r8, #0
 800da42:	ee18 1a10 	vmov	r1, s16
 800da46:	2201      	movs	r2, #1
 800da48:	4620      	mov	r0, r4
 800da4a:	f000 fa5f 	bl	800df0c <__lshift>
 800da4e:	4631      	mov	r1, r6
 800da50:	ee08 0a10 	vmov	s16, r0
 800da54:	f000 faca 	bl	800dfec <__mcmp>
 800da58:	2800      	cmp	r0, #0
 800da5a:	dc91      	bgt.n	800d980 <_dtoa_r+0xaa8>
 800da5c:	d102      	bne.n	800da64 <_dtoa_r+0xb8c>
 800da5e:	f01a 0f01 	tst.w	sl, #1
 800da62:	d18d      	bne.n	800d980 <_dtoa_r+0xaa8>
 800da64:	462b      	mov	r3, r5
 800da66:	461d      	mov	r5, r3
 800da68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da6c:	2a30      	cmp	r2, #48	; 0x30
 800da6e:	d0fa      	beq.n	800da66 <_dtoa_r+0xb8e>
 800da70:	e6d7      	b.n	800d822 <_dtoa_r+0x94a>
 800da72:	9a01      	ldr	r2, [sp, #4]
 800da74:	429a      	cmp	r2, r3
 800da76:	d184      	bne.n	800d982 <_dtoa_r+0xaaa>
 800da78:	9b00      	ldr	r3, [sp, #0]
 800da7a:	3301      	adds	r3, #1
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	2331      	movs	r3, #49	; 0x31
 800da80:	7013      	strb	r3, [r2, #0]
 800da82:	e6ce      	b.n	800d822 <_dtoa_r+0x94a>
 800da84:	4b09      	ldr	r3, [pc, #36]	; (800daac <_dtoa_r+0xbd4>)
 800da86:	f7ff ba95 	b.w	800cfb4 <_dtoa_r+0xdc>
 800da8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f47f aa6e 	bne.w	800cf6e <_dtoa_r+0x96>
 800da92:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <_dtoa_r+0xbd8>)
 800da94:	f7ff ba8e 	b.w	800cfb4 <_dtoa_r+0xdc>
 800da98:	9b02      	ldr	r3, [sp, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	dcae      	bgt.n	800d9fc <_dtoa_r+0xb24>
 800da9e:	9b06      	ldr	r3, [sp, #24]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	f73f aea8 	bgt.w	800d7f6 <_dtoa_r+0x91e>
 800daa6:	e7a9      	b.n	800d9fc <_dtoa_r+0xb24>
 800daa8:	080101cb 	.word	0x080101cb
 800daac:	08010128 	.word	0x08010128
 800dab0:	0801014c 	.word	0x0801014c

0800dab4 <_localeconv_r>:
 800dab4:	4800      	ldr	r0, [pc, #0]	; (800dab8 <_localeconv_r+0x4>)
 800dab6:	4770      	bx	lr
 800dab8:	20000180 	.word	0x20000180

0800dabc <malloc>:
 800dabc:	4b02      	ldr	r3, [pc, #8]	; (800dac8 <malloc+0xc>)
 800dabe:	4601      	mov	r1, r0
 800dac0:	6818      	ldr	r0, [r3, #0]
 800dac2:	f000 bc17 	b.w	800e2f4 <_malloc_r>
 800dac6:	bf00      	nop
 800dac8:	2000002c 	.word	0x2000002c

0800dacc <memcpy>:
 800dacc:	440a      	add	r2, r1
 800dace:	4291      	cmp	r1, r2
 800dad0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dad4:	d100      	bne.n	800dad8 <memcpy+0xc>
 800dad6:	4770      	bx	lr
 800dad8:	b510      	push	{r4, lr}
 800dada:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dade:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dae2:	4291      	cmp	r1, r2
 800dae4:	d1f9      	bne.n	800dada <memcpy+0xe>
 800dae6:	bd10      	pop	{r4, pc}

0800dae8 <_Balloc>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800daec:	4604      	mov	r4, r0
 800daee:	460d      	mov	r5, r1
 800daf0:	b976      	cbnz	r6, 800db10 <_Balloc+0x28>
 800daf2:	2010      	movs	r0, #16
 800daf4:	f7ff ffe2 	bl	800dabc <malloc>
 800daf8:	4602      	mov	r2, r0
 800dafa:	6260      	str	r0, [r4, #36]	; 0x24
 800dafc:	b920      	cbnz	r0, 800db08 <_Balloc+0x20>
 800dafe:	4b18      	ldr	r3, [pc, #96]	; (800db60 <_Balloc+0x78>)
 800db00:	4818      	ldr	r0, [pc, #96]	; (800db64 <_Balloc+0x7c>)
 800db02:	2166      	movs	r1, #102	; 0x66
 800db04:	f000 fdd6 	bl	800e6b4 <__assert_func>
 800db08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db0c:	6006      	str	r6, [r0, #0]
 800db0e:	60c6      	str	r6, [r0, #12]
 800db10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800db12:	68f3      	ldr	r3, [r6, #12]
 800db14:	b183      	cbz	r3, 800db38 <_Balloc+0x50>
 800db16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db1e:	b9b8      	cbnz	r0, 800db50 <_Balloc+0x68>
 800db20:	2101      	movs	r1, #1
 800db22:	fa01 f605 	lsl.w	r6, r1, r5
 800db26:	1d72      	adds	r2, r6, #5
 800db28:	0092      	lsls	r2, r2, #2
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 fb60 	bl	800e1f0 <_calloc_r>
 800db30:	b160      	cbz	r0, 800db4c <_Balloc+0x64>
 800db32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db36:	e00e      	b.n	800db56 <_Balloc+0x6e>
 800db38:	2221      	movs	r2, #33	; 0x21
 800db3a:	2104      	movs	r1, #4
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 fb57 	bl	800e1f0 <_calloc_r>
 800db42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db44:	60f0      	str	r0, [r6, #12]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e4      	bne.n	800db16 <_Balloc+0x2e>
 800db4c:	2000      	movs	r0, #0
 800db4e:	bd70      	pop	{r4, r5, r6, pc}
 800db50:	6802      	ldr	r2, [r0, #0]
 800db52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db56:	2300      	movs	r3, #0
 800db58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db5c:	e7f7      	b.n	800db4e <_Balloc+0x66>
 800db5e:	bf00      	nop
 800db60:	08010159 	.word	0x08010159
 800db64:	080101dc 	.word	0x080101dc

0800db68 <_Bfree>:
 800db68:	b570      	push	{r4, r5, r6, lr}
 800db6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db6c:	4605      	mov	r5, r0
 800db6e:	460c      	mov	r4, r1
 800db70:	b976      	cbnz	r6, 800db90 <_Bfree+0x28>
 800db72:	2010      	movs	r0, #16
 800db74:	f7ff ffa2 	bl	800dabc <malloc>
 800db78:	4602      	mov	r2, r0
 800db7a:	6268      	str	r0, [r5, #36]	; 0x24
 800db7c:	b920      	cbnz	r0, 800db88 <_Bfree+0x20>
 800db7e:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <_Bfree+0x3c>)
 800db80:	4809      	ldr	r0, [pc, #36]	; (800dba8 <_Bfree+0x40>)
 800db82:	218a      	movs	r1, #138	; 0x8a
 800db84:	f000 fd96 	bl	800e6b4 <__assert_func>
 800db88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db8c:	6006      	str	r6, [r0, #0]
 800db8e:	60c6      	str	r6, [r0, #12]
 800db90:	b13c      	cbz	r4, 800dba2 <_Bfree+0x3a>
 800db92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800db94:	6862      	ldr	r2, [r4, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db9c:	6021      	str	r1, [r4, #0]
 800db9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dba2:	bd70      	pop	{r4, r5, r6, pc}
 800dba4:	08010159 	.word	0x08010159
 800dba8:	080101dc 	.word	0x080101dc

0800dbac <__multadd>:
 800dbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb0:	690d      	ldr	r5, [r1, #16]
 800dbb2:	4607      	mov	r7, r0
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	461e      	mov	r6, r3
 800dbb8:	f101 0c14 	add.w	ip, r1, #20
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	f8dc 3000 	ldr.w	r3, [ip]
 800dbc2:	b299      	uxth	r1, r3
 800dbc4:	fb02 6101 	mla	r1, r2, r1, r6
 800dbc8:	0c1e      	lsrs	r6, r3, #16
 800dbca:	0c0b      	lsrs	r3, r1, #16
 800dbcc:	fb02 3306 	mla	r3, r2, r6, r3
 800dbd0:	b289      	uxth	r1, r1
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbd8:	4285      	cmp	r5, r0
 800dbda:	f84c 1b04 	str.w	r1, [ip], #4
 800dbde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbe2:	dcec      	bgt.n	800dbbe <__multadd+0x12>
 800dbe4:	b30e      	cbz	r6, 800dc2a <__multadd+0x7e>
 800dbe6:	68a3      	ldr	r3, [r4, #8]
 800dbe8:	42ab      	cmp	r3, r5
 800dbea:	dc19      	bgt.n	800dc20 <__multadd+0x74>
 800dbec:	6861      	ldr	r1, [r4, #4]
 800dbee:	4638      	mov	r0, r7
 800dbf0:	3101      	adds	r1, #1
 800dbf2:	f7ff ff79 	bl	800dae8 <_Balloc>
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	b928      	cbnz	r0, 800dc06 <__multadd+0x5a>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	4b0c      	ldr	r3, [pc, #48]	; (800dc30 <__multadd+0x84>)
 800dbfe:	480d      	ldr	r0, [pc, #52]	; (800dc34 <__multadd+0x88>)
 800dc00:	21b5      	movs	r1, #181	; 0xb5
 800dc02:	f000 fd57 	bl	800e6b4 <__assert_func>
 800dc06:	6922      	ldr	r2, [r4, #16]
 800dc08:	3202      	adds	r2, #2
 800dc0a:	f104 010c 	add.w	r1, r4, #12
 800dc0e:	0092      	lsls	r2, r2, #2
 800dc10:	300c      	adds	r0, #12
 800dc12:	f7ff ff5b 	bl	800dacc <memcpy>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7ff ffa5 	bl	800db68 <_Bfree>
 800dc1e:	4644      	mov	r4, r8
 800dc20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc24:	3501      	adds	r5, #1
 800dc26:	615e      	str	r6, [r3, #20]
 800dc28:	6125      	str	r5, [r4, #16]
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc30:	080101cb 	.word	0x080101cb
 800dc34:	080101dc 	.word	0x080101dc

0800dc38 <__hi0bits>:
 800dc38:	0c03      	lsrs	r3, r0, #16
 800dc3a:	041b      	lsls	r3, r3, #16
 800dc3c:	b9d3      	cbnz	r3, 800dc74 <__hi0bits+0x3c>
 800dc3e:	0400      	lsls	r0, r0, #16
 800dc40:	2310      	movs	r3, #16
 800dc42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc46:	bf04      	itt	eq
 800dc48:	0200      	lsleq	r0, r0, #8
 800dc4a:	3308      	addeq	r3, #8
 800dc4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc50:	bf04      	itt	eq
 800dc52:	0100      	lsleq	r0, r0, #4
 800dc54:	3304      	addeq	r3, #4
 800dc56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dc5a:	bf04      	itt	eq
 800dc5c:	0080      	lsleq	r0, r0, #2
 800dc5e:	3302      	addeq	r3, #2
 800dc60:	2800      	cmp	r0, #0
 800dc62:	db05      	blt.n	800dc70 <__hi0bits+0x38>
 800dc64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dc68:	f103 0301 	add.w	r3, r3, #1
 800dc6c:	bf08      	it	eq
 800dc6e:	2320      	moveq	r3, #32
 800dc70:	4618      	mov	r0, r3
 800dc72:	4770      	bx	lr
 800dc74:	2300      	movs	r3, #0
 800dc76:	e7e4      	b.n	800dc42 <__hi0bits+0xa>

0800dc78 <__lo0bits>:
 800dc78:	6803      	ldr	r3, [r0, #0]
 800dc7a:	f013 0207 	ands.w	r2, r3, #7
 800dc7e:	4601      	mov	r1, r0
 800dc80:	d00b      	beq.n	800dc9a <__lo0bits+0x22>
 800dc82:	07da      	lsls	r2, r3, #31
 800dc84:	d423      	bmi.n	800dcce <__lo0bits+0x56>
 800dc86:	0798      	lsls	r0, r3, #30
 800dc88:	bf49      	itett	mi
 800dc8a:	085b      	lsrmi	r3, r3, #1
 800dc8c:	089b      	lsrpl	r3, r3, #2
 800dc8e:	2001      	movmi	r0, #1
 800dc90:	600b      	strmi	r3, [r1, #0]
 800dc92:	bf5c      	itt	pl
 800dc94:	600b      	strpl	r3, [r1, #0]
 800dc96:	2002      	movpl	r0, #2
 800dc98:	4770      	bx	lr
 800dc9a:	b298      	uxth	r0, r3
 800dc9c:	b9a8      	cbnz	r0, 800dcca <__lo0bits+0x52>
 800dc9e:	0c1b      	lsrs	r3, r3, #16
 800dca0:	2010      	movs	r0, #16
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	b90a      	cbnz	r2, 800dcaa <__lo0bits+0x32>
 800dca6:	3008      	adds	r0, #8
 800dca8:	0a1b      	lsrs	r3, r3, #8
 800dcaa:	071a      	lsls	r2, r3, #28
 800dcac:	bf04      	itt	eq
 800dcae:	091b      	lsreq	r3, r3, #4
 800dcb0:	3004      	addeq	r0, #4
 800dcb2:	079a      	lsls	r2, r3, #30
 800dcb4:	bf04      	itt	eq
 800dcb6:	089b      	lsreq	r3, r3, #2
 800dcb8:	3002      	addeq	r0, #2
 800dcba:	07da      	lsls	r2, r3, #31
 800dcbc:	d403      	bmi.n	800dcc6 <__lo0bits+0x4e>
 800dcbe:	085b      	lsrs	r3, r3, #1
 800dcc0:	f100 0001 	add.w	r0, r0, #1
 800dcc4:	d005      	beq.n	800dcd2 <__lo0bits+0x5a>
 800dcc6:	600b      	str	r3, [r1, #0]
 800dcc8:	4770      	bx	lr
 800dcca:	4610      	mov	r0, r2
 800dccc:	e7e9      	b.n	800dca2 <__lo0bits+0x2a>
 800dcce:	2000      	movs	r0, #0
 800dcd0:	4770      	bx	lr
 800dcd2:	2020      	movs	r0, #32
 800dcd4:	4770      	bx	lr
	...

0800dcd8 <__i2b>:
 800dcd8:	b510      	push	{r4, lr}
 800dcda:	460c      	mov	r4, r1
 800dcdc:	2101      	movs	r1, #1
 800dcde:	f7ff ff03 	bl	800dae8 <_Balloc>
 800dce2:	4602      	mov	r2, r0
 800dce4:	b928      	cbnz	r0, 800dcf2 <__i2b+0x1a>
 800dce6:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <__i2b+0x24>)
 800dce8:	4805      	ldr	r0, [pc, #20]	; (800dd00 <__i2b+0x28>)
 800dcea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dcee:	f000 fce1 	bl	800e6b4 <__assert_func>
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	6144      	str	r4, [r0, #20]
 800dcf6:	6103      	str	r3, [r0, #16]
 800dcf8:	bd10      	pop	{r4, pc}
 800dcfa:	bf00      	nop
 800dcfc:	080101cb 	.word	0x080101cb
 800dd00:	080101dc 	.word	0x080101dc

0800dd04 <__multiply>:
 800dd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	4691      	mov	r9, r2
 800dd0a:	690a      	ldr	r2, [r1, #16]
 800dd0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	bfb8      	it	lt
 800dd14:	460b      	movlt	r3, r1
 800dd16:	460c      	mov	r4, r1
 800dd18:	bfbc      	itt	lt
 800dd1a:	464c      	movlt	r4, r9
 800dd1c:	4699      	movlt	r9, r3
 800dd1e:	6927      	ldr	r7, [r4, #16]
 800dd20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd24:	68a3      	ldr	r3, [r4, #8]
 800dd26:	6861      	ldr	r1, [r4, #4]
 800dd28:	eb07 060a 	add.w	r6, r7, sl
 800dd2c:	42b3      	cmp	r3, r6
 800dd2e:	b085      	sub	sp, #20
 800dd30:	bfb8      	it	lt
 800dd32:	3101      	addlt	r1, #1
 800dd34:	f7ff fed8 	bl	800dae8 <_Balloc>
 800dd38:	b930      	cbnz	r0, 800dd48 <__multiply+0x44>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	4b44      	ldr	r3, [pc, #272]	; (800de50 <__multiply+0x14c>)
 800dd3e:	4845      	ldr	r0, [pc, #276]	; (800de54 <__multiply+0x150>)
 800dd40:	f240 115d 	movw	r1, #349	; 0x15d
 800dd44:	f000 fcb6 	bl	800e6b4 <__assert_func>
 800dd48:	f100 0514 	add.w	r5, r0, #20
 800dd4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd50:	462b      	mov	r3, r5
 800dd52:	2200      	movs	r2, #0
 800dd54:	4543      	cmp	r3, r8
 800dd56:	d321      	bcc.n	800dd9c <__multiply+0x98>
 800dd58:	f104 0314 	add.w	r3, r4, #20
 800dd5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd60:	f109 0314 	add.w	r3, r9, #20
 800dd64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dd68:	9202      	str	r2, [sp, #8]
 800dd6a:	1b3a      	subs	r2, r7, r4
 800dd6c:	3a15      	subs	r2, #21
 800dd6e:	f022 0203 	bic.w	r2, r2, #3
 800dd72:	3204      	adds	r2, #4
 800dd74:	f104 0115 	add.w	r1, r4, #21
 800dd78:	428f      	cmp	r7, r1
 800dd7a:	bf38      	it	cc
 800dd7c:	2204      	movcc	r2, #4
 800dd7e:	9201      	str	r2, [sp, #4]
 800dd80:	9a02      	ldr	r2, [sp, #8]
 800dd82:	9303      	str	r3, [sp, #12]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d80c      	bhi.n	800dda2 <__multiply+0x9e>
 800dd88:	2e00      	cmp	r6, #0
 800dd8a:	dd03      	ble.n	800dd94 <__multiply+0x90>
 800dd8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d05a      	beq.n	800de4a <__multiply+0x146>
 800dd94:	6106      	str	r6, [r0, #16]
 800dd96:	b005      	add	sp, #20
 800dd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9c:	f843 2b04 	str.w	r2, [r3], #4
 800dda0:	e7d8      	b.n	800dd54 <__multiply+0x50>
 800dda2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dda6:	f1ba 0f00 	cmp.w	sl, #0
 800ddaa:	d024      	beq.n	800ddf6 <__multiply+0xf2>
 800ddac:	f104 0e14 	add.w	lr, r4, #20
 800ddb0:	46a9      	mov	r9, r5
 800ddb2:	f04f 0c00 	mov.w	ip, #0
 800ddb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ddba:	f8d9 1000 	ldr.w	r1, [r9]
 800ddbe:	fa1f fb82 	uxth.w	fp, r2
 800ddc2:	b289      	uxth	r1, r1
 800ddc4:	fb0a 110b 	mla	r1, sl, fp, r1
 800ddc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ddcc:	f8d9 2000 	ldr.w	r2, [r9]
 800ddd0:	4461      	add	r1, ip
 800ddd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ddd6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ddda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ddde:	b289      	uxth	r1, r1
 800dde0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dde4:	4577      	cmp	r7, lr
 800dde6:	f849 1b04 	str.w	r1, [r9], #4
 800ddea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ddee:	d8e2      	bhi.n	800ddb6 <__multiply+0xb2>
 800ddf0:	9a01      	ldr	r2, [sp, #4]
 800ddf2:	f845 c002 	str.w	ip, [r5, r2]
 800ddf6:	9a03      	ldr	r2, [sp, #12]
 800ddf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ddfc:	3304      	adds	r3, #4
 800ddfe:	f1b9 0f00 	cmp.w	r9, #0
 800de02:	d020      	beq.n	800de46 <__multiply+0x142>
 800de04:	6829      	ldr	r1, [r5, #0]
 800de06:	f104 0c14 	add.w	ip, r4, #20
 800de0a:	46ae      	mov	lr, r5
 800de0c:	f04f 0a00 	mov.w	sl, #0
 800de10:	f8bc b000 	ldrh.w	fp, [ip]
 800de14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de18:	fb09 220b 	mla	r2, r9, fp, r2
 800de1c:	4492      	add	sl, r2
 800de1e:	b289      	uxth	r1, r1
 800de20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de24:	f84e 1b04 	str.w	r1, [lr], #4
 800de28:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de2c:	f8be 1000 	ldrh.w	r1, [lr]
 800de30:	0c12      	lsrs	r2, r2, #16
 800de32:	fb09 1102 	mla	r1, r9, r2, r1
 800de36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de3a:	4567      	cmp	r7, ip
 800de3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de40:	d8e6      	bhi.n	800de10 <__multiply+0x10c>
 800de42:	9a01      	ldr	r2, [sp, #4]
 800de44:	50a9      	str	r1, [r5, r2]
 800de46:	3504      	adds	r5, #4
 800de48:	e79a      	b.n	800dd80 <__multiply+0x7c>
 800de4a:	3e01      	subs	r6, #1
 800de4c:	e79c      	b.n	800dd88 <__multiply+0x84>
 800de4e:	bf00      	nop
 800de50:	080101cb 	.word	0x080101cb
 800de54:	080101dc 	.word	0x080101dc

0800de58 <__pow5mult>:
 800de58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de5c:	4615      	mov	r5, r2
 800de5e:	f012 0203 	ands.w	r2, r2, #3
 800de62:	4606      	mov	r6, r0
 800de64:	460f      	mov	r7, r1
 800de66:	d007      	beq.n	800de78 <__pow5mult+0x20>
 800de68:	4c25      	ldr	r4, [pc, #148]	; (800df00 <__pow5mult+0xa8>)
 800de6a:	3a01      	subs	r2, #1
 800de6c:	2300      	movs	r3, #0
 800de6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de72:	f7ff fe9b 	bl	800dbac <__multadd>
 800de76:	4607      	mov	r7, r0
 800de78:	10ad      	asrs	r5, r5, #2
 800de7a:	d03d      	beq.n	800def8 <__pow5mult+0xa0>
 800de7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de7e:	b97c      	cbnz	r4, 800dea0 <__pow5mult+0x48>
 800de80:	2010      	movs	r0, #16
 800de82:	f7ff fe1b 	bl	800dabc <malloc>
 800de86:	4602      	mov	r2, r0
 800de88:	6270      	str	r0, [r6, #36]	; 0x24
 800de8a:	b928      	cbnz	r0, 800de98 <__pow5mult+0x40>
 800de8c:	4b1d      	ldr	r3, [pc, #116]	; (800df04 <__pow5mult+0xac>)
 800de8e:	481e      	ldr	r0, [pc, #120]	; (800df08 <__pow5mult+0xb0>)
 800de90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de94:	f000 fc0e 	bl	800e6b4 <__assert_func>
 800de98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de9c:	6004      	str	r4, [r0, #0]
 800de9e:	60c4      	str	r4, [r0, #12]
 800dea0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dea8:	b94c      	cbnz	r4, 800debe <__pow5mult+0x66>
 800deaa:	f240 2171 	movw	r1, #625	; 0x271
 800deae:	4630      	mov	r0, r6
 800deb0:	f7ff ff12 	bl	800dcd8 <__i2b>
 800deb4:	2300      	movs	r3, #0
 800deb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800deba:	4604      	mov	r4, r0
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	f04f 0900 	mov.w	r9, #0
 800dec2:	07eb      	lsls	r3, r5, #31
 800dec4:	d50a      	bpl.n	800dedc <__pow5mult+0x84>
 800dec6:	4639      	mov	r1, r7
 800dec8:	4622      	mov	r2, r4
 800deca:	4630      	mov	r0, r6
 800decc:	f7ff ff1a 	bl	800dd04 <__multiply>
 800ded0:	4639      	mov	r1, r7
 800ded2:	4680      	mov	r8, r0
 800ded4:	4630      	mov	r0, r6
 800ded6:	f7ff fe47 	bl	800db68 <_Bfree>
 800deda:	4647      	mov	r7, r8
 800dedc:	106d      	asrs	r5, r5, #1
 800dede:	d00b      	beq.n	800def8 <__pow5mult+0xa0>
 800dee0:	6820      	ldr	r0, [r4, #0]
 800dee2:	b938      	cbnz	r0, 800def4 <__pow5mult+0x9c>
 800dee4:	4622      	mov	r2, r4
 800dee6:	4621      	mov	r1, r4
 800dee8:	4630      	mov	r0, r6
 800deea:	f7ff ff0b 	bl	800dd04 <__multiply>
 800deee:	6020      	str	r0, [r4, #0]
 800def0:	f8c0 9000 	str.w	r9, [r0]
 800def4:	4604      	mov	r4, r0
 800def6:	e7e4      	b.n	800dec2 <__pow5mult+0x6a>
 800def8:	4638      	mov	r0, r7
 800defa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defe:	bf00      	nop
 800df00:	08010328 	.word	0x08010328
 800df04:	08010159 	.word	0x08010159
 800df08:	080101dc 	.word	0x080101dc

0800df0c <__lshift>:
 800df0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df10:	460c      	mov	r4, r1
 800df12:	6849      	ldr	r1, [r1, #4]
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df1a:	68a3      	ldr	r3, [r4, #8]
 800df1c:	4607      	mov	r7, r0
 800df1e:	4691      	mov	r9, r2
 800df20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df24:	f108 0601 	add.w	r6, r8, #1
 800df28:	42b3      	cmp	r3, r6
 800df2a:	db0b      	blt.n	800df44 <__lshift+0x38>
 800df2c:	4638      	mov	r0, r7
 800df2e:	f7ff fddb 	bl	800dae8 <_Balloc>
 800df32:	4605      	mov	r5, r0
 800df34:	b948      	cbnz	r0, 800df4a <__lshift+0x3e>
 800df36:	4602      	mov	r2, r0
 800df38:	4b2a      	ldr	r3, [pc, #168]	; (800dfe4 <__lshift+0xd8>)
 800df3a:	482b      	ldr	r0, [pc, #172]	; (800dfe8 <__lshift+0xdc>)
 800df3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df40:	f000 fbb8 	bl	800e6b4 <__assert_func>
 800df44:	3101      	adds	r1, #1
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	e7ee      	b.n	800df28 <__lshift+0x1c>
 800df4a:	2300      	movs	r3, #0
 800df4c:	f100 0114 	add.w	r1, r0, #20
 800df50:	f100 0210 	add.w	r2, r0, #16
 800df54:	4618      	mov	r0, r3
 800df56:	4553      	cmp	r3, sl
 800df58:	db37      	blt.n	800dfca <__lshift+0xbe>
 800df5a:	6920      	ldr	r0, [r4, #16]
 800df5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df60:	f104 0314 	add.w	r3, r4, #20
 800df64:	f019 091f 	ands.w	r9, r9, #31
 800df68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df70:	d02f      	beq.n	800dfd2 <__lshift+0xc6>
 800df72:	f1c9 0e20 	rsb	lr, r9, #32
 800df76:	468a      	mov	sl, r1
 800df78:	f04f 0c00 	mov.w	ip, #0
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	fa02 f209 	lsl.w	r2, r2, r9
 800df82:	ea42 020c 	orr.w	r2, r2, ip
 800df86:	f84a 2b04 	str.w	r2, [sl], #4
 800df8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df8e:	4298      	cmp	r0, r3
 800df90:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df94:	d8f2      	bhi.n	800df7c <__lshift+0x70>
 800df96:	1b03      	subs	r3, r0, r4
 800df98:	3b15      	subs	r3, #21
 800df9a:	f023 0303 	bic.w	r3, r3, #3
 800df9e:	3304      	adds	r3, #4
 800dfa0:	f104 0215 	add.w	r2, r4, #21
 800dfa4:	4290      	cmp	r0, r2
 800dfa6:	bf38      	it	cc
 800dfa8:	2304      	movcc	r3, #4
 800dfaa:	f841 c003 	str.w	ip, [r1, r3]
 800dfae:	f1bc 0f00 	cmp.w	ip, #0
 800dfb2:	d001      	beq.n	800dfb8 <__lshift+0xac>
 800dfb4:	f108 0602 	add.w	r6, r8, #2
 800dfb8:	3e01      	subs	r6, #1
 800dfba:	4638      	mov	r0, r7
 800dfbc:	612e      	str	r6, [r5, #16]
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	f7ff fdd2 	bl	800db68 <_Bfree>
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfca:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfce:	3301      	adds	r3, #1
 800dfd0:	e7c1      	b.n	800df56 <__lshift+0x4a>
 800dfd2:	3904      	subs	r1, #4
 800dfd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfdc:	4298      	cmp	r0, r3
 800dfde:	d8f9      	bhi.n	800dfd4 <__lshift+0xc8>
 800dfe0:	e7ea      	b.n	800dfb8 <__lshift+0xac>
 800dfe2:	bf00      	nop
 800dfe4:	080101cb 	.word	0x080101cb
 800dfe8:	080101dc 	.word	0x080101dc

0800dfec <__mcmp>:
 800dfec:	b530      	push	{r4, r5, lr}
 800dfee:	6902      	ldr	r2, [r0, #16]
 800dff0:	690c      	ldr	r4, [r1, #16]
 800dff2:	1b12      	subs	r2, r2, r4
 800dff4:	d10e      	bne.n	800e014 <__mcmp+0x28>
 800dff6:	f100 0314 	add.w	r3, r0, #20
 800dffa:	3114      	adds	r1, #20
 800dffc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e000:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e004:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e008:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e00c:	42a5      	cmp	r5, r4
 800e00e:	d003      	beq.n	800e018 <__mcmp+0x2c>
 800e010:	d305      	bcc.n	800e01e <__mcmp+0x32>
 800e012:	2201      	movs	r2, #1
 800e014:	4610      	mov	r0, r2
 800e016:	bd30      	pop	{r4, r5, pc}
 800e018:	4283      	cmp	r3, r0
 800e01a:	d3f3      	bcc.n	800e004 <__mcmp+0x18>
 800e01c:	e7fa      	b.n	800e014 <__mcmp+0x28>
 800e01e:	f04f 32ff 	mov.w	r2, #4294967295
 800e022:	e7f7      	b.n	800e014 <__mcmp+0x28>

0800e024 <__mdiff>:
 800e024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e028:	460c      	mov	r4, r1
 800e02a:	4606      	mov	r6, r0
 800e02c:	4611      	mov	r1, r2
 800e02e:	4620      	mov	r0, r4
 800e030:	4690      	mov	r8, r2
 800e032:	f7ff ffdb 	bl	800dfec <__mcmp>
 800e036:	1e05      	subs	r5, r0, #0
 800e038:	d110      	bne.n	800e05c <__mdiff+0x38>
 800e03a:	4629      	mov	r1, r5
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7ff fd53 	bl	800dae8 <_Balloc>
 800e042:	b930      	cbnz	r0, 800e052 <__mdiff+0x2e>
 800e044:	4b3a      	ldr	r3, [pc, #232]	; (800e130 <__mdiff+0x10c>)
 800e046:	4602      	mov	r2, r0
 800e048:	f240 2132 	movw	r1, #562	; 0x232
 800e04c:	4839      	ldr	r0, [pc, #228]	; (800e134 <__mdiff+0x110>)
 800e04e:	f000 fb31 	bl	800e6b4 <__assert_func>
 800e052:	2301      	movs	r3, #1
 800e054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	bfa4      	itt	ge
 800e05e:	4643      	movge	r3, r8
 800e060:	46a0      	movge	r8, r4
 800e062:	4630      	mov	r0, r6
 800e064:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e068:	bfa6      	itte	ge
 800e06a:	461c      	movge	r4, r3
 800e06c:	2500      	movge	r5, #0
 800e06e:	2501      	movlt	r5, #1
 800e070:	f7ff fd3a 	bl	800dae8 <_Balloc>
 800e074:	b920      	cbnz	r0, 800e080 <__mdiff+0x5c>
 800e076:	4b2e      	ldr	r3, [pc, #184]	; (800e130 <__mdiff+0x10c>)
 800e078:	4602      	mov	r2, r0
 800e07a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e07e:	e7e5      	b.n	800e04c <__mdiff+0x28>
 800e080:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e084:	6926      	ldr	r6, [r4, #16]
 800e086:	60c5      	str	r5, [r0, #12]
 800e088:	f104 0914 	add.w	r9, r4, #20
 800e08c:	f108 0514 	add.w	r5, r8, #20
 800e090:	f100 0e14 	add.w	lr, r0, #20
 800e094:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e098:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e09c:	f108 0210 	add.w	r2, r8, #16
 800e0a0:	46f2      	mov	sl, lr
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e0ac:	fa1f f883 	uxth.w	r8, r3
 800e0b0:	fa11 f18b 	uxtah	r1, r1, fp
 800e0b4:	0c1b      	lsrs	r3, r3, #16
 800e0b6:	eba1 0808 	sub.w	r8, r1, r8
 800e0ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e0be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e0c2:	fa1f f888 	uxth.w	r8, r8
 800e0c6:	1419      	asrs	r1, r3, #16
 800e0c8:	454e      	cmp	r6, r9
 800e0ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e0ce:	f84a 3b04 	str.w	r3, [sl], #4
 800e0d2:	d8e7      	bhi.n	800e0a4 <__mdiff+0x80>
 800e0d4:	1b33      	subs	r3, r6, r4
 800e0d6:	3b15      	subs	r3, #21
 800e0d8:	f023 0303 	bic.w	r3, r3, #3
 800e0dc:	3304      	adds	r3, #4
 800e0de:	3415      	adds	r4, #21
 800e0e0:	42a6      	cmp	r6, r4
 800e0e2:	bf38      	it	cc
 800e0e4:	2304      	movcc	r3, #4
 800e0e6:	441d      	add	r5, r3
 800e0e8:	4473      	add	r3, lr
 800e0ea:	469e      	mov	lr, r3
 800e0ec:	462e      	mov	r6, r5
 800e0ee:	4566      	cmp	r6, ip
 800e0f0:	d30e      	bcc.n	800e110 <__mdiff+0xec>
 800e0f2:	f10c 0203 	add.w	r2, ip, #3
 800e0f6:	1b52      	subs	r2, r2, r5
 800e0f8:	f022 0203 	bic.w	r2, r2, #3
 800e0fc:	3d03      	subs	r5, #3
 800e0fe:	45ac      	cmp	ip, r5
 800e100:	bf38      	it	cc
 800e102:	2200      	movcc	r2, #0
 800e104:	441a      	add	r2, r3
 800e106:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e10a:	b17b      	cbz	r3, 800e12c <__mdiff+0x108>
 800e10c:	6107      	str	r7, [r0, #16]
 800e10e:	e7a3      	b.n	800e058 <__mdiff+0x34>
 800e110:	f856 8b04 	ldr.w	r8, [r6], #4
 800e114:	fa11 f288 	uxtah	r2, r1, r8
 800e118:	1414      	asrs	r4, r2, #16
 800e11a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e11e:	b292      	uxth	r2, r2
 800e120:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e124:	f84e 2b04 	str.w	r2, [lr], #4
 800e128:	1421      	asrs	r1, r4, #16
 800e12a:	e7e0      	b.n	800e0ee <__mdiff+0xca>
 800e12c:	3f01      	subs	r7, #1
 800e12e:	e7ea      	b.n	800e106 <__mdiff+0xe2>
 800e130:	080101cb 	.word	0x080101cb
 800e134:	080101dc 	.word	0x080101dc

0800e138 <__d2b>:
 800e138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e13c:	4689      	mov	r9, r1
 800e13e:	2101      	movs	r1, #1
 800e140:	ec57 6b10 	vmov	r6, r7, d0
 800e144:	4690      	mov	r8, r2
 800e146:	f7ff fccf 	bl	800dae8 <_Balloc>
 800e14a:	4604      	mov	r4, r0
 800e14c:	b930      	cbnz	r0, 800e15c <__d2b+0x24>
 800e14e:	4602      	mov	r2, r0
 800e150:	4b25      	ldr	r3, [pc, #148]	; (800e1e8 <__d2b+0xb0>)
 800e152:	4826      	ldr	r0, [pc, #152]	; (800e1ec <__d2b+0xb4>)
 800e154:	f240 310a 	movw	r1, #778	; 0x30a
 800e158:	f000 faac 	bl	800e6b4 <__assert_func>
 800e15c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e164:	bb35      	cbnz	r5, 800e1b4 <__d2b+0x7c>
 800e166:	2e00      	cmp	r6, #0
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	d028      	beq.n	800e1be <__d2b+0x86>
 800e16c:	4668      	mov	r0, sp
 800e16e:	9600      	str	r6, [sp, #0]
 800e170:	f7ff fd82 	bl	800dc78 <__lo0bits>
 800e174:	9900      	ldr	r1, [sp, #0]
 800e176:	b300      	cbz	r0, 800e1ba <__d2b+0x82>
 800e178:	9a01      	ldr	r2, [sp, #4]
 800e17a:	f1c0 0320 	rsb	r3, r0, #32
 800e17e:	fa02 f303 	lsl.w	r3, r2, r3
 800e182:	430b      	orrs	r3, r1
 800e184:	40c2      	lsrs	r2, r0
 800e186:	6163      	str	r3, [r4, #20]
 800e188:	9201      	str	r2, [sp, #4]
 800e18a:	9b01      	ldr	r3, [sp, #4]
 800e18c:	61a3      	str	r3, [r4, #24]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	bf14      	ite	ne
 800e192:	2202      	movne	r2, #2
 800e194:	2201      	moveq	r2, #1
 800e196:	6122      	str	r2, [r4, #16]
 800e198:	b1d5      	cbz	r5, 800e1d0 <__d2b+0x98>
 800e19a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e19e:	4405      	add	r5, r0
 800e1a0:	f8c9 5000 	str.w	r5, [r9]
 800e1a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1a8:	f8c8 0000 	str.w	r0, [r8]
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	b003      	add	sp, #12
 800e1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1b8:	e7d5      	b.n	800e166 <__d2b+0x2e>
 800e1ba:	6161      	str	r1, [r4, #20]
 800e1bc:	e7e5      	b.n	800e18a <__d2b+0x52>
 800e1be:	a801      	add	r0, sp, #4
 800e1c0:	f7ff fd5a 	bl	800dc78 <__lo0bits>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	6163      	str	r3, [r4, #20]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	6122      	str	r2, [r4, #16]
 800e1cc:	3020      	adds	r0, #32
 800e1ce:	e7e3      	b.n	800e198 <__d2b+0x60>
 800e1d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1d8:	f8c9 0000 	str.w	r0, [r9]
 800e1dc:	6918      	ldr	r0, [r3, #16]
 800e1de:	f7ff fd2b 	bl	800dc38 <__hi0bits>
 800e1e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1e6:	e7df      	b.n	800e1a8 <__d2b+0x70>
 800e1e8:	080101cb 	.word	0x080101cb
 800e1ec:	080101dc 	.word	0x080101dc

0800e1f0 <_calloc_r>:
 800e1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1f2:	fba1 2402 	umull	r2, r4, r1, r2
 800e1f6:	b94c      	cbnz	r4, 800e20c <_calloc_r+0x1c>
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	9201      	str	r2, [sp, #4]
 800e1fc:	f000 f87a 	bl	800e2f4 <_malloc_r>
 800e200:	9a01      	ldr	r2, [sp, #4]
 800e202:	4605      	mov	r5, r0
 800e204:	b930      	cbnz	r0, 800e214 <_calloc_r+0x24>
 800e206:	4628      	mov	r0, r5
 800e208:	b003      	add	sp, #12
 800e20a:	bd30      	pop	{r4, r5, pc}
 800e20c:	220c      	movs	r2, #12
 800e20e:	6002      	str	r2, [r0, #0]
 800e210:	2500      	movs	r5, #0
 800e212:	e7f8      	b.n	800e206 <_calloc_r+0x16>
 800e214:	4621      	mov	r1, r4
 800e216:	f7fe f93f 	bl	800c498 <memset>
 800e21a:	e7f4      	b.n	800e206 <_calloc_r+0x16>

0800e21c <_free_r>:
 800e21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e21e:	2900      	cmp	r1, #0
 800e220:	d044      	beq.n	800e2ac <_free_r+0x90>
 800e222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e226:	9001      	str	r0, [sp, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f1a1 0404 	sub.w	r4, r1, #4
 800e22e:	bfb8      	it	lt
 800e230:	18e4      	addlt	r4, r4, r3
 800e232:	f000 fa9b 	bl	800e76c <__malloc_lock>
 800e236:	4a1e      	ldr	r2, [pc, #120]	; (800e2b0 <_free_r+0x94>)
 800e238:	9801      	ldr	r0, [sp, #4]
 800e23a:	6813      	ldr	r3, [r2, #0]
 800e23c:	b933      	cbnz	r3, 800e24c <_free_r+0x30>
 800e23e:	6063      	str	r3, [r4, #4]
 800e240:	6014      	str	r4, [r2, #0]
 800e242:	b003      	add	sp, #12
 800e244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e248:	f000 ba96 	b.w	800e778 <__malloc_unlock>
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	d908      	bls.n	800e262 <_free_r+0x46>
 800e250:	6825      	ldr	r5, [r4, #0]
 800e252:	1961      	adds	r1, r4, r5
 800e254:	428b      	cmp	r3, r1
 800e256:	bf01      	itttt	eq
 800e258:	6819      	ldreq	r1, [r3, #0]
 800e25a:	685b      	ldreq	r3, [r3, #4]
 800e25c:	1949      	addeq	r1, r1, r5
 800e25e:	6021      	streq	r1, [r4, #0]
 800e260:	e7ed      	b.n	800e23e <_free_r+0x22>
 800e262:	461a      	mov	r2, r3
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	b10b      	cbz	r3, 800e26c <_free_r+0x50>
 800e268:	42a3      	cmp	r3, r4
 800e26a:	d9fa      	bls.n	800e262 <_free_r+0x46>
 800e26c:	6811      	ldr	r1, [r2, #0]
 800e26e:	1855      	adds	r5, r2, r1
 800e270:	42a5      	cmp	r5, r4
 800e272:	d10b      	bne.n	800e28c <_free_r+0x70>
 800e274:	6824      	ldr	r4, [r4, #0]
 800e276:	4421      	add	r1, r4
 800e278:	1854      	adds	r4, r2, r1
 800e27a:	42a3      	cmp	r3, r4
 800e27c:	6011      	str	r1, [r2, #0]
 800e27e:	d1e0      	bne.n	800e242 <_free_r+0x26>
 800e280:	681c      	ldr	r4, [r3, #0]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	6053      	str	r3, [r2, #4]
 800e286:	4421      	add	r1, r4
 800e288:	6011      	str	r1, [r2, #0]
 800e28a:	e7da      	b.n	800e242 <_free_r+0x26>
 800e28c:	d902      	bls.n	800e294 <_free_r+0x78>
 800e28e:	230c      	movs	r3, #12
 800e290:	6003      	str	r3, [r0, #0]
 800e292:	e7d6      	b.n	800e242 <_free_r+0x26>
 800e294:	6825      	ldr	r5, [r4, #0]
 800e296:	1961      	adds	r1, r4, r5
 800e298:	428b      	cmp	r3, r1
 800e29a:	bf04      	itt	eq
 800e29c:	6819      	ldreq	r1, [r3, #0]
 800e29e:	685b      	ldreq	r3, [r3, #4]
 800e2a0:	6063      	str	r3, [r4, #4]
 800e2a2:	bf04      	itt	eq
 800e2a4:	1949      	addeq	r1, r1, r5
 800e2a6:	6021      	streq	r1, [r4, #0]
 800e2a8:	6054      	str	r4, [r2, #4]
 800e2aa:	e7ca      	b.n	800e242 <_free_r+0x26>
 800e2ac:	b003      	add	sp, #12
 800e2ae:	bd30      	pop	{r4, r5, pc}
 800e2b0:	200007a8 	.word	0x200007a8

0800e2b4 <sbrk_aligned>:
 800e2b4:	b570      	push	{r4, r5, r6, lr}
 800e2b6:	4e0e      	ldr	r6, [pc, #56]	; (800e2f0 <sbrk_aligned+0x3c>)
 800e2b8:	460c      	mov	r4, r1
 800e2ba:	6831      	ldr	r1, [r6, #0]
 800e2bc:	4605      	mov	r5, r0
 800e2be:	b911      	cbnz	r1, 800e2c6 <sbrk_aligned+0x12>
 800e2c0:	f000 f9e8 	bl	800e694 <_sbrk_r>
 800e2c4:	6030      	str	r0, [r6, #0]
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f000 f9e3 	bl	800e694 <_sbrk_r>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	d00a      	beq.n	800e2e8 <sbrk_aligned+0x34>
 800e2d2:	1cc4      	adds	r4, r0, #3
 800e2d4:	f024 0403 	bic.w	r4, r4, #3
 800e2d8:	42a0      	cmp	r0, r4
 800e2da:	d007      	beq.n	800e2ec <sbrk_aligned+0x38>
 800e2dc:	1a21      	subs	r1, r4, r0
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f000 f9d8 	bl	800e694 <_sbrk_r>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d101      	bne.n	800e2ec <sbrk_aligned+0x38>
 800e2e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}
 800e2f0:	200007ac 	.word	0x200007ac

0800e2f4 <_malloc_r>:
 800e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f8:	1ccd      	adds	r5, r1, #3
 800e2fa:	f025 0503 	bic.w	r5, r5, #3
 800e2fe:	3508      	adds	r5, #8
 800e300:	2d0c      	cmp	r5, #12
 800e302:	bf38      	it	cc
 800e304:	250c      	movcc	r5, #12
 800e306:	2d00      	cmp	r5, #0
 800e308:	4607      	mov	r7, r0
 800e30a:	db01      	blt.n	800e310 <_malloc_r+0x1c>
 800e30c:	42a9      	cmp	r1, r5
 800e30e:	d905      	bls.n	800e31c <_malloc_r+0x28>
 800e310:	230c      	movs	r3, #12
 800e312:	603b      	str	r3, [r7, #0]
 800e314:	2600      	movs	r6, #0
 800e316:	4630      	mov	r0, r6
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	4e2e      	ldr	r6, [pc, #184]	; (800e3d8 <_malloc_r+0xe4>)
 800e31e:	f000 fa25 	bl	800e76c <__malloc_lock>
 800e322:	6833      	ldr	r3, [r6, #0]
 800e324:	461c      	mov	r4, r3
 800e326:	bb34      	cbnz	r4, 800e376 <_malloc_r+0x82>
 800e328:	4629      	mov	r1, r5
 800e32a:	4638      	mov	r0, r7
 800e32c:	f7ff ffc2 	bl	800e2b4 <sbrk_aligned>
 800e330:	1c43      	adds	r3, r0, #1
 800e332:	4604      	mov	r4, r0
 800e334:	d14d      	bne.n	800e3d2 <_malloc_r+0xde>
 800e336:	6834      	ldr	r4, [r6, #0]
 800e338:	4626      	mov	r6, r4
 800e33a:	2e00      	cmp	r6, #0
 800e33c:	d140      	bne.n	800e3c0 <_malloc_r+0xcc>
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	4631      	mov	r1, r6
 800e342:	4638      	mov	r0, r7
 800e344:	eb04 0803 	add.w	r8, r4, r3
 800e348:	f000 f9a4 	bl	800e694 <_sbrk_r>
 800e34c:	4580      	cmp	r8, r0
 800e34e:	d13a      	bne.n	800e3c6 <_malloc_r+0xd2>
 800e350:	6821      	ldr	r1, [r4, #0]
 800e352:	3503      	adds	r5, #3
 800e354:	1a6d      	subs	r5, r5, r1
 800e356:	f025 0503 	bic.w	r5, r5, #3
 800e35a:	3508      	adds	r5, #8
 800e35c:	2d0c      	cmp	r5, #12
 800e35e:	bf38      	it	cc
 800e360:	250c      	movcc	r5, #12
 800e362:	4629      	mov	r1, r5
 800e364:	4638      	mov	r0, r7
 800e366:	f7ff ffa5 	bl	800e2b4 <sbrk_aligned>
 800e36a:	3001      	adds	r0, #1
 800e36c:	d02b      	beq.n	800e3c6 <_malloc_r+0xd2>
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	442b      	add	r3, r5
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	e00e      	b.n	800e394 <_malloc_r+0xa0>
 800e376:	6822      	ldr	r2, [r4, #0]
 800e378:	1b52      	subs	r2, r2, r5
 800e37a:	d41e      	bmi.n	800e3ba <_malloc_r+0xc6>
 800e37c:	2a0b      	cmp	r2, #11
 800e37e:	d916      	bls.n	800e3ae <_malloc_r+0xba>
 800e380:	1961      	adds	r1, r4, r5
 800e382:	42a3      	cmp	r3, r4
 800e384:	6025      	str	r5, [r4, #0]
 800e386:	bf18      	it	ne
 800e388:	6059      	strne	r1, [r3, #4]
 800e38a:	6863      	ldr	r3, [r4, #4]
 800e38c:	bf08      	it	eq
 800e38e:	6031      	streq	r1, [r6, #0]
 800e390:	5162      	str	r2, [r4, r5]
 800e392:	604b      	str	r3, [r1, #4]
 800e394:	4638      	mov	r0, r7
 800e396:	f104 060b 	add.w	r6, r4, #11
 800e39a:	f000 f9ed 	bl	800e778 <__malloc_unlock>
 800e39e:	f026 0607 	bic.w	r6, r6, #7
 800e3a2:	1d23      	adds	r3, r4, #4
 800e3a4:	1af2      	subs	r2, r6, r3
 800e3a6:	d0b6      	beq.n	800e316 <_malloc_r+0x22>
 800e3a8:	1b9b      	subs	r3, r3, r6
 800e3aa:	50a3      	str	r3, [r4, r2]
 800e3ac:	e7b3      	b.n	800e316 <_malloc_r+0x22>
 800e3ae:	6862      	ldr	r2, [r4, #4]
 800e3b0:	42a3      	cmp	r3, r4
 800e3b2:	bf0c      	ite	eq
 800e3b4:	6032      	streq	r2, [r6, #0]
 800e3b6:	605a      	strne	r2, [r3, #4]
 800e3b8:	e7ec      	b.n	800e394 <_malloc_r+0xa0>
 800e3ba:	4623      	mov	r3, r4
 800e3bc:	6864      	ldr	r4, [r4, #4]
 800e3be:	e7b2      	b.n	800e326 <_malloc_r+0x32>
 800e3c0:	4634      	mov	r4, r6
 800e3c2:	6876      	ldr	r6, [r6, #4]
 800e3c4:	e7b9      	b.n	800e33a <_malloc_r+0x46>
 800e3c6:	230c      	movs	r3, #12
 800e3c8:	603b      	str	r3, [r7, #0]
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	f000 f9d4 	bl	800e778 <__malloc_unlock>
 800e3d0:	e7a1      	b.n	800e316 <_malloc_r+0x22>
 800e3d2:	6025      	str	r5, [r4, #0]
 800e3d4:	e7de      	b.n	800e394 <_malloc_r+0xa0>
 800e3d6:	bf00      	nop
 800e3d8:	200007a8 	.word	0x200007a8

0800e3dc <__ssputs_r>:
 800e3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e0:	688e      	ldr	r6, [r1, #8]
 800e3e2:	429e      	cmp	r6, r3
 800e3e4:	4682      	mov	sl, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	4690      	mov	r8, r2
 800e3ea:	461f      	mov	r7, r3
 800e3ec:	d838      	bhi.n	800e460 <__ssputs_r+0x84>
 800e3ee:	898a      	ldrh	r2, [r1, #12]
 800e3f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3f4:	d032      	beq.n	800e45c <__ssputs_r+0x80>
 800e3f6:	6825      	ldr	r5, [r4, #0]
 800e3f8:	6909      	ldr	r1, [r1, #16]
 800e3fa:	eba5 0901 	sub.w	r9, r5, r1
 800e3fe:	6965      	ldr	r5, [r4, #20]
 800e400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e408:	3301      	adds	r3, #1
 800e40a:	444b      	add	r3, r9
 800e40c:	106d      	asrs	r5, r5, #1
 800e40e:	429d      	cmp	r5, r3
 800e410:	bf38      	it	cc
 800e412:	461d      	movcc	r5, r3
 800e414:	0553      	lsls	r3, r2, #21
 800e416:	d531      	bpl.n	800e47c <__ssputs_r+0xa0>
 800e418:	4629      	mov	r1, r5
 800e41a:	f7ff ff6b 	bl	800e2f4 <_malloc_r>
 800e41e:	4606      	mov	r6, r0
 800e420:	b950      	cbnz	r0, 800e438 <__ssputs_r+0x5c>
 800e422:	230c      	movs	r3, #12
 800e424:	f8ca 3000 	str.w	r3, [sl]
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e42e:	81a3      	strh	r3, [r4, #12]
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e438:	6921      	ldr	r1, [r4, #16]
 800e43a:	464a      	mov	r2, r9
 800e43c:	f7ff fb46 	bl	800dacc <memcpy>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	6126      	str	r6, [r4, #16]
 800e44e:	6165      	str	r5, [r4, #20]
 800e450:	444e      	add	r6, r9
 800e452:	eba5 0509 	sub.w	r5, r5, r9
 800e456:	6026      	str	r6, [r4, #0]
 800e458:	60a5      	str	r5, [r4, #8]
 800e45a:	463e      	mov	r6, r7
 800e45c:	42be      	cmp	r6, r7
 800e45e:	d900      	bls.n	800e462 <__ssputs_r+0x86>
 800e460:	463e      	mov	r6, r7
 800e462:	6820      	ldr	r0, [r4, #0]
 800e464:	4632      	mov	r2, r6
 800e466:	4641      	mov	r1, r8
 800e468:	f000 f966 	bl	800e738 <memmove>
 800e46c:	68a3      	ldr	r3, [r4, #8]
 800e46e:	1b9b      	subs	r3, r3, r6
 800e470:	60a3      	str	r3, [r4, #8]
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	4433      	add	r3, r6
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	2000      	movs	r0, #0
 800e47a:	e7db      	b.n	800e434 <__ssputs_r+0x58>
 800e47c:	462a      	mov	r2, r5
 800e47e:	f000 f981 	bl	800e784 <_realloc_r>
 800e482:	4606      	mov	r6, r0
 800e484:	2800      	cmp	r0, #0
 800e486:	d1e1      	bne.n	800e44c <__ssputs_r+0x70>
 800e488:	6921      	ldr	r1, [r4, #16]
 800e48a:	4650      	mov	r0, sl
 800e48c:	f7ff fec6 	bl	800e21c <_free_r>
 800e490:	e7c7      	b.n	800e422 <__ssputs_r+0x46>
	...

0800e494 <_svfiprintf_r>:
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	4698      	mov	r8, r3
 800e49a:	898b      	ldrh	r3, [r1, #12]
 800e49c:	061b      	lsls	r3, r3, #24
 800e49e:	b09d      	sub	sp, #116	; 0x74
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4614      	mov	r4, r2
 800e4a6:	d50e      	bpl.n	800e4c6 <_svfiprintf_r+0x32>
 800e4a8:	690b      	ldr	r3, [r1, #16]
 800e4aa:	b963      	cbnz	r3, 800e4c6 <_svfiprintf_r+0x32>
 800e4ac:	2140      	movs	r1, #64	; 0x40
 800e4ae:	f7ff ff21 	bl	800e2f4 <_malloc_r>
 800e4b2:	6028      	str	r0, [r5, #0]
 800e4b4:	6128      	str	r0, [r5, #16]
 800e4b6:	b920      	cbnz	r0, 800e4c2 <_svfiprintf_r+0x2e>
 800e4b8:	230c      	movs	r3, #12
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	e0d1      	b.n	800e666 <_svfiprintf_r+0x1d2>
 800e4c2:	2340      	movs	r3, #64	; 0x40
 800e4c4:	616b      	str	r3, [r5, #20]
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ca:	2320      	movs	r3, #32
 800e4cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4d4:	2330      	movs	r3, #48	; 0x30
 800e4d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e680 <_svfiprintf_r+0x1ec>
 800e4da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4de:	f04f 0901 	mov.w	r9, #1
 800e4e2:	4623      	mov	r3, r4
 800e4e4:	469a      	mov	sl, r3
 800e4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ea:	b10a      	cbz	r2, 800e4f0 <_svfiprintf_r+0x5c>
 800e4ec:	2a25      	cmp	r2, #37	; 0x25
 800e4ee:	d1f9      	bne.n	800e4e4 <_svfiprintf_r+0x50>
 800e4f0:	ebba 0b04 	subs.w	fp, sl, r4
 800e4f4:	d00b      	beq.n	800e50e <_svfiprintf_r+0x7a>
 800e4f6:	465b      	mov	r3, fp
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f7ff ff6d 	bl	800e3dc <__ssputs_r>
 800e502:	3001      	adds	r0, #1
 800e504:	f000 80aa 	beq.w	800e65c <_svfiprintf_r+0x1c8>
 800e508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e50a:	445a      	add	r2, fp
 800e50c:	9209      	str	r2, [sp, #36]	; 0x24
 800e50e:	f89a 3000 	ldrb.w	r3, [sl]
 800e512:	2b00      	cmp	r3, #0
 800e514:	f000 80a2 	beq.w	800e65c <_svfiprintf_r+0x1c8>
 800e518:	2300      	movs	r3, #0
 800e51a:	f04f 32ff 	mov.w	r2, #4294967295
 800e51e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e522:	f10a 0a01 	add.w	sl, sl, #1
 800e526:	9304      	str	r3, [sp, #16]
 800e528:	9307      	str	r3, [sp, #28]
 800e52a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e52e:	931a      	str	r3, [sp, #104]	; 0x68
 800e530:	4654      	mov	r4, sl
 800e532:	2205      	movs	r2, #5
 800e534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e538:	4851      	ldr	r0, [pc, #324]	; (800e680 <_svfiprintf_r+0x1ec>)
 800e53a:	f7f1 fe79 	bl	8000230 <memchr>
 800e53e:	9a04      	ldr	r2, [sp, #16]
 800e540:	b9d8      	cbnz	r0, 800e57a <_svfiprintf_r+0xe6>
 800e542:	06d0      	lsls	r0, r2, #27
 800e544:	bf44      	itt	mi
 800e546:	2320      	movmi	r3, #32
 800e548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e54c:	0711      	lsls	r1, r2, #28
 800e54e:	bf44      	itt	mi
 800e550:	232b      	movmi	r3, #43	; 0x2b
 800e552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e556:	f89a 3000 	ldrb.w	r3, [sl]
 800e55a:	2b2a      	cmp	r3, #42	; 0x2a
 800e55c:	d015      	beq.n	800e58a <_svfiprintf_r+0xf6>
 800e55e:	9a07      	ldr	r2, [sp, #28]
 800e560:	4654      	mov	r4, sl
 800e562:	2000      	movs	r0, #0
 800e564:	f04f 0c0a 	mov.w	ip, #10
 800e568:	4621      	mov	r1, r4
 800e56a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e56e:	3b30      	subs	r3, #48	; 0x30
 800e570:	2b09      	cmp	r3, #9
 800e572:	d94e      	bls.n	800e612 <_svfiprintf_r+0x17e>
 800e574:	b1b0      	cbz	r0, 800e5a4 <_svfiprintf_r+0x110>
 800e576:	9207      	str	r2, [sp, #28]
 800e578:	e014      	b.n	800e5a4 <_svfiprintf_r+0x110>
 800e57a:	eba0 0308 	sub.w	r3, r0, r8
 800e57e:	fa09 f303 	lsl.w	r3, r9, r3
 800e582:	4313      	orrs	r3, r2
 800e584:	9304      	str	r3, [sp, #16]
 800e586:	46a2      	mov	sl, r4
 800e588:	e7d2      	b.n	800e530 <_svfiprintf_r+0x9c>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	1d19      	adds	r1, r3, #4
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	9103      	str	r1, [sp, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	bfbb      	ittet	lt
 800e596:	425b      	neglt	r3, r3
 800e598:	f042 0202 	orrlt.w	r2, r2, #2
 800e59c:	9307      	strge	r3, [sp, #28]
 800e59e:	9307      	strlt	r3, [sp, #28]
 800e5a0:	bfb8      	it	lt
 800e5a2:	9204      	strlt	r2, [sp, #16]
 800e5a4:	7823      	ldrb	r3, [r4, #0]
 800e5a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5a8:	d10c      	bne.n	800e5c4 <_svfiprintf_r+0x130>
 800e5aa:	7863      	ldrb	r3, [r4, #1]
 800e5ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ae:	d135      	bne.n	800e61c <_svfiprintf_r+0x188>
 800e5b0:	9b03      	ldr	r3, [sp, #12]
 800e5b2:	1d1a      	adds	r2, r3, #4
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	9203      	str	r2, [sp, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	bfb8      	it	lt
 800e5bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5c0:	3402      	adds	r4, #2
 800e5c2:	9305      	str	r3, [sp, #20]
 800e5c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e690 <_svfiprintf_r+0x1fc>
 800e5c8:	7821      	ldrb	r1, [r4, #0]
 800e5ca:	2203      	movs	r2, #3
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	f7f1 fe2f 	bl	8000230 <memchr>
 800e5d2:	b140      	cbz	r0, 800e5e6 <_svfiprintf_r+0x152>
 800e5d4:	2340      	movs	r3, #64	; 0x40
 800e5d6:	eba0 000a 	sub.w	r0, r0, sl
 800e5da:	fa03 f000 	lsl.w	r0, r3, r0
 800e5de:	9b04      	ldr	r3, [sp, #16]
 800e5e0:	4303      	orrs	r3, r0
 800e5e2:	3401      	adds	r4, #1
 800e5e4:	9304      	str	r3, [sp, #16]
 800e5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ea:	4826      	ldr	r0, [pc, #152]	; (800e684 <_svfiprintf_r+0x1f0>)
 800e5ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5f0:	2206      	movs	r2, #6
 800e5f2:	f7f1 fe1d 	bl	8000230 <memchr>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d038      	beq.n	800e66c <_svfiprintf_r+0x1d8>
 800e5fa:	4b23      	ldr	r3, [pc, #140]	; (800e688 <_svfiprintf_r+0x1f4>)
 800e5fc:	bb1b      	cbnz	r3, 800e646 <_svfiprintf_r+0x1b2>
 800e5fe:	9b03      	ldr	r3, [sp, #12]
 800e600:	3307      	adds	r3, #7
 800e602:	f023 0307 	bic.w	r3, r3, #7
 800e606:	3308      	adds	r3, #8
 800e608:	9303      	str	r3, [sp, #12]
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	4433      	add	r3, r6
 800e60e:	9309      	str	r3, [sp, #36]	; 0x24
 800e610:	e767      	b.n	800e4e2 <_svfiprintf_r+0x4e>
 800e612:	fb0c 3202 	mla	r2, ip, r2, r3
 800e616:	460c      	mov	r4, r1
 800e618:	2001      	movs	r0, #1
 800e61a:	e7a5      	b.n	800e568 <_svfiprintf_r+0xd4>
 800e61c:	2300      	movs	r3, #0
 800e61e:	3401      	adds	r4, #1
 800e620:	9305      	str	r3, [sp, #20]
 800e622:	4619      	mov	r1, r3
 800e624:	f04f 0c0a 	mov.w	ip, #10
 800e628:	4620      	mov	r0, r4
 800e62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e62e:	3a30      	subs	r2, #48	; 0x30
 800e630:	2a09      	cmp	r2, #9
 800e632:	d903      	bls.n	800e63c <_svfiprintf_r+0x1a8>
 800e634:	2b00      	cmp	r3, #0
 800e636:	d0c5      	beq.n	800e5c4 <_svfiprintf_r+0x130>
 800e638:	9105      	str	r1, [sp, #20]
 800e63a:	e7c3      	b.n	800e5c4 <_svfiprintf_r+0x130>
 800e63c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e640:	4604      	mov	r4, r0
 800e642:	2301      	movs	r3, #1
 800e644:	e7f0      	b.n	800e628 <_svfiprintf_r+0x194>
 800e646:	ab03      	add	r3, sp, #12
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	462a      	mov	r2, r5
 800e64c:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <_svfiprintf_r+0x1f8>)
 800e64e:	a904      	add	r1, sp, #16
 800e650:	4638      	mov	r0, r7
 800e652:	f7fd ffc9 	bl	800c5e8 <_printf_float>
 800e656:	1c42      	adds	r2, r0, #1
 800e658:	4606      	mov	r6, r0
 800e65a:	d1d6      	bne.n	800e60a <_svfiprintf_r+0x176>
 800e65c:	89ab      	ldrh	r3, [r5, #12]
 800e65e:	065b      	lsls	r3, r3, #25
 800e660:	f53f af2c 	bmi.w	800e4bc <_svfiprintf_r+0x28>
 800e664:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e666:	b01d      	add	sp, #116	; 0x74
 800e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66c:	ab03      	add	r3, sp, #12
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	462a      	mov	r2, r5
 800e672:	4b06      	ldr	r3, [pc, #24]	; (800e68c <_svfiprintf_r+0x1f8>)
 800e674:	a904      	add	r1, sp, #16
 800e676:	4638      	mov	r0, r7
 800e678:	f7fe fa5a 	bl	800cb30 <_printf_i>
 800e67c:	e7eb      	b.n	800e656 <_svfiprintf_r+0x1c2>
 800e67e:	bf00      	nop
 800e680:	08010334 	.word	0x08010334
 800e684:	0801033e 	.word	0x0801033e
 800e688:	0800c5e9 	.word	0x0800c5e9
 800e68c:	0800e3dd 	.word	0x0800e3dd
 800e690:	0801033a 	.word	0x0801033a

0800e694 <_sbrk_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d06      	ldr	r5, [pc, #24]	; (800e6b0 <_sbrk_r+0x1c>)
 800e698:	2300      	movs	r3, #0
 800e69a:	4604      	mov	r4, r0
 800e69c:	4608      	mov	r0, r1
 800e69e:	602b      	str	r3, [r5, #0]
 800e6a0:	f7f6 fdbc 	bl	800521c <_sbrk>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_sbrk_r+0x1a>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_sbrk_r+0x1a>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	200007b0 	.word	0x200007b0

0800e6b4 <__assert_func>:
 800e6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6b6:	4614      	mov	r4, r2
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	4b09      	ldr	r3, [pc, #36]	; (800e6e0 <__assert_func+0x2c>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4605      	mov	r5, r0
 800e6c0:	68d8      	ldr	r0, [r3, #12]
 800e6c2:	b14c      	cbz	r4, 800e6d8 <__assert_func+0x24>
 800e6c4:	4b07      	ldr	r3, [pc, #28]	; (800e6e4 <__assert_func+0x30>)
 800e6c6:	9100      	str	r1, [sp, #0]
 800e6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6cc:	4906      	ldr	r1, [pc, #24]	; (800e6e8 <__assert_func+0x34>)
 800e6ce:	462b      	mov	r3, r5
 800e6d0:	f000 f80e 	bl	800e6f0 <fiprintf>
 800e6d4:	f000 faac 	bl	800ec30 <abort>
 800e6d8:	4b04      	ldr	r3, [pc, #16]	; (800e6ec <__assert_func+0x38>)
 800e6da:	461c      	mov	r4, r3
 800e6dc:	e7f3      	b.n	800e6c6 <__assert_func+0x12>
 800e6de:	bf00      	nop
 800e6e0:	2000002c 	.word	0x2000002c
 800e6e4:	08010345 	.word	0x08010345
 800e6e8:	08010352 	.word	0x08010352
 800e6ec:	08010380 	.word	0x08010380

0800e6f0 <fiprintf>:
 800e6f0:	b40e      	push	{r1, r2, r3}
 800e6f2:	b503      	push	{r0, r1, lr}
 800e6f4:	4601      	mov	r1, r0
 800e6f6:	ab03      	add	r3, sp, #12
 800e6f8:	4805      	ldr	r0, [pc, #20]	; (800e710 <fiprintf+0x20>)
 800e6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6fe:	6800      	ldr	r0, [r0, #0]
 800e700:	9301      	str	r3, [sp, #4]
 800e702:	f000 f897 	bl	800e834 <_vfiprintf_r>
 800e706:	b002      	add	sp, #8
 800e708:	f85d eb04 	ldr.w	lr, [sp], #4
 800e70c:	b003      	add	sp, #12
 800e70e:	4770      	bx	lr
 800e710:	2000002c 	.word	0x2000002c

0800e714 <__ascii_mbtowc>:
 800e714:	b082      	sub	sp, #8
 800e716:	b901      	cbnz	r1, 800e71a <__ascii_mbtowc+0x6>
 800e718:	a901      	add	r1, sp, #4
 800e71a:	b142      	cbz	r2, 800e72e <__ascii_mbtowc+0x1a>
 800e71c:	b14b      	cbz	r3, 800e732 <__ascii_mbtowc+0x1e>
 800e71e:	7813      	ldrb	r3, [r2, #0]
 800e720:	600b      	str	r3, [r1, #0]
 800e722:	7812      	ldrb	r2, [r2, #0]
 800e724:	1e10      	subs	r0, r2, #0
 800e726:	bf18      	it	ne
 800e728:	2001      	movne	r0, #1
 800e72a:	b002      	add	sp, #8
 800e72c:	4770      	bx	lr
 800e72e:	4610      	mov	r0, r2
 800e730:	e7fb      	b.n	800e72a <__ascii_mbtowc+0x16>
 800e732:	f06f 0001 	mvn.w	r0, #1
 800e736:	e7f8      	b.n	800e72a <__ascii_mbtowc+0x16>

0800e738 <memmove>:
 800e738:	4288      	cmp	r0, r1
 800e73a:	b510      	push	{r4, lr}
 800e73c:	eb01 0402 	add.w	r4, r1, r2
 800e740:	d902      	bls.n	800e748 <memmove+0x10>
 800e742:	4284      	cmp	r4, r0
 800e744:	4623      	mov	r3, r4
 800e746:	d807      	bhi.n	800e758 <memmove+0x20>
 800e748:	1e43      	subs	r3, r0, #1
 800e74a:	42a1      	cmp	r1, r4
 800e74c:	d008      	beq.n	800e760 <memmove+0x28>
 800e74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e756:	e7f8      	b.n	800e74a <memmove+0x12>
 800e758:	4402      	add	r2, r0
 800e75a:	4601      	mov	r1, r0
 800e75c:	428a      	cmp	r2, r1
 800e75e:	d100      	bne.n	800e762 <memmove+0x2a>
 800e760:	bd10      	pop	{r4, pc}
 800e762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e76a:	e7f7      	b.n	800e75c <memmove+0x24>

0800e76c <__malloc_lock>:
 800e76c:	4801      	ldr	r0, [pc, #4]	; (800e774 <__malloc_lock+0x8>)
 800e76e:	f000 bc1f 	b.w	800efb0 <__retarget_lock_acquire_recursive>
 800e772:	bf00      	nop
 800e774:	200007b4 	.word	0x200007b4

0800e778 <__malloc_unlock>:
 800e778:	4801      	ldr	r0, [pc, #4]	; (800e780 <__malloc_unlock+0x8>)
 800e77a:	f000 bc1a 	b.w	800efb2 <__retarget_lock_release_recursive>
 800e77e:	bf00      	nop
 800e780:	200007b4 	.word	0x200007b4

0800e784 <_realloc_r>:
 800e784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e788:	4680      	mov	r8, r0
 800e78a:	4614      	mov	r4, r2
 800e78c:	460e      	mov	r6, r1
 800e78e:	b921      	cbnz	r1, 800e79a <_realloc_r+0x16>
 800e790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	4611      	mov	r1, r2
 800e796:	f7ff bdad 	b.w	800e2f4 <_malloc_r>
 800e79a:	b92a      	cbnz	r2, 800e7a8 <_realloc_r+0x24>
 800e79c:	f7ff fd3e 	bl	800e21c <_free_r>
 800e7a0:	4625      	mov	r5, r4
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	f000 fc6a 	bl	800f080 <_malloc_usable_size_r>
 800e7ac:	4284      	cmp	r4, r0
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	d802      	bhi.n	800e7b8 <_realloc_r+0x34>
 800e7b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7b6:	d812      	bhi.n	800e7de <_realloc_r+0x5a>
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4640      	mov	r0, r8
 800e7bc:	f7ff fd9a 	bl	800e2f4 <_malloc_r>
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d0ed      	beq.n	800e7a2 <_realloc_r+0x1e>
 800e7c6:	42bc      	cmp	r4, r7
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	bf28      	it	cs
 800e7ce:	463a      	movcs	r2, r7
 800e7d0:	f7ff f97c 	bl	800dacc <memcpy>
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	4640      	mov	r0, r8
 800e7d8:	f7ff fd20 	bl	800e21c <_free_r>
 800e7dc:	e7e1      	b.n	800e7a2 <_realloc_r+0x1e>
 800e7de:	4635      	mov	r5, r6
 800e7e0:	e7df      	b.n	800e7a2 <_realloc_r+0x1e>

0800e7e2 <__sfputc_r>:
 800e7e2:	6893      	ldr	r3, [r2, #8]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	b410      	push	{r4}
 800e7ea:	6093      	str	r3, [r2, #8]
 800e7ec:	da08      	bge.n	800e800 <__sfputc_r+0x1e>
 800e7ee:	6994      	ldr	r4, [r2, #24]
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	db01      	blt.n	800e7f8 <__sfputc_r+0x16>
 800e7f4:	290a      	cmp	r1, #10
 800e7f6:	d103      	bne.n	800e800 <__sfputc_r+0x1e>
 800e7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7fc:	f000 b94a 	b.w	800ea94 <__swbuf_r>
 800e800:	6813      	ldr	r3, [r2, #0]
 800e802:	1c58      	adds	r0, r3, #1
 800e804:	6010      	str	r0, [r2, #0]
 800e806:	7019      	strb	r1, [r3, #0]
 800e808:	4608      	mov	r0, r1
 800e80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <__sfputs_r>:
 800e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e812:	4606      	mov	r6, r0
 800e814:	460f      	mov	r7, r1
 800e816:	4614      	mov	r4, r2
 800e818:	18d5      	adds	r5, r2, r3
 800e81a:	42ac      	cmp	r4, r5
 800e81c:	d101      	bne.n	800e822 <__sfputs_r+0x12>
 800e81e:	2000      	movs	r0, #0
 800e820:	e007      	b.n	800e832 <__sfputs_r+0x22>
 800e822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e826:	463a      	mov	r2, r7
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff ffda 	bl	800e7e2 <__sfputc_r>
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	d1f3      	bne.n	800e81a <__sfputs_r+0xa>
 800e832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e834 <_vfiprintf_r>:
 800e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e838:	460d      	mov	r5, r1
 800e83a:	b09d      	sub	sp, #116	; 0x74
 800e83c:	4614      	mov	r4, r2
 800e83e:	4698      	mov	r8, r3
 800e840:	4606      	mov	r6, r0
 800e842:	b118      	cbz	r0, 800e84c <_vfiprintf_r+0x18>
 800e844:	6983      	ldr	r3, [r0, #24]
 800e846:	b90b      	cbnz	r3, 800e84c <_vfiprintf_r+0x18>
 800e848:	f000 fb14 	bl	800ee74 <__sinit>
 800e84c:	4b89      	ldr	r3, [pc, #548]	; (800ea74 <_vfiprintf_r+0x240>)
 800e84e:	429d      	cmp	r5, r3
 800e850:	d11b      	bne.n	800e88a <_vfiprintf_r+0x56>
 800e852:	6875      	ldr	r5, [r6, #4]
 800e854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e856:	07d9      	lsls	r1, r3, #31
 800e858:	d405      	bmi.n	800e866 <_vfiprintf_r+0x32>
 800e85a:	89ab      	ldrh	r3, [r5, #12]
 800e85c:	059a      	lsls	r2, r3, #22
 800e85e:	d402      	bmi.n	800e866 <_vfiprintf_r+0x32>
 800e860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e862:	f000 fba5 	bl	800efb0 <__retarget_lock_acquire_recursive>
 800e866:	89ab      	ldrh	r3, [r5, #12]
 800e868:	071b      	lsls	r3, r3, #28
 800e86a:	d501      	bpl.n	800e870 <_vfiprintf_r+0x3c>
 800e86c:	692b      	ldr	r3, [r5, #16]
 800e86e:	b9eb      	cbnz	r3, 800e8ac <_vfiprintf_r+0x78>
 800e870:	4629      	mov	r1, r5
 800e872:	4630      	mov	r0, r6
 800e874:	f000 f96e 	bl	800eb54 <__swsetup_r>
 800e878:	b1c0      	cbz	r0, 800e8ac <_vfiprintf_r+0x78>
 800e87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e87c:	07dc      	lsls	r4, r3, #31
 800e87e:	d50e      	bpl.n	800e89e <_vfiprintf_r+0x6a>
 800e880:	f04f 30ff 	mov.w	r0, #4294967295
 800e884:	b01d      	add	sp, #116	; 0x74
 800e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88a:	4b7b      	ldr	r3, [pc, #492]	; (800ea78 <_vfiprintf_r+0x244>)
 800e88c:	429d      	cmp	r5, r3
 800e88e:	d101      	bne.n	800e894 <_vfiprintf_r+0x60>
 800e890:	68b5      	ldr	r5, [r6, #8]
 800e892:	e7df      	b.n	800e854 <_vfiprintf_r+0x20>
 800e894:	4b79      	ldr	r3, [pc, #484]	; (800ea7c <_vfiprintf_r+0x248>)
 800e896:	429d      	cmp	r5, r3
 800e898:	bf08      	it	eq
 800e89a:	68f5      	ldreq	r5, [r6, #12]
 800e89c:	e7da      	b.n	800e854 <_vfiprintf_r+0x20>
 800e89e:	89ab      	ldrh	r3, [r5, #12]
 800e8a0:	0598      	lsls	r0, r3, #22
 800e8a2:	d4ed      	bmi.n	800e880 <_vfiprintf_r+0x4c>
 800e8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8a6:	f000 fb84 	bl	800efb2 <__retarget_lock_release_recursive>
 800e8aa:	e7e9      	b.n	800e880 <_vfiprintf_r+0x4c>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e8b0:	2320      	movs	r3, #32
 800e8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8ba:	2330      	movs	r3, #48	; 0x30
 800e8bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea80 <_vfiprintf_r+0x24c>
 800e8c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8c4:	f04f 0901 	mov.w	r9, #1
 800e8c8:	4623      	mov	r3, r4
 800e8ca:	469a      	mov	sl, r3
 800e8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8d0:	b10a      	cbz	r2, 800e8d6 <_vfiprintf_r+0xa2>
 800e8d2:	2a25      	cmp	r2, #37	; 0x25
 800e8d4:	d1f9      	bne.n	800e8ca <_vfiprintf_r+0x96>
 800e8d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e8da:	d00b      	beq.n	800e8f4 <_vfiprintf_r+0xc0>
 800e8dc:	465b      	mov	r3, fp
 800e8de:	4622      	mov	r2, r4
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f7ff ff94 	bl	800e810 <__sfputs_r>
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	f000 80aa 	beq.w	800ea42 <_vfiprintf_r+0x20e>
 800e8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8f0:	445a      	add	r2, fp
 800e8f2:	9209      	str	r2, [sp, #36]	; 0x24
 800e8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 80a2 	beq.w	800ea42 <_vfiprintf_r+0x20e>
 800e8fe:	2300      	movs	r3, #0
 800e900:	f04f 32ff 	mov.w	r2, #4294967295
 800e904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e908:	f10a 0a01 	add.w	sl, sl, #1
 800e90c:	9304      	str	r3, [sp, #16]
 800e90e:	9307      	str	r3, [sp, #28]
 800e910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e914:	931a      	str	r3, [sp, #104]	; 0x68
 800e916:	4654      	mov	r4, sl
 800e918:	2205      	movs	r2, #5
 800e91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e91e:	4858      	ldr	r0, [pc, #352]	; (800ea80 <_vfiprintf_r+0x24c>)
 800e920:	f7f1 fc86 	bl	8000230 <memchr>
 800e924:	9a04      	ldr	r2, [sp, #16]
 800e926:	b9d8      	cbnz	r0, 800e960 <_vfiprintf_r+0x12c>
 800e928:	06d1      	lsls	r1, r2, #27
 800e92a:	bf44      	itt	mi
 800e92c:	2320      	movmi	r3, #32
 800e92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e932:	0713      	lsls	r3, r2, #28
 800e934:	bf44      	itt	mi
 800e936:	232b      	movmi	r3, #43	; 0x2b
 800e938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e93c:	f89a 3000 	ldrb.w	r3, [sl]
 800e940:	2b2a      	cmp	r3, #42	; 0x2a
 800e942:	d015      	beq.n	800e970 <_vfiprintf_r+0x13c>
 800e944:	9a07      	ldr	r2, [sp, #28]
 800e946:	4654      	mov	r4, sl
 800e948:	2000      	movs	r0, #0
 800e94a:	f04f 0c0a 	mov.w	ip, #10
 800e94e:	4621      	mov	r1, r4
 800e950:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e954:	3b30      	subs	r3, #48	; 0x30
 800e956:	2b09      	cmp	r3, #9
 800e958:	d94e      	bls.n	800e9f8 <_vfiprintf_r+0x1c4>
 800e95a:	b1b0      	cbz	r0, 800e98a <_vfiprintf_r+0x156>
 800e95c:	9207      	str	r2, [sp, #28]
 800e95e:	e014      	b.n	800e98a <_vfiprintf_r+0x156>
 800e960:	eba0 0308 	sub.w	r3, r0, r8
 800e964:	fa09 f303 	lsl.w	r3, r9, r3
 800e968:	4313      	orrs	r3, r2
 800e96a:	9304      	str	r3, [sp, #16]
 800e96c:	46a2      	mov	sl, r4
 800e96e:	e7d2      	b.n	800e916 <_vfiprintf_r+0xe2>
 800e970:	9b03      	ldr	r3, [sp, #12]
 800e972:	1d19      	adds	r1, r3, #4
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	9103      	str	r1, [sp, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	bfbb      	ittet	lt
 800e97c:	425b      	neglt	r3, r3
 800e97e:	f042 0202 	orrlt.w	r2, r2, #2
 800e982:	9307      	strge	r3, [sp, #28]
 800e984:	9307      	strlt	r3, [sp, #28]
 800e986:	bfb8      	it	lt
 800e988:	9204      	strlt	r2, [sp, #16]
 800e98a:	7823      	ldrb	r3, [r4, #0]
 800e98c:	2b2e      	cmp	r3, #46	; 0x2e
 800e98e:	d10c      	bne.n	800e9aa <_vfiprintf_r+0x176>
 800e990:	7863      	ldrb	r3, [r4, #1]
 800e992:	2b2a      	cmp	r3, #42	; 0x2a
 800e994:	d135      	bne.n	800ea02 <_vfiprintf_r+0x1ce>
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	1d1a      	adds	r2, r3, #4
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	9203      	str	r2, [sp, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	bfb8      	it	lt
 800e9a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9a6:	3402      	adds	r4, #2
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea90 <_vfiprintf_r+0x25c>
 800e9ae:	7821      	ldrb	r1, [r4, #0]
 800e9b0:	2203      	movs	r2, #3
 800e9b2:	4650      	mov	r0, sl
 800e9b4:	f7f1 fc3c 	bl	8000230 <memchr>
 800e9b8:	b140      	cbz	r0, 800e9cc <_vfiprintf_r+0x198>
 800e9ba:	2340      	movs	r3, #64	; 0x40
 800e9bc:	eba0 000a 	sub.w	r0, r0, sl
 800e9c0:	fa03 f000 	lsl.w	r0, r3, r0
 800e9c4:	9b04      	ldr	r3, [sp, #16]
 800e9c6:	4303      	orrs	r3, r0
 800e9c8:	3401      	adds	r4, #1
 800e9ca:	9304      	str	r3, [sp, #16]
 800e9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9d0:	482c      	ldr	r0, [pc, #176]	; (800ea84 <_vfiprintf_r+0x250>)
 800e9d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9d6:	2206      	movs	r2, #6
 800e9d8:	f7f1 fc2a 	bl	8000230 <memchr>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d03f      	beq.n	800ea60 <_vfiprintf_r+0x22c>
 800e9e0:	4b29      	ldr	r3, [pc, #164]	; (800ea88 <_vfiprintf_r+0x254>)
 800e9e2:	bb1b      	cbnz	r3, 800ea2c <_vfiprintf_r+0x1f8>
 800e9e4:	9b03      	ldr	r3, [sp, #12]
 800e9e6:	3307      	adds	r3, #7
 800e9e8:	f023 0307 	bic.w	r3, r3, #7
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	9303      	str	r3, [sp, #12]
 800e9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f2:	443b      	add	r3, r7
 800e9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9f6:	e767      	b.n	800e8c8 <_vfiprintf_r+0x94>
 800e9f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9fc:	460c      	mov	r4, r1
 800e9fe:	2001      	movs	r0, #1
 800ea00:	e7a5      	b.n	800e94e <_vfiprintf_r+0x11a>
 800ea02:	2300      	movs	r3, #0
 800ea04:	3401      	adds	r4, #1
 800ea06:	9305      	str	r3, [sp, #20]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	f04f 0c0a 	mov.w	ip, #10
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea14:	3a30      	subs	r2, #48	; 0x30
 800ea16:	2a09      	cmp	r2, #9
 800ea18:	d903      	bls.n	800ea22 <_vfiprintf_r+0x1ee>
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d0c5      	beq.n	800e9aa <_vfiprintf_r+0x176>
 800ea1e:	9105      	str	r1, [sp, #20]
 800ea20:	e7c3      	b.n	800e9aa <_vfiprintf_r+0x176>
 800ea22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea26:	4604      	mov	r4, r0
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e7f0      	b.n	800ea0e <_vfiprintf_r+0x1da>
 800ea2c:	ab03      	add	r3, sp, #12
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	462a      	mov	r2, r5
 800ea32:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <_vfiprintf_r+0x258>)
 800ea34:	a904      	add	r1, sp, #16
 800ea36:	4630      	mov	r0, r6
 800ea38:	f7fd fdd6 	bl	800c5e8 <_printf_float>
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	1c78      	adds	r0, r7, #1
 800ea40:	d1d6      	bne.n	800e9f0 <_vfiprintf_r+0x1bc>
 800ea42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea44:	07d9      	lsls	r1, r3, #31
 800ea46:	d405      	bmi.n	800ea54 <_vfiprintf_r+0x220>
 800ea48:	89ab      	ldrh	r3, [r5, #12]
 800ea4a:	059a      	lsls	r2, r3, #22
 800ea4c:	d402      	bmi.n	800ea54 <_vfiprintf_r+0x220>
 800ea4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea50:	f000 faaf 	bl	800efb2 <__retarget_lock_release_recursive>
 800ea54:	89ab      	ldrh	r3, [r5, #12]
 800ea56:	065b      	lsls	r3, r3, #25
 800ea58:	f53f af12 	bmi.w	800e880 <_vfiprintf_r+0x4c>
 800ea5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea5e:	e711      	b.n	800e884 <_vfiprintf_r+0x50>
 800ea60:	ab03      	add	r3, sp, #12
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	462a      	mov	r2, r5
 800ea66:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <_vfiprintf_r+0x258>)
 800ea68:	a904      	add	r1, sp, #16
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7fe f860 	bl	800cb30 <_printf_i>
 800ea70:	e7e4      	b.n	800ea3c <_vfiprintf_r+0x208>
 800ea72:	bf00      	nop
 800ea74:	080104ac 	.word	0x080104ac
 800ea78:	080104cc 	.word	0x080104cc
 800ea7c:	0801048c 	.word	0x0801048c
 800ea80:	08010334 	.word	0x08010334
 800ea84:	0801033e 	.word	0x0801033e
 800ea88:	0800c5e9 	.word	0x0800c5e9
 800ea8c:	0800e811 	.word	0x0800e811
 800ea90:	0801033a 	.word	0x0801033a

0800ea94 <__swbuf_r>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	460e      	mov	r6, r1
 800ea98:	4614      	mov	r4, r2
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	b118      	cbz	r0, 800eaa6 <__swbuf_r+0x12>
 800ea9e:	6983      	ldr	r3, [r0, #24]
 800eaa0:	b90b      	cbnz	r3, 800eaa6 <__swbuf_r+0x12>
 800eaa2:	f000 f9e7 	bl	800ee74 <__sinit>
 800eaa6:	4b21      	ldr	r3, [pc, #132]	; (800eb2c <__swbuf_r+0x98>)
 800eaa8:	429c      	cmp	r4, r3
 800eaaa:	d12b      	bne.n	800eb04 <__swbuf_r+0x70>
 800eaac:	686c      	ldr	r4, [r5, #4]
 800eaae:	69a3      	ldr	r3, [r4, #24]
 800eab0:	60a3      	str	r3, [r4, #8]
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	071a      	lsls	r2, r3, #28
 800eab6:	d52f      	bpl.n	800eb18 <__swbuf_r+0x84>
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	b36b      	cbz	r3, 800eb18 <__swbuf_r+0x84>
 800eabc:	6923      	ldr	r3, [r4, #16]
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	1ac0      	subs	r0, r0, r3
 800eac2:	6963      	ldr	r3, [r4, #20]
 800eac4:	b2f6      	uxtb	r6, r6
 800eac6:	4283      	cmp	r3, r0
 800eac8:	4637      	mov	r7, r6
 800eaca:	dc04      	bgt.n	800ead6 <__swbuf_r+0x42>
 800eacc:	4621      	mov	r1, r4
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f93c 	bl	800ed4c <_fflush_r>
 800ead4:	bb30      	cbnz	r0, 800eb24 <__swbuf_r+0x90>
 800ead6:	68a3      	ldr	r3, [r4, #8]
 800ead8:	3b01      	subs	r3, #1
 800eada:	60a3      	str	r3, [r4, #8]
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	1c5a      	adds	r2, r3, #1
 800eae0:	6022      	str	r2, [r4, #0]
 800eae2:	701e      	strb	r6, [r3, #0]
 800eae4:	6963      	ldr	r3, [r4, #20]
 800eae6:	3001      	adds	r0, #1
 800eae8:	4283      	cmp	r3, r0
 800eaea:	d004      	beq.n	800eaf6 <__swbuf_r+0x62>
 800eaec:	89a3      	ldrh	r3, [r4, #12]
 800eaee:	07db      	lsls	r3, r3, #31
 800eaf0:	d506      	bpl.n	800eb00 <__swbuf_r+0x6c>
 800eaf2:	2e0a      	cmp	r6, #10
 800eaf4:	d104      	bne.n	800eb00 <__swbuf_r+0x6c>
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4628      	mov	r0, r5
 800eafa:	f000 f927 	bl	800ed4c <_fflush_r>
 800eafe:	b988      	cbnz	r0, 800eb24 <__swbuf_r+0x90>
 800eb00:	4638      	mov	r0, r7
 800eb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb04:	4b0a      	ldr	r3, [pc, #40]	; (800eb30 <__swbuf_r+0x9c>)
 800eb06:	429c      	cmp	r4, r3
 800eb08:	d101      	bne.n	800eb0e <__swbuf_r+0x7a>
 800eb0a:	68ac      	ldr	r4, [r5, #8]
 800eb0c:	e7cf      	b.n	800eaae <__swbuf_r+0x1a>
 800eb0e:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <__swbuf_r+0xa0>)
 800eb10:	429c      	cmp	r4, r3
 800eb12:	bf08      	it	eq
 800eb14:	68ec      	ldreq	r4, [r5, #12]
 800eb16:	e7ca      	b.n	800eaae <__swbuf_r+0x1a>
 800eb18:	4621      	mov	r1, r4
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f000 f81a 	bl	800eb54 <__swsetup_r>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d0cb      	beq.n	800eabc <__swbuf_r+0x28>
 800eb24:	f04f 37ff 	mov.w	r7, #4294967295
 800eb28:	e7ea      	b.n	800eb00 <__swbuf_r+0x6c>
 800eb2a:	bf00      	nop
 800eb2c:	080104ac 	.word	0x080104ac
 800eb30:	080104cc 	.word	0x080104cc
 800eb34:	0801048c 	.word	0x0801048c

0800eb38 <__ascii_wctomb>:
 800eb38:	b149      	cbz	r1, 800eb4e <__ascii_wctomb+0x16>
 800eb3a:	2aff      	cmp	r2, #255	; 0xff
 800eb3c:	bf85      	ittet	hi
 800eb3e:	238a      	movhi	r3, #138	; 0x8a
 800eb40:	6003      	strhi	r3, [r0, #0]
 800eb42:	700a      	strbls	r2, [r1, #0]
 800eb44:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb48:	bf98      	it	ls
 800eb4a:	2001      	movls	r0, #1
 800eb4c:	4770      	bx	lr
 800eb4e:	4608      	mov	r0, r1
 800eb50:	4770      	bx	lr
	...

0800eb54 <__swsetup_r>:
 800eb54:	4b32      	ldr	r3, [pc, #200]	; (800ec20 <__swsetup_r+0xcc>)
 800eb56:	b570      	push	{r4, r5, r6, lr}
 800eb58:	681d      	ldr	r5, [r3, #0]
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	b125      	cbz	r5, 800eb6a <__swsetup_r+0x16>
 800eb60:	69ab      	ldr	r3, [r5, #24]
 800eb62:	b913      	cbnz	r3, 800eb6a <__swsetup_r+0x16>
 800eb64:	4628      	mov	r0, r5
 800eb66:	f000 f985 	bl	800ee74 <__sinit>
 800eb6a:	4b2e      	ldr	r3, [pc, #184]	; (800ec24 <__swsetup_r+0xd0>)
 800eb6c:	429c      	cmp	r4, r3
 800eb6e:	d10f      	bne.n	800eb90 <__swsetup_r+0x3c>
 800eb70:	686c      	ldr	r4, [r5, #4]
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb78:	0719      	lsls	r1, r3, #28
 800eb7a:	d42c      	bmi.n	800ebd6 <__swsetup_r+0x82>
 800eb7c:	06dd      	lsls	r5, r3, #27
 800eb7e:	d411      	bmi.n	800eba4 <__swsetup_r+0x50>
 800eb80:	2309      	movs	r3, #9
 800eb82:	6033      	str	r3, [r6, #0]
 800eb84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8e:	e03e      	b.n	800ec0e <__swsetup_r+0xba>
 800eb90:	4b25      	ldr	r3, [pc, #148]	; (800ec28 <__swsetup_r+0xd4>)
 800eb92:	429c      	cmp	r4, r3
 800eb94:	d101      	bne.n	800eb9a <__swsetup_r+0x46>
 800eb96:	68ac      	ldr	r4, [r5, #8]
 800eb98:	e7eb      	b.n	800eb72 <__swsetup_r+0x1e>
 800eb9a:	4b24      	ldr	r3, [pc, #144]	; (800ec2c <__swsetup_r+0xd8>)
 800eb9c:	429c      	cmp	r4, r3
 800eb9e:	bf08      	it	eq
 800eba0:	68ec      	ldreq	r4, [r5, #12]
 800eba2:	e7e6      	b.n	800eb72 <__swsetup_r+0x1e>
 800eba4:	0758      	lsls	r0, r3, #29
 800eba6:	d512      	bpl.n	800ebce <__swsetup_r+0x7a>
 800eba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebaa:	b141      	cbz	r1, 800ebbe <__swsetup_r+0x6a>
 800ebac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebb0:	4299      	cmp	r1, r3
 800ebb2:	d002      	beq.n	800ebba <__swsetup_r+0x66>
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	f7ff fb31 	bl	800e21c <_free_r>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	6363      	str	r3, [r4, #52]	; 0x34
 800ebbe:	89a3      	ldrh	r3, [r4, #12]
 800ebc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebc4:	81a3      	strh	r3, [r4, #12]
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	6063      	str	r3, [r4, #4]
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	89a3      	ldrh	r3, [r4, #12]
 800ebd0:	f043 0308 	orr.w	r3, r3, #8
 800ebd4:	81a3      	strh	r3, [r4, #12]
 800ebd6:	6923      	ldr	r3, [r4, #16]
 800ebd8:	b94b      	cbnz	r3, 800ebee <__swsetup_r+0x9a>
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebe4:	d003      	beq.n	800ebee <__swsetup_r+0x9a>
 800ebe6:	4621      	mov	r1, r4
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f000 fa09 	bl	800f000 <__smakebuf_r>
 800ebee:	89a0      	ldrh	r0, [r4, #12]
 800ebf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebf4:	f010 0301 	ands.w	r3, r0, #1
 800ebf8:	d00a      	beq.n	800ec10 <__swsetup_r+0xbc>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	60a3      	str	r3, [r4, #8]
 800ebfe:	6963      	ldr	r3, [r4, #20]
 800ec00:	425b      	negs	r3, r3
 800ec02:	61a3      	str	r3, [r4, #24]
 800ec04:	6923      	ldr	r3, [r4, #16]
 800ec06:	b943      	cbnz	r3, 800ec1a <__swsetup_r+0xc6>
 800ec08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec0c:	d1ba      	bne.n	800eb84 <__swsetup_r+0x30>
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
 800ec10:	0781      	lsls	r1, r0, #30
 800ec12:	bf58      	it	pl
 800ec14:	6963      	ldrpl	r3, [r4, #20]
 800ec16:	60a3      	str	r3, [r4, #8]
 800ec18:	e7f4      	b.n	800ec04 <__swsetup_r+0xb0>
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	e7f7      	b.n	800ec0e <__swsetup_r+0xba>
 800ec1e:	bf00      	nop
 800ec20:	2000002c 	.word	0x2000002c
 800ec24:	080104ac 	.word	0x080104ac
 800ec28:	080104cc 	.word	0x080104cc
 800ec2c:	0801048c 	.word	0x0801048c

0800ec30 <abort>:
 800ec30:	b508      	push	{r3, lr}
 800ec32:	2006      	movs	r0, #6
 800ec34:	f000 fa54 	bl	800f0e0 <raise>
 800ec38:	2001      	movs	r0, #1
 800ec3a:	f7f6 fa77 	bl	800512c <_exit>
	...

0800ec40 <__sflush_r>:
 800ec40:	898a      	ldrh	r2, [r1, #12]
 800ec42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec46:	4605      	mov	r5, r0
 800ec48:	0710      	lsls	r0, r2, #28
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	d458      	bmi.n	800ed00 <__sflush_r+0xc0>
 800ec4e:	684b      	ldr	r3, [r1, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dc05      	bgt.n	800ec60 <__sflush_r+0x20>
 800ec54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	dc02      	bgt.n	800ec60 <__sflush_r+0x20>
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec62:	2e00      	cmp	r6, #0
 800ec64:	d0f9      	beq.n	800ec5a <__sflush_r+0x1a>
 800ec66:	2300      	movs	r3, #0
 800ec68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec6c:	682f      	ldr	r7, [r5, #0]
 800ec6e:	602b      	str	r3, [r5, #0]
 800ec70:	d032      	beq.n	800ecd8 <__sflush_r+0x98>
 800ec72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	075a      	lsls	r2, r3, #29
 800ec78:	d505      	bpl.n	800ec86 <__sflush_r+0x46>
 800ec7a:	6863      	ldr	r3, [r4, #4]
 800ec7c:	1ac0      	subs	r0, r0, r3
 800ec7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec80:	b10b      	cbz	r3, 800ec86 <__sflush_r+0x46>
 800ec82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec84:	1ac0      	subs	r0, r0, r3
 800ec86:	2300      	movs	r3, #0
 800ec88:	4602      	mov	r2, r0
 800ec8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec8c:	6a21      	ldr	r1, [r4, #32]
 800ec8e:	4628      	mov	r0, r5
 800ec90:	47b0      	blx	r6
 800ec92:	1c43      	adds	r3, r0, #1
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	d106      	bne.n	800eca6 <__sflush_r+0x66>
 800ec98:	6829      	ldr	r1, [r5, #0]
 800ec9a:	291d      	cmp	r1, #29
 800ec9c:	d82c      	bhi.n	800ecf8 <__sflush_r+0xb8>
 800ec9e:	4a2a      	ldr	r2, [pc, #168]	; (800ed48 <__sflush_r+0x108>)
 800eca0:	40ca      	lsrs	r2, r1
 800eca2:	07d6      	lsls	r6, r2, #31
 800eca4:	d528      	bpl.n	800ecf8 <__sflush_r+0xb8>
 800eca6:	2200      	movs	r2, #0
 800eca8:	6062      	str	r2, [r4, #4]
 800ecaa:	04d9      	lsls	r1, r3, #19
 800ecac:	6922      	ldr	r2, [r4, #16]
 800ecae:	6022      	str	r2, [r4, #0]
 800ecb0:	d504      	bpl.n	800ecbc <__sflush_r+0x7c>
 800ecb2:	1c42      	adds	r2, r0, #1
 800ecb4:	d101      	bne.n	800ecba <__sflush_r+0x7a>
 800ecb6:	682b      	ldr	r3, [r5, #0]
 800ecb8:	b903      	cbnz	r3, 800ecbc <__sflush_r+0x7c>
 800ecba:	6560      	str	r0, [r4, #84]	; 0x54
 800ecbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecbe:	602f      	str	r7, [r5, #0]
 800ecc0:	2900      	cmp	r1, #0
 800ecc2:	d0ca      	beq.n	800ec5a <__sflush_r+0x1a>
 800ecc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecc8:	4299      	cmp	r1, r3
 800ecca:	d002      	beq.n	800ecd2 <__sflush_r+0x92>
 800eccc:	4628      	mov	r0, r5
 800ecce:	f7ff faa5 	bl	800e21c <_free_r>
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	6360      	str	r0, [r4, #52]	; 0x34
 800ecd6:	e7c1      	b.n	800ec5c <__sflush_r+0x1c>
 800ecd8:	6a21      	ldr	r1, [r4, #32]
 800ecda:	2301      	movs	r3, #1
 800ecdc:	4628      	mov	r0, r5
 800ecde:	47b0      	blx	r6
 800ece0:	1c41      	adds	r1, r0, #1
 800ece2:	d1c7      	bne.n	800ec74 <__sflush_r+0x34>
 800ece4:	682b      	ldr	r3, [r5, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d0c4      	beq.n	800ec74 <__sflush_r+0x34>
 800ecea:	2b1d      	cmp	r3, #29
 800ecec:	d001      	beq.n	800ecf2 <__sflush_r+0xb2>
 800ecee:	2b16      	cmp	r3, #22
 800ecf0:	d101      	bne.n	800ecf6 <__sflush_r+0xb6>
 800ecf2:	602f      	str	r7, [r5, #0]
 800ecf4:	e7b1      	b.n	800ec5a <__sflush_r+0x1a>
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecfc:	81a3      	strh	r3, [r4, #12]
 800ecfe:	e7ad      	b.n	800ec5c <__sflush_r+0x1c>
 800ed00:	690f      	ldr	r7, [r1, #16]
 800ed02:	2f00      	cmp	r7, #0
 800ed04:	d0a9      	beq.n	800ec5a <__sflush_r+0x1a>
 800ed06:	0793      	lsls	r3, r2, #30
 800ed08:	680e      	ldr	r6, [r1, #0]
 800ed0a:	bf08      	it	eq
 800ed0c:	694b      	ldreq	r3, [r1, #20]
 800ed0e:	600f      	str	r7, [r1, #0]
 800ed10:	bf18      	it	ne
 800ed12:	2300      	movne	r3, #0
 800ed14:	eba6 0807 	sub.w	r8, r6, r7
 800ed18:	608b      	str	r3, [r1, #8]
 800ed1a:	f1b8 0f00 	cmp.w	r8, #0
 800ed1e:	dd9c      	ble.n	800ec5a <__sflush_r+0x1a>
 800ed20:	6a21      	ldr	r1, [r4, #32]
 800ed22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed24:	4643      	mov	r3, r8
 800ed26:	463a      	mov	r2, r7
 800ed28:	4628      	mov	r0, r5
 800ed2a:	47b0      	blx	r6
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	dc06      	bgt.n	800ed3e <__sflush_r+0xfe>
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed36:	81a3      	strh	r3, [r4, #12]
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3c:	e78e      	b.n	800ec5c <__sflush_r+0x1c>
 800ed3e:	4407      	add	r7, r0
 800ed40:	eba8 0800 	sub.w	r8, r8, r0
 800ed44:	e7e9      	b.n	800ed1a <__sflush_r+0xda>
 800ed46:	bf00      	nop
 800ed48:	20400001 	.word	0x20400001

0800ed4c <_fflush_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	690b      	ldr	r3, [r1, #16]
 800ed50:	4605      	mov	r5, r0
 800ed52:	460c      	mov	r4, r1
 800ed54:	b913      	cbnz	r3, 800ed5c <_fflush_r+0x10>
 800ed56:	2500      	movs	r5, #0
 800ed58:	4628      	mov	r0, r5
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	b118      	cbz	r0, 800ed66 <_fflush_r+0x1a>
 800ed5e:	6983      	ldr	r3, [r0, #24]
 800ed60:	b90b      	cbnz	r3, 800ed66 <_fflush_r+0x1a>
 800ed62:	f000 f887 	bl	800ee74 <__sinit>
 800ed66:	4b14      	ldr	r3, [pc, #80]	; (800edb8 <_fflush_r+0x6c>)
 800ed68:	429c      	cmp	r4, r3
 800ed6a:	d11b      	bne.n	800eda4 <_fflush_r+0x58>
 800ed6c:	686c      	ldr	r4, [r5, #4]
 800ed6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d0ef      	beq.n	800ed56 <_fflush_r+0xa>
 800ed76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed78:	07d0      	lsls	r0, r2, #31
 800ed7a:	d404      	bmi.n	800ed86 <_fflush_r+0x3a>
 800ed7c:	0599      	lsls	r1, r3, #22
 800ed7e:	d402      	bmi.n	800ed86 <_fflush_r+0x3a>
 800ed80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed82:	f000 f915 	bl	800efb0 <__retarget_lock_acquire_recursive>
 800ed86:	4628      	mov	r0, r5
 800ed88:	4621      	mov	r1, r4
 800ed8a:	f7ff ff59 	bl	800ec40 <__sflush_r>
 800ed8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed90:	07da      	lsls	r2, r3, #31
 800ed92:	4605      	mov	r5, r0
 800ed94:	d4e0      	bmi.n	800ed58 <_fflush_r+0xc>
 800ed96:	89a3      	ldrh	r3, [r4, #12]
 800ed98:	059b      	lsls	r3, r3, #22
 800ed9a:	d4dd      	bmi.n	800ed58 <_fflush_r+0xc>
 800ed9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed9e:	f000 f908 	bl	800efb2 <__retarget_lock_release_recursive>
 800eda2:	e7d9      	b.n	800ed58 <_fflush_r+0xc>
 800eda4:	4b05      	ldr	r3, [pc, #20]	; (800edbc <_fflush_r+0x70>)
 800eda6:	429c      	cmp	r4, r3
 800eda8:	d101      	bne.n	800edae <_fflush_r+0x62>
 800edaa:	68ac      	ldr	r4, [r5, #8]
 800edac:	e7df      	b.n	800ed6e <_fflush_r+0x22>
 800edae:	4b04      	ldr	r3, [pc, #16]	; (800edc0 <_fflush_r+0x74>)
 800edb0:	429c      	cmp	r4, r3
 800edb2:	bf08      	it	eq
 800edb4:	68ec      	ldreq	r4, [r5, #12]
 800edb6:	e7da      	b.n	800ed6e <_fflush_r+0x22>
 800edb8:	080104ac 	.word	0x080104ac
 800edbc:	080104cc 	.word	0x080104cc
 800edc0:	0801048c 	.word	0x0801048c

0800edc4 <std>:
 800edc4:	2300      	movs	r3, #0
 800edc6:	b510      	push	{r4, lr}
 800edc8:	4604      	mov	r4, r0
 800edca:	e9c0 3300 	strd	r3, r3, [r0]
 800edce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edd2:	6083      	str	r3, [r0, #8]
 800edd4:	8181      	strh	r1, [r0, #12]
 800edd6:	6643      	str	r3, [r0, #100]	; 0x64
 800edd8:	81c2      	strh	r2, [r0, #14]
 800edda:	6183      	str	r3, [r0, #24]
 800eddc:	4619      	mov	r1, r3
 800edde:	2208      	movs	r2, #8
 800ede0:	305c      	adds	r0, #92	; 0x5c
 800ede2:	f7fd fb59 	bl	800c498 <memset>
 800ede6:	4b05      	ldr	r3, [pc, #20]	; (800edfc <std+0x38>)
 800ede8:	6263      	str	r3, [r4, #36]	; 0x24
 800edea:	4b05      	ldr	r3, [pc, #20]	; (800ee00 <std+0x3c>)
 800edec:	62a3      	str	r3, [r4, #40]	; 0x28
 800edee:	4b05      	ldr	r3, [pc, #20]	; (800ee04 <std+0x40>)
 800edf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edf2:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <std+0x44>)
 800edf4:	6224      	str	r4, [r4, #32]
 800edf6:	6323      	str	r3, [r4, #48]	; 0x30
 800edf8:	bd10      	pop	{r4, pc}
 800edfa:	bf00      	nop
 800edfc:	0800f119 	.word	0x0800f119
 800ee00:	0800f13b 	.word	0x0800f13b
 800ee04:	0800f173 	.word	0x0800f173
 800ee08:	0800f197 	.word	0x0800f197

0800ee0c <_cleanup_r>:
 800ee0c:	4901      	ldr	r1, [pc, #4]	; (800ee14 <_cleanup_r+0x8>)
 800ee0e:	f000 b8af 	b.w	800ef70 <_fwalk_reent>
 800ee12:	bf00      	nop
 800ee14:	0800ed4d 	.word	0x0800ed4d

0800ee18 <__sfmoreglue>:
 800ee18:	b570      	push	{r4, r5, r6, lr}
 800ee1a:	2268      	movs	r2, #104	; 0x68
 800ee1c:	1e4d      	subs	r5, r1, #1
 800ee1e:	4355      	muls	r5, r2
 800ee20:	460e      	mov	r6, r1
 800ee22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee26:	f7ff fa65 	bl	800e2f4 <_malloc_r>
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	b140      	cbz	r0, 800ee40 <__sfmoreglue+0x28>
 800ee2e:	2100      	movs	r1, #0
 800ee30:	e9c0 1600 	strd	r1, r6, [r0]
 800ee34:	300c      	adds	r0, #12
 800ee36:	60a0      	str	r0, [r4, #8]
 800ee38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee3c:	f7fd fb2c 	bl	800c498 <memset>
 800ee40:	4620      	mov	r0, r4
 800ee42:	bd70      	pop	{r4, r5, r6, pc}

0800ee44 <__sfp_lock_acquire>:
 800ee44:	4801      	ldr	r0, [pc, #4]	; (800ee4c <__sfp_lock_acquire+0x8>)
 800ee46:	f000 b8b3 	b.w	800efb0 <__retarget_lock_acquire_recursive>
 800ee4a:	bf00      	nop
 800ee4c:	200007b5 	.word	0x200007b5

0800ee50 <__sfp_lock_release>:
 800ee50:	4801      	ldr	r0, [pc, #4]	; (800ee58 <__sfp_lock_release+0x8>)
 800ee52:	f000 b8ae 	b.w	800efb2 <__retarget_lock_release_recursive>
 800ee56:	bf00      	nop
 800ee58:	200007b5 	.word	0x200007b5

0800ee5c <__sinit_lock_acquire>:
 800ee5c:	4801      	ldr	r0, [pc, #4]	; (800ee64 <__sinit_lock_acquire+0x8>)
 800ee5e:	f000 b8a7 	b.w	800efb0 <__retarget_lock_acquire_recursive>
 800ee62:	bf00      	nop
 800ee64:	200007b6 	.word	0x200007b6

0800ee68 <__sinit_lock_release>:
 800ee68:	4801      	ldr	r0, [pc, #4]	; (800ee70 <__sinit_lock_release+0x8>)
 800ee6a:	f000 b8a2 	b.w	800efb2 <__retarget_lock_release_recursive>
 800ee6e:	bf00      	nop
 800ee70:	200007b6 	.word	0x200007b6

0800ee74 <__sinit>:
 800ee74:	b510      	push	{r4, lr}
 800ee76:	4604      	mov	r4, r0
 800ee78:	f7ff fff0 	bl	800ee5c <__sinit_lock_acquire>
 800ee7c:	69a3      	ldr	r3, [r4, #24]
 800ee7e:	b11b      	cbz	r3, 800ee88 <__sinit+0x14>
 800ee80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee84:	f7ff bff0 	b.w	800ee68 <__sinit_lock_release>
 800ee88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ee8e:	4b13      	ldr	r3, [pc, #76]	; (800eedc <__sinit+0x68>)
 800ee90:	4a13      	ldr	r2, [pc, #76]	; (800eee0 <__sinit+0x6c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee96:	42a3      	cmp	r3, r4
 800ee98:	bf04      	itt	eq
 800ee9a:	2301      	moveq	r3, #1
 800ee9c:	61a3      	streq	r3, [r4, #24]
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f000 f820 	bl	800eee4 <__sfp>
 800eea4:	6060      	str	r0, [r4, #4]
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 f81c 	bl	800eee4 <__sfp>
 800eeac:	60a0      	str	r0, [r4, #8]
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f000 f818 	bl	800eee4 <__sfp>
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	60e0      	str	r0, [r4, #12]
 800eeb8:	2104      	movs	r1, #4
 800eeba:	6860      	ldr	r0, [r4, #4]
 800eebc:	f7ff ff82 	bl	800edc4 <std>
 800eec0:	68a0      	ldr	r0, [r4, #8]
 800eec2:	2201      	movs	r2, #1
 800eec4:	2109      	movs	r1, #9
 800eec6:	f7ff ff7d 	bl	800edc4 <std>
 800eeca:	68e0      	ldr	r0, [r4, #12]
 800eecc:	2202      	movs	r2, #2
 800eece:	2112      	movs	r1, #18
 800eed0:	f7ff ff78 	bl	800edc4 <std>
 800eed4:	2301      	movs	r3, #1
 800eed6:	61a3      	str	r3, [r4, #24]
 800eed8:	e7d2      	b.n	800ee80 <__sinit+0xc>
 800eeda:	bf00      	nop
 800eedc:	08010114 	.word	0x08010114
 800eee0:	0800ee0d 	.word	0x0800ee0d

0800eee4 <__sfp>:
 800eee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee6:	4607      	mov	r7, r0
 800eee8:	f7ff ffac 	bl	800ee44 <__sfp_lock_acquire>
 800eeec:	4b1e      	ldr	r3, [pc, #120]	; (800ef68 <__sfp+0x84>)
 800eeee:	681e      	ldr	r6, [r3, #0]
 800eef0:	69b3      	ldr	r3, [r6, #24]
 800eef2:	b913      	cbnz	r3, 800eefa <__sfp+0x16>
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff ffbd 	bl	800ee74 <__sinit>
 800eefa:	3648      	adds	r6, #72	; 0x48
 800eefc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	d503      	bpl.n	800ef0c <__sfp+0x28>
 800ef04:	6833      	ldr	r3, [r6, #0]
 800ef06:	b30b      	cbz	r3, 800ef4c <__sfp+0x68>
 800ef08:	6836      	ldr	r6, [r6, #0]
 800ef0a:	e7f7      	b.n	800eefc <__sfp+0x18>
 800ef0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef10:	b9d5      	cbnz	r5, 800ef48 <__sfp+0x64>
 800ef12:	4b16      	ldr	r3, [pc, #88]	; (800ef6c <__sfp+0x88>)
 800ef14:	60e3      	str	r3, [r4, #12]
 800ef16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ef1c:	f000 f847 	bl	800efae <__retarget_lock_init_recursive>
 800ef20:	f7ff ff96 	bl	800ee50 <__sfp_lock_release>
 800ef24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef2c:	6025      	str	r5, [r4, #0]
 800ef2e:	61a5      	str	r5, [r4, #24]
 800ef30:	2208      	movs	r2, #8
 800ef32:	4629      	mov	r1, r5
 800ef34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef38:	f7fd faae 	bl	800c498 <memset>
 800ef3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef44:	4620      	mov	r0, r4
 800ef46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef48:	3468      	adds	r4, #104	; 0x68
 800ef4a:	e7d9      	b.n	800ef00 <__sfp+0x1c>
 800ef4c:	2104      	movs	r1, #4
 800ef4e:	4638      	mov	r0, r7
 800ef50:	f7ff ff62 	bl	800ee18 <__sfmoreglue>
 800ef54:	4604      	mov	r4, r0
 800ef56:	6030      	str	r0, [r6, #0]
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d1d5      	bne.n	800ef08 <__sfp+0x24>
 800ef5c:	f7ff ff78 	bl	800ee50 <__sfp_lock_release>
 800ef60:	230c      	movs	r3, #12
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	e7ee      	b.n	800ef44 <__sfp+0x60>
 800ef66:	bf00      	nop
 800ef68:	08010114 	.word	0x08010114
 800ef6c:	ffff0001 	.word	0xffff0001

0800ef70 <_fwalk_reent>:
 800ef70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef74:	4606      	mov	r6, r0
 800ef76:	4688      	mov	r8, r1
 800ef78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef7c:	2700      	movs	r7, #0
 800ef7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef82:	f1b9 0901 	subs.w	r9, r9, #1
 800ef86:	d505      	bpl.n	800ef94 <_fwalk_reent+0x24>
 800ef88:	6824      	ldr	r4, [r4, #0]
 800ef8a:	2c00      	cmp	r4, #0
 800ef8c:	d1f7      	bne.n	800ef7e <_fwalk_reent+0xe>
 800ef8e:	4638      	mov	r0, r7
 800ef90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef94:	89ab      	ldrh	r3, [r5, #12]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d907      	bls.n	800efaa <_fwalk_reent+0x3a>
 800ef9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	d003      	beq.n	800efaa <_fwalk_reent+0x3a>
 800efa2:	4629      	mov	r1, r5
 800efa4:	4630      	mov	r0, r6
 800efa6:	47c0      	blx	r8
 800efa8:	4307      	orrs	r7, r0
 800efaa:	3568      	adds	r5, #104	; 0x68
 800efac:	e7e9      	b.n	800ef82 <_fwalk_reent+0x12>

0800efae <__retarget_lock_init_recursive>:
 800efae:	4770      	bx	lr

0800efb0 <__retarget_lock_acquire_recursive>:
 800efb0:	4770      	bx	lr

0800efb2 <__retarget_lock_release_recursive>:
 800efb2:	4770      	bx	lr

0800efb4 <__swhatbuf_r>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	460e      	mov	r6, r1
 800efb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efbc:	2900      	cmp	r1, #0
 800efbe:	b096      	sub	sp, #88	; 0x58
 800efc0:	4614      	mov	r4, r2
 800efc2:	461d      	mov	r5, r3
 800efc4:	da08      	bge.n	800efd8 <__swhatbuf_r+0x24>
 800efc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	602a      	str	r2, [r5, #0]
 800efce:	061a      	lsls	r2, r3, #24
 800efd0:	d410      	bmi.n	800eff4 <__swhatbuf_r+0x40>
 800efd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efd6:	e00e      	b.n	800eff6 <__swhatbuf_r+0x42>
 800efd8:	466a      	mov	r2, sp
 800efda:	f000 f903 	bl	800f1e4 <_fstat_r>
 800efde:	2800      	cmp	r0, #0
 800efe0:	dbf1      	blt.n	800efc6 <__swhatbuf_r+0x12>
 800efe2:	9a01      	ldr	r2, [sp, #4]
 800efe4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efe8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efec:	425a      	negs	r2, r3
 800efee:	415a      	adcs	r2, r3
 800eff0:	602a      	str	r2, [r5, #0]
 800eff2:	e7ee      	b.n	800efd2 <__swhatbuf_r+0x1e>
 800eff4:	2340      	movs	r3, #64	; 0x40
 800eff6:	2000      	movs	r0, #0
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	b016      	add	sp, #88	; 0x58
 800effc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f000 <__smakebuf_r>:
 800f000:	898b      	ldrh	r3, [r1, #12]
 800f002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f004:	079d      	lsls	r5, r3, #30
 800f006:	4606      	mov	r6, r0
 800f008:	460c      	mov	r4, r1
 800f00a:	d507      	bpl.n	800f01c <__smakebuf_r+0x1c>
 800f00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f010:	6023      	str	r3, [r4, #0]
 800f012:	6123      	str	r3, [r4, #16]
 800f014:	2301      	movs	r3, #1
 800f016:	6163      	str	r3, [r4, #20]
 800f018:	b002      	add	sp, #8
 800f01a:	bd70      	pop	{r4, r5, r6, pc}
 800f01c:	ab01      	add	r3, sp, #4
 800f01e:	466a      	mov	r2, sp
 800f020:	f7ff ffc8 	bl	800efb4 <__swhatbuf_r>
 800f024:	9900      	ldr	r1, [sp, #0]
 800f026:	4605      	mov	r5, r0
 800f028:	4630      	mov	r0, r6
 800f02a:	f7ff f963 	bl	800e2f4 <_malloc_r>
 800f02e:	b948      	cbnz	r0, 800f044 <__smakebuf_r+0x44>
 800f030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f034:	059a      	lsls	r2, r3, #22
 800f036:	d4ef      	bmi.n	800f018 <__smakebuf_r+0x18>
 800f038:	f023 0303 	bic.w	r3, r3, #3
 800f03c:	f043 0302 	orr.w	r3, r3, #2
 800f040:	81a3      	strh	r3, [r4, #12]
 800f042:	e7e3      	b.n	800f00c <__smakebuf_r+0xc>
 800f044:	4b0d      	ldr	r3, [pc, #52]	; (800f07c <__smakebuf_r+0x7c>)
 800f046:	62b3      	str	r3, [r6, #40]	; 0x28
 800f048:	89a3      	ldrh	r3, [r4, #12]
 800f04a:	6020      	str	r0, [r4, #0]
 800f04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	9b00      	ldr	r3, [sp, #0]
 800f054:	6163      	str	r3, [r4, #20]
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	6120      	str	r0, [r4, #16]
 800f05a:	b15b      	cbz	r3, 800f074 <__smakebuf_r+0x74>
 800f05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f060:	4630      	mov	r0, r6
 800f062:	f000 f8d1 	bl	800f208 <_isatty_r>
 800f066:	b128      	cbz	r0, 800f074 <__smakebuf_r+0x74>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	f023 0303 	bic.w	r3, r3, #3
 800f06e:	f043 0301 	orr.w	r3, r3, #1
 800f072:	81a3      	strh	r3, [r4, #12]
 800f074:	89a0      	ldrh	r0, [r4, #12]
 800f076:	4305      	orrs	r5, r0
 800f078:	81a5      	strh	r5, [r4, #12]
 800f07a:	e7cd      	b.n	800f018 <__smakebuf_r+0x18>
 800f07c:	0800ee0d 	.word	0x0800ee0d

0800f080 <_malloc_usable_size_r>:
 800f080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f084:	1f18      	subs	r0, r3, #4
 800f086:	2b00      	cmp	r3, #0
 800f088:	bfbc      	itt	lt
 800f08a:	580b      	ldrlt	r3, [r1, r0]
 800f08c:	18c0      	addlt	r0, r0, r3
 800f08e:	4770      	bx	lr

0800f090 <_raise_r>:
 800f090:	291f      	cmp	r1, #31
 800f092:	b538      	push	{r3, r4, r5, lr}
 800f094:	4604      	mov	r4, r0
 800f096:	460d      	mov	r5, r1
 800f098:	d904      	bls.n	800f0a4 <_raise_r+0x14>
 800f09a:	2316      	movs	r3, #22
 800f09c:	6003      	str	r3, [r0, #0]
 800f09e:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0a6:	b112      	cbz	r2, 800f0ae <_raise_r+0x1e>
 800f0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0ac:	b94b      	cbnz	r3, 800f0c2 <_raise_r+0x32>
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 f830 	bl	800f114 <_getpid_r>
 800f0b4:	462a      	mov	r2, r5
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0be:	f000 b817 	b.w	800f0f0 <_kill_r>
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d00a      	beq.n	800f0dc <_raise_r+0x4c>
 800f0c6:	1c59      	adds	r1, r3, #1
 800f0c8:	d103      	bne.n	800f0d2 <_raise_r+0x42>
 800f0ca:	2316      	movs	r3, #22
 800f0cc:	6003      	str	r3, [r0, #0]
 800f0ce:	2001      	movs	r0, #1
 800f0d0:	e7e7      	b.n	800f0a2 <_raise_r+0x12>
 800f0d2:	2400      	movs	r4, #0
 800f0d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0d8:	4628      	mov	r0, r5
 800f0da:	4798      	blx	r3
 800f0dc:	2000      	movs	r0, #0
 800f0de:	e7e0      	b.n	800f0a2 <_raise_r+0x12>

0800f0e0 <raise>:
 800f0e0:	4b02      	ldr	r3, [pc, #8]	; (800f0ec <raise+0xc>)
 800f0e2:	4601      	mov	r1, r0
 800f0e4:	6818      	ldr	r0, [r3, #0]
 800f0e6:	f7ff bfd3 	b.w	800f090 <_raise_r>
 800f0ea:	bf00      	nop
 800f0ec:	2000002c 	.word	0x2000002c

0800f0f0 <_kill_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4d07      	ldr	r5, [pc, #28]	; (800f110 <_kill_r+0x20>)
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	4608      	mov	r0, r1
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	602b      	str	r3, [r5, #0]
 800f0fe:	f7f6 f805 	bl	800510c <_kill>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	d102      	bne.n	800f10c <_kill_r+0x1c>
 800f106:	682b      	ldr	r3, [r5, #0]
 800f108:	b103      	cbz	r3, 800f10c <_kill_r+0x1c>
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	bd38      	pop	{r3, r4, r5, pc}
 800f10e:	bf00      	nop
 800f110:	200007b0 	.word	0x200007b0

0800f114 <_getpid_r>:
 800f114:	f7f5 bff2 	b.w	80050fc <_getpid>

0800f118 <__sread>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	460c      	mov	r4, r1
 800f11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f120:	f000 f894 	bl	800f24c <_read_r>
 800f124:	2800      	cmp	r0, #0
 800f126:	bfab      	itete	ge
 800f128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f12a:	89a3      	ldrhlt	r3, [r4, #12]
 800f12c:	181b      	addge	r3, r3, r0
 800f12e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f132:	bfac      	ite	ge
 800f134:	6563      	strge	r3, [r4, #84]	; 0x54
 800f136:	81a3      	strhlt	r3, [r4, #12]
 800f138:	bd10      	pop	{r4, pc}

0800f13a <__swrite>:
 800f13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f13e:	461f      	mov	r7, r3
 800f140:	898b      	ldrh	r3, [r1, #12]
 800f142:	05db      	lsls	r3, r3, #23
 800f144:	4605      	mov	r5, r0
 800f146:	460c      	mov	r4, r1
 800f148:	4616      	mov	r6, r2
 800f14a:	d505      	bpl.n	800f158 <__swrite+0x1e>
 800f14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f150:	2302      	movs	r3, #2
 800f152:	2200      	movs	r2, #0
 800f154:	f000 f868 	bl	800f228 <_lseek_r>
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f15e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	4632      	mov	r2, r6
 800f166:	463b      	mov	r3, r7
 800f168:	4628      	mov	r0, r5
 800f16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f16e:	f000 b817 	b.w	800f1a0 <_write_r>

0800f172 <__sseek>:
 800f172:	b510      	push	{r4, lr}
 800f174:	460c      	mov	r4, r1
 800f176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f17a:	f000 f855 	bl	800f228 <_lseek_r>
 800f17e:	1c43      	adds	r3, r0, #1
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	bf15      	itete	ne
 800f184:	6560      	strne	r0, [r4, #84]	; 0x54
 800f186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f18a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f18e:	81a3      	strheq	r3, [r4, #12]
 800f190:	bf18      	it	ne
 800f192:	81a3      	strhne	r3, [r4, #12]
 800f194:	bd10      	pop	{r4, pc}

0800f196 <__sclose>:
 800f196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19a:	f000 b813 	b.w	800f1c4 <_close_r>
	...

0800f1a0 <_write_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d07      	ldr	r5, [pc, #28]	; (800f1c0 <_write_r+0x20>)
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	602a      	str	r2, [r5, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f7f5 ffe3 	bl	800517a <_write>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_write_r+0x1e>
 800f1b8:	682b      	ldr	r3, [r5, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_write_r+0x1e>
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	200007b0 	.word	0x200007b0

0800f1c4 <_close_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d06      	ldr	r5, [pc, #24]	; (800f1e0 <_close_r+0x1c>)
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4608      	mov	r0, r1
 800f1ce:	602b      	str	r3, [r5, #0]
 800f1d0:	f7f5 ffef 	bl	80051b2 <_close>
 800f1d4:	1c43      	adds	r3, r0, #1
 800f1d6:	d102      	bne.n	800f1de <_close_r+0x1a>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b103      	cbz	r3, 800f1de <_close_r+0x1a>
 800f1dc:	6023      	str	r3, [r4, #0]
 800f1de:	bd38      	pop	{r3, r4, r5, pc}
 800f1e0:	200007b0 	.word	0x200007b0

0800f1e4 <_fstat_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4d07      	ldr	r5, [pc, #28]	; (800f204 <_fstat_r+0x20>)
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	4608      	mov	r0, r1
 800f1ee:	4611      	mov	r1, r2
 800f1f0:	602b      	str	r3, [r5, #0]
 800f1f2:	f7f5 ffea 	bl	80051ca <_fstat>
 800f1f6:	1c43      	adds	r3, r0, #1
 800f1f8:	d102      	bne.n	800f200 <_fstat_r+0x1c>
 800f1fa:	682b      	ldr	r3, [r5, #0]
 800f1fc:	b103      	cbz	r3, 800f200 <_fstat_r+0x1c>
 800f1fe:	6023      	str	r3, [r4, #0]
 800f200:	bd38      	pop	{r3, r4, r5, pc}
 800f202:	bf00      	nop
 800f204:	200007b0 	.word	0x200007b0

0800f208 <_isatty_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d06      	ldr	r5, [pc, #24]	; (800f224 <_isatty_r+0x1c>)
 800f20c:	2300      	movs	r3, #0
 800f20e:	4604      	mov	r4, r0
 800f210:	4608      	mov	r0, r1
 800f212:	602b      	str	r3, [r5, #0]
 800f214:	f7f5 ffe9 	bl	80051ea <_isatty>
 800f218:	1c43      	adds	r3, r0, #1
 800f21a:	d102      	bne.n	800f222 <_isatty_r+0x1a>
 800f21c:	682b      	ldr	r3, [r5, #0]
 800f21e:	b103      	cbz	r3, 800f222 <_isatty_r+0x1a>
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	200007b0 	.word	0x200007b0

0800f228 <_lseek_r>:
 800f228:	b538      	push	{r3, r4, r5, lr}
 800f22a:	4d07      	ldr	r5, [pc, #28]	; (800f248 <_lseek_r+0x20>)
 800f22c:	4604      	mov	r4, r0
 800f22e:	4608      	mov	r0, r1
 800f230:	4611      	mov	r1, r2
 800f232:	2200      	movs	r2, #0
 800f234:	602a      	str	r2, [r5, #0]
 800f236:	461a      	mov	r2, r3
 800f238:	f7f5 ffe2 	bl	8005200 <_lseek>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d102      	bne.n	800f246 <_lseek_r+0x1e>
 800f240:	682b      	ldr	r3, [r5, #0]
 800f242:	b103      	cbz	r3, 800f246 <_lseek_r+0x1e>
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	200007b0 	.word	0x200007b0

0800f24c <_read_r>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	4d07      	ldr	r5, [pc, #28]	; (800f26c <_read_r+0x20>)
 800f250:	4604      	mov	r4, r0
 800f252:	4608      	mov	r0, r1
 800f254:	4611      	mov	r1, r2
 800f256:	2200      	movs	r2, #0
 800f258:	602a      	str	r2, [r5, #0]
 800f25a:	461a      	mov	r2, r3
 800f25c:	f7f5 ff70 	bl	8005140 <_read>
 800f260:	1c43      	adds	r3, r0, #1
 800f262:	d102      	bne.n	800f26a <_read_r+0x1e>
 800f264:	682b      	ldr	r3, [r5, #0]
 800f266:	b103      	cbz	r3, 800f26a <_read_r+0x1e>
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	bd38      	pop	{r3, r4, r5, pc}
 800f26c:	200007b0 	.word	0x200007b0

0800f270 <cosf>:
 800f270:	ee10 3a10 	vmov	r3, s0
 800f274:	b507      	push	{r0, r1, r2, lr}
 800f276:	4a1e      	ldr	r2, [pc, #120]	; (800f2f0 <cosf+0x80>)
 800f278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f27c:	4293      	cmp	r3, r2
 800f27e:	dc06      	bgt.n	800f28e <cosf+0x1e>
 800f280:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f2f4 <cosf+0x84>
 800f284:	b003      	add	sp, #12
 800f286:	f85d eb04 	ldr.w	lr, [sp], #4
 800f28a:	f000 bacd 	b.w	800f828 <__kernel_cosf>
 800f28e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f292:	db04      	blt.n	800f29e <cosf+0x2e>
 800f294:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f298:	b003      	add	sp, #12
 800f29a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f29e:	4668      	mov	r0, sp
 800f2a0:	f000 f982 	bl	800f5a8 <__ieee754_rem_pio2f>
 800f2a4:	f000 0003 	and.w	r0, r0, #3
 800f2a8:	2801      	cmp	r0, #1
 800f2aa:	d009      	beq.n	800f2c0 <cosf+0x50>
 800f2ac:	2802      	cmp	r0, #2
 800f2ae:	d010      	beq.n	800f2d2 <cosf+0x62>
 800f2b0:	b9b0      	cbnz	r0, 800f2e0 <cosf+0x70>
 800f2b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2b6:	ed9d 0a00 	vldr	s0, [sp]
 800f2ba:	f000 fab5 	bl	800f828 <__kernel_cosf>
 800f2be:	e7eb      	b.n	800f298 <cosf+0x28>
 800f2c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2c4:	ed9d 0a00 	vldr	s0, [sp]
 800f2c8:	f000 fd84 	bl	800fdd4 <__kernel_sinf>
 800f2cc:	eeb1 0a40 	vneg.f32	s0, s0
 800f2d0:	e7e2      	b.n	800f298 <cosf+0x28>
 800f2d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2d6:	ed9d 0a00 	vldr	s0, [sp]
 800f2da:	f000 faa5 	bl	800f828 <__kernel_cosf>
 800f2de:	e7f5      	b.n	800f2cc <cosf+0x5c>
 800f2e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2e4:	ed9d 0a00 	vldr	s0, [sp]
 800f2e8:	2001      	movs	r0, #1
 800f2ea:	f000 fd73 	bl	800fdd4 <__kernel_sinf>
 800f2ee:	e7d3      	b.n	800f298 <cosf+0x28>
 800f2f0:	3f490fd8 	.word	0x3f490fd8
 800f2f4:	00000000 	.word	0x00000000

0800f2f8 <fmaxf>:
 800f2f8:	b508      	push	{r3, lr}
 800f2fa:	ed2d 8b02 	vpush	{d8}
 800f2fe:	eeb0 8a40 	vmov.f32	s16, s0
 800f302:	eef0 8a60 	vmov.f32	s17, s1
 800f306:	f000 f82d 	bl	800f364 <__fpclassifyf>
 800f30a:	b148      	cbz	r0, 800f320 <fmaxf+0x28>
 800f30c:	eeb0 0a68 	vmov.f32	s0, s17
 800f310:	f000 f828 	bl	800f364 <__fpclassifyf>
 800f314:	b130      	cbz	r0, 800f324 <fmaxf+0x2c>
 800f316:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31e:	dc01      	bgt.n	800f324 <fmaxf+0x2c>
 800f320:	eeb0 8a68 	vmov.f32	s16, s17
 800f324:	eeb0 0a48 	vmov.f32	s0, s16
 800f328:	ecbd 8b02 	vpop	{d8}
 800f32c:	bd08      	pop	{r3, pc}

0800f32e <fminf>:
 800f32e:	b508      	push	{r3, lr}
 800f330:	ed2d 8b02 	vpush	{d8}
 800f334:	eeb0 8a40 	vmov.f32	s16, s0
 800f338:	eef0 8a60 	vmov.f32	s17, s1
 800f33c:	f000 f812 	bl	800f364 <__fpclassifyf>
 800f340:	b148      	cbz	r0, 800f356 <fminf+0x28>
 800f342:	eeb0 0a68 	vmov.f32	s0, s17
 800f346:	f000 f80d 	bl	800f364 <__fpclassifyf>
 800f34a:	b130      	cbz	r0, 800f35a <fminf+0x2c>
 800f34c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f354:	d401      	bmi.n	800f35a <fminf+0x2c>
 800f356:	eeb0 8a68 	vmov.f32	s16, s17
 800f35a:	eeb0 0a48 	vmov.f32	s0, s16
 800f35e:	ecbd 8b02 	vpop	{d8}
 800f362:	bd08      	pop	{r3, pc}

0800f364 <__fpclassifyf>:
 800f364:	ee10 3a10 	vmov	r3, s0
 800f368:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800f36c:	d00d      	beq.n	800f38a <__fpclassifyf+0x26>
 800f36e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800f372:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f376:	d30a      	bcc.n	800f38e <__fpclassifyf+0x2a>
 800f378:	4b07      	ldr	r3, [pc, #28]	; (800f398 <__fpclassifyf+0x34>)
 800f37a:	1e42      	subs	r2, r0, #1
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d908      	bls.n	800f392 <__fpclassifyf+0x2e>
 800f380:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800f384:	4258      	negs	r0, r3
 800f386:	4158      	adcs	r0, r3
 800f388:	4770      	bx	lr
 800f38a:	2002      	movs	r0, #2
 800f38c:	4770      	bx	lr
 800f38e:	2004      	movs	r0, #4
 800f390:	4770      	bx	lr
 800f392:	2003      	movs	r0, #3
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	007ffffe 	.word	0x007ffffe

0800f39c <sinf>:
 800f39c:	ee10 3a10 	vmov	r3, s0
 800f3a0:	b507      	push	{r0, r1, r2, lr}
 800f3a2:	4a1f      	ldr	r2, [pc, #124]	; (800f420 <sinf+0x84>)
 800f3a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	dc07      	bgt.n	800f3bc <sinf+0x20>
 800f3ac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f424 <sinf+0x88>
 800f3b0:	2000      	movs	r0, #0
 800f3b2:	b003      	add	sp, #12
 800f3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3b8:	f000 bd0c 	b.w	800fdd4 <__kernel_sinf>
 800f3bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3c0:	db04      	blt.n	800f3cc <sinf+0x30>
 800f3c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f3c6:	b003      	add	sp, #12
 800f3c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3cc:	4668      	mov	r0, sp
 800f3ce:	f000 f8eb 	bl	800f5a8 <__ieee754_rem_pio2f>
 800f3d2:	f000 0003 	and.w	r0, r0, #3
 800f3d6:	2801      	cmp	r0, #1
 800f3d8:	d00a      	beq.n	800f3f0 <sinf+0x54>
 800f3da:	2802      	cmp	r0, #2
 800f3dc:	d00f      	beq.n	800f3fe <sinf+0x62>
 800f3de:	b9c0      	cbnz	r0, 800f412 <sinf+0x76>
 800f3e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f3e4:	ed9d 0a00 	vldr	s0, [sp]
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	f000 fcf3 	bl	800fdd4 <__kernel_sinf>
 800f3ee:	e7ea      	b.n	800f3c6 <sinf+0x2a>
 800f3f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f3f4:	ed9d 0a00 	vldr	s0, [sp]
 800f3f8:	f000 fa16 	bl	800f828 <__kernel_cosf>
 800f3fc:	e7e3      	b.n	800f3c6 <sinf+0x2a>
 800f3fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800f402:	ed9d 0a00 	vldr	s0, [sp]
 800f406:	2001      	movs	r0, #1
 800f408:	f000 fce4 	bl	800fdd4 <__kernel_sinf>
 800f40c:	eeb1 0a40 	vneg.f32	s0, s0
 800f410:	e7d9      	b.n	800f3c6 <sinf+0x2a>
 800f412:	eddd 0a01 	vldr	s1, [sp, #4]
 800f416:	ed9d 0a00 	vldr	s0, [sp]
 800f41a:	f000 fa05 	bl	800f828 <__kernel_cosf>
 800f41e:	e7f5      	b.n	800f40c <sinf+0x70>
 800f420:	3f490fd8 	.word	0x3f490fd8
 800f424:	00000000 	.word	0x00000000

0800f428 <fmodf>:
 800f428:	b508      	push	{r3, lr}
 800f42a:	ed2d 8b02 	vpush	{d8}
 800f42e:	eef0 8a40 	vmov.f32	s17, s0
 800f432:	eeb0 8a60 	vmov.f32	s16, s1
 800f436:	f000 f835 	bl	800f4a4 <__ieee754_fmodf>
 800f43a:	eef4 8a48 	vcmp.f32	s17, s16
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	d60c      	bvs.n	800f45e <fmodf+0x36>
 800f444:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f464 <fmodf+0x3c>
 800f448:	eeb4 8a68 	vcmp.f32	s16, s17
 800f44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f450:	d105      	bne.n	800f45e <fmodf+0x36>
 800f452:	f7fc fff7 	bl	800c444 <__errno>
 800f456:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f45a:	2321      	movs	r3, #33	; 0x21
 800f45c:	6003      	str	r3, [r0, #0]
 800f45e:	ecbd 8b02 	vpop	{d8}
 800f462:	bd08      	pop	{r3, pc}
 800f464:	00000000 	.word	0x00000000

0800f468 <sqrtf>:
 800f468:	b508      	push	{r3, lr}
 800f46a:	ed2d 8b02 	vpush	{d8}
 800f46e:	eeb0 8a40 	vmov.f32	s16, s0
 800f472:	f000 f9d5 	bl	800f820 <__ieee754_sqrtf>
 800f476:	eeb4 8a48 	vcmp.f32	s16, s16
 800f47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47e:	d60c      	bvs.n	800f49a <sqrtf+0x32>
 800f480:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f4a0 <sqrtf+0x38>
 800f484:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48c:	d505      	bpl.n	800f49a <sqrtf+0x32>
 800f48e:	f7fc ffd9 	bl	800c444 <__errno>
 800f492:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f496:	2321      	movs	r3, #33	; 0x21
 800f498:	6003      	str	r3, [r0, #0]
 800f49a:	ecbd 8b02 	vpop	{d8}
 800f49e:	bd08      	pop	{r3, pc}
 800f4a0:	00000000 	.word	0x00000000

0800f4a4 <__ieee754_fmodf>:
 800f4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a6:	ee10 5a90 	vmov	r5, s1
 800f4aa:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800f4ae:	d009      	beq.n	800f4c4 <__ieee754_fmodf+0x20>
 800f4b0:	ee10 2a10 	vmov	r2, s0
 800f4b4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f4b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f4bc:	da02      	bge.n	800f4c4 <__ieee754_fmodf+0x20>
 800f4be:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f4c2:	dd04      	ble.n	800f4ce <__ieee754_fmodf+0x2a>
 800f4c4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f4c8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ce:	42a3      	cmp	r3, r4
 800f4d0:	dbfc      	blt.n	800f4cc <__ieee754_fmodf+0x28>
 800f4d2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800f4d6:	d105      	bne.n	800f4e4 <__ieee754_fmodf+0x40>
 800f4d8:	4b32      	ldr	r3, [pc, #200]	; (800f5a4 <__ieee754_fmodf+0x100>)
 800f4da:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800f4de:	ed93 0a00 	vldr	s0, [r3]
 800f4e2:	e7f3      	b.n	800f4cc <__ieee754_fmodf+0x28>
 800f4e4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800f4e8:	d13f      	bne.n	800f56a <__ieee754_fmodf+0xc6>
 800f4ea:	0219      	lsls	r1, r3, #8
 800f4ec:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800f4f0:	2900      	cmp	r1, #0
 800f4f2:	dc37      	bgt.n	800f564 <__ieee754_fmodf+0xc0>
 800f4f4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800f4f8:	d13d      	bne.n	800f576 <__ieee754_fmodf+0xd2>
 800f4fa:	0227      	lsls	r7, r4, #8
 800f4fc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800f500:	2f00      	cmp	r7, #0
 800f502:	da35      	bge.n	800f570 <__ieee754_fmodf+0xcc>
 800f504:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800f508:	bfbb      	ittet	lt
 800f50a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f50e:	1a12      	sublt	r2, r2, r0
 800f510:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800f514:	4093      	lsllt	r3, r2
 800f516:	bfa8      	it	ge
 800f518:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800f51c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f520:	bfb5      	itete	lt
 800f522:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f526:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800f52a:	1a52      	sublt	r2, r2, r1
 800f52c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800f530:	bfb8      	it	lt
 800f532:	4094      	lsllt	r4, r2
 800f534:	1a40      	subs	r0, r0, r1
 800f536:	1b1a      	subs	r2, r3, r4
 800f538:	bb00      	cbnz	r0, 800f57c <__ieee754_fmodf+0xd8>
 800f53a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800f53e:	bf38      	it	cc
 800f540:	4613      	movcc	r3, r2
 800f542:	2b00      	cmp	r3, #0
 800f544:	d0c8      	beq.n	800f4d8 <__ieee754_fmodf+0x34>
 800f546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f54a:	db1f      	blt.n	800f58c <__ieee754_fmodf+0xe8>
 800f54c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f550:	db1f      	blt.n	800f592 <__ieee754_fmodf+0xee>
 800f552:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800f556:	317f      	adds	r1, #127	; 0x7f
 800f558:	4333      	orrs	r3, r6
 800f55a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800f55e:	ee00 3a10 	vmov	s0, r3
 800f562:	e7b3      	b.n	800f4cc <__ieee754_fmodf+0x28>
 800f564:	3801      	subs	r0, #1
 800f566:	0049      	lsls	r1, r1, #1
 800f568:	e7c2      	b.n	800f4f0 <__ieee754_fmodf+0x4c>
 800f56a:	15d8      	asrs	r0, r3, #23
 800f56c:	387f      	subs	r0, #127	; 0x7f
 800f56e:	e7c1      	b.n	800f4f4 <__ieee754_fmodf+0x50>
 800f570:	3901      	subs	r1, #1
 800f572:	007f      	lsls	r7, r7, #1
 800f574:	e7c4      	b.n	800f500 <__ieee754_fmodf+0x5c>
 800f576:	15e1      	asrs	r1, r4, #23
 800f578:	397f      	subs	r1, #127	; 0x7f
 800f57a:	e7c3      	b.n	800f504 <__ieee754_fmodf+0x60>
 800f57c:	2a00      	cmp	r2, #0
 800f57e:	da02      	bge.n	800f586 <__ieee754_fmodf+0xe2>
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	3801      	subs	r0, #1
 800f584:	e7d7      	b.n	800f536 <__ieee754_fmodf+0x92>
 800f586:	d0a7      	beq.n	800f4d8 <__ieee754_fmodf+0x34>
 800f588:	0053      	lsls	r3, r2, #1
 800f58a:	e7fa      	b.n	800f582 <__ieee754_fmodf+0xde>
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	3901      	subs	r1, #1
 800f590:	e7d9      	b.n	800f546 <__ieee754_fmodf+0xa2>
 800f592:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800f596:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800f59a:	3182      	adds	r1, #130	; 0x82
 800f59c:	410b      	asrs	r3, r1
 800f59e:	4333      	orrs	r3, r6
 800f5a0:	e7dd      	b.n	800f55e <__ieee754_fmodf+0xba>
 800f5a2:	bf00      	nop
 800f5a4:	080104ec 	.word	0x080104ec

0800f5a8 <__ieee754_rem_pio2f>:
 800f5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5aa:	ee10 6a10 	vmov	r6, s0
 800f5ae:	4b8e      	ldr	r3, [pc, #568]	; (800f7e8 <__ieee754_rem_pio2f+0x240>)
 800f5b0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f5b4:	429d      	cmp	r5, r3
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	eef0 7a40 	vmov.f32	s15, s0
 800f5bc:	4604      	mov	r4, r0
 800f5be:	dc05      	bgt.n	800f5cc <__ieee754_rem_pio2f+0x24>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	ed80 0a00 	vstr	s0, [r0]
 800f5c6:	6043      	str	r3, [r0, #4]
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	e01a      	b.n	800f602 <__ieee754_rem_pio2f+0x5a>
 800f5cc:	4b87      	ldr	r3, [pc, #540]	; (800f7ec <__ieee754_rem_pio2f+0x244>)
 800f5ce:	429d      	cmp	r5, r3
 800f5d0:	dc46      	bgt.n	800f660 <__ieee754_rem_pio2f+0xb8>
 800f5d2:	2e00      	cmp	r6, #0
 800f5d4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f7f0 <__ieee754_rem_pio2f+0x248>
 800f5d8:	4b86      	ldr	r3, [pc, #536]	; (800f7f4 <__ieee754_rem_pio2f+0x24c>)
 800f5da:	f025 050f 	bic.w	r5, r5, #15
 800f5de:	dd1f      	ble.n	800f620 <__ieee754_rem_pio2f+0x78>
 800f5e0:	429d      	cmp	r5, r3
 800f5e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f5e6:	d00e      	beq.n	800f606 <__ieee754_rem_pio2f+0x5e>
 800f5e8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f7f8 <__ieee754_rem_pio2f+0x250>
 800f5ec:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f5f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f5f4:	ed80 0a00 	vstr	s0, [r0]
 800f5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	edc4 7a01 	vstr	s15, [r4, #4]
 800f602:	b007      	add	sp, #28
 800f604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f606:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f7fc <__ieee754_rem_pio2f+0x254>
 800f60a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f800 <__ieee754_rem_pio2f+0x258>
 800f60e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f612:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f61a:	edc0 6a00 	vstr	s13, [r0]
 800f61e:	e7eb      	b.n	800f5f8 <__ieee754_rem_pio2f+0x50>
 800f620:	429d      	cmp	r5, r3
 800f622:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f626:	d00e      	beq.n	800f646 <__ieee754_rem_pio2f+0x9e>
 800f628:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f7f8 <__ieee754_rem_pio2f+0x250>
 800f62c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f630:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f634:	ed80 0a00 	vstr	s0, [r0]
 800f638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f63c:	f04f 30ff 	mov.w	r0, #4294967295
 800f640:	edc4 7a01 	vstr	s15, [r4, #4]
 800f644:	e7dd      	b.n	800f602 <__ieee754_rem_pio2f+0x5a>
 800f646:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f7fc <__ieee754_rem_pio2f+0x254>
 800f64a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f800 <__ieee754_rem_pio2f+0x258>
 800f64e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f652:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f656:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f65a:	edc0 6a00 	vstr	s13, [r0]
 800f65e:	e7eb      	b.n	800f638 <__ieee754_rem_pio2f+0x90>
 800f660:	4b68      	ldr	r3, [pc, #416]	; (800f804 <__ieee754_rem_pio2f+0x25c>)
 800f662:	429d      	cmp	r5, r3
 800f664:	dc72      	bgt.n	800f74c <__ieee754_rem_pio2f+0x1a4>
 800f666:	f000 fbfd 	bl	800fe64 <fabsf>
 800f66a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f808 <__ieee754_rem_pio2f+0x260>
 800f66e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f672:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f67a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f67e:	ee17 0a90 	vmov	r0, s15
 800f682:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f7f0 <__ieee754_rem_pio2f+0x248>
 800f686:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f68a:	281f      	cmp	r0, #31
 800f68c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f7f8 <__ieee754_rem_pio2f+0x250>
 800f690:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f694:	eeb1 6a47 	vneg.f32	s12, s14
 800f698:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f69c:	ee16 2a90 	vmov	r2, s13
 800f6a0:	dc1c      	bgt.n	800f6dc <__ieee754_rem_pio2f+0x134>
 800f6a2:	495a      	ldr	r1, [pc, #360]	; (800f80c <__ieee754_rem_pio2f+0x264>)
 800f6a4:	1e47      	subs	r7, r0, #1
 800f6a6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f6aa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f6ae:	428b      	cmp	r3, r1
 800f6b0:	d014      	beq.n	800f6dc <__ieee754_rem_pio2f+0x134>
 800f6b2:	6022      	str	r2, [r4, #0]
 800f6b4:	ed94 7a00 	vldr	s14, [r4]
 800f6b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f6bc:	2e00      	cmp	r6, #0
 800f6be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6c2:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6c6:	da9c      	bge.n	800f602 <__ieee754_rem_pio2f+0x5a>
 800f6c8:	eeb1 7a47 	vneg.f32	s14, s14
 800f6cc:	eeb1 0a40 	vneg.f32	s0, s0
 800f6d0:	ed84 7a00 	vstr	s14, [r4]
 800f6d4:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6d8:	4240      	negs	r0, r0
 800f6da:	e792      	b.n	800f602 <__ieee754_rem_pio2f+0x5a>
 800f6dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f6e0:	15eb      	asrs	r3, r5, #23
 800f6e2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f6e6:	2d08      	cmp	r5, #8
 800f6e8:	dde3      	ble.n	800f6b2 <__ieee754_rem_pio2f+0x10a>
 800f6ea:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f7fc <__ieee754_rem_pio2f+0x254>
 800f6ee:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f800 <__ieee754_rem_pio2f+0x258>
 800f6f2:	eef0 6a40 	vmov.f32	s13, s0
 800f6f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f6fa:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f6fe:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f702:	eef0 7a40 	vmov.f32	s15, s0
 800f706:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f70a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f70e:	ee15 2a90 	vmov	r2, s11
 800f712:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f716:	1a5b      	subs	r3, r3, r1
 800f718:	2b19      	cmp	r3, #25
 800f71a:	dc04      	bgt.n	800f726 <__ieee754_rem_pio2f+0x17e>
 800f71c:	edc4 5a00 	vstr	s11, [r4]
 800f720:	eeb0 0a66 	vmov.f32	s0, s13
 800f724:	e7c6      	b.n	800f6b4 <__ieee754_rem_pio2f+0x10c>
 800f726:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f810 <__ieee754_rem_pio2f+0x268>
 800f72a:	eeb0 0a66 	vmov.f32	s0, s13
 800f72e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f732:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f736:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f814 <__ieee754_rem_pio2f+0x26c>
 800f73a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f73e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f742:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f746:	ed84 7a00 	vstr	s14, [r4]
 800f74a:	e7b3      	b.n	800f6b4 <__ieee754_rem_pio2f+0x10c>
 800f74c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f750:	db06      	blt.n	800f760 <__ieee754_rem_pio2f+0x1b8>
 800f752:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f756:	edc0 7a01 	vstr	s15, [r0, #4]
 800f75a:	edc0 7a00 	vstr	s15, [r0]
 800f75e:	e733      	b.n	800f5c8 <__ieee754_rem_pio2f+0x20>
 800f760:	15ea      	asrs	r2, r5, #23
 800f762:	3a86      	subs	r2, #134	; 0x86
 800f764:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f768:	ee07 3a90 	vmov	s15, r3
 800f76c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f770:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f818 <__ieee754_rem_pio2f+0x270>
 800f774:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f77c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f780:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f784:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f788:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f78c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f790:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f794:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a0:	edcd 7a05 	vstr	s15, [sp, #20]
 800f7a4:	d11e      	bne.n	800f7e4 <__ieee754_rem_pio2f+0x23c>
 800f7a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ae:	bf14      	ite	ne
 800f7b0:	2302      	movne	r3, #2
 800f7b2:	2301      	moveq	r3, #1
 800f7b4:	4919      	ldr	r1, [pc, #100]	; (800f81c <__ieee754_rem_pio2f+0x274>)
 800f7b6:	9101      	str	r1, [sp, #4]
 800f7b8:	2102      	movs	r1, #2
 800f7ba:	9100      	str	r1, [sp, #0]
 800f7bc:	a803      	add	r0, sp, #12
 800f7be:	4621      	mov	r1, r4
 800f7c0:	f000 f892 	bl	800f8e8 <__kernel_rem_pio2f>
 800f7c4:	2e00      	cmp	r6, #0
 800f7c6:	f6bf af1c 	bge.w	800f602 <__ieee754_rem_pio2f+0x5a>
 800f7ca:	edd4 7a00 	vldr	s15, [r4]
 800f7ce:	eef1 7a67 	vneg.f32	s15, s15
 800f7d2:	edc4 7a00 	vstr	s15, [r4]
 800f7d6:	edd4 7a01 	vldr	s15, [r4, #4]
 800f7da:	eef1 7a67 	vneg.f32	s15, s15
 800f7de:	edc4 7a01 	vstr	s15, [r4, #4]
 800f7e2:	e779      	b.n	800f6d8 <__ieee754_rem_pio2f+0x130>
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	e7e5      	b.n	800f7b4 <__ieee754_rem_pio2f+0x20c>
 800f7e8:	3f490fd8 	.word	0x3f490fd8
 800f7ec:	4016cbe3 	.word	0x4016cbe3
 800f7f0:	3fc90f80 	.word	0x3fc90f80
 800f7f4:	3fc90fd0 	.word	0x3fc90fd0
 800f7f8:	37354443 	.word	0x37354443
 800f7fc:	37354400 	.word	0x37354400
 800f800:	2e85a308 	.word	0x2e85a308
 800f804:	43490f80 	.word	0x43490f80
 800f808:	3f22f984 	.word	0x3f22f984
 800f80c:	080104f4 	.word	0x080104f4
 800f810:	2e85a300 	.word	0x2e85a300
 800f814:	248d3132 	.word	0x248d3132
 800f818:	43800000 	.word	0x43800000
 800f81c:	08010574 	.word	0x08010574

0800f820 <__ieee754_sqrtf>:
 800f820:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f824:	4770      	bx	lr
	...

0800f828 <__kernel_cosf>:
 800f828:	ee10 3a10 	vmov	r3, s0
 800f82c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f830:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f834:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f838:	da05      	bge.n	800f846 <__kernel_cosf+0x1e>
 800f83a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f83e:	ee17 2a90 	vmov	r2, s15
 800f842:	2a00      	cmp	r2, #0
 800f844:	d03d      	beq.n	800f8c2 <__kernel_cosf+0x9a>
 800f846:	ee60 5a00 	vmul.f32	s11, s0, s0
 800f84a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f8c8 <__kernel_cosf+0xa0>
 800f84e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f8cc <__kernel_cosf+0xa4>
 800f852:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800f8d0 <__kernel_cosf+0xa8>
 800f856:	4a1f      	ldr	r2, [pc, #124]	; (800f8d4 <__kernel_cosf+0xac>)
 800f858:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f85c:	4293      	cmp	r3, r2
 800f85e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f8d8 <__kernel_cosf+0xb0>
 800f862:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f866:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800f8dc <__kernel_cosf+0xb4>
 800f86a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f86e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800f8e0 <__kernel_cosf+0xb8>
 800f872:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f876:	eeb0 7a66 	vmov.f32	s14, s13
 800f87a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f87e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f882:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800f886:	ee67 6a25 	vmul.f32	s13, s14, s11
 800f88a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800f88e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f892:	dc04      	bgt.n	800f89e <__kernel_cosf+0x76>
 800f894:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f898:	ee36 0a47 	vsub.f32	s0, s12, s14
 800f89c:	4770      	bx	lr
 800f89e:	4a11      	ldr	r2, [pc, #68]	; (800f8e4 <__kernel_cosf+0xbc>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	bfda      	itte	le
 800f8a4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f8a8:	ee06 3a90 	vmovle	s13, r3
 800f8ac:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800f8b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f8b4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800f8b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f8c0:	4770      	bx	lr
 800f8c2:	eeb0 0a46 	vmov.f32	s0, s12
 800f8c6:	4770      	bx	lr
 800f8c8:	ad47d74e 	.word	0xad47d74e
 800f8cc:	310f74f6 	.word	0x310f74f6
 800f8d0:	3d2aaaab 	.word	0x3d2aaaab
 800f8d4:	3e999999 	.word	0x3e999999
 800f8d8:	b493f27c 	.word	0xb493f27c
 800f8dc:	37d00d01 	.word	0x37d00d01
 800f8e0:	bab60b61 	.word	0xbab60b61
 800f8e4:	3f480000 	.word	0x3f480000

0800f8e8 <__kernel_rem_pio2f>:
 800f8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ec:	ed2d 8b04 	vpush	{d8-d9}
 800f8f0:	b0d9      	sub	sp, #356	; 0x164
 800f8f2:	4688      	mov	r8, r1
 800f8f4:	9002      	str	r0, [sp, #8]
 800f8f6:	49bb      	ldr	r1, [pc, #748]	; (800fbe4 <__kernel_rem_pio2f+0x2fc>)
 800f8f8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800f8fa:	9301      	str	r3, [sp, #4]
 800f8fc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800f900:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800f904:	1e59      	subs	r1, r3, #1
 800f906:	1d13      	adds	r3, r2, #4
 800f908:	db27      	blt.n	800f95a <__kernel_rem_pio2f+0x72>
 800f90a:	f1b2 0b03 	subs.w	fp, r2, #3
 800f90e:	bf48      	it	mi
 800f910:	f102 0b04 	addmi.w	fp, r2, #4
 800f914:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800f918:	1c45      	adds	r5, r0, #1
 800f91a:	00ec      	lsls	r4, r5, #3
 800f91c:	1a47      	subs	r7, r0, r1
 800f91e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800f922:	9403      	str	r4, [sp, #12]
 800f924:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800f928:	eb0a 0c01 	add.w	ip, sl, r1
 800f92c:	ae1c      	add	r6, sp, #112	; 0x70
 800f92e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800f932:	2400      	movs	r4, #0
 800f934:	4564      	cmp	r4, ip
 800f936:	dd12      	ble.n	800f95e <__kernel_rem_pio2f+0x76>
 800f938:	9b01      	ldr	r3, [sp, #4]
 800f93a:	ac1c      	add	r4, sp, #112	; 0x70
 800f93c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f940:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800f944:	f04f 0c00 	mov.w	ip, #0
 800f948:	45d4      	cmp	ip, sl
 800f94a:	dc27      	bgt.n	800f99c <__kernel_rem_pio2f+0xb4>
 800f94c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f950:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800f954:	4627      	mov	r7, r4
 800f956:	2600      	movs	r6, #0
 800f958:	e016      	b.n	800f988 <__kernel_rem_pio2f+0xa0>
 800f95a:	2000      	movs	r0, #0
 800f95c:	e7dc      	b.n	800f918 <__kernel_rem_pio2f+0x30>
 800f95e:	42e7      	cmn	r7, r4
 800f960:	bf5d      	ittte	pl
 800f962:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800f966:	ee07 3a90 	vmovpl	s15, r3
 800f96a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f96e:	eef0 7a47 	vmovmi.f32	s15, s14
 800f972:	ece6 7a01 	vstmia	r6!, {s15}
 800f976:	3401      	adds	r4, #1
 800f978:	e7dc      	b.n	800f934 <__kernel_rem_pio2f+0x4c>
 800f97a:	ecf9 6a01 	vldmia	r9!, {s13}
 800f97e:	ed97 7a00 	vldr	s14, [r7]
 800f982:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f986:	3601      	adds	r6, #1
 800f988:	428e      	cmp	r6, r1
 800f98a:	f1a7 0704 	sub.w	r7, r7, #4
 800f98e:	ddf4      	ble.n	800f97a <__kernel_rem_pio2f+0x92>
 800f990:	eceb 7a01 	vstmia	fp!, {s15}
 800f994:	f10c 0c01 	add.w	ip, ip, #1
 800f998:	3404      	adds	r4, #4
 800f99a:	e7d5      	b.n	800f948 <__kernel_rem_pio2f+0x60>
 800f99c:	ab08      	add	r3, sp, #32
 800f99e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f9a2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800fbf0 <__kernel_rem_pio2f+0x308>
 800f9a6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800fbec <__kernel_rem_pio2f+0x304>
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800f9b0:	4656      	mov	r6, sl
 800f9b2:	00b3      	lsls	r3, r6, #2
 800f9b4:	9305      	str	r3, [sp, #20]
 800f9b6:	ab58      	add	r3, sp, #352	; 0x160
 800f9b8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f9bc:	ac08      	add	r4, sp, #32
 800f9be:	ab44      	add	r3, sp, #272	; 0x110
 800f9c0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800f9c4:	46a4      	mov	ip, r4
 800f9c6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f9ca:	4637      	mov	r7, r6
 800f9cc:	2f00      	cmp	r7, #0
 800f9ce:	f1a0 0004 	sub.w	r0, r0, #4
 800f9d2:	dc4f      	bgt.n	800fa74 <__kernel_rem_pio2f+0x18c>
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f9da:	f000 fa8d 	bl	800fef8 <scalbnf>
 800f9de:	eeb0 8a40 	vmov.f32	s16, s0
 800f9e2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f9e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f9ea:	f000 fa43 	bl	800fe74 <floorf>
 800f9ee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f9f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f9fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fa00:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800fa04:	ee17 9a90 	vmov	r9, s15
 800fa08:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fa0c:	dd44      	ble.n	800fa98 <__kernel_rem_pio2f+0x1b0>
 800fa0e:	f106 3cff 	add.w	ip, r6, #4294967295
 800fa12:	ab08      	add	r3, sp, #32
 800fa14:	f1c5 0e08 	rsb	lr, r5, #8
 800fa18:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fa1c:	fa47 f00e 	asr.w	r0, r7, lr
 800fa20:	4481      	add	r9, r0
 800fa22:	fa00 f00e 	lsl.w	r0, r0, lr
 800fa26:	1a3f      	subs	r7, r7, r0
 800fa28:	f1c5 0007 	rsb	r0, r5, #7
 800fa2c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800fa30:	4107      	asrs	r7, r0
 800fa32:	2f00      	cmp	r7, #0
 800fa34:	dd3f      	ble.n	800fab6 <__kernel_rem_pio2f+0x1ce>
 800fa36:	f04f 0e00 	mov.w	lr, #0
 800fa3a:	f109 0901 	add.w	r9, r9, #1
 800fa3e:	4673      	mov	r3, lr
 800fa40:	4576      	cmp	r6, lr
 800fa42:	dc6b      	bgt.n	800fb1c <__kernel_rem_pio2f+0x234>
 800fa44:	2d00      	cmp	r5, #0
 800fa46:	dd04      	ble.n	800fa52 <__kernel_rem_pio2f+0x16a>
 800fa48:	2d01      	cmp	r5, #1
 800fa4a:	d078      	beq.n	800fb3e <__kernel_rem_pio2f+0x256>
 800fa4c:	2d02      	cmp	r5, #2
 800fa4e:	f000 8081 	beq.w	800fb54 <__kernel_rem_pio2f+0x26c>
 800fa52:	2f02      	cmp	r7, #2
 800fa54:	d12f      	bne.n	800fab6 <__kernel_rem_pio2f+0x1ce>
 800fa56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa5a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fa5e:	b353      	cbz	r3, 800fab6 <__kernel_rem_pio2f+0x1ce>
 800fa60:	4628      	mov	r0, r5
 800fa62:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800fa66:	f000 fa47 	bl	800fef8 <scalbnf>
 800fa6a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fa6e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fa72:	e020      	b.n	800fab6 <__kernel_rem_pio2f+0x1ce>
 800fa74:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fa78:	3f01      	subs	r7, #1
 800fa7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa82:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fa86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fa8a:	ecac 0a01 	vstmia	ip!, {s0}
 800fa8e:	ed90 0a00 	vldr	s0, [r0]
 800fa92:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fa96:	e799      	b.n	800f9cc <__kernel_rem_pio2f+0xe4>
 800fa98:	d105      	bne.n	800faa6 <__kernel_rem_pio2f+0x1be>
 800fa9a:	1e70      	subs	r0, r6, #1
 800fa9c:	ab08      	add	r3, sp, #32
 800fa9e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800faa2:	11ff      	asrs	r7, r7, #7
 800faa4:	e7c5      	b.n	800fa32 <__kernel_rem_pio2f+0x14a>
 800faa6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800faaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800faae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab2:	da31      	bge.n	800fb18 <__kernel_rem_pio2f+0x230>
 800fab4:	2700      	movs	r7, #0
 800fab6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800faba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fabe:	f040 809b 	bne.w	800fbf8 <__kernel_rem_pio2f+0x310>
 800fac2:	1e74      	subs	r4, r6, #1
 800fac4:	46a4      	mov	ip, r4
 800fac6:	2000      	movs	r0, #0
 800fac8:	45d4      	cmp	ip, sl
 800faca:	da4a      	bge.n	800fb62 <__kernel_rem_pio2f+0x27a>
 800facc:	2800      	cmp	r0, #0
 800face:	d07a      	beq.n	800fbc6 <__kernel_rem_pio2f+0x2de>
 800fad0:	ab08      	add	r3, sp, #32
 800fad2:	3d08      	subs	r5, #8
 800fad4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 8081 	beq.w	800fbe0 <__kernel_rem_pio2f+0x2f8>
 800fade:	4628      	mov	r0, r5
 800fae0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fae4:	00a5      	lsls	r5, r4, #2
 800fae6:	f000 fa07 	bl	800fef8 <scalbnf>
 800faea:	aa44      	add	r2, sp, #272	; 0x110
 800faec:	1d2b      	adds	r3, r5, #4
 800faee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800fbf0 <__kernel_rem_pio2f+0x308>
 800faf2:	18d1      	adds	r1, r2, r3
 800faf4:	4622      	mov	r2, r4
 800faf6:	2a00      	cmp	r2, #0
 800faf8:	f280 80ae 	bge.w	800fc58 <__kernel_rem_pio2f+0x370>
 800fafc:	4622      	mov	r2, r4
 800fafe:	2a00      	cmp	r2, #0
 800fb00:	f2c0 80cc 	blt.w	800fc9c <__kernel_rem_pio2f+0x3b4>
 800fb04:	a944      	add	r1, sp, #272	; 0x110
 800fb06:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800fb0a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800fbe8 <__kernel_rem_pio2f+0x300>
 800fb0e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800fb12:	2000      	movs	r0, #0
 800fb14:	1aa1      	subs	r1, r4, r2
 800fb16:	e0b6      	b.n	800fc86 <__kernel_rem_pio2f+0x39e>
 800fb18:	2702      	movs	r7, #2
 800fb1a:	e78c      	b.n	800fa36 <__kernel_rem_pio2f+0x14e>
 800fb1c:	6820      	ldr	r0, [r4, #0]
 800fb1e:	b94b      	cbnz	r3, 800fb34 <__kernel_rem_pio2f+0x24c>
 800fb20:	b118      	cbz	r0, 800fb2a <__kernel_rem_pio2f+0x242>
 800fb22:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800fb26:	6020      	str	r0, [r4, #0]
 800fb28:	2001      	movs	r0, #1
 800fb2a:	f10e 0e01 	add.w	lr, lr, #1
 800fb2e:	3404      	adds	r4, #4
 800fb30:	4603      	mov	r3, r0
 800fb32:	e785      	b.n	800fa40 <__kernel_rem_pio2f+0x158>
 800fb34:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800fb38:	6020      	str	r0, [r4, #0]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	e7f5      	b.n	800fb2a <__kernel_rem_pio2f+0x242>
 800fb3e:	1e74      	subs	r4, r6, #1
 800fb40:	a808      	add	r0, sp, #32
 800fb42:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fb46:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800fb4a:	f10d 0c20 	add.w	ip, sp, #32
 800fb4e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800fb52:	e77e      	b.n	800fa52 <__kernel_rem_pio2f+0x16a>
 800fb54:	1e74      	subs	r4, r6, #1
 800fb56:	a808      	add	r0, sp, #32
 800fb58:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fb5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fb60:	e7f3      	b.n	800fb4a <__kernel_rem_pio2f+0x262>
 800fb62:	ab08      	add	r3, sp, #32
 800fb64:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800fb68:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fb6c:	4318      	orrs	r0, r3
 800fb6e:	e7ab      	b.n	800fac8 <__kernel_rem_pio2f+0x1e0>
 800fb70:	f10c 0c01 	add.w	ip, ip, #1
 800fb74:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800fb78:	2c00      	cmp	r4, #0
 800fb7a:	d0f9      	beq.n	800fb70 <__kernel_rem_pio2f+0x288>
 800fb7c:	9b05      	ldr	r3, [sp, #20]
 800fb7e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fb82:	eb0d 0003 	add.w	r0, sp, r3
 800fb86:	9b01      	ldr	r3, [sp, #4]
 800fb88:	18f4      	adds	r4, r6, r3
 800fb8a:	ab1c      	add	r3, sp, #112	; 0x70
 800fb8c:	1c77      	adds	r7, r6, #1
 800fb8e:	384c      	subs	r0, #76	; 0x4c
 800fb90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb94:	4466      	add	r6, ip
 800fb96:	42be      	cmp	r6, r7
 800fb98:	f6ff af0b 	blt.w	800f9b2 <__kernel_rem_pio2f+0xca>
 800fb9c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800fba0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fba4:	ee07 3a90 	vmov	s15, r3
 800fba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbac:	f04f 0c00 	mov.w	ip, #0
 800fbb0:	ece4 7a01 	vstmia	r4!, {s15}
 800fbb4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800fbb8:	46a1      	mov	r9, r4
 800fbba:	458c      	cmp	ip, r1
 800fbbc:	dd07      	ble.n	800fbce <__kernel_rem_pio2f+0x2e6>
 800fbbe:	ece0 7a01 	vstmia	r0!, {s15}
 800fbc2:	3701      	adds	r7, #1
 800fbc4:	e7e7      	b.n	800fb96 <__kernel_rem_pio2f+0x2ae>
 800fbc6:	9804      	ldr	r0, [sp, #16]
 800fbc8:	f04f 0c01 	mov.w	ip, #1
 800fbcc:	e7d2      	b.n	800fb74 <__kernel_rem_pio2f+0x28c>
 800fbce:	ecfe 6a01 	vldmia	lr!, {s13}
 800fbd2:	ed39 7a01 	vldmdb	r9!, {s14}
 800fbd6:	f10c 0c01 	add.w	ip, ip, #1
 800fbda:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fbde:	e7ec      	b.n	800fbba <__kernel_rem_pio2f+0x2d2>
 800fbe0:	3c01      	subs	r4, #1
 800fbe2:	e775      	b.n	800fad0 <__kernel_rem_pio2f+0x1e8>
 800fbe4:	080108b8 	.word	0x080108b8
 800fbe8:	0801088c 	.word	0x0801088c
 800fbec:	43800000 	.word	0x43800000
 800fbf0:	3b800000 	.word	0x3b800000
 800fbf4:	00000000 	.word	0x00000000
 800fbf8:	9b03      	ldr	r3, [sp, #12]
 800fbfa:	eeb0 0a48 	vmov.f32	s0, s16
 800fbfe:	1a98      	subs	r0, r3, r2
 800fc00:	f000 f97a 	bl	800fef8 <scalbnf>
 800fc04:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800fbec <__kernel_rem_pio2f+0x304>
 800fc08:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc10:	db19      	blt.n	800fc46 <__kernel_rem_pio2f+0x35e>
 800fc12:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800fbf0 <__kernel_rem_pio2f+0x308>
 800fc16:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fc1a:	aa08      	add	r2, sp, #32
 800fc1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc20:	1c74      	adds	r4, r6, #1
 800fc22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc26:	3508      	adds	r5, #8
 800fc28:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fc2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc34:	ee10 3a10 	vmov	r3, s0
 800fc38:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fc3c:	ee17 3a90 	vmov	r3, s15
 800fc40:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fc44:	e74b      	b.n	800fade <__kernel_rem_pio2f+0x1f6>
 800fc46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc4a:	aa08      	add	r2, sp, #32
 800fc4c:	ee10 3a10 	vmov	r3, s0
 800fc50:	4634      	mov	r4, r6
 800fc52:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fc56:	e742      	b.n	800fade <__kernel_rem_pio2f+0x1f6>
 800fc58:	a808      	add	r0, sp, #32
 800fc5a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800fc5e:	9001      	str	r0, [sp, #4]
 800fc60:	ee07 0a90 	vmov	s15, r0
 800fc64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc68:	3a01      	subs	r2, #1
 800fc6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fc6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fc72:	ed61 7a01 	vstmdb	r1!, {s15}
 800fc76:	e73e      	b.n	800faf6 <__kernel_rem_pio2f+0x20e>
 800fc78:	ecfc 6a01 	vldmia	ip!, {s13}
 800fc7c:	ecb6 7a01 	vldmia	r6!, {s14}
 800fc80:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc84:	3001      	adds	r0, #1
 800fc86:	4550      	cmp	r0, sl
 800fc88:	dc01      	bgt.n	800fc8e <__kernel_rem_pio2f+0x3a6>
 800fc8a:	4288      	cmp	r0, r1
 800fc8c:	ddf4      	ble.n	800fc78 <__kernel_rem_pio2f+0x390>
 800fc8e:	a858      	add	r0, sp, #352	; 0x160
 800fc90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc94:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800fc98:	3a01      	subs	r2, #1
 800fc9a:	e730      	b.n	800fafe <__kernel_rem_pio2f+0x216>
 800fc9c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800fc9e:	2a02      	cmp	r2, #2
 800fca0:	dc09      	bgt.n	800fcb6 <__kernel_rem_pio2f+0x3ce>
 800fca2:	2a00      	cmp	r2, #0
 800fca4:	dc2a      	bgt.n	800fcfc <__kernel_rem_pio2f+0x414>
 800fca6:	d043      	beq.n	800fd30 <__kernel_rem_pio2f+0x448>
 800fca8:	f009 0007 	and.w	r0, r9, #7
 800fcac:	b059      	add	sp, #356	; 0x164
 800fcae:	ecbd 8b04 	vpop	{d8-d9}
 800fcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fcb8:	2b03      	cmp	r3, #3
 800fcba:	d1f5      	bne.n	800fca8 <__kernel_rem_pio2f+0x3c0>
 800fcbc:	ab30      	add	r3, sp, #192	; 0xc0
 800fcbe:	442b      	add	r3, r5
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f1a1 0104 	sub.w	r1, r1, #4
 800fccc:	dc51      	bgt.n	800fd72 <__kernel_rem_pio2f+0x48a>
 800fcce:	4621      	mov	r1, r4
 800fcd0:	2901      	cmp	r1, #1
 800fcd2:	f1a2 0204 	sub.w	r2, r2, #4
 800fcd6:	dc5c      	bgt.n	800fd92 <__kernel_rem_pio2f+0x4aa>
 800fcd8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800fcdc:	3304      	adds	r3, #4
 800fcde:	2c01      	cmp	r4, #1
 800fce0:	dc67      	bgt.n	800fdb2 <__kernel_rem_pio2f+0x4ca>
 800fce2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800fce6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800fcea:	2f00      	cmp	r7, #0
 800fcec:	d167      	bne.n	800fdbe <__kernel_rem_pio2f+0x4d6>
 800fcee:	edc8 6a00 	vstr	s13, [r8]
 800fcf2:	ed88 7a01 	vstr	s14, [r8, #4]
 800fcf6:	edc8 7a02 	vstr	s15, [r8, #8]
 800fcfa:	e7d5      	b.n	800fca8 <__kernel_rem_pio2f+0x3c0>
 800fcfc:	aa30      	add	r2, sp, #192	; 0xc0
 800fcfe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800fd02:	4413      	add	r3, r2
 800fd04:	4622      	mov	r2, r4
 800fd06:	2a00      	cmp	r2, #0
 800fd08:	da24      	bge.n	800fd54 <__kernel_rem_pio2f+0x46c>
 800fd0a:	b34f      	cbz	r7, 800fd60 <__kernel_rem_pio2f+0x478>
 800fd0c:	eef1 7a47 	vneg.f32	s15, s14
 800fd10:	edc8 7a00 	vstr	s15, [r8]
 800fd14:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800fd18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd1c:	aa31      	add	r2, sp, #196	; 0xc4
 800fd1e:	2301      	movs	r3, #1
 800fd20:	429c      	cmp	r4, r3
 800fd22:	da20      	bge.n	800fd66 <__kernel_rem_pio2f+0x47e>
 800fd24:	b10f      	cbz	r7, 800fd2a <__kernel_rem_pio2f+0x442>
 800fd26:	eef1 7a67 	vneg.f32	s15, s15
 800fd2a:	edc8 7a01 	vstr	s15, [r8, #4]
 800fd2e:	e7bb      	b.n	800fca8 <__kernel_rem_pio2f+0x3c0>
 800fd30:	aa30      	add	r2, sp, #192	; 0xc0
 800fd32:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800fbf4 <__kernel_rem_pio2f+0x30c>
 800fd36:	4413      	add	r3, r2
 800fd38:	2c00      	cmp	r4, #0
 800fd3a:	da05      	bge.n	800fd48 <__kernel_rem_pio2f+0x460>
 800fd3c:	b10f      	cbz	r7, 800fd42 <__kernel_rem_pio2f+0x45a>
 800fd3e:	eef1 7a67 	vneg.f32	s15, s15
 800fd42:	edc8 7a00 	vstr	s15, [r8]
 800fd46:	e7af      	b.n	800fca8 <__kernel_rem_pio2f+0x3c0>
 800fd48:	ed33 7a01 	vldmdb	r3!, {s14}
 800fd4c:	3c01      	subs	r4, #1
 800fd4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd52:	e7f1      	b.n	800fd38 <__kernel_rem_pio2f+0x450>
 800fd54:	ed73 7a01 	vldmdb	r3!, {s15}
 800fd58:	3a01      	subs	r2, #1
 800fd5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd5e:	e7d2      	b.n	800fd06 <__kernel_rem_pio2f+0x41e>
 800fd60:	eef0 7a47 	vmov.f32	s15, s14
 800fd64:	e7d4      	b.n	800fd10 <__kernel_rem_pio2f+0x428>
 800fd66:	ecb2 7a01 	vldmia	r2!, {s14}
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd70:	e7d6      	b.n	800fd20 <__kernel_rem_pio2f+0x438>
 800fd72:	edd1 7a00 	vldr	s15, [r1]
 800fd76:	edd1 6a01 	vldr	s13, [r1, #4]
 800fd7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fd7e:	3801      	subs	r0, #1
 800fd80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd84:	ed81 7a00 	vstr	s14, [r1]
 800fd88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd8c:	edc1 7a01 	vstr	s15, [r1, #4]
 800fd90:	e799      	b.n	800fcc6 <__kernel_rem_pio2f+0x3de>
 800fd92:	edd2 7a00 	vldr	s15, [r2]
 800fd96:	edd2 6a01 	vldr	s13, [r2, #4]
 800fd9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fd9e:	3901      	subs	r1, #1
 800fda0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fda4:	ed82 7a00 	vstr	s14, [r2]
 800fda8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdac:	edc2 7a01 	vstr	s15, [r2, #4]
 800fdb0:	e78e      	b.n	800fcd0 <__kernel_rem_pio2f+0x3e8>
 800fdb2:	ed33 7a01 	vldmdb	r3!, {s14}
 800fdb6:	3c01      	subs	r4, #1
 800fdb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdbc:	e78f      	b.n	800fcde <__kernel_rem_pio2f+0x3f6>
 800fdbe:	eef1 6a66 	vneg.f32	s13, s13
 800fdc2:	eeb1 7a47 	vneg.f32	s14, s14
 800fdc6:	edc8 6a00 	vstr	s13, [r8]
 800fdca:	ed88 7a01 	vstr	s14, [r8, #4]
 800fdce:	eef1 7a67 	vneg.f32	s15, s15
 800fdd2:	e790      	b.n	800fcf6 <__kernel_rem_pio2f+0x40e>

0800fdd4 <__kernel_sinf>:
 800fdd4:	ee10 3a10 	vmov	r3, s0
 800fdd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fddc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fde0:	da04      	bge.n	800fdec <__kernel_sinf+0x18>
 800fde2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fde6:	ee17 3a90 	vmov	r3, s15
 800fdea:	b35b      	cbz	r3, 800fe44 <__kernel_sinf+0x70>
 800fdec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fdf0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fe48 <__kernel_sinf+0x74>
 800fdf4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fe4c <__kernel_sinf+0x78>
 800fdf8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fdfc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800fe50 <__kernel_sinf+0x7c>
 800fe00:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe04:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fe54 <__kernel_sinf+0x80>
 800fe08:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fe0c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fe58 <__kernel_sinf+0x84>
 800fe10:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fe14:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe18:	b930      	cbnz	r0, 800fe28 <__kernel_sinf+0x54>
 800fe1a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800fe5c <__kernel_sinf+0x88>
 800fe1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fe22:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fe26:	4770      	bx	lr
 800fe28:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fe2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fe30:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fe34:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fe38:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fe60 <__kernel_sinf+0x8c>
 800fe3c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fe40:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	2f2ec9d3 	.word	0x2f2ec9d3
 800fe4c:	b2d72f34 	.word	0xb2d72f34
 800fe50:	3638ef1b 	.word	0x3638ef1b
 800fe54:	b9500d01 	.word	0xb9500d01
 800fe58:	3c088889 	.word	0x3c088889
 800fe5c:	be2aaaab 	.word	0xbe2aaaab
 800fe60:	3e2aaaab 	.word	0x3e2aaaab

0800fe64 <fabsf>:
 800fe64:	ee10 3a10 	vmov	r3, s0
 800fe68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe6c:	ee00 3a10 	vmov	s0, r3
 800fe70:	4770      	bx	lr
	...

0800fe74 <floorf>:
 800fe74:	ee10 3a10 	vmov	r3, s0
 800fe78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fe7c:	3a7f      	subs	r2, #127	; 0x7f
 800fe7e:	2a16      	cmp	r2, #22
 800fe80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe84:	dc2a      	bgt.n	800fedc <floorf+0x68>
 800fe86:	2a00      	cmp	r2, #0
 800fe88:	da11      	bge.n	800feae <floorf+0x3a>
 800fe8a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800feec <floorf+0x78>
 800fe8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9a:	dd05      	ble.n	800fea8 <floorf+0x34>
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	da23      	bge.n	800fee8 <floorf+0x74>
 800fea0:	4a13      	ldr	r2, [pc, #76]	; (800fef0 <floorf+0x7c>)
 800fea2:	2900      	cmp	r1, #0
 800fea4:	bf18      	it	ne
 800fea6:	4613      	movne	r3, r2
 800fea8:	ee00 3a10 	vmov	s0, r3
 800feac:	4770      	bx	lr
 800feae:	4911      	ldr	r1, [pc, #68]	; (800fef4 <floorf+0x80>)
 800feb0:	4111      	asrs	r1, r2
 800feb2:	420b      	tst	r3, r1
 800feb4:	d0fa      	beq.n	800feac <floorf+0x38>
 800feb6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800feec <floorf+0x78>
 800feba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800febe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec6:	ddef      	ble.n	800fea8 <floorf+0x34>
 800fec8:	2b00      	cmp	r3, #0
 800feca:	bfbe      	ittt	lt
 800fecc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800fed0:	fa40 f202 	asrlt.w	r2, r0, r2
 800fed4:	189b      	addlt	r3, r3, r2
 800fed6:	ea23 0301 	bic.w	r3, r3, r1
 800feda:	e7e5      	b.n	800fea8 <floorf+0x34>
 800fedc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fee0:	d3e4      	bcc.n	800feac <floorf+0x38>
 800fee2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fee6:	4770      	bx	lr
 800fee8:	2300      	movs	r3, #0
 800feea:	e7dd      	b.n	800fea8 <floorf+0x34>
 800feec:	7149f2ca 	.word	0x7149f2ca
 800fef0:	bf800000 	.word	0xbf800000
 800fef4:	007fffff 	.word	0x007fffff

0800fef8 <scalbnf>:
 800fef8:	ee10 3a10 	vmov	r3, s0
 800fefc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ff00:	d025      	beq.n	800ff4e <scalbnf+0x56>
 800ff02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ff06:	d302      	bcc.n	800ff0e <scalbnf+0x16>
 800ff08:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff0c:	4770      	bx	lr
 800ff0e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff12:	d122      	bne.n	800ff5a <scalbnf+0x62>
 800ff14:	4b2a      	ldr	r3, [pc, #168]	; (800ffc0 <scalbnf+0xc8>)
 800ff16:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ffc4 <scalbnf+0xcc>
 800ff1a:	4298      	cmp	r0, r3
 800ff1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff20:	db16      	blt.n	800ff50 <scalbnf+0x58>
 800ff22:	ee10 3a10 	vmov	r3, s0
 800ff26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ff2a:	3a19      	subs	r2, #25
 800ff2c:	4402      	add	r2, r0
 800ff2e:	2afe      	cmp	r2, #254	; 0xfe
 800ff30:	dd15      	ble.n	800ff5e <scalbnf+0x66>
 800ff32:	ee10 3a10 	vmov	r3, s0
 800ff36:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ffc8 <scalbnf+0xd0>
 800ff3a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ffcc <scalbnf+0xd4>
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	eeb0 7a67 	vmov.f32	s14, s15
 800ff44:	bfb8      	it	lt
 800ff46:	eef0 7a66 	vmovlt.f32	s15, s13
 800ff4a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ff4e:	4770      	bx	lr
 800ff50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ffd0 <scalbnf+0xd8>
 800ff54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff58:	4770      	bx	lr
 800ff5a:	0dd2      	lsrs	r2, r2, #23
 800ff5c:	e7e6      	b.n	800ff2c <scalbnf+0x34>
 800ff5e:	2a00      	cmp	r2, #0
 800ff60:	dd06      	ble.n	800ff70 <scalbnf+0x78>
 800ff62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff66:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ff6a:	ee00 3a10 	vmov	s0, r3
 800ff6e:	4770      	bx	lr
 800ff70:	f112 0f16 	cmn.w	r2, #22
 800ff74:	da1a      	bge.n	800ffac <scalbnf+0xb4>
 800ff76:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff7a:	4298      	cmp	r0, r3
 800ff7c:	ee10 3a10 	vmov	r3, s0
 800ff80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff84:	dd0a      	ble.n	800ff9c <scalbnf+0xa4>
 800ff86:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ffc8 <scalbnf+0xd0>
 800ff8a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ffcc <scalbnf+0xd4>
 800ff8e:	eef0 7a40 	vmov.f32	s15, s0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	bf18      	it	ne
 800ff96:	eeb0 0a47 	vmovne.f32	s0, s14
 800ff9a:	e7db      	b.n	800ff54 <scalbnf+0x5c>
 800ff9c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ffd0 <scalbnf+0xd8>
 800ffa0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ffd4 <scalbnf+0xdc>
 800ffa4:	eef0 7a40 	vmov.f32	s15, s0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	e7f3      	b.n	800ff94 <scalbnf+0x9c>
 800ffac:	3219      	adds	r2, #25
 800ffae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffb2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ffb6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ffd8 <scalbnf+0xe0>
 800ffba:	ee07 3a10 	vmov	s14, r3
 800ffbe:	e7c4      	b.n	800ff4a <scalbnf+0x52>
 800ffc0:	ffff3cb0 	.word	0xffff3cb0
 800ffc4:	4c000000 	.word	0x4c000000
 800ffc8:	7149f2ca 	.word	0x7149f2ca
 800ffcc:	f149f2ca 	.word	0xf149f2ca
 800ffd0:	0da24260 	.word	0x0da24260
 800ffd4:	8da24260 	.word	0x8da24260
 800ffd8:	33000000 	.word	0x33000000

0800ffdc <_init>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	bf00      	nop
 800ffe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe2:	bc08      	pop	{r3}
 800ffe4:	469e      	mov	lr, r3
 800ffe6:	4770      	bx	lr

0800ffe8 <_fini>:
 800ffe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffea:	bf00      	nop
 800ffec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffee:	bc08      	pop	{r3}
 800fff0:	469e      	mov	lr, r3
 800fff2:	4770      	bx	lr
