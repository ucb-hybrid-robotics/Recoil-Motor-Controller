
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  080102d8  080102d8  000202d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bac  08010bac  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010bac  08010bac  00020bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bb4  08010bb4  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bb4  08010bb4  00020bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bb8  08010bb8  00020bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010bbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  200001fc  08010db8  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  08010db8  00030830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027fee  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000488d  00000000  00000000  0005821a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec0  00000000  00000000  0005caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc8  00000000  00000000  0005e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a88  00000000  00000000  00060630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d39  00000000  00000000  000850b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9e62  00000000  00000000  000a8df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192c53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009840  00000000  00000000  00192ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080102bc 	.word	0x080102bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	080102bc 	.word	0x080102bc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:
extern TIM_HandleTypeDef htim15;
extern UART_HandleTypeDef huart3;

MotorController controller;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000fae:	f000 f8a5 	bl	80010fc <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000fba:	f002 fd2d 	bl	8003a18 <MotorController_handleCANMessage>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000440 	.word	0x20000440
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d104      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x1a>
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
    MotorController_updateCommutation(&controller, &hadc1);
 8000fe0:	4914      	ldr	r1, [pc, #80]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fe4:	f002 f8e0 	bl	80031a8 <MotorController_updateCommutation>
    #endif
  }
  else if (htim == &htim4) {
    MotorController_triggerPositionUpdate(&controller);
  }
}
 8000fe8:	e01d      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim2) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d112      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
    if (controller.mode != MODE_IDLE && controller.mode != MODE_CALIBRATION) {
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d014      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ffe:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001002:	2b05      	cmp	r3, #5
 8001004:	d00f      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
      MotorController_setMode(&controller, MODE_DISABLED);
 8001006:	2100      	movs	r1, #0
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800100a:	f001 fe9b 	bl	8002d44 <MotorController_setMode>
      controller.error = ERROR_HEARTBEAT_TIMEOUT;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001010:	2204      	movs	r2, #4
 8001012:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 8001016:	e006      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim4) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
    MotorController_triggerPositionUpdate(&controller);
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001022:	f002 f939 	bl	8003298 <MotorController_triggerPositionUpdate>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200005bc 	.word	0x200005bc
 8001034:	20000340 	.word	0x20000340
 8001038:	20000218 	.word	0x20000218
 800103c:	20000608 	.word	0x20000608
 8001040:	200006a0 	.word	0x200006a0

08001044 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);

  // SPI CS pin control
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f007 fa27 	bl	80084a8 <HAL_GPIO_WritePin>
  MotorController_updatePositionReading(&controller);
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_TxRxCpltCallback+0x2c>)
 800105c:	f002 f9c4 	bl	80033e8 <MotorController_updatePositionReading>
  /* ====== Start user APP code ====== */
//  controller.position_controller.position_target = APP_getUserPot() * M_PI;

  /* ====== End user APP code ====== */

  MotorController_updatePositionController(&controller);
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8001062:	f002 fa11 	bl	8003488 <MotorController_updatePositionController>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000218 	.word	0x20000218

08001074 <APP_init>:
  // so putting it here
  // can also comment out this line and just power cycle to update the flash settings
  HAL_FLASH_OB_Launch();
}

void APP_init() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  #if INITIAL_PROG
  APP_initFlashOption();
  #endif

  MotorController_init(&controller);
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <APP_init+0x18>)
 800107a:	f001 fcff 	bl	8002a7c <MotorController_init>

  MotorController_setMode(&controller, MODE_IDLE);
 800107e:	2101      	movs	r1, #1
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <APP_init+0x18>)
 8001082:	f001 fe5f 	bl	8002d44 <MotorController_setMode>
//  MotorController_setMode(&controller, MODE_TORQUE);
//  controller.position_controller.torque_target = 0;
//  HAL_Delay(1000);
//  MotorController_setMode(&controller, MODE_POSITION);
//  controller.position_controller.position_target = 0;
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000218 	.word	0x20000218

08001090 <APP_main>:


void APP_main() {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b0a2      	sub	sp, #136	; 0x88
 8001094:	af02      	add	r7, sp, #8
  MotorController_updateService(&controller);
 8001096:	4816      	ldr	r0, [pc, #88]	; (80010f0 <APP_main+0x60>)
 8001098:	f002 fa36 	bl	8003508 <MotorController_updateService>


  char str[128];

  sprintf(str, "pos:%f\tvbus:%f\r\n",
      controller.position_controller.position_measured,
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <APP_main+0x60>)
 800109e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  sprintf(str, "pos:%f\tvbus:%f\r\n",
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa78 	bl	8000598 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
      controller.powerstage.bus_voltage_measured);
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <APP_main+0x60>)
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  sprintf(str, "pos:%f\tvbus:%f\r\n",
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa71 	bl	8000598 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4638      	mov	r0, r7
 80010bc:	e9cd 2300 	strd	r2, r3, [sp]
 80010c0:	4622      	mov	r2, r4
 80010c2:	462b      	mov	r3, r5
 80010c4:	490b      	ldr	r1, [pc, #44]	; (80010f4 <APP_main+0x64>)
 80010c6:	f00b ffc9 	bl	800d05c <siprintf>
//      controller.position_controller.velocity_limit,
//      controller.position_controller.torque_setpoint * 1000,
//      controller.position_controller.torque_measured * 1000);


  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f8a7 	bl	8000220 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4639      	mov	r1, r7
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <APP_main+0x68>)
 80010de:	f00a fd06 	bl	800baee <HAL_UART_Transmit>
  HAL_Delay(5);
 80010e2:	2005      	movs	r0, #5
 80010e4:	f004 faf6 	bl	80056d4 <HAL_Delay>
}
 80010e8:	bf00      	nop
 80010ea:	3780      	adds	r7, #128	; 0x80
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	20000218 	.word	0x20000218
 80010f4:	080102d8 	.word	0x080102d8
 80010f8:	20000784 	.word	0x20000784

080010fc <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3308      	adds	r3, #8
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f006 f989 	bl	8007428 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf14      	ite	ne
 8001122:	2301      	movne	r3, #1
 8001124:	2300      	moveq	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <CAN_getRxFrame+0x3c>
 8001134:	2201      	movs	r2, #1
 8001136:	e000      	b.n	800113a <CAN_getRxFrame+0x3e>
 8001138:	2200      	movs	r2, #0
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001144:	d04c      	beq.n	80011e0 <CAN_getRxFrame+0xe4>
 8001146:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800114a:	d84d      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 800114c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001150:	d042      	beq.n	80011d8 <CAN_getRxFrame+0xdc>
 8001152:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001156:	d847      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 8001158:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800115c:	d038      	beq.n	80011d0 <CAN_getRxFrame+0xd4>
 800115e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001162:	d841      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d02e      	beq.n	80011c8 <CAN_getRxFrame+0xcc>
 800116a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116e:	d83b      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 8001170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001174:	d024      	beq.n	80011c0 <CAN_getRxFrame+0xc4>
 8001176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800117a:	d835      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 800117c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001180:	d01a      	beq.n	80011b8 <CAN_getRxFrame+0xbc>
 8001182:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001186:	d82f      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 8001188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800118c:	d010      	beq.n	80011b0 <CAN_getRxFrame+0xb4>
 800118e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001192:	d829      	bhi.n	80011e8 <CAN_getRxFrame+0xec>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <CAN_getRxFrame+0xa4>
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d004      	beq.n	80011a8 <CAN_getRxFrame+0xac>
 800119e:	e023      	b.n	80011e8 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	80da      	strh	r2, [r3, #6]
 80011a6:	e023      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	80da      	strh	r2, [r3, #6]
 80011ae:	e01f      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	80da      	strh	r2, [r3, #6]
 80011b6:	e01b      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2203      	movs	r2, #3
 80011bc:	80da      	strh	r2, [r3, #6]
 80011be:	e017      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2204      	movs	r2, #4
 80011c4:	80da      	strh	r2, [r3, #6]
 80011c6:	e013      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2205      	movs	r2, #5
 80011cc:	80da      	strh	r2, [r3, #6]
 80011ce:	e00f      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2206      	movs	r2, #6
 80011d4:	80da      	strh	r2, [r3, #6]
 80011d6:	e00b      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2207      	movs	r2, #7
 80011dc:	80da      	strh	r2, [r3, #6]
 80011de:	e007      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2208      	movs	r2, #8
 80011e4:	80da      	strh	r2, [r3, #6]
 80011e6:	e003      	b.n	80011f0 <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	80da      	strh	r2, [r3, #6]
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <CAN_putTxFrame+0x1c>
 8001210:	2300      	movs	r3, #0
 8001212:	e001      	b.n	8001218 <CAN_putTxFrame+0x20>
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	795b      	ldrb	r3, [r3, #5]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <CAN_putTxFrame+0x2e>
 8001222:	2300      	movs	r3, #0
 8001224:	e001      	b.n	800122a <CAN_putTxFrame+0x32>
 8001226:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800122a:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	88db      	ldrh	r3, [r3, #6]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d838      	bhi.n	80012a6 <CAN_putTxFrame+0xae>
 8001234:	a201      	add	r2, pc, #4	; (adr r2, 800123c <CAN_putTxFrame+0x44>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	08001261 	.word	0x08001261
 8001240:	08001267 	.word	0x08001267
 8001244:	0800126f 	.word	0x0800126f
 8001248:	08001277 	.word	0x08001277
 800124c:	0800127f 	.word	0x0800127f
 8001250:	08001287 	.word	0x08001287
 8001254:	0800128f 	.word	0x0800128f
 8001258:	08001297 	.word	0x08001297
 800125c:	0800129f 	.word	0x0800129f
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	e021      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 8001266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	e01d      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	e019      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 8001276:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	e015      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 800127e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e011      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 8001286:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	e00d      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 800128e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	e009      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 8001296:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e005      	b.n	80012aa <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 800129e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	e001      	b.n	80012aa <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80012aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80012ae:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f103 0208 	add.w	r2, r3, #8
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f006 f867 	bl	80073a0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <clampf>:

static inline int32_t min(int32_t a, int32_t b) {
  return a < b ? a : b;
}

static inline float clampf(float value, float min, float max) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80012e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ea:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 80012ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd01      	ble.n	8001304 <clampf+0x28>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	e00b      	b.n	800131c <clampf+0x40>
 8001304:	ed97 7a03 	vldr	s14, [r7, #12]
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	d501      	bpl.n	800131a <clampf+0x3e>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	e000      	b.n	800131c <clampf+0x40>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	ee07 3a90 	vmov	s15, r3
}
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <CurrentController_init>:

#include "current_controller.h"

void CurrentController_init(CurrentController *controller) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  controller->current_filter_alpha = 0.2;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <CurrentController_init+0x44>)
 800133c:	601a      	str	r2, [r3, #0]
//
//  controller->i_d_kp = 30.;
//  controller->i_d_ki = 0.01;

  // M6C12 setting
  controller->i_q_kp = 10.;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <CurrentController_init+0x48>)
 8001342:	605a      	str	r2, [r3, #4]
  controller->i_q_ki = 0.003;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a0d      	ldr	r2, [pc, #52]	; (800137c <CurrentController_init+0x4c>)
 8001348:	609a      	str	r2, [r3, #8]

  controller->i_d_kp = 10.;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <CurrentController_init+0x48>)
 800134e:	60da      	str	r2, [r3, #12]
  controller->i_d_ki = 0.003;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <CurrentController_init+0x4c>)
 8001354:	611a      	str	r2, [r3, #16]

  controller->i_q_measured = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	64da      	str	r2, [r3, #76]	; 0x4c
  controller->i_d_measured = 0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	3e4ccccd 	.word	0x3e4ccccd
 8001378:	41200000 	.word	0x41200000
 800137c:	3b449ba6 	.word	0x3b449ba6

08001380 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6178      	str	r0, [r7, #20]
 8001388:	460b      	mov	r3, r1
 800138a:	ed87 0a03 	vstr	s0, [r7, #12]
 800138e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001392:	ed87 1a01 	vstr	s2, [r7, #4]
 8001396:	74fb      	strb	r3, [r7, #19]
  FOC_clarkTransform(
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	edd3 6a07 	vldr	s13, [r3, #28]
 80013b6:	eeb0 1a66 	vmov.f32	s2, s13
 80013ba:	eef0 0a47 	vmov.f32	s1, s14
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	4610      	mov	r0, r2
 80013c4:	f000 fba6 	bl	8001b14 <FOC_clarkTransform>
    controller->i_c_measured);

  float i_q;
  float i_d;

  FOC_parkTransform(
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80013d4:	f107 021c 	add.w	r2, r7, #28
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	edd7 1a02 	vldr	s3, [r7, #8]
 80013e0:	ed97 1a03 	vldr	s2, [r7, #12]
 80013e4:	eef0 0a47 	vmov.f32	s1, s14
 80013e8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fbc6 	bl	8001b80 <FOC_parkTransform>
    &i_d,
    controller->i_alpha_measured,
    controller->i_beta_measured,
    sin_theta, cos_theta);

  controller->i_q_measured = controller->current_filter_alpha * (i_q - controller->i_q_measured);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	edd7 6a08 	vldr	s13, [r7, #32]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001404:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  controller->i_d_measured = controller->current_filter_alpha * (i_d - controller->i_d_measured);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	edd7 6a07 	vldr	s13, [r7, #28]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001422:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  if (mode != MODE_IQD_OVERRIDE) {
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	2b23      	cmp	r3, #35	; 0x23
 8001434:	d04a      	beq.n	80014cc <CurrentController_update+0x14c>
    controller->i_q_setpoint = controller->i_q_target - controller->i_q_measured;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    controller->i_d_setpoint = controller->i_d_target - controller->i_d_measured;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_q_ki * controller->i_q_setpoint, -5, 5);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	edd3 6a02 	vldr	s13, [r3, #8]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_q_integrator = clampf(
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147c:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001480:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f7ff ff28 	bl	80012dc <clampf>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    controller->i_d_integrator = clampf(
        controller->i_d_integrator + controller->i_d_ki * controller->i_d_setpoint, -5, 5);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	edd3 6a04 	vldr	s13, [r3, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_d_integrator = clampf(
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80014b4:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f7ff ff0e 	bl	80012dc <clampf>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 80014ca:	e007      	b.n	80014dc <CurrentController_update+0x15c>
  }
  else {
    controller->i_q_integrator = 0;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->i_d_integrator = 0;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (mode != MODE_VQD_OVERRIDE) {
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	2b22      	cmp	r3, #34	; 0x22
 80014e0:	d01f      	beq.n	8001522 <CurrentController_update+0x1a2>
    controller->v_q_setpoint =
        controller->i_q_kp * controller->i_q_setpoint + controller->i_q_integrator;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80014ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_q_setpoint =
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    controller->v_d_setpoint =
        controller->i_d_kp * controller->i_d_setpoint + controller->i_d_integrator;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	ed93 7a03 	vldr	s14, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800150e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_d_setpoint =
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  }

  // clamp voltage
  if (v_bus > 0) {
 8001522:	edd7 7a01 	vldr	s15, [r7, #4]
 8001526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dd53      	ble.n	80015d8 <CurrentController_update+0x258>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15;
 8001530:	edd7 7a01 	vldr	s15, [r7, #4]
 8001534:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001538:	ee17 0a90 	vmov	r0, s15
 800153c:	f7ff f82c 	bl	8000598 <__aeabi_f2d>
 8001540:	a343      	add	r3, pc, #268	; (adr r3, 8001650 <CurrentController_update+0x2d0>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f87f 	bl	8000648 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb51 	bl	8000bf8 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_norm = (
        (controller->v_q_setpoint * controller->v_q_setpoint)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (controller->v_d_setpoint * controller->v_d_setpoint)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float v_norm = (
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        );
    if (v_norm > v_max_sq) {
 8001582:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001586:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800158a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dd21      	ble.n	80015d8 <CurrentController_update+0x258>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 8001594:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001598:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	eef0 7ae7 	vabs.f32	s15, s15
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f00e f8ce 	bl	800f748 <sqrtf>
 80015ac:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      controller->v_q_setpoint *= k;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80015b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
      controller->v_d_setpoint *= k;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80015ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
  }

  if (mode != MODE_VALPHABETA_OVERRIDE && mode != MODE_CALIBRATION) {
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	2b21      	cmp	r3, #33	; 0x21
 80015dc:	d019      	beq.n	8001612 <CurrentController_update+0x292>
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d016      	beq.n	8001612 <CurrentController_update+0x292>
    // calibration mode needs to override v_alpha_setpoint and v_beta_setpoint
    FOC_invParkTransform(
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80015fc:	edd7 1a02 	vldr	s3, [r7, #8]
 8001600:	ed97 1a03 	vldr	s2, [r7, #12]
 8001604:	eef0 0a47 	vmov.f32	s1, s14
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	4610      	mov	r0, r2
 800160e:	f000 faec 	bl	8001bea <FOC_invParkTransform>
      controller->v_q_setpoint,
      controller->v_d_setpoint,
      sin_theta, cos_theta);
  }

  if (mode != MODE_VABC_OVERRIDE) {
 8001612:	7cfb      	ldrb	r3, [r7, #19]
 8001614:	2b20      	cmp	r3, #32
 8001616:	d014      	beq.n	8001642 <CurrentController_update+0x2c2>
    FOC_invClarkSVPWM(
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f103 0020 	add.w	r0, r3, #32
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001636:	eef0 0a47 	vmov.f32	s1, s14
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	f000 fb09 	bl	8001c54 <FOC_invClarkSVPWM>
      &controller->v_b_setpoint,
      &controller->v_c_setpoint,
      controller->v_alpha_setpoint,
      controller->v_beta_setpoint);
  }
}
 8001642:	bf00      	nop
 8001644:	3730      	adds	r7, #48	; 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	66666666 	.word	0x66666666
 8001654:	3ff26666 	.word	0x3ff26666

08001658 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8001662:	eddf 0a15 	vldr	s1, [pc, #84]	; 80016b8 <wrapTo2Pi+0x60>
 8001666:	ed97 0a01 	vldr	s0, [r7, #4]
 800166a:	f00e f84d 	bl	800f708 <fmodf>
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 8001672:	edd7 7a01 	vldr	s15, [r7, #4]
 8001676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	db01      	blt.n	8001684 <wrapTo2Pi+0x2c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	e00e      	b.n	80016a2 <wrapTo2Pi+0x4a>
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7fe ff87 	bl	8000598 <__aeabi_f2d>
 800168a:	a309      	add	r3, pc, #36	; (adr r3, 80016b0 <wrapTo2Pi+0x58>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fe24 	bl	80002dc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	ee07 3a90 	vmov	s15, r3
}
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	54442d18 	.word	0x54442d18
 80016b4:	401921fb 	.word	0x401921fb
 80016b8:	40c90fdb 	.word	0x40c90fdb

080016bc <getParity>:
 * If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number.
 * If the count of 1s in a given set of bits is already even, the parity bit's value is 0.
 *
 * @return true if the number of ones in the data package is even, else false.
 */
uint16_t getParity(uint16_t data) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 8;              // example for 8-bit (this line scales it up to 16 bit)
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4053      	eors	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	4053      	eors	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	4053      	eors	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4053      	eors	r3, r2
 80016f4:	80fb      	strh	r3, [r7, #6]
  return data & 1;                // if lsb of data is 0 -> data is even. if lsb of data is 1 -> data is odd.
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b29b      	uxth	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <Encoder_init>:


void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim) {
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  encoder->hspi = hspi;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	601a      	str	r2, [r3, #0]
  encoder->htim = htim;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	605a      	str	r2, [r3, #4]

  encoder->cpr = 1U << 14;  // 14 bit precision
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172a:	819a      	strh	r2, [r3, #12]
  encoder->direction = -1;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	739a      	strb	r2, [r3, #14]

  encoder->position_offset = 0;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	611a      	str	r2, [r3, #16]

  encoder->filter_bandwidth = 100;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <Encoder_init+0x6c>)
 800173e:	615a      	str	r2, [r3, #20]

  encoder->filter_integral = 0;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	621a      	str	r2, [r3, #32]

  encoder->position_reading = 0;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
  encoder->position = 0;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
  encoder->velocity = 0;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	639a      	str	r2, [r3, #56]	; 0x38

  encoder->dt = 0.1;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <Encoder_init+0x70>)
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

  encoder->n_rotations = 0;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	42c80000 	.word	0x42c80000
 800177c:	3dcccccd 	.word	0x3dcccccd

08001780 <Encoder_setFilterBandwidth>:

void Encoder_setFilterBandwidth(Encoder *encoder, float bandwidth) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	ed87 0a00 	vstr	s0, [r7]
//  encoder->filter_bandwidth = bandwidth;
  encoder->filter_bandwidth = 50;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <Encoder_setFilterBandwidth+0x78>)
 8001790:	615a      	str	r2, [r3, #20]
  float w3db = (1. / 8000.) * 2 * M_PI * encoder->filter_bandwidth;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fefe 	bl	8000598 <__aeabi_f2d>
 800179c:	a314      	add	r3, pc, #80	; (adr r3, 80017f0 <Encoder_setFilterBandwidth+0x70>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff51 	bl	8000648 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff fa23 	bl	8000bf8 <__aeabi_d2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]
  encoder->filter_k_p = .5 * (2 * w3db);
 80017b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a06 	vstr	s15, [r3, #24]
  encoder->filter_k_i = .5 * (w3db * w3db);
 80017cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	b68b71c3 	.word	0xb68b71c3
 80017f4:	3f49bc65 	.word	0x3f49bc65
 80017f8:	42480000 	.word	0x42480000

080017fc <Encoder_triggerUpdate>:

void Encoder_triggerUpdate(Encoder *encoder) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  encoder->spi_tx_buffer = 0x3FFF;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800180a:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= 1 << 14;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	891b      	ldrh	r3, [r3, #8]
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	891b      	ldrh	r3, [r3, #8]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff4c 	bl	80016bc <getParity>
 8001824:	4603      	mov	r3, r0
 8001826:	03d9      	lsls	r1, r3, #15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	891b      	ldrh	r3, [r3, #8]
 800182c:	b21a      	sxth	r2, r3
 800182e:	b20b      	sxth	r3, r1
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	811a      	strh	r2, [r3, #8]

  // SPI CS pin control
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f006 fe30 	bl	80084a8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_IT(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f103 0108 	add.w	r1, r3, #8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f103 020a 	add.w	r2, r3, #10
 8001858:	2301      	movs	r3, #1
 800185a:	f007 ffb3 	bl	80097c4 <HAL_SPI_TransmitReceive_IT>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <Encoder_update>:

void Encoder_update(Encoder *encoder) {
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  encoder->dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 1000000.;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001880:	ee17 0a90 	vmov	r0, s15
 8001884:	f7fe fe88 	bl	8000598 <__aeabi_f2d>
 8001888:	a389      	add	r3, pc, #548	; (adr r3, 8001ab0 <Encoder_update+0x248>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7ff f805 	bl	800089c <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f9ad 	bl	8000bf8 <__aeabi_d2f>
 800189e:	4602      	mov	r2, r0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  float dt = 1 / 4000.;
 80018ae:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <Encoder_update+0x240>)
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

  int16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF) - (encoder->cpr / 2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	895b      	ldrh	r3, [r3, #10]
 80018b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	899b      	ldrh	r3, [r3, #12]
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	847b      	strh	r3, [r7, #34]	; 0x22

  // handle multi-rotation crossing
  int16_t reading_delta = encoder->position_reading - reading;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	843b      	strh	r3, [r7, #32]
  if (abs(reading_delta) > 0.75 * encoder->cpr) {
 80018da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bfb8      	it	lt
 80018e2:	425b      	neglt	r3, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe44 	bl	8000574 <__aeabi_i2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	899b      	ldrh	r3, [r3, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe3d 	bl	8000574 <__aeabi_i2d>
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <Encoder_update+0x244>)
 8001900:	f7fe fea2 	bl	8000648 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff f92c 	bl	8000b68 <__aeabi_dcmpgt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <Encoder_update+0xc8>
    encoder->n_rotations += (reading_delta > 0) ? -1 : 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800191e:	2a00      	cmp	r2, #0
 8001920:	dd02      	ble.n	8001928 <Encoder_update+0xc0>
 8001922:	f04f 32ff 	mov.w	r2, #4294967295
 8001926:	e000      	b.n	800192a <Encoder_update+0xc2>
 8001928:	2201      	movs	r2, #1
 800192a:	441a      	add	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  encoder->position_reading = reading;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
  float position_measured = (encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001944:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	899b      	ldrh	r3, [r3, #12]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800195c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	ee17 0a90 	vmov	r0, s15
 8001968:	f7fe fe16 	bl	8000598 <__aeabi_f2d>
 800196c:	a34a      	add	r3, pc, #296	; (adr r3, 8001a98 <Encoder_update+0x230>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fe69 	bl	8000648 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
      + encoder->n_rotations * 2 * M_PI
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdf5 	bl	8000574 <__aeabi_i2d>
 800198a:	a345      	add	r3, pc, #276	; (adr r3, 8001aa0 <Encoder_update+0x238>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fe5a 	bl	8000648 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fc9e 	bl	80002dc <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4614      	mov	r4, r2
 80019a6:	461d      	mov	r5, r3
      + encoder->position_offset);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdf3 	bl	8000598 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc8f 	bl	80002dc <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
  float position_measured = (encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI)
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f917 	bl	8000bf8 <__aeabi_d2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	61fb      	str	r3, [r7, #28]
  float position_prev = encoder->position;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d2:	61bb      	str	r3, [r7, #24]
  float position_error = position_measured - position_prev;
 80019d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	edc7 7a05 	vstr	s15, [r7, #20]

  encoder->filter_integral += encoder->filter_k_i * position_error;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80019f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edc3 7a08 	vstr	s15, [r3, #32]

  float position_tune = encoder->filter_k_p * position_error + encoder->filter_integral;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	edc7 7a04 	vstr	s15, [r7, #16]

  encoder->position = position_prev + position_tune;
 8001a1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // subtract the offset to get "true" revolution
  encoder->position_relative = wrapTo2Pi(encoder->position - encoder->position_offset);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f7ff fe08 	bl	8001658 <wrapTo2Pi>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  float delta_position = encoder->position - position_prev;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a60:	edc7 7a03 	vstr	s15, [r7, #12]
  if (encoder->dt > 0) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	dc00      	bgt.n	8001a76 <Encoder_update+0x20e>
    encoder->velocity = (delta_position / encoder->dt);
  }
}
 8001a74:	e009      	b.n	8001a8a <Encoder_update+0x222>
    encoder->velocity = (delta_position / encoder->dt);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bdb0      	pop	{r4, r5, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	54442d18 	.word	0x54442d18
 8001a9c:	401921fb 	.word	0x401921fb
 8001aa0:	54442d18 	.word	0x54442d18
 8001aa4:	400921fb 	.word	0x400921fb
 8001aa8:	3983126f 	.word	0x3983126f
 8001aac:	3fe80000 	.word	0x3fe80000
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	412e8480 	.word	0x412e8480

08001ab8 <Encoder_getRelativePosition>:

void Encoder_setOffset(Encoder *encoder, float offset) {
  encoder->position_offset = offset;
}

float Encoder_getRelativePosition(Encoder *encoder) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return encoder->position_relative;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	ee07 3a90 	vmov	s15, r3
}
 8001ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <Encoder_getPosition>:

float Encoder_getPosition(Encoder *encoder) {
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  return encoder->position;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	ee07 3a90 	vmov	s15, r3
}
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <Encoder_getVelocity>:

float Encoder_getVelocity(Encoder *encoder) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return encoder->velocity;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	ee07 3a90 	vmov	s15, r3
}
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <FOC_clarkTransform>:
 *      Author: TK
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6178      	str	r0, [r7, #20]
 8001b1c:	6139      	str	r1, [r7, #16]
 8001b1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b22:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b26:	ed87 1a01 	vstr	s2, [r7, #4]
  *i_alpha  = (1.f / 3.f)         * (2.f * i_a - i_b - i_c);
 8001b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001b78 <FOC_clarkTransform+0x64>
 8001b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
  *i_beta   = (1.f / sqrtf(3.f))  * (i_b - i_c);
 8001b50:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001b7c <FOC_clarkTransform+0x68>
 8001b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	edc3 7a00 	vstr	s15, [r3]
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	3eaaaaab 	.word	0x3eaaaaab
 8001b7c:	3f13cd3a 	.word	0x3f13cd3a

08001b80 <FOC_parkTransform>:

void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6178      	str	r0, [r7, #20]
 8001b88:	6139      	str	r1, [r7, #16]
 8001b8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b92:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b96:	edc7 1a00 	vstr	s3, [r7]
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001b9a:	ed97 7a00 	vldr	s14, [r7]
 8001b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8001bbc:	ed97 7a00 	vldr	s14, [r7]
 8001bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	edc3 7a00 	vstr	s15, [r3]
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <FOC_invParkTransform>:

void FOC_invParkTransform(float *v_alpha, float *v_beta, float v_q, float v_d, float sin_theta, float cos_theta) {
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6178      	str	r0, [r7, #20]
 8001bf2:	6139      	str	r1, [r7, #16]
 8001bf4:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bf8:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bfc:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c00:	edc7 1a00 	vstr	s3, [r7]
  *v_alpha  = -(sin_theta * v_q) + (cos_theta * v_d);
 8001c04:	ed97 7a00 	vldr	s14, [r7]
 8001c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	edc3 7a00 	vstr	s15, [r3]
  *v_beta   =  (cos_theta * v_q) + (sin_theta * v_d);
 8001c26:	ed97 7a00 	vldr	s14, [r7]
 8001c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c32:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	edc3 7a00 	vstr	s15, [r3]
}
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <FOC_invClarkSVPWM>:

void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	ed2d 8b02 	vpush	{d8}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6178      	str	r0, [r7, #20]
 8001c60:	6139      	str	r1, [r7, #16]
 8001c62:	60fa      	str	r2, [r7, #12]
 8001c64:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c68:	edc7 0a01 	vstr	s1, [r7, #4]
  float v_a_phase = v_alpha;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 8001c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c74:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001c78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c80:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001d44 <FOC_invClarkSVPWM+0xf0>
 8001c84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	edc7 7a08 	vstr	s15, [r7, #32]
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 8001c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c94:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001d44 <FOC_invClarkSVPWM+0xf0>
 8001ca4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	edc7 7a07 	vstr	s15, [r7, #28]

  float v_neutral = .5f * (fmaxf(fmaxf(v_a_phase, v_b_phase), v_c_phase) + fminf(fminf(v_a_phase, v_b_phase), v_c_phase));
 8001cb0:	edd7 0a08 	vldr	s1, [r7, #32]
 8001cb4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001cb8:	f00d fc8e 	bl	800f5d8 <fmaxf>
 8001cbc:	eef0 7a40 	vmov.f32	s15, s0
 8001cc0:	edd7 0a07 	vldr	s1, [r7, #28]
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	f00d fc86 	bl	800f5d8 <fmaxf>
 8001ccc:	eeb0 8a40 	vmov.f32	s16, s0
 8001cd0:	edd7 0a08 	vldr	s1, [r7, #32]
 8001cd4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001cd8:	f00d fc99 	bl	800f60e <fminf>
 8001cdc:	eef0 7a40 	vmov.f32	s15, s0
 8001ce0:	edd7 0a07 	vldr	s1, [r7, #28]
 8001ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce8:	f00d fc91 	bl	800f60e <fminf>
 8001cec:	eef0 7a40 	vmov.f32	s15, s0
 8001cf0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001cf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfc:	edc7 7a06 	vstr	s15, [r7, #24]

  *v_a = v_a_phase - v_neutral;
 8001d00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	edc3 7a00 	vstr	s15, [r3]
  *v_b = v_b_phase - v_neutral;
 8001d12:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	edc3 7a00 	vstr	s15, [r3]
  *v_c = v_c_phase - v_neutral;
 8001d24:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	edc3 7a00 	vstr	s15, [r3]
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	ecbd 8b02 	vpop	{d8}
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	3f5db3d7 	.word	0x3f5db3d7

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4c:	f003 fc51 	bl	80055f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d50:	f000 f825 	bl	8001d9e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d54:	f000 fda0 	bl	8002898 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d58:	f000 f86c 	bl	8001e34 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001d5c:	f000 f9a8 	bl	80020b0 <MX_FDCAN1_Init>
  MX_OPAMP1_Init();
 8001d60:	f000 f9ec 	bl	800213c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001d64:	f000 fa18 	bl	8002198 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001d68:	f000 fa44 	bl	80021f4 <MX_OPAMP3_Init>
  MX_SPI1_Init();
 8001d6c:	f000 fa70 	bl	8002250 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d70:	f000 faac 	bl	80022cc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001d74:	f000 fd42 	bl	80027fc <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001d78:	f000 f902 	bl	8001f80 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001d7c:	f000 fb7e 	bl	800247c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d80:	f000 fc30 	bl	80025e4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001d84:	f000 fc7c 	bl	8002680 <MX_TIM6_Init>
  MX_CORDIC_Init();
 8001d88:	f000 f97e 	bl	8002088 <MX_CORDIC_Init>
  MX_TIM3_Init();
 8001d8c:	f000 fbc4 	bl	8002518 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001d90:	f000 fcac 	bl	80026ec <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8001d94:	f7ff f96e 	bl	8001074 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8001d98:	f7ff f97a 	bl	8001090 <APP_main>
  {
 8001d9c:	e7fc      	b.n	8001d98 <main+0x50>

08001d9e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b094      	sub	sp, #80	; 0x50
 8001da2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	2238      	movs	r2, #56	; 0x38
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00a fce3 	bl	800c778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f006 fc8b 	bl	80086dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd0:	2340      	movs	r3, #64	; 0x40
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001de0:	2314      	movs	r3, #20
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df0:	f107 0318 	add.w	r3, r7, #24
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 fd15 	bl	8008824 <HAL_RCC_OscConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e00:	f000 fdee 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e04:	230f      	movs	r3, #15
 8001e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f007 f819 	bl	8008e54 <HAL_RCC_ClockConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e28:	f000 fdda 	bl	80029e0 <Error_Handler>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3750      	adds	r7, #80	; 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b092      	sub	sp, #72	; 0x48
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e46:	463b      	mov	r3, r7
 8001e48:	223c      	movs	r2, #60	; 0x3c
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f00a fc93 	bl	800c778 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e5a:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e74:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb2:	482f      	ldr	r0, [pc, #188]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001eb4:	f003 fcde 	bl	8005874 <HAL_ADC_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ebe:	f000 fd8f 	bl	80029e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4828      	ldr	r0, [pc, #160]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001ece:	f004 fe03 	bl	8006ad8 <HAL_ADCEx_MultiModeConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001ed8:	f000 fd82 	bl	80029e0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <MX_ADC1_Init+0x140>)
 8001ede:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001ee0:	2309      	movs	r3, #9
 8001ee2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001ee8:	237f      	movs	r3, #127	; 0x7f
 8001eea:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001eec:	2304      	movs	r3, #4
 8001eee:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4814      	ldr	r0, [pc, #80]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001f1e:	f004 f8fb 	bl	8006118 <HAL_ADCEx_InjectedConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001f28:	f000 fd5a 	bl	80029e0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_ADC1_Init+0x144>)
 8001f2e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001f30:	f240 130f 	movw	r3, #271	; 0x10f
 8001f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480d      	ldr	r0, [pc, #52]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001f3c:	f004 f8ec 	bl	8006118 <HAL_ADCEx_InjectedConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001f46:	f000 fd4b 	bl	80029e0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_ADC1_Init+0x148>)
 8001f4c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001f4e:	f240 2315 	movw	r3, #533	; 0x215
 8001f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_ADC1_Init+0x13c>)
 8001f5a:	f004 f8dd 	bl	8006118 <HAL_ADCEx_InjectedConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001f64:	f000 fd3c 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3748      	adds	r7, #72	; 0x48
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000340 	.word	0x20000340
 8001f74:	b6902000 	.word	0xb6902000
 8001f78:	04300002 	.word	0x04300002
 8001f7c:	2e300800 	.word	0x2e300800

08001f80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b090      	sub	sp, #64	; 0x40
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	223c      	movs	r2, #60	; 0x3c
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00a fbf3 	bl	800c778 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f92:	4b39      	ldr	r3, [pc, #228]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001f94:	4a39      	ldr	r2, [pc, #228]	; (800207c <MX_ADC2_Init+0xfc>)
 8001f96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001f9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fb2:	4b31      	ldr	r3, [pc, #196]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fba:	2208      	movs	r2, #8
 8001fbc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001fca:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fe2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ff0:	4821      	ldr	r0, [pc, #132]	; (8002078 <MX_ADC2_Init+0xf8>)
 8001ff2:	f003 fc3f 	bl	8005874 <HAL_ADC_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001ffc:	f000 fcf0 	bl	80029e0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP2;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_ADC2_Init+0x100>)
 8002002:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002004:	2309      	movs	r3, #9
 8002006:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800200c:	237f      	movs	r3, #127	; 0x7f
 800200e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002010:	2304      	movs	r3, #4
 8002012:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002018:	2302      	movs	r3, #2
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <MX_ADC2_Init+0xf8>)
 8002042:	f004 f869 	bl	8006118 <HAL_ADCEx_InjectedConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800204c:	f000 fcc8 	bl	80029e0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_ADC2_Init+0x104>)
 8002052:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002054:	f240 130f 	movw	r3, #271	; 0x10f
 8002058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <MX_ADC2_Init+0xf8>)
 8002060:	f004 f85a 	bl	8006118 <HAL_ADCEx_InjectedConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800206a:	f000 fcb9 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	3740      	adds	r7, #64	; 0x40
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003ac 	.word	0x200003ac
 800207c:	50000100 	.word	0x50000100
 8002080:	c3290000 	.word	0xc3290000
 8002084:	cb8c0000 	.word	0xcb8c0000

08002088 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_CORDIC_Init+0x20>)
 800208e:	4a07      	ldr	r2, [pc, #28]	; (80020ac <MX_CORDIC_Init+0x24>)
 8002090:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_CORDIC_Init+0x20>)
 8002094:	f004 fdc4 	bl	8006c20 <HAL_CORDIC_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800209e:	f000 fc9f 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000418 	.word	0x20000418
 80020ac:	40020c00 	.word	0x40020c00

080020b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <MX_FDCAN1_Init+0x88>)
 80020b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020da:	2200      	movs	r2, #0
 80020dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020e0:	2210      	movs	r2, #16
 80020e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <MX_FDCAN1_Init+0x84>)
 80020fe:	2201      	movs	r2, #1
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_FDCAN1_Init+0x84>)
 8002104:	2201      	movs	r2, #1
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_FDCAN1_Init+0x84>)
 800210a:	2201      	movs	r2, #1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_FDCAN1_Init+0x84>)
 8002110:	2200      	movs	r2, #0
 8002112:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_FDCAN1_Init+0x84>)
 8002116:	2200      	movs	r2, #0
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_FDCAN1_Init+0x84>)
 800211c:	2200      	movs	r2, #0
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_FDCAN1_Init+0x84>)
 8002122:	f004 ff61 	bl	8006fe8 <HAL_FDCAN_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800212c:	f000 fc58 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000440 	.word	0x20000440
 8002138:	40006400 	.word	0x40006400

0800213c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_OPAMP1_Init+0x54>)
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <MX_OPAMP1_Init+0x58>)
 8002144:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MX_OPAMP1_Init+0x54>)
 8002148:	2200      	movs	r2, #0
 800214a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_OPAMP1_Init+0x54>)
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_OPAMP1_Init+0x54>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <MX_OPAMP1_Init+0x54>)
 800215a:	2201      	movs	r2, #1
 800215c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_OPAMP1_Init+0x54>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <MX_OPAMP1_Init+0x54>)
 8002166:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_OPAMP1_Init+0x54>)
 800216e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_OPAMP1_Init+0x54>)
 8002176:	2200      	movs	r2, #0
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_OPAMP1_Init+0x54>)
 800217c:	f006 f9ac 	bl	80084d8 <HAL_OPAMP_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002186:	f000 fc2b 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200004a4 	.word	0x200004a4
 8002194:	40010300 	.word	0x40010300

08002198 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_OPAMP2_Init+0x54>)
 800219e:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <MX_OPAMP2_Init+0x58>)
 80021a0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021ca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_OPAMP2_Init+0x54>)
 80021d8:	f006 f97e 	bl	80084d8 <HAL_OPAMP_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80021e2:	f000 fbfd 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200004e0 	.word	0x200004e0
 80021f0:	40010304 	.word	0x40010304

080021f4 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <MX_OPAMP3_Init+0x54>)
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <MX_OPAMP3_Init+0x58>)
 80021fc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <MX_OPAMP3_Init+0x54>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002204:	4b10      	ldr	r3, [pc, #64]	; (8002248 <MX_OPAMP3_Init+0x54>)
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <MX_OPAMP3_Init+0x54>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <MX_OPAMP3_Init+0x54>)
 8002212:	2201      	movs	r2, #1
 8002214:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_OPAMP3_Init+0x54>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_OPAMP3_Init+0x54>)
 800221e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <MX_OPAMP3_Init+0x54>)
 8002226:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_OPAMP3_Init+0x54>)
 800222e:	2200      	movs	r2, #0
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_OPAMP3_Init+0x54>)
 8002234:	f006 f950 	bl	80084d8 <HAL_OPAMP_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800223e:	f000 fbcf 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000051c 	.word	0x2000051c
 800224c:	40010308 	.word	0x40010308

08002250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <MX_SPI1_Init+0x78>)
 8002258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MX_SPI1_Init+0x74>)
 800225c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002260:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <MX_SPI1_Init+0x74>)
 800226a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800226e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002278:	2201      	movs	r2, #1
 800227a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_SPI1_Init+0x74>)
 800227e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002282:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002286:	2218      	movs	r2, #24
 8002288:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_SPI1_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_SPI1_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_SPI1_Init+0x74>)
 800229e:	2207      	movs	r2, #7
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_SPI1_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_SPI1_Init+0x74>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_SPI1_Init+0x74>)
 80022b0:	f007 f9dc 	bl	800966c <HAL_SPI_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022ba:	f000 fb91 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000558 	.word	0x20000558
 80022c8:	40013000 	.word	0x40013000

080022cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b09c      	sub	sp, #112	; 0x70
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
 80022fc:	615a      	str	r2, [r3, #20]
 80022fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2234      	movs	r2, #52	; 0x34
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f00a fa36 	bl	800c778 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <MX_TIM1_Init+0x1a8>)
 800230e:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <MX_TIM1_Init+0x1ac>)
 8002310:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002318:	4b56      	ldr	r3, [pc, #344]	; (8002474 <MX_TIM1_Init+0x1a8>)
 800231a:	2220      	movs	r2, #32
 800231c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800231e:	4b55      	ldr	r3, [pc, #340]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002320:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002324:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b53      	ldr	r3, [pc, #332]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800232c:	4b51      	ldr	r3, [pc, #324]	; (8002474 <MX_TIM1_Init+0x1a8>)
 800232e:	2201      	movs	r2, #1
 8002330:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b50      	ldr	r3, [pc, #320]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002338:	484e      	ldr	r0, [pc, #312]	; (8002474 <MX_TIM1_Init+0x1a8>)
 800233a:	f007 fecd 	bl	800a0d8 <HAL_TIM_Base_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002344:	f000 fb4c 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800234e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002352:	4619      	mov	r1, r3
 8002354:	4847      	ldr	r0, [pc, #284]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002356:	f008 fbcf 	bl	800aaf8 <HAL_TIM_ConfigClockSource>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002360:	f000 fb3e 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002364:	4843      	ldr	r0, [pc, #268]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002366:	f007 ffdb 	bl	800a320 <HAL_TIM_PWM_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002370:	f000 fb36 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002374:	2370      	movs	r3, #112	; 0x70
 8002376:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002384:	4619      	mov	r1, r3
 8002386:	483b      	ldr	r0, [pc, #236]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002388:	f009 f9d4 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002392:	f000 fb25 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002396:	2360      	movs	r3, #96	; 0x60
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023b6:	2200      	movs	r2, #0
 80023b8:	4619      	mov	r1, r3
 80023ba:	482e      	ldr	r0, [pc, #184]	; (8002474 <MX_TIM1_Init+0x1a8>)
 80023bc:	f008 fa88 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023c6:	f000 fb0b 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ce:	2204      	movs	r2, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4828      	ldr	r0, [pc, #160]	; (8002474 <MX_TIM1_Init+0x1a8>)
 80023d4:	f008 fa7c 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80023de:	f000 faff 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023e6:	2208      	movs	r2, #8
 80023e8:	4619      	mov	r1, r3
 80023ea:	4822      	ldr	r0, [pc, #136]	; (8002474 <MX_TIM1_Init+0x1a8>)
 80023ec:	f008 fa70 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80023f6:	f000 faf3 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.Pulse = 3998;
 80023fa:	f640 739e 	movw	r3, #3998	; 0xf9e
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002404:	220c      	movs	r2, #12
 8002406:	4619      	mov	r1, r3
 8002408:	481a      	ldr	r0, [pc, #104]	; (8002474 <MX_TIM1_Init+0x1a8>)
 800240a:	f008 fa61 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002414:	f000 fae4 	bl	80029e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002430:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800243e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4807      	ldr	r0, [pc, #28]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002456:	f009 f9ef 	bl	800b838 <HAL_TIMEx_ConfigBreakDeadTime>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8002460:	f000 fabe 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <MX_TIM1_Init+0x1a8>)
 8002466:	f002 fe51 	bl	800510c <HAL_TIM_MspPostInit>

}
 800246a:	bf00      	nop
 800246c:	3770      	adds	r7, #112	; 0x70
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200005bc 	.word	0x200005bc
 8002478:	40012c00 	.word	0x40012c00

0800247c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <MX_TIM2_Init+0x98>)
 800249c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <MX_TIM2_Init+0x98>)
 80024a4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80024a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_TIM2_Init+0x98>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_TIM2_Init+0x98>)
 80024b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80024b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_TIM2_Init+0x98>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_TIM2_Init+0x98>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024c4:	4813      	ldr	r0, [pc, #76]	; (8002514 <MX_TIM2_Init+0x98>)
 80024c6:	f007 fe07 	bl	800a0d8 <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80024d0:	f000 fa86 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4619      	mov	r1, r3
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <MX_TIM2_Init+0x98>)
 80024e2:	f008 fb09 	bl	800aaf8 <HAL_TIM_ConfigClockSource>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80024ec:	f000 fa78 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024f0:	2320      	movs	r3, #32
 80024f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_TIM2_Init+0x98>)
 80024fe:	f009 f919 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002508:	f000 fa6a 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000608 	.word	0x20000608

08002518 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252a:	463b      	mov	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
 8002538:	615a      	str	r2, [r3, #20]
 800253a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <MX_TIM3_Init+0xc4>)
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <MX_TIM3_Init+0xc8>)
 8002540:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <MX_TIM3_Init+0xc4>)
 8002544:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002548:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <MX_TIM3_Init+0xc4>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_TIM3_Init+0xc4>)
 8002552:	f242 720f 	movw	r2, #9999	; 0x270f
 8002556:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <MX_TIM3_Init+0xc4>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <MX_TIM3_Init+0xc4>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002564:	481d      	ldr	r0, [pc, #116]	; (80025dc <MX_TIM3_Init+0xc4>)
 8002566:	f007 fedb 	bl	800a320 <HAL_TIM_PWM_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002570:	f000 fa36 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4816      	ldr	r0, [pc, #88]	; (80025dc <MX_TIM3_Init+0xc4>)
 8002584:	f009 f8d6 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800258e:	f000 fa27 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002592:	2360      	movs	r3, #96	; 0x60
 8002594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800259a:	2302      	movs	r3, #2
 800259c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025a2:	463b      	mov	r3, r7
 80025a4:	2200      	movs	r2, #0
 80025a6:	4619      	mov	r1, r3
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <MX_TIM3_Init+0xc4>)
 80025aa:	f008 f991 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80025b4:	f000 fa14 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	2204      	movs	r2, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <MX_TIM3_Init+0xc4>)
 80025c0:	f008 f986 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80025ca:	f000 fa09 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025ce:	4803      	ldr	r0, [pc, #12]	; (80025dc <MX_TIM3_Init+0xc4>)
 80025d0:	f002 fd9c 	bl	800510c <HAL_TIM_MspPostInit>

}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000654 	.word	0x20000654
 80025e0:	40000400 	.word	0x40000400

080025e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MX_TIM4_Init+0x94>)
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <MX_TIM4_Init+0x98>)
 8002606:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <MX_TIM4_Init+0x94>)
 800260a:	2213      	movs	r2, #19
 800260c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_TIM4_Init+0x94>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_TIM4_Init+0x94>)
 8002616:	f240 32e7 	movw	r2, #999	; 0x3e7
 800261a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MX_TIM4_Init+0x94>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <MX_TIM4_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002628:	4813      	ldr	r0, [pc, #76]	; (8002678 <MX_TIM4_Init+0x94>)
 800262a:	f007 fd55 	bl	800a0d8 <HAL_TIM_Base_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002634:	f000 f9d4 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	4619      	mov	r1, r3
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <MX_TIM4_Init+0x94>)
 8002646:	f008 fa57 	bl	800aaf8 <HAL_TIM_ConfigClockSource>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002650:	f000 f9c6 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002654:	2320      	movs	r3, #32
 8002656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_TIM4_Init+0x94>)
 8002662:	f009 f867 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800266c:	f000 f9b8 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200006a0 	.word	0x200006a0
 800267c:	40000800 	.word	0x40000800

08002680 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_TIM6_Init+0x64>)
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <MX_TIM6_Init+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <MX_TIM6_Init+0x64>)
 8002698:	229f      	movs	r2, #159	; 0x9f
 800269a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_TIM6_Init+0x64>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <MX_TIM6_Init+0x64>)
 80026a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_TIM6_Init+0x64>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026b0:	480c      	ldr	r0, [pc, #48]	; (80026e4 <MX_TIM6_Init+0x64>)
 80026b2:	f007 fd11 	bl	800a0d8 <HAL_TIM_Base_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80026bc:	f000 f990 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_TIM6_Init+0x64>)
 80026ce:	f009 f831 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80026d8:	f000 f982 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200006ec 	.word	0x200006ec
 80026e8:	40001000 	.word	0x40001000

080026ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b098      	sub	sp, #96	; 0x60
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2234      	movs	r2, #52	; 0x34
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f00a f82d 	bl	800c778 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <MX_TIM15_Init+0x108>)
 8002720:	4a35      	ldr	r2, [pc, #212]	; (80027f8 <MX_TIM15_Init+0x10c>)
 8002722:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15999;
 8002724:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <MX_TIM15_Init+0x108>)
 8002726:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800272a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <MX_TIM15_Init+0x108>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <MX_TIM15_Init+0x108>)
 8002734:	f242 720f 	movw	r2, #9999	; 0x270f
 8002738:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <MX_TIM15_Init+0x108>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <MX_TIM15_Init+0x108>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <MX_TIM15_Init+0x108>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800274c:	4829      	ldr	r0, [pc, #164]	; (80027f4 <MX_TIM15_Init+0x108>)
 800274e:	f007 fde7 	bl	800a320 <HAL_TIM_PWM_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8002758:	f000 f942 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002768:	4619      	mov	r1, r3
 800276a:	4822      	ldr	r0, [pc, #136]	; (80027f4 <MX_TIM15_Init+0x108>)
 800276c:	f008 ffe2 	bl	800b734 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8002776:	f000 f933 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277a:	2360      	movs	r3, #96	; 0x60
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002782:	2302      	movs	r3, #2
 8002784:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002786:	2300      	movs	r3, #0
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002796:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800279a:	2200      	movs	r2, #0
 800279c:	4619      	mov	r1, r3
 800279e:	4815      	ldr	r0, [pc, #84]	; (80027f4 <MX_TIM15_Init+0x108>)
 80027a0:	f008 f896 	bl	800a8d0 <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80027aa:	f000 f919 	bl	80029e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4807      	ldr	r0, [pc, #28]	; (80027f4 <MX_TIM15_Init+0x108>)
 80027d6:	f009 f82f 	bl	800b838 <HAL_TIMEx_ConfigBreakDeadTime>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80027e0:	f000 f8fe 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80027e4:	4803      	ldr	r0, [pc, #12]	; (80027f4 <MX_TIM15_Init+0x108>)
 80027e6:	f002 fc91 	bl	800510c <HAL_TIM_MspPostInit>

}
 80027ea:	bf00      	nop
 80027ec:	3760      	adds	r7, #96	; 0x60
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000738 	.word	0x20000738
 80027f8:	40014000 	.word	0x40014000

080027fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <MX_USART3_UART_Init+0x94>)
 8002804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <MX_USART3_UART_Init+0x98>)
 800280a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <MX_USART3_UART_Init+0x90>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <MX_USART3_UART_Init+0x90>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002820:	220c      	movs	r2, #12
 8002822:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <MX_USART3_UART_Init+0x90>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002830:	4b16      	ldr	r3, [pc, #88]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800283c:	4b13      	ldr	r3, [pc, #76]	; (800288c <MX_USART3_UART_Init+0x90>)
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002842:	4812      	ldr	r0, [pc, #72]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002844:	f009 f903 	bl	800ba4e <HAL_UART_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800284e:	f000 f8c7 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002852:	2100      	movs	r1, #0
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002856:	f009 fe9b 	bl	800c590 <HAL_UARTEx_SetTxFifoThreshold>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002860:	f000 f8be 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002864:	2100      	movs	r1, #0
 8002866:	4809      	ldr	r0, [pc, #36]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002868:	f009 fed0 	bl	800c60c <HAL_UARTEx_SetRxFifoThreshold>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002872:	f000 f8b5 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_USART3_UART_Init+0x90>)
 8002878:	f009 fe51 	bl	800c51e <HAL_UARTEx_DisableFifoMode>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002882:	f000 f8ad 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000784 	.word	0x20000784
 8002890:	40004800 	.word	0x40004800
 8002894:	000f4240 	.word	0x000f4240

08002898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	4a42      	ldr	r2, [pc, #264]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028cc:	f043 0320 	orr.w	r3, r3, #32
 80028d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d2:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ea:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <MX_GPIO_Init+0x13c>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002902:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <MX_GPIO_Init+0x13c>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002914:	4830      	ldr	r0, [pc, #192]	; (80029d8 <MX_GPIO_Init+0x140>)
 8002916:	f005 fdc7 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002924:	f005 fdc0 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	482b      	ldr	r0, [pc, #172]	; (80029dc <MX_GPIO_Init+0x144>)
 800292e:	f005 fdbb 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	4829      	ldr	r0, [pc, #164]	; (80029dc <MX_GPIO_Init+0x144>)
 8002938:	f005 fdb6 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800293c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	4820      	ldr	r0, [pc, #128]	; (80029d8 <MX_GPIO_Init+0x140>)
 8002956:	f005 fc0d 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800295a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002976:	f005 fbfd 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4812      	ldr	r0, [pc, #72]	; (80029dc <MX_GPIO_Init+0x144>)
 8002992:	f005 fbef 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	480b      	ldr	r0, [pc, #44]	; (80029dc <MX_GPIO_Init+0x144>)
 80029ae:	f005 fbe1 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029bc:	2301      	movs	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_GPIO_Init+0x144>)
 80029c8:	f005 fbd4 	bl	8008174 <HAL_GPIO_Init>

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	48000800 	.word	0x48000800
 80029dc:	48000400 	.word	0x48000400

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <Error_Handler+0x8>

080029ea <Motor_init>:


#include "motor.h"


void Motor_init(Motor *motor) {
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  motor->pole_pairs = 14;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	220e      	movs	r2, #14
 80029f6:	601a      	str	r2, [r3, #0]
  motor->kv_rating = 150;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2296      	movs	r2, #150	; 0x96
 80029fc:	605a      	str	r2, [r3, #4]

  motor->flux_angle_offset = 0.;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	0000      	movs	r0, r0
 8002a14:	0000      	movs	r0, r0
	...

08002a18 <wrapTo2Pi>:
static inline float wrapTo2Pi(float value) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8002a22:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002a78 <wrapTo2Pi+0x60>
 8002a26:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a2a:	f00c fe6d 	bl	800f708 <fmodf>
 8002a2e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 8002a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	db01      	blt.n	8002a44 <wrapTo2Pi+0x2c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	e00e      	b.n	8002a62 <wrapTo2Pi+0x4a>
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fd fda7 	bl	8000598 <__aeabi_f2d>
 8002a4a:	a309      	add	r3, pc, #36	; (adr r3, 8002a70 <wrapTo2Pi+0x58>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f7fd fc44 	bl	80002dc <__adddf3>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fe f8cc 	bl	8000bf8 <__aeabi_d2f>
 8002a60:	4603      	mov	r3, r0
 8002a62:	ee07 3a90 	vmov	s15, r3
}
 8002a66:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	54442d18 	.word	0x54442d18
 8002a74:	401921fb 	.word	0x401921fb
 8002a78:	40c90fdb 	.word	0x40c90fdb

08002a7c <MotorController_init>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim15;
extern UART_HandleTypeDef huart3;

void MotorController_init(MotorController *controller) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b090      	sub	sp, #64	; 0x40
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  controller->mode = MODE_DISABLED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  controller->device_id = DEVICE_CAN_ID;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2217      	movs	r2, #23
 8002a90:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
  controller->firmware_version = FIRMWARE_VERSION;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a9a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  filter_config.FilterIndex = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_config.FilterType = FDCAN_FILTER_MASK;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
  filter_config.FilterID1 = controller->device_id;    // filter
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  CORDIC_ConfigTypeDef cordic_config;
  cordic_config.Function = CORDIC_FUNCTION_COSINE; // ouput : cosine, then sine
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  cordic_config.Scale = CORDIC_SCALE_0; // not used
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  cordic_config.InSize = CORDIC_INSIZE_32BITS; // q31
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  cordic_config.OutSize = CORDIC_OUTSIZE_32BITS; // q31
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  cordic_config.NbWrite = CORDIC_NBWRITE_1; // ARG2 is 1 default
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
  cordic_config.NbRead = CORDIC_NBREAD_2; // read cosine and sine
 8002ad4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ad8:	61fb      	str	r3, [r7, #28]
  cordic_config.Precision = CORDIC_PRECISION_5CYCLES; // better than 10-3
 8002ada:	2350      	movs	r3, #80	; 0x50
 8002adc:	623b      	str	r3, [r7, #32]
  HAL_CORDIC_Configure(&hcordic, &cordic_config);
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4882      	ldr	r0, [pc, #520]	; (8002cf0 <MotorController_init+0x274>)
 8002ae6:	f004 f8cd 	bl	8006c84 <HAL_CORDIC_Configure>

  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aee:	4619      	mov	r1, r3
 8002af0:	4880      	ldr	r0, [pc, #512]	; (8002cf4 <MotorController_init+0x278>)
 8002af2:	f004 fbd3 	bl	800729c <HAL_FDCAN_ConfigFilter>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_FDCAN_Start(&hfdcan1);
 8002b04:	487b      	ldr	r0, [pc, #492]	; (8002cf4 <MotorController_init+0x278>)
 8002b06:	f004 fc23 	bl	8007350 <HAL_FDCAN_Start>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4875      	ldr	r0, [pc, #468]	; (8002cf4 <MotorController_init+0x278>)
 8002b1e:	f004 fd5d 	bl	80075dc <HAL_FDCAN_ActivateNotification>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  Encoder_init(&controller->encoder, &hspi1, &htim6);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a71      	ldr	r2, [pc, #452]	; (8002cf8 <MotorController_init+0x27c>)
 8002b34:	4971      	ldr	r1, [pc, #452]	; (8002cfc <MotorController_init+0x280>)
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fde8 	bl	800170c <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <MotorController_init+0x284>)
 8002b44:	4a6f      	ldr	r2, [pc, #444]	; (8002d04 <MotorController_init+0x288>)
 8002b46:	4970      	ldr	r1, [pc, #448]	; (8002d08 <MotorController_init+0x28c>)
 8002b48:	f001 fe44 	bl	80047d4 <PowerStage_init>
  Motor_init(&controller->motor);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3360      	adds	r3, #96	; 0x60
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff4a 	bl	80029ea <Motor_init>

  CurrentController_init(&controller->current_controller);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	336c      	adds	r3, #108	; 0x6c
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fbe8 	bl	8001330 <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	33d0      	adds	r3, #208	; 0xd0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fd19 	bl	800459c <PositionController_init>

#if OVERWRITE_CONFIG
  MotorController_storeConfig(controller);
#endif
  MotorController_loadConfig(controller);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9fa 	bl	8002f64 <MotorController_loadConfig>


  Encoder_setFilterBandwidth(&controller->encoder, controller->encoder.filter_bandwidth);
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7fe fdff 	bl	8001780 <Encoder_setFilterBandwidth>

  PowerStage_start(&controller->powerstage);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	333c      	adds	r3, #60	; 0x3c
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fe40 	bl	800480c <PowerStage_start>

  status |= HAL_OPAMP_Start(&hopamp1);
 8002b8c:	485f      	ldr	r0, [pc, #380]	; (8002d0c <MotorController_init+0x290>)
 8002b8e:	f005 fd73 	bl	8008678 <HAL_OPAMP_Start>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_OPAMP_Start(&hopamp2);
 8002ba0:	485b      	ldr	r0, [pc, #364]	; (8002d10 <MotorController_init+0x294>)
 8002ba2:	f005 fd69 	bl	8008678 <HAL_OPAMP_Start>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_OPAMP_Start(&hopamp3);
 8002bb4:	4857      	ldr	r0, [pc, #348]	; (8002d14 <MotorController_init+0x298>)
 8002bb6:	f005 fd5f 	bl	8008678 <HAL_OPAMP_Start>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_TIM_Base_Start_IT(&htim2);    // safety watchdog timer
 8002bc8:	4853      	ldr	r0, [pc, #332]	; (8002d18 <MotorController_init+0x29c>)
 8002bca:	f007 fb3f 	bl	800a24c <HAL_TIM_Base_Start_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);       // LED PWM timer, RED
 8002bdc:	2100      	movs	r1, #0
 8002bde:	484f      	ldr	r0, [pc, #316]	; (8002d1c <MotorController_init+0x2a0>)
 8002be0:	f007 fbf6 	bl	800a3d0 <HAL_TIM_PWM_Start>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);       // LED PWM timer, BLUE
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	4849      	ldr	r0, [pc, #292]	; (8002d1c <MotorController_init+0x2a0>)
 8002bf6:	f007 fbeb 	bl	800a3d0 <HAL_TIM_PWM_Start>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);      // LED PWM timer, GREEN
 8002c08:	2104      	movs	r1, #4
 8002c0a:	4845      	ldr	r0, [pc, #276]	; (8002d20 <MotorController_init+0x2a4>)
 8002c0c:	f007 fbe0 	bl	800a3d0 <HAL_TIM_PWM_Start>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_Base_Start_IT(&htim4);    // position update trigger timer
 8002c1e:	4841      	ldr	r0, [pc, #260]	; (8002d24 <MotorController_init+0x2a8>)
 8002c20:	f007 fb14 	bl	800a24c <HAL_TIM_Base_Start_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_TIM_Base_Start(&htim6);       // time keeper timer
 8002c32:	4831      	ldr	r0, [pc, #196]	; (8002cf8 <MotorController_init+0x27c>)
 8002c34:	f007 faa8 	bl	800a188 <HAL_TIM_Base_Start>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002c46:	482f      	ldr	r0, [pc, #188]	; (8002d04 <MotorController_init+0x288>)
 8002c48:	f003 f97e 	bl	8005f48 <HAL_ADCEx_InjectedStart>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002c5a:	4829      	ldr	r0, [pc, #164]	; (8002d00 <MotorController_init+0x284>)
 8002c5c:	f003 f974 	bl	8005f48 <HAL_ADCEx_InjectedStart>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3)); // red
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <MotorController_init+0x2a0>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <MotorController_init+0x2a0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3)); // blue
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <MotorController_init+0x2a0>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <MotorController_init+0x2a0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim15)); // green
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <MotorController_init+0x2a4>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <MotorController_init+0x2a4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34

  if (status != HAL_OK) {
 8002c92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d000      	beq.n	8002c9c <MotorController_init+0x220>
    while (1) {
 8002c9a:	e7fe      	b.n	8002c9a <MotorController_init+0x21e>
      // error loop
    }
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fdac 	bl	80017fc <Encoder_triggerUpdate>

  HAL_Delay(100);
 8002ca4:	2064      	movs	r0, #100	; 0x64
 8002ca6:	f002 fd15 	bl	80056d4 <HAL_Delay>
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	333c      	adds	r3, #60	; 0x3c
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 feba 	bl	8004a28 <PowerStage_calibratePhaseCurrentOffset>

  if (controller->mode == MODE_DISABLED) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <MotorController_init+0x252>
    controller->mode = MODE_IDLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
    controller->error = ERROR_NO_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
  }

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // red
 8002cce:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <MotorController_init+0x2a0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // blue
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <MotorController_init+0x2a0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0); // green
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <MotorController_init+0x2a4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ce6:	bf00      	nop
 8002ce8:	3740      	adds	r7, #64	; 0x40
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000418 	.word	0x20000418
 8002cf4:	20000440 	.word	0x20000440
 8002cf8:	200006ec 	.word	0x200006ec
 8002cfc:	20000558 	.word	0x20000558
 8002d00:	200003ac 	.word	0x200003ac
 8002d04:	20000340 	.word	0x20000340
 8002d08:	200005bc 	.word	0x200005bc
 8002d0c:	200004a4 	.word	0x200004a4
 8002d10:	200004e0 	.word	0x200004e0
 8002d14:	2000051c 	.word	0x2000051c
 8002d18:	20000608 	.word	0x20000608
 8002d1c:	20000654 	.word	0x20000654
 8002d20:	20000738 	.word	0x20000738
 8002d24:	200006a0 	.word	0x200006a0

08002d28 <MotorController_getMode>:

ErrorCode MotorController_getError(MotorController *controller) {
  return controller->error;
}

Mode MotorController_getMode(MotorController *controller) {
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return controller->mode;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <MotorController_setMode>:

void MotorController_setMode(MotorController *controller, Mode mode) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  switch (mode) {
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	2b23      	cmp	r3, #35	; 0x23
 8002d54:	dc50      	bgt.n	8002df8 <MotorController_setMode+0xb4>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f2c0 80a6 	blt.w	8002ea8 <MotorController_setMode+0x164>
 8002d5c:	2b23      	cmp	r3, #35	; 0x23
 8002d5e:	f200 80a3 	bhi.w	8002ea8 <MotorController_setMode+0x164>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <MotorController_setMode+0x24>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002dff 	.word	0x08002dff
 8002d6c:	08002e0b 	.word	0x08002e0b
 8002d70:	08002ea9 	.word	0x08002ea9
 8002d74:	08002ea9 	.word	0x08002ea9
 8002d78:	08002ea9 	.word	0x08002ea9
 8002d7c:	08002e1f 	.word	0x08002e1f
 8002d80:	08002ea9 	.word	0x08002ea9
 8002d84:	08002ea9 	.word	0x08002ea9
 8002d88:	08002ea9 	.word	0x08002ea9
 8002d8c:	08002ea9 	.word	0x08002ea9
 8002d90:	08002ea9 	.word	0x08002ea9
 8002d94:	08002ea9 	.word	0x08002ea9
 8002d98:	08002ea9 	.word	0x08002ea9
 8002d9c:	08002ea9 	.word	0x08002ea9
 8002da0:	08002ea9 	.word	0x08002ea9
 8002da4:	08002ea9 	.word	0x08002ea9
 8002da8:	08002e2b 	.word	0x08002e2b
 8002dac:	08002e2b 	.word	0x08002e2b
 8002db0:	08002e2b 	.word	0x08002e2b
 8002db4:	08002e2b 	.word	0x08002e2b
 8002db8:	08002ea9 	.word	0x08002ea9
 8002dbc:	08002ea9 	.word	0x08002ea9
 8002dc0:	08002ea9 	.word	0x08002ea9
 8002dc4:	08002ea9 	.word	0x08002ea9
 8002dc8:	08002ea9 	.word	0x08002ea9
 8002dcc:	08002ea9 	.word	0x08002ea9
 8002dd0:	08002ea9 	.word	0x08002ea9
 8002dd4:	08002ea9 	.word	0x08002ea9
 8002dd8:	08002ea9 	.word	0x08002ea9
 8002ddc:	08002ea9 	.word	0x08002ea9
 8002de0:	08002ea9 	.word	0x08002ea9
 8002de4:	08002ea9 	.word	0x08002ea9
 8002de8:	08002e2b 	.word	0x08002e2b
 8002dec:	08002e2b 	.word	0x08002e2b
 8002df0:	08002e2b 	.word	0x08002e2b
 8002df4:	08002e2b 	.word	0x08002e2b
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d016      	beq.n	8002e2a <MotorController_setMode+0xe6>
 8002dfc:	e054      	b.n	8002ea8 <MotorController_setMode+0x164>
    case MODE_DISABLED:
      PowerStage_disable(&controller->powerstage);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	333c      	adds	r3, #60	; 0x3c
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fd34 	bl	8004870 <PowerStage_disable>
      break;
 8002e08:	e05c      	b.n	8002ec4 <MotorController_setMode+0x180>

    case MODE_IDLE:
      PowerStage_enable(&controller->powerstage);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	333c      	adds	r3, #60	; 0x3c
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fd48 	bl	80048a4 <PowerStage_enable>
      controller->error = ERROR_NO_ERROR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
      break;
 8002e1c:	e052      	b.n	8002ec4 <MotorController_setMode+0x180>

    case MODE_CALIBRATION:
      PowerStage_enable(&controller->powerstage);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	333c      	adds	r3, #60	; 0x3c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fd3e 	bl	80048a4 <PowerStage_enable>
      break;
 8002e28:	e04c      	b.n	8002ec4 <MotorController_setMode+0x180>
    case MODE_DEBUG:
    case MODE_VQD_OVERRIDE:
    case MODE_VALPHABETA_OVERRIDE:
    case MODE_VABC_OVERRIDE:
    case MODE_IQD_OVERRIDE:
      if (controller->mode != MODE_IDLE && controller->mode != mode) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d013      	beq.n	8002e5c <MotorController_setMode+0x118>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d00d      	beq.n	8002e5c <MotorController_setMode+0x118>
        PowerStage_disable(&controller->powerstage);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	333c      	adds	r3, #60	; 0x3c
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fd13 	bl	8004870 <PowerStage_disable>
        controller->mode = MODE_DISABLED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        controller->error = ERROR_INVALID_MODE_SWITCH;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        return;  // return directly, do not update mode
 8002e5a:	e037      	b.n	8002ecc <MotorController_setMode+0x188>
      }
      controller->current_controller.i_q_integrator = 0;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
      controller->current_controller.i_d_integrator = 0;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      controller->position_controller.position_setpoint = controller->position_controller.position_measured;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      controller->position_controller.position_integrator = 0;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
      controller->position_controller.velocity_integrator = 0;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      controller->position_controller.velocity_setpoint = controller->position_controller.velocity_measured;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
      PowerStage_enable(&controller->powerstage);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	333c      	adds	r3, #60	; 0x3c
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fcff 	bl	80048a4 <PowerStage_enable>
      break;
 8002ea6:	e00d      	b.n	8002ec4 <MotorController_setMode+0x180>

    default:
      PowerStage_disable(&controller->powerstage);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	333c      	adds	r3, #60	; 0x3c
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fcdf 	bl	8004870 <PowerStage_disable>
      controller->mode = MODE_DISABLED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
      controller->error = ERROR_INVALID_MODE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
      return;  // return directly, do not update mode
 8002ec2:	e003      	b.n	8002ecc <MotorController_setMode+0x188>
  }
  controller->mode = mode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <MotorController_setFluxAngle>:

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ee0:	edc7 0a01 	vstr	s1, [r7, #4]
  float theta = wrapTo2Pi(angle_setpoint);
 8002ee4:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ee8:	f7ff fd96 	bl	8002a18 <wrapTo2Pi>
 8002eec:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float sin_theta = sinf(theta);
 8002ef0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ef4:	f00c fbc2 	bl	800f67c <sinf>
 8002ef8:	ed87 0a08 	vstr	s0, [r7, #32]
  float cos_theta = cosf(theta);
 8002efc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f00:	f00c fb26 	bl	800f550 <cosf>
 8002f04:	ed87 0a07 	vstr	s0, [r7, #28]
  float v_q = 0.0;
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  float v_d = voltage_setpoint;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	617b      	str	r3, [r7, #20]

  controller->current_controller.v_alpha_setpoint = -sin_theta * v_q + cos_theta * v_d;
 8002f12:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f16:	eeb1 7a67 	vneg.f32	s14, s15
 8002f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
  controller->current_controller.v_beta_setpoint  =  cos_theta * v_q + sin_theta * v_d;
 8002f38:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f44:	edd7 6a08 	vldr	s13, [r7, #32]
 8002f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <MotorController_loadConfig>:

void MotorController_loadConfig(MotorController *controller) {
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  EEPROMConfig *config = (EEPROMConfig *)FLASH_CONFIG_ADDRESS;
 8002f6c:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <MotorController_loadConfig+0xfc>)
 8002f6e:	60fb      	str	r3, [r7, #12]

  controller->firmware_version                  = config->firmware_version;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  controller->device_id                         = config->device_id;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124

  controller->encoder.cpr                       = abs(config->encoder_dir_cpr);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bfb8      	it	lt
 8002f8e:	425b      	neglt	r3, r3
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	819a      	strh	r2, [r3, #12]
  controller->encoder.direction                 = config->encoder_dir_cpr > 0 ? 1 : -1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	dd01      	ble.n	8002fa2 <MotorController_loadConfig+0x3e>
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	e001      	b.n	8002fa6 <MotorController_loadConfig+0x42>
 8002fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	739a      	strb	r2, [r3, #14]
  controller->encoder.position_offset           = config->encoder_position_offset;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

  controller->powerstage.undervoltage_threshold = config->powerstage_undervoltage_threshold;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	649a      	str	r2, [r3, #72]	; 0x48
  controller->powerstage.overvoltage_threshold  = config->powerstage_overvoltage_threshold;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	64da      	str	r2, [r3, #76]	; 0x4c

  controller->motor.pole_pairs                  = config->motor_pole_pairs;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	661a      	str	r2, [r3, #96]	; 0x60
  controller->motor.kv_rating                   = config->motor_kv_rating;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	665a      	str	r2, [r3, #100]	; 0x64
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	669a      	str	r2, [r3, #104]	; 0x68

  controller->current_controller.current_filter_alpha   =   config->current_controller_current_filter_alpha;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	66da      	str	r2, [r3, #108]	; 0x6c
  controller->current_controller.i_q_kp         = config->current_controller_i_q_kp;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	671a      	str	r2, [r3, #112]	; 0x70
  controller->current_controller.i_q_ki         = config->current_controller_i_q_ki;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	675a      	str	r2, [r3, #116]	; 0x74
  controller->current_controller.i_d_kp         = config->current_controller_i_d_kp;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	679a      	str	r2, [r3, #120]	; 0x78
  controller->current_controller.i_d_ki         = config->current_controller_i_d_ki;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	67da      	str	r2, [r3, #124]	; 0x7c

  controller->position_controller.position_kp   = config->position_controller_position_kp;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  controller->position_controller.position_ki   = config->position_controller_position_ki;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  controller->position_controller.velocity_kp   = config->position_controller_velocity_kp;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  controller->position_controller.velocity_ki   = config->position_controller_velocity_ki;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  controller->position_controller.torque_limit  = config->position_controller_torque_limit;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  controller->position_controller.velocity_limit        = config->position_controller_velocity_limit;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	0801f800 	.word	0x0801f800

08003064 <MotorController_storeConfig>:

uint32_t MotorController_storeConfig(MotorController *controller) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b0a4      	sub	sp, #144	; 0x90
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  EEPROMConfig config;

  config.firmware_version                     = controller->firmware_version;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003072:	623b      	str	r3, [r7, #32]
  config.device_id                            = controller->device_id;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800307a:	61fb      	str	r3, [r7, #28]

  config.encoder_dir_cpr                      = controller->encoder.direction * (int32_t)controller->encoder.cpr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	899b      	ldrh	r3, [r3, #12]
 8003088:	fb02 f303 	mul.w	r3, r2, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  config.encoder_position_offset              = controller->encoder.position_offset;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	637b      	str	r3, [r7, #52]	; 0x34

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
  config.motor_kv_rating                      = controller->motor.kv_rating;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b0:	643b      	str	r3, [r7, #64]	; 0x40

  config.current_controller_current_filter_alpha  = controller->current_controller.current_filter_alpha;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b6:	647b      	str	r3, [r7, #68]	; 0x44
  config.current_controller_i_q_kp            = controller->current_controller.i_q_kp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	64bb      	str	r3, [r7, #72]	; 0x48
  config.current_controller_i_q_ki            = controller->current_controller.i_q_ki;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  config.current_controller_i_d_kp            = controller->current_controller.i_d_kp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c8:	653b      	str	r3, [r7, #80]	; 0x50
  config.current_controller_i_d_ki            = controller->current_controller.i_d_ki;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ce:	657b      	str	r3, [r7, #84]	; 0x54

  config.position_controller_position_kp      = controller->position_controller.position_kp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80030d6:	65bb      	str	r3, [r7, #88]	; 0x58
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030de:	65fb      	str	r3, [r7, #92]	; 0x5c
  config.position_controller_velocity_kp      = controller->position_controller.velocity_kp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030e6:	663b      	str	r3, [r7, #96]	; 0x60
  config.position_controller_velocity_ki      = controller->position_controller.velocity_ki;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030ee:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_torque_limit       = controller->position_controller.torque_limit;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	66bb      	str	r3, [r7, #104]	; 0x68
  config.position_controller_velocity_limit     = controller->position_controller.velocity_limit;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030fe:	673b      	str	r3, [r7, #112]	; 0x70
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003106:	677b      	str	r3, [r7, #116]	; 0x74
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800310e:	67bb      	str	r3, [r7, #120]	; 0x78

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_error;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8003110:	f004 fe14 	bl	8007d3c <HAL_FLASH_Unlock>

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8003118:	2301      	movs	r3, #1
 800311a:	613b      	str	r3, [r7, #16]
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 800311c:	233f      	movs	r3, #63	; 0x3f
 800311e:	617b      	str	r3, [r7, #20]
  erase_init_struct.NbPages = 1;
 8003120:	2301      	movs	r3, #1
 8003122:	61bb      	str	r3, [r7, #24]

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8003124:	f107 0208 	add.w	r2, r7, #8
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f004 fefc 	bl	8007f2c <HAL_FLASHEx_Erase>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <MotorController_storeConfig+0xde>
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
 800313a:	f004 fe3b 	bl	8007db4 <HAL_FLASH_GetError>
 800313e:	4603      	mov	r3, r0
 8003140:	e02e      	b.n	80031a0 <MotorController_storeConfig+0x13c>
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8003142:	2300      	movs	r3, #0
 8003144:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8003148:	e023      	b.n	8003192 <MotorController_storeConfig+0x12e>
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 800314a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	f107 021c 	add.w	r2, r7, #28
 8003154:	4413      	add	r3, r2
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
 800315e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003168:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800316c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 800316e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003172:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003174:	2000      	movs	r0, #0
 8003176:	f004 fd8b 	bl	8007c90 <HAL_FLASH_Program>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <MotorController_storeConfig+0x124>
      return HAL_FLASH_GetError();
 8003180:	f004 fe18 	bl	8007db4 <HAL_FLASH_GetError>
 8003184:	4603      	mov	r3, r0
 8003186:	e00b      	b.n	80031a0 <MotorController_storeConfig+0x13c>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8003188:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800318c:	3301      	adds	r3, #1
 800318e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8003192:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003196:	2b0b      	cmp	r3, #11
 8003198:	d9d7      	bls.n	800314a <MotorController_storeConfig+0xe6>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 800319a:	f004 fdf1 	bl	8007d80 <HAL_FLASH_Lock>

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3790      	adds	r7, #144	; 0x90
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <MotorController_updateCommutation>:

float MotorController_getPosition(MotorController *controller) {
  return controller->position_controller.position_measured;
}

void MotorController_updateCommutation(MotorController *controller, ADC_HandleTypeDef *hadc) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  float position_measured = Encoder_getRelativePosition(&controller->encoder);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fc7f 	bl	8001ab8 <Encoder_getRelativePosition>
 80031ba:	ed87 0a05 	vstr	s0, [r7, #20]

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80031d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	f7ff fc1a 	bl	8002a18 <wrapTo2Pi>
 80031e4:	ed87 0a04 	vstr	s0, [r7, #16]
//  else {
//    cos_theta = cosf(theta);
//    sin_theta = sinf(theta);
//  }

  float sin_theta = sinf(theta);
 80031e8:	ed97 0a04 	vldr	s0, [r7, #16]
 80031ec:	f00c fa46 	bl	800f67c <sinf>
 80031f0:	ed87 0a03 	vstr	s0, [r7, #12]
  float cos_theta = cosf(theta);
 80031f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80031f8:	f00c f9aa 	bl	800f550 <cosf>
 80031fc:	ed87 0a02 	vstr	s0, [r7, #8]


  PowerStage_getPhaseCurrent(&controller->powerstage,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3388      	adds	r3, #136	; 0x88
 8003216:	f001 fc57 	bl	8004ac8 <PowerStage_getPhaseCurrent>
    &controller->current_controller.i_a_measured,
    &controller->current_controller.i_b_measured,
    &controller->current_controller.i_c_measured);

  CurrentController_update(&controller->current_controller,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 111c 	ldrb.w	r1, [r3, #284]	; 0x11c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800322c:	eeb0 1a67 	vmov.f32	s2, s15
 8003230:	edd7 0a02 	vldr	s1, [r7, #8]
 8003234:	ed97 0a03 	vldr	s0, [r7, #12]
 8003238:	4610      	mov	r0, r2
 800323a:	f7fe f8a1 	bl	8001380 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d015      	beq.n	8003274 <MotorController_updateCommutation+0xcc>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8003260:	eeb0 1a66 	vmov.f32	s2, s13
 8003264:	eef0 0a47 	vmov.f32	s1, s14
 8003268:	eeb0 0a67 	vmov.f32	s0, s15
 800326c:	4610      	mov	r0, r2
 800326e:	f001 fb33 	bl	80048d8 <PowerStage_setBridgeOutput>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 8003272:	e00a      	b.n	800328a <MotorController_updateCommutation+0xe2>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8003294 <MotorController_updateCommutation+0xec>
 800327c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8003294 <MotorController_updateCommutation+0xec>
 8003280:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003294 <MotorController_updateCommutation+0xec>
 8003284:	4618      	mov	r0, r3
 8003286:	f001 fb27 	bl	80048d8 <PowerStage_setBridgeOutput>
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	00000000 	.word	0x00000000

08003298 <MotorController_triggerPositionUpdate>:

void MotorController_triggerPositionUpdate(MotorController *controller) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  // blue LED reflects if mode is operational
  switch (controller->mode) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80032a6:	2b23      	cmp	r3, #35	; 0x23
 80032a8:	d870      	bhi.n	800338c <MotorController_triggerPositionUpdate+0xf4>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <MotorController_triggerPositionUpdate+0x18>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	08003341 	.word	0x08003341
 80032b4:	08003341 	.word	0x08003341
 80032b8:	0800338d 	.word	0x0800338d
 80032bc:	0800338d 	.word	0x0800338d
 80032c0:	0800338d 	.word	0x0800338d
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	0800338d 	.word	0x0800338d
 80032cc:	0800338d 	.word	0x0800338d
 80032d0:	0800338d 	.word	0x0800338d
 80032d4:	0800338d 	.word	0x0800338d
 80032d8:	0800338d 	.word	0x0800338d
 80032dc:	0800338d 	.word	0x0800338d
 80032e0:	0800338d 	.word	0x0800338d
 80032e4:	0800338d 	.word	0x0800338d
 80032e8:	0800338d 	.word	0x0800338d
 80032ec:	0800338d 	.word	0x0800338d
 80032f0:	08003375 	.word	0x08003375
 80032f4:	08003375 	.word	0x08003375
 80032f8:	08003375 	.word	0x08003375
 80032fc:	08003375 	.word	0x08003375
 8003300:	0800338d 	.word	0x0800338d
 8003304:	0800338d 	.word	0x0800338d
 8003308:	0800338d 	.word	0x0800338d
 800330c:	0800338d 	.word	0x0800338d
 8003310:	0800338d 	.word	0x0800338d
 8003314:	0800338d 	.word	0x0800338d
 8003318:	0800338d 	.word	0x0800338d
 800331c:	0800338d 	.word	0x0800338d
 8003320:	0800338d 	.word	0x0800338d
 8003324:	0800338d 	.word	0x0800338d
 8003328:	0800338d 	.word	0x0800338d
 800332c:	0800338d 	.word	0x0800338d
 8003330:	08003375 	.word	0x08003375
 8003334:	08003375 	.word	0x08003375
 8003338:	08003375 	.word	0x08003375
 800333c:	08003375 	.word	0x08003375
    case MODE_DISABLED:
    case MODE_IDLE:
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 2); // blue
 8003340:	4b26      	ldr	r3, [pc, #152]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0852      	lsrs	r2, r2, #1
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
      PowerStage_disable(&controller->powerstage);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	333c      	adds	r3, #60	; 0x3c
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fa8c 	bl	8004870 <PowerStage_disable>
      break;
 8003358:	e020      	b.n	800339c <MotorController_triggerPositionUpdate+0x104>
    case MODE_CALIBRATION:
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3) / 4); // blue
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0892      	lsrs	r2, r2, #2
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
      PowerStage_enable(&controller->powerstage);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	333c      	adds	r3, #60	; 0x3c
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fa99 	bl	80048a4 <PowerStage_enable>
      break;
 8003372:	e013      	b.n	800339c <MotorController_triggerPositionUpdate+0x104>
    case MODE_POSITION:
    case MODE_VQD_OVERRIDE:
    case MODE_VALPHABETA_OVERRIDE:
    case MODE_VABC_OVERRIDE:
    case MODE_IQD_OVERRIDE:
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim3)); // blue
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b18      	ldr	r3, [pc, #96]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
      PowerStage_enable(&controller->powerstage);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	333c      	adds	r3, #60	; 0x3c
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fa8d 	bl	80048a4 <PowerStage_enable>
      break;
 800338a:	e007      	b.n	800339c <MotorController_triggerPositionUpdate+0x104>
    default:
      MotorController_setMode(controller, MODE_DISABLED);
 800338c:	2100      	movs	r1, #0
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fcd8 	bl	8002d44 <MotorController_setMode>
      controller->error = ERROR_INVALID_MODE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
  }

  // red LED reflects gate driver fault status and error status
  if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) || controller->error != ERROR_NO_ERROR) {
 800339c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033a0:	480f      	ldr	r0, [pc, #60]	; (80033e0 <MotorController_triggerPositionUpdate+0x148>)
 80033a2:	f005 f869 	bl	8008478 <HAL_GPIO_ReadPin>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <MotorController_triggerPositionUpdate+0x11e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <MotorController_triggerPositionUpdate+0x12c>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim3));
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34
 80033c2:	e003      	b.n	80033cc <MotorController_triggerPositionUpdate+0x134>
  }
  else {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <MotorController_triggerPositionUpdate+0x144>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  Encoder_triggerUpdate(&controller->encoder);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fa14 	bl	80017fc <Encoder_triggerUpdate>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000654 	.word	0x20000654
 80033e0:	48000400 	.word	0x48000400
 80033e4:	00000000 	.word	0x00000000

080033e8 <MotorController_updatePositionReading>:

void MotorController_updatePositionReading(MotorController *controller) {
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  Encoder_update(&controller->encoder);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fa38 	bl	8001868 <Encoder_update>

  PowerStage_getBusVoltage(&controller->powerstage);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	333c      	adds	r3, #60	; 0x3c
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fb3b 	bl	8004a78 <PowerStage_getBusVoltage>

  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fb66 	bl	8001ad6 <Encoder_getPosition>
 800340a:	eef0 7a40 	vmov.f32	s15, s0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fb6c 	bl	8001af4 <Encoder_getVelocity>
 800341c:	eef0 7a40 	vmov.f32	s15, s0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
  controller->position_controller.torque_measured = (8.3 * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd f8b3 	bl	8000598 <__aeabi_f2d>
 8003432:	a313      	add	r3, pc, #76	; (adr r3, 8003480 <MotorController_updatePositionReading+0x98>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fd f906 	bl	8000648 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003450:	ee17 0a90 	vmov	r0, s15
 8003454:	f7fd f8a0 	bl	8000598 <__aeabi_f2d>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	f7fd fa1c 	bl	800089c <__aeabi_ddiv>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fbc4 	bl	8000bf8 <__aeabi_d2f>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bdb0      	pop	{r4, r5, r7, pc}
 8003480:	9999999a 	.word	0x9999999a
 8003484:	40209999 	.word	0x40209999

08003488 <MotorController_updatePositionController>:

void MotorController_updatePositionController(MotorController *controller) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  PositionController_update(&controller->position_controller, controller->mode);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f001 f8bc 	bl	800461c <PositionController_update>

  if (controller->mode != MODE_CURRENT) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d022      	beq.n	80034f4 <MotorController_updatePositionController+0x6c>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c4:	ee17 0a90 	vmov	r0, s15
 80034c8:	f7fd f866 	bl	8000598 <__aeabi_f2d>
 80034cc:	a30c      	add	r3, pc, #48	; (adr r3, 8003500 <MotorController_updatePositionController+0x78>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f7fd f9e3 	bl	800089c <__aeabi_ddiv>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	f7fd fb8b 	bl	8000bf8 <__aeabi_d2f>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    controller->current_controller.i_d_target = 0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  }
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	f3af 8000 	nop.w
 8003500:	9999999a 	.word	0x9999999a
 8003504:	40209999 	.word	0x40209999

08003508 <MotorController_updateService>:

void MotorController_updateService(MotorController *controller) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_CALIBRATION) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003516:	2b05      	cmp	r3, #5
 8003518:	d103      	bne.n	8003522 <MotorController_updateService+0x1a>
    MotorController_runCalibrationSequence(controller);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f804 	bl	8003528 <MotorController_runCalibrationSequence>
    return;
 8003520:	bf00      	nop
  }
}
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <MotorController_runCalibrationSequence>:

void MotorController_runCalibrationSequence(MotorController *controller) {
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b0ac      	sub	sp, #176	; 0xb0
 800352c:	af02      	add	r7, sp, #8
 800352e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);    // green LED
 8003530:	2200      	movs	r2, #0
 8003532:	2110      	movs	r1, #16
 8003534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003538:	f004 ffb6 	bl	80084a8 <HAL_GPIO_WritePin>
  MotorController_setMode(controller, MODE_CALIBRATION);
 800353c:	2105      	movs	r1, #5
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fc00 	bl	8002d44 <MotorController_setMode>

  // open loop calibration
  float flux_angle_setpoint = 0;
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float voltage_setpoint = 0.2;
 800354c:	4b7e      	ldr	r3, [pc, #504]	; (8003748 <MotorController_runCalibrationSequence+0x220>)
 800354e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003552:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8003556:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fcba 	bl	8002ed4 <MotorController_setFluxAngle>
  HAL_Delay(100);
 8003560:	2064      	movs	r0, #100	; 0x64
 8003562:	f002 f8b7 	bl	80056d4 <HAL_Delay>
  PowerStage_enable(&controller->powerstage);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	333c      	adds	r3, #60	; 0x3c
 800356a:	4618      	mov	r0, r3
 800356c:	f001 f99a 	bl	80048a4 <PowerStage_enable>
  HAL_Delay(500);
 8003570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003574:	f002 f8ae 	bl	80056d4 <HAL_Delay>

  float phase_current = 0;
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  while (phase_current < CALIBRATION_CURRENT) {
 8003580:	e07c      	b.n	800367c <MotorController_runCalibrationSequence+0x154>
    HAL_Delay(100);
 8003582:	2064      	movs	r0, #100	; 0x64
 8003584:	f002 f8a6 	bl	80056d4 <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003588:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 800358c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fc9f 	bl	8002ed4 <MotorController_setFluxAngle>

    voltage_setpoint += 0.1;
 8003596:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800359a:	f7fc fffd 	bl	8000598 <__aeabi_f2d>
 800359e:	a364      	add	r3, pc, #400	; (adr r3, 8003730 <MotorController_runCalibrationSequence+0x208>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fc fe9a 	bl	80002dc <__adddf3>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fb22 	bl	8000bf8 <__aeabi_d2f>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80035c0:	eef0 7ae7 	vabs.f32	s15, s15
 80035c4:	ee17 0a90 	vmov	r0, s15
 80035c8:	f7fc ffe6 	bl	8000598 <__aeabi_f2d>
 80035cc:	4604      	mov	r4, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80035d6:	eef0 7ae7 	vabs.f32	s15, s15
 80035da:	ee17 0a90 	vmov	r0, s15
 80035de:	f7fc ffdb 	bl	8000598 <__aeabi_f2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fc fe77 	bl	80002dc <__adddf3>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4614      	mov	r4, r2
 80035f4:	461d      	mov	r5, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80035fc:	eef0 7ae7 	vabs.f32	s15, s15
 8003600:	ee17 0a90 	vmov	r0, s15
 8003604:	f7fc ffc8 	bl	8000598 <__aeabi_f2d>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4620      	mov	r0, r4
 800360e:	4629      	mov	r1, r5
 8003610:	f7fc fe64 	bl	80002dc <__adddf3>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	a346      	add	r3, pc, #280	; (adr r3, 8003738 <MotorController_runCalibrationSequence+0x210>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fd f811 	bl	8000648 <__aeabi_dmul>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fae3 	bl	8000bf8 <__aeabi_d2f>
 8003632:	4603      	mov	r3, r0
 8003634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 8003638:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800363c:	f7fc ffac 	bl	8000598 <__aeabi_f2d>
 8003640:	4604      	mov	r4, r0
 8003642:	460d      	mov	r5, r1
 8003644:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003648:	f7fc ffa6 	bl	8000598 <__aeabi_f2d>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	f107 000c 	add.w	r0, r7, #12
 8003654:	e9cd 2300 	strd	r2, r3, [sp]
 8003658:	4622      	mov	r2, r4
 800365a:	462b      	mov	r3, r5
 800365c:	493b      	ldr	r1, [pc, #236]	; (800374c <MotorController_runCalibrationSequence+0x224>)
 800365e:	f009 fcfd 	bl	800d05c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc fdda 	bl	8000220 <strlen>
 800366c:	4603      	mov	r3, r0
 800366e:	b29a      	uxth	r2, r3
 8003670:	f107 010c 	add.w	r1, r7, #12
 8003674:	230a      	movs	r3, #10
 8003676:	4836      	ldr	r0, [pc, #216]	; (8003750 <MotorController_runCalibrationSequence+0x228>)
 8003678:	f008 fa39 	bl	800baee <HAL_UART_Transmit>
  while (phase_current < CALIBRATION_CURRENT) {
 800367c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003680:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368c:	f53f af79 	bmi.w	8003582 <MotorController_runCalibrationSequence+0x5a>
    }
  }

  HAL_Delay(500);
 8003690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003694:	f002 f81e 	bl	80056d4 <HAL_Delay>

  float start_position = Encoder_getPosition(&controller->encoder);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fa1b 	bl	8001ad6 <Encoder_getPosition>
 80036a0:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80036aa:	e02b      	b.n	8003704 <MotorController_runCalibrationSequence+0x1dc>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80036ac:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003754 <MotorController_runCalibrationSequence+0x22c>
 80036bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036c0:	ee16 0a90 	vmov	r0, s13
 80036c4:	f7fc ff68 	bl	8000598 <__aeabi_f2d>
 80036c8:	a31d      	add	r3, pc, #116	; (adr r3, 8003740 <MotorController_runCalibrationSequence+0x218>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fc ffbb 	bl	8000648 <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd fa8d 	bl	8000bf8 <__aeabi_d2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80036e4:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80036e8:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fbf1 	bl	8002ed4 <MotorController_setFluxAngle>
    HAL_Delay(2);
 80036f2:	2002      	movs	r0, #2
 80036f4:	f001 ffee 	bl	80056d4 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 80036f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80036fc:	3301      	adds	r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003704:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8003708:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800370c:	ddce      	ble.n	80036ac <MotorController_runCalibrationSequence+0x184>
  }
  HAL_Delay(500);
 800370e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003712:	f001 ffdf 	bl	80056d4 <HAL_Delay>

  float end_position = Encoder_getPosition(&controller->encoder);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe f9dc 	bl	8001ad6 <Encoder_getPosition>
 800371e:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

  for (int16_t i=500; i>=0; i-=1) {
 8003722:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003726:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800372a:	e041      	b.n	80037b0 <MotorController_runCalibrationSequence+0x288>
 800372c:	f3af 8000 	nop.w
 8003730:	9999999a 	.word	0x9999999a
 8003734:	3fb99999 	.word	0x3fb99999
 8003738:	55555555 	.word	0x55555555
 800373c:	3fd55555 	.word	0x3fd55555
 8003740:	54442d18 	.word	0x54442d18
 8003744:	401921fb 	.word	0x401921fb
 8003748:	3e4ccccd 	.word	0x3e4ccccd
 800374c:	080102ec 	.word	0x080102ec
 8003750:	20000784 	.word	0x20000784
 8003754:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003758:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003764:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003754 <MotorController_runCalibrationSequence+0x22c>
 8003768:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800376c:	ee16 0a90 	vmov	r0, s13
 8003770:	f7fc ff12 	bl	8000598 <__aeabi_f2d>
 8003774:	a39e      	add	r3, pc, #632	; (adr r3, 80039f0 <MotorController_runCalibrationSequence+0x4c8>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f7fc ff65 	bl	8000648 <__aeabi_dmul>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fd fa37 	bl	8000bf8 <__aeabi_d2f>
 800378a:	4603      	mov	r3, r0
 800378c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003790:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8003794:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fb9b 	bl	8002ed4 <MotorController_setFluxAngle>
    HAL_Delay(2);
 800379e:	2002      	movs	r0, #2
 80037a0:	f001 ff98 	bl	80056d4 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 80037a4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80037b0:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dacf      	bge.n	8003758 <MotorController_runCalibrationSequence+0x230>
  }

  flux_angle_setpoint = 0;
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80037c0:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 80037c4:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fb83 	bl	8002ed4 <MotorController_setFluxAngle>
  HAL_Delay(500);
 80037ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037d2:	f001 ff7f 	bl	80056d4 <HAL_Delay>

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe f97c 	bl	8001ad6 <Encoder_getPosition>
 80037de:	ee10 3a10 	vmov	r3, s0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fed8 	bl	8000598 <__aeabi_f2d>
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b82      	ldr	r3, [pc, #520]	; (80039f8 <MotorController_runCalibrationSequence+0x4d0>)
 80037ee:	f7fc ff2b 	bl	8000648 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	461d      	mov	r5, r3
 80037fa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80037fe:	f7fc fecb 	bl	8000598 <__aeabi_f2d>
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <MotorController_runCalibrationSequence+0x4d0>)
 8003808:	f7fc ff1e 	bl	8000648 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4620      	mov	r0, r4
 8003812:	4629      	mov	r1, r5
 8003814:	f7fc fd62 	bl	80002dc <__adddf3>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f7fd f9ea 	bl	8000bf8 <__aeabi_d2f>
 8003824:	4603      	mov	r3, r0
 8003826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Delay(500);
 800382a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800382e:	f001 ff51 	bl	80056d4 <HAL_Delay>

  // release motor
  PowerStage_disable(&controller->powerstage);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	333c      	adds	r3, #60	; 0x3c
 8003836:	4618      	mov	r0, r3
 8003838:	f001 f81a 	bl	8004870 <PowerStage_disable>

  float delta_position = end_position - start_position;
 800383c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003840:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003848:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 800384c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003850:	f7fc fea2 	bl	8000598 <__aeabi_f2d>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	f107 000c 	add.w	r0, r7, #12
 800385c:	4967      	ldr	r1, [pc, #412]	; (80039fc <MotorController_runCalibrationSequence+0x4d4>)
 800385e:	f009 fbfd 	bl	800d05c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fcda 	bl	8000220 <strlen>
 800386c:	4603      	mov	r3, r0
 800386e:	b29a      	uxth	r2, r3
 8003870:	f107 010c 	add.w	r1, r7, #12
 8003874:	230a      	movs	r3, #10
 8003876:	4862      	ldr	r0, [pc, #392]	; (8003a00 <MotorController_runCalibrationSequence+0x4d8>)
 8003878:	f008 f939 	bl	800baee <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 800387c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003880:	f7fc fe8a 	bl	8000598 <__aeabi_f2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	f107 000c 	add.w	r0, r7, #12
 800388c:	495d      	ldr	r1, [pc, #372]	; (8003a04 <MotorController_runCalibrationSequence+0x4dc>)
 800388e:	f009 fbe5 	bl	800d05c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	4618      	mov	r0, r3
 8003898:	f7fc fcc2 	bl	8000220 <strlen>
 800389c:	4603      	mov	r3, r0
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f107 010c 	add.w	r1, r7, #12
 80038a4:	230a      	movs	r3, #10
 80038a6:	4856      	ldr	r0, [pc, #344]	; (8003a00 <MotorController_runCalibrationSequence+0x4d8>)
 80038a8:	f008 f921 	bl	800baee <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 80038ac:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80038b0:	f7fc fe72 	bl	8000598 <__aeabi_f2d>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	f107 000c 	add.w	r0, r7, #12
 80038bc:	4952      	ldr	r1, [pc, #328]	; (8003a08 <MotorController_runCalibrationSequence+0x4e0>)
 80038be:	f009 fbcd 	bl	800d05c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fcaa 	bl	8000220 <strlen>
 80038cc:	4603      	mov	r3, r0
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	f107 010c 	add.w	r1, r7, #12
 80038d4:	230a      	movs	r3, #10
 80038d6:	484a      	ldr	r0, [pc, #296]	; (8003a00 <MotorController_runCalibrationSequence+0x4d8>)
 80038d8:	f008 f909 	bl	800baee <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 80038dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80038e0:	eef0 7ae7 	vabs.f32	s15, s15
 80038e4:	ee17 0a90 	vmov	r0, s15
 80038e8:	f7fc fe56 	bl	8000598 <__aeabi_f2d>
 80038ec:	a33e      	add	r3, pc, #248	; (adr r3, 80039e8 <MotorController_runCalibrationSequence+0x4c0>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fd f91b 	bl	8000b2c <__aeabi_dcmplt>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <MotorController_runCalibrationSequence+0x3e0>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 80038fc:	230a      	movs	r3, #10
 80038fe:	221b      	movs	r2, #27
 8003900:	4942      	ldr	r1, [pc, #264]	; (8003a0c <MotorController_runCalibrationSequence+0x4e4>)
 8003902:	483f      	ldr	r0, [pc, #252]	; (8003a00 <MotorController_runCalibrationSequence+0x4d8>)
 8003904:	f008 f8f3 	bl	800baee <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 8003908:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800390c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	ee17 0a90 	vmov	r0, s15
 8003924:	f7fc fe38 	bl	8000598 <__aeabi_f2d>
 8003928:	a331      	add	r3, pc, #196	; (adr r3, 80039f0 <MotorController_runCalibrationSequence+0x4c8>)
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f7fc fcd3 	bl	80002d8 <__aeabi_dsub>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	f7fd f95d 	bl	8000bf8 <__aeabi_d2f>
 800393e:	ee07 0a90 	vmov	s15, r0
 8003942:	eef0 7ae7 	vabs.f32	s15, s15
 8003946:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800394a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003952:	dd05      	ble.n	8003960 <MotorController_runCalibrationSequence+0x438>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 8003954:	230a      	movs	r3, #10
 8003956:	2221      	movs	r2, #33	; 0x21
 8003958:	492d      	ldr	r1, [pc, #180]	; (8003a10 <MotorController_runCalibrationSequence+0x4e8>)
 800395a:	4829      	ldr	r0, [pc, #164]	; (8003a00 <MotorController_runCalibrationSequence+0x4d8>)
 800395c:	f008 f8c7 	bl	800baee <HAL_UART_Transmit>
  }


  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800396c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003974:	eeb0 0a67 	vmov.f32	s0, s15
 8003978:	f7ff f84e 	bl	8002a18 <wrapTo2Pi>
 800397c:	eef0 7a40 	vmov.f32	s15, s0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fe04 	bl	8000598 <__aeabi_f2d>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	f107 000c 	add.w	r0, r7, #12
 8003998:	491e      	ldr	r1, [pc, #120]	; (8003a14 <MotorController_runCalibrationSequence+0x4ec>)
 800399a:	f009 fb5f 	bl	800d05c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800399e:	f107 030c 	add.w	r3, r7, #12
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fc3c 	bl	8000220 <strlen>
 80039a8:	4603      	mov	r3, r0
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f107 010c 	add.w	r1, r7, #12
 80039b0:	230a      	movs	r3, #10
 80039b2:	4813      	ldr	r0, [pc, #76]	; (8003a00 <MotorController_runCalibrationSequence+0x4d8>)
 80039b4:	f008 f89b 	bl	800baee <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fb53 	bl	8003064 <MotorController_storeConfig>

  HAL_Delay(1000);
 80039be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c2:	f001 fe87 	bl	80056d4 <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 80039c6:	2101      	movs	r1, #1
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff f9bb 	bl	8002d44 <MotorController_setMode>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);    // green LED
 80039ce:	2201      	movs	r2, #1
 80039d0:	2110      	movs	r1, #16
 80039d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039d6:	f004 fd67 	bl	80084a8 <HAL_GPIO_WritePin>
}
 80039da:	bf00      	nop
 80039dc:	37a8      	adds	r7, #168	; 0xa8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bdb0      	pop	{r4, r5, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	f3af 8000 	nop.w
 80039e8:	9999999a 	.word	0x9999999a
 80039ec:	3fb99999 	.word	0x3fb99999
 80039f0:	54442d18 	.word	0x54442d18
 80039f4:	401921fb 	.word	0x401921fb
 80039f8:	3fe00000 	.word	0x3fe00000
 80039fc:	0801030c 	.word	0x0801030c
 8003a00:	20000784 	.word	0x20000784
 8003a04:	08010328 	.word	0x08010328
 8003a08:	08010340 	.word	0x08010340
 8003a0c:	08010354 	.word	0x08010354
 8003a10:	08010370 	.word	0x08010370
 8003a14:	08010394 	.word	0x08010394

08003a18 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint16_t device_id = (rx_frame->id) & 0b1111;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	83fb      	strh	r3, [r7, #30]
  if (device_id && device_id != controller->device_id) {
 8003a2e:	8bfb      	ldrh	r3, [r7, #30]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <MotorController_handleCANMessage+0x2c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	8bfa      	ldrh	r2, [r7, #30]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	f040 857d 	bne.w	800453e <MotorController_handleCANMessage+0xb26>
    return;
  }

  uint16_t func_id = (rx_frame->id) >> 4;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	83bb      	strh	r3, [r7, #28]
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	795b      	ldrb	r3, [r3, #5]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <MotorController_handleCANMessage+0x44>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	88db      	ldrh	r3, [r3, #6]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <MotorController_handleCANMessage+0x48>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <MotorController_handleCANMessage+0x4a>
 8003a60:	2300      	movs	r3, #0
 8003a62:	76fb      	strb	r3, [r7, #27]

  if (is_get_request) {
 8003a64:	7efb      	ldrb	r3, [r7, #27]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 836b 	beq.w	8004142 <MotorController_handleCANMessage+0x72a>
    CAN_Frame tx_frame;

    tx_frame.id = rx_frame->id;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60bb      	str	r3, [r7, #8]
    tx_frame.id_type = CAN_ID_STANDARD;
 8003a72:	2300      	movs	r3, #0
 8003a74:	733b      	strb	r3, [r7, #12]
    tx_frame.frame_type = CAN_FRAME_DATA;
 8003a76:	2301      	movs	r3, #1
 8003a78:	737b      	strb	r3, [r7, #13]
    tx_frame.size = 8;
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	81fb      	strh	r3, [r7, #14]

    switch (func_id) {
 8003a7e:	8bbb      	ldrh	r3, [r7, #28]
 8003a80:	2b7f      	cmp	r3, #127	; 0x7f
 8003a82:	f200 8357 	bhi.w	8004134 <MotorController_handleCANMessage+0x71c>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <MotorController_handleCANMessage+0x74>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003c8d 	.word	0x08003c8d
 8003a90:	08003c9f 	.word	0x08003c9f
 8003a94:	08003cad 	.word	0x08003cad
 8003a98:	08003cbd 	.word	0x08003cbd
 8003a9c:	08004135 	.word	0x08004135
 8003aa0:	08004135 	.word	0x08004135
 8003aa4:	08003cd9 	.word	0x08003cd9
 8003aa8:	08004135 	.word	0x08004135
 8003aac:	08004135 	.word	0x08004135
 8003ab0:	08004135 	.word	0x08004135
 8003ab4:	08004135 	.word	0x08004135
 8003ab8:	08004135 	.word	0x08004135
 8003abc:	08004135 	.word	0x08004135
 8003ac0:	08004135 	.word	0x08004135
 8003ac4:	08004135 	.word	0x08004135
 8003ac8:	08004135 	.word	0x08004135
 8003acc:	08003ce9 	.word	0x08003ce9
 8003ad0:	08004135 	.word	0x08004135
 8003ad4:	08003d09 	.word	0x08003d09
 8003ad8:	08003d1b 	.word	0x08003d1b
 8003adc:	08003d37 	.word	0x08003d37
 8003ae0:	08003d49 	.word	0x08003d49
 8003ae4:	08003d5b 	.word	0x08003d5b
 8003ae8:	08004135 	.word	0x08004135
 8003aec:	08004135 	.word	0x08004135
 8003af0:	08004135 	.word	0x08004135
 8003af4:	08004135 	.word	0x08004135
 8003af8:	08004135 	.word	0x08004135
 8003afc:	08004135 	.word	0x08004135
 8003b00:	08004135 	.word	0x08004135
 8003b04:	08004135 	.word	0x08004135
 8003b08:	08004135 	.word	0x08004135
 8003b0c:	08003d6d 	.word	0x08003d6d
 8003b10:	08003d8d 	.word	0x08003d8d
 8003b14:	08003dc1 	.word	0x08003dc1
 8003b18:	08003df5 	.word	0x08003df5
 8003b1c:	08004135 	.word	0x08004135
 8003b20:	08004135 	.word	0x08004135
 8003b24:	08004135 	.word	0x08004135
 8003b28:	08004135 	.word	0x08004135
 8003b2c:	08004135 	.word	0x08004135
 8003b30:	08004135 	.word	0x08004135
 8003b34:	08004135 	.word	0x08004135
 8003b38:	08004135 	.word	0x08004135
 8003b3c:	08004135 	.word	0x08004135
 8003b40:	08004135 	.word	0x08004135
 8003b44:	08004135 	.word	0x08004135
 8003b48:	08004135 	.word	0x08004135
 8003b4c:	08003e07 	.word	0x08003e07
 8003b50:	08003e19 	.word	0x08003e19
 8003b54:	08003e2b 	.word	0x08003e2b
 8003b58:	08004135 	.word	0x08004135
 8003b5c:	08004135 	.word	0x08004135
 8003b60:	08004135 	.word	0x08004135
 8003b64:	08004135 	.word	0x08004135
 8003b68:	08004135 	.word	0x08004135
 8003b6c:	08004135 	.word	0x08004135
 8003b70:	08004135 	.word	0x08004135
 8003b74:	08004135 	.word	0x08004135
 8003b78:	08004135 	.word	0x08004135
 8003b7c:	08004135 	.word	0x08004135
 8003b80:	08004135 	.word	0x08004135
 8003b84:	08004135 	.word	0x08004135
 8003b88:	08004135 	.word	0x08004135
 8003b8c:	08003e3d 	.word	0x08003e3d
 8003b90:	08003e4f 	.word	0x08003e4f
 8003b94:	08003e6f 	.word	0x08003e6f
 8003b98:	08003e8f 	.word	0x08003e8f
 8003b9c:	08003eb3 	.word	0x08003eb3
 8003ba0:	08003ec9 	.word	0x08003ec9
 8003ba4:	08003eed 	.word	0x08003eed
 8003ba8:	08003f01 	.word	0x08003f01
 8003bac:	08003f25 	.word	0x08003f25
 8003bb0:	08004135 	.word	0x08004135
 8003bb4:	08003f49 	.word	0x08003f49
 8003bb8:	08003f6d 	.word	0x08003f6d
 8003bbc:	08003f91 	.word	0x08003f91
 8003bc0:	08003fb5 	.word	0x08003fb5
 8003bc4:	08003fd9 	.word	0x08003fd9
 8003bc8:	08004135 	.word	0x08004135
 8003bcc:	08003ffd 	.word	0x08003ffd
 8003bd0:	08004021 	.word	0x08004021
 8003bd4:	08004045 	.word	0x08004045
 8003bd8:	08004135 	.word	0x08004135
 8003bdc:	08004069 	.word	0x08004069
 8003be0:	0800408d 	.word	0x0800408d
 8003be4:	080040b1 	.word	0x080040b1
 8003be8:	080040c5 	.word	0x080040c5
 8003bec:	080040e9 	.word	0x080040e9
 8003bf0:	080040fd 	.word	0x080040fd
 8003bf4:	08004121 	.word	0x08004121
 8003bf8:	08004135 	.word	0x08004135
 8003bfc:	08004135 	.word	0x08004135
 8003c00:	08004135 	.word	0x08004135
 8003c04:	08004135 	.word	0x08004135
 8003c08:	08004135 	.word	0x08004135
 8003c0c:	08004135 	.word	0x08004135
 8003c10:	08004135 	.word	0x08004135
 8003c14:	08004135 	.word	0x08004135
 8003c18:	08004135 	.word	0x08004135
 8003c1c:	08004135 	.word	0x08004135
 8003c20:	08004135 	.word	0x08004135
 8003c24:	08004135 	.word	0x08004135
 8003c28:	08004135 	.word	0x08004135
 8003c2c:	08004135 	.word	0x08004135
 8003c30:	08004135 	.word	0x08004135
 8003c34:	08004135 	.word	0x08004135
 8003c38:	08004135 	.word	0x08004135
 8003c3c:	08004135 	.word	0x08004135
 8003c40:	08004135 	.word	0x08004135
 8003c44:	08004135 	.word	0x08004135
 8003c48:	08004135 	.word	0x08004135
 8003c4c:	08004135 	.word	0x08004135
 8003c50:	08004135 	.word	0x08004135
 8003c54:	08004135 	.word	0x08004135
 8003c58:	08004135 	.word	0x08004135
 8003c5c:	08004135 	.word	0x08004135
 8003c60:	08004135 	.word	0x08004135
 8003c64:	08004135 	.word	0x08004135
 8003c68:	08004135 	.word	0x08004135
 8003c6c:	08004135 	.word	0x08004135
 8003c70:	08004135 	.word	0x08004135
 8003c74:	08004135 	.word	0x08004135
 8003c78:	08004135 	.word	0x08004135
 8003c7c:	08004135 	.word	0x08004135
 8003c80:	08004135 	.word	0x08004135
 8003c84:	08004135 	.word	0x08004135
 8003c88:	08003ccb 	.word	0x08003ccb
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff f858 	bl	8002d44 <MotorController_setMode>
        tx_frame.size = 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8003c98:	23ac      	movs	r3, #172	; 0xac
 8003c9a:	743b      	strb	r3, [r7, #16]
        break;
 8003c9c:	e24a      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ID:
        tx_frame.size = 1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003ca8:	743b      	strb	r3, [r7, #16]
        break;
 8003caa:	e243      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_VERSION:
        tx_frame.size = 1;
 8003cac:	2301      	movs	r3, #1
 8003cae:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	743b      	strb	r3, [r7, #16]
        break;
 8003cba:	e23b      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_SAFETY:
        tx_frame.size = 1;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->error;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8003cc6:	743b      	strb	r3, [r7, #16]
        break;
 8003cc8:	e234      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_PING:
        tx_frame.size = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003cd4:	743b      	strb	r3, [r7, #16]
        break;
 8003cd6:	e22d      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_MODE:
        tx_frame.size = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = MotorController_getMode(controller);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff f823 	bl	8002d28 <MotorController_getMode>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	743b      	strb	r3, [r7, #16]
        break;
 8003ce6:	e225      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ENCODER_CPR:
        tx_frame.size = 4;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	81fb      	strh	r3, [r7, #14]
        *((int32_t *)tx_frame.data) = controller->encoder.direction * (int32_t)controller->encoder.cpr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	899b      	ldrh	r3, [r3, #12]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	3308      	adds	r3, #8
 8003d00:	fb01 f202 	mul.w	r2, r1, r2
 8003d04:	601a      	str	r2, [r3, #0]
        break;
 8003d06:	e215      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        tx_frame.size = 4;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_offset;
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	3308      	adds	r3, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6912      	ldr	r2, [r2, #16]
 8003d16:	601a      	str	r2, [r3, #0]
        break;
 8003d18:	e20c      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ENCODER_N_ROTATIONS:
        tx_frame.size = 4;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	3308      	adds	r3, #8
 8003d28:	ee07 2a90 	vmov	s15, r2
 8003d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d30:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003d34:	e1fe      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ENCODER_POSITION_RELATIVE:
        tx_frame.size = 4;
 8003d36:	2304      	movs	r3, #4
 8003d38:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_relative;
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	3308      	adds	r3, #8
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d44:	601a      	str	r2, [r3, #0]
        break;
 8003d46:	e1f5      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ENCODER_POSITION:
        tx_frame.size = 4;
 8003d48:	2304      	movs	r3, #4
 8003d4a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position;
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	3308      	adds	r3, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d56:	601a      	str	r2, [r3, #0]
        break;
 8003d58:	e1ec      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_ENCODER_VELOCITY:
        tx_frame.size = 4;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity;
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	3308      	adds	r3, #8
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d68:	601a      	str	r2, [r3, #0]
        break;
 8003d6a:	e1e3      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        tx_frame.size = 8;
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8003d70:	f107 0308 	add.w	r3, r7, #8
 8003d74:	3308      	adds	r3, #8
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d7a:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	3308      	adds	r3, #8
 8003d82:	3304      	adds	r3, #4
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d88:	601a      	str	r2, [r3, #0]
        break;
 8003d8a:	e1d3      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POWERSTAGE_ADC_READING_RAW_A_B_C:
        tx_frame.size = 6;
 8003d8c:	2306      	movs	r3, #6
 8003d8e:	81fb      	strh	r3, [r7, #14]
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	3308      	adds	r3, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8003d9c:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_raw[1];
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	3308      	adds	r3, #8
 8003da4:	3302      	adds	r3, #2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f8b2 2052 	ldrh.w	r2, [r2, #82]	; 0x52
 8003dac:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	3308      	adds	r3, #8
 8003db4:	3304      	adds	r3, #4
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8003dbc:	801a      	strh	r2, [r3, #0]
        break;
 8003dbe:	e1b9      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POWERSTAGE_ADC_READING_OFFSET_A_B_C:
        tx_frame.size = 6;
 8003dc0:	2306      	movs	r3, #6
 8003dc2:	81fb      	strh	r3, [r7, #14]
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8003dc4:	f107 0308 	add.w	r3, r7, #8
 8003dc8:	3308      	adds	r3, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8003dd0:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	3302      	adds	r3, #2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	f9b2 2058 	ldrsh.w	r2, [r2, #88]	; 0x58
 8003de0:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	3308      	adds	r3, #8
 8003de8:	3304      	adds	r3, #4
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	f9b2 205a 	ldrsh.w	r2, [r2, #90]	; 0x5a
 8003df0:	801a      	strh	r2, [r3, #0]
        break;
 8003df2:	e19f      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POWERSTAGE_BUS_VOLTAGE:
        tx_frame.size = 4;
 8003df4:	2304      	movs	r3, #4
 8003df6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e02:	601a      	str	r2, [r3, #0]
        break;
 8003e04:	e196      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_MOTOR_POLE_PAIRS:
        tx_frame.size = 4;
 8003e06:	2304      	movs	r3, #4
 8003e08:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	3308      	adds	r3, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003e14:	601a      	str	r2, [r3, #0]
        break;
 8003e16:	e18d      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_MOTOR_KV_RATING:
        tx_frame.size = 4;
 8003e18:	2304      	movs	r3, #4
 8003e1a:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8003e1c:	f107 0308 	add.w	r3, r7, #8
 8003e20:	3308      	adds	r3, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003e26:	601a      	str	r2, [r3, #0]
        break;
 8003e28:	e184      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_MOTOR_FLUX_ANGLE_OFFSET:
        tx_frame.size = 4;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	3308      	adds	r3, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e38:	601a      	str	r2, [r3, #0]
        break;
 8003e3a:	e17b      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        tx_frame.size = 4;
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.current_filter_alpha;
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	3308      	adds	r3, #8
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e4a:	601a      	str	r2, [r3, #0]
        break;
 8003e4c:	e172      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        tx_frame.size = 8;
 8003e4e:	2308      	movs	r3, #8
 8003e50:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_kp;
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	3308      	adds	r3, #8
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e5c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_ki;
 8003e5e:	f107 0308 	add.w	r3, r7, #8
 8003e62:	3308      	adds	r3, #8
 8003e64:	3304      	adds	r3, #4
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e6a:	601a      	str	r2, [r3, #0]
        break;
 8003e6c:	e162      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        tx_frame.size = 8;
 8003e6e:	2308      	movs	r3, #8
 8003e70:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_kp;
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	3308      	adds	r3, #8
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003e7c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_ki;
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	3308      	adds	r3, #8
 8003e84:	3304      	adds	r3, #4
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003e8a:	601a      	str	r2, [r3, #0]
        break;
 8003e8c:	e152      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_A_I_B_MEASURED:
        tx_frame.size = 8;
 8003e8e:	2308      	movs	r3, #8
 8003e90:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_a_measured;
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	3308      	adds	r3, #8
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003e9e:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8003ea0:	f107 0308 	add.w	r3, r7, #8
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003eae:	601a      	str	r2, [r3, #0]
        break;
 8003eb0:	e140      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_C_MEASURED:
        tx_frame.size = 4;
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	3308      	adds	r3, #8
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003ec4:	601a      	str	r2, [r3, #0]
        break;
 8003ec6:	e135      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        tx_frame.size = 8;
 8003ec8:	2308      	movs	r3, #8
 8003eca:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8003ecc:	f107 0308 	add.w	r3, r7, #8
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003ed8:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	3308      	adds	r3, #8
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ee8:	601a      	str	r2, [r3, #0]
        break;
 8003eea:	e123      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        tx_frame.size = 4;
 8003eec:	2304      	movs	r3, #4
 8003eee:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003efc:	601a      	str	r2, [r3, #0]
        break;
 8003efe:	e119      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_ALPHA_I_BETA_MEASURED:
        tx_frame.size = 8;
 8003f00:	2308      	movs	r3, #8
 8003f02:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_alpha_measured;
 8003f04:	f107 0308 	add.w	r3, r7, #8
 8003f08:	3308      	adds	r3, #8
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8003f10:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	3308      	adds	r3, #8
 8003f18:	3304      	adds	r3, #4
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003f20:	601a      	str	r2, [r3, #0]
        break;
 8003f22:	e107      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        tx_frame.size = 8;
 8003f24:	2308      	movs	r3, #8
 8003f26:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003f34:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8003f36:	f107 0308 	add.w	r3, r7, #8
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8003f44:	601a      	str	r2, [r3, #0]
        break;
 8003f46:	e0f5      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        tx_frame.size = 8;
 8003f48:	2308      	movs	r3, #8
 8003f4a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8003f4c:	f107 0308 	add.w	r3, r7, #8
 8003f50:	3308      	adds	r3, #8
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8003f58:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	3308      	adds	r3, #8
 8003f60:	3304      	adds	r3, #4
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003f68:	601a      	str	r2, [r3, #0]
        break;
 8003f6a:	e0e3      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_MEASURED:
        tx_frame.size = 8;
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_measured;
 8003f70:	f107 0308 	add.w	r3, r7, #8
 8003f74:	3308      	adds	r3, #8
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8003f7c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	3308      	adds	r3, #8
 8003f84:	3304      	adds	r3, #4
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8003f8c:	601a      	str	r2, [r3, #0]
        break;
 8003f8e:	e0d1      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_TARGET:
        tx_frame.size = 8;
 8003f90:	2308      	movs	r3, #8
 8003f92:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	3308      	adds	r3, #8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8003fa0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_target;
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	3304      	adds	r3, #4
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8003fb0:	601a      	str	r2, [r3, #0]
        break;
 8003fb2:	e0bf      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        tx_frame.size = 8;
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8003fb8:	f107 0308 	add.w	r3, r7, #8
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8003fc4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	3308      	adds	r3, #8
 8003fcc:	3304      	adds	r3, #4
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 8003fd4:	601a      	str	r2, [r3, #0]
        break;
 8003fd6:	e0ad      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_INTEGRATOR:
        tx_frame.size = 8;
 8003fd8:	2308      	movs	r3, #8
 8003fda:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003fe8:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	3308      	adds	r3, #8
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003ff8:	601a      	str	r2, [r3, #0]
        break;
 8003ffa:	e09b      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_POSITION_KP_KI:
        tx_frame.size = 8;
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	3308      	adds	r3, #8
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 800400c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	3308      	adds	r3, #8
 8004014:	3304      	adds	r3, #4
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800401c:	601a      	str	r2, [r3, #0]
        break;
 800401e:	e089      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_KP_KI:
        tx_frame.size = 8;
 8004020:	2308      	movs	r3, #8
 8004022:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_kp;
 8004024:	f107 0308 	add.w	r3, r7, #8
 8004028:	3308      	adds	r3, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8004030:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_ki;
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	3308      	adds	r3, #8
 8004038:	3304      	adds	r3, #4
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8004040:	601a      	str	r2, [r3, #0]
        break;
 8004042:	e077      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_VELOCITY_LIMIT:
        tx_frame.size = 8;
 8004044:	2308      	movs	r3, #8
 8004046:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_limit;
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	3308      	adds	r3, #8
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8004054:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit;
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	3308      	adds	r3, #8
 800405c:	3304      	adds	r3, #4
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8004064:	601a      	str	r2, [r3, #0]
        break;
 8004066:	e065      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        tx_frame.size = 8;
 8004068:	2308      	movs	r3, #8
 800406a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 800406c:	f107 0308 	add.w	r3, r7, #8
 8004070:	3308      	adds	r3, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8004078:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 800407a:	f107 0308 	add.w	r3, r7, #8
 800407e:	3308      	adds	r3, #8
 8004080:	3304      	adds	r3, #4
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 8004088:	601a      	str	r2, [r3, #0]
        break;
 800408a:	e053      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        tx_frame.size = 8;
 800408c:	2308      	movs	r3, #8
 800408e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8004090:	f107 0308 	add.w	r3, r7, #8
 8004094:	3308      	adds	r3, #8
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800409c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	3308      	adds	r3, #8
 80040a4:	3304      	adds	r3, #4
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 80040ac:	601a      	str	r2, [r3, #0]
        break;
 80040ae:	e041      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_SETPOINT:
        tx_frame.size = 4;
 80040b0:	2304      	movs	r3, #4
 80040b2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	3308      	adds	r3, #8
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 80040c0:	601a      	str	r2, [r3, #0]
        break;
 80040c2:	e037      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        tx_frame.size = 8;
 80040c4:	2308      	movs	r3, #8
 80040c6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 80040c8:	f107 0308 	add.w	r3, r7, #8
 80040cc:	3308      	adds	r3, #8
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 80040d4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	3308      	adds	r3, #8
 80040dc:	3304      	adds	r3, #4
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 80040e4:	601a      	str	r2, [r3, #0]
        break;
 80040e6:	e025      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_SETPOINT:
        tx_frame.size = 4;
 80040e8:	2304      	movs	r3, #4
 80040ea:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 80040ec:	f107 0308 	add.w	r3, r7, #8
 80040f0:	3308      	adds	r3, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 80040f8:	601a      	str	r2, [r3, #0]
        break;
 80040fa:	e01b      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        tx_frame.size = 8;
 80040fc:	2308      	movs	r3, #8
 80040fe:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8004100:	f107 0308 	add.w	r3, r7, #8
 8004104:	3308      	adds	r3, #8
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 800410c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	3308      	adds	r3, #8
 8004114:	3304      	adds	r3, #4
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 800411c:	601a      	str	r2, [r3, #0]
        break;
 800411e:	e009      	b.n	8004134 <MotorController_handleCANMessage+0x71c>
      case CAN_ID_POSITION_CONTROLLER_POSITION_SETPOINT:
        tx_frame.size = 4;
 8004120:	2304      	movs	r3, #4
 8004122:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8004124:	f107 0308 	add.w	r3, r7, #8
 8004128:	3308      	adds	r3, #8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8004130:	601a      	str	r2, [r3, #0]
        break;
 8004132:	bf00      	nop
    }
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	4619      	mov	r1, r3
 800413a:	48ca      	ldr	r0, [pc, #808]	; (8004464 <MotorController_handleCANMessage+0xa4c>)
 800413c:	f7fd f85c 	bl	80011f8 <CAN_putTxFrame>
 8004140:	e1fe      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
  }
  else {
    switch (func_id) {
 8004142:	8bbb      	ldrh	r3, [r7, #28]
 8004144:	2b7e      	cmp	r3, #126	; 0x7e
 8004146:	f200 81fb 	bhi.w	8004540 <MotorController_handleCANMessage+0xb28>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <MotorController_handleCANMessage+0x738>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	0800434d 	.word	0x0800434d
 8004154:	08004357 	.word	0x08004357
 8004158:	08004541 	.word	0x08004541
 800415c:	08004541 	.word	0x08004541
 8004160:	08004363 	.word	0x08004363
 8004164:	08004541 	.word	0x08004541
 8004168:	08004385 	.word	0x08004385
 800416c:	08004541 	.word	0x08004541
 8004170:	08004541 	.word	0x08004541
 8004174:	08004541 	.word	0x08004541
 8004178:	08004541 	.word	0x08004541
 800417c:	08004541 	.word	0x08004541
 8004180:	08004541 	.word	0x08004541
 8004184:	08004541 	.word	0x08004541
 8004188:	08004541 	.word	0x08004541
 800418c:	08004541 	.word	0x08004541
 8004190:	08004393 	.word	0x08004393
 8004194:	08004541 	.word	0x08004541
 8004198:	080043bd 	.word	0x080043bd
 800419c:	08004541 	.word	0x08004541
 80041a0:	08004541 	.word	0x08004541
 80041a4:	08004541 	.word	0x08004541
 80041a8:	08004541 	.word	0x08004541
 80041ac:	08004541 	.word	0x08004541
 80041b0:	08004541 	.word	0x08004541
 80041b4:	08004541 	.word	0x08004541
 80041b8:	08004541 	.word	0x08004541
 80041bc:	08004541 	.word	0x08004541
 80041c0:	08004541 	.word	0x08004541
 80041c4:	08004541 	.word	0x08004541
 80041c8:	08004541 	.word	0x08004541
 80041cc:	08004541 	.word	0x08004541
 80041d0:	080043c9 	.word	0x080043c9
 80041d4:	08004541 	.word	0x08004541
 80041d8:	08004541 	.word	0x08004541
 80041dc:	08004541 	.word	0x08004541
 80041e0:	08004541 	.word	0x08004541
 80041e4:	08004541 	.word	0x08004541
 80041e8:	08004541 	.word	0x08004541
 80041ec:	08004541 	.word	0x08004541
 80041f0:	08004541 	.word	0x08004541
 80041f4:	08004541 	.word	0x08004541
 80041f8:	08004541 	.word	0x08004541
 80041fc:	08004541 	.word	0x08004541
 8004200:	08004541 	.word	0x08004541
 8004204:	08004541 	.word	0x08004541
 8004208:	08004541 	.word	0x08004541
 800420c:	08004541 	.word	0x08004541
 8004210:	08004541 	.word	0x08004541
 8004214:	08004541 	.word	0x08004541
 8004218:	08004541 	.word	0x08004541
 800421c:	08004541 	.word	0x08004541
 8004220:	08004541 	.word	0x08004541
 8004224:	08004541 	.word	0x08004541
 8004228:	08004541 	.word	0x08004541
 800422c:	08004541 	.word	0x08004541
 8004230:	08004541 	.word	0x08004541
 8004234:	08004541 	.word	0x08004541
 8004238:	08004541 	.word	0x08004541
 800423c:	08004541 	.word	0x08004541
 8004240:	08004541 	.word	0x08004541
 8004244:	08004541 	.word	0x08004541
 8004248:	08004541 	.word	0x08004541
 800424c:	08004541 	.word	0x08004541
 8004250:	080043e1 	.word	0x080043e1
 8004254:	080043ed 	.word	0x080043ed
 8004258:	08004405 	.word	0x08004405
 800425c:	08004541 	.word	0x08004541
 8004260:	08004541 	.word	0x08004541
 8004264:	0800441d 	.word	0x0800441d
 8004268:	08004439 	.word	0x08004439
 800426c:	08004541 	.word	0x08004541
 8004270:	08004447 	.word	0x08004447
 8004274:	08004541 	.word	0x08004541
 8004278:	0800446d 	.word	0x0800446d
 800427c:	08004541 	.word	0x08004541
 8004280:	08004541 	.word	0x08004541
 8004284:	08004489 	.word	0x08004489
 8004288:	08004541 	.word	0x08004541
 800428c:	08004541 	.word	0x08004541
 8004290:	080044a5 	.word	0x080044a5
 8004294:	080044c1 	.word	0x080044c1
 8004298:	080044dd 	.word	0x080044dd
 800429c:	08004541 	.word	0x08004541
 80042a0:	080044f9 	.word	0x080044f9
 80042a4:	08004515 	.word	0x08004515
 80042a8:	08004541 	.word	0x08004541
 80042ac:	08004523 	.word	0x08004523
 80042b0:	08004541 	.word	0x08004541
 80042b4:	08004531 	.word	0x08004531
 80042b8:	08004541 	.word	0x08004541
 80042bc:	08004541 	.word	0x08004541
 80042c0:	08004541 	.word	0x08004541
 80042c4:	08004541 	.word	0x08004541
 80042c8:	08004541 	.word	0x08004541
 80042cc:	08004541 	.word	0x08004541
 80042d0:	08004541 	.word	0x08004541
 80042d4:	08004541 	.word	0x08004541
 80042d8:	08004541 	.word	0x08004541
 80042dc:	08004541 	.word	0x08004541
 80042e0:	08004541 	.word	0x08004541
 80042e4:	08004541 	.word	0x08004541
 80042e8:	08004541 	.word	0x08004541
 80042ec:	08004541 	.word	0x08004541
 80042f0:	08004541 	.word	0x08004541
 80042f4:	08004541 	.word	0x08004541
 80042f8:	08004541 	.word	0x08004541
 80042fc:	08004541 	.word	0x08004541
 8004300:	08004541 	.word	0x08004541
 8004304:	08004541 	.word	0x08004541
 8004308:	08004541 	.word	0x08004541
 800430c:	08004541 	.word	0x08004541
 8004310:	08004541 	.word	0x08004541
 8004314:	08004541 	.word	0x08004541
 8004318:	08004541 	.word	0x08004541
 800431c:	08004541 	.word	0x08004541
 8004320:	08004541 	.word	0x08004541
 8004324:	08004541 	.word	0x08004541
 8004328:	08004541 	.word	0x08004541
 800432c:	08004541 	.word	0x08004541
 8004330:	08004541 	.word	0x08004541
 8004334:	08004541 	.word	0x08004541
 8004338:	08004541 	.word	0x08004541
 800433c:	08004541 	.word	0x08004541
 8004340:	08004541 	.word	0x08004541
 8004344:	08004541 	.word	0x08004541
 8004348:	0800437b 	.word	0x0800437b
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 800434c:	2100      	movs	r1, #0
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe fcf8 	bl	8002d44 <MotorController_setMode>
        break;
 8004354:	e0f4      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_ID:
        controller->device_id = *((uint8_t *)rx_frame->data);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	7a1a      	ldrb	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        break;
 8004360:	e0ee      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_FLASH:
        if (*((uint8_t *)rx_frame->data)) {
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	7a1b      	ldrb	r3, [r3, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <MotorController_handleCANMessage+0x95a>
          MotorController_storeConfig(controller);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fe fe7a 	bl	8003064 <MotorController_storeConfig>
        }
        else {
          MotorController_loadConfig(controller);
        }
        break;
 8004370:	e0e6      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
          MotorController_loadConfig(controller);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe fdf6 	bl	8002f64 <MotorController_loadConfig>
        break;
 8004378:	e0e2      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_HEARTBEAT:
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 800437a:	4b3b      	ldr	r3, [pc, #236]	; (8004468 <MotorController_handleCANMessage+0xa50>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8004382:	e0dd      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_MODE:
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	7a1b      	ldrb	r3, [r3, #8]
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fe fcda 	bl	8002d44 <MotorController_setMode>
        break;
 8004390:	e0d6      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_ENCODER_CPR:
        controller->encoder.cpr = abs(*((int32_t *)rx_frame->data));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfb8      	it	lt
 800439c:	425b      	neglt	r3, r3
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	819a      	strh	r2, [r3, #12]
        controller->encoder.direction = *((int32_t *)rx_frame->data) > 0 ? 1 : -1;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dd01      	ble.n	80043b2 <MotorController_handleCANMessage+0x99a>
 80043ae:	2201      	movs	r2, #1
 80043b0:	e001      	b.n	80043b6 <MotorController_handleCANMessage+0x99e>
 80043b2:	f04f 32ff 	mov.w	r2, #4294967295
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	739a      	strb	r2, [r3, #14]
        break;
 80043ba:	e0c1      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        controller->encoder.position_offset = *((float *)rx_frame->data);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]
        break;
 80043c6:	e0bb      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	649a      	str	r2, [r3, #72]	; 0x48
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	3304      	adds	r3, #4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80043de:	e0af      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        controller->current_controller.current_filter_alpha = *((float *)rx_frame->data);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80043ea:	e0a9      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        controller->current_controller.i_q_kp = *((float *)rx_frame->data);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	3308      	adds	r3, #8
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	671a      	str	r2, [r3, #112]	; 0x70
        controller->current_controller.i_q_ki = *((float *)rx_frame->data + 1);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	3304      	adds	r3, #4
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004402:	e09d      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        controller->current_controller.i_d_kp = *((float *)rx_frame->data);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	679a      	str	r2, [r3, #120]	; 0x78
        controller->current_controller.i_d_ki = *((float *)rx_frame->data + 1);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	3304      	adds	r3, #4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800441a:	e091      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        controller->current_controller.v_a_setpoint = *((float *)rx_frame->data);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	3308      	adds	r3, #8
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        controller->current_controller.v_b_setpoint = *((float *)rx_frame->data + 1);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	3304      	adds	r3, #4
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004436:	e083      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        controller->current_controller.v_c_setpoint = *((float *)rx_frame->data);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004444:	e07c      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        controller->current_controller.v_alpha_setpoint = *((float *)rx_frame->data);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->current_controller.v_beta_setpoint = *((float *)rx_frame->data + 1);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	3304      	adds	r3, #4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004460:	e06e      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
 8004462:	bf00      	nop
 8004464:	20000440 	.word	0x20000440
 8004468:	20000608 	.word	0x20000608
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        controller->current_controller.v_q_setpoint = *((float *)rx_frame->data);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        controller->current_controller.v_d_setpoint = *((float *)rx_frame->data + 1);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	3304      	adds	r3, #4
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004486:	e05b      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        controller->current_controller.i_q_setpoint = *((float *)rx_frame->data);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        controller->current_controller.i_d_setpoint = *((float *)rx_frame->data + 1);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	3304      	adds	r3, #4
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80044a2:	e04d      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_POSITION_KP_KI:
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	3304      	adds	r3, #4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        break;
 80044be:	e03f      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_KP_KI:
        controller->position_controller.velocity_kp = *((float *)rx_frame->data);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        controller->position_controller.velocity_ki = *((float *)rx_frame->data + 1);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	3304      	adds	r3, #4
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        break;
 80044da:	e031      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_VELOCITY_LIMIT:
        controller->position_controller.torque_limit = *((float *)rx_frame->data);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	3308      	adds	r3, #8
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        controller->position_controller.velocity_limit = *((float *)rx_frame->data + 1);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	3308      	adds	r3, #8
 80044ec:	3304      	adds	r3, #4
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        break;
 80044f6:	e023      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	3308      	adds	r3, #8
 8004508:	3304      	adds	r3, #4
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        break;
 8004512:	e015      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        break;
 8004520:	e00e      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        break;
 800452e:	e007      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        break;
 800453c:	e000      	b.n	8004540 <MotorController_handleCANMessage+0xb28>
    return;
 800453e:	bf00      	nop
    }
  }
}
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop

08004548 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004552:	edc7 0a02 	vstr	s1, [r7, #8]
 8004556:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 800455a:	ed97 7a03 	vldr	s14, [r7, #12]
 800455e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456a:	dd01      	ble.n	8004570 <clampf+0x28>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	e00b      	b.n	8004588 <clampf+0x40>
 8004570:	ed97 7a03 	vldr	s14, [r7, #12]
 8004574:	edd7 7a02 	vldr	s15, [r7, #8]
 8004578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004580:	d501      	bpl.n	8004586 <clampf+0x3e>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	e000      	b.n	8004588 <clampf+0x40>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	ee07 3a90 	vmov	s15, r3
}
 800458c:	eeb0 0a67 	vmov.f32	s0, s15
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  controller->position_kp = 10;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	; (8004604 <PositionController_init+0x68>)
 80045a8:	601a      	str	r2, [r3, #0]
  controller->position_ki = 0;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
  controller->velocity_kp = 0.001;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <PositionController_init+0x6c>)
 80045b6:	609a      	str	r2, [r3, #8]
  controller->velocity_ki = 0.000003;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <PositionController_init+0x70>)
 80045bc:	60da      	str	r2, [r3, #12]

  controller->torque_limit = 0.01;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <PositionController_init+0x74>)
 80045c2:	611a      	str	r2, [r3, #16]

  controller->velocity_limit = 20;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <PositionController_init+0x78>)
 80045c8:	615a      	str	r2, [r3, #20]

  controller->position_limit_lower = -INFINITY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <PositionController_init+0x7c>)
 80045ce:	61da      	str	r2, [r3, #28]
  controller->position_limit_upper = INFINITY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 80045d6:	619a      	str	r2, [r3, #24]

  controller->velocity_setpoint = 0;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	635a      	str	r2, [r3, #52]	; 0x34
  controller->position_setpoint = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

  controller->position_integrator = 0;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
  controller->velocity_integrator = 0;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	41200000 	.word	0x41200000
 8004608:	3a83126f 	.word	0x3a83126f
 800460c:	3649539c 	.word	0x3649539c
 8004610:	3c23d70a 	.word	0x3c23d70a
 8004614:	41a00000 	.word	0x41a00000
 8004618:	ff800000 	.word	0xff800000

0800461c <PositionController_update>:

void PositionController_update(PositionController *controller, Mode mode) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
  float position_setpoint = controller->position_target;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	61fb      	str	r3, [r7, #28]
  position_setpoint = clampf(
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	edd3 7a07 	vldr	s15, [r3, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	ed93 7a06 	vldr	s14, [r3, #24]
 800463a:	eeb0 1a47 	vmov.f32	s2, s14
 800463e:	eef0 0a67 	vmov.f32	s1, s15
 8004642:	ed97 0a07 	vldr	s0, [r7, #28]
 8004646:	f7ff ff7f 	bl	8004548 <clampf>
 800464a:	ed87 0a07 	vstr	s0, [r7, #28]
      position_setpoint,
      controller->position_limit_lower,
      controller->position_limit_upper);

  controller->position_setpoint = position_setpoint;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

  float position_error = controller->position_setpoint - controller->position_measured;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004664:	edc7 7a06 	vstr	s15, [r7, #24]

  float velocity_setpoint = controller->position_kp * position_error + controller->velocity_target;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	ed93 7a00 	vldr	s14, [r3]
 800466e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800467c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004680:	edc7 7a05 	vstr	s15, [r7, #20]

  velocity_setpoint = clampf(
      velocity_setpoint,
      -controller->velocity_limit,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	edd3 7a05 	vldr	s15, [r3, #20]
  velocity_setpoint = clampf(
 800468a:	eef1 7a67 	vneg.f32	s15, s15
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	ed93 7a05 	vldr	s14, [r3, #20]
 8004694:	eeb0 1a47 	vmov.f32	s2, s14
 8004698:	eef0 0a67 	vmov.f32	s1, s15
 800469c:	ed97 0a05 	vldr	s0, [r7, #20]
 80046a0:	f7ff ff52 	bl	8004548 <clampf>
 80046a4:	ed87 0a05 	vstr	s0, [r7, #20]
      controller->velocity_limit);
  controller->velocity_setpoint = velocity_setpoint;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34

  float velocity_error = controller->velocity_setpoint - controller->velocity_measured;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80046ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046be:	edc7 7a04 	vstr	s15, [r7, #16]

  controller->velocity_integrator += controller->velocity_ki * velocity_error;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80046ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80046d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  controller->velocity_integrator = clampf(
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
      controller->velocity_integrator,
      -2 * controller->velocity_limit,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	edd3 7a05 	vldr	s15, [r3, #20]
  controller->velocity_integrator = clampf(
 80046ec:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 80046f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
      2 * controller->velocity_limit);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	edd3 7a05 	vldr	s15, [r3, #20]
  controller->velocity_integrator = clampf(
 80046fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046fe:	eeb0 1a67 	vmov.f32	s2, s15
 8004702:	eef0 0a66 	vmov.f32	s1, s13
 8004706:	eeb0 0a47 	vmov.f32	s0, s14
 800470a:	f7ff ff1d 	bl	8004548 <clampf>
 800470e:	eef0 7a40 	vmov.f32	s15, s0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  if (mode != MODE_TORQUE) {
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b11      	cmp	r3, #17
 800471c:	d028      	beq.n	8004770 <PositionController_update+0x154>
    float torque_setpoint = controller->velocity_kp * velocity_error + controller->velocity_integrator + controller->torque_target;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	ed93 7a02 	vldr	s14, [r3, #8]
 8004724:	edd7 7a04 	vldr	s15, [r7, #16]
 8004728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	edd3 7a08 	vldr	s15, [r3, #32]
 800473c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004740:	edc7 7a03 	vstr	s15, [r7, #12]
    torque_setpoint = clampf(
        torque_setpoint,
        -controller->torque_limit,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	edd3 7a04 	vldr	s15, [r3, #16]
    torque_setpoint = clampf(
 800474a:	eef1 7a67 	vneg.f32	s15, s15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	ed93 7a04 	vldr	s14, [r3, #16]
 8004754:	eeb0 1a47 	vmov.f32	s2, s14
 8004758:	eef0 0a67 	vmov.f32	s1, s15
 800475c:	ed97 0a03 	vldr	s0, [r7, #12]
 8004760:	f7ff fef2 	bl	8004548 <clampf>
 8004764:	ed87 0a03 	vstr	s0, [r7, #12]
        controller->torque_limit);

    controller->torque_setpoint = torque_setpoint;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else {
    controller->torque_setpoint = controller->torque_target;
  }
}
 800476e:	e003      	b.n	8004778 <PositionController_update+0x15c>
    controller->torque_setpoint = controller->torque_target;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004778:	bf00      	nop
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	ed87 0a03 	vstr	s0, [r7, #12]
 800478a:	edc7 0a02 	vstr	s1, [r7, #8]
 800478e:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8004792:	ed97 7a03 	vldr	s14, [r7, #12]
 8004796:	edd7 7a01 	vldr	s15, [r7, #4]
 800479a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	dd01      	ble.n	80047a8 <clampf+0x28>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	e00b      	b.n	80047c0 <clampf+0x40>
 80047a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80047ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80047b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	d501      	bpl.n	80047be <clampf+0x3e>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	e000      	b.n	80047c0 <clampf+0x40>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	ee07 3a90 	vmov	s15, r3
}
 80047c4:	eeb0 0a67 	vmov.f32	s0, s15
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <PowerStage_init>:
 *      Author: TK
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  powerstage->htim = htim;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	601a      	str	r2, [r3, #0]
  powerstage->hadc1 = hadc1;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	605a      	str	r2, [r3, #4]
  powerstage->hadc2 = hadc2;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	609a      	str	r2, [r3, #8]

  powerstage->bus_voltage_measured = 12.;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a04      	ldr	r2, [pc, #16]	; (8004808 <PowerStage_init+0x34>)
 80047f8:	621a      	str	r2, [r3, #32]

  PowerStage_disable(powerstage);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f838 	bl	8004870 <PowerStage_disable>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	41400000 	.word	0x41400000

0800480c <PowerStage_start>:

void PowerStage_start(PowerStage *powerstage) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(powerstage->htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f005 fd17 	bl	800a24c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f005 fdd3 	bl	800a3d0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f006 fecb 	bl	800b5cc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2104      	movs	r1, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f005 fdc7 	bl	800a3d0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2104      	movs	r1, #4
 8004848:	4618      	mov	r0, r3
 800484a:	f006 febf 	bl	800b5cc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2108      	movs	r1, #8
 8004854:	4618      	mov	r0, r3
 8004856:	f005 fdbb 	bl	800a3d0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2108      	movs	r1, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f006 feb3 	bl	800b5cc <HAL_TIMEx_PWMN_Start>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <PowerStage_disable>:

uint8_t PowerStage_isEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disable(PowerStage *powerstage) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	; 0x80
 800487c:	4808      	ldr	r0, [pc, #32]	; (80048a0 <PowerStage_disable+0x30>)
 800487e:	f003 fe13 	bl	80084a8 <HAL_GPIO_WritePin>
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004894:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	48000400 	.word	0x48000400

080048a4 <PowerStage_enable>:

void PowerStage_enable(PowerStage *powerstage) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048be:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80048c0:	2201      	movs	r2, #1
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	4803      	ldr	r0, [pc, #12]	; (80048d4 <PowerStage_enable+0x30>)
 80048c6:	f003 fdef 	bl	80084a8 <HAL_GPIO_WritePin>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	48000400 	.word	0x48000400

080048d8 <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80048e4:	edc7 0a01 	vstr	s1, [r7, #4]
 80048e8:	ed87 1a00 	vstr	s2, [r7]
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80048f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80048f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004902:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800490a:	edc7 7a02 	vstr	s15, [r7, #8]
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	ed93 7a08 	vldr	s14, [r3, #32]
 8004914:	edd7 6a01 	vldr	s13, [r7, #4]
 8004918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004924:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800492c:	edc7 7a01 	vstr	s15, [r7, #4]
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	ed93 7a08 	vldr	s14, [r3, #32]
 8004936:	edd7 6a00 	vldr	s13, [r7]
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004946:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800494a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800494e:	edc7 7a00 	vstr	s15, [r7]

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 8004952:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004a20 <PowerStage_setBridgeOutput+0x148>
 8004956:	eddf 0a33 	vldr	s1, [pc, #204]	; 8004a24 <PowerStage_setBridgeOutput+0x14c>
 800495a:	ed97 0a02 	vldr	s0, [r7, #8]
 800495e:	f7ff ff0f 	bl	8004780 <clampf>
 8004962:	ed87 0a02 	vstr	s0, [r7, #8]
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
 8004966:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8004a20 <PowerStage_setBridgeOutput+0x148>
 800496a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8004a24 <PowerStage_setBridgeOutput+0x14c>
 800496e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004972:	f7ff ff05 	bl	8004780 <clampf>
 8004976:	ed87 0a01 	vstr	s0, [r7, #4]
  v_c = clampf(v_c, 0.02f, 0.98f);
 800497a:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8004a20 <PowerStage_setBridgeOutput+0x148>
 800497e:	eddf 0a29 	vldr	s1, [pc, #164]	; 8004a24 <PowerStage_setBridgeOutput+0x14c>
 8004982:	ed97 0a00 	vldr	s0, [r7]
 8004986:	f7ff fefb 	bl	8004780 <clampf>
 800498a:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	3301      	adds	r3, #1
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 3a90 	vmov	r3, s15
 80049b0:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	3301      	adds	r3, #1
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	3301      	adds	r3, #1
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e8:	edd7 7a00 	vldr	s15, [r7]
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f4:	ee17 3a90 	vmov	r3, s15
 80049f8:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	8afa      	ldrh	r2, [r7, #22]
 8004a02:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	8aba      	ldrh	r2, [r7, #20]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	8a7a      	ldrh	r2, [r7, #18]
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a18:	bf00      	nop
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	3f7ae148 	.word	0x3f7ae148
 8004a24:	3ca3d70a 	.word	0x3ca3d70a

08004a28 <PowerStage_calibratePhaseCurrentOffset>:


void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  powerstage->adc_reading_offset[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2109      	movs	r1, #9
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 fb36 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	b21a      	sxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	835a      	strh	r2, [r3, #26]
  powerstage->adc_reading_offset[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2109      	movs	r1, #9
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 fb2c 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004a50:	4603      	mov	r3, r0
 8004a52:	b21a      	sxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	839a      	strh	r2, [r3, #28]
  powerstage->adc_reading_offset[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f240 110f 	movw	r1, #271	; 0x10f
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fb21 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004a66:	4603      	mov	r3, r0
 8004a68:	b21a      	sxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	83da      	strh	r2, [r3, #30]

}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <PowerStage_getBusVoltage>:

void PowerStage_getBusVoltage(PowerStage *powerstage) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  powerstage->bus_voltage_measured = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f240 110f 	movw	r1, #271	; 0x10f
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fb0d 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fd5f 	bl	8000554 <__aeabi_ui2d>
 8004a96:	a30a      	add	r3, pc, #40	; (adr r3, 8004ac0 <PowerStage_getBusVoltage+0x48>)
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f7fb fdd4 	bl	8000648 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f7fc f8a6 	bl	8000bf8 <__aeabi_d2f>
 8004aac:	4602      	mov	r2, r0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	f3af 8000 	nop.w
 8004ac0:	99999999 	.word	0x99999999
 8004ac4:	3f92f999 	.word	0x3f92f999

08004ac8 <PowerStage_getPhaseCurrent>:

void PowerStage_getPhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2109      	movs	r1, #9
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fae3 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	829a      	strh	r2, [r3, #20]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2109      	movs	r1, #9
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fad9 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004af6:	4603      	mov	r3, r0
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	82da      	strh	r2, [r3, #22]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f240 110f 	movw	r1, #271	; 0x10f
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 face 	bl	80060a8 <HAL_ADCEx_InjectedGetValue>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	831a      	strh	r2, [r3, #24]

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8a9b      	ldrh	r3, [r3, #20]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2a:	eef1 7a67 	vneg.f32	s15, s15
 8004b2e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004b94 <PowerStage_getPhaseCurrent+0xcc>
 8004b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	edc3 7a00 	vstr	s15, [r3]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8adb      	ldrh	r3, [r3, #22]
 8004b40:	461a      	mov	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b52:	eef1 7a67 	vneg.f32	s15, s15
 8004b56:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b94 <PowerStage_getPhaseCurrent+0xcc>
 8004b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	edc3 7a00 	vstr	s15, [r3]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8b1b      	ldrh	r3, [r3, #24]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7a:	eef1 7a67 	vneg.f32	s15, s15
 8004b7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004b94 <PowerStage_getPhaseCurrent+0xcc>
 8004b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	edc3 7a00 	vstr	s15, [r3]
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	3c898000 	.word	0x3c898000

08004b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_MspInit+0x44>)
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_MspInit+0x44>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_MspInit+0x44>)
 8004bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_MspInit+0x44>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <HAL_MspInit+0x44>)
 8004bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_MspInit+0x44>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000

08004be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b09c      	sub	sp, #112	; 0x70
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bf8:	f107 0318 	add.w	r3, r7, #24
 8004bfc:	2244      	movs	r2, #68	; 0x44
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f007 fdb9 	bl	800c778 <memset>
  if(hadc->Instance==ADC1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c0e:	d157      	bne.n	8004cc0 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c1c:	f107 0318 	add.w	r3, r7, #24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 fb33 	bl	800928c <HAL_RCCEx_PeriphCLKConfig>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004c2c:	f7fd fed8 	bl	80029e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_ADC_MspInit+0x13c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_ADC_MspInit+0x13c>)
 8004c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004c3a:	4b38      	ldr	r3, [pc, #224]	; (8004d1c <HAL_ADC_MspInit+0x13c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d10b      	bne.n	8004c5a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	4a36      	ldr	r2, [pc, #216]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c72:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7e:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ca0:	f003 fa68 	bl	8008174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8004ca4:	f241 0302 	movw	r3, #4098	; 0x1002
 8004ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004caa:	2303      	movs	r3, #3
 8004cac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	481a      	ldr	r0, [pc, #104]	; (8004d24 <HAL_ADC_MspInit+0x144>)
 8004cba:	f003 fa5b 	bl	8008174 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004cbe:	e029      	b.n	8004d14 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <HAL_ADC_MspInit+0x148>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d124      	bne.n	8004d14 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004cd0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004cd4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cd6:	f107 0318 	add.w	r3, r7, #24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f004 fad6 	bl	800928c <HAL_RCCEx_PeriphCLKConfig>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_ADC_MspInit+0x10a>
      Error_Handler();
 8004ce6:	f7fd fe7b 	bl	80029e0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_ADC_MspInit+0x13c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_ADC_MspInit+0x13c>)
 8004cf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004cf4:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_ADC_MspInit+0x13c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10b      	bne.n	8004d14 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_ADC_MspInit+0x140>)
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
}
 8004d14:	bf00      	nop
 8004d16:	3770      	adds	r7, #112	; 0x70
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000814 	.word	0x20000814
 8004d20:	40021000 	.word	0x40021000
 8004d24:	48000400 	.word	0x48000400
 8004d28:	50000100 	.word	0x50000100

08004d2c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <HAL_CORDIC_MspInit+0x38>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10b      	bne.n	8004d56 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <HAL_CORDIC_MspInit+0x3c>)
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <HAL_CORDIC_MspInit+0x3c>)
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	6493      	str	r3, [r2, #72]	; 0x48
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <HAL_CORDIC_MspInit+0x3c>)
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40020c00 	.word	0x40020c00
 8004d68:	40021000 	.word	0x40021000

08004d6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b09a      	sub	sp, #104	; 0x68
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d84:	f107 0310 	add.w	r3, r7, #16
 8004d88:	2244      	movs	r2, #68	; 0x44
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f007 fcf3 	bl	800c778 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a28      	ldr	r2, [pc, #160]	; (8004e38 <HAL_FDCAN_MspInit+0xcc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d149      	bne.n	8004e30 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004da0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f004 fa6d 	bl	800928c <HAL_RCCEx_PeriphCLKConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004db8:	f7fd fe12 	bl	80029e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <HAL_FDCAN_MspInit+0xd0>)
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <HAL_FDCAN_MspInit+0xd0>)
 8004dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc8:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <HAL_FDCAN_MspInit+0xd0>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_FDCAN_MspInit+0xd0>)
 8004dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_FDCAN_MspInit+0xd0>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <HAL_FDCAN_MspInit+0xd0>)
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004dec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004df0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df2:	2302      	movs	r3, #2
 8004df4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004dfe:	2309      	movs	r3, #9
 8004e00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e06:	4619      	mov	r1, r3
 8004e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e0c:	f003 f9b2 	bl	8008174 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	2104      	movs	r1, #4
 8004e14:	2015      	movs	r0, #21
 8004e16:	f002 f84c 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004e1a:	2015      	movs	r0, #21
 8004e1c:	f002 f863 	bl	8006ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8004e20:	2200      	movs	r2, #0
 8004e22:	2104      	movs	r1, #4
 8004e24:	2016      	movs	r0, #22
 8004e26:	f002 f844 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004e2a:	2016      	movs	r0, #22
 8004e2c:	f002 f85b 	bl	8006ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004e30:	bf00      	nop
 8004e32:	3768      	adds	r7, #104	; 0x68
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40006400 	.word	0x40006400
 8004e3c:	40021000 	.word	0x40021000

08004e40 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2e      	ldr	r2, [pc, #184]	; (8004f18 <HAL_OPAMP_MspInit+0xd8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d119      	bne.n	8004e96 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e6e:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004e7a:	230a      	movs	r3, #10
 8004e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e90:	f003 f970 	bl	8008174 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004e94:	e03b      	b.n	8004f0e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <HAL_OPAMP_MspInit+0xe0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d119      	bne.n	8004ed4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004eb8:	23a0      	movs	r3, #160	; 0xa0
 8004eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ece:	f003 f951 	bl	8008174 <HAL_GPIO_Init>
}
 8004ed2:	e01c      	b.n	8004f0e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <HAL_OPAMP_MspInit+0xe4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d117      	bne.n	8004f0e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_OPAMP_MspInit+0xdc>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004efa:	2303      	movs	r3, #3
 8004efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	4619      	mov	r1, r3
 8004f08:	4807      	ldr	r0, [pc, #28]	; (8004f28 <HAL_OPAMP_MspInit+0xe8>)
 8004f0a:	f003 f933 	bl	8008174 <HAL_GPIO_Init>
}
 8004f0e:	bf00      	nop
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40010300 	.word	0x40010300
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40010304 	.word	0x40010304
 8004f24:	40010308 	.word	0x40010308
 8004f28:	48000400 	.word	0x48000400

08004f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1b      	ldr	r2, [pc, #108]	; (8004fb8 <HAL_SPI_MspInit+0x8c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d12f      	bne.n	8004fae <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_SPI_MspInit+0x90>)
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_SPI_MspInit+0x90>)
 8004f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f58:	6613      	str	r3, [r2, #96]	; 0x60
 8004f5a:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <HAL_SPI_MspInit+0x90>)
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f66:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <HAL_SPI_MspInit+0x90>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <HAL_SPI_MspInit+0x90>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_SPI_MspInit+0x90>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004f7e:	2338      	movs	r3, #56	; 0x38
 8004f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f82:	2302      	movs	r3, #2
 8004f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f8e:	2305      	movs	r3, #5
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f92:	f107 0314 	add.w	r3, r7, #20
 8004f96:	4619      	mov	r1, r3
 8004f98:	4809      	ldr	r0, [pc, #36]	; (8004fc0 <HAL_SPI_MspInit+0x94>)
 8004f9a:	f003 f8eb 	bl	8008174 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	2023      	movs	r0, #35	; 0x23
 8004fa4:	f001 ff85 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004fa8:	2023      	movs	r0, #35	; 0x23
 8004faa:	f001 ff9c 	bl	8006ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004fae:	bf00      	nop
 8004fb0:	3728      	adds	r7, #40	; 0x28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40013000 	.word	0x40013000
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	48000400 	.word	0x48000400

08004fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	; (8005094 <HAL_TIM_Base_MspInit+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d114      	bne.n	8005000 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fd6:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	4a2f      	ldr	r2, [pc, #188]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8004fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	2019      	movs	r0, #25
 8004ff4:	f001 ff5d 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ff8:	2019      	movs	r0, #25
 8004ffa:	f001 ff74 	bl	8006ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004ffe:	e044      	b.n	800508a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d114      	bne.n	8005034 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6593      	str	r3, [r2, #88]	; 0x58
 8005016:	4b20      	ldr	r3, [pc, #128]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	201c      	movs	r0, #28
 8005028:	f001 ff43 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800502c:	201c      	movs	r0, #28
 800502e:	f001 ff5a 	bl	8006ee6 <HAL_NVIC_EnableIRQ>
}
 8005032:	e02a      	b.n	800508a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_TIM_Base_MspInit+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d114      	bne.n	8005068 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	6593      	str	r3, [r2, #88]	; 0x58
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2102      	movs	r1, #2
 800505a:	201e      	movs	r0, #30
 800505c:	f001 ff29 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005060:	201e      	movs	r0, #30
 8005062:	f001 ff40 	bl	8006ee6 <HAL_NVIC_EnableIRQ>
}
 8005066:	e010      	b.n	800508a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <HAL_TIM_Base_MspInit+0xdc>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10b      	bne.n	800508a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005078:	f043 0310 	orr.w	r3, r3, #16
 800507c:	6593      	str	r3, [r2, #88]	; 0x58
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_TIM_Base_MspInit+0xd4>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40021000 	.word	0x40021000
 800509c:	40000800 	.word	0x40000800
 80050a0:	40001000 	.word	0x40001000

080050a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <HAL_TIM_PWM_MspInit+0x5c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10c      	bne.n	80050d0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <HAL_TIM_PWM_MspInit+0x60>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <HAL_TIM_PWM_MspInit+0x60>)
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	6593      	str	r3, [r2, #88]	; 0x58
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_TIM_PWM_MspInit+0x60>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80050ce:	e010      	b.n	80050f2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <HAL_TIM_PWM_MspInit+0x64>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10b      	bne.n	80050f2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <HAL_TIM_PWM_MspInit+0x60>)
 80050dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_TIM_PWM_MspInit+0x60>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e4:	6613      	str	r3, [r2, #96]	; 0x60
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_TIM_PWM_MspInit+0x60>)
 80050e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40000400 	.word	0x40000400
 8005104:	40021000 	.word	0x40021000
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005114:	f107 031c 	add.w	r3, r7, #28
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4c      	ldr	r2, [pc, #304]	; (800525c <HAL_TIM_MspPostInit+0x150>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d14c      	bne.n	80051c8 <HAL_TIM_MspPostInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800512e:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	4a4b      	ldr	r2, [pc, #300]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800513a:	4b49      	ldr	r3, [pc, #292]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005146:	4b46      	ldr	r3, [pc, #280]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	4a45      	ldr	r2, [pc, #276]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005152:	4b43      	ldr	r3, [pc, #268]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	697b      	ldr	r3, [r7, #20]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800515e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005164:	2302      	movs	r3, #2
 8005166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516c:	2300      	movs	r3, #0
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005170:	2306      	movs	r3, #6
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005174:	f107 031c 	add.w	r3, r7, #28
 8005178:	4619      	mov	r1, r3
 800517a:	483a      	ldr	r0, [pc, #232]	; (8005264 <HAL_TIM_MspPostInit+0x158>)
 800517c:	f002 fffa 	bl	8008174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005186:	2302      	movs	r3, #2
 8005188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	2300      	movs	r3, #0
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005192:	2304      	movs	r3, #4
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005196:	f107 031c 	add.w	r3, r7, #28
 800519a:	4619      	mov	r1, r3
 800519c:	4831      	ldr	r0, [pc, #196]	; (8005264 <HAL_TIM_MspPostInit+0x158>)
 800519e:	f002 ffe9 	bl	8008174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80051a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80051a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80051b4:	2306      	movs	r3, #6
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b8:	f107 031c 	add.w	r3, r7, #28
 80051bc:	4619      	mov	r1, r3
 80051be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051c2:	f002 ffd7 	bl	8008174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80051c6:	e044      	b.n	8005252 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <HAL_TIM_MspPostInit+0x15c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d11d      	bne.n	800520e <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d2:	4b23      	ldr	r3, [pc, #140]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	4a22      	ldr	r2, [pc, #136]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 80051e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80051ea:	2350      	movs	r3, #80	; 0x50
 80051ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ee:	2302      	movs	r3, #2
 80051f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f6:	2300      	movs	r3, #0
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051fa:	2302      	movs	r3, #2
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fe:	f107 031c 	add.w	r3, r7, #28
 8005202:	4619      	mov	r1, r3
 8005204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005208:	f002 ffb4 	bl	8008174 <HAL_GPIO_Init>
}
 800520c:	e021      	b.n	8005252 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a16      	ldr	r2, [pc, #88]	; (800526c <HAL_TIM_MspPostInit+0x160>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d11c      	bne.n	8005252 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	4a10      	ldr	r2, [pc, #64]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <HAL_TIM_MspPostInit+0x154>)
 8005226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005230:	2304      	movs	r3, #4
 8005232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005234:	2302      	movs	r3, #2
 8005236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800523c:	2300      	movs	r3, #0
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8005240:	2309      	movs	r3, #9
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	f107 031c 	add.w	r3, r7, #28
 8005248:	4619      	mov	r1, r3
 800524a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800524e:	f002 ff91 	bl	8008174 <HAL_GPIO_Init>
}
 8005252:	bf00      	nop
 8005254:	3730      	adds	r7, #48	; 0x30
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40021000 	.word	0x40021000
 8005264:	48000400 	.word	0x48000400
 8005268:	40000400 	.word	0x40000400
 800526c:	40014000 	.word	0x40014000

08005270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b09a      	sub	sp, #104	; 0x68
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005288:	f107 0310 	add.w	r3, r7, #16
 800528c:	2244      	movs	r2, #68	; 0x44
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f007 fa71 	bl	800c778 <memset>
  if(huart->Instance==USART3)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <HAL_UART_MspInit+0xa8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d136      	bne.n	800530e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80052a0:	2304      	movs	r3, #4
 80052a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052a8:	f107 0310 	add.w	r3, r7, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f003 ffed 	bl	800928c <HAL_RCCEx_PeriphCLKConfig>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80052b8:	f7fd fb92 	bl	80029e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <HAL_UART_MspInit+0xac>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	4a16      	ldr	r2, [pc, #88]	; (800531c <HAL_UART_MspInit+0xac>)
 80052c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c6:	6593      	str	r3, [r2, #88]	; 0x58
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <HAL_UART_MspInit+0xac>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_UART_MspInit+0xac>)
 80052d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d8:	4a10      	ldr	r2, [pc, #64]	; (800531c <HAL_UART_MspInit+0xac>)
 80052da:	f043 0302 	orr.w	r3, r3, #2
 80052de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <HAL_UART_MspInit+0xac>)
 80052e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f2:	2302      	movs	r3, #2
 80052f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fa:	2300      	movs	r3, #0
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052fe:	2307      	movs	r3, #7
 8005300:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005302:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005306:	4619      	mov	r1, r3
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <HAL_UART_MspInit+0xb0>)
 800530a:	f002 ff33 	bl	8008174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800530e:	bf00      	nop
 8005310:	3768      	adds	r7, #104	; 0x68
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40004800 	.word	0x40004800
 800531c:	40021000 	.word	0x40021000
 8005320:	48000400 	.word	0x48000400

08005324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <NMI_Handler+0x4>

0800532a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800532e:	e7fe      	b.n	800532e <HardFault_Handler+0x4>

08005330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005334:	e7fe      	b.n	8005334 <MemManage_Handler+0x4>

08005336 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800533a:	e7fe      	b.n	800533a <BusFault_Handler+0x4>

0800533c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005340:	e7fe      	b.n	8005340 <UsageFault_Handler+0x4>

08005342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005342:	b480      	push	{r7}
 8005344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800535e:	b480      	push	{r7}
 8005360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005370:	f000 f992 	bl	8005698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005374:	bf00      	nop
 8005376:	bd80      	pop	{r7, pc}

08005378 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <FDCAN1_IT0_IRQHandler+0x10>)
 800537e:	f002 fa13 	bl	80077a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000440 	.word	0x20000440

0800538c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <FDCAN1_IT1_IRQHandler+0x10>)
 8005392:	f002 fa09 	bl	80077a8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000440 	.word	0x20000440

080053a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053a4:	4802      	ldr	r0, [pc, #8]	; (80053b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80053a6:	f005 f913 	bl	800a5d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200005bc 	.word	0x200005bc

080053b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80053b8:	4802      	ldr	r0, [pc, #8]	; (80053c4 <TIM2_IRQHandler+0x10>)
 80053ba:	f005 f909 	bl	800a5d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000608 	.word	0x20000608

080053c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80053cc:	4802      	ldr	r0, [pc, #8]	; (80053d8 <TIM4_IRQHandler+0x10>)
 80053ce:	f005 f8ff 	bl	800a5d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200006a0 	.word	0x200006a0

080053dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80053e0:	4802      	ldr	r0, [pc, #8]	; (80053ec <SPI1_IRQHandler+0x10>)
 80053e2:	f004 fa9f 	bl	8009924 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000558 	.word	0x20000558

080053f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
	return 1;
 80053f4:	2301      	movs	r3, #1
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <_kill>:

int _kill(int pid, int sig)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800540a:	f007 f98b 	bl	800c724 <__errno>
 800540e:	4603      	mov	r3, r0
 8005410:	2216      	movs	r2, #22
 8005412:	601a      	str	r2, [r3, #0]
	return -1;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <_exit>:

void _exit (int status)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005428:	f04f 31ff 	mov.w	r1, #4294967295
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ffe7 	bl	8005400 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005432:	e7fe      	b.n	8005432 <_exit+0x12>

08005434 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e00a      	b.n	800545c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005446:	f3af 8000 	nop.w
 800544a:	4601      	mov	r1, r0
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	60ba      	str	r2, [r7, #8]
 8005452:	b2ca      	uxtb	r2, r1
 8005454:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	3301      	adds	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	dbf0      	blt.n	8005446 <_read+0x12>
	}

return len;
 8005464:	687b      	ldr	r3, [r7, #4]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e009      	b.n	8005494 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	60ba      	str	r2, [r7, #8]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	3301      	adds	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	dbf1      	blt.n	8005480 <_write+0x12>
	}
	return len;
 800549c:	687b      	ldr	r3, [r7, #4]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <_close>:

int _close(int file)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	return -1;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054ce:	605a      	str	r2, [r3, #4]
	return 0;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <_isatty>:

int _isatty(int file)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
	return 1;
 80054e6:	2301      	movs	r3, #1
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
	return 0;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005518:	4a14      	ldr	r2, [pc, #80]	; (800556c <_sbrk+0x5c>)
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <_sbrk+0x60>)
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <_sbrk+0x64>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800552c:	4b11      	ldr	r3, [pc, #68]	; (8005574 <_sbrk+0x64>)
 800552e:	4a12      	ldr	r2, [pc, #72]	; (8005578 <_sbrk+0x68>)
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <_sbrk+0x64>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	429a      	cmp	r2, r3
 800553e:	d207      	bcs.n	8005550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005540:	f007 f8f0 	bl	800c724 <__errno>
 8005544:	4603      	mov	r3, r0
 8005546:	220c      	movs	r2, #12
 8005548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
 800554e:	e009      	b.n	8005564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <_sbrk+0x64>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <_sbrk+0x64>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	4a05      	ldr	r2, [pc, #20]	; (8005574 <_sbrk+0x64>)
 8005560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20008000 	.word	0x20008000
 8005570:	00000400 	.word	0x00000400
 8005574:	20000818 	.word	0x20000818
 8005578:	20000830 	.word	0x20000830

0800557c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <SystemInit+0x20>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	4a05      	ldr	r2, [pc, #20]	; (800559c <SystemInit+0x20>)
 8005588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800558c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055a0:	480d      	ldr	r0, [pc, #52]	; (80055d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055a4:	480d      	ldr	r0, [pc, #52]	; (80055dc <LoopForever+0x6>)
  ldr r1, =_edata
 80055a6:	490e      	ldr	r1, [pc, #56]	; (80055e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <LoopForever+0xe>)
  movs r3, #0
 80055aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80055ac:	e002      	b.n	80055b4 <LoopCopyDataInit>

080055ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055b2:	3304      	adds	r3, #4

080055b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b8:	d3f9      	bcc.n	80055ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ba:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055bc:	4c0b      	ldr	r4, [pc, #44]	; (80055ec <LoopForever+0x16>)
  movs r3, #0
 80055be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c0:	e001      	b.n	80055c6 <LoopFillZerobss>

080055c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055c4:	3204      	adds	r2, #4

080055c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c8:	d3fb      	bcc.n	80055c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055ca:	f7ff ffd7 	bl	800557c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ce:	f007 f8af 	bl	800c730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055d2:	f7fc fbb9 	bl	8001d48 <main>

080055d6 <LoopForever>:

LoopForever:
    b LoopForever
 80055d6:	e7fe      	b.n	80055d6 <LoopForever>
  ldr   r0, =_estack
 80055d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80055dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80055e4:	08010bbc 	.word	0x08010bbc
  ldr r2, =_sbss
 80055e8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80055ec:	20000830 	.word	0x20000830

080055f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055f0:	e7fe      	b.n	80055f0 <ADC1_2_IRQHandler>

080055f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055fc:	2003      	movs	r0, #3
 80055fe:	f001 fc4d 	bl	8006e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005602:	200f      	movs	r0, #15
 8005604:	f000 f80e 	bl	8005624 <HAL_InitTick>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	71fb      	strb	r3, [r7, #7]
 8005612:	e001      	b.n	8005618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005614:	f7ff fac0 	bl	8004b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005618:	79fb      	ldrb	r3, [r7, #7]

}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005630:	4b16      	ldr	r3, [pc, #88]	; (800568c <HAL_InitTick+0x68>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d022      	beq.n	800567e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005638:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_InitTick+0x6c>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <HAL_InitTick+0x68>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005644:	fbb1 f3f3 	udiv	r3, r1, r3
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	4618      	mov	r0, r3
 800564e:	f001 fc58 	bl	8006f02 <HAL_SYSTICK_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10f      	bne.n	8005678 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d809      	bhi.n	8005672 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800565e:	2200      	movs	r2, #0
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	f04f 30ff 	mov.w	r0, #4294967295
 8005666:	f001 fc24 	bl	8006eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800566a:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <HAL_InitTick+0x70>)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e007      	b.n	8005682 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e004      	b.n	8005682 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
 800567c:	e001      	b.n	8005682 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000008 	.word	0x20000008
 8005690:	20000000 	.word	0x20000000
 8005694:	20000004 	.word	0x20000004

08005698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <HAL_IncTick+0x1c>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_IncTick+0x20>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4413      	add	r3, r2
 80056a6:	4a03      	ldr	r2, [pc, #12]	; (80056b4 <HAL_IncTick+0x1c>)
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	2000081c 	.word	0x2000081c
 80056b8:	20000008 	.word	0x20000008

080056bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return uwTick;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <HAL_GetTick+0x14>)
 80056c2:	681b      	ldr	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	2000081c 	.word	0x2000081c

080056d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056dc:	f7ff ffee 	bl	80056bc <HAL_GetTick>
 80056e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d004      	beq.n	80056f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_Delay+0x40>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056f8:	bf00      	nop
 80056fa:	f7ff ffdf 	bl	80056bc <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	429a      	cmp	r2, r3
 8005708:	d8f7      	bhi.n	80056fa <HAL_Delay+0x26>
  {
  }
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000008 	.word	0x20000008

08005718 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	609a      	str	r2, [r3, #8]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800574e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6093      	str	r3, [r2, #8]
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005776:	d101      	bne.n	800577c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800579a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800579e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c6:	d101      	bne.n	80057cc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <LL_ADC_IsEnabled+0x18>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <LL_ADC_IsEnabled+0x1a>
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b04      	cmp	r3, #4
 800583a:	d101      	bne.n	8005840 <LL_ADC_REG_IsConversionOngoing+0x18>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b08      	cmp	r3, #8
 8005860:	d101      	bne.n	8005866 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b089      	sub	sp, #36	; 0x24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e177      	b.n	8005b7e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff f99f 	bl	8004be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff ff54 	bl	8005762 <LL_ADC_IsDeepPowerDownEnabled>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff ff3a 	bl	800573e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff6f 	bl	80057b2 <LL_ADC_IsInternalRegulatorEnabled>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff53 	bl	800578a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058e4:	4b9c      	ldr	r3, [pc, #624]	; (8005b58 <HAL_ADC_Init+0x2e4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	099b      	lsrs	r3, r3, #6
 80058ea:	4a9c      	ldr	r2, [pc, #624]	; (8005b5c <HAL_ADC_Init+0x2e8>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	3301      	adds	r3, #1
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058f8:	e002      	b.n	8005900 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f9      	bne.n	80058fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff51 	bl	80057b2 <LL_ADC_IsInternalRegulatorEnabled>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	f043 0210 	orr.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	f043 0201 	orr.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff76 	bl	8005828 <LL_ADC_REG_IsConversionOngoing>
 800593c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 8110 	bne.w	8005b6c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 810c 	bne.w	8005b6c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800595c:	f043 0202 	orr.w	r2, r3, #2
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff ff4a 	bl	8005802 <LL_ADC_IsEnabled>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d111      	bne.n	8005998 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005974:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005978:	f7ff ff43 	bl	8005802 <LL_ADC_IsEnabled>
 800597c:	4604      	mov	r4, r0
 800597e:	4878      	ldr	r0, [pc, #480]	; (8005b60 <HAL_ADC_Init+0x2ec>)
 8005980:	f7ff ff3f 	bl	8005802 <LL_ADC_IsEnabled>
 8005984:	4603      	mov	r3, r0
 8005986:	4323      	orrs	r3, r4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4619      	mov	r1, r3
 8005992:	4874      	ldr	r0, [pc, #464]	; (8005b64 <HAL_ADC_Init+0x2f0>)
 8005994:	f7ff fec0 	bl	8005718 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7f5b      	ldrb	r3, [r3, #29]
 800599c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80059a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80059ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d106      	bne.n	80059d4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	3b01      	subs	r3, #1
 80059cc:	045b      	lsls	r3, r3, #17
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	4b5c      	ldr	r3, [pc, #368]	; (8005b68 <HAL_ADC_Init+0x2f4>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	69b9      	ldr	r1, [r7, #24]
 8005a00:	430b      	orrs	r3, r1
 8005a02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ff02 	bl	8005828 <LL_ADC_REG_IsConversionOngoing>
 8005a24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff ff0f 	bl	800584e <LL_ADC_INJ_IsConversionOngoing>
 8005a30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d16d      	bne.n	8005b14 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d16a      	bne.n	8005b14 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a5a:	f023 0302 	bic.w	r3, r3, #2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	69b9      	ldr	r1, [r7, #24]
 8005a64:	430b      	orrs	r3, r1
 8005a66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d017      	beq.n	8005aa0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6911      	ldr	r1, [r2, #16]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005a9e:	e013      	b.n	8005ac8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005aae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ac4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d118      	bne.n	8005b04 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005adc:	f023 0304 	bic.w	r3, r3, #4
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ae8:	4311      	orrs	r1, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005aee:	4311      	orrs	r1, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005af4:	430a      	orrs	r2, r1
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	e007      	b.n	8005b14 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d10c      	bne.n	8005b36 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f023 010f 	bic.w	r1, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	1e5a      	subs	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
 8005b34:	e007      	b.n	8005b46 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 020f 	bic.w	r2, r2, #15
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b56:	e011      	b.n	8005b7c <HAL_ADC_Init+0x308>
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	053e2d63 	.word	0x053e2d63
 8005b60:	50000100 	.word	0x50000100
 8005b64:	50000300 	.word	0x50000300
 8005b68:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	f043 0210 	orr.w	r2, r3, #16
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	; 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd90      	pop	{r4, r7, pc}
 8005b86:	bf00      	nop

08005b88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fe34 	bl	8005802 <LL_ADC_IsEnabled>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d14d      	bne.n	8005c3c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	4b28      	ldr	r3, [pc, #160]	; (8005c48 <ADC_Enable+0xc0>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	f043 0210 	orr.w	r2, r3, #16
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e039      	b.n	8005c3e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fe03 	bl	80057da <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005bd4:	f7ff fd72 	bl	80056bc <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bda:	e028      	b.n	8005c2e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fe0e 	bl	8005802 <LL_ADC_IsEnabled>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff fdf2 	bl	80057da <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bf6:	f7ff fd61 	bl	80056bc <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d914      	bls.n	8005c2e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d00d      	beq.n	8005c2e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c16:	f043 0210 	orr.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d1cf      	bne.n	8005bdc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	8000003f 	.word	0x8000003f

08005c4c <LL_ADC_SetCommonPathInternalCh>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	609a      	str	r2, [r3, #8]
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_ADC_GetCommonPathInternalCh>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <LL_ADC_SetOffset>:
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3360      	adds	r3, #96	; 0x60
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <LL_ADC_SetOffset+0x44>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	601a      	str	r2, [r3, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	03fff000 	.word	0x03fff000

08005cd8 <LL_ADC_GetOffsetChannel>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3360      	adds	r3, #96	; 0x60
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <LL_ADC_SetOffsetState>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3360      	adds	r3, #96	; 0x60
 8005d14:	461a      	mov	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <LL_ADC_SetOffsetSign>:
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3360      	adds	r3, #96	; 0x60
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <LL_ADC_SetOffsetSaturation>:
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3360      	adds	r3, #96	; 0x60
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	615a      	str	r2, [r3, #20]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <LL_ADC_INJ_GetTrigAuto>:
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_ADC_SetChannelSamplingTime>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3314      	adds	r3, #20
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0e5b      	lsrs	r3, r3, #25
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	4413      	add	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	0d1b      	lsrs	r3, r3, #20
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	2107      	movs	r1, #7
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	0d1b      	lsrs	r3, r3, #20
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <LL_ADC_SetChannelSingleDiff>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0f      	ldr	r2, [pc, #60]	; (8005e8c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10a      	bne.n	8005e6a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	431a      	orrs	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005e68:	e00a      	b.n	8005e80 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e76:	43db      	mvns	r3, r3
 8005e78:	401a      	ands	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	407f0000 	.word	0x407f0000

08005e90 <LL_ADC_GetMultimode>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 031f 	and.w	r3, r3, #31
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_ADC_IsEnabled>:
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <LL_ADC_IsEnabled+0x18>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <LL_ADC_IsEnabled+0x1a>
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d101      	bne.n	8005eea <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_ADC_INJ_StartConversion>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f0c:	f043 0208 	orr.w	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_ADC_INJ_IsConversionOngoing>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d101      	bne.n	8005f38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f50:	4853      	ldr	r0, [pc, #332]	; (80060a0 <HAL_ADCEx_InjectedStart+0x158>)
 8005f52:	f7ff ff9d 	bl	8005e90 <LL_ADC_GetMultimode>
 8005f56:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ffdf 	bl	8005f20 <LL_ADC_INJ_IsConversionOngoing>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e094      	b.n	8006096 <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e07c      	b.n	8006096 <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_ADCEx_InjectedStart+0x62>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e075      	b.n	8006096 <HAL_ADCEx_InjectedStart+0x14e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fde8 	bl	8005b88 <ADC_Enable>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d164      	bne.n	800608c <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d006      	beq.n	8005fdc <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	f023 0208 	bic.w	r2, r3, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60
 8005fda:	e002      	b.n	8005fe2 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <HAL_ADCEx_InjectedStart+0x15c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d002      	beq.n	8006006 <HAL_ADCEx_InjectedStart+0xbe>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	e001      	b.n	800600a <HAL_ADCEx_InjectedStart+0xc2>
 8006006:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	4293      	cmp	r3, r2
 8006010:	d002      	beq.n	8006018 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2260      	movs	r2, #96	; 0x60
 800602a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1a      	ldr	r2, [pc, #104]	; (80060a4 <HAL_ADCEx_InjectedStart+0x15c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d002      	beq.n	8006044 <HAL_ADCEx_InjectedStart+0xfc>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	e001      	b.n	8006048 <HAL_ADCEx_InjectedStart+0x100>
 8006044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	4293      	cmp	r3, r2
 800604e:	d008      	beq.n	8006062 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b06      	cmp	r3, #6
 800605a:	d002      	beq.n	8006062 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b07      	cmp	r3, #7
 8006060:	d10d      	bne.n	800607e <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff feb0 	bl	8005dcc <LL_ADC_INJ_GetTrigAuto>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d110      	bne.n	8006094 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ff3e 	bl	8005ef8 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800607c:	e00a      	b.n	8006094 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	65da      	str	r2, [r3, #92]	; 0x5c
 800608a:	e003      	b.n	8006094 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	50000300 	.word	0x50000300
 80060a4:	50000100 	.word	0x50000100

080060a8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f240 321b 	movw	r2, #795	; 0x31b
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_ADCEx_InjectedGetValue+0x32>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 80060c2:	d21c      	bcs.n	80060fe <HAL_ADCEx_InjectedGetValue+0x56>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	f240 120f 	movw	r2, #271	; 0x10f
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d011      	beq.n	80060f2 <HAL_ADCEx_InjectedGetValue+0x4a>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	f240 2215 	movw	r2, #533	; 0x215
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d006      	beq.n	80060e6 <HAL_ADCEx_InjectedGetValue+0x3e>
 80060d8:	e011      	b.n	80060fe <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e2:	60fb      	str	r3, [r7, #12]
      break;
 80060e4:	e011      	b.n	800610a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ee:	60fb      	str	r3, [r7, #12]
      break;
 80060f0:	e00b      	b.n	800610a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fa:	60fb      	str	r3, [r7, #12]
      break;
 80060fc:	e005      	b.n	800610a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006106:	60fb      	str	r3, [r7, #12]
      break;
 8006108:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b0b6      	sub	sp, #216	; 0xd8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800613c:	2302      	movs	r3, #2
 800613e:	f000 bcb5 	b.w	8006aac <HAL_ADCEx_InjectedConfigChannel+0x994>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006156:	2b01      	cmp	r3, #1
 8006158:	d130      	bne.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b09      	cmp	r3, #9
 8006160:	d179      	bne.n	8006256 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d010      	beq.n	800618c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	025b      	lsls	r3, r3, #9
 8006172:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800617e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800618a:	e007      	b.n	800619c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	0e9b      	lsrs	r3, r3, #26
 8006192:	025b      	lsls	r3, r3, #9
 8006194:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a2:	4b84      	ldr	r3, [pc, #528]	; (80063b4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80061ae:	430b      	orrs	r3, r1
 80061b0:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061b8:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80061ba:	e04c      	b.n	8006256 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11d      	bne.n	8006200 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80061e8:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f4:	e004      	b.n	8006200 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	0e9b      	lsrs	r3, r3, #26
 8006206:	f003 021f 	and.w	r2, r3, #31
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800622e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006246:	4b5b      	ldr	r3, [pc, #364]	; (80063b4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	430b      	orrs	r3, r1
 8006254:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fe60 	bl	8005f20 <LL_ADC_INJ_IsConversionOngoing>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d124      	bne.n	80062b0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800626c:	2b00      	cmp	r3, #0
 800626e:	d112      	bne.n	8006296 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006280:	055a      	lsls	r2, r3, #21
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006288:	051b      	lsls	r3, r3, #20
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	60da      	str	r2, [r3, #12]
 8006294:	e00c      	b.n	80062b0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80062a6:	055a      	lsls	r2, r3, #21
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fe0c 	bl	8005ed2 <LL_ADC_REG_IsConversionOngoing>
 80062ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fe2c 	bl	8005f20 <LL_ADC_INJ_IsConversionOngoing>
 80062c8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 822e 	bne.w	8006732 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 8229 	bne.w	8006732 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d116      	bne.n	800631e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d108      	bne.n	800630c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006308:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800630a:	e01f      	b.n	800634c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800631a:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800631c:	e016      	b.n	800634c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006324:	2b01      	cmp	r3, #1
 8006326:	d109      	bne.n	800633c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	f043 0220 	orr.w	r2, r3, #32
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800633a:	e007      	b.n	800634c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800634a:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006352:	2b01      	cmp	r3, #1
 8006354:	d110      	bne.n	8006378 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	430b      	orrs	r3, r1
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0202 	orr.w	r2, r2, #2
 8006374:	611a      	str	r2, [r3, #16]
 8006376:	e007      	b.n	8006388 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0202 	bic.w	r2, r2, #2
 8006386:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006390:	d112      	bne.n	80063b8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	4619      	mov	r1, r3
 800639e:	f7ff fd23 	bl	8005de8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fcfb 	bl	8005da6 <LL_ADC_SetSamplingTimeCommonConfig>
 80063b0:	e011      	b.n	80063d6 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80063b2:	bf00      	nop
 80063b4:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f7ff fd0f 	bl	8005de8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fce8 	bl	8005da6 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	08db      	lsrs	r3, r3, #3
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d022      	beq.n	800643e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6919      	ldr	r1, [r3, #16]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006408:	f7ff fc42 	bl	8005c90 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6919      	ldr	r1, [r3, #16]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	461a      	mov	r2, r3
 800641a:	f7ff fc8e 	bl	8005d3a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800642a:	2b01      	cmp	r3, #1
 800642c:	d102      	bne.n	8006434 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800642e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006432:	e000      	b.n	8006436 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8006434:	2300      	movs	r3, #0
 8006436:	461a      	mov	r2, r3
 8006438:	f7ff fc9a 	bl	8005d70 <LL_ADC_SetOffsetSaturation>
 800643c:	e179      	b.n	8006732 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fc47 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 800644a:	4603      	mov	r3, r0
 800644c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fc3c 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 8006460:	4603      	mov	r3, r0
 8006462:	0e9b      	lsrs	r3, r3, #26
 8006464:	f003 021f 	and.w	r2, r3, #31
 8006468:	e01e      	b.n	80064a8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fc31 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 8006476:	4603      	mov	r3, r0
 8006478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800648c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8006498:	2320      	movs	r3, #32
 800649a:	e004      	b.n	80064a6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 800649c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064a0:	fab3 f383 	clz	r3, r3
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	0e9b      	lsrs	r3, r3, #26
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	e018      	b.n	80064f2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064cc:	fa93 f3a3 	rbit	r3, r3
 80064d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80064d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80064dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80064e4:	2320      	movs	r3, #32
 80064e6:	e004      	b.n	80064f2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80064e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064ec:	fab3 f383 	clz	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d106      	bne.n	8006504 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	2100      	movs	r1, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fc00 	bl	8005d04 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2101      	movs	r1, #1
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fbe4 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 8006510:	4603      	mov	r3, r0
 8006512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fbd9 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 8006526:	4603      	mov	r3, r0
 8006528:	0e9b      	lsrs	r3, r3, #26
 800652a:	f003 021f 	and.w	r2, r3, #31
 800652e:	e01e      	b.n	800656e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fbce 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 800653c:	4603      	mov	r3, r0
 800653e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800654e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800655e:	2320      	movs	r3, #32
 8006560:	e004      	b.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8006562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006566:	fab3 f383 	clz	r3, r3
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	0e9b      	lsrs	r3, r3, #26
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	e018      	b.n	80065b8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006592:	fa93 f3a3 	rbit	r3, r3
 8006596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800659a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800659e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80065a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80065aa:	2320      	movs	r3, #32
 80065ac:	e004      	b.n	80065b8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80065ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065b2:	fab3 f383 	clz	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d106      	bne.n	80065ca <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2101      	movs	r1, #1
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fb9d 	bl	8005d04 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2102      	movs	r1, #2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fb81 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2102      	movs	r1, #2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fb76 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 80065ec:	4603      	mov	r3, r0
 80065ee:	0e9b      	lsrs	r3, r3, #26
 80065f0:	f003 021f 	and.w	r2, r3, #31
 80065f4:	e01e      	b.n	8006634 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2102      	movs	r1, #2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fb6b 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 8006602:	4603      	mov	r3, r0
 8006604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800660c:	fa93 f3a3 	rbit	r3, r3
 8006610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800661c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8006624:	2320      	movs	r3, #32
 8006626:	e004      	b.n	8006632 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8006628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800662c:	fab3 f383 	clz	r3, r3
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	0e9b      	lsrs	r3, r3, #26
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	e014      	b.n	8006676 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006654:	fa93 f3a3 	rbit	r3, r3
 8006658:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800665a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8006668:	2320      	movs	r3, #32
 800666a:	e004      	b.n	8006676 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 800666c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006670:	fab3 f383 	clz	r3, r3
 8006674:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006676:	429a      	cmp	r2, r3
 8006678:	d106      	bne.n	8006688 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	2102      	movs	r1, #2
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fb3e 	bl	8005d04 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2103      	movs	r1, #3
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fb22 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 8006694:	4603      	mov	r3, r0
 8006696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2103      	movs	r1, #3
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fb17 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 80066aa:	4603      	mov	r3, r0
 80066ac:	0e9b      	lsrs	r3, r3, #26
 80066ae:	f003 021f 	and.w	r2, r3, #31
 80066b2:	e017      	b.n	80066e4 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2103      	movs	r1, #3
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fb0c 	bl	8005cd8 <LL_ADC_GetOffsetChannel>
 80066c0:	4603      	mov	r3, r0
 80066c2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066c6:	fa93 f3a3 	rbit	r3, r3
 80066ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80066d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80066d6:	2320      	movs	r3, #32
 80066d8:	e003      	b.n	80066e2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80066da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066dc:	fab3 f383 	clz	r3, r3
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d105      	bne.n	80066fc <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	0e9b      	lsrs	r3, r3, #26
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	e011      	b.n	8006720 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006704:	fa93 f3a3 	rbit	r3, r3
 8006708:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800670a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800670c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800670e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8006714:	2320      	movs	r3, #32
 8006716:	e003      	b.n	8006720 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8006718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800671a:	fab3 f383 	clz	r3, r3
 800671e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006720:	429a      	cmp	r2, r3
 8006722:	d106      	bne.n	8006732 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2200      	movs	r2, #0
 800672a:	2103      	movs	r1, #3
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff fae9 	bl	8005d04 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fbb8 	bl	8005eac <LL_ADC_IsEnabled>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 8140 	bne.w	80069c4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	461a      	mov	r2, r3
 8006752:	f7ff fb75 	bl	8005e40 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	4a8f      	ldr	r2, [pc, #572]	; (8006998 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 800675c:	4293      	cmp	r3, r2
 800675e:	f040 8131 	bne.w	80069c4 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	0e9b      	lsrs	r3, r3, #26
 8006778:	3301      	adds	r3, #1
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2b09      	cmp	r3, #9
 8006780:	bf94      	ite	ls
 8006782:	2301      	movls	r3, #1
 8006784:	2300      	movhi	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e019      	b.n	80067be <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006792:	fa93 f3a3 	rbit	r3, r3
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800679c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80067a2:	2320      	movs	r3, #32
 80067a4:	e003      	b.n	80067ae <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80067a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a8:	fab3 f383 	clz	r3, r3
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	3301      	adds	r3, #1
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	bf94      	ite	ls
 80067b8:	2301      	movls	r3, #1
 80067ba:	2300      	movhi	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d079      	beq.n	80068b6 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	0e9b      	lsrs	r3, r3, #26
 80067d4:	3301      	adds	r3, #1
 80067d6:	069b      	lsls	r3, r3, #26
 80067d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067dc:	e015      	b.n	800680a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e6:	fa93 f3a3 	rbit	r3, r3
 80067ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80067ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80067f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80067f6:	2320      	movs	r3, #32
 80067f8:	e003      	b.n	8006802 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80067fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fc:	fab3 f383 	clz	r3, r3
 8006800:	b2db      	uxtb	r3, r3
 8006802:	3301      	adds	r3, #1
 8006804:	069b      	lsls	r3, r3, #26
 8006806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	0e9b      	lsrs	r3, r3, #26
 800681c:	3301      	adds	r3, #1
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2101      	movs	r1, #1
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	e017      	b.n	800685a <HAL_ADCEx_InjectedConfigChannel+0x742>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006832:	fa93 f3a3 	rbit	r3, r3
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800683c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8006842:	2320      	movs	r3, #32
 8006844:	e003      	b.n	800684e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	fab3 f383 	clz	r3, r3
 800684c:	b2db      	uxtb	r3, r3
 800684e:	3301      	adds	r3, #1
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2101      	movs	r1, #1
 8006856:	fa01 f303 	lsl.w	r3, r1, r3
 800685a:	ea42 0103 	orr.w	r1, r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	0e9b      	lsrs	r3, r3, #26
 8006870:	3301      	adds	r3, #1
 8006872:	f003 021f 	and.w	r2, r3, #31
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	e018      	b.n	80068b2 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006888:	fa93 f3a3 	rbit	r3, r3
 800688c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8006898:	2320      	movs	r3, #32
 800689a:	e003      	b.n	80068a4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	fab3 f383 	clz	r3, r3
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	3301      	adds	r3, #1
 80068a6:	f003 021f 	and.w	r2, r3, #31
 80068aa:	4613      	mov	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	4413      	add	r3, r2
 80068b0:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068b2:	430b      	orrs	r3, r1
 80068b4:	e081      	b.n	80069ba <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	0e9b      	lsrs	r3, r3, #26
 80068c8:	3301      	adds	r3, #1
 80068ca:	069b      	lsls	r3, r3, #26
 80068cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068d0:	e015      	b.n	80068fe <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	fa93 f3a3 	rbit	r3, r3
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80068ea:	2320      	movs	r3, #32
 80068ec:	e003      	b.n	80068f6 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	3301      	adds	r3, #1
 80068f8:	069b      	lsls	r3, r3, #26
 80068fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_ADCEx_InjectedConfigChannel+0x806>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	0e9b      	lsrs	r3, r3, #26
 8006910:	3301      	adds	r3, #1
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	2101      	movs	r1, #1
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	e017      	b.n	800694e <HAL_ADCEx_InjectedConfigChannel+0x836>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	fa93 f3a3 	rbit	r3, r3
 800692a:	61bb      	str	r3, [r7, #24]
  return result;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8006936:	2320      	movs	r3, #32
 8006938:	e003      	b.n	8006942 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	fab3 f383 	clz	r3, r3
 8006940:	b2db      	uxtb	r3, r3
 8006942:	3301      	adds	r3, #1
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2101      	movs	r1, #1
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	ea42 0103 	orr.w	r1, r2, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10d      	bne.n	800697a <HAL_ADCEx_InjectedConfigChannel+0x862>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	0e9b      	lsrs	r3, r3, #26
 8006964:	3301      	adds	r3, #1
 8006966:	f003 021f 	and.w	r2, r3, #31
 800696a:	4613      	mov	r3, r2
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	4413      	add	r3, r2
 8006970:	3b1e      	subs	r3, #30
 8006972:	051b      	lsls	r3, r3, #20
 8006974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006978:	e01e      	b.n	80069b8 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	fa93 f3a3 	rbit	r3, r3
 8006986:	60fb      	str	r3, [r7, #12]
  return result;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8006992:	2320      	movs	r3, #32
 8006994:	e006      	b.n	80069a4 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8006996:	bf00      	nop
 8006998:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	fab3 f383 	clz	r3, r3
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	3301      	adds	r3, #1
 80069a6:	f003 021f 	and.w	r2, r3, #31
 80069aa:	4613      	mov	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	4413      	add	r3, r2
 80069b0:	3b1e      	subs	r3, #30
 80069b2:	051b      	lsls	r3, r3, #20
 80069b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069b8:	430b      	orrs	r3, r1
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6892      	ldr	r2, [r2, #8]
 80069be:	4619      	mov	r1, r3
 80069c0:	f7ff fa12 	bl	8005de8 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b3a      	ldr	r3, [pc, #232]	; (8006ab4 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d067      	beq.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069d0:	4839      	ldr	r0, [pc, #228]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80069d2:	f7ff f94e 	bl	8005c72 <LL_ADC_GetCommonPathInternalCh>
 80069d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a37      	ldr	r2, [pc, #220]	; (8006abc <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a35      	ldr	r2, [pc, #212]	; (8006ac0 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d127      	bne.n	8006a3e <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80069ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d121      	bne.n	8006a3e <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a02:	d14d      	bne.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	482a      	ldr	r0, [pc, #168]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006a10:	f7ff f91c 	bl	8005c4c <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	099b      	lsrs	r3, r3, #6
 8006a1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ac8 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8006a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a20:	099a      	lsrs	r2, r3, #6
 8006a22:	4613      	mov	r3, r2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006a2e:	e002      	b.n	8006a36 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f9      	bne.n	8006a30 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a3c:	e030      	b.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a22      	ldr	r2, [pc, #136]	; (8006acc <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d113      	bne.n	8006a70 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d020      	beq.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a66:	4619      	mov	r1, r3
 8006a68:	4813      	ldr	r0, [pc, #76]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006a6a:	f7ff f8ef 	bl	8005c4c <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a6e:	e017      	b.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d112      	bne.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10c      	bne.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a11      	ldr	r2, [pc, #68]	; (8006ad0 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4807      	ldr	r0, [pc, #28]	; (8006ab8 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006a9c:	f7ff f8d6 	bl	8005c4c <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006aa8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	37d8      	adds	r7, #216	; 0xd8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	80080000 	.word	0x80080000
 8006ab8:	50000300 	.word	0x50000300
 8006abc:	c3210000 	.word	0xc3210000
 8006ac0:	90c00010 	.word	0x90c00010
 8006ac4:	20000000 	.word	0x20000000
 8006ac8:	053e2d63 	.word	0x053e2d63
 8006acc:	c7520000 	.word	0xc7520000
 8006ad0:	50000100 	.word	0x50000100
 8006ad4:	cb840000 	.word	0xcb840000

08006ad8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b0a1      	sub	sp, #132	; 0x84
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e08b      	b.n	8006c0e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006afe:	2300      	movs	r3, #0
 8006b00:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006b02:	2300      	movs	r3, #0
 8006b04:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b0e:	d102      	bne.n	8006b16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006b10:	4b41      	ldr	r3, [pc, #260]	; (8006c18 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	e001      	b.n	8006b1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e06a      	b.n	8006c0e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff f9c9 	bl	8005ed2 <LL_ADC_REG_IsConversionOngoing>
 8006b40:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff f9c3 	bl	8005ed2 <LL_ADC_REG_IsConversionOngoing>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d14c      	bne.n	8006bec <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d149      	bne.n	8006bec <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006b58:	4b30      	ldr	r3, [pc, #192]	; (8006c1c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006b5a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d028      	beq.n	8006bb6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b76:	035b      	lsls	r3, r3, #13
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b84:	f7ff f992 	bl	8005eac <LL_ADC_IsEnabled>
 8006b88:	4604      	mov	r4, r0
 8006b8a:	4823      	ldr	r0, [pc, #140]	; (8006c18 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b8c:	f7ff f98e 	bl	8005eac <LL_ADC_IsEnabled>
 8006b90:	4603      	mov	r3, r0
 8006b92:	4323      	orrs	r3, r4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d133      	bne.n	8006c00 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006ba0:	f023 030f 	bic.w	r3, r3, #15
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	6811      	ldr	r1, [r2, #0]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	6892      	ldr	r2, [r2, #8]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006bb4:	e024      	b.n	8006c00 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006bc6:	f7ff f971 	bl	8005eac <LL_ADC_IsEnabled>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4812      	ldr	r0, [pc, #72]	; (8006c18 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006bce:	f7ff f96d 	bl	8005eac <LL_ADC_IsEnabled>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4323      	orrs	r3, r4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d112      	bne.n	8006c00 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006be2:	f023 030f 	bic.w	r3, r3, #15
 8006be6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006be8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006bea:	e009      	b.n	8006c00 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006bfe:	e000      	b.n	8006c02 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3784      	adds	r7, #132	; 0x84
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd90      	pop	{r4, r7, pc}
 8006c16:	bf00      	nop
 8006c18:	50000100 	.word	0x50000100
 8006c1c:	50000300 	.word	0x50000300

08006c20 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e023      	b.n	8006c7a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe f870 	bl	8004d2c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d11d      	bne.n	8006cda <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <HAL_CORDIC_Configure+0x74>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	6811      	ldr	r1, [r2, #0]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	6992      	ldr	r2, [r2, #24]
 8006cb0:	4311      	orrs	r1, r2
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	6852      	ldr	r2, [r2, #4]
 8006cb6:	4311      	orrs	r1, r2
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	6912      	ldr	r2, [r2, #16]
 8006cbc:	4311      	orrs	r1, r2
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	6952      	ldr	r2, [r2, #20]
 8006cc2:	4311      	orrs	r1, r2
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	6892      	ldr	r2, [r2, #8]
 8006cc8:	4311      	orrs	r1, r2
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	68d2      	ldr	r2, [r2, #12]
 8006cce:	4311      	orrs	r1, r2
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e007      	b.n	8006cea <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	ff87f800 	.word	0xff87f800

08006cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <__NVIC_SetPriorityGrouping+0x44>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d2e:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <__NVIC_SetPriorityGrouping+0x44>)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	60d3      	str	r3, [r2, #12]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	e000ed00 	.word	0xe000ed00

08006d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <__NVIC_GetPriorityGrouping+0x18>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 0307 	and.w	r3, r3, #7
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	db0b      	blt.n	8006d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	f003 021f 	and.w	r2, r3, #31
 8006d78:	4907      	ldr	r1, [pc, #28]	; (8006d98 <__NVIC_EnableIRQ+0x38>)
 8006d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	2001      	movs	r0, #1
 8006d82:	fa00 f202 	lsl.w	r2, r0, r2
 8006d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	e000e100 	.word	0xe000e100

08006d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	db0a      	blt.n	8006dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	490c      	ldr	r1, [pc, #48]	; (8006de8 <__NVIC_SetPriority+0x4c>)
 8006db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dba:	0112      	lsls	r2, r2, #4
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006dc4:	e00a      	b.n	8006ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4908      	ldr	r1, [pc, #32]	; (8006dec <__NVIC_SetPriority+0x50>)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	3b04      	subs	r3, #4
 8006dd4:	0112      	lsls	r2, r2, #4
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	440b      	add	r3, r1
 8006dda:	761a      	strb	r2, [r3, #24]
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	e000e100 	.word	0xe000e100
 8006dec:	e000ed00 	.word	0xe000ed00

08006df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	; 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f1c3 0307 	rsb	r3, r3, #7
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	bf28      	it	cs
 8006e0e:	2304      	movcs	r3, #4
 8006e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3304      	adds	r3, #4
 8006e16:	2b06      	cmp	r3, #6
 8006e18:	d902      	bls.n	8006e20 <NVIC_EncodePriority+0x30>
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3b03      	subs	r3, #3
 8006e1e:	e000      	b.n	8006e22 <NVIC_EncodePriority+0x32>
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43da      	mvns	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	401a      	ands	r2, r3
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e38:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e42:	43d9      	mvns	r1, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e48:	4313      	orrs	r3, r2
         );
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3724      	adds	r7, #36	; 0x24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e68:	d301      	bcc.n	8006e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e00f      	b.n	8006e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e6e:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <SysTick_Config+0x40>)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e76:	210f      	movs	r1, #15
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	f7ff ff8e 	bl	8006d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <SysTick_Config+0x40>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <SysTick_Config+0x40>)
 8006e88:	2207      	movs	r2, #7
 8006e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	e000e010 	.word	0xe000e010

08006e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff ff29 	bl	8006cfc <__NVIC_SetPriorityGrouping>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ec0:	f7ff ff40 	bl	8006d44 <__NVIC_GetPriorityGrouping>
 8006ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	6978      	ldr	r0, [r7, #20]
 8006ecc:	f7ff ff90 	bl	8006df0 <NVIC_EncodePriority>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff ff5f 	bl	8006d9c <__NVIC_SetPriority>
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	4603      	mov	r3, r0
 8006eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ff33 	bl	8006d60 <__NVIC_EnableIRQ>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ffa4 	bl	8006e58 <SysTick_Config>
 8006f10:	4603      	mov	r3, r0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d00d      	beq.n	8006f4e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2204      	movs	r2, #4
 8006f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e047      	b.n	8006fde <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 020e 	bic.w	r2, r2, #14
 8006f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f82:	f003 021f 	and.w	r2, r3, #31
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f90:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006fbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
    }
  }
  return status;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e147      	b.n	800728a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fd feac 	bl	8004d6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0210 	bic.w	r2, r2, #16
 8007022:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007024:	f7fe fb4a 	bl	80056bc <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800702a:	e012      	b.n	8007052 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800702c:	f7fe fb46 	bl	80056bc <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b0a      	cmp	r3, #10
 8007038:	d90b      	bls.n	8007052 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703e:	f043 0201 	orr.w	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2203      	movs	r2, #3
 800704a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e11b      	b.n	800728a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b08      	cmp	r3, #8
 800705e:	d0e5      	beq.n	800702c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007070:	f7fe fb24 	bl	80056bc <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007076:	e012      	b.n	800709e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007078:	f7fe fb20 	bl	80056bc <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d90b      	bls.n	800709e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708a:	f043 0201 	orr.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2203      	movs	r2, #3
 8007096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e0f5      	b.n	800728a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0e5      	beq.n	8007078 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0202 	orr.w	r2, r2, #2
 80070ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a74      	ldr	r2, [pc, #464]	; (8007294 <HAL_FDCAN_Init+0x2ac>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d103      	bne.n	80070ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80070c6:	4a74      	ldr	r2, [pc, #464]	; (8007298 <HAL_FDCAN_Init+0x2b0>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7c1b      	ldrb	r3, [r3, #16]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d108      	bne.n	80070e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e4:	619a      	str	r2, [r3, #24]
 80070e6:	e007      	b.n	80070f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7c5b      	ldrb	r3, [r3, #17]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d108      	bne.n	8007112 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800710e:	619a      	str	r2, [r3, #24]
 8007110:	e007      	b.n	8007122 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007120:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7c9b      	ldrb	r3, [r3, #18]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d108      	bne.n	800713c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007138:	619a      	str	r2, [r3, #24]
 800713a:	e007      	b.n	800714c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800714a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007170:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0210 	bic.w	r2, r2, #16
 8007180:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d108      	bne.n	800719c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0204 	orr.w	r2, r2, #4
 8007198:	619a      	str	r2, [r3, #24]
 800719a:	e02c      	b.n	80071f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d028      	beq.n	80071f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d01c      	beq.n	80071e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0210 	orr.w	r2, r2, #16
 80071ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d110      	bne.n	80071f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0220 	orr.w	r2, r2, #32
 80071e2:	619a      	str	r2, [r3, #24]
 80071e4:	e007      	b.n	80071f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0220 	orr.w	r2, r2, #32
 80071f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	3b01      	subs	r3, #1
 8007204:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007206:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800720e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	3b01      	subs	r3, #1
 8007218:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800721e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007220:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800722a:	d115      	bne.n	8007258 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	3b01      	subs	r3, #1
 8007238:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800723a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	3b01      	subs	r3, #1
 8007242:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007244:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	3b01      	subs	r3, #1
 800724e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007254:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007256:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fc3c 	bl	8007aec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40006400 	.word	0x40006400
 8007298:	40006500 	.word	0x40006500

0800729c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072ac:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <HAL_FDCAN_ConfigFilter+0x1e>
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d13d      	bne.n	8007336 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d119      	bne.n	80072f6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80072ce:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80072d6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e01d      	b.n	8007332 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	075a      	lsls	r2, r3, #29
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	079a      	lsls	r2, r3, #30
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3304      	adds	r3, #4
 800732a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	e006      	b.n	8007344 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733a:	f043 0202 	orr.w	r2, r3, #2
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
  }
}
 8007344:	4618      	mov	r0, r3
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d110      	bne.n	8007386 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	e006      	b.n	8007394 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738a:	f043 0204 	orr.w	r2, r3, #4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
  }
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d12c      	bne.n	8007412 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80073c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e023      	b.n	8007420 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fbd2 	bl	8007b98 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2101      	movs	r1, #1
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007400:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007404:	2201      	movs	r2, #1
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	409a      	lsls	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e006      	b.n	8007420 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007416:	f043 0208 	orr.w	r2, r3, #8
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
  }
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007428:	b480      	push	{r7}
 800742a:	b08b      	sub	sp, #44	; 0x2c
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800743c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800743e:	7efb      	ldrb	r3, [r7, #27]
 8007440:	2b02      	cmp	r3, #2
 8007442:	f040 80bc 	bne.w	80075be <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	d121      	bne.n	8007490 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	2b00      	cmp	r3, #0
 800745a:	d107      	bne.n	800746c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0af      	b.n	80075cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	4613      	mov	r3, r2
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	440b      	add	r3, r1
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
 800748e:	e020      	b.n	80074d2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	2b00      	cmp	r3, #0
 800749e:	d107      	bne.n	80074b0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e08d      	b.n	80075cc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	4613      	mov	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	4413      	add	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	440b      	add	r3, r1
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d107      	bne.n	80074f6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	0c9b      	lsrs	r3, r3, #18
 80074ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e005      	b.n	8007502 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	3304      	adds	r3, #4
 800751e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	0e1b      	lsrs	r3, r3, #24
 8007554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0fda      	lsrs	r2, r3, #31
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	3304      	adds	r3, #4
 800756a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007570:	2300      	movs	r3, #0
 8007572:	623b      	str	r3, [r7, #32]
 8007574:	e00a      	b.n	800758c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	441a      	add	r2, r3
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	440b      	add	r3, r1
 8007582:	7812      	ldrb	r2, [r2, #0]
 8007584:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	3301      	adds	r3, #1
 800758a:	623b      	str	r3, [r7, #32]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	4a11      	ldr	r2, [pc, #68]	; (80075d8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007594:	5cd3      	ldrb	r3, [r2, r3]
 8007596:	461a      	mov	r2, r3
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	4293      	cmp	r3, r2
 800759c:	d3eb      	bcc.n	8007576 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d105      	bne.n	80075b0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80075ae:	e004      	b.n	80075ba <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e006      	b.n	80075cc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c2:	f043 0208 	orr.w	r2, r3, #8
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
  }
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	372c      	adds	r7, #44	; 0x2c
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	080103c0 	.word	0x080103c0

080075dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075ee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d003      	beq.n	80075fe <HAL_FDCAN_ActivateNotification+0x22>
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	f040 80c8 	bne.w	800778e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d03b      	beq.n	8007692 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d031      	beq.n	8007692 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	d027      	beq.n	8007692 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01d      	beq.n	8007692 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b00      	cmp	r3, #0
 8007668:	d013      	beq.n	8007692 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00c      	beq.n	80076a2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0201 	orr.w	r2, r2, #1
 80076a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d13b      	bne.n	800772e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d131      	bne.n	800772e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d127      	bne.n	800772e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11d      	bne.n	800772e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b00      	cmp	r3, #0
 8007704:	d113      	bne.n	800772e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0202 	orr.w	r2, r2, #2
 800773c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007744:	2b00      	cmp	r3, #0
 8007746:	d009      	beq.n	800775c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	430a      	orrs	r2, r1
 8007758:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	430a      	orrs	r2, r1
 8007776:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	430a      	orrs	r2, r1
 8007788:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e006      	b.n	800779c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007792:	f043 0202 	orr.w	r2, r3, #2
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
  }
}
 800779c:	4618      	mov	r0, r3
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c4:	4013      	ands	r3, r2
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	4013      	ands	r3, r2
 80077de:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ea:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007802:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	4013      	ands	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007816:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800781a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4013      	ands	r3, r2
 8007826:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00d      	beq.n	8007852 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d006      	beq.n	8007852 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f92e 	bl	8007aae <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01b      	beq.n	8007898 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786a:	2b00      	cmp	r3, #0
 800786c:	d014      	beq.n	8007898 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007876:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4013      	ands	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800788e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007890:	6939      	ldr	r1, [r7, #16]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8ec 	bl	8007a70 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80078a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f8b6 	bl	8007a1a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6a3a      	ldr	r2, [r7, #32]
 80078ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80078bc:	6a39      	ldr	r1, [r7, #32]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7f9 fb6c 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f8ab 	bl	8007a30 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f8a0 	bl	8007a46 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01a      	beq.n	800794a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800792a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4013      	ands	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2280      	movs	r2, #128	; 0x80
 8007940:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007942:	68f9      	ldr	r1, [r7, #12]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f888 	bl	8007a5a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800796e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f888 	bl	8007a86 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00e      	beq.n	80079a2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800799a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f87c 	bl	8007a9a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d011      	beq.n	80079d4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80079e2:	6979      	ldr	r1, [r7, #20]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f876 	bl	8007ad6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f858 	bl	8007ac2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007a12:	bf00      	nop
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007af4:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007af6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b06:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	041a      	lsls	r2, r3, #16
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b2c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	061a      	lsls	r2, r3, #24
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e005      	b.n	8007b7a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3304      	adds	r3, #4
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d3f3      	bcc.n	8007b6e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	4000a400 	.word	0x4000a400

08007b98 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b089      	sub	sp, #36	; 0x24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007bb6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	e00a      	b.n	8007bda <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007bcc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007bd2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bd8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007be4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007bea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007bf0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	440b      	add	r3, r1
 8007c0a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	3304      	adds	r3, #4
 8007c16:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	3304      	adds	r3, #4
 8007c22:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e020      	b.n	8007c6c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3303      	adds	r3, #3
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	3302      	adds	r3, #2
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	440b      	add	r3, r1
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007c42:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	3301      	adds	r3, #1
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	440b      	add	r3, r1
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007c50:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	440a      	add	r2, r1
 8007c58:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007c5a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	3304      	adds	r3, #4
 8007c64:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	4a06      	ldr	r2, [pc, #24]	; (8007c8c <FDCAN_CopyMessageToRAM+0xf4>)
 8007c74:	5cd3      	ldrb	r3, [r2, r3]
 8007c76:	461a      	mov	r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d3d5      	bcc.n	8007c2a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	3724      	adds	r7, #36	; 0x24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	080103c0 	.word	0x080103c0

08007c90 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007ca2:	4b24      	ldr	r3, [pc, #144]	; (8007d34 <HAL_FLASH_Program+0xa4>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_FLASH_Program+0x1e>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e03e      	b.n	8007d2c <HAL_FLASH_Program+0x9c>
 8007cae:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <HAL_FLASH_Program+0xa4>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cb8:	f000 f888 	bl	8007dcc <FLASH_WaitForLastOperation>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d12e      	bne.n	8007d24 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cc6:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <HAL_FLASH_Program+0xa4>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d107      	bne.n	8007ce2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	68b8      	ldr	r0, [r7, #8]
 8007cd8:	f000 f8cc 	bl	8007e74 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	e010      	b.n	8007d04 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d002      	beq.n	8007cee <HAL_FLASH_Program+0x5e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d10a      	bne.n	8007d04 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68b8      	ldr	r0, [r7, #8]
 8007cf4:	f000 f8e4 	bl	8007ec0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d102      	bne.n	8007d04 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007cfe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d02:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d08:	f000 f860 	bl	8007dcc <FLASH_WaitForLastOperation>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d006      	beq.n	8007d24 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007d16:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <HAL_FLASH_Program+0xa8>)
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	4906      	ldr	r1, [pc, #24]	; (8007d38 <HAL_FLASH_Program+0xa8>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007d24:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <HAL_FLASH_Program+0xa4>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	2000000c 	.word	0x2000000c
 8007d38:	40022000 	.word	0x40022000

08007d3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <HAL_FLASH_Unlock+0x38>)
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da0b      	bge.n	8007d66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007d4e:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <HAL_FLASH_Unlock+0x38>)
 8007d50:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <HAL_FLASH_Unlock+0x3c>)
 8007d52:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007d54:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <HAL_FLASH_Unlock+0x38>)
 8007d56:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <HAL_FLASH_Unlock+0x40>)
 8007d58:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007d5a:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <HAL_FLASH_Unlock+0x38>)
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	da01      	bge.n	8007d66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007d66:	79fb      	ldrb	r3, [r7, #7]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	40022000 	.word	0x40022000
 8007d78:	45670123 	.word	0x45670123
 8007d7c:	cdef89ab 	.word	0xcdef89ab

08007d80 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_FLASH_Lock+0x30>)
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	4a08      	ldr	r2, [pc, #32]	; (8007db0 <HAL_FLASH_Lock+0x30>)
 8007d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d94:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <HAL_FLASH_Lock+0x30>)
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da01      	bge.n	8007da2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007da2:	79fb      	ldrb	r3, [r7, #7]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40022000 	.word	0x40022000

08007db4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007db8:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <HAL_FLASH_GetError+0x14>)
 8007dba:	685b      	ldr	r3, [r3, #4]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	2000000c 	.word	0x2000000c

08007dcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007dd4:	f7fd fc72 	bl	80056bc <HAL_GetTick>
 8007dd8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007dda:	e009      	b.n	8007df0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007ddc:	f7fd fc6e 	bl	80056bc <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d201      	bcs.n	8007df0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e038      	b.n	8007e62 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007df0:	4b1e      	ldr	r3, [pc, #120]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfc:	d0ee      	beq.n	8007ddc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007e06:	4013      	ands	r3, r2
 8007e08:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01e      	beq.n	8007e4e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007e10:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <FLASH_WaitForLastOperation+0xa4>)
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <FLASH_WaitForLastOperation+0xa4>)
 8007e1a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <FLASH_WaitForLastOperation+0x6a>
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e30:	490e      	ldr	r1, [pc, #56]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	618b      	str	r3, [r1, #24]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <FLASH_WaitForLastOperation+0x7e>
 8007e40:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007e48:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e009      	b.n	8007e62 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007e4e:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d102      	bne.n	8007e60 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <FLASH_WaitForLastOperation+0xa0>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40022000 	.word	0x40022000
 8007e70:	2000000c 	.word	0x2000000c

08007e74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007e80:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <FLASH_Program_DoubleWord+0x48>)
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4a0d      	ldr	r2, [pc, #52]	; (8007ebc <FLASH_Program_DoubleWord+0x48>)
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007e92:	f3bf 8f6f 	isb	sy
}
 8007e96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	000a      	movs	r2, r1
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	68f9      	ldr	r1, [r7, #12]
 8007eaa:	3104      	adds	r1, #4
 8007eac:	4613      	mov	r3, r2
 8007eae:	600b      	str	r3, [r1, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	40022000 	.word	0x40022000

08007ec0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b089      	sub	sp, #36	; 0x24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <FLASH_Program_Fast+0x68>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <FLASH_Program_Fast+0x68>)
 8007edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ee0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ee8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007eec:	b672      	cpsid	i
}
 8007eee:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	3304      	adds	r3, #4
 8007efc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3304      	adds	r3, #4
 8007f02:	617b      	str	r3, [r7, #20]
    row_index--;
 8007f04:	7ffb      	ldrb	r3, [r7, #31]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1ef      	bne.n	8007ef0 <FLASH_Program_Fast+0x30>
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f383 8810 	msr	PRIMASK, r3
}
 8007f1a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007f1c:	bf00      	nop
 8007f1e:	3724      	adds	r7, #36	; 0x24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	40022000 	.word	0x40022000

08007f2c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007f36:	4b47      	ldr	r3, [pc, #284]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_FLASHEx_Erase+0x16>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e083      	b.n	800804a <HAL_FLASHEx_Erase+0x11e>
 8007f42:	4b44      	ldr	r3, [pc, #272]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f4c:	f7ff ff3e 	bl	8007dcc <FLASH_WaitForLastOperation>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d173      	bne.n	8008042 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007f5a:	4b3e      	ldr	r3, [pc, #248]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007f60:	4b3d      	ldr	r3, [pc, #244]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007f6c:	4b3a      	ldr	r3, [pc, #232]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007f78:	4b37      	ldr	r3, [pc, #220]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a36      	ldr	r2, [pc, #216]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f82:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007f84:	4b33      	ldr	r3, [pc, #204]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007f86:	2203      	movs	r2, #3
 8007f88:	771a      	strb	r2, [r3, #28]
 8007f8a:	e016      	b.n	8007fba <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007f8c:	4b31      	ldr	r3, [pc, #196]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007f8e:	2201      	movs	r2, #1
 8007f90:	771a      	strb	r2, [r3, #28]
 8007f92:	e012      	b.n	8007fba <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007f94:	4b30      	ldr	r3, [pc, #192]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007fa0:	4b2d      	ldr	r3, [pc, #180]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a2c      	ldr	r2, [pc, #176]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007faa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007fac:	4b29      	ldr	r3, [pc, #164]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007fae:	2202      	movs	r2, #2
 8007fb0:	771a      	strb	r2, [r3, #28]
 8007fb2:	e002      	b.n	8007fba <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007fb4:	4b27      	ldr	r3, [pc, #156]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d111      	bne.n	8007fe6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f848 	bl	800805c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fd0:	f7ff fefc 	bl	8007dcc <FLASH_WaitForLastOperation>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007fd8:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	4a1e      	ldr	r2, [pc, #120]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8007fde:	f023 0304 	bic.w	r3, r3, #4
 8007fe2:	6153      	str	r3, [r2, #20]
 8007fe4:	e02b      	b.n	800803e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fec:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	e01b      	b.n	800802e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	68b8      	ldr	r0, [r7, #8]
 8007ffe:	f000 f84b 	bl	8008098 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008006:	f7ff fee1 	bl	8007dcc <FLASH_WaitForLastOperation>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4a11      	ldr	r2, [pc, #68]	; (8008058 <HAL_FLASHEx_Erase+0x12c>)
 8008014:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008018:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	601a      	str	r2, [r3, #0]
          break;
 8008026:	e00a      	b.n	800803e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3301      	adds	r3, #1
 800802c:	60bb      	str	r3, [r7, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4413      	add	r3, r2
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3db      	bcc.n	8007ff6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800803e:	f000 f84f 	bl	80080e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <HAL_FLASHEx_Erase+0x128>)
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]

  return status;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
 8008058:	40022000 	.word	0x40022000

0800805c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d005      	beq.n	800807a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800806e:	4b09      	ldr	r3, [pc, #36]	; (8008094 <FLASH_MassErase+0x38>)
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	4a08      	ldr	r2, [pc, #32]	; (8008094 <FLASH_MassErase+0x38>)
 8008074:	f043 0304 	orr.w	r3, r3, #4
 8008078:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <FLASH_MassErase+0x38>)
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	4a05      	ldr	r2, [pc, #20]	; (8008094 <FLASH_MassErase+0x38>)
 8008080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008084:	6153      	str	r3, [r2, #20]
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40022000 	.word	0x40022000

08008098 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80080a2:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <FLASH_PageErase+0x44>)
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80080b2:	490a      	ldr	r1, [pc, #40]	; (80080dc <FLASH_PageErase+0x44>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80080b8:	4b08      	ldr	r3, [pc, #32]	; (80080dc <FLASH_PageErase+0x44>)
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	4a07      	ldr	r2, [pc, #28]	; (80080dc <FLASH_PageErase+0x44>)
 80080be:	f043 0302 	orr.w	r3, r3, #2
 80080c2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <FLASH_PageErase+0x44>)
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	4a04      	ldr	r2, [pc, #16]	; (80080dc <FLASH_PageErase+0x44>)
 80080ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ce:	6153      	str	r3, [r2, #20]
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	40022000 	.word	0x40022000

080080e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80080e6:	4b21      	ldr	r3, [pc, #132]	; (800816c <FLASH_FlushCaches+0x8c>)
 80080e8:	7f1b      	ldrb	r3, [r3, #28]
 80080ea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d002      	beq.n	80080f8 <FLASH_FlushCaches+0x18>
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d117      	bne.n	8008128 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80080f8:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <FLASH_FlushCaches+0x90>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1c      	ldr	r2, [pc, #112]	; (8008170 <FLASH_FlushCaches+0x90>)
 80080fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008102:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008104:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a19      	ldr	r2, [pc, #100]	; (8008170 <FLASH_FlushCaches+0x90>)
 800810a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	4b17      	ldr	r3, [pc, #92]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a16      	ldr	r2, [pc, #88]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800811a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800811c:	4b14      	ldr	r3, [pc, #80]	; (8008170 <FLASH_FlushCaches+0x90>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a13      	ldr	r2, [pc, #76]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008126:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d002      	beq.n	8008134 <FLASH_FlushCaches+0x54>
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d111      	bne.n	8008158 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008134:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a0d      	ldr	r2, [pc, #52]	; (8008170 <FLASH_FlushCaches+0x90>)
 800813a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800813e:	6013      	str	r3, [r2, #0]
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a0a      	ldr	r2, [pc, #40]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800814a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800814c:	4b08      	ldr	r3, [pc, #32]	; (8008170 <FLASH_FlushCaches+0x90>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a07      	ldr	r2, [pc, #28]	; (8008170 <FLASH_FlushCaches+0x90>)
 8008152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008156:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008158:	4b04      	ldr	r3, [pc, #16]	; (800816c <FLASH_FlushCaches+0x8c>)
 800815a:	2200      	movs	r2, #0
 800815c:	771a      	strb	r2, [r3, #28]
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	2000000c 	.word	0x2000000c
 8008170:	40022000 	.word	0x40022000

08008174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008182:	e15a      	b.n	800843a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	2101      	movs	r1, #1
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	fa01 f303 	lsl.w	r3, r1, r3
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 814c 	beq.w	8008434 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d005      	beq.n	80081b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d130      	bne.n	8008216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	2203      	movs	r2, #3
 80081c0:	fa02 f303 	lsl.w	r3, r2, r3
 80081c4:	43db      	mvns	r3, r3
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4013      	ands	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081ea:	2201      	movs	r2, #1
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43db      	mvns	r3, r3
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4013      	ands	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	f003 0201 	and.w	r2, r3, #1
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d017      	beq.n	8008252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	2203      	movs	r2, #3
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	43db      	mvns	r3, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4013      	ands	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d123      	bne.n	80082a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	08da      	lsrs	r2, r3, #3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3208      	adds	r2, #8
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	220f      	movs	r2, #15
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	43db      	mvns	r3, r3
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	4013      	ands	r3, r2
 8008280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	691a      	ldr	r2, [r3, #16]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	fa02 f303 	lsl.w	r3, r2, r3
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	08da      	lsrs	r2, r3, #3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3208      	adds	r2, #8
 80082a0:	6939      	ldr	r1, [r7, #16]
 80082a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	2203      	movs	r2, #3
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	43db      	mvns	r3, r3
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4013      	ands	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f003 0203 	and.w	r2, r3, #3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80a6 	beq.w	8008434 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082e8:	4b5b      	ldr	r3, [pc, #364]	; (8008458 <HAL_GPIO_Init+0x2e4>)
 80082ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ec:	4a5a      	ldr	r2, [pc, #360]	; (8008458 <HAL_GPIO_Init+0x2e4>)
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	6613      	str	r3, [r2, #96]	; 0x60
 80082f4:	4b58      	ldr	r3, [pc, #352]	; (8008458 <HAL_GPIO_Init+0x2e4>)
 80082f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008300:	4a56      	ldr	r2, [pc, #344]	; (800845c <HAL_GPIO_Init+0x2e8>)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	089b      	lsrs	r3, r3, #2
 8008306:	3302      	adds	r3, #2
 8008308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	220f      	movs	r2, #15
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	43db      	mvns	r3, r3
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4013      	ands	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800832a:	d01f      	beq.n	800836c <HAL_GPIO_Init+0x1f8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a4c      	ldr	r2, [pc, #304]	; (8008460 <HAL_GPIO_Init+0x2ec>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d019      	beq.n	8008368 <HAL_GPIO_Init+0x1f4>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a4b      	ldr	r2, [pc, #300]	; (8008464 <HAL_GPIO_Init+0x2f0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_GPIO_Init+0x1f0>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a4a      	ldr	r2, [pc, #296]	; (8008468 <HAL_GPIO_Init+0x2f4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00d      	beq.n	8008360 <HAL_GPIO_Init+0x1ec>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a49      	ldr	r2, [pc, #292]	; (800846c <HAL_GPIO_Init+0x2f8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <HAL_GPIO_Init+0x1e8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a48      	ldr	r2, [pc, #288]	; (8008470 <HAL_GPIO_Init+0x2fc>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d101      	bne.n	8008358 <HAL_GPIO_Init+0x1e4>
 8008354:	2305      	movs	r3, #5
 8008356:	e00a      	b.n	800836e <HAL_GPIO_Init+0x1fa>
 8008358:	2306      	movs	r3, #6
 800835a:	e008      	b.n	800836e <HAL_GPIO_Init+0x1fa>
 800835c:	2304      	movs	r3, #4
 800835e:	e006      	b.n	800836e <HAL_GPIO_Init+0x1fa>
 8008360:	2303      	movs	r3, #3
 8008362:	e004      	b.n	800836e <HAL_GPIO_Init+0x1fa>
 8008364:	2302      	movs	r3, #2
 8008366:	e002      	b.n	800836e <HAL_GPIO_Init+0x1fa>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <HAL_GPIO_Init+0x1fa>
 800836c:	2300      	movs	r3, #0
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	f002 0203 	and.w	r2, r2, #3
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4093      	lsls	r3, r2
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800837e:	4937      	ldr	r1, [pc, #220]	; (800845c <HAL_GPIO_Init+0x2e8>)
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	089b      	lsrs	r3, r3, #2
 8008384:	3302      	adds	r3, #2
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800838c:	4b39      	ldr	r3, [pc, #228]	; (8008474 <HAL_GPIO_Init+0x300>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	43db      	mvns	r3, r3
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4013      	ands	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083b0:	4a30      	ldr	r2, [pc, #192]	; (8008474 <HAL_GPIO_Init+0x300>)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083b6:	4b2f      	ldr	r3, [pc, #188]	; (8008474 <HAL_GPIO_Init+0x300>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	43db      	mvns	r3, r3
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4013      	ands	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80083da:	4a26      	ldr	r2, [pc, #152]	; (8008474 <HAL_GPIO_Init+0x300>)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80083e0:	4b24      	ldr	r3, [pc, #144]	; (8008474 <HAL_GPIO_Init+0x300>)
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4013      	ands	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008404:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <HAL_GPIO_Init+0x300>)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800840a:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <HAL_GPIO_Init+0x300>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	43db      	mvns	r3, r3
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4013      	ands	r3, r2
 8008418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4313      	orrs	r3, r2
 800842c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800842e:	4a11      	ldr	r2, [pc, #68]	; (8008474 <HAL_GPIO_Init+0x300>)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3301      	adds	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	fa22 f303 	lsr.w	r3, r2, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	f47f ae9d 	bne.w	8008184 <HAL_GPIO_Init+0x10>
  }
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40021000 	.word	0x40021000
 800845c:	40010000 	.word	0x40010000
 8008460:	48000400 	.word	0x48000400
 8008464:	48000800 	.word	0x48000800
 8008468:	48000c00 	.word	0x48000c00
 800846c:	48001000 	.word	0x48001000
 8008470:	48001400 	.word	0x48001400
 8008474:	40010400 	.word	0x40010400

08008478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	887b      	ldrh	r3, [r7, #2]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e001      	b.n	800849a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	807b      	strh	r3, [r7, #2]
 80084b4:	4613      	mov	r3, r2
 80084b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084b8:	787b      	ldrb	r3, [r7, #1]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084be:	887a      	ldrh	r2, [r7, #2]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084c4:	e002      	b.n	80084cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084c6:	887a      	ldrh	r2, [r7, #2]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e0bb      	b.n	8008666 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d101      	bne.n	80084fe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e0b3      	b.n	8008666 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d101      	bne.n	800850e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e0ab      	b.n	8008666 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800850e:	4b58      	ldr	r3, [pc, #352]	; (8008670 <HAL_OPAMP_Init+0x198>)
 8008510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008512:	4a57      	ldr	r2, [pc, #348]	; (8008670 <HAL_OPAMP_Init+0x198>)
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	6613      	str	r3, [r2, #96]	; 0x60
 800851a:	4b55      	ldr	r3, [pc, #340]	; (8008670 <HAL_OPAMP_Init+0x198>)
 800851c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	60bb      	str	r3, [r7, #8]
 8008524:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7fc fc80 	bl	8004e40 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	d003      	beq.n	8008550 <HAL_OPAMP_Init+0x78>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b60      	cmp	r3, #96	; 0x60
 800854e:	d133      	bne.n	80085b8 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f023 0110 	bic.w	r1, r3, #16
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b41      	ldr	r3, [pc, #260]	; (8008674 <HAL_OPAMP_Init+0x19c>)
 800856e:	4013      	ands	r3, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6851      	ldr	r1, [r2, #4]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6892      	ldr	r2, [r2, #8]
 8008578:	4311      	orrs	r1, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6912      	ldr	r2, [r2, #16]
 800857e:	430a      	orrs	r2, r1
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	7d09      	ldrb	r1, [r1, #20]
 8008584:	2901      	cmp	r1, #1
 8008586:	d102      	bne.n	800858e <HAL_OPAMP_Init+0xb6>
 8008588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800858c:	e000      	b.n	8008590 <HAL_OPAMP_Init+0xb8>
 800858e:	2100      	movs	r1, #0
 8008590:	4311      	orrs	r1, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008596:	4311      	orrs	r1, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800859c:	4311      	orrs	r1, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085a2:	04d2      	lsls	r2, r2, #19
 80085a4:	4311      	orrs	r1, r2
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085aa:	0612      	lsls	r2, r2, #24
 80085ac:	4311      	orrs	r1, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	430b      	orrs	r3, r1
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	e035      	b.n	8008624 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f023 0110 	bic.w	r1, r3, #16
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4b27      	ldr	r3, [pc, #156]	; (8008674 <HAL_OPAMP_Init+0x19c>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6851      	ldr	r1, [r2, #4]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6892      	ldr	r2, [r2, #8]
 80085e0:	4311      	orrs	r1, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68d2      	ldr	r2, [r2, #12]
 80085e6:	4311      	orrs	r1, r2
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6912      	ldr	r2, [r2, #16]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	7d09      	ldrb	r1, [r1, #20]
 80085f2:	2901      	cmp	r1, #1
 80085f4:	d102      	bne.n	80085fc <HAL_OPAMP_Init+0x124>
 80085f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085fa:	e000      	b.n	80085fe <HAL_OPAMP_Init+0x126>
 80085fc:	2100      	movs	r1, #0
 80085fe:	4311      	orrs	r1, r2
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008604:	4311      	orrs	r1, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800860a:	4311      	orrs	r1, r2
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008610:	04d2      	lsls	r2, r2, #19
 8008612:	4311      	orrs	r1, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008618:	0612      	lsls	r2, r2, #24
 800861a:	4311      	orrs	r1, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6812      	ldr	r2, [r2, #0]
 8008620:	430b      	orrs	r3, r1
 8008622:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	db10      	blt.n	8008650 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	431a      	orrs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	40021000 	.word	0x40021000
 8008674:	e0003e11 	.word	0xe0003e11

08008678 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e01d      	b.n	80086cc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b05      	cmp	r3, #5
 800869a:	d102      	bne.n	80086a2 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
 80086a0:	e014      	b.n	80086cc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10c      	bne.n	80086c8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2204      	movs	r2, #4
 80086c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80086c6:	e001      	b.n	80086cc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d141      	bne.n	800876e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086ea:	4b4b      	ldr	r3, [pc, #300]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f6:	d131      	bne.n	800875c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086f8:	4b47      	ldr	r3, [pc, #284]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086fe:	4a46      	ldr	r2, [pc, #280]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008708:	4b43      	ldr	r3, [pc, #268]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008710:	4a41      	ldr	r2, [pc, #260]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008718:	4b40      	ldr	r3, [pc, #256]	; (800881c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2232      	movs	r2, #50	; 0x32
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	4a3f      	ldr	r2, [pc, #252]	; (8008820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008724:	fba2 2303 	umull	r2, r3, r2, r3
 8008728:	0c9b      	lsrs	r3, r3, #18
 800872a:	3301      	adds	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800872e:	e002      	b.n	8008736 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3b01      	subs	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008736:	4b38      	ldr	r3, [pc, #224]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800873e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008742:	d102      	bne.n	800874a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f2      	bne.n	8008730 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800874a:	4b33      	ldr	r3, [pc, #204]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008756:	d158      	bne.n	800880a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e057      	b.n	800880c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800875c:	4b2e      	ldr	r3, [pc, #184]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800875e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008762:	4a2d      	ldr	r2, [pc, #180]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800876c:	e04d      	b.n	800880a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008774:	d141      	bne.n	80087fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008776:	4b28      	ldr	r3, [pc, #160]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800877e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008782:	d131      	bne.n	80087e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800878a:	4a23      	ldr	r2, [pc, #140]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800878c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008794:	4b20      	ldr	r3, [pc, #128]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800879c:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800879e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087a4:	4b1d      	ldr	r3, [pc, #116]	; (800881c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2232      	movs	r2, #50	; 0x32
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	4a1c      	ldr	r2, [pc, #112]	; (8008820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087b0:	fba2 2303 	umull	r2, r3, r2, r3
 80087b4:	0c9b      	lsrs	r3, r3, #18
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087ba:	e002      	b.n	80087c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3b01      	subs	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ce:	d102      	bne.n	80087d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1f2      	bne.n	80087bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e2:	d112      	bne.n	800880a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e011      	b.n	800880c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087e8:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ee:	4a0a      	ldr	r2, [pc, #40]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80087f8:	e007      	b.n	800880a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008802:	4a05      	ldr	r2, [pc, #20]	; (8008818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008808:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	40007000 	.word	0x40007000
 800881c:	20000000 	.word	0x20000000
 8008820:	431bde83 	.word	0x431bde83

08008824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e306      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d075      	beq.n	800892e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008842:	4b97      	ldr	r3, [pc, #604]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 030c 	and.w	r3, r3, #12
 800884a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800884c:	4b94      	ldr	r3, [pc, #592]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b0c      	cmp	r3, #12
 800885a:	d102      	bne.n	8008862 <HAL_RCC_OscConfig+0x3e>
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2b03      	cmp	r3, #3
 8008860:	d002      	beq.n	8008868 <HAL_RCC_OscConfig+0x44>
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b08      	cmp	r3, #8
 8008866:	d10b      	bne.n	8008880 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008868:	4b8d      	ldr	r3, [pc, #564]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d05b      	beq.n	800892c <HAL_RCC_OscConfig+0x108>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d157      	bne.n	800892c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e2e1      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008888:	d106      	bne.n	8008898 <HAL_RCC_OscConfig+0x74>
 800888a:	4b85      	ldr	r3, [pc, #532]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a84      	ldr	r2, [pc, #528]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	e01d      	b.n	80088d4 <HAL_RCC_OscConfig+0xb0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088a0:	d10c      	bne.n	80088bc <HAL_RCC_OscConfig+0x98>
 80088a2:	4b7f      	ldr	r3, [pc, #508]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a7e      	ldr	r2, [pc, #504]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	4b7c      	ldr	r3, [pc, #496]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a7b      	ldr	r2, [pc, #492]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e00b      	b.n	80088d4 <HAL_RCC_OscConfig+0xb0>
 80088bc:	4b78      	ldr	r3, [pc, #480]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a77      	ldr	r2, [pc, #476]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4b75      	ldr	r3, [pc, #468]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a74      	ldr	r2, [pc, #464]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d013      	beq.n	8008904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7fc feee 	bl	80056bc <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088e4:	f7fc feea 	bl	80056bc <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b64      	cmp	r3, #100	; 0x64
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e2a6      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088f6:	4b6a      	ldr	r3, [pc, #424]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0xc0>
 8008902:	e014      	b.n	800892e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008904:	f7fc feda 	bl	80056bc <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800890c:	f7fc fed6 	bl	80056bc <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b64      	cmp	r3, #100	; 0x64
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e292      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800891e:	4b60      	ldr	r3, [pc, #384]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0xe8>
 800892a:	e000      	b.n	800892e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800892c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d075      	beq.n	8008a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800893a:	4b59      	ldr	r3, [pc, #356]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 030c 	and.w	r3, r3, #12
 8008942:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008944:	4b56      	ldr	r3, [pc, #344]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b0c      	cmp	r3, #12
 8008952:	d102      	bne.n	800895a <HAL_RCC_OscConfig+0x136>
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <HAL_RCC_OscConfig+0x13c>
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b04      	cmp	r3, #4
 800895e:	d11f      	bne.n	80089a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008960:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_RCC_OscConfig+0x154>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e265      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008978:	4b49      	ldr	r3, [pc, #292]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	061b      	lsls	r3, r3, #24
 8008986:	4946      	ldr	r1, [pc, #280]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008988:	4313      	orrs	r3, r2
 800898a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800898c:	4b45      	ldr	r3, [pc, #276]	; (8008aa4 <HAL_RCC_OscConfig+0x280>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4618      	mov	r0, r3
 8008992:	f7fc fe47 	bl	8005624 <HAL_InitTick>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d043      	beq.n	8008a24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e251      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d023      	beq.n	80089f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089a8:	4b3d      	ldr	r3, [pc, #244]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a3c      	ldr	r2, [pc, #240]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b4:	f7fc fe82 	bl	80056bc <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089bc:	f7fc fe7e 	bl	80056bc <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e23a      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089ce:	4b34      	ldr	r3, [pc, #208]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f0      	beq.n	80089bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089da:	4b31      	ldr	r3, [pc, #196]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	061b      	lsls	r3, r3, #24
 80089e8:	492d      	ldr	r1, [pc, #180]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	604b      	str	r3, [r1, #4]
 80089ee:	e01a      	b.n	8008a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089f0:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a2a      	ldr	r2, [pc, #168]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 80089f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fc:	f7fc fe5e 	bl	80056bc <HAL_GetTick>
 8008a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a04:	f7fc fe5a 	bl	80056bc <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e216      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a16:	4b22      	ldr	r3, [pc, #136]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <HAL_RCC_OscConfig+0x1e0>
 8008a22:	e000      	b.n	8008a26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d041      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01c      	beq.n	8008a74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a3a:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a40:	4a17      	ldr	r2, [pc, #92]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008a42:	f043 0301 	orr.w	r3, r3, #1
 8008a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a4a:	f7fc fe37 	bl	80056bc <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a52:	f7fc fe33 	bl	80056bc <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e1ef      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a64:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0ef      	beq.n	8008a52 <HAL_RCC_OscConfig+0x22e>
 8008a72:	e020      	b.n	8008ab6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a7a:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <HAL_RCC_OscConfig+0x27c>)
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a84:	f7fc fe1a 	bl	80056bc <HAL_GetTick>
 8008a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a8a:	e00d      	b.n	8008aa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a8c:	f7fc fe16 	bl	80056bc <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d906      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e1d2      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
 8008a9e:	bf00      	nop
 8008aa0:	40021000 	.word	0x40021000
 8008aa4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008aa8:	4b8c      	ldr	r3, [pc, #560]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1ea      	bne.n	8008a8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 80a6 	beq.w	8008c10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ac8:	4b84      	ldr	r3, [pc, #528]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x2b4>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <HAL_RCC_OscConfig+0x2b6>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ade:	4b7f      	ldr	r3, [pc, #508]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	4a7e      	ldr	r2, [pc, #504]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8008aea:	4b7c      	ldr	r3, [pc, #496]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008af6:	2301      	movs	r3, #1
 8008af8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008afa:	4b79      	ldr	r3, [pc, #484]	; (8008ce0 <HAL_RCC_OscConfig+0x4bc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d118      	bne.n	8008b38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b06:	4b76      	ldr	r3, [pc, #472]	; (8008ce0 <HAL_RCC_OscConfig+0x4bc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a75      	ldr	r2, [pc, #468]	; (8008ce0 <HAL_RCC_OscConfig+0x4bc>)
 8008b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b12:	f7fc fdd3 	bl	80056bc <HAL_GetTick>
 8008b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b18:	e008      	b.n	8008b2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b1a:	f7fc fdcf 	bl	80056bc <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e18b      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b2c:	4b6c      	ldr	r3, [pc, #432]	; (8008ce0 <HAL_RCC_OscConfig+0x4bc>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f0      	beq.n	8008b1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d108      	bne.n	8008b52 <HAL_RCC_OscConfig+0x32e>
 8008b40:	4b66      	ldr	r3, [pc, #408]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b46:	4a65      	ldr	r2, [pc, #404]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b50:	e024      	b.n	8008b9c <HAL_RCC_OscConfig+0x378>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	2b05      	cmp	r3, #5
 8008b58:	d110      	bne.n	8008b7c <HAL_RCC_OscConfig+0x358>
 8008b5a:	4b60      	ldr	r3, [pc, #384]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b60:	4a5e      	ldr	r2, [pc, #376]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b62:	f043 0304 	orr.w	r3, r3, #4
 8008b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b6a:	4b5c      	ldr	r3, [pc, #368]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b70:	4a5a      	ldr	r2, [pc, #360]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b7a:	e00f      	b.n	8008b9c <HAL_RCC_OscConfig+0x378>
 8008b7c:	4b57      	ldr	r3, [pc, #348]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b82:	4a56      	ldr	r2, [pc, #344]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b8c:	4b53      	ldr	r3, [pc, #332]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	4a52      	ldr	r2, [pc, #328]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008b94:	f023 0304 	bic.w	r3, r3, #4
 8008b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d016      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba4:	f7fc fd8a 	bl	80056bc <HAL_GetTick>
 8008ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008baa:	e00a      	b.n	8008bc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bac:	f7fc fd86 	bl	80056bc <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e140      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bc2:	4b46      	ldr	r3, [pc, #280]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0ed      	beq.n	8008bac <HAL_RCC_OscConfig+0x388>
 8008bd0:	e015      	b.n	8008bfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd2:	f7fc fd73 	bl	80056bc <HAL_GetTick>
 8008bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bd8:	e00a      	b.n	8008bf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bda:	f7fc fd6f 	bl	80056bc <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d901      	bls.n	8008bf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e129      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bf0:	4b3a      	ldr	r3, [pc, #232]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1ed      	bne.n	8008bda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bfe:	7ffb      	ldrb	r3, [r7, #31]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d105      	bne.n	8008c10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c04:	4b35      	ldr	r3, [pc, #212]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c08:	4a34      	ldr	r2, [pc, #208]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d03c      	beq.n	8008c96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01c      	beq.n	8008c5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c24:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c2a:	4a2c      	ldr	r2, [pc, #176]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c34:	f7fc fd42 	bl	80056bc <HAL_GetTick>
 8008c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c3c:	f7fc fd3e 	bl	80056bc <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e0fa      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c4e:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0ef      	beq.n	8008c3c <HAL_RCC_OscConfig+0x418>
 8008c5c:	e01b      	b.n	8008c96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c64:	4a1d      	ldr	r2, [pc, #116]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c66:	f023 0301 	bic.w	r3, r3, #1
 8008c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6e:	f7fc fd25 	bl	80056bc <HAL_GetTick>
 8008c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c74:	e008      	b.n	8008c88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c76:	f7fc fd21 	bl	80056bc <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d901      	bls.n	8008c88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e0dd      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c88:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1ef      	bne.n	8008c76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 80d1 	beq.w	8008e42 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ca0:	4b0e      	ldr	r3, [pc, #56]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f003 030c 	and.w	r3, r3, #12
 8008ca8:	2b0c      	cmp	r3, #12
 8008caa:	f000 808b 	beq.w	8008dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d15e      	bne.n	8008d74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cb6:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <HAL_RCC_OscConfig+0x4b8>)
 8008cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc2:	f7fc fcfb 	bl	80056bc <HAL_GetTick>
 8008cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cc8:	e00c      	b.n	8008ce4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cca:	f7fc fcf7 	bl	80056bc <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d905      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e0b3      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
 8008cdc:	40021000 	.word	0x40021000
 8008ce0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ce4:	4b59      	ldr	r3, [pc, #356]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1ec      	bne.n	8008cca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cf0:	4b56      	ldr	r3, [pc, #344]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	4b56      	ldr	r3, [pc, #344]	; (8008e50 <HAL_RCC_OscConfig+0x62c>)
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6a11      	ldr	r1, [r2, #32]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d00:	3a01      	subs	r2, #1
 8008d02:	0112      	lsls	r2, r2, #4
 8008d04:	4311      	orrs	r1, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008d0a:	0212      	lsls	r2, r2, #8
 8008d0c:	4311      	orrs	r1, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d12:	0852      	lsrs	r2, r2, #1
 8008d14:	3a01      	subs	r2, #1
 8008d16:	0552      	lsls	r2, r2, #21
 8008d18:	4311      	orrs	r1, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d1e:	0852      	lsrs	r2, r2, #1
 8008d20:	3a01      	subs	r2, #1
 8008d22:	0652      	lsls	r2, r2, #25
 8008d24:	4311      	orrs	r1, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d2a:	06d2      	lsls	r2, r2, #27
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	4947      	ldr	r1, [pc, #284]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d34:	4b45      	ldr	r3, [pc, #276]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a44      	ldr	r2, [pc, #272]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d40:	4b42      	ldr	r3, [pc, #264]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	4a41      	ldr	r2, [pc, #260]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7fc fcb6 	bl	80056bc <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d54:	f7fc fcb2 	bl	80056bc <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e06e      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d66:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0x530>
 8008d72:	e066      	b.n	8008e42 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d74:	4b35      	ldr	r3, [pc, #212]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a34      	ldr	r2, [pc, #208]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008d80:	4b32      	ldr	r3, [pc, #200]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4a31      	ldr	r2, [pc, #196]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d8c:	4b2f      	ldr	r3, [pc, #188]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	4a2e      	ldr	r2, [pc, #184]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008d92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7fc fc8e 	bl	80056bc <HAL_GetTick>
 8008da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da4:	f7fc fc8a 	bl	80056bc <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e046      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008db6:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f0      	bne.n	8008da4 <HAL_RCC_OscConfig+0x580>
 8008dc2:	e03e      	b.n	8008e42 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e039      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <HAL_RCC_OscConfig+0x628>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f003 0203 	and.w	r2, r3, #3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d12c      	bne.n	8008e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	3b01      	subs	r3, #1
 8008df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d123      	bne.n	8008e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d11b      	bne.n	8008e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d113      	bne.n	8008e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	085b      	lsrs	r3, r3, #1
 8008e22:	3b01      	subs	r3, #1
 8008e24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d109      	bne.n	8008e3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	085b      	lsrs	r3, r3, #1
 8008e36:	3b01      	subs	r3, #1
 8008e38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d001      	beq.n	8008e42 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40021000 	.word	0x40021000
 8008e50:	019f800c 	.word	0x019f800c

08008e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e11e      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e6c:	4b91      	ldr	r3, [pc, #580]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 030f 	and.w	r3, r3, #15
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d910      	bls.n	8008e9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7a:	4b8e      	ldr	r3, [pc, #568]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f023 020f 	bic.w	r2, r3, #15
 8008e82:	498c      	ldr	r1, [pc, #560]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e8a:	4b8a      	ldr	r3, [pc, #552]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d001      	beq.n	8008e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e106      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d073      	beq.n	8008f90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d129      	bne.n	8008f04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008eb0:	4b81      	ldr	r3, [pc, #516]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e0f4      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008ec0:	f000 f99e 	bl	8009200 <RCC_GetSysClockFreqFromPLLSource>
 8008ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4a7c      	ldr	r2, [pc, #496]	; (80090bc <HAL_RCC_ClockConfig+0x268>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d93f      	bls.n	8008f4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ece:	4b7a      	ldr	r3, [pc, #488]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d033      	beq.n	8008f4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d12f      	bne.n	8008f4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008eee:	4b72      	ldr	r3, [pc, #456]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ef6:	4a70      	ldr	r2, [pc, #448]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	e024      	b.n	8008f4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d107      	bne.n	8008f1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f0c:	4b6a      	ldr	r3, [pc, #424]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d109      	bne.n	8008f2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e0c6      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f1c:	4b66      	ldr	r3, [pc, #408]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0be      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f2c:	f000 f8ce 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 8008f30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4a61      	ldr	r2, [pc, #388]	; (80090bc <HAL_RCC_ClockConfig+0x268>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d909      	bls.n	8008f4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f3a:	4b5f      	ldr	r3, [pc, #380]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f42:	4a5d      	ldr	r2, [pc, #372]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008f4a:	2380      	movs	r3, #128	; 0x80
 8008f4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f4e:	4b5a      	ldr	r3, [pc, #360]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f023 0203 	bic.w	r2, r3, #3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4957      	ldr	r1, [pc, #348]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f60:	f7fc fbac 	bl	80056bc <HAL_GetTick>
 8008f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f66:	e00a      	b.n	8008f7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f68:	f7fc fba8 	bl	80056bc <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e095      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f7e:	4b4e      	ldr	r3, [pc, #312]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 020c 	and.w	r2, r3, #12
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d1eb      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d023      	beq.n	8008fe4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fa8:	4b43      	ldr	r3, [pc, #268]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	4a42      	ldr	r2, [pc, #264]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008fae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008fb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008fc0:	4b3d      	ldr	r3, [pc, #244]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fc8:	4a3b      	ldr	r2, [pc, #236]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008fce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fd0:	4b39      	ldr	r3, [pc, #228]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4936      	ldr	r1, [pc, #216]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	608b      	str	r3, [r1, #8]
 8008fe2:	e008      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b80      	cmp	r3, #128	; 0x80
 8008fe8:	d105      	bne.n	8008ff6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008fea:	4b33      	ldr	r3, [pc, #204]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	4a32      	ldr	r2, [pc, #200]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8008ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ff4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ff6:	4b2f      	ldr	r3, [pc, #188]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d21d      	bcs.n	8009040 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009004:	4b2b      	ldr	r3, [pc, #172]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f023 020f 	bic.w	r2, r3, #15
 800900c:	4929      	ldr	r1, [pc, #164]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	4313      	orrs	r3, r2
 8009012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009014:	f7fc fb52 	bl	80056bc <HAL_GetTick>
 8009018:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800901a:	e00a      	b.n	8009032 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800901c:	f7fc fb4e 	bl	80056bc <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	f241 3288 	movw	r2, #5000	; 0x1388
 800902a:	4293      	cmp	r3, r2
 800902c:	d901      	bls.n	8009032 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e03b      	b.n	80090aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009032:	4b20      	ldr	r3, [pc, #128]	; (80090b4 <HAL_RCC_ClockConfig+0x260>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d1ed      	bne.n	800901c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d008      	beq.n	800905e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800904c:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	4917      	ldr	r1, [pc, #92]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 800905a:	4313      	orrs	r3, r2
 800905c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800906a:	4b13      	ldr	r3, [pc, #76]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	490f      	ldr	r1, [pc, #60]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 800907a:	4313      	orrs	r3, r2
 800907c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800907e:	f000 f825 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 8009082:	4602      	mov	r2, r0
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <HAL_RCC_ClockConfig+0x264>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	091b      	lsrs	r3, r3, #4
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	490c      	ldr	r1, [pc, #48]	; (80090c0 <HAL_RCC_ClockConfig+0x26c>)
 8009090:	5ccb      	ldrb	r3, [r1, r3]
 8009092:	f003 031f 	and.w	r3, r3, #31
 8009096:	fa22 f303 	lsr.w	r3, r2, r3
 800909a:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <HAL_RCC_ClockConfig+0x270>)
 800909c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <HAL_RCC_ClockConfig+0x274>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fc fabe 	bl	8005624 <HAL_InitTick>
 80090a8:	4603      	mov	r3, r0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	40022000 	.word	0x40022000
 80090b8:	40021000 	.word	0x40021000
 80090bc:	04c4b400 	.word	0x04c4b400
 80090c0:	080103a8 	.word	0x080103a8
 80090c4:	20000000 	.word	0x20000000
 80090c8:	20000004 	.word	0x20000004

080090cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80090d2:	4b2c      	ldr	r3, [pc, #176]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 030c 	and.w	r3, r3, #12
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d102      	bne.n	80090e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090de:	4b2a      	ldr	r3, [pc, #168]	; (8009188 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	e047      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80090e4:	4b27      	ldr	r3, [pc, #156]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 030c 	and.w	r3, r3, #12
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d102      	bne.n	80090f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090f0:	4b26      	ldr	r3, [pc, #152]	; (800918c <HAL_RCC_GetSysClockFreq+0xc0>)
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	e03e      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80090f6:	4b23      	ldr	r3, [pc, #140]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 030c 	and.w	r3, r3, #12
 80090fe:	2b0c      	cmp	r3, #12
 8009100:	d136      	bne.n	8009170 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009102:	4b20      	ldr	r3, [pc, #128]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800910c:	4b1d      	ldr	r3, [pc, #116]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	091b      	lsrs	r3, r3, #4
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	3301      	adds	r3, #1
 8009118:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d10c      	bne.n	800913a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009120:	4a1a      	ldr	r2, [pc, #104]	; (800918c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	fbb2 f3f3 	udiv	r3, r2, r3
 8009128:	4a16      	ldr	r2, [pc, #88]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800912a:	68d2      	ldr	r2, [r2, #12]
 800912c:	0a12      	lsrs	r2, r2, #8
 800912e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009132:	fb02 f303 	mul.w	r3, r2, r3
 8009136:	617b      	str	r3, [r7, #20]
      break;
 8009138:	e00c      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800913a:	4a13      	ldr	r2, [pc, #76]	; (8009188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009142:	4a10      	ldr	r2, [pc, #64]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009144:	68d2      	ldr	r2, [r2, #12]
 8009146:	0a12      	lsrs	r2, r2, #8
 8009148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	617b      	str	r3, [r7, #20]
      break;
 8009152:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009154:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	0e5b      	lsrs	r3, r3, #25
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	3301      	adds	r3, #1
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	e001      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009174:	693b      	ldr	r3, [r7, #16]
}
 8009176:	4618      	mov	r0, r3
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	40021000 	.word	0x40021000
 8009188:	00f42400 	.word	0x00f42400
 800918c:	007a1200 	.word	0x007a1200

08009190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009194:	4b03      	ldr	r3, [pc, #12]	; (80091a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009196:	681b      	ldr	r3, [r3, #0]
}
 8009198:	4618      	mov	r0, r3
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000000 	.word	0x20000000

080091a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80091ac:	f7ff fff0 	bl	8009190 <HAL_RCC_GetHCLKFreq>
 80091b0:	4602      	mov	r2, r0
 80091b2:	4b06      	ldr	r3, [pc, #24]	; (80091cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	4904      	ldr	r1, [pc, #16]	; (80091d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091be:	5ccb      	ldrb	r3, [r1, r3]
 80091c0:	f003 031f 	and.w	r3, r3, #31
 80091c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	40021000 	.word	0x40021000
 80091d0:	080103b8 	.word	0x080103b8

080091d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80091d8:	f7ff ffda 	bl	8009190 <HAL_RCC_GetHCLKFreq>
 80091dc:	4602      	mov	r2, r0
 80091de:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	0adb      	lsrs	r3, r3, #11
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	4904      	ldr	r1, [pc, #16]	; (80091fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80091ea:	5ccb      	ldrb	r3, [r1, r3]
 80091ec:	f003 031f 	and.w	r3, r3, #31
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40021000 	.word	0x40021000
 80091fc:	080103b8 	.word	0x080103b8

08009200 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009206:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009210:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	091b      	lsrs	r3, r3, #4
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b03      	cmp	r3, #3
 8009222:	d10c      	bne.n	800923e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009224:	4a17      	ldr	r2, [pc, #92]	; (8009284 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	fbb2 f3f3 	udiv	r3, r2, r3
 800922c:	4a14      	ldr	r2, [pc, #80]	; (8009280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800922e:	68d2      	ldr	r2, [r2, #12]
 8009230:	0a12      	lsrs	r2, r2, #8
 8009232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009236:	fb02 f303 	mul.w	r3, r2, r3
 800923a:	617b      	str	r3, [r7, #20]
    break;
 800923c:	e00c      	b.n	8009258 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800923e:	4a12      	ldr	r2, [pc, #72]	; (8009288 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	fbb2 f3f3 	udiv	r3, r2, r3
 8009246:	4a0e      	ldr	r2, [pc, #56]	; (8009280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009248:	68d2      	ldr	r2, [r2, #12]
 800924a:	0a12      	lsrs	r2, r2, #8
 800924c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009250:	fb02 f303 	mul.w	r3, r2, r3
 8009254:	617b      	str	r3, [r7, #20]
    break;
 8009256:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	0e5b      	lsrs	r3, r3, #25
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	3301      	adds	r3, #1
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009270:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009272:	687b      	ldr	r3, [r7, #4]
}
 8009274:	4618      	mov	r0, r3
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	40021000 	.word	0x40021000
 8009284:	007a1200 	.word	0x007a1200
 8009288:	00f42400 	.word	0x00f42400

0800928c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009294:	2300      	movs	r3, #0
 8009296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009298:	2300      	movs	r3, #0
 800929a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8098 	beq.w	80093da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092aa:	2300      	movs	r3, #0
 80092ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092ae:	4b43      	ldr	r3, [pc, #268]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10d      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092ba:	4b40      	ldr	r3, [pc, #256]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092be:	4a3f      	ldr	r2, [pc, #252]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c4:	6593      	str	r3, [r2, #88]	; 0x58
 80092c6:	4b3d      	ldr	r3, [pc, #244]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ce:	60bb      	str	r3, [r7, #8]
 80092d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092d2:	2301      	movs	r3, #1
 80092d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092d6:	4b3a      	ldr	r3, [pc, #232]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a39      	ldr	r2, [pc, #228]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092e2:	f7fc f9eb 	bl	80056bc <HAL_GetTick>
 80092e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092e8:	e009      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ea:	f7fc f9e7 	bl	80056bc <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d902      	bls.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	74fb      	strb	r3, [r7, #19]
        break;
 80092fc:	e005      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092fe:	4b30      	ldr	r3, [pc, #192]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0ef      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800930a:	7cfb      	ldrb	r3, [r7, #19]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d159      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009310:	4b2a      	ldr	r3, [pc, #168]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01e      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	429a      	cmp	r2, r3
 800932a:	d019      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800932c:	4b23      	ldr	r3, [pc, #140]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009338:	4b20      	ldr	r3, [pc, #128]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800933a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933e:	4a1f      	ldr	r2, [pc, #124]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009348:	4b1c      	ldr	r3, [pc, #112]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934e:	4a1b      	ldr	r2, [pc, #108]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009358:	4a18      	ldr	r2, [pc, #96]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d016      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800936a:	f7fc f9a7 	bl	80056bc <HAL_GetTick>
 800936e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009370:	e00b      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009372:	f7fc f9a3 	bl	80056bc <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009380:	4293      	cmp	r3, r2
 8009382:	d902      	bls.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	74fb      	strb	r3, [r7, #19]
            break;
 8009388:	e006      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800938a:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0ec      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009398:	7cfb      	ldrb	r3, [r7, #19]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	4903      	ldr	r1, [pc, #12]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80093b4:	e008      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093b6:	7cfb      	ldrb	r3, [r7, #19]
 80093b8:	74bb      	strb	r3, [r7, #18]
 80093ba:	e005      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80093bc:	40021000 	.word	0x40021000
 80093c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c4:	7cfb      	ldrb	r3, [r7, #19]
 80093c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093c8:	7c7b      	ldrb	r3, [r7, #17]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d105      	bne.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ce:	4ba6      	ldr	r3, [pc, #664]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d2:	4aa5      	ldr	r2, [pc, #660]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093e6:	4ba0      	ldr	r3, [pc, #640]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ec:	f023 0203 	bic.w	r2, r3, #3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	499c      	ldr	r1, [pc, #624]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009408:	4b97      	ldr	r3, [pc, #604]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800940a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940e:	f023 020c 	bic.w	r2, r3, #12
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	4994      	ldr	r1, [pc, #592]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0304 	and.w	r3, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800942a:	4b8f      	ldr	r3, [pc, #572]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800942c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	498b      	ldr	r1, [pc, #556]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800943a:	4313      	orrs	r3, r2
 800943c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800944c:	4b86      	ldr	r3, [pc, #536]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800944e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	4983      	ldr	r1, [pc, #524]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800945c:	4313      	orrs	r3, r2
 800945e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800946e:	4b7e      	ldr	r3, [pc, #504]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009474:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	497a      	ldr	r1, [pc, #488]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800947e:	4313      	orrs	r3, r2
 8009480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009490:	4b75      	ldr	r3, [pc, #468]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	4972      	ldr	r1, [pc, #456]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094b2:	4b6d      	ldr	r3, [pc, #436]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	4969      	ldr	r1, [pc, #420]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094d4:	4b64      	ldr	r3, [pc, #400]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	4961      	ldr	r1, [pc, #388]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094f6:	4b5c      	ldr	r3, [pc, #368]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	4958      	ldr	r1, [pc, #352]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009514:	2b00      	cmp	r3, #0
 8009516:	d015      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009518:	4b53      	ldr	r3, [pc, #332]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800951a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	4950      	ldr	r1, [pc, #320]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009528:	4313      	orrs	r3, r2
 800952a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009536:	d105      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009538:	4b4b      	ldr	r3, [pc, #300]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	4a4a      	ldr	r2, [pc, #296]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800953e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009542:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800954c:	2b00      	cmp	r3, #0
 800954e:	d015      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009550:	4b45      	ldr	r3, [pc, #276]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4942      	ldr	r1, [pc, #264]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009560:	4313      	orrs	r3, r2
 8009562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800956e:	d105      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009570:	4b3d      	ldr	r3, [pc, #244]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	4a3c      	ldr	r2, [pc, #240]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800957a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d015      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009588:	4b37      	ldr	r3, [pc, #220]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800958a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	4934      	ldr	r1, [pc, #208]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009598:	4313      	orrs	r3, r2
 800959a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095a6:	d105      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095a8:	4b2f      	ldr	r3, [pc, #188]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4a2e      	ldr	r2, [pc, #184]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d015      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095c0:	4b29      	ldr	r3, [pc, #164]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ce:	4926      	ldr	r1, [pc, #152]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095de:	d105      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095e0:	4b21      	ldr	r3, [pc, #132]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	4a20      	ldr	r2, [pc, #128]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d015      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095f8:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80095fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	4918      	ldr	r1, [pc, #96]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009608:	4313      	orrs	r3, r2
 800960a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009616:	d105      	bne.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009618:	4b13      	ldr	r3, [pc, #76]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	4a12      	ldr	r2, [pc, #72]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800961e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009622:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d015      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009630:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009636:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	490a      	ldr	r1, [pc, #40]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009640:	4313      	orrs	r3, r2
 8009642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800964e:	d105      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	4a04      	ldr	r2, [pc, #16]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800965a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800965c:	7cbb      	ldrb	r3, [r7, #18]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40021000 	.word	0x40021000

0800966c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e09d      	b.n	80097ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d108      	bne.n	8009698 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800968e:	d009      	beq.n	80096a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	61da      	str	r2, [r3, #28]
 8009696:	e005      	b.n	80096a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d106      	bne.n	80096c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fb fc34 	bl	8004f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096e4:	d902      	bls.n	80096ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	e002      	b.n	80096f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80096ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80096fa:	d007      	beq.n	800970c <HAL_SPI_Init+0xa0>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009704:	d002      	beq.n	800970c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800971c:	431a      	orrs	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	ea42 0103 	orr.w	r1, r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	f003 0204 	and.w	r2, r3, #4
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977a:	f003 0308 	and.w	r3, r3, #8
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009788:	ea42 0103 	orr.w	r1, r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_SPI_TransmitReceive_IT+0x20>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e091      	b.n	8009908 <HAL_SPI_TransmitReceive_IT+0x144>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097fa:	7dbb      	ldrb	r3, [r7, #22]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d00d      	beq.n	800981c <HAL_SPI_TransmitReceive_IT+0x58>
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009806:	d106      	bne.n	8009816 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <HAL_SPI_TransmitReceive_IT+0x52>
 8009810:	7dbb      	ldrb	r3, [r7, #22]
 8009812:	2b04      	cmp	r3, #4
 8009814:	d002      	beq.n	800981c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009816:	2302      	movs	r3, #2
 8009818:	75fb      	strb	r3, [r7, #23]
    goto error;
 800981a:	e070      	b.n	80098fe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d102      	bne.n	8009834 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009832:	e064      	b.n	80098fe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b04      	cmp	r3, #4
 800983e:	d003      	beq.n	8009848 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2205      	movs	r2, #5
 8009844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	887a      	ldrh	r2, [r7, #2]
 8009858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	887a      	ldrh	r2, [r7, #2]
 800985e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	887a      	ldrh	r2, [r7, #2]
 800986a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	887a      	ldrh	r2, [r7, #2]
 8009872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800987e:	d906      	bls.n	800988e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a24      	ldr	r2, [pc, #144]	; (8009914 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009884:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4a23      	ldr	r2, [pc, #140]	; (8009918 <HAL_SPI_TransmitReceive_IT+0x154>)
 800988a:	651a      	str	r2, [r3, #80]	; 0x50
 800988c:	e005      	b.n	800989a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4a22      	ldr	r2, [pc, #136]	; (800991c <HAL_SPI_TransmitReceive_IT+0x158>)
 8009892:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4a22      	ldr	r2, [pc, #136]	; (8009920 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009898:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098a2:	d802      	bhi.n	80098aa <HAL_SPI_TransmitReceive_IT+0xe6>
 80098a4:	887b      	ldrh	r3, [r7, #2]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d908      	bls.n	80098bc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098b8:	605a      	str	r2, [r3, #4]
 80098ba:	e007      	b.n	80098cc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098ca:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80098da:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e6:	2b40      	cmp	r3, #64	; 0x40
 80098e8:	d008      	beq.n	80098fc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	e000      	b.n	80098fe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80098fc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	08009cc7 	.word	0x08009cc7
 8009918:	08009d2d 	.word	0x08009d2d
 800991c:	08009b77 	.word	0x08009b77
 8009920:	08009c35 	.word	0x08009c35

08009924 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	099b      	lsrs	r3, r3, #6
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10f      	bne.n	8009968 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	099b      	lsrs	r3, r3, #6
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d004      	beq.n	8009968 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
    return;
 8009966:	e0d7      	b.n	8009b18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	085b      	lsrs	r3, r3, #1
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00a      	beq.n	800998a <HAL_SPI_IRQHandler+0x66>
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	09db      	lsrs	r3, r3, #7
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
    return;
 8009988:	e0c6      	b.n	8009b18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	095b      	lsrs	r3, r3, #5
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10c      	bne.n	80099b0 <HAL_SPI_IRQHandler+0x8c>
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	099b      	lsrs	r3, r3, #6
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	0a1b      	lsrs	r3, r3, #8
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80b4 	beq.w	8009b18 <HAL_SPI_IRQHandler+0x1f4>
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80ad 	beq.w	8009b18 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	099b      	lsrs	r3, r3, #6
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d023      	beq.n	8009a12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d011      	beq.n	80099fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099da:	f043 0204 	orr.w	r2, r3, #4
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	e00b      	b.n	8009a12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099fa:	2300      	movs	r3, #0
 80099fc:	613b      	str	r3, [r7, #16]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	613b      	str	r3, [r7, #16]
 8009a0e:	693b      	ldr	r3, [r7, #16]
        return;
 8009a10:	e082      	b.n	8009b18 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d014      	beq.n	8009a48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a22:	f043 0201 	orr.w	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00c      	beq.n	8009a6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a58:	f043 0208 	orr.w	r2, r3, #8
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a60:	2300      	movs	r3, #0
 8009a62:	60bb      	str	r3, [r7, #8]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	60bb      	str	r3, [r7, #8]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d04f      	beq.n	8009b16 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <HAL_SPI_IRQHandler+0x17e>
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d034      	beq.n	8009b0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0203 	bic.w	r2, r2, #3
 8009ab0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d011      	beq.n	8009ade <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abe:	4a18      	ldr	r2, [pc, #96]	; (8009b20 <HAL_SPI_IRQHandler+0x1fc>)
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fd fa27 	bl	8006f1a <HAL_DMA_Abort_IT>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d016      	beq.n	8009b14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aea:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <HAL_SPI_IRQHandler+0x1fc>)
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fd fa11 	bl	8006f1a <HAL_DMA_Abort_IT>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009b0a:	e003      	b.n	8009b14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f813 	bl	8009b38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b12:	e000      	b.n	8009b16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009b14:	bf00      	nop
    return;
 8009b16:	bf00      	nop
  }
}
 8009b18:	3720      	adds	r7, #32
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	08009b4d 	.word	0x08009b4d

08009b24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f7ff ffe5 	bl	8009b38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d923      	bls.n	8009bd2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b94:	b292      	uxth	r2, r2
 8009b96:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9c:	1c9a      	adds	r2, r3, #2
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b02      	subs	r3, #2
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d11f      	bne.n	8009c00 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bce:	605a      	str	r2, [r3, #4]
 8009bd0:	e016      	b.n	8009c00 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f103 020c 	add.w	r2, r3, #12
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	7812      	ldrb	r2, [r2, #0]
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10f      	bne.n	8009c2c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009c1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d102      	bne.n	8009c2c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa14 	bl	800a054 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d912      	bls.n	8009c6c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	881a      	ldrh	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	1c9a      	adds	r2, r3, #2
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b02      	subs	r3, #2
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c6a:	e012      	b.n	8009c92 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	330c      	adds	r3, #12
 8009c76:	7812      	ldrb	r2, [r2, #0]
 8009c78:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d110      	bne.n	8009cbe <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009caa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f9cb 	bl	800a054 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68da      	ldr	r2, [r3, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd8:	b292      	uxth	r2, r2
 8009cda:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce0:	1c9a      	adds	r2, r3, #2
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10f      	bne.n	8009d24 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f998 	bl	800a054 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d38:	881a      	ldrh	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	1c9a      	adds	r2, r3, #2
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d110      	bne.n	8009d84 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d70:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f968 	bl	800a054 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d9c:	f7fb fc8e 	bl	80056bc <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4413      	add	r3, r2
 8009daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009dac:	f7fb fc86 	bl	80056bc <HAL_GetTick>
 8009db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009db2:	4b39      	ldr	r3, [pc, #228]	; (8009e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	015b      	lsls	r3, r3, #5
 8009db8:	0d1b      	lsrs	r3, r3, #20
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	fb02 f303 	mul.w	r3, r2, r3
 8009dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dc2:	e054      	b.n	8009e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dca:	d050      	beq.n	8009e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009dcc:	f7fb fc76 	bl	80056bc <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	69fa      	ldr	r2, [r7, #28]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d902      	bls.n	8009de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d13d      	bne.n	8009e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dfa:	d111      	bne.n	8009e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e04:	d004      	beq.n	8009e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e0e:	d107      	bne.n	8009e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e28:	d10f      	bne.n	8009e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e017      	b.n	8009e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4013      	ands	r3, r2
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	bf0c      	ite	eq
 8009e7e:	2301      	moveq	r3, #1
 8009e80:	2300      	movne	r3, #0
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d19b      	bne.n	8009dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20000000 	.word	0x20000000

08009e9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	; 0x28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009eae:	f7fb fc05 	bl	80056bc <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	4413      	add	r3, r2
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009ebe:	f7fb fbfd 	bl	80056bc <HAL_GetTick>
 8009ec2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ecc:	4b3d      	ldr	r3, [pc, #244]	; (8009fc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	00da      	lsls	r2, r3, #3
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	0d1b      	lsrs	r3, r3, #20
 8009edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ede:	fb02 f303 	mul.w	r3, r2, r3
 8009ee2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ee4:	e060      	b.n	8009fa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009eec:	d107      	bne.n	8009efe <SPI_WaitFifoStateUntilTimeout+0x62>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d050      	beq.n	8009fa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f06:	f7fb fbd9 	bl	80056bc <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d902      	bls.n	8009f1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d13d      	bne.n	8009f98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f34:	d111      	bne.n	8009f5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f3e:	d004      	beq.n	8009f4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f48:	d107      	bne.n	8009f5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f62:	d10f      	bne.n	8009f84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e010      	b.n	8009fba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d196      	bne.n	8009ee6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3728      	adds	r7, #40	; 0x28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000000 	.word	0x20000000

08009fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7ff ff5b 	bl	8009e9c <SPI_WaitFifoStateUntilTimeout>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ff0:	f043 0220 	orr.w	r2, r3, #32
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e027      	b.n	800a04c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2200      	movs	r2, #0
 800a004:	2180      	movs	r1, #128	; 0x80
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fec0 	bl	8009d8c <SPI_WaitFlagStateUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d007      	beq.n	800a022 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a016:	f043 0220 	orr.w	r2, r3, #32
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e014      	b.n	800a04c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2200      	movs	r2, #0
 800a02a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f7ff ff34 	bl	8009e9c <SPI_WaitFifoStateUntilTimeout>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d007      	beq.n	800a04a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a03e:	f043 0220 	orr.w	r2, r3, #32
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e000      	b.n	800a04c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a05c:	f7fb fb2e 	bl	80056bc <HAL_GetTick>
 800a060:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0220 	bic.w	r2, r2, #32
 800a070:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	2164      	movs	r1, #100	; 0x64
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff ffa6 	bl	8009fc8 <SPI_EndRxTxTransaction>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d005      	beq.n	800a08e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a086:	f043 0220 	orr.w	r2, r3, #32
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a092:	2b00      	cmp	r3, #0
 800a094:	d115      	bne.n	800a0c2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d107      	bne.n	800a0b2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fd3a 	bl	8009b24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a0b0:	e00e      	b.n	800a0d0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7f6 ffc2 	bl	8001044 <HAL_SPI_TxRxCpltCallback>
}
 800a0c0:	e006      	b.n	800a0d0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fd34 	bl	8009b38 <HAL_SPI_ErrorCallback>
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e049      	b.n	800a17e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7fa ff60 	bl	8004fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f000 fe10 	bl	800ad3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d001      	beq.n	800a1a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e042      	b.n	800a226 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a21      	ldr	r2, [pc, #132]	; (800a234 <HAL_TIM_Base_Start+0xac>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d018      	beq.n	800a1e4 <HAL_TIM_Base_Start+0x5c>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ba:	d013      	beq.n	800a1e4 <HAL_TIM_Base_Start+0x5c>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a1d      	ldr	r2, [pc, #116]	; (800a238 <HAL_TIM_Base_Start+0xb0>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00e      	beq.n	800a1e4 <HAL_TIM_Base_Start+0x5c>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a1c      	ldr	r2, [pc, #112]	; (800a23c <HAL_TIM_Base_Start+0xb4>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d009      	beq.n	800a1e4 <HAL_TIM_Base_Start+0x5c>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a1a      	ldr	r2, [pc, #104]	; (800a240 <HAL_TIM_Base_Start+0xb8>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d004      	beq.n	800a1e4 <HAL_TIM_Base_Start+0x5c>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a19      	ldr	r2, [pc, #100]	; (800a244 <HAL_TIM_Base_Start+0xbc>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d115      	bne.n	800a210 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	4b17      	ldr	r3, [pc, #92]	; (800a248 <HAL_TIM_Base_Start+0xc0>)
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b06      	cmp	r3, #6
 800a1f4:	d015      	beq.n	800a222 <HAL_TIM_Base_Start+0x9a>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1fc:	d011      	beq.n	800a222 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f042 0201 	orr.w	r2, r2, #1
 800a20c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20e:	e008      	b.n	800a222 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0201 	orr.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	e000      	b.n	800a224 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40012c00 	.word	0x40012c00
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40013400 	.word	0x40013400
 800a244:	40014000 	.word	0x40014000
 800a248:	00010007 	.word	0x00010007

0800a24c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d001      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e04a      	b.n	800a2fa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2202      	movs	r2, #2
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0201 	orr.w	r2, r2, #1
 800a27a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a21      	ldr	r2, [pc, #132]	; (800a308 <HAL_TIM_Base_Start_IT+0xbc>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d018      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a28e:	d013      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a1d      	ldr	r2, [pc, #116]	; (800a30c <HAL_TIM_Base_Start_IT+0xc0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00e      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a1c      	ldr	r2, [pc, #112]	; (800a310 <HAL_TIM_Base_Start_IT+0xc4>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d009      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a1a      	ldr	r2, [pc, #104]	; (800a314 <HAL_TIM_Base_Start_IT+0xc8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a19      	ldr	r2, [pc, #100]	; (800a318 <HAL_TIM_Base_Start_IT+0xcc>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d115      	bne.n	800a2e4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	4b17      	ldr	r3, [pc, #92]	; (800a31c <HAL_TIM_Base_Start_IT+0xd0>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b06      	cmp	r3, #6
 800a2c8:	d015      	beq.n	800a2f6 <HAL_TIM_Base_Start_IT+0xaa>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d0:	d011      	beq.n	800a2f6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f042 0201 	orr.w	r2, r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e2:	e008      	b.n	800a2f6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0201 	orr.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e000      	b.n	800a2f8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40012c00 	.word	0x40012c00
 800a30c:	40000400 	.word	0x40000400
 800a310:	40000800 	.word	0x40000800
 800a314:	40013400 	.word	0x40013400
 800a318:	40014000 	.word	0x40014000
 800a31c:	00010007 	.word	0x00010007

0800a320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e049      	b.n	800a3c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7fa feac 	bl	80050a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f000 fcec 	bl	800ad3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d109      	bne.n	800a3f4 <HAL_TIM_PWM_Start+0x24>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	bf14      	ite	ne
 800a3ec:	2301      	movne	r3, #1
 800a3ee:	2300      	moveq	r3, #0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	e03c      	b.n	800a46e <HAL_TIM_PWM_Start+0x9e>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d109      	bne.n	800a40e <HAL_TIM_PWM_Start+0x3e>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b01      	cmp	r3, #1
 800a404:	bf14      	ite	ne
 800a406:	2301      	movne	r3, #1
 800a408:	2300      	moveq	r3, #0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	e02f      	b.n	800a46e <HAL_TIM_PWM_Start+0x9e>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b08      	cmp	r3, #8
 800a412:	d109      	bne.n	800a428 <HAL_TIM_PWM_Start+0x58>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf14      	ite	ne
 800a420:	2301      	movne	r3, #1
 800a422:	2300      	moveq	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	e022      	b.n	800a46e <HAL_TIM_PWM_Start+0x9e>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b0c      	cmp	r3, #12
 800a42c:	d109      	bne.n	800a442 <HAL_TIM_PWM_Start+0x72>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b01      	cmp	r3, #1
 800a438:	bf14      	ite	ne
 800a43a:	2301      	movne	r3, #1
 800a43c:	2300      	moveq	r3, #0
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	e015      	b.n	800a46e <HAL_TIM_PWM_Start+0x9e>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b10      	cmp	r3, #16
 800a446:	d109      	bne.n	800a45c <HAL_TIM_PWM_Start+0x8c>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b01      	cmp	r3, #1
 800a452:	bf14      	ite	ne
 800a454:	2301      	movne	r3, #1
 800a456:	2300      	moveq	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	e008      	b.n	800a46e <HAL_TIM_PWM_Start+0x9e>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b01      	cmp	r3, #1
 800a466:	bf14      	ite	ne
 800a468:	2301      	movne	r3, #1
 800a46a:	2300      	moveq	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e097      	b.n	800a5a6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d104      	bne.n	800a486 <HAL_TIM_PWM_Start+0xb6>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a484:	e023      	b.n	800a4ce <HAL_TIM_PWM_Start+0xfe>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d104      	bne.n	800a496 <HAL_TIM_PWM_Start+0xc6>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a494:	e01b      	b.n	800a4ce <HAL_TIM_PWM_Start+0xfe>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d104      	bne.n	800a4a6 <HAL_TIM_PWM_Start+0xd6>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4a4:	e013      	b.n	800a4ce <HAL_TIM_PWM_Start+0xfe>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b0c      	cmp	r3, #12
 800a4aa:	d104      	bne.n	800a4b6 <HAL_TIM_PWM_Start+0xe6>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4b4:	e00b      	b.n	800a4ce <HAL_TIM_PWM_Start+0xfe>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b10      	cmp	r3, #16
 800a4ba:	d104      	bne.n	800a4c6 <HAL_TIM_PWM_Start+0xf6>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4c4:	e003      	b.n	800a4ce <HAL_TIM_PWM_Start+0xfe>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f001 f852 	bl	800b580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a33      	ldr	r2, [pc, #204]	; (800a5b0 <HAL_TIM_PWM_Start+0x1e0>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d013      	beq.n	800a50e <HAL_TIM_PWM_Start+0x13e>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a32      	ldr	r2, [pc, #200]	; (800a5b4 <HAL_TIM_PWM_Start+0x1e4>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d00e      	beq.n	800a50e <HAL_TIM_PWM_Start+0x13e>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a30      	ldr	r2, [pc, #192]	; (800a5b8 <HAL_TIM_PWM_Start+0x1e8>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d009      	beq.n	800a50e <HAL_TIM_PWM_Start+0x13e>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a2f      	ldr	r2, [pc, #188]	; (800a5bc <HAL_TIM_PWM_Start+0x1ec>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d004      	beq.n	800a50e <HAL_TIM_PWM_Start+0x13e>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a2d      	ldr	r2, [pc, #180]	; (800a5c0 <HAL_TIM_PWM_Start+0x1f0>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d101      	bne.n	800a512 <HAL_TIM_PWM_Start+0x142>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <HAL_TIM_PWM_Start+0x144>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a526:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a20      	ldr	r2, [pc, #128]	; (800a5b0 <HAL_TIM_PWM_Start+0x1e0>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d018      	beq.n	800a564 <HAL_TIM_PWM_Start+0x194>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a53a:	d013      	beq.n	800a564 <HAL_TIM_PWM_Start+0x194>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a20      	ldr	r2, [pc, #128]	; (800a5c4 <HAL_TIM_PWM_Start+0x1f4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00e      	beq.n	800a564 <HAL_TIM_PWM_Start+0x194>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1f      	ldr	r2, [pc, #124]	; (800a5c8 <HAL_TIM_PWM_Start+0x1f8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d009      	beq.n	800a564 <HAL_TIM_PWM_Start+0x194>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a17      	ldr	r2, [pc, #92]	; (800a5b4 <HAL_TIM_PWM_Start+0x1e4>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_TIM_PWM_Start+0x194>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a16      	ldr	r2, [pc, #88]	; (800a5b8 <HAL_TIM_PWM_Start+0x1e8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d115      	bne.n	800a590 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	4b18      	ldr	r3, [pc, #96]	; (800a5cc <HAL_TIM_PWM_Start+0x1fc>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b06      	cmp	r3, #6
 800a574:	d015      	beq.n	800a5a2 <HAL_TIM_PWM_Start+0x1d2>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a57c:	d011      	beq.n	800a5a2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58e:	e008      	b.n	800a5a2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	e000      	b.n	800a5a4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	40012c00 	.word	0x40012c00
 800a5b4:	40013400 	.word	0x40013400
 800a5b8:	40014000 	.word	0x40014000
 800a5bc:	40014400 	.word	0x40014400
 800a5c0:	40014800 	.word	0x40014800
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	00010007 	.word	0x00010007

0800a5d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d122      	bne.n	800a62c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d11b      	bne.n	800a62c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f06f 0202 	mvn.w	r2, #2
 800a5fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	f003 0303 	and.w	r3, r3, #3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fb74 	bl	800ad00 <HAL_TIM_IC_CaptureCallback>
 800a618:	e005      	b.n	800a626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fb66 	bl	800acec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fb77 	bl	800ad14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f003 0304 	and.w	r3, r3, #4
 800a636:	2b04      	cmp	r3, #4
 800a638:	d122      	bne.n	800a680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b04      	cmp	r3, #4
 800a646:	d11b      	bne.n	800a680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f06f 0204 	mvn.w	r2, #4
 800a650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2202      	movs	r2, #2
 800a656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fb4a 	bl	800ad00 <HAL_TIM_IC_CaptureCallback>
 800a66c:	e005      	b.n	800a67a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fb3c 	bl	800acec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fb4d 	bl	800ad14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	2b08      	cmp	r3, #8
 800a68c:	d122      	bne.n	800a6d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f003 0308 	and.w	r3, r3, #8
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d11b      	bne.n	800a6d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f06f 0208 	mvn.w	r2, #8
 800a6a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2204      	movs	r2, #4
 800a6aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f003 0303 	and.w	r3, r3, #3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fb20 	bl	800ad00 <HAL_TIM_IC_CaptureCallback>
 800a6c0:	e005      	b.n	800a6ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fb12 	bl	800acec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fb23 	bl	800ad14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	f003 0310 	and.w	r3, r3, #16
 800a6de:	2b10      	cmp	r3, #16
 800a6e0:	d122      	bne.n	800a728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d11b      	bne.n	800a728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f06f 0210 	mvn.w	r2, #16
 800a6f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 faf6 	bl	800ad00 <HAL_TIM_IC_CaptureCallback>
 800a714:	e005      	b.n	800a722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fae8 	bl	800acec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 faf9 	bl	800ad14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b01      	cmp	r3, #1
 800a734:	d10e      	bne.n	800a754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b01      	cmp	r3, #1
 800a742:	d107      	bne.n	800a754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f06f 0201 	mvn.w	r2, #1
 800a74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7f6 fc3e 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75e:	2b80      	cmp	r3, #128	; 0x80
 800a760:	d10e      	bne.n	800a780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76c:	2b80      	cmp	r3, #128	; 0x80
 800a76e:	d107      	bne.n	800a780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 f906 	bl	800b98c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78e:	d10e      	bne.n	800a7ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79a:	2b80      	cmp	r3, #128	; 0x80
 800a79c:	d107      	bne.n	800a7ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 f8f9 	bl	800b9a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	d10e      	bne.n	800a7da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c6:	2b40      	cmp	r3, #64	; 0x40
 800a7c8:	d107      	bne.n	800a7da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 faa7 	bl	800ad28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f003 0320 	and.w	r3, r3, #32
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	d10e      	bne.n	800a806 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f003 0320 	and.w	r3, r3, #32
 800a7f2:	2b20      	cmp	r3, #32
 800a7f4:	d107      	bne.n	800a806 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f06f 0220 	mvn.w	r2, #32
 800a7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f001 f8b9 	bl	800b978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a814:	d10f      	bne.n	800a836 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a824:	d107      	bne.n	800a836 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 f8bf 	bl	800b9b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a844:	d10f      	bne.n	800a866 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a854:	d107      	bne.n	800a866 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 f8b1 	bl	800b9c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a874:	d10f      	bne.n	800a896 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a884:	d107      	bne.n	800a896 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a88e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 f8a3 	bl	800b9dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8a4:	d10f      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8b4:	d107      	bne.n	800a8c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 f895 	bl	800b9f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e0ff      	b.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b14      	cmp	r3, #20
 800a8fa:	f200 80f0 	bhi.w	800aade <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a8fe:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a959 	.word	0x0800a959
 800a908:	0800aadf 	.word	0x0800aadf
 800a90c:	0800aadf 	.word	0x0800aadf
 800a910:	0800aadf 	.word	0x0800aadf
 800a914:	0800a999 	.word	0x0800a999
 800a918:	0800aadf 	.word	0x0800aadf
 800a91c:	0800aadf 	.word	0x0800aadf
 800a920:	0800aadf 	.word	0x0800aadf
 800a924:	0800a9db 	.word	0x0800a9db
 800a928:	0800aadf 	.word	0x0800aadf
 800a92c:	0800aadf 	.word	0x0800aadf
 800a930:	0800aadf 	.word	0x0800aadf
 800a934:	0800aa1b 	.word	0x0800aa1b
 800a938:	0800aadf 	.word	0x0800aadf
 800a93c:	0800aadf 	.word	0x0800aadf
 800a940:	0800aadf 	.word	0x0800aadf
 800a944:	0800aa5d 	.word	0x0800aa5d
 800a948:	0800aadf 	.word	0x0800aadf
 800a94c:	0800aadf 	.word	0x0800aadf
 800a950:	0800aadf 	.word	0x0800aadf
 800a954:	0800aa9d 	.word	0x0800aa9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 fa7c 	bl	800ae5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0208 	orr.w	r2, r2, #8
 800a972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	699a      	ldr	r2, [r3, #24]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 0204 	bic.w	r2, r2, #4
 800a982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6999      	ldr	r1, [r3, #24]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	691a      	ldr	r2, [r3, #16]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	619a      	str	r2, [r3, #24]
      break;
 800a996:	e0a5      	b.n	800aae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 faec 	bl	800af7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699a      	ldr	r2, [r3, #24]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	699a      	ldr	r2, [r3, #24]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6999      	ldr	r1, [r3, #24]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	021a      	lsls	r2, r3, #8
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	619a      	str	r2, [r3, #24]
      break;
 800a9d8:	e084      	b.n	800aae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 fb55 	bl	800b090 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	69da      	ldr	r2, [r3, #28]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f042 0208 	orr.w	r2, r2, #8
 800a9f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69da      	ldr	r2, [r3, #28]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f022 0204 	bic.w	r2, r2, #4
 800aa04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	69d9      	ldr	r1, [r3, #28]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	691a      	ldr	r2, [r3, #16]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	61da      	str	r2, [r3, #28]
      break;
 800aa18:	e064      	b.n	800aae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 fbbd 	bl	800b1a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69da      	ldr	r2, [r3, #28]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	69da      	ldr	r2, [r3, #28]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	69d9      	ldr	r1, [r3, #28]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	021a      	lsls	r2, r3, #8
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	430a      	orrs	r2, r1
 800aa58:	61da      	str	r2, [r3, #28]
      break;
 800aa5a:	e043      	b.n	800aae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68b9      	ldr	r1, [r7, #8]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 fc26 	bl	800b2b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f042 0208 	orr.w	r2, r2, #8
 800aa76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0204 	bic.w	r2, r2, #4
 800aa86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800aa9a:	e023      	b.n	800aae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68b9      	ldr	r1, [r7, #8]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 fc6a 	bl	800b37c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aac6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	021a      	lsls	r2, r3, #8
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800aadc:	e002      	b.n	800aae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
      break;
 800aae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop

0800aaf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d101      	bne.n	800ab14 <HAL_TIM_ConfigClockSource+0x1c>
 800ab10:	2302      	movs	r3, #2
 800ab12:	e0de      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x1da>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ab32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a63      	ldr	r2, [pc, #396]	; (800acdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	f000 80a9 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab54:	4a61      	ldr	r2, [pc, #388]	; (800acdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	f200 80ae 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab5c:	4a60      	ldr	r2, [pc, #384]	; (800ace0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	f000 80a1 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab64:	4a5e      	ldr	r2, [pc, #376]	; (800ace0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	f200 80a6 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab6c:	4a5d      	ldr	r2, [pc, #372]	; (800ace4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	f000 8099 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab74:	4a5b      	ldr	r2, [pc, #364]	; (800ace4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	f200 809e 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab7c:	4a5a      	ldr	r2, [pc, #360]	; (800ace8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	f000 8091 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab84:	4a58      	ldr	r2, [pc, #352]	; (800ace8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	f200 8096 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab90:	f000 8089 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab98:	f200 808e 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aba0:	d03e      	beq.n	800ac20 <HAL_TIM_ConfigClockSource+0x128>
 800aba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aba6:	f200 8087 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abae:	f000 8086 	beq.w	800acbe <HAL_TIM_ConfigClockSource+0x1c6>
 800abb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abb6:	d87f      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abb8:	2b70      	cmp	r3, #112	; 0x70
 800abba:	d01a      	beq.n	800abf2 <HAL_TIM_ConfigClockSource+0xfa>
 800abbc:	2b70      	cmp	r3, #112	; 0x70
 800abbe:	d87b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abc0:	2b60      	cmp	r3, #96	; 0x60
 800abc2:	d050      	beq.n	800ac66 <HAL_TIM_ConfigClockSource+0x16e>
 800abc4:	2b60      	cmp	r3, #96	; 0x60
 800abc6:	d877      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abc8:	2b50      	cmp	r3, #80	; 0x50
 800abca:	d03c      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0x14e>
 800abcc:	2b50      	cmp	r3, #80	; 0x50
 800abce:	d873      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abd0:	2b40      	cmp	r3, #64	; 0x40
 800abd2:	d058      	beq.n	800ac86 <HAL_TIM_ConfigClockSource+0x18e>
 800abd4:	2b40      	cmp	r3, #64	; 0x40
 800abd6:	d86f      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abd8:	2b30      	cmp	r3, #48	; 0x30
 800abda:	d064      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800abdc:	2b30      	cmp	r3, #48	; 0x30
 800abde:	d86b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d060      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d867      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05c      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800abec:	2b10      	cmp	r3, #16
 800abee:	d05a      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1ae>
 800abf0:	e062      	b.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	6899      	ldr	r1, [r3, #8]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	f000 fc9d 	bl	800b540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	609a      	str	r2, [r3, #8]
      break;
 800ac1e:	e04f      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6899      	ldr	r1, [r3, #8]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f000 fc86 	bl	800b540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac42:	609a      	str	r2, [r3, #8]
      break;
 800ac44:	e03c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	6859      	ldr	r1, [r3, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f000 fbf8 	bl	800b448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2150      	movs	r1, #80	; 0x50
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fc51 	bl	800b506 <TIM_ITRx_SetConfig>
      break;
 800ac64:	e02c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6859      	ldr	r1, [r3, #4]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f000 fc17 	bl	800b4a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2160      	movs	r1, #96	; 0x60
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fc41 	bl	800b506 <TIM_ITRx_SetConfig>
      break;
 800ac84:	e01c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	6859      	ldr	r1, [r3, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f000 fbd8 	bl	800b448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2140      	movs	r1, #64	; 0x40
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fc31 	bl	800b506 <TIM_ITRx_SetConfig>
      break;
 800aca4:	e00c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f000 fc28 	bl	800b506 <TIM_ITRx_SetConfig>
      break;
 800acb6:	e003      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	e000      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800acbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	00100070 	.word	0x00100070
 800ace0:	00100040 	.word	0x00100040
 800ace4:	00100030 	.word	0x00100030
 800ace8:	00100020 	.word	0x00100020

0800acec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a3c      	ldr	r2, [pc, #240]	; (800ae40 <TIM_Base_SetConfig+0x104>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00f      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5a:	d00b      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a39      	ldr	r2, [pc, #228]	; (800ae44 <TIM_Base_SetConfig+0x108>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d007      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a38      	ldr	r2, [pc, #224]	; (800ae48 <TIM_Base_SetConfig+0x10c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d003      	beq.n	800ad74 <TIM_Base_SetConfig+0x38>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a37      	ldr	r2, [pc, #220]	; (800ae4c <TIM_Base_SetConfig+0x110>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d108      	bne.n	800ad86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a2d      	ldr	r2, [pc, #180]	; (800ae40 <TIM_Base_SetConfig+0x104>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d01b      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad94:	d017      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a2a      	ldr	r2, [pc, #168]	; (800ae44 <TIM_Base_SetConfig+0x108>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d013      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a29      	ldr	r2, [pc, #164]	; (800ae48 <TIM_Base_SetConfig+0x10c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00f      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a28      	ldr	r2, [pc, #160]	; (800ae4c <TIM_Base_SetConfig+0x110>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d00b      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a27      	ldr	r2, [pc, #156]	; (800ae50 <TIM_Base_SetConfig+0x114>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d007      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a26      	ldr	r2, [pc, #152]	; (800ae54 <TIM_Base_SetConfig+0x118>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d003      	beq.n	800adc6 <TIM_Base_SetConfig+0x8a>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a25      	ldr	r2, [pc, #148]	; (800ae58 <TIM_Base_SetConfig+0x11c>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d108      	bne.n	800add8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	4313      	orrs	r3, r2
 800add6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a10      	ldr	r2, [pc, #64]	; (800ae40 <TIM_Base_SetConfig+0x104>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00f      	beq.n	800ae24 <TIM_Base_SetConfig+0xe8>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a11      	ldr	r2, [pc, #68]	; (800ae4c <TIM_Base_SetConfig+0x110>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00b      	beq.n	800ae24 <TIM_Base_SetConfig+0xe8>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a10      	ldr	r2, [pc, #64]	; (800ae50 <TIM_Base_SetConfig+0x114>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d007      	beq.n	800ae24 <TIM_Base_SetConfig+0xe8>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a0f      	ldr	r2, [pc, #60]	; (800ae54 <TIM_Base_SetConfig+0x118>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <TIM_Base_SetConfig+0xe8>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a0e      	ldr	r2, [pc, #56]	; (800ae58 <TIM_Base_SetConfig+0x11c>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d103      	bne.n	800ae2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	691a      	ldr	r2, [r3, #16]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	615a      	str	r2, [r3, #20]
}
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	40012c00 	.word	0x40012c00
 800ae44:	40000400 	.word	0x40000400
 800ae48:	40000800 	.word	0x40000800
 800ae4c:	40013400 	.word	0x40013400
 800ae50:	40014000 	.word	0x40014000
 800ae54:	40014400 	.word	0x40014400
 800ae58:	40014800 	.word	0x40014800

0800ae5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f023 0201 	bic.w	r2, r3, #1
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f023 0302 	bic.w	r3, r3, #2
 800aea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a2c      	ldr	r2, [pc, #176]	; (800af68 <TIM_OC1_SetConfig+0x10c>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00f      	beq.n	800aedc <TIM_OC1_SetConfig+0x80>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a2b      	ldr	r2, [pc, #172]	; (800af6c <TIM_OC1_SetConfig+0x110>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00b      	beq.n	800aedc <TIM_OC1_SetConfig+0x80>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a2a      	ldr	r2, [pc, #168]	; (800af70 <TIM_OC1_SetConfig+0x114>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_OC1_SetConfig+0x80>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a29      	ldr	r2, [pc, #164]	; (800af74 <TIM_OC1_SetConfig+0x118>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_OC1_SetConfig+0x80>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a28      	ldr	r2, [pc, #160]	; (800af78 <TIM_OC1_SetConfig+0x11c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d10c      	bne.n	800aef6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	f023 0308 	bic.w	r3, r3, #8
 800aee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f023 0304 	bic.w	r3, r3, #4
 800aef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a1b      	ldr	r2, [pc, #108]	; (800af68 <TIM_OC1_SetConfig+0x10c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00f      	beq.n	800af1e <TIM_OC1_SetConfig+0xc2>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a1a      	ldr	r2, [pc, #104]	; (800af6c <TIM_OC1_SetConfig+0x110>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d00b      	beq.n	800af1e <TIM_OC1_SetConfig+0xc2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a19      	ldr	r2, [pc, #100]	; (800af70 <TIM_OC1_SetConfig+0x114>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d007      	beq.n	800af1e <TIM_OC1_SetConfig+0xc2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a18      	ldr	r2, [pc, #96]	; (800af74 <TIM_OC1_SetConfig+0x118>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d003      	beq.n	800af1e <TIM_OC1_SetConfig+0xc2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a17      	ldr	r2, [pc, #92]	; (800af78 <TIM_OC1_SetConfig+0x11c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d111      	bne.n	800af42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	4313      	orrs	r3, r2
 800af36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	4313      	orrs	r3, r2
 800af40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	621a      	str	r2, [r3, #32]
}
 800af5c:	bf00      	nop
 800af5e:	371c      	adds	r7, #28
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	40012c00 	.word	0x40012c00
 800af6c:	40013400 	.word	0x40013400
 800af70:	40014000 	.word	0x40014000
 800af74:	40014400 	.word	0x40014400
 800af78:	40014800 	.word	0x40014800

0800af7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	f023 0210 	bic.w	r2, r3, #16
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f023 0320 	bic.w	r3, r3, #32
 800afca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a28      	ldr	r2, [pc, #160]	; (800b07c <TIM_OC2_SetConfig+0x100>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_OC2_SetConfig+0x6c>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a27      	ldr	r2, [pc, #156]	; (800b080 <TIM_OC2_SetConfig+0x104>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d10d      	bne.n	800b004 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	011b      	lsls	r3, r3, #4
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	4313      	orrs	r3, r2
 800affa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a1d      	ldr	r2, [pc, #116]	; (800b07c <TIM_OC2_SetConfig+0x100>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d00f      	beq.n	800b02c <TIM_OC2_SetConfig+0xb0>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a1c      	ldr	r2, [pc, #112]	; (800b080 <TIM_OC2_SetConfig+0x104>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00b      	beq.n	800b02c <TIM_OC2_SetConfig+0xb0>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a1b      	ldr	r2, [pc, #108]	; (800b084 <TIM_OC2_SetConfig+0x108>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d007      	beq.n	800b02c <TIM_OC2_SetConfig+0xb0>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a1a      	ldr	r2, [pc, #104]	; (800b088 <TIM_OC2_SetConfig+0x10c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d003      	beq.n	800b02c <TIM_OC2_SetConfig+0xb0>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a19      	ldr	r2, [pc, #100]	; (800b08c <TIM_OC2_SetConfig+0x110>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d113      	bne.n	800b054 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b03a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	4313      	orrs	r3, r2
 800b046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	4313      	orrs	r3, r2
 800b052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	621a      	str	r2, [r3, #32]
}
 800b06e:	bf00      	nop
 800b070:	371c      	adds	r7, #28
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	40012c00 	.word	0x40012c00
 800b080:	40013400 	.word	0x40013400
 800b084:	40014000 	.word	0x40014000
 800b088:	40014400 	.word	0x40014400
 800b08c:	40014800 	.word	0x40014800

0800b090 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0303 	bic.w	r3, r3, #3
 800b0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	021b      	lsls	r3, r3, #8
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a27      	ldr	r2, [pc, #156]	; (800b18c <TIM_OC3_SetConfig+0xfc>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d003      	beq.n	800b0fa <TIM_OC3_SetConfig+0x6a>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a26      	ldr	r2, [pc, #152]	; (800b190 <TIM_OC3_SetConfig+0x100>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d10d      	bne.n	800b116 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a1c      	ldr	r2, [pc, #112]	; (800b18c <TIM_OC3_SetConfig+0xfc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00f      	beq.n	800b13e <TIM_OC3_SetConfig+0xae>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <TIM_OC3_SetConfig+0x100>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d00b      	beq.n	800b13e <TIM_OC3_SetConfig+0xae>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a1a      	ldr	r2, [pc, #104]	; (800b194 <TIM_OC3_SetConfig+0x104>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d007      	beq.n	800b13e <TIM_OC3_SetConfig+0xae>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a19      	ldr	r2, [pc, #100]	; (800b198 <TIM_OC3_SetConfig+0x108>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d003      	beq.n	800b13e <TIM_OC3_SetConfig+0xae>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a18      	ldr	r2, [pc, #96]	; (800b19c <TIM_OC3_SetConfig+0x10c>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d113      	bne.n	800b166 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b14c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	011b      	lsls	r3, r3, #4
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	4313      	orrs	r3, r2
 800b158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4313      	orrs	r3, r2
 800b164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	621a      	str	r2, [r3, #32]
}
 800b180:	bf00      	nop
 800b182:	371c      	adds	r7, #28
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	40012c00 	.word	0x40012c00
 800b190:	40013400 	.word	0x40013400
 800b194:	40014000 	.word	0x40014000
 800b198:	40014400 	.word	0x40014400
 800b19c:	40014800 	.word	0x40014800

0800b1a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	021b      	lsls	r3, r3, #8
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	031b      	lsls	r3, r3, #12
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a28      	ldr	r2, [pc, #160]	; (800b2a0 <TIM_OC4_SetConfig+0x100>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d003      	beq.n	800b20c <TIM_OC4_SetConfig+0x6c>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a27      	ldr	r2, [pc, #156]	; (800b2a4 <TIM_OC4_SetConfig+0x104>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d10d      	bne.n	800b228 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	031b      	lsls	r3, r3, #12
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b226:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a1d      	ldr	r2, [pc, #116]	; (800b2a0 <TIM_OC4_SetConfig+0x100>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d00f      	beq.n	800b250 <TIM_OC4_SetConfig+0xb0>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a1c      	ldr	r2, [pc, #112]	; (800b2a4 <TIM_OC4_SetConfig+0x104>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00b      	beq.n	800b250 <TIM_OC4_SetConfig+0xb0>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a1b      	ldr	r2, [pc, #108]	; (800b2a8 <TIM_OC4_SetConfig+0x108>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d007      	beq.n	800b250 <TIM_OC4_SetConfig+0xb0>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a1a      	ldr	r2, [pc, #104]	; (800b2ac <TIM_OC4_SetConfig+0x10c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d003      	beq.n	800b250 <TIM_OC4_SetConfig+0xb0>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a19      	ldr	r2, [pc, #100]	; (800b2b0 <TIM_OC4_SetConfig+0x110>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d113      	bne.n	800b278 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b256:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b25e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	019b      	lsls	r3, r3, #6
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	019b      	lsls	r3, r3, #6
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4313      	orrs	r3, r2
 800b276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	621a      	str	r2, [r3, #32]
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40012c00 	.word	0x40012c00
 800b2a4:	40013400 	.word	0x40013400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800

0800b2b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b087      	sub	sp, #28
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	041b      	lsls	r3, r3, #16
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4313      	orrs	r3, r2
 800b304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a17      	ldr	r2, [pc, #92]	; (800b368 <TIM_OC5_SetConfig+0xb4>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00f      	beq.n	800b32e <TIM_OC5_SetConfig+0x7a>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a16      	ldr	r2, [pc, #88]	; (800b36c <TIM_OC5_SetConfig+0xb8>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d00b      	beq.n	800b32e <TIM_OC5_SetConfig+0x7a>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a15      	ldr	r2, [pc, #84]	; (800b370 <TIM_OC5_SetConfig+0xbc>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d007      	beq.n	800b32e <TIM_OC5_SetConfig+0x7a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a14      	ldr	r2, [pc, #80]	; (800b374 <TIM_OC5_SetConfig+0xc0>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC5_SetConfig+0x7a>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a13      	ldr	r2, [pc, #76]	; (800b378 <TIM_OC5_SetConfig+0xc4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d109      	bne.n	800b342 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	621a      	str	r2, [r3, #32]
}
 800b35c:	bf00      	nop
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	40012c00 	.word	0x40012c00
 800b36c:	40013400 	.word	0x40013400
 800b370:	40014000 	.word	0x40014000
 800b374:	40014400 	.word	0x40014400
 800b378:	40014800 	.word	0x40014800

0800b37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	021b      	lsls	r3, r3, #8
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	051b      	lsls	r3, r3, #20
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a18      	ldr	r2, [pc, #96]	; (800b434 <TIM_OC6_SetConfig+0xb8>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00f      	beq.n	800b3f8 <TIM_OC6_SetConfig+0x7c>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a17      	ldr	r2, [pc, #92]	; (800b438 <TIM_OC6_SetConfig+0xbc>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00b      	beq.n	800b3f8 <TIM_OC6_SetConfig+0x7c>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a16      	ldr	r2, [pc, #88]	; (800b43c <TIM_OC6_SetConfig+0xc0>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d007      	beq.n	800b3f8 <TIM_OC6_SetConfig+0x7c>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a15      	ldr	r2, [pc, #84]	; (800b440 <TIM_OC6_SetConfig+0xc4>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d003      	beq.n	800b3f8 <TIM_OC6_SetConfig+0x7c>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a14      	ldr	r2, [pc, #80]	; (800b444 <TIM_OC6_SetConfig+0xc8>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d109      	bne.n	800b40c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	029b      	lsls	r3, r3, #10
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	621a      	str	r2, [r3, #32]
}
 800b426:	bf00      	nop
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	40012c00 	.word	0x40012c00
 800b438:	40013400 	.word	0x40013400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800

0800b448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 0201 	bic.w	r2, r3, #1
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f023 030a 	bic.w	r3, r3, #10
 800b484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	621a      	str	r2, [r3, #32]
}
 800b49a:	bf00      	nop
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b087      	sub	sp, #28
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	f023 0210 	bic.w	r2, r3, #16
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b4d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	031b      	lsls	r3, r3, #12
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	f043 0307 	orr.w	r3, r3, #7
 800b52c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	609a      	str	r2, [r3, #8]
}
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b55a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	021a      	lsls	r2, r3, #8
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	431a      	orrs	r2, r3
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4313      	orrs	r3, r2
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	609a      	str	r2, [r3, #8]
}
 800b574:	bf00      	nop
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b580:	b480      	push	{r7}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f003 031f 	and.w	r3, r3, #31
 800b592:	2201      	movs	r2, #1
 800b594:	fa02 f303 	lsl.w	r3, r2, r3
 800b598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6a1a      	ldr	r2, [r3, #32]
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	401a      	ands	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6a1a      	ldr	r2, [r3, #32]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f003 031f 	and.w	r3, r3, #31
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b8:	431a      	orrs	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	621a      	str	r2, [r3, #32]
}
 800b5be:	bf00      	nop
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
	...

0800b5cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d109      	bne.n	800b5f0 <HAL_TIMEx_PWMN_Start+0x24>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	bf14      	ite	ne
 800b5e8:	2301      	movne	r3, #1
 800b5ea:	2300      	moveq	r3, #0
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	e022      	b.n	800b636 <HAL_TIMEx_PWMN_Start+0x6a>
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2b04      	cmp	r3, #4
 800b5f4:	d109      	bne.n	800b60a <HAL_TIMEx_PWMN_Start+0x3e>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	bf14      	ite	ne
 800b602:	2301      	movne	r3, #1
 800b604:	2300      	moveq	r3, #0
 800b606:	b2db      	uxtb	r3, r3
 800b608:	e015      	b.n	800b636 <HAL_TIMEx_PWMN_Start+0x6a>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b08      	cmp	r3, #8
 800b60e:	d109      	bne.n	800b624 <HAL_TIMEx_PWMN_Start+0x58>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b01      	cmp	r3, #1
 800b61a:	bf14      	ite	ne
 800b61c:	2301      	movne	r3, #1
 800b61e:	2300      	moveq	r3, #0
 800b620:	b2db      	uxtb	r3, r3
 800b622:	e008      	b.n	800b636 <HAL_TIMEx_PWMN_Start+0x6a>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	bf14      	ite	ne
 800b630:	2301      	movne	r3, #1
 800b632:	2300      	moveq	r3, #0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e069      	b.n	800b712 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d104      	bne.n	800b64e <HAL_TIMEx_PWMN_Start+0x82>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b64c:	e013      	b.n	800b676 <HAL_TIMEx_PWMN_Start+0xaa>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b04      	cmp	r3, #4
 800b652:	d104      	bne.n	800b65e <HAL_TIMEx_PWMN_Start+0x92>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b65c:	e00b      	b.n	800b676 <HAL_TIMEx_PWMN_Start+0xaa>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b08      	cmp	r3, #8
 800b662:	d104      	bne.n	800b66e <HAL_TIMEx_PWMN_Start+0xa2>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b66c:	e003      	b.n	800b676 <HAL_TIMEx_PWMN_Start+0xaa>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2202      	movs	r2, #2
 800b672:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2204      	movs	r2, #4
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f9c0 	bl	800ba04 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a20      	ldr	r2, [pc, #128]	; (800b71c <HAL_TIMEx_PWMN_Start+0x150>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d018      	beq.n	800b6d0 <HAL_TIMEx_PWMN_Start+0x104>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6a6:	d013      	beq.n	800b6d0 <HAL_TIMEx_PWMN_Start+0x104>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a1c      	ldr	r2, [pc, #112]	; (800b720 <HAL_TIMEx_PWMN_Start+0x154>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d00e      	beq.n	800b6d0 <HAL_TIMEx_PWMN_Start+0x104>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a1b      	ldr	r2, [pc, #108]	; (800b724 <HAL_TIMEx_PWMN_Start+0x158>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d009      	beq.n	800b6d0 <HAL_TIMEx_PWMN_Start+0x104>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a19      	ldr	r2, [pc, #100]	; (800b728 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d004      	beq.n	800b6d0 <HAL_TIMEx_PWMN_Start+0x104>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a18      	ldr	r2, [pc, #96]	; (800b72c <HAL_TIMEx_PWMN_Start+0x160>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d115      	bne.n	800b6fc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689a      	ldr	r2, [r3, #8]
 800b6d6:	4b16      	ldr	r3, [pc, #88]	; (800b730 <HAL_TIMEx_PWMN_Start+0x164>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b06      	cmp	r3, #6
 800b6e0:	d015      	beq.n	800b70e <HAL_TIMEx_PWMN_Start+0x142>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6e8:	d011      	beq.n	800b70e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f042 0201 	orr.w	r2, r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6fa:	e008      	b.n	800b70e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f042 0201 	orr.w	r2, r2, #1
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e000      	b.n	800b710 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b70e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	40012c00 	.word	0x40012c00
 800b720:	40000400 	.word	0x40000400
 800b724:	40000800 	.word	0x40000800
 800b728:	40013400 	.word	0x40013400
 800b72c:	40014000 	.word	0x40014000
 800b730:	00010007 	.word	0x00010007

0800b734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b744:	2b01      	cmp	r3, #1
 800b746:	d101      	bne.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b748:	2302      	movs	r3, #2
 800b74a:	e065      	b.n	800b818 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2202      	movs	r2, #2
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a2c      	ldr	r2, [pc, #176]	; (800b824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d004      	beq.n	800b780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a2b      	ldr	r2, [pc, #172]	; (800b828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d108      	bne.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a1b      	ldr	r2, [pc, #108]	; (800b824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d018      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c2:	d013      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a18      	ldr	r2, [pc, #96]	; (800b82c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00e      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a17      	ldr	r2, [pc, #92]	; (800b830 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d009      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a12      	ldr	r2, [pc, #72]	; (800b828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d004      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a13      	ldr	r2, [pc, #76]	; (800b834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d10c      	bne.n	800b806 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	40012c00 	.word	0x40012c00
 800b828:	40013400 	.word	0x40013400
 800b82c:	40000400 	.word	0x40000400
 800b830:	40000800 	.word	0x40000800
 800b834:	40014000 	.word	0x40014000

0800b838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b850:	2302      	movs	r3, #2
 800b852:	e087      	b.n	800b964 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	4313      	orrs	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4313      	orrs	r3, r2
 800b892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	041b      	lsls	r3, r3, #16
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a27      	ldr	r2, [pc, #156]	; (800b970 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d004      	beq.n	800b8e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a25      	ldr	r2, [pc, #148]	; (800b974 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d106      	bne.n	800b8f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d004      	beq.n	800b904 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d126      	bne.n	800b952 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	051b      	lsls	r3, r3, #20
 800b910:	4313      	orrs	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a0e      	ldr	r2, [pc, #56]	; (800b970 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d004      	beq.n	800b944 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a0d      	ldr	r2, [pc, #52]	; (800b974 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d106      	bne.n	800b952 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	4313      	orrs	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	40012c00 	.word	0x40012c00
 800b974:	40013400 	.word	0x40013400

0800b978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f003 031f 	and.w	r3, r3, #31
 800ba16:	2204      	movs	r2, #4
 800ba18:	fa02 f303 	lsl.w	r3, r2, r3
 800ba1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6a1a      	ldr	r2, [r3, #32]
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	43db      	mvns	r3, r3
 800ba26:	401a      	ands	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a1a      	ldr	r2, [r3, #32]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f003 031f 	and.w	r3, r3, #31
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	621a      	str	r2, [r3, #32]
}
 800ba42:	bf00      	nop
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e042      	b.n	800bae6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7f9 fbfc 	bl	8005270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2224      	movs	r2, #36	; 0x24
 800ba7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0201 	bic.w	r2, r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f8c3 	bl	800bc1c <UART_SetConfig>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d101      	bne.n	800baa0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e022      	b.n	800bae6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fb83 	bl	800c1b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800babc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689a      	ldr	r2, [r3, #8]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bacc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f042 0201 	orr.w	r2, r2, #1
 800badc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fc0a 	bl	800c2f8 <UART_CheckIdleState>
 800bae4:	4603      	mov	r3, r0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b08a      	sub	sp, #40	; 0x28
 800baf2:	af02      	add	r7, sp, #8
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	603b      	str	r3, [r7, #0]
 800bafa:	4613      	mov	r3, r2
 800bafc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	f040 8083 	bne.w	800bc10 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <HAL_UART_Transmit+0x28>
 800bb10:	88fb      	ldrh	r3, [r7, #6]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e07b      	b.n	800bc12 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d101      	bne.n	800bb28 <HAL_UART_Transmit+0x3a>
 800bb24:	2302      	movs	r3, #2
 800bb26:	e074      	b.n	800bc12 <HAL_UART_Transmit+0x124>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2221      	movs	r2, #33	; 0x21
 800bb3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb40:	f7f9 fdbc 	bl	80056bc <HAL_GetTick>
 800bb44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	88fa      	ldrh	r2, [r7, #6]
 800bb4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	88fa      	ldrh	r2, [r7, #6]
 800bb52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5e:	d108      	bne.n	800bb72 <HAL_UART_Transmit+0x84>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	61bb      	str	r3, [r7, #24]
 800bb70:	e003      	b.n	800bb7a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bb82:	e02c      	b.n	800bbde <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2180      	movs	r1, #128	; 0x80
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 fbfd 	bl	800c38e <UART_WaitOnFlagUntilTimeout>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e039      	b.n	800bc12 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10b      	bne.n	800bbbc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	3302      	adds	r3, #2
 800bbb8:	61bb      	str	r3, [r7, #24]
 800bbba:	e007      	b.n	800bbcc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	781a      	ldrb	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1cc      	bne.n	800bb84 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2140      	movs	r1, #64	; 0x40
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 fbca 	bl	800c38e <UART_WaitOnFlagUntilTimeout>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e006      	b.n	800bc12 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2220      	movs	r2, #32
 800bc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	e000      	b.n	800bc12 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bc10:	2302      	movs	r3, #2
  }
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3720      	adds	r7, #32
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc20:	b08c      	sub	sp, #48	; 0x30
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	431a      	orrs	r2, r3
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	69db      	ldr	r3, [r3, #28]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	4bab      	ldr	r3, [pc, #684]	; (800bef8 <UART_SetConfig+0x2dc>)
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	68da      	ldr	r2, [r3, #12]
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4aa0      	ldr	r2, [pc, #640]	; (800befc <UART_SetConfig+0x2e0>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d004      	beq.n	800bc88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc84:	4313      	orrs	r3, r2
 800bc86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bc92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	6812      	ldr	r2, [r2, #0]
 800bc9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc9c:	430b      	orrs	r3, r1
 800bc9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	f023 010f 	bic.w	r1, r3, #15
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a91      	ldr	r2, [pc, #580]	; (800bf00 <UART_SetConfig+0x2e4>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d125      	bne.n	800bd0c <UART_SetConfig+0xf0>
 800bcc0:	4b90      	ldr	r3, [pc, #576]	; (800bf04 <UART_SetConfig+0x2e8>)
 800bcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc6:	f003 0303 	and.w	r3, r3, #3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d81a      	bhi.n	800bd04 <UART_SetConfig+0xe8>
 800bcce:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <UART_SetConfig+0xb8>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bce5 	.word	0x0800bce5
 800bcd8:	0800bcf5 	.word	0x0800bcf5
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bcfd 	.word	0x0800bcfd
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcea:	e0d6      	b.n	800be9a <UART_SetConfig+0x27e>
 800bcec:	2302      	movs	r3, #2
 800bcee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcf2:	e0d2      	b.n	800be9a <UART_SetConfig+0x27e>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcfa:	e0ce      	b.n	800be9a <UART_SetConfig+0x27e>
 800bcfc:	2308      	movs	r3, #8
 800bcfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd02:	e0ca      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd04:	2310      	movs	r3, #16
 800bd06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd0a:	e0c6      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a7d      	ldr	r2, [pc, #500]	; (800bf08 <UART_SetConfig+0x2ec>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d138      	bne.n	800bd88 <UART_SetConfig+0x16c>
 800bd16:	4b7b      	ldr	r3, [pc, #492]	; (800bf04 <UART_SetConfig+0x2e8>)
 800bd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1c:	f003 030c 	and.w	r3, r3, #12
 800bd20:	2b0c      	cmp	r3, #12
 800bd22:	d82d      	bhi.n	800bd80 <UART_SetConfig+0x164>
 800bd24:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <UART_SetConfig+0x110>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd61 	.word	0x0800bd61
 800bd30:	0800bd81 	.word	0x0800bd81
 800bd34:	0800bd81 	.word	0x0800bd81
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800bd71 	.word	0x0800bd71
 800bd40:	0800bd81 	.word	0x0800bd81
 800bd44:	0800bd81 	.word	0x0800bd81
 800bd48:	0800bd81 	.word	0x0800bd81
 800bd4c:	0800bd69 	.word	0x0800bd69
 800bd50:	0800bd81 	.word	0x0800bd81
 800bd54:	0800bd81 	.word	0x0800bd81
 800bd58:	0800bd81 	.word	0x0800bd81
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	2300      	movs	r3, #0
 800bd62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd66:	e098      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd68:	2302      	movs	r3, #2
 800bd6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd6e:	e094      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd70:	2304      	movs	r3, #4
 800bd72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd76:	e090      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd78:	2308      	movs	r3, #8
 800bd7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd7e:	e08c      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd80:	2310      	movs	r3, #16
 800bd82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd86:	e088      	b.n	800be9a <UART_SetConfig+0x27e>
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a5f      	ldr	r2, [pc, #380]	; (800bf0c <UART_SetConfig+0x2f0>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d125      	bne.n	800bdde <UART_SetConfig+0x1c2>
 800bd92:	4b5c      	ldr	r3, [pc, #368]	; (800bf04 <UART_SetConfig+0x2e8>)
 800bd94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd9c:	2b30      	cmp	r3, #48	; 0x30
 800bd9e:	d016      	beq.n	800bdce <UART_SetConfig+0x1b2>
 800bda0:	2b30      	cmp	r3, #48	; 0x30
 800bda2:	d818      	bhi.n	800bdd6 <UART_SetConfig+0x1ba>
 800bda4:	2b20      	cmp	r3, #32
 800bda6:	d00a      	beq.n	800bdbe <UART_SetConfig+0x1a2>
 800bda8:	2b20      	cmp	r3, #32
 800bdaa:	d814      	bhi.n	800bdd6 <UART_SetConfig+0x1ba>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <UART_SetConfig+0x19a>
 800bdb0:	2b10      	cmp	r3, #16
 800bdb2:	d008      	beq.n	800bdc6 <UART_SetConfig+0x1aa>
 800bdb4:	e00f      	b.n	800bdd6 <UART_SetConfig+0x1ba>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdbc:	e06d      	b.n	800be9a <UART_SetConfig+0x27e>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdc4:	e069      	b.n	800be9a <UART_SetConfig+0x27e>
 800bdc6:	2304      	movs	r3, #4
 800bdc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdcc:	e065      	b.n	800be9a <UART_SetConfig+0x27e>
 800bdce:	2308      	movs	r3, #8
 800bdd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdd4:	e061      	b.n	800be9a <UART_SetConfig+0x27e>
 800bdd6:	2310      	movs	r3, #16
 800bdd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bddc:	e05d      	b.n	800be9a <UART_SetConfig+0x27e>
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a4b      	ldr	r2, [pc, #300]	; (800bf10 <UART_SetConfig+0x2f4>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d125      	bne.n	800be34 <UART_SetConfig+0x218>
 800bde8:	4b46      	ldr	r3, [pc, #280]	; (800bf04 <UART_SetConfig+0x2e8>)
 800bdea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdf2:	2bc0      	cmp	r3, #192	; 0xc0
 800bdf4:	d016      	beq.n	800be24 <UART_SetConfig+0x208>
 800bdf6:	2bc0      	cmp	r3, #192	; 0xc0
 800bdf8:	d818      	bhi.n	800be2c <UART_SetConfig+0x210>
 800bdfa:	2b80      	cmp	r3, #128	; 0x80
 800bdfc:	d00a      	beq.n	800be14 <UART_SetConfig+0x1f8>
 800bdfe:	2b80      	cmp	r3, #128	; 0x80
 800be00:	d814      	bhi.n	800be2c <UART_SetConfig+0x210>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <UART_SetConfig+0x1f0>
 800be06:	2b40      	cmp	r3, #64	; 0x40
 800be08:	d008      	beq.n	800be1c <UART_SetConfig+0x200>
 800be0a:	e00f      	b.n	800be2c <UART_SetConfig+0x210>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be12:	e042      	b.n	800be9a <UART_SetConfig+0x27e>
 800be14:	2302      	movs	r3, #2
 800be16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be1a:	e03e      	b.n	800be9a <UART_SetConfig+0x27e>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be22:	e03a      	b.n	800be9a <UART_SetConfig+0x27e>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be2a:	e036      	b.n	800be9a <UART_SetConfig+0x27e>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be32:	e032      	b.n	800be9a <UART_SetConfig+0x27e>
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a30      	ldr	r2, [pc, #192]	; (800befc <UART_SetConfig+0x2e0>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d12a      	bne.n	800be94 <UART_SetConfig+0x278>
 800be3e:	4b31      	ldr	r3, [pc, #196]	; (800bf04 <UART_SetConfig+0x2e8>)
 800be40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be4c:	d01a      	beq.n	800be84 <UART_SetConfig+0x268>
 800be4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be52:	d81b      	bhi.n	800be8c <UART_SetConfig+0x270>
 800be54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be58:	d00c      	beq.n	800be74 <UART_SetConfig+0x258>
 800be5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be5e:	d815      	bhi.n	800be8c <UART_SetConfig+0x270>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <UART_SetConfig+0x250>
 800be64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be68:	d008      	beq.n	800be7c <UART_SetConfig+0x260>
 800be6a:	e00f      	b.n	800be8c <UART_SetConfig+0x270>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be72:	e012      	b.n	800be9a <UART_SetConfig+0x27e>
 800be74:	2302      	movs	r3, #2
 800be76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be7a:	e00e      	b.n	800be9a <UART_SetConfig+0x27e>
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be82:	e00a      	b.n	800be9a <UART_SetConfig+0x27e>
 800be84:	2308      	movs	r3, #8
 800be86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be8a:	e006      	b.n	800be9a <UART_SetConfig+0x27e>
 800be8c:	2310      	movs	r3, #16
 800be8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be92:	e002      	b.n	800be9a <UART_SetConfig+0x27e>
 800be94:	2310      	movs	r3, #16
 800be96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a17      	ldr	r2, [pc, #92]	; (800befc <UART_SetConfig+0x2e0>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	f040 80a8 	bne.w	800bff6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800beaa:	2b08      	cmp	r3, #8
 800beac:	d834      	bhi.n	800bf18 <UART_SetConfig+0x2fc>
 800beae:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <UART_SetConfig+0x298>)
 800beb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb4:	0800bed9 	.word	0x0800bed9
 800beb8:	0800bf19 	.word	0x0800bf19
 800bebc:	0800bee1 	.word	0x0800bee1
 800bec0:	0800bf19 	.word	0x0800bf19
 800bec4:	0800bee7 	.word	0x0800bee7
 800bec8:	0800bf19 	.word	0x0800bf19
 800becc:	0800bf19 	.word	0x0800bf19
 800bed0:	0800bf19 	.word	0x0800bf19
 800bed4:	0800beef 	.word	0x0800beef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bed8:	f7fd f966 	bl	80091a8 <HAL_RCC_GetPCLK1Freq>
 800bedc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bede:	e021      	b.n	800bf24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bee0:	4b0c      	ldr	r3, [pc, #48]	; (800bf14 <UART_SetConfig+0x2f8>)
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bee4:	e01e      	b.n	800bf24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bee6:	f7fd f8f1 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800beea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800beec:	e01a      	b.n	800bf24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bef4:	e016      	b.n	800bf24 <UART_SetConfig+0x308>
 800bef6:	bf00      	nop
 800bef8:	cfff69f3 	.word	0xcfff69f3
 800befc:	40008000 	.word	0x40008000
 800bf00:	40013800 	.word	0x40013800
 800bf04:	40021000 	.word	0x40021000
 800bf08:	40004400 	.word	0x40004400
 800bf0c:	40004800 	.word	0x40004800
 800bf10:	40004c00 	.word	0x40004c00
 800bf14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bf22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 812a 	beq.w	800c180 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	4a9e      	ldr	r2, [pc, #632]	; (800c1ac <UART_SetConfig+0x590>)
 800bf32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf36:	461a      	mov	r2, r3
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf3e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d305      	bcc.n	800bf5c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d903      	bls.n	800bf64 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf62:	e10d      	b.n	800c180 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	2200      	movs	r2, #0
 800bf68:	60bb      	str	r3, [r7, #8]
 800bf6a:	60fa      	str	r2, [r7, #12]
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	4a8e      	ldr	r2, [pc, #568]	; (800c1ac <UART_SetConfig+0x590>)
 800bf72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	2200      	movs	r2, #0
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	607a      	str	r2, [r7, #4]
 800bf7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf86:	f7f4 fe87 	bl	8000c98 <__aeabi_uldivmod>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4610      	mov	r0, r2
 800bf90:	4619      	mov	r1, r3
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	f04f 0300 	mov.w	r3, #0
 800bf9a:	020b      	lsls	r3, r1, #8
 800bf9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bfa0:	0202      	lsls	r2, r0, #8
 800bfa2:	6979      	ldr	r1, [r7, #20]
 800bfa4:	6849      	ldr	r1, [r1, #4]
 800bfa6:	0849      	lsrs	r1, r1, #1
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	4605      	mov	r5, r0
 800bfae:	eb12 0804 	adds.w	r8, r2, r4
 800bfb2:	eb43 0905 	adc.w	r9, r3, r5
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	469a      	mov	sl, r3
 800bfbe:	4693      	mov	fp, r2
 800bfc0:	4652      	mov	r2, sl
 800bfc2:	465b      	mov	r3, fp
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 fe66 	bl	8000c98 <__aeabi_uldivmod>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfd4:	6a3b      	ldr	r3, [r7, #32]
 800bfd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfda:	d308      	bcc.n	800bfee <UART_SetConfig+0x3d2>
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfe2:	d204      	bcs.n	800bfee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6a3a      	ldr	r2, [r7, #32]
 800bfea:	60da      	str	r2, [r3, #12]
 800bfec:	e0c8      	b.n	800c180 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bff4:	e0c4      	b.n	800c180 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bffe:	d167      	bne.n	800c0d0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800c000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c004:	2b08      	cmp	r3, #8
 800c006:	d828      	bhi.n	800c05a <UART_SetConfig+0x43e>
 800c008:	a201      	add	r2, pc, #4	; (adr r2, 800c010 <UART_SetConfig+0x3f4>)
 800c00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00e:	bf00      	nop
 800c010:	0800c035 	.word	0x0800c035
 800c014:	0800c03d 	.word	0x0800c03d
 800c018:	0800c045 	.word	0x0800c045
 800c01c:	0800c05b 	.word	0x0800c05b
 800c020:	0800c04b 	.word	0x0800c04b
 800c024:	0800c05b 	.word	0x0800c05b
 800c028:	0800c05b 	.word	0x0800c05b
 800c02c:	0800c05b 	.word	0x0800c05b
 800c030:	0800c053 	.word	0x0800c053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c034:	f7fd f8b8 	bl	80091a8 <HAL_RCC_GetPCLK1Freq>
 800c038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c03a:	e014      	b.n	800c066 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c03c:	f7fd f8ca 	bl	80091d4 <HAL_RCC_GetPCLK2Freq>
 800c040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c042:	e010      	b.n	800c066 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c044:	4b5a      	ldr	r3, [pc, #360]	; (800c1b0 <UART_SetConfig+0x594>)
 800c046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c048:	e00d      	b.n	800c066 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c04a:	f7fd f83f 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800c04e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c050:	e009      	b.n	800c066 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c058:	e005      	b.n	800c066 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8089 	beq.w	800c180 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c072:	4a4e      	ldr	r2, [pc, #312]	; (800c1ac <UART_SetConfig+0x590>)
 800c074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c078:	461a      	mov	r2, r3
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c080:	005a      	lsls	r2, r3, #1
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	085b      	lsrs	r3, r3, #1
 800c088:	441a      	add	r2, r3
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c092:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	2b0f      	cmp	r3, #15
 800c098:	d916      	bls.n	800c0c8 <UART_SetConfig+0x4ac>
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0a0:	d212      	bcs.n	800c0c8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0a2:	6a3b      	ldr	r3, [r7, #32]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f023 030f 	bic.w	r3, r3, #15
 800c0aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	8bfb      	ldrh	r3, [r7, #30]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	8bfa      	ldrh	r2, [r7, #30]
 800c0c4:	60da      	str	r2, [r3, #12]
 800c0c6:	e05b      	b.n	800c180 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c0ce:	e057      	b.n	800c180 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0d4:	2b08      	cmp	r3, #8
 800c0d6:	d828      	bhi.n	800c12a <UART_SetConfig+0x50e>
 800c0d8:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <UART_SetConfig+0x4c4>)
 800c0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0de:	bf00      	nop
 800c0e0:	0800c105 	.word	0x0800c105
 800c0e4:	0800c10d 	.word	0x0800c10d
 800c0e8:	0800c115 	.word	0x0800c115
 800c0ec:	0800c12b 	.word	0x0800c12b
 800c0f0:	0800c11b 	.word	0x0800c11b
 800c0f4:	0800c12b 	.word	0x0800c12b
 800c0f8:	0800c12b 	.word	0x0800c12b
 800c0fc:	0800c12b 	.word	0x0800c12b
 800c100:	0800c123 	.word	0x0800c123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c104:	f7fd f850 	bl	80091a8 <HAL_RCC_GetPCLK1Freq>
 800c108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c10a:	e014      	b.n	800c136 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c10c:	f7fd f862 	bl	80091d4 <HAL_RCC_GetPCLK2Freq>
 800c110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c112:	e010      	b.n	800c136 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c114:	4b26      	ldr	r3, [pc, #152]	; (800c1b0 <UART_SetConfig+0x594>)
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c118:	e00d      	b.n	800c136 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c11a:	f7fc ffd7 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800c11e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c120:	e009      	b.n	800c136 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c128:	e005      	b.n	800c136 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c12a:	2300      	movs	r3, #0
 800c12c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c134:	bf00      	nop
    }

    if (pclk != 0U)
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d021      	beq.n	800c180 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	4a1a      	ldr	r2, [pc, #104]	; (800c1ac <UART_SetConfig+0x590>)
 800c142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c146:	461a      	mov	r2, r3
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	441a      	add	r2, r3
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c15e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	2b0f      	cmp	r3, #15
 800c164:	d909      	bls.n	800c17a <UART_SetConfig+0x55e>
 800c166:	6a3b      	ldr	r3, [r7, #32]
 800c168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c16c:	d205      	bcs.n	800c17a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	b29a      	uxth	r2, r3
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60da      	str	r2, [r3, #12]
 800c178:	e002      	b.n	800c180 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	2201      	movs	r2, #1
 800c184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2200      	movs	r2, #0
 800c194:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2200      	movs	r2, #0
 800c19a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c19c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3730      	adds	r7, #48	; 0x30
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1aa:	bf00      	nop
 800c1ac:	080103d0 	.word	0x080103d0
 800c1b0:	00f42400 	.word	0x00f42400

0800c1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00a      	beq.n	800c1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00a      	beq.n	800c200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00a      	beq.n	800c222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	430a      	orrs	r2, r1
 800c220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c226:	f003 0308 	and.w	r3, r3, #8
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00a      	beq.n	800c244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	430a      	orrs	r2, r1
 800c242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c248:	f003 0310 	and.w	r3, r3, #16
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00a      	beq.n	800c266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	430a      	orrs	r2, r1
 800c264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	f003 0320 	and.w	r3, r3, #32
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00a      	beq.n	800c288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	430a      	orrs	r2, r1
 800c286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01a      	beq.n	800c2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	430a      	orrs	r2, r1
 800c2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2b2:	d10a      	bne.n	800c2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	605a      	str	r2, [r3, #4]
  }
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af02      	add	r7, sp, #8
 800c2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c308:	f7f9 f9d8 	bl	80056bc <HAL_GetTick>
 800c30c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 0308 	and.w	r3, r3, #8
 800c318:	2b08      	cmp	r3, #8
 800c31a:	d10e      	bne.n	800c33a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c31c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f82f 	bl	800c38e <UART_WaitOnFlagUntilTimeout>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e025      	b.n	800c386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0304 	and.w	r3, r3, #4
 800c344:	2b04      	cmp	r3, #4
 800c346:	d10e      	bne.n	800c366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f819 	bl	800c38e <UART_WaitOnFlagUntilTimeout>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e00f      	b.n	800c386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2220      	movs	r2, #32
 800c36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2220      	movs	r2, #32
 800c372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b09c      	sub	sp, #112	; 0x70
 800c392:	af00      	add	r7, sp, #0
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	603b      	str	r3, [r7, #0]
 800c39a:	4613      	mov	r3, r2
 800c39c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c39e:	e0a9      	b.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a6:	f000 80a5 	beq.w	800c4f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3aa:	f7f9 f987 	bl	80056bc <HAL_GetTick>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d302      	bcc.n	800c3c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800c3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d140      	bne.n	800c442 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3d4:	667b      	str	r3, [r7, #100]	; 0x64
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3e6:	e841 2300 	strex	r3, r2, [r1]
 800c3ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e6      	bne.n	800c3c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	f023 0301 	bic.w	r3, r3, #1
 800c408:	663b      	str	r3, [r7, #96]	; 0x60
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3308      	adds	r3, #8
 800c410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c412:	64ba      	str	r2, [r7, #72]	; 0x48
 800c414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e5      	bne.n	800c3f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2220      	movs	r2, #32
 800c42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2220      	movs	r2, #32
 800c432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c43e:	2303      	movs	r3, #3
 800c440:	e069      	b.n	800c516 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d051      	beq.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c45a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c45e:	d149      	bne.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c47e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c488:	637b      	str	r3, [r7, #52]	; 0x34
 800c48a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e6      	bne.n	800c46a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	e853 3f00 	ldrex	r3, [r3]
 800c4aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3308      	adds	r3, #8
 800c4ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4bc:	623a      	str	r2, [r7, #32]
 800c4be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c0:	69f9      	ldr	r1, [r7, #28]
 800c4c2:	6a3a      	ldr	r2, [r7, #32]
 800c4c4:	e841 2300 	strex	r3, r2, [r1]
 800c4c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1e5      	bne.n	800c49c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2220      	movs	r2, #32
 800c4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e010      	b.n	800c516 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	69da      	ldr	r2, [r3, #28]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	429a      	cmp	r2, r3
 800c502:	bf0c      	ite	eq
 800c504:	2301      	moveq	r3, #1
 800c506:	2300      	movne	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	461a      	mov	r2, r3
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	429a      	cmp	r2, r3
 800c510:	f43f af46 	beq.w	800c3a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3770      	adds	r7, #112	; 0x70
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c51e:	b480      	push	{r7}
 800c520:	b085      	sub	sp, #20
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d101      	bne.n	800c534 <HAL_UARTEx_DisableFifoMode+0x16>
 800c530:	2302      	movs	r3, #2
 800c532:	e027      	b.n	800c584 <HAL_UARTEx_DisableFifoMode+0x66>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2224      	movs	r2, #36	; 0x24
 800c540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f022 0201 	bic.w	r2, r2, #1
 800c55a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c562:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d101      	bne.n	800c5a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	e02d      	b.n	800c604 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2224      	movs	r2, #36	; 0x24
 800c5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 0201 	bic.w	r2, r2, #1
 800c5ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f84f 	bl	800c688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2220      	movs	r2, #32
 800c5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d101      	bne.n	800c624 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c620:	2302      	movs	r3, #2
 800c622:	e02d      	b.n	800c680 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2224      	movs	r2, #36	; 0x24
 800c630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 0201 	bic.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	430a      	orrs	r2, r1
 800c65e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f811 	bl	800c688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c694:	2b00      	cmp	r3, #0
 800c696:	d108      	bne.n	800c6aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6a8:	e031      	b.n	800c70e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6aa:	2308      	movs	r3, #8
 800c6ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6ae:	2308      	movs	r3, #8
 800c6b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	0e5b      	lsrs	r3, r3, #25
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	f003 0307 	and.w	r3, r3, #7
 800c6c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	0f5b      	lsrs	r3, r3, #29
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	f003 0307 	and.w	r3, r3, #7
 800c6d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	7b3a      	ldrb	r2, [r7, #12]
 800c6d6:	4911      	ldr	r1, [pc, #68]	; (800c71c <UARTEx_SetNbDataToProcess+0x94>)
 800c6d8:	5c8a      	ldrb	r2, [r1, r2]
 800c6da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6de:	7b3a      	ldrb	r2, [r7, #12]
 800c6e0:	490f      	ldr	r1, [pc, #60]	; (800c720 <UARTEx_SetNbDataToProcess+0x98>)
 800c6e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	7b7a      	ldrb	r2, [r7, #13]
 800c6f4:	4909      	ldr	r1, [pc, #36]	; (800c71c <UARTEx_SetNbDataToProcess+0x94>)
 800c6f6:	5c8a      	ldrb	r2, [r1, r2]
 800c6f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6fc:	7b7a      	ldrb	r2, [r7, #13]
 800c6fe:	4908      	ldr	r1, [pc, #32]	; (800c720 <UARTEx_SetNbDataToProcess+0x98>)
 800c700:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c702:	fb93 f3f2 	sdiv	r3, r3, r2
 800c706:	b29a      	uxth	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c70e:	bf00      	nop
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	080103e8 	.word	0x080103e8
 800c720:	080103f0 	.word	0x080103f0

0800c724 <__errno>:
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <__errno+0x8>)
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	2000002c 	.word	0x2000002c

0800c730 <__libc_init_array>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	4d0d      	ldr	r5, [pc, #52]	; (800c768 <__libc_init_array+0x38>)
 800c734:	4c0d      	ldr	r4, [pc, #52]	; (800c76c <__libc_init_array+0x3c>)
 800c736:	1b64      	subs	r4, r4, r5
 800c738:	10a4      	asrs	r4, r4, #2
 800c73a:	2600      	movs	r6, #0
 800c73c:	42a6      	cmp	r6, r4
 800c73e:	d109      	bne.n	800c754 <__libc_init_array+0x24>
 800c740:	4d0b      	ldr	r5, [pc, #44]	; (800c770 <__libc_init_array+0x40>)
 800c742:	4c0c      	ldr	r4, [pc, #48]	; (800c774 <__libc_init_array+0x44>)
 800c744:	f003 fdba 	bl	80102bc <_init>
 800c748:	1b64      	subs	r4, r4, r5
 800c74a:	10a4      	asrs	r4, r4, #2
 800c74c:	2600      	movs	r6, #0
 800c74e:	42a6      	cmp	r6, r4
 800c750:	d105      	bne.n	800c75e <__libc_init_array+0x2e>
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	f855 3b04 	ldr.w	r3, [r5], #4
 800c758:	4798      	blx	r3
 800c75a:	3601      	adds	r6, #1
 800c75c:	e7ee      	b.n	800c73c <__libc_init_array+0xc>
 800c75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c762:	4798      	blx	r3
 800c764:	3601      	adds	r6, #1
 800c766:	e7f2      	b.n	800c74e <__libc_init_array+0x1e>
 800c768:	08010bb4 	.word	0x08010bb4
 800c76c:	08010bb4 	.word	0x08010bb4
 800c770:	08010bb4 	.word	0x08010bb4
 800c774:	08010bb8 	.word	0x08010bb8

0800c778 <memset>:
 800c778:	4402      	add	r2, r0
 800c77a:	4603      	mov	r3, r0
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d100      	bne.n	800c782 <memset+0xa>
 800c780:	4770      	bx	lr
 800c782:	f803 1b01 	strb.w	r1, [r3], #1
 800c786:	e7f9      	b.n	800c77c <memset+0x4>

0800c788 <__cvt>:
 800c788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c78c:	ec55 4b10 	vmov	r4, r5, d0
 800c790:	2d00      	cmp	r5, #0
 800c792:	460e      	mov	r6, r1
 800c794:	4619      	mov	r1, r3
 800c796:	462b      	mov	r3, r5
 800c798:	bfbb      	ittet	lt
 800c79a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c79e:	461d      	movlt	r5, r3
 800c7a0:	2300      	movge	r3, #0
 800c7a2:	232d      	movlt	r3, #45	; 0x2d
 800c7a4:	700b      	strb	r3, [r1, #0]
 800c7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c7ac:	4691      	mov	r9, r2
 800c7ae:	f023 0820 	bic.w	r8, r3, #32
 800c7b2:	bfbc      	itt	lt
 800c7b4:	4622      	movlt	r2, r4
 800c7b6:	4614      	movlt	r4, r2
 800c7b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7bc:	d005      	beq.n	800c7ca <__cvt+0x42>
 800c7be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c7c2:	d100      	bne.n	800c7c6 <__cvt+0x3e>
 800c7c4:	3601      	adds	r6, #1
 800c7c6:	2102      	movs	r1, #2
 800c7c8:	e000      	b.n	800c7cc <__cvt+0x44>
 800c7ca:	2103      	movs	r1, #3
 800c7cc:	ab03      	add	r3, sp, #12
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	ab02      	add	r3, sp, #8
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	ec45 4b10 	vmov	d0, r4, r5
 800c7d8:	4653      	mov	r3, sl
 800c7da:	4632      	mov	r2, r6
 800c7dc:	f000 fcec 	bl	800d1b8 <_dtoa_r>
 800c7e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	d102      	bne.n	800c7ee <__cvt+0x66>
 800c7e8:	f019 0f01 	tst.w	r9, #1
 800c7ec:	d022      	beq.n	800c834 <__cvt+0xac>
 800c7ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7f2:	eb07 0906 	add.w	r9, r7, r6
 800c7f6:	d110      	bne.n	800c81a <__cvt+0x92>
 800c7f8:	783b      	ldrb	r3, [r7, #0]
 800c7fa:	2b30      	cmp	r3, #48	; 0x30
 800c7fc:	d10a      	bne.n	800c814 <__cvt+0x8c>
 800c7fe:	2200      	movs	r2, #0
 800c800:	2300      	movs	r3, #0
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f4 f987 	bl	8000b18 <__aeabi_dcmpeq>
 800c80a:	b918      	cbnz	r0, 800c814 <__cvt+0x8c>
 800c80c:	f1c6 0601 	rsb	r6, r6, #1
 800c810:	f8ca 6000 	str.w	r6, [sl]
 800c814:	f8da 3000 	ldr.w	r3, [sl]
 800c818:	4499      	add	r9, r3
 800c81a:	2200      	movs	r2, #0
 800c81c:	2300      	movs	r3, #0
 800c81e:	4620      	mov	r0, r4
 800c820:	4629      	mov	r1, r5
 800c822:	f7f4 f979 	bl	8000b18 <__aeabi_dcmpeq>
 800c826:	b108      	cbz	r0, 800c82c <__cvt+0xa4>
 800c828:	f8cd 900c 	str.w	r9, [sp, #12]
 800c82c:	2230      	movs	r2, #48	; 0x30
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	454b      	cmp	r3, r9
 800c832:	d307      	bcc.n	800c844 <__cvt+0xbc>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c838:	1bdb      	subs	r3, r3, r7
 800c83a:	4638      	mov	r0, r7
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	b004      	add	sp, #16
 800c840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c844:	1c59      	adds	r1, r3, #1
 800c846:	9103      	str	r1, [sp, #12]
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	e7f0      	b.n	800c82e <__cvt+0xa6>

0800c84c <__exponent>:
 800c84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c84e:	4603      	mov	r3, r0
 800c850:	2900      	cmp	r1, #0
 800c852:	bfb8      	it	lt
 800c854:	4249      	neglt	r1, r1
 800c856:	f803 2b02 	strb.w	r2, [r3], #2
 800c85a:	bfb4      	ite	lt
 800c85c:	222d      	movlt	r2, #45	; 0x2d
 800c85e:	222b      	movge	r2, #43	; 0x2b
 800c860:	2909      	cmp	r1, #9
 800c862:	7042      	strb	r2, [r0, #1]
 800c864:	dd2a      	ble.n	800c8bc <__exponent+0x70>
 800c866:	f10d 0407 	add.w	r4, sp, #7
 800c86a:	46a4      	mov	ip, r4
 800c86c:	270a      	movs	r7, #10
 800c86e:	46a6      	mov	lr, r4
 800c870:	460a      	mov	r2, r1
 800c872:	fb91 f6f7 	sdiv	r6, r1, r7
 800c876:	fb07 1516 	mls	r5, r7, r6, r1
 800c87a:	3530      	adds	r5, #48	; 0x30
 800c87c:	2a63      	cmp	r2, #99	; 0x63
 800c87e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c882:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c886:	4631      	mov	r1, r6
 800c888:	dcf1      	bgt.n	800c86e <__exponent+0x22>
 800c88a:	3130      	adds	r1, #48	; 0x30
 800c88c:	f1ae 0502 	sub.w	r5, lr, #2
 800c890:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c894:	1c44      	adds	r4, r0, #1
 800c896:	4629      	mov	r1, r5
 800c898:	4561      	cmp	r1, ip
 800c89a:	d30a      	bcc.n	800c8b2 <__exponent+0x66>
 800c89c:	f10d 0209 	add.w	r2, sp, #9
 800c8a0:	eba2 020e 	sub.w	r2, r2, lr
 800c8a4:	4565      	cmp	r5, ip
 800c8a6:	bf88      	it	hi
 800c8a8:	2200      	movhi	r2, #0
 800c8aa:	4413      	add	r3, r2
 800c8ac:	1a18      	subs	r0, r3, r0
 800c8ae:	b003      	add	sp, #12
 800c8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c8ba:	e7ed      	b.n	800c898 <__exponent+0x4c>
 800c8bc:	2330      	movs	r3, #48	; 0x30
 800c8be:	3130      	adds	r1, #48	; 0x30
 800c8c0:	7083      	strb	r3, [r0, #2]
 800c8c2:	70c1      	strb	r1, [r0, #3]
 800c8c4:	1d03      	adds	r3, r0, #4
 800c8c6:	e7f1      	b.n	800c8ac <__exponent+0x60>

0800c8c8 <_printf_float>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	ed2d 8b02 	vpush	{d8}
 800c8d0:	b08d      	sub	sp, #52	; 0x34
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c8d8:	4616      	mov	r6, r2
 800c8da:	461f      	mov	r7, r3
 800c8dc:	4605      	mov	r5, r0
 800c8de:	f001 fa59 	bl	800dd94 <_localeconv_r>
 800c8e2:	f8d0 a000 	ldr.w	sl, [r0]
 800c8e6:	4650      	mov	r0, sl
 800c8e8:	f7f3 fc9a 	bl	8000220 <strlen>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	9305      	str	r3, [sp, #20]
 800c8f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c8fc:	3307      	adds	r3, #7
 800c8fe:	f023 0307 	bic.w	r3, r3, #7
 800c902:	f103 0208 	add.w	r2, r3, #8
 800c906:	f8c8 2000 	str.w	r2, [r8]
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c912:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c91a:	9307      	str	r3, [sp, #28]
 800c91c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c920:	ee08 0a10 	vmov	s16, r0
 800c924:	4b9f      	ldr	r3, [pc, #636]	; (800cba4 <_printf_float+0x2dc>)
 800c926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c92a:	f04f 32ff 	mov.w	r2, #4294967295
 800c92e:	f7f4 f925 	bl	8000b7c <__aeabi_dcmpun>
 800c932:	bb88      	cbnz	r0, 800c998 <_printf_float+0xd0>
 800c934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c938:	4b9a      	ldr	r3, [pc, #616]	; (800cba4 <_printf_float+0x2dc>)
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	f7f4 f8ff 	bl	8000b40 <__aeabi_dcmple>
 800c942:	bb48      	cbnz	r0, 800c998 <_printf_float+0xd0>
 800c944:	2200      	movs	r2, #0
 800c946:	2300      	movs	r3, #0
 800c948:	4640      	mov	r0, r8
 800c94a:	4649      	mov	r1, r9
 800c94c:	f7f4 f8ee 	bl	8000b2c <__aeabi_dcmplt>
 800c950:	b110      	cbz	r0, 800c958 <_printf_float+0x90>
 800c952:	232d      	movs	r3, #45	; 0x2d
 800c954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c958:	4b93      	ldr	r3, [pc, #588]	; (800cba8 <_printf_float+0x2e0>)
 800c95a:	4894      	ldr	r0, [pc, #592]	; (800cbac <_printf_float+0x2e4>)
 800c95c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c960:	bf94      	ite	ls
 800c962:	4698      	movls	r8, r3
 800c964:	4680      	movhi	r8, r0
 800c966:	2303      	movs	r3, #3
 800c968:	6123      	str	r3, [r4, #16]
 800c96a:	9b05      	ldr	r3, [sp, #20]
 800c96c:	f023 0204 	bic.w	r2, r3, #4
 800c970:	6022      	str	r2, [r4, #0]
 800c972:	f04f 0900 	mov.w	r9, #0
 800c976:	9700      	str	r7, [sp, #0]
 800c978:	4633      	mov	r3, r6
 800c97a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c97c:	4621      	mov	r1, r4
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 f9d8 	bl	800cd34 <_printf_common>
 800c984:	3001      	adds	r0, #1
 800c986:	f040 8090 	bne.w	800caaa <_printf_float+0x1e2>
 800c98a:	f04f 30ff 	mov.w	r0, #4294967295
 800c98e:	b00d      	add	sp, #52	; 0x34
 800c990:	ecbd 8b02 	vpop	{d8}
 800c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c998:	4642      	mov	r2, r8
 800c99a:	464b      	mov	r3, r9
 800c99c:	4640      	mov	r0, r8
 800c99e:	4649      	mov	r1, r9
 800c9a0:	f7f4 f8ec 	bl	8000b7c <__aeabi_dcmpun>
 800c9a4:	b140      	cbz	r0, 800c9b8 <_printf_float+0xf0>
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bfbc      	itt	lt
 800c9ac:	232d      	movlt	r3, #45	; 0x2d
 800c9ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c9b2:	487f      	ldr	r0, [pc, #508]	; (800cbb0 <_printf_float+0x2e8>)
 800c9b4:	4b7f      	ldr	r3, [pc, #508]	; (800cbb4 <_printf_float+0x2ec>)
 800c9b6:	e7d1      	b.n	800c95c <_printf_float+0x94>
 800c9b8:	6863      	ldr	r3, [r4, #4]
 800c9ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c9be:	9206      	str	r2, [sp, #24]
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	d13f      	bne.n	800ca44 <_printf_float+0x17c>
 800c9c4:	2306      	movs	r3, #6
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	9b05      	ldr	r3, [sp, #20]
 800c9ca:	6861      	ldr	r1, [r4, #4]
 800c9cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9303      	str	r3, [sp, #12]
 800c9d4:	ab0a      	add	r3, sp, #40	; 0x28
 800c9d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c9da:	ab09      	add	r3, sp, #36	; 0x24
 800c9dc:	ec49 8b10 	vmov	d0, r8, r9
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	6022      	str	r2, [r4, #0]
 800c9e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f7ff fecd 	bl	800c788 <__cvt>
 800c9ee:	9b06      	ldr	r3, [sp, #24]
 800c9f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9f2:	2b47      	cmp	r3, #71	; 0x47
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	d108      	bne.n	800ca0a <_printf_float+0x142>
 800c9f8:	1cc8      	adds	r0, r1, #3
 800c9fa:	db02      	blt.n	800ca02 <_printf_float+0x13a>
 800c9fc:	6863      	ldr	r3, [r4, #4]
 800c9fe:	4299      	cmp	r1, r3
 800ca00:	dd41      	ble.n	800ca86 <_printf_float+0x1be>
 800ca02:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca06:	fa5f fb8b 	uxtb.w	fp, fp
 800ca0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca0e:	d820      	bhi.n	800ca52 <_printf_float+0x18a>
 800ca10:	3901      	subs	r1, #1
 800ca12:	465a      	mov	r2, fp
 800ca14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca18:	9109      	str	r1, [sp, #36]	; 0x24
 800ca1a:	f7ff ff17 	bl	800c84c <__exponent>
 800ca1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca20:	1813      	adds	r3, r2, r0
 800ca22:	2a01      	cmp	r2, #1
 800ca24:	4681      	mov	r9, r0
 800ca26:	6123      	str	r3, [r4, #16]
 800ca28:	dc02      	bgt.n	800ca30 <_printf_float+0x168>
 800ca2a:	6822      	ldr	r2, [r4, #0]
 800ca2c:	07d2      	lsls	r2, r2, #31
 800ca2e:	d501      	bpl.n	800ca34 <_printf_float+0x16c>
 800ca30:	3301      	adds	r3, #1
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d09c      	beq.n	800c976 <_printf_float+0xae>
 800ca3c:	232d      	movs	r3, #45	; 0x2d
 800ca3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca42:	e798      	b.n	800c976 <_printf_float+0xae>
 800ca44:	9a06      	ldr	r2, [sp, #24]
 800ca46:	2a47      	cmp	r2, #71	; 0x47
 800ca48:	d1be      	bne.n	800c9c8 <_printf_float+0x100>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1bc      	bne.n	800c9c8 <_printf_float+0x100>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e7b9      	b.n	800c9c6 <_printf_float+0xfe>
 800ca52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca56:	d118      	bne.n	800ca8a <_printf_float+0x1c2>
 800ca58:	2900      	cmp	r1, #0
 800ca5a:	6863      	ldr	r3, [r4, #4]
 800ca5c:	dd0b      	ble.n	800ca76 <_printf_float+0x1ae>
 800ca5e:	6121      	str	r1, [r4, #16]
 800ca60:	b913      	cbnz	r3, 800ca68 <_printf_float+0x1a0>
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	07d0      	lsls	r0, r2, #31
 800ca66:	d502      	bpl.n	800ca6e <_printf_float+0x1a6>
 800ca68:	3301      	adds	r3, #1
 800ca6a:	440b      	add	r3, r1
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca70:	f04f 0900 	mov.w	r9, #0
 800ca74:	e7de      	b.n	800ca34 <_printf_float+0x16c>
 800ca76:	b913      	cbnz	r3, 800ca7e <_printf_float+0x1b6>
 800ca78:	6822      	ldr	r2, [r4, #0]
 800ca7a:	07d2      	lsls	r2, r2, #31
 800ca7c:	d501      	bpl.n	800ca82 <_printf_float+0x1ba>
 800ca7e:	3302      	adds	r3, #2
 800ca80:	e7f4      	b.n	800ca6c <_printf_float+0x1a4>
 800ca82:	2301      	movs	r3, #1
 800ca84:	e7f2      	b.n	800ca6c <_printf_float+0x1a4>
 800ca86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8c:	4299      	cmp	r1, r3
 800ca8e:	db05      	blt.n	800ca9c <_printf_float+0x1d4>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	6121      	str	r1, [r4, #16]
 800ca94:	07d8      	lsls	r0, r3, #31
 800ca96:	d5ea      	bpl.n	800ca6e <_printf_float+0x1a6>
 800ca98:	1c4b      	adds	r3, r1, #1
 800ca9a:	e7e7      	b.n	800ca6c <_printf_float+0x1a4>
 800ca9c:	2900      	cmp	r1, #0
 800ca9e:	bfd4      	ite	le
 800caa0:	f1c1 0202 	rsble	r2, r1, #2
 800caa4:	2201      	movgt	r2, #1
 800caa6:	4413      	add	r3, r2
 800caa8:	e7e0      	b.n	800ca6c <_printf_float+0x1a4>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	055a      	lsls	r2, r3, #21
 800caae:	d407      	bmi.n	800cac0 <_printf_float+0x1f8>
 800cab0:	6923      	ldr	r3, [r4, #16]
 800cab2:	4642      	mov	r2, r8
 800cab4:	4631      	mov	r1, r6
 800cab6:	4628      	mov	r0, r5
 800cab8:	47b8      	blx	r7
 800caba:	3001      	adds	r0, #1
 800cabc:	d12c      	bne.n	800cb18 <_printf_float+0x250>
 800cabe:	e764      	b.n	800c98a <_printf_float+0xc2>
 800cac0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cac4:	f240 80e0 	bls.w	800cc88 <_printf_float+0x3c0>
 800cac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	f7f4 f822 	bl	8000b18 <__aeabi_dcmpeq>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d034      	beq.n	800cb42 <_printf_float+0x27a>
 800cad8:	4a37      	ldr	r2, [pc, #220]	; (800cbb8 <_printf_float+0x2f0>)
 800cada:	2301      	movs	r3, #1
 800cadc:	4631      	mov	r1, r6
 800cade:	4628      	mov	r0, r5
 800cae0:	47b8      	blx	r7
 800cae2:	3001      	adds	r0, #1
 800cae4:	f43f af51 	beq.w	800c98a <_printf_float+0xc2>
 800cae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caec:	429a      	cmp	r2, r3
 800caee:	db02      	blt.n	800caf6 <_printf_float+0x22e>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	07d8      	lsls	r0, r3, #31
 800caf4:	d510      	bpl.n	800cb18 <_printf_float+0x250>
 800caf6:	ee18 3a10 	vmov	r3, s16
 800cafa:	4652      	mov	r2, sl
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f af41 	beq.w	800c98a <_printf_float+0xc2>
 800cb08:	f04f 0800 	mov.w	r8, #0
 800cb0c:	f104 091a 	add.w	r9, r4, #26
 800cb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb12:	3b01      	subs	r3, #1
 800cb14:	4543      	cmp	r3, r8
 800cb16:	dc09      	bgt.n	800cb2c <_printf_float+0x264>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	079b      	lsls	r3, r3, #30
 800cb1c:	f100 8105 	bmi.w	800cd2a <_printf_float+0x462>
 800cb20:	68e0      	ldr	r0, [r4, #12]
 800cb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb24:	4298      	cmp	r0, r3
 800cb26:	bfb8      	it	lt
 800cb28:	4618      	movlt	r0, r3
 800cb2a:	e730      	b.n	800c98e <_printf_float+0xc6>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	464a      	mov	r2, r9
 800cb30:	4631      	mov	r1, r6
 800cb32:	4628      	mov	r0, r5
 800cb34:	47b8      	blx	r7
 800cb36:	3001      	adds	r0, #1
 800cb38:	f43f af27 	beq.w	800c98a <_printf_float+0xc2>
 800cb3c:	f108 0801 	add.w	r8, r8, #1
 800cb40:	e7e6      	b.n	800cb10 <_printf_float+0x248>
 800cb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dc39      	bgt.n	800cbbc <_printf_float+0x2f4>
 800cb48:	4a1b      	ldr	r2, [pc, #108]	; (800cbb8 <_printf_float+0x2f0>)
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4628      	mov	r0, r5
 800cb50:	47b8      	blx	r7
 800cb52:	3001      	adds	r0, #1
 800cb54:	f43f af19 	beq.w	800c98a <_printf_float+0xc2>
 800cb58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	d102      	bne.n	800cb66 <_printf_float+0x29e>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	07d9      	lsls	r1, r3, #31
 800cb64:	d5d8      	bpl.n	800cb18 <_printf_float+0x250>
 800cb66:	ee18 3a10 	vmov	r3, s16
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	4631      	mov	r1, r6
 800cb6e:	4628      	mov	r0, r5
 800cb70:	47b8      	blx	r7
 800cb72:	3001      	adds	r0, #1
 800cb74:	f43f af09 	beq.w	800c98a <_printf_float+0xc2>
 800cb78:	f04f 0900 	mov.w	r9, #0
 800cb7c:	f104 0a1a 	add.w	sl, r4, #26
 800cb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb82:	425b      	negs	r3, r3
 800cb84:	454b      	cmp	r3, r9
 800cb86:	dc01      	bgt.n	800cb8c <_printf_float+0x2c4>
 800cb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb8a:	e792      	b.n	800cab2 <_printf_float+0x1ea>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	4652      	mov	r2, sl
 800cb90:	4631      	mov	r1, r6
 800cb92:	4628      	mov	r0, r5
 800cb94:	47b8      	blx	r7
 800cb96:	3001      	adds	r0, #1
 800cb98:	f43f aef7 	beq.w	800c98a <_printf_float+0xc2>
 800cb9c:	f109 0901 	add.w	r9, r9, #1
 800cba0:	e7ee      	b.n	800cb80 <_printf_float+0x2b8>
 800cba2:	bf00      	nop
 800cba4:	7fefffff 	.word	0x7fefffff
 800cba8:	080103fc 	.word	0x080103fc
 800cbac:	08010400 	.word	0x08010400
 800cbb0:	08010408 	.word	0x08010408
 800cbb4:	08010404 	.word	0x08010404
 800cbb8:	0801040c 	.word	0x0801040c
 800cbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	bfa8      	it	ge
 800cbc4:	461a      	movge	r2, r3
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	4691      	mov	r9, r2
 800cbca:	dc37      	bgt.n	800cc3c <_printf_float+0x374>
 800cbcc:	f04f 0b00 	mov.w	fp, #0
 800cbd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbd4:	f104 021a 	add.w	r2, r4, #26
 800cbd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbda:	9305      	str	r3, [sp, #20]
 800cbdc:	eba3 0309 	sub.w	r3, r3, r9
 800cbe0:	455b      	cmp	r3, fp
 800cbe2:	dc33      	bgt.n	800cc4c <_printf_float+0x384>
 800cbe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	db3b      	blt.n	800cc64 <_printf_float+0x39c>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	07da      	lsls	r2, r3, #31
 800cbf0:	d438      	bmi.n	800cc64 <_printf_float+0x39c>
 800cbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf4:	9a05      	ldr	r2, [sp, #20]
 800cbf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbf8:	1a9a      	subs	r2, r3, r2
 800cbfa:	eba3 0901 	sub.w	r9, r3, r1
 800cbfe:	4591      	cmp	r9, r2
 800cc00:	bfa8      	it	ge
 800cc02:	4691      	movge	r9, r2
 800cc04:	f1b9 0f00 	cmp.w	r9, #0
 800cc08:	dc35      	bgt.n	800cc76 <_printf_float+0x3ae>
 800cc0a:	f04f 0800 	mov.w	r8, #0
 800cc0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc12:	f104 0a1a 	add.w	sl, r4, #26
 800cc16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	eba3 0309 	sub.w	r3, r3, r9
 800cc20:	4543      	cmp	r3, r8
 800cc22:	f77f af79 	ble.w	800cb18 <_printf_float+0x250>
 800cc26:	2301      	movs	r3, #1
 800cc28:	4652      	mov	r2, sl
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	47b8      	blx	r7
 800cc30:	3001      	adds	r0, #1
 800cc32:	f43f aeaa 	beq.w	800c98a <_printf_float+0xc2>
 800cc36:	f108 0801 	add.w	r8, r8, #1
 800cc3a:	e7ec      	b.n	800cc16 <_printf_float+0x34e>
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	4631      	mov	r1, r6
 800cc40:	4642      	mov	r2, r8
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b8      	blx	r7
 800cc46:	3001      	adds	r0, #1
 800cc48:	d1c0      	bne.n	800cbcc <_printf_float+0x304>
 800cc4a:	e69e      	b.n	800c98a <_printf_float+0xc2>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	4631      	mov	r1, r6
 800cc50:	4628      	mov	r0, r5
 800cc52:	9205      	str	r2, [sp, #20]
 800cc54:	47b8      	blx	r7
 800cc56:	3001      	adds	r0, #1
 800cc58:	f43f ae97 	beq.w	800c98a <_printf_float+0xc2>
 800cc5c:	9a05      	ldr	r2, [sp, #20]
 800cc5e:	f10b 0b01 	add.w	fp, fp, #1
 800cc62:	e7b9      	b.n	800cbd8 <_printf_float+0x310>
 800cc64:	ee18 3a10 	vmov	r3, s16
 800cc68:	4652      	mov	r2, sl
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	47b8      	blx	r7
 800cc70:	3001      	adds	r0, #1
 800cc72:	d1be      	bne.n	800cbf2 <_printf_float+0x32a>
 800cc74:	e689      	b.n	800c98a <_printf_float+0xc2>
 800cc76:	9a05      	ldr	r2, [sp, #20]
 800cc78:	464b      	mov	r3, r9
 800cc7a:	4442      	add	r2, r8
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4628      	mov	r0, r5
 800cc80:	47b8      	blx	r7
 800cc82:	3001      	adds	r0, #1
 800cc84:	d1c1      	bne.n	800cc0a <_printf_float+0x342>
 800cc86:	e680      	b.n	800c98a <_printf_float+0xc2>
 800cc88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc8a:	2a01      	cmp	r2, #1
 800cc8c:	dc01      	bgt.n	800cc92 <_printf_float+0x3ca>
 800cc8e:	07db      	lsls	r3, r3, #31
 800cc90:	d538      	bpl.n	800cd04 <_printf_float+0x43c>
 800cc92:	2301      	movs	r3, #1
 800cc94:	4642      	mov	r2, r8
 800cc96:	4631      	mov	r1, r6
 800cc98:	4628      	mov	r0, r5
 800cc9a:	47b8      	blx	r7
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	f43f ae74 	beq.w	800c98a <_printf_float+0xc2>
 800cca2:	ee18 3a10 	vmov	r3, s16
 800cca6:	4652      	mov	r2, sl
 800cca8:	4631      	mov	r1, r6
 800ccaa:	4628      	mov	r0, r5
 800ccac:	47b8      	blx	r7
 800ccae:	3001      	adds	r0, #1
 800ccb0:	f43f ae6b 	beq.w	800c98a <_printf_float+0xc2>
 800ccb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f7f3 ff2c 	bl	8000b18 <__aeabi_dcmpeq>
 800ccc0:	b9d8      	cbnz	r0, 800ccfa <_printf_float+0x432>
 800ccc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc4:	f108 0201 	add.w	r2, r8, #1
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	4631      	mov	r1, r6
 800cccc:	4628      	mov	r0, r5
 800ccce:	47b8      	blx	r7
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	d10e      	bne.n	800ccf2 <_printf_float+0x42a>
 800ccd4:	e659      	b.n	800c98a <_printf_float+0xc2>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4652      	mov	r2, sl
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b8      	blx	r7
 800cce0:	3001      	adds	r0, #1
 800cce2:	f43f ae52 	beq.w	800c98a <_printf_float+0xc2>
 800cce6:	f108 0801 	add.w	r8, r8, #1
 800ccea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccec:	3b01      	subs	r3, #1
 800ccee:	4543      	cmp	r3, r8
 800ccf0:	dcf1      	bgt.n	800ccd6 <_printf_float+0x40e>
 800ccf2:	464b      	mov	r3, r9
 800ccf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ccf8:	e6dc      	b.n	800cab4 <_printf_float+0x1ec>
 800ccfa:	f04f 0800 	mov.w	r8, #0
 800ccfe:	f104 0a1a 	add.w	sl, r4, #26
 800cd02:	e7f2      	b.n	800ccea <_printf_float+0x422>
 800cd04:	2301      	movs	r3, #1
 800cd06:	4642      	mov	r2, r8
 800cd08:	e7df      	b.n	800ccca <_printf_float+0x402>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	464a      	mov	r2, r9
 800cd0e:	4631      	mov	r1, r6
 800cd10:	4628      	mov	r0, r5
 800cd12:	47b8      	blx	r7
 800cd14:	3001      	adds	r0, #1
 800cd16:	f43f ae38 	beq.w	800c98a <_printf_float+0xc2>
 800cd1a:	f108 0801 	add.w	r8, r8, #1
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd22:	1a5b      	subs	r3, r3, r1
 800cd24:	4543      	cmp	r3, r8
 800cd26:	dcf0      	bgt.n	800cd0a <_printf_float+0x442>
 800cd28:	e6fa      	b.n	800cb20 <_printf_float+0x258>
 800cd2a:	f04f 0800 	mov.w	r8, #0
 800cd2e:	f104 0919 	add.w	r9, r4, #25
 800cd32:	e7f4      	b.n	800cd1e <_printf_float+0x456>

0800cd34 <_printf_common>:
 800cd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd38:	4616      	mov	r6, r2
 800cd3a:	4699      	mov	r9, r3
 800cd3c:	688a      	ldr	r2, [r1, #8]
 800cd3e:	690b      	ldr	r3, [r1, #16]
 800cd40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd44:	4293      	cmp	r3, r2
 800cd46:	bfb8      	it	lt
 800cd48:	4613      	movlt	r3, r2
 800cd4a:	6033      	str	r3, [r6, #0]
 800cd4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd50:	4607      	mov	r7, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	b10a      	cbz	r2, 800cd5a <_printf_common+0x26>
 800cd56:	3301      	adds	r3, #1
 800cd58:	6033      	str	r3, [r6, #0]
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	0699      	lsls	r1, r3, #26
 800cd5e:	bf42      	ittt	mi
 800cd60:	6833      	ldrmi	r3, [r6, #0]
 800cd62:	3302      	addmi	r3, #2
 800cd64:	6033      	strmi	r3, [r6, #0]
 800cd66:	6825      	ldr	r5, [r4, #0]
 800cd68:	f015 0506 	ands.w	r5, r5, #6
 800cd6c:	d106      	bne.n	800cd7c <_printf_common+0x48>
 800cd6e:	f104 0a19 	add.w	sl, r4, #25
 800cd72:	68e3      	ldr	r3, [r4, #12]
 800cd74:	6832      	ldr	r2, [r6, #0]
 800cd76:	1a9b      	subs	r3, r3, r2
 800cd78:	42ab      	cmp	r3, r5
 800cd7a:	dc26      	bgt.n	800cdca <_printf_common+0x96>
 800cd7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd80:	1e13      	subs	r3, r2, #0
 800cd82:	6822      	ldr	r2, [r4, #0]
 800cd84:	bf18      	it	ne
 800cd86:	2301      	movne	r3, #1
 800cd88:	0692      	lsls	r2, r2, #26
 800cd8a:	d42b      	bmi.n	800cde4 <_printf_common+0xb0>
 800cd8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd90:	4649      	mov	r1, r9
 800cd92:	4638      	mov	r0, r7
 800cd94:	47c0      	blx	r8
 800cd96:	3001      	adds	r0, #1
 800cd98:	d01e      	beq.n	800cdd8 <_printf_common+0xa4>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	68e5      	ldr	r5, [r4, #12]
 800cd9e:	6832      	ldr	r2, [r6, #0]
 800cda0:	f003 0306 	and.w	r3, r3, #6
 800cda4:	2b04      	cmp	r3, #4
 800cda6:	bf08      	it	eq
 800cda8:	1aad      	subeq	r5, r5, r2
 800cdaa:	68a3      	ldr	r3, [r4, #8]
 800cdac:	6922      	ldr	r2, [r4, #16]
 800cdae:	bf0c      	ite	eq
 800cdb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdb4:	2500      	movne	r5, #0
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	bfc4      	itt	gt
 800cdba:	1a9b      	subgt	r3, r3, r2
 800cdbc:	18ed      	addgt	r5, r5, r3
 800cdbe:	2600      	movs	r6, #0
 800cdc0:	341a      	adds	r4, #26
 800cdc2:	42b5      	cmp	r5, r6
 800cdc4:	d11a      	bne.n	800cdfc <_printf_common+0xc8>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	e008      	b.n	800cddc <_printf_common+0xa8>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	4652      	mov	r2, sl
 800cdce:	4649      	mov	r1, r9
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	47c0      	blx	r8
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d103      	bne.n	800cde0 <_printf_common+0xac>
 800cdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde0:	3501      	adds	r5, #1
 800cde2:	e7c6      	b.n	800cd72 <_printf_common+0x3e>
 800cde4:	18e1      	adds	r1, r4, r3
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	2030      	movs	r0, #48	; 0x30
 800cdea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdee:	4422      	add	r2, r4
 800cdf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdf8:	3302      	adds	r3, #2
 800cdfa:	e7c7      	b.n	800cd8c <_printf_common+0x58>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	4622      	mov	r2, r4
 800ce00:	4649      	mov	r1, r9
 800ce02:	4638      	mov	r0, r7
 800ce04:	47c0      	blx	r8
 800ce06:	3001      	adds	r0, #1
 800ce08:	d0e6      	beq.n	800cdd8 <_printf_common+0xa4>
 800ce0a:	3601      	adds	r6, #1
 800ce0c:	e7d9      	b.n	800cdc2 <_printf_common+0x8e>
	...

0800ce10 <_printf_i>:
 800ce10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce14:	7e0f      	ldrb	r7, [r1, #24]
 800ce16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce18:	2f78      	cmp	r7, #120	; 0x78
 800ce1a:	4691      	mov	r9, r2
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	469a      	mov	sl, r3
 800ce22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce26:	d807      	bhi.n	800ce38 <_printf_i+0x28>
 800ce28:	2f62      	cmp	r7, #98	; 0x62
 800ce2a:	d80a      	bhi.n	800ce42 <_printf_i+0x32>
 800ce2c:	2f00      	cmp	r7, #0
 800ce2e:	f000 80d8 	beq.w	800cfe2 <_printf_i+0x1d2>
 800ce32:	2f58      	cmp	r7, #88	; 0x58
 800ce34:	f000 80a3 	beq.w	800cf7e <_printf_i+0x16e>
 800ce38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce40:	e03a      	b.n	800ceb8 <_printf_i+0xa8>
 800ce42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce46:	2b15      	cmp	r3, #21
 800ce48:	d8f6      	bhi.n	800ce38 <_printf_i+0x28>
 800ce4a:	a101      	add	r1, pc, #4	; (adr r1, 800ce50 <_printf_i+0x40>)
 800ce4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce50:	0800cea9 	.word	0x0800cea9
 800ce54:	0800cebd 	.word	0x0800cebd
 800ce58:	0800ce39 	.word	0x0800ce39
 800ce5c:	0800ce39 	.word	0x0800ce39
 800ce60:	0800ce39 	.word	0x0800ce39
 800ce64:	0800ce39 	.word	0x0800ce39
 800ce68:	0800cebd 	.word	0x0800cebd
 800ce6c:	0800ce39 	.word	0x0800ce39
 800ce70:	0800ce39 	.word	0x0800ce39
 800ce74:	0800ce39 	.word	0x0800ce39
 800ce78:	0800ce39 	.word	0x0800ce39
 800ce7c:	0800cfc9 	.word	0x0800cfc9
 800ce80:	0800ceed 	.word	0x0800ceed
 800ce84:	0800cfab 	.word	0x0800cfab
 800ce88:	0800ce39 	.word	0x0800ce39
 800ce8c:	0800ce39 	.word	0x0800ce39
 800ce90:	0800cfeb 	.word	0x0800cfeb
 800ce94:	0800ce39 	.word	0x0800ce39
 800ce98:	0800ceed 	.word	0x0800ceed
 800ce9c:	0800ce39 	.word	0x0800ce39
 800cea0:	0800ce39 	.word	0x0800ce39
 800cea4:	0800cfb3 	.word	0x0800cfb3
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	1d1a      	adds	r2, r3, #4
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	602a      	str	r2, [r5, #0]
 800ceb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ceb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e0a3      	b.n	800d004 <_printf_i+0x1f4>
 800cebc:	6820      	ldr	r0, [r4, #0]
 800cebe:	6829      	ldr	r1, [r5, #0]
 800cec0:	0606      	lsls	r6, r0, #24
 800cec2:	f101 0304 	add.w	r3, r1, #4
 800cec6:	d50a      	bpl.n	800cede <_printf_i+0xce>
 800cec8:	680e      	ldr	r6, [r1, #0]
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	2e00      	cmp	r6, #0
 800cece:	da03      	bge.n	800ced8 <_printf_i+0xc8>
 800ced0:	232d      	movs	r3, #45	; 0x2d
 800ced2:	4276      	negs	r6, r6
 800ced4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ced8:	485e      	ldr	r0, [pc, #376]	; (800d054 <_printf_i+0x244>)
 800ceda:	230a      	movs	r3, #10
 800cedc:	e019      	b.n	800cf12 <_printf_i+0x102>
 800cede:	680e      	ldr	r6, [r1, #0]
 800cee0:	602b      	str	r3, [r5, #0]
 800cee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cee6:	bf18      	it	ne
 800cee8:	b236      	sxthne	r6, r6
 800ceea:	e7ef      	b.n	800cecc <_printf_i+0xbc>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	6820      	ldr	r0, [r4, #0]
 800cef0:	1d19      	adds	r1, r3, #4
 800cef2:	6029      	str	r1, [r5, #0]
 800cef4:	0601      	lsls	r1, r0, #24
 800cef6:	d501      	bpl.n	800cefc <_printf_i+0xec>
 800cef8:	681e      	ldr	r6, [r3, #0]
 800cefa:	e002      	b.n	800cf02 <_printf_i+0xf2>
 800cefc:	0646      	lsls	r6, r0, #25
 800cefe:	d5fb      	bpl.n	800cef8 <_printf_i+0xe8>
 800cf00:	881e      	ldrh	r6, [r3, #0]
 800cf02:	4854      	ldr	r0, [pc, #336]	; (800d054 <_printf_i+0x244>)
 800cf04:	2f6f      	cmp	r7, #111	; 0x6f
 800cf06:	bf0c      	ite	eq
 800cf08:	2308      	moveq	r3, #8
 800cf0a:	230a      	movne	r3, #10
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf12:	6865      	ldr	r5, [r4, #4]
 800cf14:	60a5      	str	r5, [r4, #8]
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	bfa2      	ittt	ge
 800cf1a:	6821      	ldrge	r1, [r4, #0]
 800cf1c:	f021 0104 	bicge.w	r1, r1, #4
 800cf20:	6021      	strge	r1, [r4, #0]
 800cf22:	b90e      	cbnz	r6, 800cf28 <_printf_i+0x118>
 800cf24:	2d00      	cmp	r5, #0
 800cf26:	d04d      	beq.n	800cfc4 <_printf_i+0x1b4>
 800cf28:	4615      	mov	r5, r2
 800cf2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf2e:	fb03 6711 	mls	r7, r3, r1, r6
 800cf32:	5dc7      	ldrb	r7, [r0, r7]
 800cf34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf38:	4637      	mov	r7, r6
 800cf3a:	42bb      	cmp	r3, r7
 800cf3c:	460e      	mov	r6, r1
 800cf3e:	d9f4      	bls.n	800cf2a <_printf_i+0x11a>
 800cf40:	2b08      	cmp	r3, #8
 800cf42:	d10b      	bne.n	800cf5c <_printf_i+0x14c>
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	07de      	lsls	r6, r3, #31
 800cf48:	d508      	bpl.n	800cf5c <_printf_i+0x14c>
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	6861      	ldr	r1, [r4, #4]
 800cf4e:	4299      	cmp	r1, r3
 800cf50:	bfde      	ittt	le
 800cf52:	2330      	movle	r3, #48	; 0x30
 800cf54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf5c:	1b52      	subs	r2, r2, r5
 800cf5e:	6122      	str	r2, [r4, #16]
 800cf60:	f8cd a000 	str.w	sl, [sp]
 800cf64:	464b      	mov	r3, r9
 800cf66:	aa03      	add	r2, sp, #12
 800cf68:	4621      	mov	r1, r4
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	f7ff fee2 	bl	800cd34 <_printf_common>
 800cf70:	3001      	adds	r0, #1
 800cf72:	d14c      	bne.n	800d00e <_printf_i+0x1fe>
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	b004      	add	sp, #16
 800cf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf7e:	4835      	ldr	r0, [pc, #212]	; (800d054 <_printf_i+0x244>)
 800cf80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf84:	6829      	ldr	r1, [r5, #0]
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf8c:	6029      	str	r1, [r5, #0]
 800cf8e:	061d      	lsls	r5, r3, #24
 800cf90:	d514      	bpl.n	800cfbc <_printf_i+0x1ac>
 800cf92:	07df      	lsls	r7, r3, #31
 800cf94:	bf44      	itt	mi
 800cf96:	f043 0320 	orrmi.w	r3, r3, #32
 800cf9a:	6023      	strmi	r3, [r4, #0]
 800cf9c:	b91e      	cbnz	r6, 800cfa6 <_printf_i+0x196>
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	f023 0320 	bic.w	r3, r3, #32
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	2310      	movs	r3, #16
 800cfa8:	e7b0      	b.n	800cf0c <_printf_i+0xfc>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	f043 0320 	orr.w	r3, r3, #32
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	2378      	movs	r3, #120	; 0x78
 800cfb4:	4828      	ldr	r0, [pc, #160]	; (800d058 <_printf_i+0x248>)
 800cfb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfba:	e7e3      	b.n	800cf84 <_printf_i+0x174>
 800cfbc:	0659      	lsls	r1, r3, #25
 800cfbe:	bf48      	it	mi
 800cfc0:	b2b6      	uxthmi	r6, r6
 800cfc2:	e7e6      	b.n	800cf92 <_printf_i+0x182>
 800cfc4:	4615      	mov	r5, r2
 800cfc6:	e7bb      	b.n	800cf40 <_printf_i+0x130>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	6826      	ldr	r6, [r4, #0]
 800cfcc:	6961      	ldr	r1, [r4, #20]
 800cfce:	1d18      	adds	r0, r3, #4
 800cfd0:	6028      	str	r0, [r5, #0]
 800cfd2:	0635      	lsls	r5, r6, #24
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	d501      	bpl.n	800cfdc <_printf_i+0x1cc>
 800cfd8:	6019      	str	r1, [r3, #0]
 800cfda:	e002      	b.n	800cfe2 <_printf_i+0x1d2>
 800cfdc:	0670      	lsls	r0, r6, #25
 800cfde:	d5fb      	bpl.n	800cfd8 <_printf_i+0x1c8>
 800cfe0:	8019      	strh	r1, [r3, #0]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	6123      	str	r3, [r4, #16]
 800cfe6:	4615      	mov	r5, r2
 800cfe8:	e7ba      	b.n	800cf60 <_printf_i+0x150>
 800cfea:	682b      	ldr	r3, [r5, #0]
 800cfec:	1d1a      	adds	r2, r3, #4
 800cfee:	602a      	str	r2, [r5, #0]
 800cff0:	681d      	ldr	r5, [r3, #0]
 800cff2:	6862      	ldr	r2, [r4, #4]
 800cff4:	2100      	movs	r1, #0
 800cff6:	4628      	mov	r0, r5
 800cff8:	f7f3 f91a 	bl	8000230 <memchr>
 800cffc:	b108      	cbz	r0, 800d002 <_printf_i+0x1f2>
 800cffe:	1b40      	subs	r0, r0, r5
 800d000:	6060      	str	r0, [r4, #4]
 800d002:	6863      	ldr	r3, [r4, #4]
 800d004:	6123      	str	r3, [r4, #16]
 800d006:	2300      	movs	r3, #0
 800d008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d00c:	e7a8      	b.n	800cf60 <_printf_i+0x150>
 800d00e:	6923      	ldr	r3, [r4, #16]
 800d010:	462a      	mov	r2, r5
 800d012:	4649      	mov	r1, r9
 800d014:	4640      	mov	r0, r8
 800d016:	47d0      	blx	sl
 800d018:	3001      	adds	r0, #1
 800d01a:	d0ab      	beq.n	800cf74 <_printf_i+0x164>
 800d01c:	6823      	ldr	r3, [r4, #0]
 800d01e:	079b      	lsls	r3, r3, #30
 800d020:	d413      	bmi.n	800d04a <_printf_i+0x23a>
 800d022:	68e0      	ldr	r0, [r4, #12]
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	4298      	cmp	r0, r3
 800d028:	bfb8      	it	lt
 800d02a:	4618      	movlt	r0, r3
 800d02c:	e7a4      	b.n	800cf78 <_printf_i+0x168>
 800d02e:	2301      	movs	r3, #1
 800d030:	4632      	mov	r2, r6
 800d032:	4649      	mov	r1, r9
 800d034:	4640      	mov	r0, r8
 800d036:	47d0      	blx	sl
 800d038:	3001      	adds	r0, #1
 800d03a:	d09b      	beq.n	800cf74 <_printf_i+0x164>
 800d03c:	3501      	adds	r5, #1
 800d03e:	68e3      	ldr	r3, [r4, #12]
 800d040:	9903      	ldr	r1, [sp, #12]
 800d042:	1a5b      	subs	r3, r3, r1
 800d044:	42ab      	cmp	r3, r5
 800d046:	dcf2      	bgt.n	800d02e <_printf_i+0x21e>
 800d048:	e7eb      	b.n	800d022 <_printf_i+0x212>
 800d04a:	2500      	movs	r5, #0
 800d04c:	f104 0619 	add.w	r6, r4, #25
 800d050:	e7f5      	b.n	800d03e <_printf_i+0x22e>
 800d052:	bf00      	nop
 800d054:	0801040e 	.word	0x0801040e
 800d058:	0801041f 	.word	0x0801041f

0800d05c <siprintf>:
 800d05c:	b40e      	push	{r1, r2, r3}
 800d05e:	b500      	push	{lr}
 800d060:	b09c      	sub	sp, #112	; 0x70
 800d062:	ab1d      	add	r3, sp, #116	; 0x74
 800d064:	9002      	str	r0, [sp, #8]
 800d066:	9006      	str	r0, [sp, #24]
 800d068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d06c:	4809      	ldr	r0, [pc, #36]	; (800d094 <siprintf+0x38>)
 800d06e:	9107      	str	r1, [sp, #28]
 800d070:	9104      	str	r1, [sp, #16]
 800d072:	4909      	ldr	r1, [pc, #36]	; (800d098 <siprintf+0x3c>)
 800d074:	f853 2b04 	ldr.w	r2, [r3], #4
 800d078:	9105      	str	r1, [sp, #20]
 800d07a:	6800      	ldr	r0, [r0, #0]
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	a902      	add	r1, sp, #8
 800d080:	f001 fb78 	bl	800e774 <_svfiprintf_r>
 800d084:	9b02      	ldr	r3, [sp, #8]
 800d086:	2200      	movs	r2, #0
 800d088:	701a      	strb	r2, [r3, #0]
 800d08a:	b01c      	add	sp, #112	; 0x70
 800d08c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d090:	b003      	add	sp, #12
 800d092:	4770      	bx	lr
 800d094:	2000002c 	.word	0x2000002c
 800d098:	ffff0208 	.word	0xffff0208

0800d09c <quorem>:
 800d09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	6903      	ldr	r3, [r0, #16]
 800d0a2:	690c      	ldr	r4, [r1, #16]
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	f2c0 8081 	blt.w	800d1ae <quorem+0x112>
 800d0ac:	3c01      	subs	r4, #1
 800d0ae:	f101 0814 	add.w	r8, r1, #20
 800d0b2:	f100 0514 	add.w	r5, r0, #20
 800d0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0ba:	9301      	str	r3, [sp, #4]
 800d0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d0cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0d4:	d331      	bcc.n	800d13a <quorem+0x9e>
 800d0d6:	f04f 0e00 	mov.w	lr, #0
 800d0da:	4640      	mov	r0, r8
 800d0dc:	46ac      	mov	ip, r5
 800d0de:	46f2      	mov	sl, lr
 800d0e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0e4:	b293      	uxth	r3, r2
 800d0e6:	fb06 e303 	mla	r3, r6, r3, lr
 800d0ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	ebaa 0303 	sub.w	r3, sl, r3
 800d0f4:	f8dc a000 	ldr.w	sl, [ip]
 800d0f8:	0c12      	lsrs	r2, r2, #16
 800d0fa:	fa13 f38a 	uxtah	r3, r3, sl
 800d0fe:	fb06 e202 	mla	r2, r6, r2, lr
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	9b00      	ldr	r3, [sp, #0]
 800d106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d10a:	b292      	uxth	r2, r2
 800d10c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d114:	f8bd 3000 	ldrh.w	r3, [sp]
 800d118:	4581      	cmp	r9, r0
 800d11a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d11e:	f84c 3b04 	str.w	r3, [ip], #4
 800d122:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d126:	d2db      	bcs.n	800d0e0 <quorem+0x44>
 800d128:	f855 300b 	ldr.w	r3, [r5, fp]
 800d12c:	b92b      	cbnz	r3, 800d13a <quorem+0x9e>
 800d12e:	9b01      	ldr	r3, [sp, #4]
 800d130:	3b04      	subs	r3, #4
 800d132:	429d      	cmp	r5, r3
 800d134:	461a      	mov	r2, r3
 800d136:	d32e      	bcc.n	800d196 <quorem+0xfa>
 800d138:	613c      	str	r4, [r7, #16]
 800d13a:	4638      	mov	r0, r7
 800d13c:	f001 f8c6 	bl	800e2cc <__mcmp>
 800d140:	2800      	cmp	r0, #0
 800d142:	db24      	blt.n	800d18e <quorem+0xf2>
 800d144:	3601      	adds	r6, #1
 800d146:	4628      	mov	r0, r5
 800d148:	f04f 0c00 	mov.w	ip, #0
 800d14c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d150:	f8d0 e000 	ldr.w	lr, [r0]
 800d154:	b293      	uxth	r3, r2
 800d156:	ebac 0303 	sub.w	r3, ip, r3
 800d15a:	0c12      	lsrs	r2, r2, #16
 800d15c:	fa13 f38e 	uxtah	r3, r3, lr
 800d160:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d168:	b29b      	uxth	r3, r3
 800d16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d16e:	45c1      	cmp	r9, r8
 800d170:	f840 3b04 	str.w	r3, [r0], #4
 800d174:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d178:	d2e8      	bcs.n	800d14c <quorem+0xb0>
 800d17a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d17e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d182:	b922      	cbnz	r2, 800d18e <quorem+0xf2>
 800d184:	3b04      	subs	r3, #4
 800d186:	429d      	cmp	r5, r3
 800d188:	461a      	mov	r2, r3
 800d18a:	d30a      	bcc.n	800d1a2 <quorem+0x106>
 800d18c:	613c      	str	r4, [r7, #16]
 800d18e:	4630      	mov	r0, r6
 800d190:	b003      	add	sp, #12
 800d192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	3b04      	subs	r3, #4
 800d19a:	2a00      	cmp	r2, #0
 800d19c:	d1cc      	bne.n	800d138 <quorem+0x9c>
 800d19e:	3c01      	subs	r4, #1
 800d1a0:	e7c7      	b.n	800d132 <quorem+0x96>
 800d1a2:	6812      	ldr	r2, [r2, #0]
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	d1f0      	bne.n	800d18c <quorem+0xf0>
 800d1aa:	3c01      	subs	r4, #1
 800d1ac:	e7eb      	b.n	800d186 <quorem+0xea>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e7ee      	b.n	800d190 <quorem+0xf4>
 800d1b2:	0000      	movs	r0, r0
 800d1b4:	0000      	movs	r0, r0
	...

0800d1b8 <_dtoa_r>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	ed2d 8b04 	vpush	{d8-d9}
 800d1c0:	ec57 6b10 	vmov	r6, r7, d0
 800d1c4:	b093      	sub	sp, #76	; 0x4c
 800d1c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1cc:	9106      	str	r1, [sp, #24]
 800d1ce:	ee10 aa10 	vmov	sl, s0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d1d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d1d8:	46bb      	mov	fp, r7
 800d1da:	b975      	cbnz	r5, 800d1fa <_dtoa_r+0x42>
 800d1dc:	2010      	movs	r0, #16
 800d1de:	f000 fddd 	bl	800dd9c <malloc>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	6260      	str	r0, [r4, #36]	; 0x24
 800d1e6:	b920      	cbnz	r0, 800d1f2 <_dtoa_r+0x3a>
 800d1e8:	4ba7      	ldr	r3, [pc, #668]	; (800d488 <_dtoa_r+0x2d0>)
 800d1ea:	21ea      	movs	r1, #234	; 0xea
 800d1ec:	48a7      	ldr	r0, [pc, #668]	; (800d48c <_dtoa_r+0x2d4>)
 800d1ee:	f001 fbd1 	bl	800e994 <__assert_func>
 800d1f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1f6:	6005      	str	r5, [r0, #0]
 800d1f8:	60c5      	str	r5, [r0, #12]
 800d1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1fc:	6819      	ldr	r1, [r3, #0]
 800d1fe:	b151      	cbz	r1, 800d216 <_dtoa_r+0x5e>
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	604a      	str	r2, [r1, #4]
 800d204:	2301      	movs	r3, #1
 800d206:	4093      	lsls	r3, r2
 800d208:	608b      	str	r3, [r1, #8]
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 fe1c 	bl	800de48 <_Bfree>
 800d210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	1e3b      	subs	r3, r7, #0
 800d218:	bfaa      	itet	ge
 800d21a:	2300      	movge	r3, #0
 800d21c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d220:	f8c8 3000 	strge.w	r3, [r8]
 800d224:	4b9a      	ldr	r3, [pc, #616]	; (800d490 <_dtoa_r+0x2d8>)
 800d226:	bfbc      	itt	lt
 800d228:	2201      	movlt	r2, #1
 800d22a:	f8c8 2000 	strlt.w	r2, [r8]
 800d22e:	ea33 030b 	bics.w	r3, r3, fp
 800d232:	d11b      	bne.n	800d26c <_dtoa_r+0xb4>
 800d234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d236:	f242 730f 	movw	r3, #9999	; 0x270f
 800d23a:	6013      	str	r3, [r2, #0]
 800d23c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d240:	4333      	orrs	r3, r6
 800d242:	f000 8592 	beq.w	800dd6a <_dtoa_r+0xbb2>
 800d246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d248:	b963      	cbnz	r3, 800d264 <_dtoa_r+0xac>
 800d24a:	4b92      	ldr	r3, [pc, #584]	; (800d494 <_dtoa_r+0x2dc>)
 800d24c:	e022      	b.n	800d294 <_dtoa_r+0xdc>
 800d24e:	4b92      	ldr	r3, [pc, #584]	; (800d498 <_dtoa_r+0x2e0>)
 800d250:	9301      	str	r3, [sp, #4]
 800d252:	3308      	adds	r3, #8
 800d254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	9801      	ldr	r0, [sp, #4]
 800d25a:	b013      	add	sp, #76	; 0x4c
 800d25c:	ecbd 8b04 	vpop	{d8-d9}
 800d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d264:	4b8b      	ldr	r3, [pc, #556]	; (800d494 <_dtoa_r+0x2dc>)
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	3303      	adds	r3, #3
 800d26a:	e7f3      	b.n	800d254 <_dtoa_r+0x9c>
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	4650      	mov	r0, sl
 800d272:	4659      	mov	r1, fp
 800d274:	f7f3 fc50 	bl	8000b18 <__aeabi_dcmpeq>
 800d278:	ec4b ab19 	vmov	d9, sl, fp
 800d27c:	4680      	mov	r8, r0
 800d27e:	b158      	cbz	r0, 800d298 <_dtoa_r+0xe0>
 800d280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d282:	2301      	movs	r3, #1
 800d284:	6013      	str	r3, [r2, #0]
 800d286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 856b 	beq.w	800dd64 <_dtoa_r+0xbac>
 800d28e:	4883      	ldr	r0, [pc, #524]	; (800d49c <_dtoa_r+0x2e4>)
 800d290:	6018      	str	r0, [r3, #0]
 800d292:	1e43      	subs	r3, r0, #1
 800d294:	9301      	str	r3, [sp, #4]
 800d296:	e7df      	b.n	800d258 <_dtoa_r+0xa0>
 800d298:	ec4b ab10 	vmov	d0, sl, fp
 800d29c:	aa10      	add	r2, sp, #64	; 0x40
 800d29e:	a911      	add	r1, sp, #68	; 0x44
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f001 f8b9 	bl	800e418 <__d2b>
 800d2a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d2aa:	ee08 0a10 	vmov	s16, r0
 800d2ae:	2d00      	cmp	r5, #0
 800d2b0:	f000 8084 	beq.w	800d3bc <_dtoa_r+0x204>
 800d2b4:	ee19 3a90 	vmov	r3, s19
 800d2b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d2c0:	4656      	mov	r6, sl
 800d2c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d2c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d2ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d2ce:	4b74      	ldr	r3, [pc, #464]	; (800d4a0 <_dtoa_r+0x2e8>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7f2 ffff 	bl	80002d8 <__aeabi_dsub>
 800d2da:	a365      	add	r3, pc, #404	; (adr r3, 800d470 <_dtoa_r+0x2b8>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	f7f3 f9b2 	bl	8000648 <__aeabi_dmul>
 800d2e4:	a364      	add	r3, pc, #400	; (adr r3, 800d478 <_dtoa_r+0x2c0>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f7f2 fff7 	bl	80002dc <__adddf3>
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	460f      	mov	r7, r1
 800d2f4:	f7f3 f93e 	bl	8000574 <__aeabi_i2d>
 800d2f8:	a361      	add	r3, pc, #388	; (adr r3, 800d480 <_dtoa_r+0x2c8>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f7f3 f9a3 	bl	8000648 <__aeabi_dmul>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4630      	mov	r0, r6
 800d308:	4639      	mov	r1, r7
 800d30a:	f7f2 ffe7 	bl	80002dc <__adddf3>
 800d30e:	4606      	mov	r6, r0
 800d310:	460f      	mov	r7, r1
 800d312:	f7f3 fc49 	bl	8000ba8 <__aeabi_d2iz>
 800d316:	2200      	movs	r2, #0
 800d318:	9000      	str	r0, [sp, #0]
 800d31a:	2300      	movs	r3, #0
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	f7f3 fc04 	bl	8000b2c <__aeabi_dcmplt>
 800d324:	b150      	cbz	r0, 800d33c <_dtoa_r+0x184>
 800d326:	9800      	ldr	r0, [sp, #0]
 800d328:	f7f3 f924 	bl	8000574 <__aeabi_i2d>
 800d32c:	4632      	mov	r2, r6
 800d32e:	463b      	mov	r3, r7
 800d330:	f7f3 fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 800d334:	b910      	cbnz	r0, 800d33c <_dtoa_r+0x184>
 800d336:	9b00      	ldr	r3, [sp, #0]
 800d338:	3b01      	subs	r3, #1
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	9b00      	ldr	r3, [sp, #0]
 800d33e:	2b16      	cmp	r3, #22
 800d340:	d85a      	bhi.n	800d3f8 <_dtoa_r+0x240>
 800d342:	9a00      	ldr	r2, [sp, #0]
 800d344:	4b57      	ldr	r3, [pc, #348]	; (800d4a4 <_dtoa_r+0x2ec>)
 800d346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34e:	ec51 0b19 	vmov	r0, r1, d9
 800d352:	f7f3 fbeb 	bl	8000b2c <__aeabi_dcmplt>
 800d356:	2800      	cmp	r0, #0
 800d358:	d050      	beq.n	800d3fc <_dtoa_r+0x244>
 800d35a:	9b00      	ldr	r3, [sp, #0]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	2300      	movs	r3, #0
 800d362:	930b      	str	r3, [sp, #44]	; 0x2c
 800d364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d366:	1b5d      	subs	r5, r3, r5
 800d368:	1e6b      	subs	r3, r5, #1
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	bf45      	ittet	mi
 800d36e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d372:	9304      	strmi	r3, [sp, #16]
 800d374:	2300      	movpl	r3, #0
 800d376:	2300      	movmi	r3, #0
 800d378:	bf4c      	ite	mi
 800d37a:	9305      	strmi	r3, [sp, #20]
 800d37c:	9304      	strpl	r3, [sp, #16]
 800d37e:	9b00      	ldr	r3, [sp, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	db3d      	blt.n	800d400 <_dtoa_r+0x248>
 800d384:	9b05      	ldr	r3, [sp, #20]
 800d386:	9a00      	ldr	r2, [sp, #0]
 800d388:	920a      	str	r2, [sp, #40]	; 0x28
 800d38a:	4413      	add	r3, r2
 800d38c:	9305      	str	r3, [sp, #20]
 800d38e:	2300      	movs	r3, #0
 800d390:	9307      	str	r3, [sp, #28]
 800d392:	9b06      	ldr	r3, [sp, #24]
 800d394:	2b09      	cmp	r3, #9
 800d396:	f200 8089 	bhi.w	800d4ac <_dtoa_r+0x2f4>
 800d39a:	2b05      	cmp	r3, #5
 800d39c:	bfc4      	itt	gt
 800d39e:	3b04      	subgt	r3, #4
 800d3a0:	9306      	strgt	r3, [sp, #24]
 800d3a2:	9b06      	ldr	r3, [sp, #24]
 800d3a4:	f1a3 0302 	sub.w	r3, r3, #2
 800d3a8:	bfcc      	ite	gt
 800d3aa:	2500      	movgt	r5, #0
 800d3ac:	2501      	movle	r5, #1
 800d3ae:	2b03      	cmp	r3, #3
 800d3b0:	f200 8087 	bhi.w	800d4c2 <_dtoa_r+0x30a>
 800d3b4:	e8df f003 	tbb	[pc, r3]
 800d3b8:	59383a2d 	.word	0x59383a2d
 800d3bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d3c0:	441d      	add	r5, r3
 800d3c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d3c6:	2b20      	cmp	r3, #32
 800d3c8:	bfc1      	itttt	gt
 800d3ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d3ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d3d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d3d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d3da:	bfda      	itte	le
 800d3dc:	f1c3 0320 	rsble	r3, r3, #32
 800d3e0:	fa06 f003 	lslle.w	r0, r6, r3
 800d3e4:	4318      	orrgt	r0, r3
 800d3e6:	f7f3 f8b5 	bl	8000554 <__aeabi_ui2d>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d3f2:	3d01      	subs	r5, #1
 800d3f4:	930e      	str	r3, [sp, #56]	; 0x38
 800d3f6:	e76a      	b.n	800d2ce <_dtoa_r+0x116>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e7b2      	b.n	800d362 <_dtoa_r+0x1aa>
 800d3fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3fe:	e7b1      	b.n	800d364 <_dtoa_r+0x1ac>
 800d400:	9b04      	ldr	r3, [sp, #16]
 800d402:	9a00      	ldr	r2, [sp, #0]
 800d404:	1a9b      	subs	r3, r3, r2
 800d406:	9304      	str	r3, [sp, #16]
 800d408:	4253      	negs	r3, r2
 800d40a:	9307      	str	r3, [sp, #28]
 800d40c:	2300      	movs	r3, #0
 800d40e:	930a      	str	r3, [sp, #40]	; 0x28
 800d410:	e7bf      	b.n	800d392 <_dtoa_r+0x1da>
 800d412:	2300      	movs	r3, #0
 800d414:	9308      	str	r3, [sp, #32]
 800d416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d418:	2b00      	cmp	r3, #0
 800d41a:	dc55      	bgt.n	800d4c8 <_dtoa_r+0x310>
 800d41c:	2301      	movs	r3, #1
 800d41e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d422:	461a      	mov	r2, r3
 800d424:	9209      	str	r2, [sp, #36]	; 0x24
 800d426:	e00c      	b.n	800d442 <_dtoa_r+0x28a>
 800d428:	2301      	movs	r3, #1
 800d42a:	e7f3      	b.n	800d414 <_dtoa_r+0x25c>
 800d42c:	2300      	movs	r3, #0
 800d42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d430:	9308      	str	r3, [sp, #32]
 800d432:	9b00      	ldr	r3, [sp, #0]
 800d434:	4413      	add	r3, r2
 800d436:	9302      	str	r3, [sp, #8]
 800d438:	3301      	adds	r3, #1
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	9303      	str	r3, [sp, #12]
 800d43e:	bfb8      	it	lt
 800d440:	2301      	movlt	r3, #1
 800d442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d444:	2200      	movs	r2, #0
 800d446:	6042      	str	r2, [r0, #4]
 800d448:	2204      	movs	r2, #4
 800d44a:	f102 0614 	add.w	r6, r2, #20
 800d44e:	429e      	cmp	r6, r3
 800d450:	6841      	ldr	r1, [r0, #4]
 800d452:	d93d      	bls.n	800d4d0 <_dtoa_r+0x318>
 800d454:	4620      	mov	r0, r4
 800d456:	f000 fcb7 	bl	800ddc8 <_Balloc>
 800d45a:	9001      	str	r0, [sp, #4]
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d13b      	bne.n	800d4d8 <_dtoa_r+0x320>
 800d460:	4b11      	ldr	r3, [pc, #68]	; (800d4a8 <_dtoa_r+0x2f0>)
 800d462:	4602      	mov	r2, r0
 800d464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d468:	e6c0      	b.n	800d1ec <_dtoa_r+0x34>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e7df      	b.n	800d42e <_dtoa_r+0x276>
 800d46e:	bf00      	nop
 800d470:	636f4361 	.word	0x636f4361
 800d474:	3fd287a7 	.word	0x3fd287a7
 800d478:	8b60c8b3 	.word	0x8b60c8b3
 800d47c:	3fc68a28 	.word	0x3fc68a28
 800d480:	509f79fb 	.word	0x509f79fb
 800d484:	3fd34413 	.word	0x3fd34413
 800d488:	0801043d 	.word	0x0801043d
 800d48c:	08010454 	.word	0x08010454
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	08010439 	.word	0x08010439
 800d498:	08010430 	.word	0x08010430
 800d49c:	0801040d 	.word	0x0801040d
 800d4a0:	3ff80000 	.word	0x3ff80000
 800d4a4:	08010548 	.word	0x08010548
 800d4a8:	080104af 	.word	0x080104af
 800d4ac:	2501      	movs	r5, #1
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	9306      	str	r3, [sp, #24]
 800d4b2:	9508      	str	r5, [sp, #32]
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2312      	movs	r3, #18
 800d4c0:	e7b0      	b.n	800d424 <_dtoa_r+0x26c>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	9308      	str	r3, [sp, #32]
 800d4c6:	e7f5      	b.n	800d4b4 <_dtoa_r+0x2fc>
 800d4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d4ce:	e7b8      	b.n	800d442 <_dtoa_r+0x28a>
 800d4d0:	3101      	adds	r1, #1
 800d4d2:	6041      	str	r1, [r0, #4]
 800d4d4:	0052      	lsls	r2, r2, #1
 800d4d6:	e7b8      	b.n	800d44a <_dtoa_r+0x292>
 800d4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4da:	9a01      	ldr	r2, [sp, #4]
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	2b0e      	cmp	r3, #14
 800d4e2:	f200 809d 	bhi.w	800d620 <_dtoa_r+0x468>
 800d4e6:	2d00      	cmp	r5, #0
 800d4e8:	f000 809a 	beq.w	800d620 <_dtoa_r+0x468>
 800d4ec:	9b00      	ldr	r3, [sp, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	dd32      	ble.n	800d558 <_dtoa_r+0x3a0>
 800d4f2:	4ab7      	ldr	r2, [pc, #732]	; (800d7d0 <_dtoa_r+0x618>)
 800d4f4:	f003 030f 	and.w	r3, r3, #15
 800d4f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d500:	9b00      	ldr	r3, [sp, #0]
 800d502:	05d8      	lsls	r0, r3, #23
 800d504:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d508:	d516      	bpl.n	800d538 <_dtoa_r+0x380>
 800d50a:	4bb2      	ldr	r3, [pc, #712]	; (800d7d4 <_dtoa_r+0x61c>)
 800d50c:	ec51 0b19 	vmov	r0, r1, d9
 800d510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d514:	f7f3 f9c2 	bl	800089c <__aeabi_ddiv>
 800d518:	f007 070f 	and.w	r7, r7, #15
 800d51c:	4682      	mov	sl, r0
 800d51e:	468b      	mov	fp, r1
 800d520:	2503      	movs	r5, #3
 800d522:	4eac      	ldr	r6, [pc, #688]	; (800d7d4 <_dtoa_r+0x61c>)
 800d524:	b957      	cbnz	r7, 800d53c <_dtoa_r+0x384>
 800d526:	4642      	mov	r2, r8
 800d528:	464b      	mov	r3, r9
 800d52a:	4650      	mov	r0, sl
 800d52c:	4659      	mov	r1, fp
 800d52e:	f7f3 f9b5 	bl	800089c <__aeabi_ddiv>
 800d532:	4682      	mov	sl, r0
 800d534:	468b      	mov	fp, r1
 800d536:	e028      	b.n	800d58a <_dtoa_r+0x3d2>
 800d538:	2502      	movs	r5, #2
 800d53a:	e7f2      	b.n	800d522 <_dtoa_r+0x36a>
 800d53c:	07f9      	lsls	r1, r7, #31
 800d53e:	d508      	bpl.n	800d552 <_dtoa_r+0x39a>
 800d540:	4640      	mov	r0, r8
 800d542:	4649      	mov	r1, r9
 800d544:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d548:	f7f3 f87e 	bl	8000648 <__aeabi_dmul>
 800d54c:	3501      	adds	r5, #1
 800d54e:	4680      	mov	r8, r0
 800d550:	4689      	mov	r9, r1
 800d552:	107f      	asrs	r7, r7, #1
 800d554:	3608      	adds	r6, #8
 800d556:	e7e5      	b.n	800d524 <_dtoa_r+0x36c>
 800d558:	f000 809b 	beq.w	800d692 <_dtoa_r+0x4da>
 800d55c:	9b00      	ldr	r3, [sp, #0]
 800d55e:	4f9d      	ldr	r7, [pc, #628]	; (800d7d4 <_dtoa_r+0x61c>)
 800d560:	425e      	negs	r6, r3
 800d562:	4b9b      	ldr	r3, [pc, #620]	; (800d7d0 <_dtoa_r+0x618>)
 800d564:	f006 020f 	and.w	r2, r6, #15
 800d568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	ec51 0b19 	vmov	r0, r1, d9
 800d574:	f7f3 f868 	bl	8000648 <__aeabi_dmul>
 800d578:	1136      	asrs	r6, r6, #4
 800d57a:	4682      	mov	sl, r0
 800d57c:	468b      	mov	fp, r1
 800d57e:	2300      	movs	r3, #0
 800d580:	2502      	movs	r5, #2
 800d582:	2e00      	cmp	r6, #0
 800d584:	d17a      	bne.n	800d67c <_dtoa_r+0x4c4>
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1d3      	bne.n	800d532 <_dtoa_r+0x37a>
 800d58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f000 8082 	beq.w	800d696 <_dtoa_r+0x4de>
 800d592:	4b91      	ldr	r3, [pc, #580]	; (800d7d8 <_dtoa_r+0x620>)
 800d594:	2200      	movs	r2, #0
 800d596:	4650      	mov	r0, sl
 800d598:	4659      	mov	r1, fp
 800d59a:	f7f3 fac7 	bl	8000b2c <__aeabi_dcmplt>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d079      	beq.n	800d696 <_dtoa_r+0x4de>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d076      	beq.n	800d696 <_dtoa_r+0x4de>
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	dd36      	ble.n	800d61c <_dtoa_r+0x464>
 800d5ae:	9b00      	ldr	r3, [sp, #0]
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	4659      	mov	r1, fp
 800d5b4:	1e5f      	subs	r7, r3, #1
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	4b88      	ldr	r3, [pc, #544]	; (800d7dc <_dtoa_r+0x624>)
 800d5ba:	f7f3 f845 	bl	8000648 <__aeabi_dmul>
 800d5be:	9e02      	ldr	r6, [sp, #8]
 800d5c0:	4682      	mov	sl, r0
 800d5c2:	468b      	mov	fp, r1
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f7f2 ffd4 	bl	8000574 <__aeabi_i2d>
 800d5cc:	4652      	mov	r2, sl
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	f7f3 f83a 	bl	8000648 <__aeabi_dmul>
 800d5d4:	4b82      	ldr	r3, [pc, #520]	; (800d7e0 <_dtoa_r+0x628>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f7f2 fe80 	bl	80002dc <__adddf3>
 800d5dc:	46d0      	mov	r8, sl
 800d5de:	46d9      	mov	r9, fp
 800d5e0:	4682      	mov	sl, r0
 800d5e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d5e6:	2e00      	cmp	r6, #0
 800d5e8:	d158      	bne.n	800d69c <_dtoa_r+0x4e4>
 800d5ea:	4b7e      	ldr	r3, [pc, #504]	; (800d7e4 <_dtoa_r+0x62c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	f7f2 fe71 	bl	80002d8 <__aeabi_dsub>
 800d5f6:	4652      	mov	r2, sl
 800d5f8:	465b      	mov	r3, fp
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	4689      	mov	r9, r1
 800d5fe:	f7f3 fab3 	bl	8000b68 <__aeabi_dcmpgt>
 800d602:	2800      	cmp	r0, #0
 800d604:	f040 8295 	bne.w	800db32 <_dtoa_r+0x97a>
 800d608:	4652      	mov	r2, sl
 800d60a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d60e:	4640      	mov	r0, r8
 800d610:	4649      	mov	r1, r9
 800d612:	f7f3 fa8b 	bl	8000b2c <__aeabi_dcmplt>
 800d616:	2800      	cmp	r0, #0
 800d618:	f040 8289 	bne.w	800db2e <_dtoa_r+0x976>
 800d61c:	ec5b ab19 	vmov	sl, fp, d9
 800d620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d622:	2b00      	cmp	r3, #0
 800d624:	f2c0 8148 	blt.w	800d8b8 <_dtoa_r+0x700>
 800d628:	9a00      	ldr	r2, [sp, #0]
 800d62a:	2a0e      	cmp	r2, #14
 800d62c:	f300 8144 	bgt.w	800d8b8 <_dtoa_r+0x700>
 800d630:	4b67      	ldr	r3, [pc, #412]	; (800d7d0 <_dtoa_r+0x618>)
 800d632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f280 80d5 	bge.w	800d7ec <_dtoa_r+0x634>
 800d642:	9b03      	ldr	r3, [sp, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	f300 80d1 	bgt.w	800d7ec <_dtoa_r+0x634>
 800d64a:	f040 826f 	bne.w	800db2c <_dtoa_r+0x974>
 800d64e:	4b65      	ldr	r3, [pc, #404]	; (800d7e4 <_dtoa_r+0x62c>)
 800d650:	2200      	movs	r2, #0
 800d652:	4640      	mov	r0, r8
 800d654:	4649      	mov	r1, r9
 800d656:	f7f2 fff7 	bl	8000648 <__aeabi_dmul>
 800d65a:	4652      	mov	r2, sl
 800d65c:	465b      	mov	r3, fp
 800d65e:	f7f3 fa79 	bl	8000b54 <__aeabi_dcmpge>
 800d662:	9e03      	ldr	r6, [sp, #12]
 800d664:	4637      	mov	r7, r6
 800d666:	2800      	cmp	r0, #0
 800d668:	f040 8245 	bne.w	800daf6 <_dtoa_r+0x93e>
 800d66c:	9d01      	ldr	r5, [sp, #4]
 800d66e:	2331      	movs	r3, #49	; 0x31
 800d670:	f805 3b01 	strb.w	r3, [r5], #1
 800d674:	9b00      	ldr	r3, [sp, #0]
 800d676:	3301      	adds	r3, #1
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	e240      	b.n	800dafe <_dtoa_r+0x946>
 800d67c:	07f2      	lsls	r2, r6, #31
 800d67e:	d505      	bpl.n	800d68c <_dtoa_r+0x4d4>
 800d680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d684:	f7f2 ffe0 	bl	8000648 <__aeabi_dmul>
 800d688:	3501      	adds	r5, #1
 800d68a:	2301      	movs	r3, #1
 800d68c:	1076      	asrs	r6, r6, #1
 800d68e:	3708      	adds	r7, #8
 800d690:	e777      	b.n	800d582 <_dtoa_r+0x3ca>
 800d692:	2502      	movs	r5, #2
 800d694:	e779      	b.n	800d58a <_dtoa_r+0x3d2>
 800d696:	9f00      	ldr	r7, [sp, #0]
 800d698:	9e03      	ldr	r6, [sp, #12]
 800d69a:	e794      	b.n	800d5c6 <_dtoa_r+0x40e>
 800d69c:	9901      	ldr	r1, [sp, #4]
 800d69e:	4b4c      	ldr	r3, [pc, #304]	; (800d7d0 <_dtoa_r+0x618>)
 800d6a0:	4431      	add	r1, r6
 800d6a2:	910d      	str	r1, [sp, #52]	; 0x34
 800d6a4:	9908      	ldr	r1, [sp, #32]
 800d6a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d6aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	d043      	beq.n	800d73a <_dtoa_r+0x582>
 800d6b2:	494d      	ldr	r1, [pc, #308]	; (800d7e8 <_dtoa_r+0x630>)
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	f7f3 f8f1 	bl	800089c <__aeabi_ddiv>
 800d6ba:	4652      	mov	r2, sl
 800d6bc:	465b      	mov	r3, fp
 800d6be:	f7f2 fe0b 	bl	80002d8 <__aeabi_dsub>
 800d6c2:	9d01      	ldr	r5, [sp, #4]
 800d6c4:	4682      	mov	sl, r0
 800d6c6:	468b      	mov	fp, r1
 800d6c8:	4649      	mov	r1, r9
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	f7f3 fa6c 	bl	8000ba8 <__aeabi_d2iz>
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	f7f2 ff4f 	bl	8000574 <__aeabi_i2d>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4640      	mov	r0, r8
 800d6dc:	4649      	mov	r1, r9
 800d6de:	f7f2 fdfb 	bl	80002d8 <__aeabi_dsub>
 800d6e2:	3630      	adds	r6, #48	; 0x30
 800d6e4:	f805 6b01 	strb.w	r6, [r5], #1
 800d6e8:	4652      	mov	r2, sl
 800d6ea:	465b      	mov	r3, fp
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	4689      	mov	r9, r1
 800d6f0:	f7f3 fa1c 	bl	8000b2c <__aeabi_dcmplt>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d163      	bne.n	800d7c0 <_dtoa_r+0x608>
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	464b      	mov	r3, r9
 800d6fc:	4936      	ldr	r1, [pc, #216]	; (800d7d8 <_dtoa_r+0x620>)
 800d6fe:	2000      	movs	r0, #0
 800d700:	f7f2 fdea 	bl	80002d8 <__aeabi_dsub>
 800d704:	4652      	mov	r2, sl
 800d706:	465b      	mov	r3, fp
 800d708:	f7f3 fa10 	bl	8000b2c <__aeabi_dcmplt>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	f040 80b5 	bne.w	800d87c <_dtoa_r+0x6c4>
 800d712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d714:	429d      	cmp	r5, r3
 800d716:	d081      	beq.n	800d61c <_dtoa_r+0x464>
 800d718:	4b30      	ldr	r3, [pc, #192]	; (800d7dc <_dtoa_r+0x624>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	4650      	mov	r0, sl
 800d71e:	4659      	mov	r1, fp
 800d720:	f7f2 ff92 	bl	8000648 <__aeabi_dmul>
 800d724:	4b2d      	ldr	r3, [pc, #180]	; (800d7dc <_dtoa_r+0x624>)
 800d726:	4682      	mov	sl, r0
 800d728:	468b      	mov	fp, r1
 800d72a:	4640      	mov	r0, r8
 800d72c:	4649      	mov	r1, r9
 800d72e:	2200      	movs	r2, #0
 800d730:	f7f2 ff8a 	bl	8000648 <__aeabi_dmul>
 800d734:	4680      	mov	r8, r0
 800d736:	4689      	mov	r9, r1
 800d738:	e7c6      	b.n	800d6c8 <_dtoa_r+0x510>
 800d73a:	4650      	mov	r0, sl
 800d73c:	4659      	mov	r1, fp
 800d73e:	f7f2 ff83 	bl	8000648 <__aeabi_dmul>
 800d742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d744:	9d01      	ldr	r5, [sp, #4]
 800d746:	930f      	str	r3, [sp, #60]	; 0x3c
 800d748:	4682      	mov	sl, r0
 800d74a:	468b      	mov	fp, r1
 800d74c:	4649      	mov	r1, r9
 800d74e:	4640      	mov	r0, r8
 800d750:	f7f3 fa2a 	bl	8000ba8 <__aeabi_d2iz>
 800d754:	4606      	mov	r6, r0
 800d756:	f7f2 ff0d 	bl	8000574 <__aeabi_i2d>
 800d75a:	3630      	adds	r6, #48	; 0x30
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4640      	mov	r0, r8
 800d762:	4649      	mov	r1, r9
 800d764:	f7f2 fdb8 	bl	80002d8 <__aeabi_dsub>
 800d768:	f805 6b01 	strb.w	r6, [r5], #1
 800d76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d76e:	429d      	cmp	r5, r3
 800d770:	4680      	mov	r8, r0
 800d772:	4689      	mov	r9, r1
 800d774:	f04f 0200 	mov.w	r2, #0
 800d778:	d124      	bne.n	800d7c4 <_dtoa_r+0x60c>
 800d77a:	4b1b      	ldr	r3, [pc, #108]	; (800d7e8 <_dtoa_r+0x630>)
 800d77c:	4650      	mov	r0, sl
 800d77e:	4659      	mov	r1, fp
 800d780:	f7f2 fdac 	bl	80002dc <__adddf3>
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	4640      	mov	r0, r8
 800d78a:	4649      	mov	r1, r9
 800d78c:	f7f3 f9ec 	bl	8000b68 <__aeabi_dcmpgt>
 800d790:	2800      	cmp	r0, #0
 800d792:	d173      	bne.n	800d87c <_dtoa_r+0x6c4>
 800d794:	4652      	mov	r2, sl
 800d796:	465b      	mov	r3, fp
 800d798:	4913      	ldr	r1, [pc, #76]	; (800d7e8 <_dtoa_r+0x630>)
 800d79a:	2000      	movs	r0, #0
 800d79c:	f7f2 fd9c 	bl	80002d8 <__aeabi_dsub>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	4649      	mov	r1, r9
 800d7a8:	f7f3 f9c0 	bl	8000b2c <__aeabi_dcmplt>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	f43f af35 	beq.w	800d61c <_dtoa_r+0x464>
 800d7b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d7b4:	1e6b      	subs	r3, r5, #1
 800d7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7bc:	2b30      	cmp	r3, #48	; 0x30
 800d7be:	d0f8      	beq.n	800d7b2 <_dtoa_r+0x5fa>
 800d7c0:	9700      	str	r7, [sp, #0]
 800d7c2:	e049      	b.n	800d858 <_dtoa_r+0x6a0>
 800d7c4:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <_dtoa_r+0x624>)
 800d7c6:	f7f2 ff3f 	bl	8000648 <__aeabi_dmul>
 800d7ca:	4680      	mov	r8, r0
 800d7cc:	4689      	mov	r9, r1
 800d7ce:	e7bd      	b.n	800d74c <_dtoa_r+0x594>
 800d7d0:	08010548 	.word	0x08010548
 800d7d4:	08010520 	.word	0x08010520
 800d7d8:	3ff00000 	.word	0x3ff00000
 800d7dc:	40240000 	.word	0x40240000
 800d7e0:	401c0000 	.word	0x401c0000
 800d7e4:	40140000 	.word	0x40140000
 800d7e8:	3fe00000 	.word	0x3fe00000
 800d7ec:	9d01      	ldr	r5, [sp, #4]
 800d7ee:	4656      	mov	r6, sl
 800d7f0:	465f      	mov	r7, fp
 800d7f2:	4642      	mov	r2, r8
 800d7f4:	464b      	mov	r3, r9
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	f7f3 f84f 	bl	800089c <__aeabi_ddiv>
 800d7fe:	f7f3 f9d3 	bl	8000ba8 <__aeabi_d2iz>
 800d802:	4682      	mov	sl, r0
 800d804:	f7f2 feb6 	bl	8000574 <__aeabi_i2d>
 800d808:	4642      	mov	r2, r8
 800d80a:	464b      	mov	r3, r9
 800d80c:	f7f2 ff1c 	bl	8000648 <__aeabi_dmul>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	4630      	mov	r0, r6
 800d816:	4639      	mov	r1, r7
 800d818:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d81c:	f7f2 fd5c 	bl	80002d8 <__aeabi_dsub>
 800d820:	f805 6b01 	strb.w	r6, [r5], #1
 800d824:	9e01      	ldr	r6, [sp, #4]
 800d826:	9f03      	ldr	r7, [sp, #12]
 800d828:	1bae      	subs	r6, r5, r6
 800d82a:	42b7      	cmp	r7, r6
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	d135      	bne.n	800d89e <_dtoa_r+0x6e6>
 800d832:	f7f2 fd53 	bl	80002dc <__adddf3>
 800d836:	4642      	mov	r2, r8
 800d838:	464b      	mov	r3, r9
 800d83a:	4606      	mov	r6, r0
 800d83c:	460f      	mov	r7, r1
 800d83e:	f7f3 f993 	bl	8000b68 <__aeabi_dcmpgt>
 800d842:	b9d0      	cbnz	r0, 800d87a <_dtoa_r+0x6c2>
 800d844:	4642      	mov	r2, r8
 800d846:	464b      	mov	r3, r9
 800d848:	4630      	mov	r0, r6
 800d84a:	4639      	mov	r1, r7
 800d84c:	f7f3 f964 	bl	8000b18 <__aeabi_dcmpeq>
 800d850:	b110      	cbz	r0, 800d858 <_dtoa_r+0x6a0>
 800d852:	f01a 0f01 	tst.w	sl, #1
 800d856:	d110      	bne.n	800d87a <_dtoa_r+0x6c2>
 800d858:	4620      	mov	r0, r4
 800d85a:	ee18 1a10 	vmov	r1, s16
 800d85e:	f000 faf3 	bl	800de48 <_Bfree>
 800d862:	2300      	movs	r3, #0
 800d864:	9800      	ldr	r0, [sp, #0]
 800d866:	702b      	strb	r3, [r5, #0]
 800d868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d86a:	3001      	adds	r0, #1
 800d86c:	6018      	str	r0, [r3, #0]
 800d86e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d870:	2b00      	cmp	r3, #0
 800d872:	f43f acf1 	beq.w	800d258 <_dtoa_r+0xa0>
 800d876:	601d      	str	r5, [r3, #0]
 800d878:	e4ee      	b.n	800d258 <_dtoa_r+0xa0>
 800d87a:	9f00      	ldr	r7, [sp, #0]
 800d87c:	462b      	mov	r3, r5
 800d87e:	461d      	mov	r5, r3
 800d880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d884:	2a39      	cmp	r2, #57	; 0x39
 800d886:	d106      	bne.n	800d896 <_dtoa_r+0x6de>
 800d888:	9a01      	ldr	r2, [sp, #4]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d1f7      	bne.n	800d87e <_dtoa_r+0x6c6>
 800d88e:	9901      	ldr	r1, [sp, #4]
 800d890:	2230      	movs	r2, #48	; 0x30
 800d892:	3701      	adds	r7, #1
 800d894:	700a      	strb	r2, [r1, #0]
 800d896:	781a      	ldrb	r2, [r3, #0]
 800d898:	3201      	adds	r2, #1
 800d89a:	701a      	strb	r2, [r3, #0]
 800d89c:	e790      	b.n	800d7c0 <_dtoa_r+0x608>
 800d89e:	4ba6      	ldr	r3, [pc, #664]	; (800db38 <_dtoa_r+0x980>)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f7f2 fed1 	bl	8000648 <__aeabi_dmul>
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	460f      	mov	r7, r1
 800d8ae:	f7f3 f933 	bl	8000b18 <__aeabi_dcmpeq>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d09d      	beq.n	800d7f2 <_dtoa_r+0x63a>
 800d8b6:	e7cf      	b.n	800d858 <_dtoa_r+0x6a0>
 800d8b8:	9a08      	ldr	r2, [sp, #32]
 800d8ba:	2a00      	cmp	r2, #0
 800d8bc:	f000 80d7 	beq.w	800da6e <_dtoa_r+0x8b6>
 800d8c0:	9a06      	ldr	r2, [sp, #24]
 800d8c2:	2a01      	cmp	r2, #1
 800d8c4:	f300 80ba 	bgt.w	800da3c <_dtoa_r+0x884>
 800d8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8ca:	2a00      	cmp	r2, #0
 800d8cc:	f000 80b2 	beq.w	800da34 <_dtoa_r+0x87c>
 800d8d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8d4:	9e07      	ldr	r6, [sp, #28]
 800d8d6:	9d04      	ldr	r5, [sp, #16]
 800d8d8:	9a04      	ldr	r2, [sp, #16]
 800d8da:	441a      	add	r2, r3
 800d8dc:	9204      	str	r2, [sp, #16]
 800d8de:	9a05      	ldr	r2, [sp, #20]
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	441a      	add	r2, r3
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	9205      	str	r2, [sp, #20]
 800d8e8:	f000 fb66 	bl	800dfb8 <__i2b>
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	dd0c      	ble.n	800d90c <_dtoa_r+0x754>
 800d8f2:	9b05      	ldr	r3, [sp, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	dd09      	ble.n	800d90c <_dtoa_r+0x754>
 800d8f8:	42ab      	cmp	r3, r5
 800d8fa:	9a04      	ldr	r2, [sp, #16]
 800d8fc:	bfa8      	it	ge
 800d8fe:	462b      	movge	r3, r5
 800d900:	1ad2      	subs	r2, r2, r3
 800d902:	9204      	str	r2, [sp, #16]
 800d904:	9a05      	ldr	r2, [sp, #20]
 800d906:	1aed      	subs	r5, r5, r3
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	9305      	str	r3, [sp, #20]
 800d90c:	9b07      	ldr	r3, [sp, #28]
 800d90e:	b31b      	cbz	r3, 800d958 <_dtoa_r+0x7a0>
 800d910:	9b08      	ldr	r3, [sp, #32]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 80af 	beq.w	800da76 <_dtoa_r+0x8be>
 800d918:	2e00      	cmp	r6, #0
 800d91a:	dd13      	ble.n	800d944 <_dtoa_r+0x78c>
 800d91c:	4639      	mov	r1, r7
 800d91e:	4632      	mov	r2, r6
 800d920:	4620      	mov	r0, r4
 800d922:	f000 fc09 	bl	800e138 <__pow5mult>
 800d926:	ee18 2a10 	vmov	r2, s16
 800d92a:	4601      	mov	r1, r0
 800d92c:	4607      	mov	r7, r0
 800d92e:	4620      	mov	r0, r4
 800d930:	f000 fb58 	bl	800dfe4 <__multiply>
 800d934:	ee18 1a10 	vmov	r1, s16
 800d938:	4680      	mov	r8, r0
 800d93a:	4620      	mov	r0, r4
 800d93c:	f000 fa84 	bl	800de48 <_Bfree>
 800d940:	ee08 8a10 	vmov	s16, r8
 800d944:	9b07      	ldr	r3, [sp, #28]
 800d946:	1b9a      	subs	r2, r3, r6
 800d948:	d006      	beq.n	800d958 <_dtoa_r+0x7a0>
 800d94a:	ee18 1a10 	vmov	r1, s16
 800d94e:	4620      	mov	r0, r4
 800d950:	f000 fbf2 	bl	800e138 <__pow5mult>
 800d954:	ee08 0a10 	vmov	s16, r0
 800d958:	2101      	movs	r1, #1
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 fb2c 	bl	800dfb8 <__i2b>
 800d960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d962:	2b00      	cmp	r3, #0
 800d964:	4606      	mov	r6, r0
 800d966:	f340 8088 	ble.w	800da7a <_dtoa_r+0x8c2>
 800d96a:	461a      	mov	r2, r3
 800d96c:	4601      	mov	r1, r0
 800d96e:	4620      	mov	r0, r4
 800d970:	f000 fbe2 	bl	800e138 <__pow5mult>
 800d974:	9b06      	ldr	r3, [sp, #24]
 800d976:	2b01      	cmp	r3, #1
 800d978:	4606      	mov	r6, r0
 800d97a:	f340 8081 	ble.w	800da80 <_dtoa_r+0x8c8>
 800d97e:	f04f 0800 	mov.w	r8, #0
 800d982:	6933      	ldr	r3, [r6, #16]
 800d984:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d988:	6918      	ldr	r0, [r3, #16]
 800d98a:	f000 fac5 	bl	800df18 <__hi0bits>
 800d98e:	f1c0 0020 	rsb	r0, r0, #32
 800d992:	9b05      	ldr	r3, [sp, #20]
 800d994:	4418      	add	r0, r3
 800d996:	f010 001f 	ands.w	r0, r0, #31
 800d99a:	f000 8092 	beq.w	800dac2 <_dtoa_r+0x90a>
 800d99e:	f1c0 0320 	rsb	r3, r0, #32
 800d9a2:	2b04      	cmp	r3, #4
 800d9a4:	f340 808a 	ble.w	800dabc <_dtoa_r+0x904>
 800d9a8:	f1c0 001c 	rsb	r0, r0, #28
 800d9ac:	9b04      	ldr	r3, [sp, #16]
 800d9ae:	4403      	add	r3, r0
 800d9b0:	9304      	str	r3, [sp, #16]
 800d9b2:	9b05      	ldr	r3, [sp, #20]
 800d9b4:	4403      	add	r3, r0
 800d9b6:	4405      	add	r5, r0
 800d9b8:	9305      	str	r3, [sp, #20]
 800d9ba:	9b04      	ldr	r3, [sp, #16]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dd07      	ble.n	800d9d0 <_dtoa_r+0x818>
 800d9c0:	ee18 1a10 	vmov	r1, s16
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 fc10 	bl	800e1ec <__lshift>
 800d9cc:	ee08 0a10 	vmov	s16, r0
 800d9d0:	9b05      	ldr	r3, [sp, #20]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	dd05      	ble.n	800d9e2 <_dtoa_r+0x82a>
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	461a      	mov	r2, r3
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fc06 	bl	800e1ec <__lshift>
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d06e      	beq.n	800dac6 <_dtoa_r+0x90e>
 800d9e8:	ee18 0a10 	vmov	r0, s16
 800d9ec:	4631      	mov	r1, r6
 800d9ee:	f000 fc6d 	bl	800e2cc <__mcmp>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	da67      	bge.n	800dac6 <_dtoa_r+0x90e>
 800d9f6:	9b00      	ldr	r3, [sp, #0]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	ee18 1a10 	vmov	r1, s16
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	220a      	movs	r2, #10
 800da02:	2300      	movs	r3, #0
 800da04:	4620      	mov	r0, r4
 800da06:	f000 fa41 	bl	800de8c <__multadd>
 800da0a:	9b08      	ldr	r3, [sp, #32]
 800da0c:	ee08 0a10 	vmov	s16, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 81b1 	beq.w	800dd78 <_dtoa_r+0xbc0>
 800da16:	2300      	movs	r3, #0
 800da18:	4639      	mov	r1, r7
 800da1a:	220a      	movs	r2, #10
 800da1c:	4620      	mov	r0, r4
 800da1e:	f000 fa35 	bl	800de8c <__multadd>
 800da22:	9b02      	ldr	r3, [sp, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	4607      	mov	r7, r0
 800da28:	f300 808e 	bgt.w	800db48 <_dtoa_r+0x990>
 800da2c:	9b06      	ldr	r3, [sp, #24]
 800da2e:	2b02      	cmp	r3, #2
 800da30:	dc51      	bgt.n	800dad6 <_dtoa_r+0x91e>
 800da32:	e089      	b.n	800db48 <_dtoa_r+0x990>
 800da34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da3a:	e74b      	b.n	800d8d4 <_dtoa_r+0x71c>
 800da3c:	9b03      	ldr	r3, [sp, #12]
 800da3e:	1e5e      	subs	r6, r3, #1
 800da40:	9b07      	ldr	r3, [sp, #28]
 800da42:	42b3      	cmp	r3, r6
 800da44:	bfbf      	itttt	lt
 800da46:	9b07      	ldrlt	r3, [sp, #28]
 800da48:	9607      	strlt	r6, [sp, #28]
 800da4a:	1af2      	sublt	r2, r6, r3
 800da4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800da4e:	bfb6      	itet	lt
 800da50:	189b      	addlt	r3, r3, r2
 800da52:	1b9e      	subge	r6, r3, r6
 800da54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800da56:	9b03      	ldr	r3, [sp, #12]
 800da58:	bfb8      	it	lt
 800da5a:	2600      	movlt	r6, #0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bfb7      	itett	lt
 800da60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800da64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800da68:	1a9d      	sublt	r5, r3, r2
 800da6a:	2300      	movlt	r3, #0
 800da6c:	e734      	b.n	800d8d8 <_dtoa_r+0x720>
 800da6e:	9e07      	ldr	r6, [sp, #28]
 800da70:	9d04      	ldr	r5, [sp, #16]
 800da72:	9f08      	ldr	r7, [sp, #32]
 800da74:	e73b      	b.n	800d8ee <_dtoa_r+0x736>
 800da76:	9a07      	ldr	r2, [sp, #28]
 800da78:	e767      	b.n	800d94a <_dtoa_r+0x792>
 800da7a:	9b06      	ldr	r3, [sp, #24]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	dc18      	bgt.n	800dab2 <_dtoa_r+0x8fa>
 800da80:	f1ba 0f00 	cmp.w	sl, #0
 800da84:	d115      	bne.n	800dab2 <_dtoa_r+0x8fa>
 800da86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da8a:	b993      	cbnz	r3, 800dab2 <_dtoa_r+0x8fa>
 800da8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da90:	0d1b      	lsrs	r3, r3, #20
 800da92:	051b      	lsls	r3, r3, #20
 800da94:	b183      	cbz	r3, 800dab8 <_dtoa_r+0x900>
 800da96:	9b04      	ldr	r3, [sp, #16]
 800da98:	3301      	adds	r3, #1
 800da9a:	9304      	str	r3, [sp, #16]
 800da9c:	9b05      	ldr	r3, [sp, #20]
 800da9e:	3301      	adds	r3, #1
 800daa0:	9305      	str	r3, [sp, #20]
 800daa2:	f04f 0801 	mov.w	r8, #1
 800daa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f47f af6a 	bne.w	800d982 <_dtoa_r+0x7ca>
 800daae:	2001      	movs	r0, #1
 800dab0:	e76f      	b.n	800d992 <_dtoa_r+0x7da>
 800dab2:	f04f 0800 	mov.w	r8, #0
 800dab6:	e7f6      	b.n	800daa6 <_dtoa_r+0x8ee>
 800dab8:	4698      	mov	r8, r3
 800daba:	e7f4      	b.n	800daa6 <_dtoa_r+0x8ee>
 800dabc:	f43f af7d 	beq.w	800d9ba <_dtoa_r+0x802>
 800dac0:	4618      	mov	r0, r3
 800dac2:	301c      	adds	r0, #28
 800dac4:	e772      	b.n	800d9ac <_dtoa_r+0x7f4>
 800dac6:	9b03      	ldr	r3, [sp, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dc37      	bgt.n	800db3c <_dtoa_r+0x984>
 800dacc:	9b06      	ldr	r3, [sp, #24]
 800dace:	2b02      	cmp	r3, #2
 800dad0:	dd34      	ble.n	800db3c <_dtoa_r+0x984>
 800dad2:	9b03      	ldr	r3, [sp, #12]
 800dad4:	9302      	str	r3, [sp, #8]
 800dad6:	9b02      	ldr	r3, [sp, #8]
 800dad8:	b96b      	cbnz	r3, 800daf6 <_dtoa_r+0x93e>
 800dada:	4631      	mov	r1, r6
 800dadc:	2205      	movs	r2, #5
 800dade:	4620      	mov	r0, r4
 800dae0:	f000 f9d4 	bl	800de8c <__multadd>
 800dae4:	4601      	mov	r1, r0
 800dae6:	4606      	mov	r6, r0
 800dae8:	ee18 0a10 	vmov	r0, s16
 800daec:	f000 fbee 	bl	800e2cc <__mcmp>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	f73f adbb 	bgt.w	800d66c <_dtoa_r+0x4b4>
 800daf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf8:	9d01      	ldr	r5, [sp, #4]
 800dafa:	43db      	mvns	r3, r3
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	f04f 0800 	mov.w	r8, #0
 800db02:	4631      	mov	r1, r6
 800db04:	4620      	mov	r0, r4
 800db06:	f000 f99f 	bl	800de48 <_Bfree>
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	f43f aea4 	beq.w	800d858 <_dtoa_r+0x6a0>
 800db10:	f1b8 0f00 	cmp.w	r8, #0
 800db14:	d005      	beq.n	800db22 <_dtoa_r+0x96a>
 800db16:	45b8      	cmp	r8, r7
 800db18:	d003      	beq.n	800db22 <_dtoa_r+0x96a>
 800db1a:	4641      	mov	r1, r8
 800db1c:	4620      	mov	r0, r4
 800db1e:	f000 f993 	bl	800de48 <_Bfree>
 800db22:	4639      	mov	r1, r7
 800db24:	4620      	mov	r0, r4
 800db26:	f000 f98f 	bl	800de48 <_Bfree>
 800db2a:	e695      	b.n	800d858 <_dtoa_r+0x6a0>
 800db2c:	2600      	movs	r6, #0
 800db2e:	4637      	mov	r7, r6
 800db30:	e7e1      	b.n	800daf6 <_dtoa_r+0x93e>
 800db32:	9700      	str	r7, [sp, #0]
 800db34:	4637      	mov	r7, r6
 800db36:	e599      	b.n	800d66c <_dtoa_r+0x4b4>
 800db38:	40240000 	.word	0x40240000
 800db3c:	9b08      	ldr	r3, [sp, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 80ca 	beq.w	800dcd8 <_dtoa_r+0xb20>
 800db44:	9b03      	ldr	r3, [sp, #12]
 800db46:	9302      	str	r3, [sp, #8]
 800db48:	2d00      	cmp	r5, #0
 800db4a:	dd05      	ble.n	800db58 <_dtoa_r+0x9a0>
 800db4c:	4639      	mov	r1, r7
 800db4e:	462a      	mov	r2, r5
 800db50:	4620      	mov	r0, r4
 800db52:	f000 fb4b 	bl	800e1ec <__lshift>
 800db56:	4607      	mov	r7, r0
 800db58:	f1b8 0f00 	cmp.w	r8, #0
 800db5c:	d05b      	beq.n	800dc16 <_dtoa_r+0xa5e>
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	4620      	mov	r0, r4
 800db62:	f000 f931 	bl	800ddc8 <_Balloc>
 800db66:	4605      	mov	r5, r0
 800db68:	b928      	cbnz	r0, 800db76 <_dtoa_r+0x9be>
 800db6a:	4b87      	ldr	r3, [pc, #540]	; (800dd88 <_dtoa_r+0xbd0>)
 800db6c:	4602      	mov	r2, r0
 800db6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db72:	f7ff bb3b 	b.w	800d1ec <_dtoa_r+0x34>
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	3202      	adds	r2, #2
 800db7a:	0092      	lsls	r2, r2, #2
 800db7c:	f107 010c 	add.w	r1, r7, #12
 800db80:	300c      	adds	r0, #12
 800db82:	f000 f913 	bl	800ddac <memcpy>
 800db86:	2201      	movs	r2, #1
 800db88:	4629      	mov	r1, r5
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 fb2e 	bl	800e1ec <__lshift>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	f103 0901 	add.w	r9, r3, #1
 800db96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800db9a:	4413      	add	r3, r2
 800db9c:	9305      	str	r3, [sp, #20]
 800db9e:	f00a 0301 	and.w	r3, sl, #1
 800dba2:	46b8      	mov	r8, r7
 800dba4:	9304      	str	r3, [sp, #16]
 800dba6:	4607      	mov	r7, r0
 800dba8:	4631      	mov	r1, r6
 800dbaa:	ee18 0a10 	vmov	r0, s16
 800dbae:	f7ff fa75 	bl	800d09c <quorem>
 800dbb2:	4641      	mov	r1, r8
 800dbb4:	9002      	str	r0, [sp, #8]
 800dbb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dbba:	ee18 0a10 	vmov	r0, s16
 800dbbe:	f000 fb85 	bl	800e2cc <__mcmp>
 800dbc2:	463a      	mov	r2, r7
 800dbc4:	9003      	str	r0, [sp, #12]
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f000 fb9b 	bl	800e304 <__mdiff>
 800dbce:	68c2      	ldr	r2, [r0, #12]
 800dbd0:	f109 3bff 	add.w	fp, r9, #4294967295
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	bb02      	cbnz	r2, 800dc1a <_dtoa_r+0xa62>
 800dbd8:	4601      	mov	r1, r0
 800dbda:	ee18 0a10 	vmov	r0, s16
 800dbde:	f000 fb75 	bl	800e2cc <__mcmp>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	9207      	str	r2, [sp, #28]
 800dbea:	f000 f92d 	bl	800de48 <_Bfree>
 800dbee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dbf2:	ea43 0102 	orr.w	r1, r3, r2
 800dbf6:	9b04      	ldr	r3, [sp, #16]
 800dbf8:	430b      	orrs	r3, r1
 800dbfa:	464d      	mov	r5, r9
 800dbfc:	d10f      	bne.n	800dc1e <_dtoa_r+0xa66>
 800dbfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc02:	d02a      	beq.n	800dc5a <_dtoa_r+0xaa2>
 800dc04:	9b03      	ldr	r3, [sp, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dd02      	ble.n	800dc10 <_dtoa_r+0xa58>
 800dc0a:	9b02      	ldr	r3, [sp, #8]
 800dc0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dc10:	f88b a000 	strb.w	sl, [fp]
 800dc14:	e775      	b.n	800db02 <_dtoa_r+0x94a>
 800dc16:	4638      	mov	r0, r7
 800dc18:	e7ba      	b.n	800db90 <_dtoa_r+0x9d8>
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	e7e2      	b.n	800dbe4 <_dtoa_r+0xa2c>
 800dc1e:	9b03      	ldr	r3, [sp, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	db04      	blt.n	800dc2e <_dtoa_r+0xa76>
 800dc24:	9906      	ldr	r1, [sp, #24]
 800dc26:	430b      	orrs	r3, r1
 800dc28:	9904      	ldr	r1, [sp, #16]
 800dc2a:	430b      	orrs	r3, r1
 800dc2c:	d122      	bne.n	800dc74 <_dtoa_r+0xabc>
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	ddee      	ble.n	800dc10 <_dtoa_r+0xa58>
 800dc32:	ee18 1a10 	vmov	r1, s16
 800dc36:	2201      	movs	r2, #1
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 fad7 	bl	800e1ec <__lshift>
 800dc3e:	4631      	mov	r1, r6
 800dc40:	ee08 0a10 	vmov	s16, r0
 800dc44:	f000 fb42 	bl	800e2cc <__mcmp>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	dc03      	bgt.n	800dc54 <_dtoa_r+0xa9c>
 800dc4c:	d1e0      	bne.n	800dc10 <_dtoa_r+0xa58>
 800dc4e:	f01a 0f01 	tst.w	sl, #1
 800dc52:	d0dd      	beq.n	800dc10 <_dtoa_r+0xa58>
 800dc54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc58:	d1d7      	bne.n	800dc0a <_dtoa_r+0xa52>
 800dc5a:	2339      	movs	r3, #57	; 0x39
 800dc5c:	f88b 3000 	strb.w	r3, [fp]
 800dc60:	462b      	mov	r3, r5
 800dc62:	461d      	mov	r5, r3
 800dc64:	3b01      	subs	r3, #1
 800dc66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc6a:	2a39      	cmp	r2, #57	; 0x39
 800dc6c:	d071      	beq.n	800dd52 <_dtoa_r+0xb9a>
 800dc6e:	3201      	adds	r2, #1
 800dc70:	701a      	strb	r2, [r3, #0]
 800dc72:	e746      	b.n	800db02 <_dtoa_r+0x94a>
 800dc74:	2a00      	cmp	r2, #0
 800dc76:	dd07      	ble.n	800dc88 <_dtoa_r+0xad0>
 800dc78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc7c:	d0ed      	beq.n	800dc5a <_dtoa_r+0xaa2>
 800dc7e:	f10a 0301 	add.w	r3, sl, #1
 800dc82:	f88b 3000 	strb.w	r3, [fp]
 800dc86:	e73c      	b.n	800db02 <_dtoa_r+0x94a>
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dc8e:	4599      	cmp	r9, r3
 800dc90:	d047      	beq.n	800dd22 <_dtoa_r+0xb6a>
 800dc92:	ee18 1a10 	vmov	r1, s16
 800dc96:	2300      	movs	r3, #0
 800dc98:	220a      	movs	r2, #10
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 f8f6 	bl	800de8c <__multadd>
 800dca0:	45b8      	cmp	r8, r7
 800dca2:	ee08 0a10 	vmov	s16, r0
 800dca6:	f04f 0300 	mov.w	r3, #0
 800dcaa:	f04f 020a 	mov.w	r2, #10
 800dcae:	4641      	mov	r1, r8
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	d106      	bne.n	800dcc2 <_dtoa_r+0xb0a>
 800dcb4:	f000 f8ea 	bl	800de8c <__multadd>
 800dcb8:	4680      	mov	r8, r0
 800dcba:	4607      	mov	r7, r0
 800dcbc:	f109 0901 	add.w	r9, r9, #1
 800dcc0:	e772      	b.n	800dba8 <_dtoa_r+0x9f0>
 800dcc2:	f000 f8e3 	bl	800de8c <__multadd>
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	4680      	mov	r8, r0
 800dcca:	2300      	movs	r3, #0
 800dccc:	220a      	movs	r2, #10
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 f8dc 	bl	800de8c <__multadd>
 800dcd4:	4607      	mov	r7, r0
 800dcd6:	e7f1      	b.n	800dcbc <_dtoa_r+0xb04>
 800dcd8:	9b03      	ldr	r3, [sp, #12]
 800dcda:	9302      	str	r3, [sp, #8]
 800dcdc:	9d01      	ldr	r5, [sp, #4]
 800dcde:	ee18 0a10 	vmov	r0, s16
 800dce2:	4631      	mov	r1, r6
 800dce4:	f7ff f9da 	bl	800d09c <quorem>
 800dce8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dcec:	9b01      	ldr	r3, [sp, #4]
 800dcee:	f805 ab01 	strb.w	sl, [r5], #1
 800dcf2:	1aea      	subs	r2, r5, r3
 800dcf4:	9b02      	ldr	r3, [sp, #8]
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	dd09      	ble.n	800dd0e <_dtoa_r+0xb56>
 800dcfa:	ee18 1a10 	vmov	r1, s16
 800dcfe:	2300      	movs	r3, #0
 800dd00:	220a      	movs	r2, #10
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 f8c2 	bl	800de8c <__multadd>
 800dd08:	ee08 0a10 	vmov	s16, r0
 800dd0c:	e7e7      	b.n	800dcde <_dtoa_r+0xb26>
 800dd0e:	9b02      	ldr	r3, [sp, #8]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	bfc8      	it	gt
 800dd14:	461d      	movgt	r5, r3
 800dd16:	9b01      	ldr	r3, [sp, #4]
 800dd18:	bfd8      	it	le
 800dd1a:	2501      	movle	r5, #1
 800dd1c:	441d      	add	r5, r3
 800dd1e:	f04f 0800 	mov.w	r8, #0
 800dd22:	ee18 1a10 	vmov	r1, s16
 800dd26:	2201      	movs	r2, #1
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f000 fa5f 	bl	800e1ec <__lshift>
 800dd2e:	4631      	mov	r1, r6
 800dd30:	ee08 0a10 	vmov	s16, r0
 800dd34:	f000 faca 	bl	800e2cc <__mcmp>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	dc91      	bgt.n	800dc60 <_dtoa_r+0xaa8>
 800dd3c:	d102      	bne.n	800dd44 <_dtoa_r+0xb8c>
 800dd3e:	f01a 0f01 	tst.w	sl, #1
 800dd42:	d18d      	bne.n	800dc60 <_dtoa_r+0xaa8>
 800dd44:	462b      	mov	r3, r5
 800dd46:	461d      	mov	r5, r3
 800dd48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd4c:	2a30      	cmp	r2, #48	; 0x30
 800dd4e:	d0fa      	beq.n	800dd46 <_dtoa_r+0xb8e>
 800dd50:	e6d7      	b.n	800db02 <_dtoa_r+0x94a>
 800dd52:	9a01      	ldr	r2, [sp, #4]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d184      	bne.n	800dc62 <_dtoa_r+0xaaa>
 800dd58:	9b00      	ldr	r3, [sp, #0]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	2331      	movs	r3, #49	; 0x31
 800dd60:	7013      	strb	r3, [r2, #0]
 800dd62:	e6ce      	b.n	800db02 <_dtoa_r+0x94a>
 800dd64:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <_dtoa_r+0xbd4>)
 800dd66:	f7ff ba95 	b.w	800d294 <_dtoa_r+0xdc>
 800dd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f47f aa6e 	bne.w	800d24e <_dtoa_r+0x96>
 800dd72:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <_dtoa_r+0xbd8>)
 800dd74:	f7ff ba8e 	b.w	800d294 <_dtoa_r+0xdc>
 800dd78:	9b02      	ldr	r3, [sp, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dcae      	bgt.n	800dcdc <_dtoa_r+0xb24>
 800dd7e:	9b06      	ldr	r3, [sp, #24]
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	f73f aea8 	bgt.w	800dad6 <_dtoa_r+0x91e>
 800dd86:	e7a9      	b.n	800dcdc <_dtoa_r+0xb24>
 800dd88:	080104af 	.word	0x080104af
 800dd8c:	0801040c 	.word	0x0801040c
 800dd90:	08010430 	.word	0x08010430

0800dd94 <_localeconv_r>:
 800dd94:	4800      	ldr	r0, [pc, #0]	; (800dd98 <_localeconv_r+0x4>)
 800dd96:	4770      	bx	lr
 800dd98:	20000180 	.word	0x20000180

0800dd9c <malloc>:
 800dd9c:	4b02      	ldr	r3, [pc, #8]	; (800dda8 <malloc+0xc>)
 800dd9e:	4601      	mov	r1, r0
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	f000 bc17 	b.w	800e5d4 <_malloc_r>
 800dda6:	bf00      	nop
 800dda8:	2000002c 	.word	0x2000002c

0800ddac <memcpy>:
 800ddac:	440a      	add	r2, r1
 800ddae:	4291      	cmp	r1, r2
 800ddb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddb4:	d100      	bne.n	800ddb8 <memcpy+0xc>
 800ddb6:	4770      	bx	lr
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddc2:	4291      	cmp	r1, r2
 800ddc4:	d1f9      	bne.n	800ddba <memcpy+0xe>
 800ddc6:	bd10      	pop	{r4, pc}

0800ddc8 <_Balloc>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ddcc:	4604      	mov	r4, r0
 800ddce:	460d      	mov	r5, r1
 800ddd0:	b976      	cbnz	r6, 800ddf0 <_Balloc+0x28>
 800ddd2:	2010      	movs	r0, #16
 800ddd4:	f7ff ffe2 	bl	800dd9c <malloc>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	6260      	str	r0, [r4, #36]	; 0x24
 800dddc:	b920      	cbnz	r0, 800dde8 <_Balloc+0x20>
 800ddde:	4b18      	ldr	r3, [pc, #96]	; (800de40 <_Balloc+0x78>)
 800dde0:	4818      	ldr	r0, [pc, #96]	; (800de44 <_Balloc+0x7c>)
 800dde2:	2166      	movs	r1, #102	; 0x66
 800dde4:	f000 fdd6 	bl	800e994 <__assert_func>
 800dde8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddec:	6006      	str	r6, [r0, #0]
 800ddee:	60c6      	str	r6, [r0, #12]
 800ddf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddf2:	68f3      	ldr	r3, [r6, #12]
 800ddf4:	b183      	cbz	r3, 800de18 <_Balloc+0x50>
 800ddf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddfe:	b9b8      	cbnz	r0, 800de30 <_Balloc+0x68>
 800de00:	2101      	movs	r1, #1
 800de02:	fa01 f605 	lsl.w	r6, r1, r5
 800de06:	1d72      	adds	r2, r6, #5
 800de08:	0092      	lsls	r2, r2, #2
 800de0a:	4620      	mov	r0, r4
 800de0c:	f000 fb60 	bl	800e4d0 <_calloc_r>
 800de10:	b160      	cbz	r0, 800de2c <_Balloc+0x64>
 800de12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de16:	e00e      	b.n	800de36 <_Balloc+0x6e>
 800de18:	2221      	movs	r2, #33	; 0x21
 800de1a:	2104      	movs	r1, #4
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fb57 	bl	800e4d0 <_calloc_r>
 800de22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de24:	60f0      	str	r0, [r6, #12]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1e4      	bne.n	800ddf6 <_Balloc+0x2e>
 800de2c:	2000      	movs	r0, #0
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	6802      	ldr	r2, [r0, #0]
 800de32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de36:	2300      	movs	r3, #0
 800de38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de3c:	e7f7      	b.n	800de2e <_Balloc+0x66>
 800de3e:	bf00      	nop
 800de40:	0801043d 	.word	0x0801043d
 800de44:	080104c0 	.word	0x080104c0

0800de48 <_Bfree>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de4c:	4605      	mov	r5, r0
 800de4e:	460c      	mov	r4, r1
 800de50:	b976      	cbnz	r6, 800de70 <_Bfree+0x28>
 800de52:	2010      	movs	r0, #16
 800de54:	f7ff ffa2 	bl	800dd9c <malloc>
 800de58:	4602      	mov	r2, r0
 800de5a:	6268      	str	r0, [r5, #36]	; 0x24
 800de5c:	b920      	cbnz	r0, 800de68 <_Bfree+0x20>
 800de5e:	4b09      	ldr	r3, [pc, #36]	; (800de84 <_Bfree+0x3c>)
 800de60:	4809      	ldr	r0, [pc, #36]	; (800de88 <_Bfree+0x40>)
 800de62:	218a      	movs	r1, #138	; 0x8a
 800de64:	f000 fd96 	bl	800e994 <__assert_func>
 800de68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de6c:	6006      	str	r6, [r0, #0]
 800de6e:	60c6      	str	r6, [r0, #12]
 800de70:	b13c      	cbz	r4, 800de82 <_Bfree+0x3a>
 800de72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de74:	6862      	ldr	r2, [r4, #4]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de7c:	6021      	str	r1, [r4, #0]
 800de7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de82:	bd70      	pop	{r4, r5, r6, pc}
 800de84:	0801043d 	.word	0x0801043d
 800de88:	080104c0 	.word	0x080104c0

0800de8c <__multadd>:
 800de8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de90:	690d      	ldr	r5, [r1, #16]
 800de92:	4607      	mov	r7, r0
 800de94:	460c      	mov	r4, r1
 800de96:	461e      	mov	r6, r3
 800de98:	f101 0c14 	add.w	ip, r1, #20
 800de9c:	2000      	movs	r0, #0
 800de9e:	f8dc 3000 	ldr.w	r3, [ip]
 800dea2:	b299      	uxth	r1, r3
 800dea4:	fb02 6101 	mla	r1, r2, r1, r6
 800dea8:	0c1e      	lsrs	r6, r3, #16
 800deaa:	0c0b      	lsrs	r3, r1, #16
 800deac:	fb02 3306 	mla	r3, r2, r6, r3
 800deb0:	b289      	uxth	r1, r1
 800deb2:	3001      	adds	r0, #1
 800deb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800deb8:	4285      	cmp	r5, r0
 800deba:	f84c 1b04 	str.w	r1, [ip], #4
 800debe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dec2:	dcec      	bgt.n	800de9e <__multadd+0x12>
 800dec4:	b30e      	cbz	r6, 800df0a <__multadd+0x7e>
 800dec6:	68a3      	ldr	r3, [r4, #8]
 800dec8:	42ab      	cmp	r3, r5
 800deca:	dc19      	bgt.n	800df00 <__multadd+0x74>
 800decc:	6861      	ldr	r1, [r4, #4]
 800dece:	4638      	mov	r0, r7
 800ded0:	3101      	adds	r1, #1
 800ded2:	f7ff ff79 	bl	800ddc8 <_Balloc>
 800ded6:	4680      	mov	r8, r0
 800ded8:	b928      	cbnz	r0, 800dee6 <__multadd+0x5a>
 800deda:	4602      	mov	r2, r0
 800dedc:	4b0c      	ldr	r3, [pc, #48]	; (800df10 <__multadd+0x84>)
 800dede:	480d      	ldr	r0, [pc, #52]	; (800df14 <__multadd+0x88>)
 800dee0:	21b5      	movs	r1, #181	; 0xb5
 800dee2:	f000 fd57 	bl	800e994 <__assert_func>
 800dee6:	6922      	ldr	r2, [r4, #16]
 800dee8:	3202      	adds	r2, #2
 800deea:	f104 010c 	add.w	r1, r4, #12
 800deee:	0092      	lsls	r2, r2, #2
 800def0:	300c      	adds	r0, #12
 800def2:	f7ff ff5b 	bl	800ddac <memcpy>
 800def6:	4621      	mov	r1, r4
 800def8:	4638      	mov	r0, r7
 800defa:	f7ff ffa5 	bl	800de48 <_Bfree>
 800defe:	4644      	mov	r4, r8
 800df00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df04:	3501      	adds	r5, #1
 800df06:	615e      	str	r6, [r3, #20]
 800df08:	6125      	str	r5, [r4, #16]
 800df0a:	4620      	mov	r0, r4
 800df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df10:	080104af 	.word	0x080104af
 800df14:	080104c0 	.word	0x080104c0

0800df18 <__hi0bits>:
 800df18:	0c03      	lsrs	r3, r0, #16
 800df1a:	041b      	lsls	r3, r3, #16
 800df1c:	b9d3      	cbnz	r3, 800df54 <__hi0bits+0x3c>
 800df1e:	0400      	lsls	r0, r0, #16
 800df20:	2310      	movs	r3, #16
 800df22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800df26:	bf04      	itt	eq
 800df28:	0200      	lsleq	r0, r0, #8
 800df2a:	3308      	addeq	r3, #8
 800df2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df30:	bf04      	itt	eq
 800df32:	0100      	lsleq	r0, r0, #4
 800df34:	3304      	addeq	r3, #4
 800df36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df3a:	bf04      	itt	eq
 800df3c:	0080      	lsleq	r0, r0, #2
 800df3e:	3302      	addeq	r3, #2
 800df40:	2800      	cmp	r0, #0
 800df42:	db05      	blt.n	800df50 <__hi0bits+0x38>
 800df44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df48:	f103 0301 	add.w	r3, r3, #1
 800df4c:	bf08      	it	eq
 800df4e:	2320      	moveq	r3, #32
 800df50:	4618      	mov	r0, r3
 800df52:	4770      	bx	lr
 800df54:	2300      	movs	r3, #0
 800df56:	e7e4      	b.n	800df22 <__hi0bits+0xa>

0800df58 <__lo0bits>:
 800df58:	6803      	ldr	r3, [r0, #0]
 800df5a:	f013 0207 	ands.w	r2, r3, #7
 800df5e:	4601      	mov	r1, r0
 800df60:	d00b      	beq.n	800df7a <__lo0bits+0x22>
 800df62:	07da      	lsls	r2, r3, #31
 800df64:	d423      	bmi.n	800dfae <__lo0bits+0x56>
 800df66:	0798      	lsls	r0, r3, #30
 800df68:	bf49      	itett	mi
 800df6a:	085b      	lsrmi	r3, r3, #1
 800df6c:	089b      	lsrpl	r3, r3, #2
 800df6e:	2001      	movmi	r0, #1
 800df70:	600b      	strmi	r3, [r1, #0]
 800df72:	bf5c      	itt	pl
 800df74:	600b      	strpl	r3, [r1, #0]
 800df76:	2002      	movpl	r0, #2
 800df78:	4770      	bx	lr
 800df7a:	b298      	uxth	r0, r3
 800df7c:	b9a8      	cbnz	r0, 800dfaa <__lo0bits+0x52>
 800df7e:	0c1b      	lsrs	r3, r3, #16
 800df80:	2010      	movs	r0, #16
 800df82:	b2da      	uxtb	r2, r3
 800df84:	b90a      	cbnz	r2, 800df8a <__lo0bits+0x32>
 800df86:	3008      	adds	r0, #8
 800df88:	0a1b      	lsrs	r3, r3, #8
 800df8a:	071a      	lsls	r2, r3, #28
 800df8c:	bf04      	itt	eq
 800df8e:	091b      	lsreq	r3, r3, #4
 800df90:	3004      	addeq	r0, #4
 800df92:	079a      	lsls	r2, r3, #30
 800df94:	bf04      	itt	eq
 800df96:	089b      	lsreq	r3, r3, #2
 800df98:	3002      	addeq	r0, #2
 800df9a:	07da      	lsls	r2, r3, #31
 800df9c:	d403      	bmi.n	800dfa6 <__lo0bits+0x4e>
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	f100 0001 	add.w	r0, r0, #1
 800dfa4:	d005      	beq.n	800dfb2 <__lo0bits+0x5a>
 800dfa6:	600b      	str	r3, [r1, #0]
 800dfa8:	4770      	bx	lr
 800dfaa:	4610      	mov	r0, r2
 800dfac:	e7e9      	b.n	800df82 <__lo0bits+0x2a>
 800dfae:	2000      	movs	r0, #0
 800dfb0:	4770      	bx	lr
 800dfb2:	2020      	movs	r0, #32
 800dfb4:	4770      	bx	lr
	...

0800dfb8 <__i2b>:
 800dfb8:	b510      	push	{r4, lr}
 800dfba:	460c      	mov	r4, r1
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	f7ff ff03 	bl	800ddc8 <_Balloc>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	b928      	cbnz	r0, 800dfd2 <__i2b+0x1a>
 800dfc6:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <__i2b+0x24>)
 800dfc8:	4805      	ldr	r0, [pc, #20]	; (800dfe0 <__i2b+0x28>)
 800dfca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dfce:	f000 fce1 	bl	800e994 <__assert_func>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	6144      	str	r4, [r0, #20]
 800dfd6:	6103      	str	r3, [r0, #16]
 800dfd8:	bd10      	pop	{r4, pc}
 800dfda:	bf00      	nop
 800dfdc:	080104af 	.word	0x080104af
 800dfe0:	080104c0 	.word	0x080104c0

0800dfe4 <__multiply>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	4691      	mov	r9, r2
 800dfea:	690a      	ldr	r2, [r1, #16]
 800dfec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	bfb8      	it	lt
 800dff4:	460b      	movlt	r3, r1
 800dff6:	460c      	mov	r4, r1
 800dff8:	bfbc      	itt	lt
 800dffa:	464c      	movlt	r4, r9
 800dffc:	4699      	movlt	r9, r3
 800dffe:	6927      	ldr	r7, [r4, #16]
 800e000:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e004:	68a3      	ldr	r3, [r4, #8]
 800e006:	6861      	ldr	r1, [r4, #4]
 800e008:	eb07 060a 	add.w	r6, r7, sl
 800e00c:	42b3      	cmp	r3, r6
 800e00e:	b085      	sub	sp, #20
 800e010:	bfb8      	it	lt
 800e012:	3101      	addlt	r1, #1
 800e014:	f7ff fed8 	bl	800ddc8 <_Balloc>
 800e018:	b930      	cbnz	r0, 800e028 <__multiply+0x44>
 800e01a:	4602      	mov	r2, r0
 800e01c:	4b44      	ldr	r3, [pc, #272]	; (800e130 <__multiply+0x14c>)
 800e01e:	4845      	ldr	r0, [pc, #276]	; (800e134 <__multiply+0x150>)
 800e020:	f240 115d 	movw	r1, #349	; 0x15d
 800e024:	f000 fcb6 	bl	800e994 <__assert_func>
 800e028:	f100 0514 	add.w	r5, r0, #20
 800e02c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e030:	462b      	mov	r3, r5
 800e032:	2200      	movs	r2, #0
 800e034:	4543      	cmp	r3, r8
 800e036:	d321      	bcc.n	800e07c <__multiply+0x98>
 800e038:	f104 0314 	add.w	r3, r4, #20
 800e03c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e040:	f109 0314 	add.w	r3, r9, #20
 800e044:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e048:	9202      	str	r2, [sp, #8]
 800e04a:	1b3a      	subs	r2, r7, r4
 800e04c:	3a15      	subs	r2, #21
 800e04e:	f022 0203 	bic.w	r2, r2, #3
 800e052:	3204      	adds	r2, #4
 800e054:	f104 0115 	add.w	r1, r4, #21
 800e058:	428f      	cmp	r7, r1
 800e05a:	bf38      	it	cc
 800e05c:	2204      	movcc	r2, #4
 800e05e:	9201      	str	r2, [sp, #4]
 800e060:	9a02      	ldr	r2, [sp, #8]
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	429a      	cmp	r2, r3
 800e066:	d80c      	bhi.n	800e082 <__multiply+0x9e>
 800e068:	2e00      	cmp	r6, #0
 800e06a:	dd03      	ble.n	800e074 <__multiply+0x90>
 800e06c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e070:	2b00      	cmp	r3, #0
 800e072:	d05a      	beq.n	800e12a <__multiply+0x146>
 800e074:	6106      	str	r6, [r0, #16]
 800e076:	b005      	add	sp, #20
 800e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07c:	f843 2b04 	str.w	r2, [r3], #4
 800e080:	e7d8      	b.n	800e034 <__multiply+0x50>
 800e082:	f8b3 a000 	ldrh.w	sl, [r3]
 800e086:	f1ba 0f00 	cmp.w	sl, #0
 800e08a:	d024      	beq.n	800e0d6 <__multiply+0xf2>
 800e08c:	f104 0e14 	add.w	lr, r4, #20
 800e090:	46a9      	mov	r9, r5
 800e092:	f04f 0c00 	mov.w	ip, #0
 800e096:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e09a:	f8d9 1000 	ldr.w	r1, [r9]
 800e09e:	fa1f fb82 	uxth.w	fp, r2
 800e0a2:	b289      	uxth	r1, r1
 800e0a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e0a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e0ac:	f8d9 2000 	ldr.w	r2, [r9]
 800e0b0:	4461      	add	r1, ip
 800e0b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e0b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e0ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e0be:	b289      	uxth	r1, r1
 800e0c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e0c4:	4577      	cmp	r7, lr
 800e0c6:	f849 1b04 	str.w	r1, [r9], #4
 800e0ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e0ce:	d8e2      	bhi.n	800e096 <__multiply+0xb2>
 800e0d0:	9a01      	ldr	r2, [sp, #4]
 800e0d2:	f845 c002 	str.w	ip, [r5, r2]
 800e0d6:	9a03      	ldr	r2, [sp, #12]
 800e0d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	f1b9 0f00 	cmp.w	r9, #0
 800e0e2:	d020      	beq.n	800e126 <__multiply+0x142>
 800e0e4:	6829      	ldr	r1, [r5, #0]
 800e0e6:	f104 0c14 	add.w	ip, r4, #20
 800e0ea:	46ae      	mov	lr, r5
 800e0ec:	f04f 0a00 	mov.w	sl, #0
 800e0f0:	f8bc b000 	ldrh.w	fp, [ip]
 800e0f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e0f8:	fb09 220b 	mla	r2, r9, fp, r2
 800e0fc:	4492      	add	sl, r2
 800e0fe:	b289      	uxth	r1, r1
 800e100:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e104:	f84e 1b04 	str.w	r1, [lr], #4
 800e108:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e10c:	f8be 1000 	ldrh.w	r1, [lr]
 800e110:	0c12      	lsrs	r2, r2, #16
 800e112:	fb09 1102 	mla	r1, r9, r2, r1
 800e116:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e11a:	4567      	cmp	r7, ip
 800e11c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e120:	d8e6      	bhi.n	800e0f0 <__multiply+0x10c>
 800e122:	9a01      	ldr	r2, [sp, #4]
 800e124:	50a9      	str	r1, [r5, r2]
 800e126:	3504      	adds	r5, #4
 800e128:	e79a      	b.n	800e060 <__multiply+0x7c>
 800e12a:	3e01      	subs	r6, #1
 800e12c:	e79c      	b.n	800e068 <__multiply+0x84>
 800e12e:	bf00      	nop
 800e130:	080104af 	.word	0x080104af
 800e134:	080104c0 	.word	0x080104c0

0800e138 <__pow5mult>:
 800e138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e13c:	4615      	mov	r5, r2
 800e13e:	f012 0203 	ands.w	r2, r2, #3
 800e142:	4606      	mov	r6, r0
 800e144:	460f      	mov	r7, r1
 800e146:	d007      	beq.n	800e158 <__pow5mult+0x20>
 800e148:	4c25      	ldr	r4, [pc, #148]	; (800e1e0 <__pow5mult+0xa8>)
 800e14a:	3a01      	subs	r2, #1
 800e14c:	2300      	movs	r3, #0
 800e14e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e152:	f7ff fe9b 	bl	800de8c <__multadd>
 800e156:	4607      	mov	r7, r0
 800e158:	10ad      	asrs	r5, r5, #2
 800e15a:	d03d      	beq.n	800e1d8 <__pow5mult+0xa0>
 800e15c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e15e:	b97c      	cbnz	r4, 800e180 <__pow5mult+0x48>
 800e160:	2010      	movs	r0, #16
 800e162:	f7ff fe1b 	bl	800dd9c <malloc>
 800e166:	4602      	mov	r2, r0
 800e168:	6270      	str	r0, [r6, #36]	; 0x24
 800e16a:	b928      	cbnz	r0, 800e178 <__pow5mult+0x40>
 800e16c:	4b1d      	ldr	r3, [pc, #116]	; (800e1e4 <__pow5mult+0xac>)
 800e16e:	481e      	ldr	r0, [pc, #120]	; (800e1e8 <__pow5mult+0xb0>)
 800e170:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e174:	f000 fc0e 	bl	800e994 <__assert_func>
 800e178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e17c:	6004      	str	r4, [r0, #0]
 800e17e:	60c4      	str	r4, [r0, #12]
 800e180:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e188:	b94c      	cbnz	r4, 800e19e <__pow5mult+0x66>
 800e18a:	f240 2171 	movw	r1, #625	; 0x271
 800e18e:	4630      	mov	r0, r6
 800e190:	f7ff ff12 	bl	800dfb8 <__i2b>
 800e194:	2300      	movs	r3, #0
 800e196:	f8c8 0008 	str.w	r0, [r8, #8]
 800e19a:	4604      	mov	r4, r0
 800e19c:	6003      	str	r3, [r0, #0]
 800e19e:	f04f 0900 	mov.w	r9, #0
 800e1a2:	07eb      	lsls	r3, r5, #31
 800e1a4:	d50a      	bpl.n	800e1bc <__pow5mult+0x84>
 800e1a6:	4639      	mov	r1, r7
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f7ff ff1a 	bl	800dfe4 <__multiply>
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	4680      	mov	r8, r0
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f7ff fe47 	bl	800de48 <_Bfree>
 800e1ba:	4647      	mov	r7, r8
 800e1bc:	106d      	asrs	r5, r5, #1
 800e1be:	d00b      	beq.n	800e1d8 <__pow5mult+0xa0>
 800e1c0:	6820      	ldr	r0, [r4, #0]
 800e1c2:	b938      	cbnz	r0, 800e1d4 <__pow5mult+0x9c>
 800e1c4:	4622      	mov	r2, r4
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7ff ff0b 	bl	800dfe4 <__multiply>
 800e1ce:	6020      	str	r0, [r4, #0]
 800e1d0:	f8c0 9000 	str.w	r9, [r0]
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	e7e4      	b.n	800e1a2 <__pow5mult+0x6a>
 800e1d8:	4638      	mov	r0, r7
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	bf00      	nop
 800e1e0:	08010610 	.word	0x08010610
 800e1e4:	0801043d 	.word	0x0801043d
 800e1e8:	080104c0 	.word	0x080104c0

0800e1ec <__lshift>:
 800e1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1f0:	460c      	mov	r4, r1
 800e1f2:	6849      	ldr	r1, [r1, #4]
 800e1f4:	6923      	ldr	r3, [r4, #16]
 800e1f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1fa:	68a3      	ldr	r3, [r4, #8]
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	4691      	mov	r9, r2
 800e200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e204:	f108 0601 	add.w	r6, r8, #1
 800e208:	42b3      	cmp	r3, r6
 800e20a:	db0b      	blt.n	800e224 <__lshift+0x38>
 800e20c:	4638      	mov	r0, r7
 800e20e:	f7ff fddb 	bl	800ddc8 <_Balloc>
 800e212:	4605      	mov	r5, r0
 800e214:	b948      	cbnz	r0, 800e22a <__lshift+0x3e>
 800e216:	4602      	mov	r2, r0
 800e218:	4b2a      	ldr	r3, [pc, #168]	; (800e2c4 <__lshift+0xd8>)
 800e21a:	482b      	ldr	r0, [pc, #172]	; (800e2c8 <__lshift+0xdc>)
 800e21c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e220:	f000 fbb8 	bl	800e994 <__assert_func>
 800e224:	3101      	adds	r1, #1
 800e226:	005b      	lsls	r3, r3, #1
 800e228:	e7ee      	b.n	800e208 <__lshift+0x1c>
 800e22a:	2300      	movs	r3, #0
 800e22c:	f100 0114 	add.w	r1, r0, #20
 800e230:	f100 0210 	add.w	r2, r0, #16
 800e234:	4618      	mov	r0, r3
 800e236:	4553      	cmp	r3, sl
 800e238:	db37      	blt.n	800e2aa <__lshift+0xbe>
 800e23a:	6920      	ldr	r0, [r4, #16]
 800e23c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e240:	f104 0314 	add.w	r3, r4, #20
 800e244:	f019 091f 	ands.w	r9, r9, #31
 800e248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e24c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e250:	d02f      	beq.n	800e2b2 <__lshift+0xc6>
 800e252:	f1c9 0e20 	rsb	lr, r9, #32
 800e256:	468a      	mov	sl, r1
 800e258:	f04f 0c00 	mov.w	ip, #0
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	fa02 f209 	lsl.w	r2, r2, r9
 800e262:	ea42 020c 	orr.w	r2, r2, ip
 800e266:	f84a 2b04 	str.w	r2, [sl], #4
 800e26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e26e:	4298      	cmp	r0, r3
 800e270:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e274:	d8f2      	bhi.n	800e25c <__lshift+0x70>
 800e276:	1b03      	subs	r3, r0, r4
 800e278:	3b15      	subs	r3, #21
 800e27a:	f023 0303 	bic.w	r3, r3, #3
 800e27e:	3304      	adds	r3, #4
 800e280:	f104 0215 	add.w	r2, r4, #21
 800e284:	4290      	cmp	r0, r2
 800e286:	bf38      	it	cc
 800e288:	2304      	movcc	r3, #4
 800e28a:	f841 c003 	str.w	ip, [r1, r3]
 800e28e:	f1bc 0f00 	cmp.w	ip, #0
 800e292:	d001      	beq.n	800e298 <__lshift+0xac>
 800e294:	f108 0602 	add.w	r6, r8, #2
 800e298:	3e01      	subs	r6, #1
 800e29a:	4638      	mov	r0, r7
 800e29c:	612e      	str	r6, [r5, #16]
 800e29e:	4621      	mov	r1, r4
 800e2a0:	f7ff fdd2 	bl	800de48 <_Bfree>
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	e7c1      	b.n	800e236 <__lshift+0x4a>
 800e2b2:	3904      	subs	r1, #4
 800e2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e2bc:	4298      	cmp	r0, r3
 800e2be:	d8f9      	bhi.n	800e2b4 <__lshift+0xc8>
 800e2c0:	e7ea      	b.n	800e298 <__lshift+0xac>
 800e2c2:	bf00      	nop
 800e2c4:	080104af 	.word	0x080104af
 800e2c8:	080104c0 	.word	0x080104c0

0800e2cc <__mcmp>:
 800e2cc:	b530      	push	{r4, r5, lr}
 800e2ce:	6902      	ldr	r2, [r0, #16]
 800e2d0:	690c      	ldr	r4, [r1, #16]
 800e2d2:	1b12      	subs	r2, r2, r4
 800e2d4:	d10e      	bne.n	800e2f4 <__mcmp+0x28>
 800e2d6:	f100 0314 	add.w	r3, r0, #20
 800e2da:	3114      	adds	r1, #20
 800e2dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e2e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e2e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e2e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2ec:	42a5      	cmp	r5, r4
 800e2ee:	d003      	beq.n	800e2f8 <__mcmp+0x2c>
 800e2f0:	d305      	bcc.n	800e2fe <__mcmp+0x32>
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	bd30      	pop	{r4, r5, pc}
 800e2f8:	4283      	cmp	r3, r0
 800e2fa:	d3f3      	bcc.n	800e2e4 <__mcmp+0x18>
 800e2fc:	e7fa      	b.n	800e2f4 <__mcmp+0x28>
 800e2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e302:	e7f7      	b.n	800e2f4 <__mcmp+0x28>

0800e304 <__mdiff>:
 800e304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	460c      	mov	r4, r1
 800e30a:	4606      	mov	r6, r0
 800e30c:	4611      	mov	r1, r2
 800e30e:	4620      	mov	r0, r4
 800e310:	4690      	mov	r8, r2
 800e312:	f7ff ffdb 	bl	800e2cc <__mcmp>
 800e316:	1e05      	subs	r5, r0, #0
 800e318:	d110      	bne.n	800e33c <__mdiff+0x38>
 800e31a:	4629      	mov	r1, r5
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7ff fd53 	bl	800ddc8 <_Balloc>
 800e322:	b930      	cbnz	r0, 800e332 <__mdiff+0x2e>
 800e324:	4b3a      	ldr	r3, [pc, #232]	; (800e410 <__mdiff+0x10c>)
 800e326:	4602      	mov	r2, r0
 800e328:	f240 2132 	movw	r1, #562	; 0x232
 800e32c:	4839      	ldr	r0, [pc, #228]	; (800e414 <__mdiff+0x110>)
 800e32e:	f000 fb31 	bl	800e994 <__assert_func>
 800e332:	2301      	movs	r3, #1
 800e334:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e33c:	bfa4      	itt	ge
 800e33e:	4643      	movge	r3, r8
 800e340:	46a0      	movge	r8, r4
 800e342:	4630      	mov	r0, r6
 800e344:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e348:	bfa6      	itte	ge
 800e34a:	461c      	movge	r4, r3
 800e34c:	2500      	movge	r5, #0
 800e34e:	2501      	movlt	r5, #1
 800e350:	f7ff fd3a 	bl	800ddc8 <_Balloc>
 800e354:	b920      	cbnz	r0, 800e360 <__mdiff+0x5c>
 800e356:	4b2e      	ldr	r3, [pc, #184]	; (800e410 <__mdiff+0x10c>)
 800e358:	4602      	mov	r2, r0
 800e35a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e35e:	e7e5      	b.n	800e32c <__mdiff+0x28>
 800e360:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e364:	6926      	ldr	r6, [r4, #16]
 800e366:	60c5      	str	r5, [r0, #12]
 800e368:	f104 0914 	add.w	r9, r4, #20
 800e36c:	f108 0514 	add.w	r5, r8, #20
 800e370:	f100 0e14 	add.w	lr, r0, #20
 800e374:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e378:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e37c:	f108 0210 	add.w	r2, r8, #16
 800e380:	46f2      	mov	sl, lr
 800e382:	2100      	movs	r1, #0
 800e384:	f859 3b04 	ldr.w	r3, [r9], #4
 800e388:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e38c:	fa1f f883 	uxth.w	r8, r3
 800e390:	fa11 f18b 	uxtah	r1, r1, fp
 800e394:	0c1b      	lsrs	r3, r3, #16
 800e396:	eba1 0808 	sub.w	r8, r1, r8
 800e39a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e39e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e3a2:	fa1f f888 	uxth.w	r8, r8
 800e3a6:	1419      	asrs	r1, r3, #16
 800e3a8:	454e      	cmp	r6, r9
 800e3aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e3ae:	f84a 3b04 	str.w	r3, [sl], #4
 800e3b2:	d8e7      	bhi.n	800e384 <__mdiff+0x80>
 800e3b4:	1b33      	subs	r3, r6, r4
 800e3b6:	3b15      	subs	r3, #21
 800e3b8:	f023 0303 	bic.w	r3, r3, #3
 800e3bc:	3304      	adds	r3, #4
 800e3be:	3415      	adds	r4, #21
 800e3c0:	42a6      	cmp	r6, r4
 800e3c2:	bf38      	it	cc
 800e3c4:	2304      	movcc	r3, #4
 800e3c6:	441d      	add	r5, r3
 800e3c8:	4473      	add	r3, lr
 800e3ca:	469e      	mov	lr, r3
 800e3cc:	462e      	mov	r6, r5
 800e3ce:	4566      	cmp	r6, ip
 800e3d0:	d30e      	bcc.n	800e3f0 <__mdiff+0xec>
 800e3d2:	f10c 0203 	add.w	r2, ip, #3
 800e3d6:	1b52      	subs	r2, r2, r5
 800e3d8:	f022 0203 	bic.w	r2, r2, #3
 800e3dc:	3d03      	subs	r5, #3
 800e3de:	45ac      	cmp	ip, r5
 800e3e0:	bf38      	it	cc
 800e3e2:	2200      	movcc	r2, #0
 800e3e4:	441a      	add	r2, r3
 800e3e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e3ea:	b17b      	cbz	r3, 800e40c <__mdiff+0x108>
 800e3ec:	6107      	str	r7, [r0, #16]
 800e3ee:	e7a3      	b.n	800e338 <__mdiff+0x34>
 800e3f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e3f4:	fa11 f288 	uxtah	r2, r1, r8
 800e3f8:	1414      	asrs	r4, r2, #16
 800e3fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e3fe:	b292      	uxth	r2, r2
 800e400:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e404:	f84e 2b04 	str.w	r2, [lr], #4
 800e408:	1421      	asrs	r1, r4, #16
 800e40a:	e7e0      	b.n	800e3ce <__mdiff+0xca>
 800e40c:	3f01      	subs	r7, #1
 800e40e:	e7ea      	b.n	800e3e6 <__mdiff+0xe2>
 800e410:	080104af 	.word	0x080104af
 800e414:	080104c0 	.word	0x080104c0

0800e418 <__d2b>:
 800e418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e41c:	4689      	mov	r9, r1
 800e41e:	2101      	movs	r1, #1
 800e420:	ec57 6b10 	vmov	r6, r7, d0
 800e424:	4690      	mov	r8, r2
 800e426:	f7ff fccf 	bl	800ddc8 <_Balloc>
 800e42a:	4604      	mov	r4, r0
 800e42c:	b930      	cbnz	r0, 800e43c <__d2b+0x24>
 800e42e:	4602      	mov	r2, r0
 800e430:	4b25      	ldr	r3, [pc, #148]	; (800e4c8 <__d2b+0xb0>)
 800e432:	4826      	ldr	r0, [pc, #152]	; (800e4cc <__d2b+0xb4>)
 800e434:	f240 310a 	movw	r1, #778	; 0x30a
 800e438:	f000 faac 	bl	800e994 <__assert_func>
 800e43c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e444:	bb35      	cbnz	r5, 800e494 <__d2b+0x7c>
 800e446:	2e00      	cmp	r6, #0
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	d028      	beq.n	800e49e <__d2b+0x86>
 800e44c:	4668      	mov	r0, sp
 800e44e:	9600      	str	r6, [sp, #0]
 800e450:	f7ff fd82 	bl	800df58 <__lo0bits>
 800e454:	9900      	ldr	r1, [sp, #0]
 800e456:	b300      	cbz	r0, 800e49a <__d2b+0x82>
 800e458:	9a01      	ldr	r2, [sp, #4]
 800e45a:	f1c0 0320 	rsb	r3, r0, #32
 800e45e:	fa02 f303 	lsl.w	r3, r2, r3
 800e462:	430b      	orrs	r3, r1
 800e464:	40c2      	lsrs	r2, r0
 800e466:	6163      	str	r3, [r4, #20]
 800e468:	9201      	str	r2, [sp, #4]
 800e46a:	9b01      	ldr	r3, [sp, #4]
 800e46c:	61a3      	str	r3, [r4, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	bf14      	ite	ne
 800e472:	2202      	movne	r2, #2
 800e474:	2201      	moveq	r2, #1
 800e476:	6122      	str	r2, [r4, #16]
 800e478:	b1d5      	cbz	r5, 800e4b0 <__d2b+0x98>
 800e47a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e47e:	4405      	add	r5, r0
 800e480:	f8c9 5000 	str.w	r5, [r9]
 800e484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e488:	f8c8 0000 	str.w	r0, [r8]
 800e48c:	4620      	mov	r0, r4
 800e48e:	b003      	add	sp, #12
 800e490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e498:	e7d5      	b.n	800e446 <__d2b+0x2e>
 800e49a:	6161      	str	r1, [r4, #20]
 800e49c:	e7e5      	b.n	800e46a <__d2b+0x52>
 800e49e:	a801      	add	r0, sp, #4
 800e4a0:	f7ff fd5a 	bl	800df58 <__lo0bits>
 800e4a4:	9b01      	ldr	r3, [sp, #4]
 800e4a6:	6163      	str	r3, [r4, #20]
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	6122      	str	r2, [r4, #16]
 800e4ac:	3020      	adds	r0, #32
 800e4ae:	e7e3      	b.n	800e478 <__d2b+0x60>
 800e4b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e4b8:	f8c9 0000 	str.w	r0, [r9]
 800e4bc:	6918      	ldr	r0, [r3, #16]
 800e4be:	f7ff fd2b 	bl	800df18 <__hi0bits>
 800e4c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e4c6:	e7df      	b.n	800e488 <__d2b+0x70>
 800e4c8:	080104af 	.word	0x080104af
 800e4cc:	080104c0 	.word	0x080104c0

0800e4d0 <_calloc_r>:
 800e4d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4d2:	fba1 2402 	umull	r2, r4, r1, r2
 800e4d6:	b94c      	cbnz	r4, 800e4ec <_calloc_r+0x1c>
 800e4d8:	4611      	mov	r1, r2
 800e4da:	9201      	str	r2, [sp, #4]
 800e4dc:	f000 f87a 	bl	800e5d4 <_malloc_r>
 800e4e0:	9a01      	ldr	r2, [sp, #4]
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	b930      	cbnz	r0, 800e4f4 <_calloc_r+0x24>
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	b003      	add	sp, #12
 800e4ea:	bd30      	pop	{r4, r5, pc}
 800e4ec:	220c      	movs	r2, #12
 800e4ee:	6002      	str	r2, [r0, #0]
 800e4f0:	2500      	movs	r5, #0
 800e4f2:	e7f8      	b.n	800e4e6 <_calloc_r+0x16>
 800e4f4:	4621      	mov	r1, r4
 800e4f6:	f7fe f93f 	bl	800c778 <memset>
 800e4fa:	e7f4      	b.n	800e4e6 <_calloc_r+0x16>

0800e4fc <_free_r>:
 800e4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4fe:	2900      	cmp	r1, #0
 800e500:	d044      	beq.n	800e58c <_free_r+0x90>
 800e502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e506:	9001      	str	r0, [sp, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f1a1 0404 	sub.w	r4, r1, #4
 800e50e:	bfb8      	it	lt
 800e510:	18e4      	addlt	r4, r4, r3
 800e512:	f000 fa9b 	bl	800ea4c <__malloc_lock>
 800e516:	4a1e      	ldr	r2, [pc, #120]	; (800e590 <_free_r+0x94>)
 800e518:	9801      	ldr	r0, [sp, #4]
 800e51a:	6813      	ldr	r3, [r2, #0]
 800e51c:	b933      	cbnz	r3, 800e52c <_free_r+0x30>
 800e51e:	6063      	str	r3, [r4, #4]
 800e520:	6014      	str	r4, [r2, #0]
 800e522:	b003      	add	sp, #12
 800e524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e528:	f000 ba96 	b.w	800ea58 <__malloc_unlock>
 800e52c:	42a3      	cmp	r3, r4
 800e52e:	d908      	bls.n	800e542 <_free_r+0x46>
 800e530:	6825      	ldr	r5, [r4, #0]
 800e532:	1961      	adds	r1, r4, r5
 800e534:	428b      	cmp	r3, r1
 800e536:	bf01      	itttt	eq
 800e538:	6819      	ldreq	r1, [r3, #0]
 800e53a:	685b      	ldreq	r3, [r3, #4]
 800e53c:	1949      	addeq	r1, r1, r5
 800e53e:	6021      	streq	r1, [r4, #0]
 800e540:	e7ed      	b.n	800e51e <_free_r+0x22>
 800e542:	461a      	mov	r2, r3
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	b10b      	cbz	r3, 800e54c <_free_r+0x50>
 800e548:	42a3      	cmp	r3, r4
 800e54a:	d9fa      	bls.n	800e542 <_free_r+0x46>
 800e54c:	6811      	ldr	r1, [r2, #0]
 800e54e:	1855      	adds	r5, r2, r1
 800e550:	42a5      	cmp	r5, r4
 800e552:	d10b      	bne.n	800e56c <_free_r+0x70>
 800e554:	6824      	ldr	r4, [r4, #0]
 800e556:	4421      	add	r1, r4
 800e558:	1854      	adds	r4, r2, r1
 800e55a:	42a3      	cmp	r3, r4
 800e55c:	6011      	str	r1, [r2, #0]
 800e55e:	d1e0      	bne.n	800e522 <_free_r+0x26>
 800e560:	681c      	ldr	r4, [r3, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	6053      	str	r3, [r2, #4]
 800e566:	4421      	add	r1, r4
 800e568:	6011      	str	r1, [r2, #0]
 800e56a:	e7da      	b.n	800e522 <_free_r+0x26>
 800e56c:	d902      	bls.n	800e574 <_free_r+0x78>
 800e56e:	230c      	movs	r3, #12
 800e570:	6003      	str	r3, [r0, #0]
 800e572:	e7d6      	b.n	800e522 <_free_r+0x26>
 800e574:	6825      	ldr	r5, [r4, #0]
 800e576:	1961      	adds	r1, r4, r5
 800e578:	428b      	cmp	r3, r1
 800e57a:	bf04      	itt	eq
 800e57c:	6819      	ldreq	r1, [r3, #0]
 800e57e:	685b      	ldreq	r3, [r3, #4]
 800e580:	6063      	str	r3, [r4, #4]
 800e582:	bf04      	itt	eq
 800e584:	1949      	addeq	r1, r1, r5
 800e586:	6021      	streq	r1, [r4, #0]
 800e588:	6054      	str	r4, [r2, #4]
 800e58a:	e7ca      	b.n	800e522 <_free_r+0x26>
 800e58c:	b003      	add	sp, #12
 800e58e:	bd30      	pop	{r4, r5, pc}
 800e590:	20000820 	.word	0x20000820

0800e594 <sbrk_aligned>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	4e0e      	ldr	r6, [pc, #56]	; (800e5d0 <sbrk_aligned+0x3c>)
 800e598:	460c      	mov	r4, r1
 800e59a:	6831      	ldr	r1, [r6, #0]
 800e59c:	4605      	mov	r5, r0
 800e59e:	b911      	cbnz	r1, 800e5a6 <sbrk_aligned+0x12>
 800e5a0:	f000 f9e8 	bl	800e974 <_sbrk_r>
 800e5a4:	6030      	str	r0, [r6, #0]
 800e5a6:	4621      	mov	r1, r4
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f000 f9e3 	bl	800e974 <_sbrk_r>
 800e5ae:	1c43      	adds	r3, r0, #1
 800e5b0:	d00a      	beq.n	800e5c8 <sbrk_aligned+0x34>
 800e5b2:	1cc4      	adds	r4, r0, #3
 800e5b4:	f024 0403 	bic.w	r4, r4, #3
 800e5b8:	42a0      	cmp	r0, r4
 800e5ba:	d007      	beq.n	800e5cc <sbrk_aligned+0x38>
 800e5bc:	1a21      	subs	r1, r4, r0
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f000 f9d8 	bl	800e974 <_sbrk_r>
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	d101      	bne.n	800e5cc <sbrk_aligned+0x38>
 800e5c8:	f04f 34ff 	mov.w	r4, #4294967295
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	20000824 	.word	0x20000824

0800e5d4 <_malloc_r>:
 800e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d8:	1ccd      	adds	r5, r1, #3
 800e5da:	f025 0503 	bic.w	r5, r5, #3
 800e5de:	3508      	adds	r5, #8
 800e5e0:	2d0c      	cmp	r5, #12
 800e5e2:	bf38      	it	cc
 800e5e4:	250c      	movcc	r5, #12
 800e5e6:	2d00      	cmp	r5, #0
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	db01      	blt.n	800e5f0 <_malloc_r+0x1c>
 800e5ec:	42a9      	cmp	r1, r5
 800e5ee:	d905      	bls.n	800e5fc <_malloc_r+0x28>
 800e5f0:	230c      	movs	r3, #12
 800e5f2:	603b      	str	r3, [r7, #0]
 800e5f4:	2600      	movs	r6, #0
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fc:	4e2e      	ldr	r6, [pc, #184]	; (800e6b8 <_malloc_r+0xe4>)
 800e5fe:	f000 fa25 	bl	800ea4c <__malloc_lock>
 800e602:	6833      	ldr	r3, [r6, #0]
 800e604:	461c      	mov	r4, r3
 800e606:	bb34      	cbnz	r4, 800e656 <_malloc_r+0x82>
 800e608:	4629      	mov	r1, r5
 800e60a:	4638      	mov	r0, r7
 800e60c:	f7ff ffc2 	bl	800e594 <sbrk_aligned>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	4604      	mov	r4, r0
 800e614:	d14d      	bne.n	800e6b2 <_malloc_r+0xde>
 800e616:	6834      	ldr	r4, [r6, #0]
 800e618:	4626      	mov	r6, r4
 800e61a:	2e00      	cmp	r6, #0
 800e61c:	d140      	bne.n	800e6a0 <_malloc_r+0xcc>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	4631      	mov	r1, r6
 800e622:	4638      	mov	r0, r7
 800e624:	eb04 0803 	add.w	r8, r4, r3
 800e628:	f000 f9a4 	bl	800e974 <_sbrk_r>
 800e62c:	4580      	cmp	r8, r0
 800e62e:	d13a      	bne.n	800e6a6 <_malloc_r+0xd2>
 800e630:	6821      	ldr	r1, [r4, #0]
 800e632:	3503      	adds	r5, #3
 800e634:	1a6d      	subs	r5, r5, r1
 800e636:	f025 0503 	bic.w	r5, r5, #3
 800e63a:	3508      	adds	r5, #8
 800e63c:	2d0c      	cmp	r5, #12
 800e63e:	bf38      	it	cc
 800e640:	250c      	movcc	r5, #12
 800e642:	4629      	mov	r1, r5
 800e644:	4638      	mov	r0, r7
 800e646:	f7ff ffa5 	bl	800e594 <sbrk_aligned>
 800e64a:	3001      	adds	r0, #1
 800e64c:	d02b      	beq.n	800e6a6 <_malloc_r+0xd2>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	442b      	add	r3, r5
 800e652:	6023      	str	r3, [r4, #0]
 800e654:	e00e      	b.n	800e674 <_malloc_r+0xa0>
 800e656:	6822      	ldr	r2, [r4, #0]
 800e658:	1b52      	subs	r2, r2, r5
 800e65a:	d41e      	bmi.n	800e69a <_malloc_r+0xc6>
 800e65c:	2a0b      	cmp	r2, #11
 800e65e:	d916      	bls.n	800e68e <_malloc_r+0xba>
 800e660:	1961      	adds	r1, r4, r5
 800e662:	42a3      	cmp	r3, r4
 800e664:	6025      	str	r5, [r4, #0]
 800e666:	bf18      	it	ne
 800e668:	6059      	strne	r1, [r3, #4]
 800e66a:	6863      	ldr	r3, [r4, #4]
 800e66c:	bf08      	it	eq
 800e66e:	6031      	streq	r1, [r6, #0]
 800e670:	5162      	str	r2, [r4, r5]
 800e672:	604b      	str	r3, [r1, #4]
 800e674:	4638      	mov	r0, r7
 800e676:	f104 060b 	add.w	r6, r4, #11
 800e67a:	f000 f9ed 	bl	800ea58 <__malloc_unlock>
 800e67e:	f026 0607 	bic.w	r6, r6, #7
 800e682:	1d23      	adds	r3, r4, #4
 800e684:	1af2      	subs	r2, r6, r3
 800e686:	d0b6      	beq.n	800e5f6 <_malloc_r+0x22>
 800e688:	1b9b      	subs	r3, r3, r6
 800e68a:	50a3      	str	r3, [r4, r2]
 800e68c:	e7b3      	b.n	800e5f6 <_malloc_r+0x22>
 800e68e:	6862      	ldr	r2, [r4, #4]
 800e690:	42a3      	cmp	r3, r4
 800e692:	bf0c      	ite	eq
 800e694:	6032      	streq	r2, [r6, #0]
 800e696:	605a      	strne	r2, [r3, #4]
 800e698:	e7ec      	b.n	800e674 <_malloc_r+0xa0>
 800e69a:	4623      	mov	r3, r4
 800e69c:	6864      	ldr	r4, [r4, #4]
 800e69e:	e7b2      	b.n	800e606 <_malloc_r+0x32>
 800e6a0:	4634      	mov	r4, r6
 800e6a2:	6876      	ldr	r6, [r6, #4]
 800e6a4:	e7b9      	b.n	800e61a <_malloc_r+0x46>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	603b      	str	r3, [r7, #0]
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	f000 f9d4 	bl	800ea58 <__malloc_unlock>
 800e6b0:	e7a1      	b.n	800e5f6 <_malloc_r+0x22>
 800e6b2:	6025      	str	r5, [r4, #0]
 800e6b4:	e7de      	b.n	800e674 <_malloc_r+0xa0>
 800e6b6:	bf00      	nop
 800e6b8:	20000820 	.word	0x20000820

0800e6bc <__ssputs_r>:
 800e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	688e      	ldr	r6, [r1, #8]
 800e6c2:	429e      	cmp	r6, r3
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	4690      	mov	r8, r2
 800e6ca:	461f      	mov	r7, r3
 800e6cc:	d838      	bhi.n	800e740 <__ssputs_r+0x84>
 800e6ce:	898a      	ldrh	r2, [r1, #12]
 800e6d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6d4:	d032      	beq.n	800e73c <__ssputs_r+0x80>
 800e6d6:	6825      	ldr	r5, [r4, #0]
 800e6d8:	6909      	ldr	r1, [r1, #16]
 800e6da:	eba5 0901 	sub.w	r9, r5, r1
 800e6de:	6965      	ldr	r5, [r4, #20]
 800e6e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	444b      	add	r3, r9
 800e6ec:	106d      	asrs	r5, r5, #1
 800e6ee:	429d      	cmp	r5, r3
 800e6f0:	bf38      	it	cc
 800e6f2:	461d      	movcc	r5, r3
 800e6f4:	0553      	lsls	r3, r2, #21
 800e6f6:	d531      	bpl.n	800e75c <__ssputs_r+0xa0>
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7ff ff6b 	bl	800e5d4 <_malloc_r>
 800e6fe:	4606      	mov	r6, r0
 800e700:	b950      	cbnz	r0, 800e718 <__ssputs_r+0x5c>
 800e702:	230c      	movs	r3, #12
 800e704:	f8ca 3000 	str.w	r3, [sl]
 800e708:	89a3      	ldrh	r3, [r4, #12]
 800e70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	f04f 30ff 	mov.w	r0, #4294967295
 800e714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e718:	6921      	ldr	r1, [r4, #16]
 800e71a:	464a      	mov	r2, r9
 800e71c:	f7ff fb46 	bl	800ddac <memcpy>
 800e720:	89a3      	ldrh	r3, [r4, #12]
 800e722:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72a:	81a3      	strh	r3, [r4, #12]
 800e72c:	6126      	str	r6, [r4, #16]
 800e72e:	6165      	str	r5, [r4, #20]
 800e730:	444e      	add	r6, r9
 800e732:	eba5 0509 	sub.w	r5, r5, r9
 800e736:	6026      	str	r6, [r4, #0]
 800e738:	60a5      	str	r5, [r4, #8]
 800e73a:	463e      	mov	r6, r7
 800e73c:	42be      	cmp	r6, r7
 800e73e:	d900      	bls.n	800e742 <__ssputs_r+0x86>
 800e740:	463e      	mov	r6, r7
 800e742:	6820      	ldr	r0, [r4, #0]
 800e744:	4632      	mov	r2, r6
 800e746:	4641      	mov	r1, r8
 800e748:	f000 f966 	bl	800ea18 <memmove>
 800e74c:	68a3      	ldr	r3, [r4, #8]
 800e74e:	1b9b      	subs	r3, r3, r6
 800e750:	60a3      	str	r3, [r4, #8]
 800e752:	6823      	ldr	r3, [r4, #0]
 800e754:	4433      	add	r3, r6
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	2000      	movs	r0, #0
 800e75a:	e7db      	b.n	800e714 <__ssputs_r+0x58>
 800e75c:	462a      	mov	r2, r5
 800e75e:	f000 f981 	bl	800ea64 <_realloc_r>
 800e762:	4606      	mov	r6, r0
 800e764:	2800      	cmp	r0, #0
 800e766:	d1e1      	bne.n	800e72c <__ssputs_r+0x70>
 800e768:	6921      	ldr	r1, [r4, #16]
 800e76a:	4650      	mov	r0, sl
 800e76c:	f7ff fec6 	bl	800e4fc <_free_r>
 800e770:	e7c7      	b.n	800e702 <__ssputs_r+0x46>
	...

0800e774 <_svfiprintf_r>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	4698      	mov	r8, r3
 800e77a:	898b      	ldrh	r3, [r1, #12]
 800e77c:	061b      	lsls	r3, r3, #24
 800e77e:	b09d      	sub	sp, #116	; 0x74
 800e780:	4607      	mov	r7, r0
 800e782:	460d      	mov	r5, r1
 800e784:	4614      	mov	r4, r2
 800e786:	d50e      	bpl.n	800e7a6 <_svfiprintf_r+0x32>
 800e788:	690b      	ldr	r3, [r1, #16]
 800e78a:	b963      	cbnz	r3, 800e7a6 <_svfiprintf_r+0x32>
 800e78c:	2140      	movs	r1, #64	; 0x40
 800e78e:	f7ff ff21 	bl	800e5d4 <_malloc_r>
 800e792:	6028      	str	r0, [r5, #0]
 800e794:	6128      	str	r0, [r5, #16]
 800e796:	b920      	cbnz	r0, 800e7a2 <_svfiprintf_r+0x2e>
 800e798:	230c      	movs	r3, #12
 800e79a:	603b      	str	r3, [r7, #0]
 800e79c:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a0:	e0d1      	b.n	800e946 <_svfiprintf_r+0x1d2>
 800e7a2:	2340      	movs	r3, #64	; 0x40
 800e7a4:	616b      	str	r3, [r5, #20]
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7aa:	2320      	movs	r3, #32
 800e7ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b4:	2330      	movs	r3, #48	; 0x30
 800e7b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e960 <_svfiprintf_r+0x1ec>
 800e7ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7be:	f04f 0901 	mov.w	r9, #1
 800e7c2:	4623      	mov	r3, r4
 800e7c4:	469a      	mov	sl, r3
 800e7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7ca:	b10a      	cbz	r2, 800e7d0 <_svfiprintf_r+0x5c>
 800e7cc:	2a25      	cmp	r2, #37	; 0x25
 800e7ce:	d1f9      	bne.n	800e7c4 <_svfiprintf_r+0x50>
 800e7d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d4:	d00b      	beq.n	800e7ee <_svfiprintf_r+0x7a>
 800e7d6:	465b      	mov	r3, fp
 800e7d8:	4622      	mov	r2, r4
 800e7da:	4629      	mov	r1, r5
 800e7dc:	4638      	mov	r0, r7
 800e7de:	f7ff ff6d 	bl	800e6bc <__ssputs_r>
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	f000 80aa 	beq.w	800e93c <_svfiprintf_r+0x1c8>
 800e7e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7ea:	445a      	add	r2, fp
 800e7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 80a2 	beq.w	800e93c <_svfiprintf_r+0x1c8>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e802:	f10a 0a01 	add.w	sl, sl, #1
 800e806:	9304      	str	r3, [sp, #16]
 800e808:	9307      	str	r3, [sp, #28]
 800e80a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e80e:	931a      	str	r3, [sp, #104]	; 0x68
 800e810:	4654      	mov	r4, sl
 800e812:	2205      	movs	r2, #5
 800e814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e818:	4851      	ldr	r0, [pc, #324]	; (800e960 <_svfiprintf_r+0x1ec>)
 800e81a:	f7f1 fd09 	bl	8000230 <memchr>
 800e81e:	9a04      	ldr	r2, [sp, #16]
 800e820:	b9d8      	cbnz	r0, 800e85a <_svfiprintf_r+0xe6>
 800e822:	06d0      	lsls	r0, r2, #27
 800e824:	bf44      	itt	mi
 800e826:	2320      	movmi	r3, #32
 800e828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e82c:	0711      	lsls	r1, r2, #28
 800e82e:	bf44      	itt	mi
 800e830:	232b      	movmi	r3, #43	; 0x2b
 800e832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e836:	f89a 3000 	ldrb.w	r3, [sl]
 800e83a:	2b2a      	cmp	r3, #42	; 0x2a
 800e83c:	d015      	beq.n	800e86a <_svfiprintf_r+0xf6>
 800e83e:	9a07      	ldr	r2, [sp, #28]
 800e840:	4654      	mov	r4, sl
 800e842:	2000      	movs	r0, #0
 800e844:	f04f 0c0a 	mov.w	ip, #10
 800e848:	4621      	mov	r1, r4
 800e84a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e84e:	3b30      	subs	r3, #48	; 0x30
 800e850:	2b09      	cmp	r3, #9
 800e852:	d94e      	bls.n	800e8f2 <_svfiprintf_r+0x17e>
 800e854:	b1b0      	cbz	r0, 800e884 <_svfiprintf_r+0x110>
 800e856:	9207      	str	r2, [sp, #28]
 800e858:	e014      	b.n	800e884 <_svfiprintf_r+0x110>
 800e85a:	eba0 0308 	sub.w	r3, r0, r8
 800e85e:	fa09 f303 	lsl.w	r3, r9, r3
 800e862:	4313      	orrs	r3, r2
 800e864:	9304      	str	r3, [sp, #16]
 800e866:	46a2      	mov	sl, r4
 800e868:	e7d2      	b.n	800e810 <_svfiprintf_r+0x9c>
 800e86a:	9b03      	ldr	r3, [sp, #12]
 800e86c:	1d19      	adds	r1, r3, #4
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	9103      	str	r1, [sp, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	bfbb      	ittet	lt
 800e876:	425b      	neglt	r3, r3
 800e878:	f042 0202 	orrlt.w	r2, r2, #2
 800e87c:	9307      	strge	r3, [sp, #28]
 800e87e:	9307      	strlt	r3, [sp, #28]
 800e880:	bfb8      	it	lt
 800e882:	9204      	strlt	r2, [sp, #16]
 800e884:	7823      	ldrb	r3, [r4, #0]
 800e886:	2b2e      	cmp	r3, #46	; 0x2e
 800e888:	d10c      	bne.n	800e8a4 <_svfiprintf_r+0x130>
 800e88a:	7863      	ldrb	r3, [r4, #1]
 800e88c:	2b2a      	cmp	r3, #42	; 0x2a
 800e88e:	d135      	bne.n	800e8fc <_svfiprintf_r+0x188>
 800e890:	9b03      	ldr	r3, [sp, #12]
 800e892:	1d1a      	adds	r2, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	9203      	str	r2, [sp, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bfb8      	it	lt
 800e89c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8a0:	3402      	adds	r4, #2
 800e8a2:	9305      	str	r3, [sp, #20]
 800e8a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e970 <_svfiprintf_r+0x1fc>
 800e8a8:	7821      	ldrb	r1, [r4, #0]
 800e8aa:	2203      	movs	r2, #3
 800e8ac:	4650      	mov	r0, sl
 800e8ae:	f7f1 fcbf 	bl	8000230 <memchr>
 800e8b2:	b140      	cbz	r0, 800e8c6 <_svfiprintf_r+0x152>
 800e8b4:	2340      	movs	r3, #64	; 0x40
 800e8b6:	eba0 000a 	sub.w	r0, r0, sl
 800e8ba:	fa03 f000 	lsl.w	r0, r3, r0
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	4303      	orrs	r3, r0
 800e8c2:	3401      	adds	r4, #1
 800e8c4:	9304      	str	r3, [sp, #16]
 800e8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ca:	4826      	ldr	r0, [pc, #152]	; (800e964 <_svfiprintf_r+0x1f0>)
 800e8cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8d0:	2206      	movs	r2, #6
 800e8d2:	f7f1 fcad 	bl	8000230 <memchr>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d038      	beq.n	800e94c <_svfiprintf_r+0x1d8>
 800e8da:	4b23      	ldr	r3, [pc, #140]	; (800e968 <_svfiprintf_r+0x1f4>)
 800e8dc:	bb1b      	cbnz	r3, 800e926 <_svfiprintf_r+0x1b2>
 800e8de:	9b03      	ldr	r3, [sp, #12]
 800e8e0:	3307      	adds	r3, #7
 800e8e2:	f023 0307 	bic.w	r3, r3, #7
 800e8e6:	3308      	adds	r3, #8
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ec:	4433      	add	r3, r6
 800e8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f0:	e767      	b.n	800e7c2 <_svfiprintf_r+0x4e>
 800e8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	e7a5      	b.n	800e848 <_svfiprintf_r+0xd4>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	3401      	adds	r4, #1
 800e900:	9305      	str	r3, [sp, #20]
 800e902:	4619      	mov	r1, r3
 800e904:	f04f 0c0a 	mov.w	ip, #10
 800e908:	4620      	mov	r0, r4
 800e90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e90e:	3a30      	subs	r2, #48	; 0x30
 800e910:	2a09      	cmp	r2, #9
 800e912:	d903      	bls.n	800e91c <_svfiprintf_r+0x1a8>
 800e914:	2b00      	cmp	r3, #0
 800e916:	d0c5      	beq.n	800e8a4 <_svfiprintf_r+0x130>
 800e918:	9105      	str	r1, [sp, #20]
 800e91a:	e7c3      	b.n	800e8a4 <_svfiprintf_r+0x130>
 800e91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e920:	4604      	mov	r4, r0
 800e922:	2301      	movs	r3, #1
 800e924:	e7f0      	b.n	800e908 <_svfiprintf_r+0x194>
 800e926:	ab03      	add	r3, sp, #12
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	462a      	mov	r2, r5
 800e92c:	4b0f      	ldr	r3, [pc, #60]	; (800e96c <_svfiprintf_r+0x1f8>)
 800e92e:	a904      	add	r1, sp, #16
 800e930:	4638      	mov	r0, r7
 800e932:	f7fd ffc9 	bl	800c8c8 <_printf_float>
 800e936:	1c42      	adds	r2, r0, #1
 800e938:	4606      	mov	r6, r0
 800e93a:	d1d6      	bne.n	800e8ea <_svfiprintf_r+0x176>
 800e93c:	89ab      	ldrh	r3, [r5, #12]
 800e93e:	065b      	lsls	r3, r3, #25
 800e940:	f53f af2c 	bmi.w	800e79c <_svfiprintf_r+0x28>
 800e944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e946:	b01d      	add	sp, #116	; 0x74
 800e948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94c:	ab03      	add	r3, sp, #12
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	462a      	mov	r2, r5
 800e952:	4b06      	ldr	r3, [pc, #24]	; (800e96c <_svfiprintf_r+0x1f8>)
 800e954:	a904      	add	r1, sp, #16
 800e956:	4638      	mov	r0, r7
 800e958:	f7fe fa5a 	bl	800ce10 <_printf_i>
 800e95c:	e7eb      	b.n	800e936 <_svfiprintf_r+0x1c2>
 800e95e:	bf00      	nop
 800e960:	0801061c 	.word	0x0801061c
 800e964:	08010626 	.word	0x08010626
 800e968:	0800c8c9 	.word	0x0800c8c9
 800e96c:	0800e6bd 	.word	0x0800e6bd
 800e970:	08010622 	.word	0x08010622

0800e974 <_sbrk_r>:
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	4d06      	ldr	r5, [pc, #24]	; (800e990 <_sbrk_r+0x1c>)
 800e978:	2300      	movs	r3, #0
 800e97a:	4604      	mov	r4, r0
 800e97c:	4608      	mov	r0, r1
 800e97e:	602b      	str	r3, [r5, #0]
 800e980:	f7f6 fdc6 	bl	8005510 <_sbrk>
 800e984:	1c43      	adds	r3, r0, #1
 800e986:	d102      	bne.n	800e98e <_sbrk_r+0x1a>
 800e988:	682b      	ldr	r3, [r5, #0]
 800e98a:	b103      	cbz	r3, 800e98e <_sbrk_r+0x1a>
 800e98c:	6023      	str	r3, [r4, #0]
 800e98e:	bd38      	pop	{r3, r4, r5, pc}
 800e990:	20000828 	.word	0x20000828

0800e994 <__assert_func>:
 800e994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e996:	4614      	mov	r4, r2
 800e998:	461a      	mov	r2, r3
 800e99a:	4b09      	ldr	r3, [pc, #36]	; (800e9c0 <__assert_func+0x2c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4605      	mov	r5, r0
 800e9a0:	68d8      	ldr	r0, [r3, #12]
 800e9a2:	b14c      	cbz	r4, 800e9b8 <__assert_func+0x24>
 800e9a4:	4b07      	ldr	r3, [pc, #28]	; (800e9c4 <__assert_func+0x30>)
 800e9a6:	9100      	str	r1, [sp, #0]
 800e9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9ac:	4906      	ldr	r1, [pc, #24]	; (800e9c8 <__assert_func+0x34>)
 800e9ae:	462b      	mov	r3, r5
 800e9b0:	f000 f80e 	bl	800e9d0 <fiprintf>
 800e9b4:	f000 faac 	bl	800ef10 <abort>
 800e9b8:	4b04      	ldr	r3, [pc, #16]	; (800e9cc <__assert_func+0x38>)
 800e9ba:	461c      	mov	r4, r3
 800e9bc:	e7f3      	b.n	800e9a6 <__assert_func+0x12>
 800e9be:	bf00      	nop
 800e9c0:	2000002c 	.word	0x2000002c
 800e9c4:	0801062d 	.word	0x0801062d
 800e9c8:	0801063a 	.word	0x0801063a
 800e9cc:	08010668 	.word	0x08010668

0800e9d0 <fiprintf>:
 800e9d0:	b40e      	push	{r1, r2, r3}
 800e9d2:	b503      	push	{r0, r1, lr}
 800e9d4:	4601      	mov	r1, r0
 800e9d6:	ab03      	add	r3, sp, #12
 800e9d8:	4805      	ldr	r0, [pc, #20]	; (800e9f0 <fiprintf+0x20>)
 800e9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9de:	6800      	ldr	r0, [r0, #0]
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	f000 f897 	bl	800eb14 <_vfiprintf_r>
 800e9e6:	b002      	add	sp, #8
 800e9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9ec:	b003      	add	sp, #12
 800e9ee:	4770      	bx	lr
 800e9f0:	2000002c 	.word	0x2000002c

0800e9f4 <__ascii_mbtowc>:
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	b901      	cbnz	r1, 800e9fa <__ascii_mbtowc+0x6>
 800e9f8:	a901      	add	r1, sp, #4
 800e9fa:	b142      	cbz	r2, 800ea0e <__ascii_mbtowc+0x1a>
 800e9fc:	b14b      	cbz	r3, 800ea12 <__ascii_mbtowc+0x1e>
 800e9fe:	7813      	ldrb	r3, [r2, #0]
 800ea00:	600b      	str	r3, [r1, #0]
 800ea02:	7812      	ldrb	r2, [r2, #0]
 800ea04:	1e10      	subs	r0, r2, #0
 800ea06:	bf18      	it	ne
 800ea08:	2001      	movne	r0, #1
 800ea0a:	b002      	add	sp, #8
 800ea0c:	4770      	bx	lr
 800ea0e:	4610      	mov	r0, r2
 800ea10:	e7fb      	b.n	800ea0a <__ascii_mbtowc+0x16>
 800ea12:	f06f 0001 	mvn.w	r0, #1
 800ea16:	e7f8      	b.n	800ea0a <__ascii_mbtowc+0x16>

0800ea18 <memmove>:
 800ea18:	4288      	cmp	r0, r1
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	eb01 0402 	add.w	r4, r1, r2
 800ea20:	d902      	bls.n	800ea28 <memmove+0x10>
 800ea22:	4284      	cmp	r4, r0
 800ea24:	4623      	mov	r3, r4
 800ea26:	d807      	bhi.n	800ea38 <memmove+0x20>
 800ea28:	1e43      	subs	r3, r0, #1
 800ea2a:	42a1      	cmp	r1, r4
 800ea2c:	d008      	beq.n	800ea40 <memmove+0x28>
 800ea2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea36:	e7f8      	b.n	800ea2a <memmove+0x12>
 800ea38:	4402      	add	r2, r0
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	428a      	cmp	r2, r1
 800ea3e:	d100      	bne.n	800ea42 <memmove+0x2a>
 800ea40:	bd10      	pop	{r4, pc}
 800ea42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea4a:	e7f7      	b.n	800ea3c <memmove+0x24>

0800ea4c <__malloc_lock>:
 800ea4c:	4801      	ldr	r0, [pc, #4]	; (800ea54 <__malloc_lock+0x8>)
 800ea4e:	f000 bc1f 	b.w	800f290 <__retarget_lock_acquire_recursive>
 800ea52:	bf00      	nop
 800ea54:	2000082c 	.word	0x2000082c

0800ea58 <__malloc_unlock>:
 800ea58:	4801      	ldr	r0, [pc, #4]	; (800ea60 <__malloc_unlock+0x8>)
 800ea5a:	f000 bc1a 	b.w	800f292 <__retarget_lock_release_recursive>
 800ea5e:	bf00      	nop
 800ea60:	2000082c 	.word	0x2000082c

0800ea64 <_realloc_r>:
 800ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea68:	4680      	mov	r8, r0
 800ea6a:	4614      	mov	r4, r2
 800ea6c:	460e      	mov	r6, r1
 800ea6e:	b921      	cbnz	r1, 800ea7a <_realloc_r+0x16>
 800ea70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea74:	4611      	mov	r1, r2
 800ea76:	f7ff bdad 	b.w	800e5d4 <_malloc_r>
 800ea7a:	b92a      	cbnz	r2, 800ea88 <_realloc_r+0x24>
 800ea7c:	f7ff fd3e 	bl	800e4fc <_free_r>
 800ea80:	4625      	mov	r5, r4
 800ea82:	4628      	mov	r0, r5
 800ea84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea88:	f000 fc6a 	bl	800f360 <_malloc_usable_size_r>
 800ea8c:	4284      	cmp	r4, r0
 800ea8e:	4607      	mov	r7, r0
 800ea90:	d802      	bhi.n	800ea98 <_realloc_r+0x34>
 800ea92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea96:	d812      	bhi.n	800eabe <_realloc_r+0x5a>
 800ea98:	4621      	mov	r1, r4
 800ea9a:	4640      	mov	r0, r8
 800ea9c:	f7ff fd9a 	bl	800e5d4 <_malloc_r>
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d0ed      	beq.n	800ea82 <_realloc_r+0x1e>
 800eaa6:	42bc      	cmp	r4, r7
 800eaa8:	4622      	mov	r2, r4
 800eaaa:	4631      	mov	r1, r6
 800eaac:	bf28      	it	cs
 800eaae:	463a      	movcs	r2, r7
 800eab0:	f7ff f97c 	bl	800ddac <memcpy>
 800eab4:	4631      	mov	r1, r6
 800eab6:	4640      	mov	r0, r8
 800eab8:	f7ff fd20 	bl	800e4fc <_free_r>
 800eabc:	e7e1      	b.n	800ea82 <_realloc_r+0x1e>
 800eabe:	4635      	mov	r5, r6
 800eac0:	e7df      	b.n	800ea82 <_realloc_r+0x1e>

0800eac2 <__sfputc_r>:
 800eac2:	6893      	ldr	r3, [r2, #8]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	b410      	push	{r4}
 800eaca:	6093      	str	r3, [r2, #8]
 800eacc:	da08      	bge.n	800eae0 <__sfputc_r+0x1e>
 800eace:	6994      	ldr	r4, [r2, #24]
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	db01      	blt.n	800ead8 <__sfputc_r+0x16>
 800ead4:	290a      	cmp	r1, #10
 800ead6:	d103      	bne.n	800eae0 <__sfputc_r+0x1e>
 800ead8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eadc:	f000 b94a 	b.w	800ed74 <__swbuf_r>
 800eae0:	6813      	ldr	r3, [r2, #0]
 800eae2:	1c58      	adds	r0, r3, #1
 800eae4:	6010      	str	r0, [r2, #0]
 800eae6:	7019      	strb	r1, [r3, #0]
 800eae8:	4608      	mov	r0, r1
 800eaea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <__sfputs_r>:
 800eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	460f      	mov	r7, r1
 800eaf6:	4614      	mov	r4, r2
 800eaf8:	18d5      	adds	r5, r2, r3
 800eafa:	42ac      	cmp	r4, r5
 800eafc:	d101      	bne.n	800eb02 <__sfputs_r+0x12>
 800eafe:	2000      	movs	r0, #0
 800eb00:	e007      	b.n	800eb12 <__sfputs_r+0x22>
 800eb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb06:	463a      	mov	r2, r7
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f7ff ffda 	bl	800eac2 <__sfputc_r>
 800eb0e:	1c43      	adds	r3, r0, #1
 800eb10:	d1f3      	bne.n	800eafa <__sfputs_r+0xa>
 800eb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb14 <_vfiprintf_r>:
 800eb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb18:	460d      	mov	r5, r1
 800eb1a:	b09d      	sub	sp, #116	; 0x74
 800eb1c:	4614      	mov	r4, r2
 800eb1e:	4698      	mov	r8, r3
 800eb20:	4606      	mov	r6, r0
 800eb22:	b118      	cbz	r0, 800eb2c <_vfiprintf_r+0x18>
 800eb24:	6983      	ldr	r3, [r0, #24]
 800eb26:	b90b      	cbnz	r3, 800eb2c <_vfiprintf_r+0x18>
 800eb28:	f000 fb14 	bl	800f154 <__sinit>
 800eb2c:	4b89      	ldr	r3, [pc, #548]	; (800ed54 <_vfiprintf_r+0x240>)
 800eb2e:	429d      	cmp	r5, r3
 800eb30:	d11b      	bne.n	800eb6a <_vfiprintf_r+0x56>
 800eb32:	6875      	ldr	r5, [r6, #4]
 800eb34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb36:	07d9      	lsls	r1, r3, #31
 800eb38:	d405      	bmi.n	800eb46 <_vfiprintf_r+0x32>
 800eb3a:	89ab      	ldrh	r3, [r5, #12]
 800eb3c:	059a      	lsls	r2, r3, #22
 800eb3e:	d402      	bmi.n	800eb46 <_vfiprintf_r+0x32>
 800eb40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb42:	f000 fba5 	bl	800f290 <__retarget_lock_acquire_recursive>
 800eb46:	89ab      	ldrh	r3, [r5, #12]
 800eb48:	071b      	lsls	r3, r3, #28
 800eb4a:	d501      	bpl.n	800eb50 <_vfiprintf_r+0x3c>
 800eb4c:	692b      	ldr	r3, [r5, #16]
 800eb4e:	b9eb      	cbnz	r3, 800eb8c <_vfiprintf_r+0x78>
 800eb50:	4629      	mov	r1, r5
 800eb52:	4630      	mov	r0, r6
 800eb54:	f000 f96e 	bl	800ee34 <__swsetup_r>
 800eb58:	b1c0      	cbz	r0, 800eb8c <_vfiprintf_r+0x78>
 800eb5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb5c:	07dc      	lsls	r4, r3, #31
 800eb5e:	d50e      	bpl.n	800eb7e <_vfiprintf_r+0x6a>
 800eb60:	f04f 30ff 	mov.w	r0, #4294967295
 800eb64:	b01d      	add	sp, #116	; 0x74
 800eb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb6a:	4b7b      	ldr	r3, [pc, #492]	; (800ed58 <_vfiprintf_r+0x244>)
 800eb6c:	429d      	cmp	r5, r3
 800eb6e:	d101      	bne.n	800eb74 <_vfiprintf_r+0x60>
 800eb70:	68b5      	ldr	r5, [r6, #8]
 800eb72:	e7df      	b.n	800eb34 <_vfiprintf_r+0x20>
 800eb74:	4b79      	ldr	r3, [pc, #484]	; (800ed5c <_vfiprintf_r+0x248>)
 800eb76:	429d      	cmp	r5, r3
 800eb78:	bf08      	it	eq
 800eb7a:	68f5      	ldreq	r5, [r6, #12]
 800eb7c:	e7da      	b.n	800eb34 <_vfiprintf_r+0x20>
 800eb7e:	89ab      	ldrh	r3, [r5, #12]
 800eb80:	0598      	lsls	r0, r3, #22
 800eb82:	d4ed      	bmi.n	800eb60 <_vfiprintf_r+0x4c>
 800eb84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb86:	f000 fb84 	bl	800f292 <__retarget_lock_release_recursive>
 800eb8a:	e7e9      	b.n	800eb60 <_vfiprintf_r+0x4c>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb90:	2320      	movs	r3, #32
 800eb92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb96:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb9a:	2330      	movs	r3, #48	; 0x30
 800eb9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed60 <_vfiprintf_r+0x24c>
 800eba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eba4:	f04f 0901 	mov.w	r9, #1
 800eba8:	4623      	mov	r3, r4
 800ebaa:	469a      	mov	sl, r3
 800ebac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebb0:	b10a      	cbz	r2, 800ebb6 <_vfiprintf_r+0xa2>
 800ebb2:	2a25      	cmp	r2, #37	; 0x25
 800ebb4:	d1f9      	bne.n	800ebaa <_vfiprintf_r+0x96>
 800ebb6:	ebba 0b04 	subs.w	fp, sl, r4
 800ebba:	d00b      	beq.n	800ebd4 <_vfiprintf_r+0xc0>
 800ebbc:	465b      	mov	r3, fp
 800ebbe:	4622      	mov	r2, r4
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7ff ff94 	bl	800eaf0 <__sfputs_r>
 800ebc8:	3001      	adds	r0, #1
 800ebca:	f000 80aa 	beq.w	800ed22 <_vfiprintf_r+0x20e>
 800ebce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebd0:	445a      	add	r2, fp
 800ebd2:	9209      	str	r2, [sp, #36]	; 0x24
 800ebd4:	f89a 3000 	ldrb.w	r3, [sl]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 80a2 	beq.w	800ed22 <_vfiprintf_r+0x20e>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebe8:	f10a 0a01 	add.w	sl, sl, #1
 800ebec:	9304      	str	r3, [sp, #16]
 800ebee:	9307      	str	r3, [sp, #28]
 800ebf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebf4:	931a      	str	r3, [sp, #104]	; 0x68
 800ebf6:	4654      	mov	r4, sl
 800ebf8:	2205      	movs	r2, #5
 800ebfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebfe:	4858      	ldr	r0, [pc, #352]	; (800ed60 <_vfiprintf_r+0x24c>)
 800ec00:	f7f1 fb16 	bl	8000230 <memchr>
 800ec04:	9a04      	ldr	r2, [sp, #16]
 800ec06:	b9d8      	cbnz	r0, 800ec40 <_vfiprintf_r+0x12c>
 800ec08:	06d1      	lsls	r1, r2, #27
 800ec0a:	bf44      	itt	mi
 800ec0c:	2320      	movmi	r3, #32
 800ec0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec12:	0713      	lsls	r3, r2, #28
 800ec14:	bf44      	itt	mi
 800ec16:	232b      	movmi	r3, #43	; 0x2b
 800ec18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec20:	2b2a      	cmp	r3, #42	; 0x2a
 800ec22:	d015      	beq.n	800ec50 <_vfiprintf_r+0x13c>
 800ec24:	9a07      	ldr	r2, [sp, #28]
 800ec26:	4654      	mov	r4, sl
 800ec28:	2000      	movs	r0, #0
 800ec2a:	f04f 0c0a 	mov.w	ip, #10
 800ec2e:	4621      	mov	r1, r4
 800ec30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec34:	3b30      	subs	r3, #48	; 0x30
 800ec36:	2b09      	cmp	r3, #9
 800ec38:	d94e      	bls.n	800ecd8 <_vfiprintf_r+0x1c4>
 800ec3a:	b1b0      	cbz	r0, 800ec6a <_vfiprintf_r+0x156>
 800ec3c:	9207      	str	r2, [sp, #28]
 800ec3e:	e014      	b.n	800ec6a <_vfiprintf_r+0x156>
 800ec40:	eba0 0308 	sub.w	r3, r0, r8
 800ec44:	fa09 f303 	lsl.w	r3, r9, r3
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	46a2      	mov	sl, r4
 800ec4e:	e7d2      	b.n	800ebf6 <_vfiprintf_r+0xe2>
 800ec50:	9b03      	ldr	r3, [sp, #12]
 800ec52:	1d19      	adds	r1, r3, #4
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	9103      	str	r1, [sp, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	bfbb      	ittet	lt
 800ec5c:	425b      	neglt	r3, r3
 800ec5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ec62:	9307      	strge	r3, [sp, #28]
 800ec64:	9307      	strlt	r3, [sp, #28]
 800ec66:	bfb8      	it	lt
 800ec68:	9204      	strlt	r2, [sp, #16]
 800ec6a:	7823      	ldrb	r3, [r4, #0]
 800ec6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ec6e:	d10c      	bne.n	800ec8a <_vfiprintf_r+0x176>
 800ec70:	7863      	ldrb	r3, [r4, #1]
 800ec72:	2b2a      	cmp	r3, #42	; 0x2a
 800ec74:	d135      	bne.n	800ece2 <_vfiprintf_r+0x1ce>
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	1d1a      	adds	r2, r3, #4
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	9203      	str	r2, [sp, #12]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	bfb8      	it	lt
 800ec82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec86:	3402      	adds	r4, #2
 800ec88:	9305      	str	r3, [sp, #20]
 800ec8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed70 <_vfiprintf_r+0x25c>
 800ec8e:	7821      	ldrb	r1, [r4, #0]
 800ec90:	2203      	movs	r2, #3
 800ec92:	4650      	mov	r0, sl
 800ec94:	f7f1 facc 	bl	8000230 <memchr>
 800ec98:	b140      	cbz	r0, 800ecac <_vfiprintf_r+0x198>
 800ec9a:	2340      	movs	r3, #64	; 0x40
 800ec9c:	eba0 000a 	sub.w	r0, r0, sl
 800eca0:	fa03 f000 	lsl.w	r0, r3, r0
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	4303      	orrs	r3, r0
 800eca8:	3401      	adds	r4, #1
 800ecaa:	9304      	str	r3, [sp, #16]
 800ecac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb0:	482c      	ldr	r0, [pc, #176]	; (800ed64 <_vfiprintf_r+0x250>)
 800ecb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecb6:	2206      	movs	r2, #6
 800ecb8:	f7f1 faba 	bl	8000230 <memchr>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d03f      	beq.n	800ed40 <_vfiprintf_r+0x22c>
 800ecc0:	4b29      	ldr	r3, [pc, #164]	; (800ed68 <_vfiprintf_r+0x254>)
 800ecc2:	bb1b      	cbnz	r3, 800ed0c <_vfiprintf_r+0x1f8>
 800ecc4:	9b03      	ldr	r3, [sp, #12]
 800ecc6:	3307      	adds	r3, #7
 800ecc8:	f023 0307 	bic.w	r3, r3, #7
 800eccc:	3308      	adds	r3, #8
 800ecce:	9303      	str	r3, [sp, #12]
 800ecd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd2:	443b      	add	r3, r7
 800ecd4:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd6:	e767      	b.n	800eba8 <_vfiprintf_r+0x94>
 800ecd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecdc:	460c      	mov	r4, r1
 800ecde:	2001      	movs	r0, #1
 800ece0:	e7a5      	b.n	800ec2e <_vfiprintf_r+0x11a>
 800ece2:	2300      	movs	r3, #0
 800ece4:	3401      	adds	r4, #1
 800ece6:	9305      	str	r3, [sp, #20]
 800ece8:	4619      	mov	r1, r3
 800ecea:	f04f 0c0a 	mov.w	ip, #10
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecf4:	3a30      	subs	r2, #48	; 0x30
 800ecf6:	2a09      	cmp	r2, #9
 800ecf8:	d903      	bls.n	800ed02 <_vfiprintf_r+0x1ee>
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d0c5      	beq.n	800ec8a <_vfiprintf_r+0x176>
 800ecfe:	9105      	str	r1, [sp, #20]
 800ed00:	e7c3      	b.n	800ec8a <_vfiprintf_r+0x176>
 800ed02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed06:	4604      	mov	r4, r0
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e7f0      	b.n	800ecee <_vfiprintf_r+0x1da>
 800ed0c:	ab03      	add	r3, sp, #12
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	462a      	mov	r2, r5
 800ed12:	4b16      	ldr	r3, [pc, #88]	; (800ed6c <_vfiprintf_r+0x258>)
 800ed14:	a904      	add	r1, sp, #16
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7fd fdd6 	bl	800c8c8 <_printf_float>
 800ed1c:	4607      	mov	r7, r0
 800ed1e:	1c78      	adds	r0, r7, #1
 800ed20:	d1d6      	bne.n	800ecd0 <_vfiprintf_r+0x1bc>
 800ed22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed24:	07d9      	lsls	r1, r3, #31
 800ed26:	d405      	bmi.n	800ed34 <_vfiprintf_r+0x220>
 800ed28:	89ab      	ldrh	r3, [r5, #12]
 800ed2a:	059a      	lsls	r2, r3, #22
 800ed2c:	d402      	bmi.n	800ed34 <_vfiprintf_r+0x220>
 800ed2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed30:	f000 faaf 	bl	800f292 <__retarget_lock_release_recursive>
 800ed34:	89ab      	ldrh	r3, [r5, #12]
 800ed36:	065b      	lsls	r3, r3, #25
 800ed38:	f53f af12 	bmi.w	800eb60 <_vfiprintf_r+0x4c>
 800ed3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed3e:	e711      	b.n	800eb64 <_vfiprintf_r+0x50>
 800ed40:	ab03      	add	r3, sp, #12
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	462a      	mov	r2, r5
 800ed46:	4b09      	ldr	r3, [pc, #36]	; (800ed6c <_vfiprintf_r+0x258>)
 800ed48:	a904      	add	r1, sp, #16
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7fe f860 	bl	800ce10 <_printf_i>
 800ed50:	e7e4      	b.n	800ed1c <_vfiprintf_r+0x208>
 800ed52:	bf00      	nop
 800ed54:	08010794 	.word	0x08010794
 800ed58:	080107b4 	.word	0x080107b4
 800ed5c:	08010774 	.word	0x08010774
 800ed60:	0801061c 	.word	0x0801061c
 800ed64:	08010626 	.word	0x08010626
 800ed68:	0800c8c9 	.word	0x0800c8c9
 800ed6c:	0800eaf1 	.word	0x0800eaf1
 800ed70:	08010622 	.word	0x08010622

0800ed74 <__swbuf_r>:
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	460e      	mov	r6, r1
 800ed78:	4614      	mov	r4, r2
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	b118      	cbz	r0, 800ed86 <__swbuf_r+0x12>
 800ed7e:	6983      	ldr	r3, [r0, #24]
 800ed80:	b90b      	cbnz	r3, 800ed86 <__swbuf_r+0x12>
 800ed82:	f000 f9e7 	bl	800f154 <__sinit>
 800ed86:	4b21      	ldr	r3, [pc, #132]	; (800ee0c <__swbuf_r+0x98>)
 800ed88:	429c      	cmp	r4, r3
 800ed8a:	d12b      	bne.n	800ede4 <__swbuf_r+0x70>
 800ed8c:	686c      	ldr	r4, [r5, #4]
 800ed8e:	69a3      	ldr	r3, [r4, #24]
 800ed90:	60a3      	str	r3, [r4, #8]
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	071a      	lsls	r2, r3, #28
 800ed96:	d52f      	bpl.n	800edf8 <__swbuf_r+0x84>
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	b36b      	cbz	r3, 800edf8 <__swbuf_r+0x84>
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	6820      	ldr	r0, [r4, #0]
 800eda0:	1ac0      	subs	r0, r0, r3
 800eda2:	6963      	ldr	r3, [r4, #20]
 800eda4:	b2f6      	uxtb	r6, r6
 800eda6:	4283      	cmp	r3, r0
 800eda8:	4637      	mov	r7, r6
 800edaa:	dc04      	bgt.n	800edb6 <__swbuf_r+0x42>
 800edac:	4621      	mov	r1, r4
 800edae:	4628      	mov	r0, r5
 800edb0:	f000 f93c 	bl	800f02c <_fflush_r>
 800edb4:	bb30      	cbnz	r0, 800ee04 <__swbuf_r+0x90>
 800edb6:	68a3      	ldr	r3, [r4, #8]
 800edb8:	3b01      	subs	r3, #1
 800edba:	60a3      	str	r3, [r4, #8]
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	6022      	str	r2, [r4, #0]
 800edc2:	701e      	strb	r6, [r3, #0]
 800edc4:	6963      	ldr	r3, [r4, #20]
 800edc6:	3001      	adds	r0, #1
 800edc8:	4283      	cmp	r3, r0
 800edca:	d004      	beq.n	800edd6 <__swbuf_r+0x62>
 800edcc:	89a3      	ldrh	r3, [r4, #12]
 800edce:	07db      	lsls	r3, r3, #31
 800edd0:	d506      	bpl.n	800ede0 <__swbuf_r+0x6c>
 800edd2:	2e0a      	cmp	r6, #10
 800edd4:	d104      	bne.n	800ede0 <__swbuf_r+0x6c>
 800edd6:	4621      	mov	r1, r4
 800edd8:	4628      	mov	r0, r5
 800edda:	f000 f927 	bl	800f02c <_fflush_r>
 800edde:	b988      	cbnz	r0, 800ee04 <__swbuf_r+0x90>
 800ede0:	4638      	mov	r0, r7
 800ede2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede4:	4b0a      	ldr	r3, [pc, #40]	; (800ee10 <__swbuf_r+0x9c>)
 800ede6:	429c      	cmp	r4, r3
 800ede8:	d101      	bne.n	800edee <__swbuf_r+0x7a>
 800edea:	68ac      	ldr	r4, [r5, #8]
 800edec:	e7cf      	b.n	800ed8e <__swbuf_r+0x1a>
 800edee:	4b09      	ldr	r3, [pc, #36]	; (800ee14 <__swbuf_r+0xa0>)
 800edf0:	429c      	cmp	r4, r3
 800edf2:	bf08      	it	eq
 800edf4:	68ec      	ldreq	r4, [r5, #12]
 800edf6:	e7ca      	b.n	800ed8e <__swbuf_r+0x1a>
 800edf8:	4621      	mov	r1, r4
 800edfa:	4628      	mov	r0, r5
 800edfc:	f000 f81a 	bl	800ee34 <__swsetup_r>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d0cb      	beq.n	800ed9c <__swbuf_r+0x28>
 800ee04:	f04f 37ff 	mov.w	r7, #4294967295
 800ee08:	e7ea      	b.n	800ede0 <__swbuf_r+0x6c>
 800ee0a:	bf00      	nop
 800ee0c:	08010794 	.word	0x08010794
 800ee10:	080107b4 	.word	0x080107b4
 800ee14:	08010774 	.word	0x08010774

0800ee18 <__ascii_wctomb>:
 800ee18:	b149      	cbz	r1, 800ee2e <__ascii_wctomb+0x16>
 800ee1a:	2aff      	cmp	r2, #255	; 0xff
 800ee1c:	bf85      	ittet	hi
 800ee1e:	238a      	movhi	r3, #138	; 0x8a
 800ee20:	6003      	strhi	r3, [r0, #0]
 800ee22:	700a      	strbls	r2, [r1, #0]
 800ee24:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee28:	bf98      	it	ls
 800ee2a:	2001      	movls	r0, #1
 800ee2c:	4770      	bx	lr
 800ee2e:	4608      	mov	r0, r1
 800ee30:	4770      	bx	lr
	...

0800ee34 <__swsetup_r>:
 800ee34:	4b32      	ldr	r3, [pc, #200]	; (800ef00 <__swsetup_r+0xcc>)
 800ee36:	b570      	push	{r4, r5, r6, lr}
 800ee38:	681d      	ldr	r5, [r3, #0]
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	b125      	cbz	r5, 800ee4a <__swsetup_r+0x16>
 800ee40:	69ab      	ldr	r3, [r5, #24]
 800ee42:	b913      	cbnz	r3, 800ee4a <__swsetup_r+0x16>
 800ee44:	4628      	mov	r0, r5
 800ee46:	f000 f985 	bl	800f154 <__sinit>
 800ee4a:	4b2e      	ldr	r3, [pc, #184]	; (800ef04 <__swsetup_r+0xd0>)
 800ee4c:	429c      	cmp	r4, r3
 800ee4e:	d10f      	bne.n	800ee70 <__swsetup_r+0x3c>
 800ee50:	686c      	ldr	r4, [r5, #4]
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee58:	0719      	lsls	r1, r3, #28
 800ee5a:	d42c      	bmi.n	800eeb6 <__swsetup_r+0x82>
 800ee5c:	06dd      	lsls	r5, r3, #27
 800ee5e:	d411      	bmi.n	800ee84 <__swsetup_r+0x50>
 800ee60:	2309      	movs	r3, #9
 800ee62:	6033      	str	r3, [r6, #0]
 800ee64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee68:	81a3      	strh	r3, [r4, #12]
 800ee6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6e:	e03e      	b.n	800eeee <__swsetup_r+0xba>
 800ee70:	4b25      	ldr	r3, [pc, #148]	; (800ef08 <__swsetup_r+0xd4>)
 800ee72:	429c      	cmp	r4, r3
 800ee74:	d101      	bne.n	800ee7a <__swsetup_r+0x46>
 800ee76:	68ac      	ldr	r4, [r5, #8]
 800ee78:	e7eb      	b.n	800ee52 <__swsetup_r+0x1e>
 800ee7a:	4b24      	ldr	r3, [pc, #144]	; (800ef0c <__swsetup_r+0xd8>)
 800ee7c:	429c      	cmp	r4, r3
 800ee7e:	bf08      	it	eq
 800ee80:	68ec      	ldreq	r4, [r5, #12]
 800ee82:	e7e6      	b.n	800ee52 <__swsetup_r+0x1e>
 800ee84:	0758      	lsls	r0, r3, #29
 800ee86:	d512      	bpl.n	800eeae <__swsetup_r+0x7a>
 800ee88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee8a:	b141      	cbz	r1, 800ee9e <__swsetup_r+0x6a>
 800ee8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee90:	4299      	cmp	r1, r3
 800ee92:	d002      	beq.n	800ee9a <__swsetup_r+0x66>
 800ee94:	4630      	mov	r0, r6
 800ee96:	f7ff fb31 	bl	800e4fc <_free_r>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee9e:	89a3      	ldrh	r3, [r4, #12]
 800eea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eea4:	81a3      	strh	r3, [r4, #12]
 800eea6:	2300      	movs	r3, #0
 800eea8:	6063      	str	r3, [r4, #4]
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	89a3      	ldrh	r3, [r4, #12]
 800eeb0:	f043 0308 	orr.w	r3, r3, #8
 800eeb4:	81a3      	strh	r3, [r4, #12]
 800eeb6:	6923      	ldr	r3, [r4, #16]
 800eeb8:	b94b      	cbnz	r3, 800eece <__swsetup_r+0x9a>
 800eeba:	89a3      	ldrh	r3, [r4, #12]
 800eebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eec4:	d003      	beq.n	800eece <__swsetup_r+0x9a>
 800eec6:	4621      	mov	r1, r4
 800eec8:	4630      	mov	r0, r6
 800eeca:	f000 fa09 	bl	800f2e0 <__smakebuf_r>
 800eece:	89a0      	ldrh	r0, [r4, #12]
 800eed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eed4:	f010 0301 	ands.w	r3, r0, #1
 800eed8:	d00a      	beq.n	800eef0 <__swsetup_r+0xbc>
 800eeda:	2300      	movs	r3, #0
 800eedc:	60a3      	str	r3, [r4, #8]
 800eede:	6963      	ldr	r3, [r4, #20]
 800eee0:	425b      	negs	r3, r3
 800eee2:	61a3      	str	r3, [r4, #24]
 800eee4:	6923      	ldr	r3, [r4, #16]
 800eee6:	b943      	cbnz	r3, 800eefa <__swsetup_r+0xc6>
 800eee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eeec:	d1ba      	bne.n	800ee64 <__swsetup_r+0x30>
 800eeee:	bd70      	pop	{r4, r5, r6, pc}
 800eef0:	0781      	lsls	r1, r0, #30
 800eef2:	bf58      	it	pl
 800eef4:	6963      	ldrpl	r3, [r4, #20]
 800eef6:	60a3      	str	r3, [r4, #8]
 800eef8:	e7f4      	b.n	800eee4 <__swsetup_r+0xb0>
 800eefa:	2000      	movs	r0, #0
 800eefc:	e7f7      	b.n	800eeee <__swsetup_r+0xba>
 800eefe:	bf00      	nop
 800ef00:	2000002c 	.word	0x2000002c
 800ef04:	08010794 	.word	0x08010794
 800ef08:	080107b4 	.word	0x080107b4
 800ef0c:	08010774 	.word	0x08010774

0800ef10 <abort>:
 800ef10:	b508      	push	{r3, lr}
 800ef12:	2006      	movs	r0, #6
 800ef14:	f000 fa54 	bl	800f3c0 <raise>
 800ef18:	2001      	movs	r0, #1
 800ef1a:	f7f6 fa81 	bl	8005420 <_exit>
	...

0800ef20 <__sflush_r>:
 800ef20:	898a      	ldrh	r2, [r1, #12]
 800ef22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef26:	4605      	mov	r5, r0
 800ef28:	0710      	lsls	r0, r2, #28
 800ef2a:	460c      	mov	r4, r1
 800ef2c:	d458      	bmi.n	800efe0 <__sflush_r+0xc0>
 800ef2e:	684b      	ldr	r3, [r1, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dc05      	bgt.n	800ef40 <__sflush_r+0x20>
 800ef34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	dc02      	bgt.n	800ef40 <__sflush_r+0x20>
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef42:	2e00      	cmp	r6, #0
 800ef44:	d0f9      	beq.n	800ef3a <__sflush_r+0x1a>
 800ef46:	2300      	movs	r3, #0
 800ef48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef4c:	682f      	ldr	r7, [r5, #0]
 800ef4e:	602b      	str	r3, [r5, #0]
 800ef50:	d032      	beq.n	800efb8 <__sflush_r+0x98>
 800ef52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef54:	89a3      	ldrh	r3, [r4, #12]
 800ef56:	075a      	lsls	r2, r3, #29
 800ef58:	d505      	bpl.n	800ef66 <__sflush_r+0x46>
 800ef5a:	6863      	ldr	r3, [r4, #4]
 800ef5c:	1ac0      	subs	r0, r0, r3
 800ef5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef60:	b10b      	cbz	r3, 800ef66 <__sflush_r+0x46>
 800ef62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef64:	1ac0      	subs	r0, r0, r3
 800ef66:	2300      	movs	r3, #0
 800ef68:	4602      	mov	r2, r0
 800ef6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef6c:	6a21      	ldr	r1, [r4, #32]
 800ef6e:	4628      	mov	r0, r5
 800ef70:	47b0      	blx	r6
 800ef72:	1c43      	adds	r3, r0, #1
 800ef74:	89a3      	ldrh	r3, [r4, #12]
 800ef76:	d106      	bne.n	800ef86 <__sflush_r+0x66>
 800ef78:	6829      	ldr	r1, [r5, #0]
 800ef7a:	291d      	cmp	r1, #29
 800ef7c:	d82c      	bhi.n	800efd8 <__sflush_r+0xb8>
 800ef7e:	4a2a      	ldr	r2, [pc, #168]	; (800f028 <__sflush_r+0x108>)
 800ef80:	40ca      	lsrs	r2, r1
 800ef82:	07d6      	lsls	r6, r2, #31
 800ef84:	d528      	bpl.n	800efd8 <__sflush_r+0xb8>
 800ef86:	2200      	movs	r2, #0
 800ef88:	6062      	str	r2, [r4, #4]
 800ef8a:	04d9      	lsls	r1, r3, #19
 800ef8c:	6922      	ldr	r2, [r4, #16]
 800ef8e:	6022      	str	r2, [r4, #0]
 800ef90:	d504      	bpl.n	800ef9c <__sflush_r+0x7c>
 800ef92:	1c42      	adds	r2, r0, #1
 800ef94:	d101      	bne.n	800ef9a <__sflush_r+0x7a>
 800ef96:	682b      	ldr	r3, [r5, #0]
 800ef98:	b903      	cbnz	r3, 800ef9c <__sflush_r+0x7c>
 800ef9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ef9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef9e:	602f      	str	r7, [r5, #0]
 800efa0:	2900      	cmp	r1, #0
 800efa2:	d0ca      	beq.n	800ef3a <__sflush_r+0x1a>
 800efa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efa8:	4299      	cmp	r1, r3
 800efaa:	d002      	beq.n	800efb2 <__sflush_r+0x92>
 800efac:	4628      	mov	r0, r5
 800efae:	f7ff faa5 	bl	800e4fc <_free_r>
 800efb2:	2000      	movs	r0, #0
 800efb4:	6360      	str	r0, [r4, #52]	; 0x34
 800efb6:	e7c1      	b.n	800ef3c <__sflush_r+0x1c>
 800efb8:	6a21      	ldr	r1, [r4, #32]
 800efba:	2301      	movs	r3, #1
 800efbc:	4628      	mov	r0, r5
 800efbe:	47b0      	blx	r6
 800efc0:	1c41      	adds	r1, r0, #1
 800efc2:	d1c7      	bne.n	800ef54 <__sflush_r+0x34>
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d0c4      	beq.n	800ef54 <__sflush_r+0x34>
 800efca:	2b1d      	cmp	r3, #29
 800efcc:	d001      	beq.n	800efd2 <__sflush_r+0xb2>
 800efce:	2b16      	cmp	r3, #22
 800efd0:	d101      	bne.n	800efd6 <__sflush_r+0xb6>
 800efd2:	602f      	str	r7, [r5, #0]
 800efd4:	e7b1      	b.n	800ef3a <__sflush_r+0x1a>
 800efd6:	89a3      	ldrh	r3, [r4, #12]
 800efd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	e7ad      	b.n	800ef3c <__sflush_r+0x1c>
 800efe0:	690f      	ldr	r7, [r1, #16]
 800efe2:	2f00      	cmp	r7, #0
 800efe4:	d0a9      	beq.n	800ef3a <__sflush_r+0x1a>
 800efe6:	0793      	lsls	r3, r2, #30
 800efe8:	680e      	ldr	r6, [r1, #0]
 800efea:	bf08      	it	eq
 800efec:	694b      	ldreq	r3, [r1, #20]
 800efee:	600f      	str	r7, [r1, #0]
 800eff0:	bf18      	it	ne
 800eff2:	2300      	movne	r3, #0
 800eff4:	eba6 0807 	sub.w	r8, r6, r7
 800eff8:	608b      	str	r3, [r1, #8]
 800effa:	f1b8 0f00 	cmp.w	r8, #0
 800effe:	dd9c      	ble.n	800ef3a <__sflush_r+0x1a>
 800f000:	6a21      	ldr	r1, [r4, #32]
 800f002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f004:	4643      	mov	r3, r8
 800f006:	463a      	mov	r2, r7
 800f008:	4628      	mov	r0, r5
 800f00a:	47b0      	blx	r6
 800f00c:	2800      	cmp	r0, #0
 800f00e:	dc06      	bgt.n	800f01e <__sflush_r+0xfe>
 800f010:	89a3      	ldrh	r3, [r4, #12]
 800f012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f016:	81a3      	strh	r3, [r4, #12]
 800f018:	f04f 30ff 	mov.w	r0, #4294967295
 800f01c:	e78e      	b.n	800ef3c <__sflush_r+0x1c>
 800f01e:	4407      	add	r7, r0
 800f020:	eba8 0800 	sub.w	r8, r8, r0
 800f024:	e7e9      	b.n	800effa <__sflush_r+0xda>
 800f026:	bf00      	nop
 800f028:	20400001 	.word	0x20400001

0800f02c <_fflush_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	690b      	ldr	r3, [r1, #16]
 800f030:	4605      	mov	r5, r0
 800f032:	460c      	mov	r4, r1
 800f034:	b913      	cbnz	r3, 800f03c <_fflush_r+0x10>
 800f036:	2500      	movs	r5, #0
 800f038:	4628      	mov	r0, r5
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	b118      	cbz	r0, 800f046 <_fflush_r+0x1a>
 800f03e:	6983      	ldr	r3, [r0, #24]
 800f040:	b90b      	cbnz	r3, 800f046 <_fflush_r+0x1a>
 800f042:	f000 f887 	bl	800f154 <__sinit>
 800f046:	4b14      	ldr	r3, [pc, #80]	; (800f098 <_fflush_r+0x6c>)
 800f048:	429c      	cmp	r4, r3
 800f04a:	d11b      	bne.n	800f084 <_fflush_r+0x58>
 800f04c:	686c      	ldr	r4, [r5, #4]
 800f04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d0ef      	beq.n	800f036 <_fflush_r+0xa>
 800f056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f058:	07d0      	lsls	r0, r2, #31
 800f05a:	d404      	bmi.n	800f066 <_fflush_r+0x3a>
 800f05c:	0599      	lsls	r1, r3, #22
 800f05e:	d402      	bmi.n	800f066 <_fflush_r+0x3a>
 800f060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f062:	f000 f915 	bl	800f290 <__retarget_lock_acquire_recursive>
 800f066:	4628      	mov	r0, r5
 800f068:	4621      	mov	r1, r4
 800f06a:	f7ff ff59 	bl	800ef20 <__sflush_r>
 800f06e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f070:	07da      	lsls	r2, r3, #31
 800f072:	4605      	mov	r5, r0
 800f074:	d4e0      	bmi.n	800f038 <_fflush_r+0xc>
 800f076:	89a3      	ldrh	r3, [r4, #12]
 800f078:	059b      	lsls	r3, r3, #22
 800f07a:	d4dd      	bmi.n	800f038 <_fflush_r+0xc>
 800f07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f07e:	f000 f908 	bl	800f292 <__retarget_lock_release_recursive>
 800f082:	e7d9      	b.n	800f038 <_fflush_r+0xc>
 800f084:	4b05      	ldr	r3, [pc, #20]	; (800f09c <_fflush_r+0x70>)
 800f086:	429c      	cmp	r4, r3
 800f088:	d101      	bne.n	800f08e <_fflush_r+0x62>
 800f08a:	68ac      	ldr	r4, [r5, #8]
 800f08c:	e7df      	b.n	800f04e <_fflush_r+0x22>
 800f08e:	4b04      	ldr	r3, [pc, #16]	; (800f0a0 <_fflush_r+0x74>)
 800f090:	429c      	cmp	r4, r3
 800f092:	bf08      	it	eq
 800f094:	68ec      	ldreq	r4, [r5, #12]
 800f096:	e7da      	b.n	800f04e <_fflush_r+0x22>
 800f098:	08010794 	.word	0x08010794
 800f09c:	080107b4 	.word	0x080107b4
 800f0a0:	08010774 	.word	0x08010774

0800f0a4 <std>:
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	b510      	push	{r4, lr}
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0b2:	6083      	str	r3, [r0, #8]
 800f0b4:	8181      	strh	r1, [r0, #12]
 800f0b6:	6643      	str	r3, [r0, #100]	; 0x64
 800f0b8:	81c2      	strh	r2, [r0, #14]
 800f0ba:	6183      	str	r3, [r0, #24]
 800f0bc:	4619      	mov	r1, r3
 800f0be:	2208      	movs	r2, #8
 800f0c0:	305c      	adds	r0, #92	; 0x5c
 800f0c2:	f7fd fb59 	bl	800c778 <memset>
 800f0c6:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <std+0x38>)
 800f0c8:	6263      	str	r3, [r4, #36]	; 0x24
 800f0ca:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <std+0x3c>)
 800f0cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0ce:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <std+0x40>)
 800f0d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0d2:	4b05      	ldr	r3, [pc, #20]	; (800f0e8 <std+0x44>)
 800f0d4:	6224      	str	r4, [r4, #32]
 800f0d6:	6323      	str	r3, [r4, #48]	; 0x30
 800f0d8:	bd10      	pop	{r4, pc}
 800f0da:	bf00      	nop
 800f0dc:	0800f3f9 	.word	0x0800f3f9
 800f0e0:	0800f41b 	.word	0x0800f41b
 800f0e4:	0800f453 	.word	0x0800f453
 800f0e8:	0800f477 	.word	0x0800f477

0800f0ec <_cleanup_r>:
 800f0ec:	4901      	ldr	r1, [pc, #4]	; (800f0f4 <_cleanup_r+0x8>)
 800f0ee:	f000 b8af 	b.w	800f250 <_fwalk_reent>
 800f0f2:	bf00      	nop
 800f0f4:	0800f02d 	.word	0x0800f02d

0800f0f8 <__sfmoreglue>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	2268      	movs	r2, #104	; 0x68
 800f0fc:	1e4d      	subs	r5, r1, #1
 800f0fe:	4355      	muls	r5, r2
 800f100:	460e      	mov	r6, r1
 800f102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f106:	f7ff fa65 	bl	800e5d4 <_malloc_r>
 800f10a:	4604      	mov	r4, r0
 800f10c:	b140      	cbz	r0, 800f120 <__sfmoreglue+0x28>
 800f10e:	2100      	movs	r1, #0
 800f110:	e9c0 1600 	strd	r1, r6, [r0]
 800f114:	300c      	adds	r0, #12
 800f116:	60a0      	str	r0, [r4, #8]
 800f118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f11c:	f7fd fb2c 	bl	800c778 <memset>
 800f120:	4620      	mov	r0, r4
 800f122:	bd70      	pop	{r4, r5, r6, pc}

0800f124 <__sfp_lock_acquire>:
 800f124:	4801      	ldr	r0, [pc, #4]	; (800f12c <__sfp_lock_acquire+0x8>)
 800f126:	f000 b8b3 	b.w	800f290 <__retarget_lock_acquire_recursive>
 800f12a:	bf00      	nop
 800f12c:	2000082d 	.word	0x2000082d

0800f130 <__sfp_lock_release>:
 800f130:	4801      	ldr	r0, [pc, #4]	; (800f138 <__sfp_lock_release+0x8>)
 800f132:	f000 b8ae 	b.w	800f292 <__retarget_lock_release_recursive>
 800f136:	bf00      	nop
 800f138:	2000082d 	.word	0x2000082d

0800f13c <__sinit_lock_acquire>:
 800f13c:	4801      	ldr	r0, [pc, #4]	; (800f144 <__sinit_lock_acquire+0x8>)
 800f13e:	f000 b8a7 	b.w	800f290 <__retarget_lock_acquire_recursive>
 800f142:	bf00      	nop
 800f144:	2000082e 	.word	0x2000082e

0800f148 <__sinit_lock_release>:
 800f148:	4801      	ldr	r0, [pc, #4]	; (800f150 <__sinit_lock_release+0x8>)
 800f14a:	f000 b8a2 	b.w	800f292 <__retarget_lock_release_recursive>
 800f14e:	bf00      	nop
 800f150:	2000082e 	.word	0x2000082e

0800f154 <__sinit>:
 800f154:	b510      	push	{r4, lr}
 800f156:	4604      	mov	r4, r0
 800f158:	f7ff fff0 	bl	800f13c <__sinit_lock_acquire>
 800f15c:	69a3      	ldr	r3, [r4, #24]
 800f15e:	b11b      	cbz	r3, 800f168 <__sinit+0x14>
 800f160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f164:	f7ff bff0 	b.w	800f148 <__sinit_lock_release>
 800f168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f16c:	6523      	str	r3, [r4, #80]	; 0x50
 800f16e:	4b13      	ldr	r3, [pc, #76]	; (800f1bc <__sinit+0x68>)
 800f170:	4a13      	ldr	r2, [pc, #76]	; (800f1c0 <__sinit+0x6c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	62a2      	str	r2, [r4, #40]	; 0x28
 800f176:	42a3      	cmp	r3, r4
 800f178:	bf04      	itt	eq
 800f17a:	2301      	moveq	r3, #1
 800f17c:	61a3      	streq	r3, [r4, #24]
 800f17e:	4620      	mov	r0, r4
 800f180:	f000 f820 	bl	800f1c4 <__sfp>
 800f184:	6060      	str	r0, [r4, #4]
 800f186:	4620      	mov	r0, r4
 800f188:	f000 f81c 	bl	800f1c4 <__sfp>
 800f18c:	60a0      	str	r0, [r4, #8]
 800f18e:	4620      	mov	r0, r4
 800f190:	f000 f818 	bl	800f1c4 <__sfp>
 800f194:	2200      	movs	r2, #0
 800f196:	60e0      	str	r0, [r4, #12]
 800f198:	2104      	movs	r1, #4
 800f19a:	6860      	ldr	r0, [r4, #4]
 800f19c:	f7ff ff82 	bl	800f0a4 <std>
 800f1a0:	68a0      	ldr	r0, [r4, #8]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	2109      	movs	r1, #9
 800f1a6:	f7ff ff7d 	bl	800f0a4 <std>
 800f1aa:	68e0      	ldr	r0, [r4, #12]
 800f1ac:	2202      	movs	r2, #2
 800f1ae:	2112      	movs	r1, #18
 800f1b0:	f7ff ff78 	bl	800f0a4 <std>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	61a3      	str	r3, [r4, #24]
 800f1b8:	e7d2      	b.n	800f160 <__sinit+0xc>
 800f1ba:	bf00      	nop
 800f1bc:	080103f8 	.word	0x080103f8
 800f1c0:	0800f0ed 	.word	0x0800f0ed

0800f1c4 <__sfp>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	4607      	mov	r7, r0
 800f1c8:	f7ff ffac 	bl	800f124 <__sfp_lock_acquire>
 800f1cc:	4b1e      	ldr	r3, [pc, #120]	; (800f248 <__sfp+0x84>)
 800f1ce:	681e      	ldr	r6, [r3, #0]
 800f1d0:	69b3      	ldr	r3, [r6, #24]
 800f1d2:	b913      	cbnz	r3, 800f1da <__sfp+0x16>
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	f7ff ffbd 	bl	800f154 <__sinit>
 800f1da:	3648      	adds	r6, #72	; 0x48
 800f1dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1e0:	3b01      	subs	r3, #1
 800f1e2:	d503      	bpl.n	800f1ec <__sfp+0x28>
 800f1e4:	6833      	ldr	r3, [r6, #0]
 800f1e6:	b30b      	cbz	r3, 800f22c <__sfp+0x68>
 800f1e8:	6836      	ldr	r6, [r6, #0]
 800f1ea:	e7f7      	b.n	800f1dc <__sfp+0x18>
 800f1ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1f0:	b9d5      	cbnz	r5, 800f228 <__sfp+0x64>
 800f1f2:	4b16      	ldr	r3, [pc, #88]	; (800f24c <__sfp+0x88>)
 800f1f4:	60e3      	str	r3, [r4, #12]
 800f1f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1fa:	6665      	str	r5, [r4, #100]	; 0x64
 800f1fc:	f000 f847 	bl	800f28e <__retarget_lock_init_recursive>
 800f200:	f7ff ff96 	bl	800f130 <__sfp_lock_release>
 800f204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f20c:	6025      	str	r5, [r4, #0]
 800f20e:	61a5      	str	r5, [r4, #24]
 800f210:	2208      	movs	r2, #8
 800f212:	4629      	mov	r1, r5
 800f214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f218:	f7fd faae 	bl	800c778 <memset>
 800f21c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f224:	4620      	mov	r0, r4
 800f226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f228:	3468      	adds	r4, #104	; 0x68
 800f22a:	e7d9      	b.n	800f1e0 <__sfp+0x1c>
 800f22c:	2104      	movs	r1, #4
 800f22e:	4638      	mov	r0, r7
 800f230:	f7ff ff62 	bl	800f0f8 <__sfmoreglue>
 800f234:	4604      	mov	r4, r0
 800f236:	6030      	str	r0, [r6, #0]
 800f238:	2800      	cmp	r0, #0
 800f23a:	d1d5      	bne.n	800f1e8 <__sfp+0x24>
 800f23c:	f7ff ff78 	bl	800f130 <__sfp_lock_release>
 800f240:	230c      	movs	r3, #12
 800f242:	603b      	str	r3, [r7, #0]
 800f244:	e7ee      	b.n	800f224 <__sfp+0x60>
 800f246:	bf00      	nop
 800f248:	080103f8 	.word	0x080103f8
 800f24c:	ffff0001 	.word	0xffff0001

0800f250 <_fwalk_reent>:
 800f250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f254:	4606      	mov	r6, r0
 800f256:	4688      	mov	r8, r1
 800f258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f25c:	2700      	movs	r7, #0
 800f25e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f262:	f1b9 0901 	subs.w	r9, r9, #1
 800f266:	d505      	bpl.n	800f274 <_fwalk_reent+0x24>
 800f268:	6824      	ldr	r4, [r4, #0]
 800f26a:	2c00      	cmp	r4, #0
 800f26c:	d1f7      	bne.n	800f25e <_fwalk_reent+0xe>
 800f26e:	4638      	mov	r0, r7
 800f270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f274:	89ab      	ldrh	r3, [r5, #12]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d907      	bls.n	800f28a <_fwalk_reent+0x3a>
 800f27a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f27e:	3301      	adds	r3, #1
 800f280:	d003      	beq.n	800f28a <_fwalk_reent+0x3a>
 800f282:	4629      	mov	r1, r5
 800f284:	4630      	mov	r0, r6
 800f286:	47c0      	blx	r8
 800f288:	4307      	orrs	r7, r0
 800f28a:	3568      	adds	r5, #104	; 0x68
 800f28c:	e7e9      	b.n	800f262 <_fwalk_reent+0x12>

0800f28e <__retarget_lock_init_recursive>:
 800f28e:	4770      	bx	lr

0800f290 <__retarget_lock_acquire_recursive>:
 800f290:	4770      	bx	lr

0800f292 <__retarget_lock_release_recursive>:
 800f292:	4770      	bx	lr

0800f294 <__swhatbuf_r>:
 800f294:	b570      	push	{r4, r5, r6, lr}
 800f296:	460e      	mov	r6, r1
 800f298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f29c:	2900      	cmp	r1, #0
 800f29e:	b096      	sub	sp, #88	; 0x58
 800f2a0:	4614      	mov	r4, r2
 800f2a2:	461d      	mov	r5, r3
 800f2a4:	da08      	bge.n	800f2b8 <__swhatbuf_r+0x24>
 800f2a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	602a      	str	r2, [r5, #0]
 800f2ae:	061a      	lsls	r2, r3, #24
 800f2b0:	d410      	bmi.n	800f2d4 <__swhatbuf_r+0x40>
 800f2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2b6:	e00e      	b.n	800f2d6 <__swhatbuf_r+0x42>
 800f2b8:	466a      	mov	r2, sp
 800f2ba:	f000 f903 	bl	800f4c4 <_fstat_r>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	dbf1      	blt.n	800f2a6 <__swhatbuf_r+0x12>
 800f2c2:	9a01      	ldr	r2, [sp, #4]
 800f2c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2cc:	425a      	negs	r2, r3
 800f2ce:	415a      	adcs	r2, r3
 800f2d0:	602a      	str	r2, [r5, #0]
 800f2d2:	e7ee      	b.n	800f2b2 <__swhatbuf_r+0x1e>
 800f2d4:	2340      	movs	r3, #64	; 0x40
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	b016      	add	sp, #88	; 0x58
 800f2dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f2e0 <__smakebuf_r>:
 800f2e0:	898b      	ldrh	r3, [r1, #12]
 800f2e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2e4:	079d      	lsls	r5, r3, #30
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	460c      	mov	r4, r1
 800f2ea:	d507      	bpl.n	800f2fc <__smakebuf_r+0x1c>
 800f2ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	6123      	str	r3, [r4, #16]
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	6163      	str	r3, [r4, #20]
 800f2f8:	b002      	add	sp, #8
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	ab01      	add	r3, sp, #4
 800f2fe:	466a      	mov	r2, sp
 800f300:	f7ff ffc8 	bl	800f294 <__swhatbuf_r>
 800f304:	9900      	ldr	r1, [sp, #0]
 800f306:	4605      	mov	r5, r0
 800f308:	4630      	mov	r0, r6
 800f30a:	f7ff f963 	bl	800e5d4 <_malloc_r>
 800f30e:	b948      	cbnz	r0, 800f324 <__smakebuf_r+0x44>
 800f310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f314:	059a      	lsls	r2, r3, #22
 800f316:	d4ef      	bmi.n	800f2f8 <__smakebuf_r+0x18>
 800f318:	f023 0303 	bic.w	r3, r3, #3
 800f31c:	f043 0302 	orr.w	r3, r3, #2
 800f320:	81a3      	strh	r3, [r4, #12]
 800f322:	e7e3      	b.n	800f2ec <__smakebuf_r+0xc>
 800f324:	4b0d      	ldr	r3, [pc, #52]	; (800f35c <__smakebuf_r+0x7c>)
 800f326:	62b3      	str	r3, [r6, #40]	; 0x28
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	6020      	str	r0, [r4, #0]
 800f32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	9b00      	ldr	r3, [sp, #0]
 800f334:	6163      	str	r3, [r4, #20]
 800f336:	9b01      	ldr	r3, [sp, #4]
 800f338:	6120      	str	r0, [r4, #16]
 800f33a:	b15b      	cbz	r3, 800f354 <__smakebuf_r+0x74>
 800f33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f340:	4630      	mov	r0, r6
 800f342:	f000 f8d1 	bl	800f4e8 <_isatty_r>
 800f346:	b128      	cbz	r0, 800f354 <__smakebuf_r+0x74>
 800f348:	89a3      	ldrh	r3, [r4, #12]
 800f34a:	f023 0303 	bic.w	r3, r3, #3
 800f34e:	f043 0301 	orr.w	r3, r3, #1
 800f352:	81a3      	strh	r3, [r4, #12]
 800f354:	89a0      	ldrh	r0, [r4, #12]
 800f356:	4305      	orrs	r5, r0
 800f358:	81a5      	strh	r5, [r4, #12]
 800f35a:	e7cd      	b.n	800f2f8 <__smakebuf_r+0x18>
 800f35c:	0800f0ed 	.word	0x0800f0ed

0800f360 <_malloc_usable_size_r>:
 800f360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f364:	1f18      	subs	r0, r3, #4
 800f366:	2b00      	cmp	r3, #0
 800f368:	bfbc      	itt	lt
 800f36a:	580b      	ldrlt	r3, [r1, r0]
 800f36c:	18c0      	addlt	r0, r0, r3
 800f36e:	4770      	bx	lr

0800f370 <_raise_r>:
 800f370:	291f      	cmp	r1, #31
 800f372:	b538      	push	{r3, r4, r5, lr}
 800f374:	4604      	mov	r4, r0
 800f376:	460d      	mov	r5, r1
 800f378:	d904      	bls.n	800f384 <_raise_r+0x14>
 800f37a:	2316      	movs	r3, #22
 800f37c:	6003      	str	r3, [r0, #0]
 800f37e:	f04f 30ff 	mov.w	r0, #4294967295
 800f382:	bd38      	pop	{r3, r4, r5, pc}
 800f384:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f386:	b112      	cbz	r2, 800f38e <_raise_r+0x1e>
 800f388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f38c:	b94b      	cbnz	r3, 800f3a2 <_raise_r+0x32>
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 f830 	bl	800f3f4 <_getpid_r>
 800f394:	462a      	mov	r2, r5
 800f396:	4601      	mov	r1, r0
 800f398:	4620      	mov	r0, r4
 800f39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f39e:	f000 b817 	b.w	800f3d0 <_kill_r>
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d00a      	beq.n	800f3bc <_raise_r+0x4c>
 800f3a6:	1c59      	adds	r1, r3, #1
 800f3a8:	d103      	bne.n	800f3b2 <_raise_r+0x42>
 800f3aa:	2316      	movs	r3, #22
 800f3ac:	6003      	str	r3, [r0, #0]
 800f3ae:	2001      	movs	r0, #1
 800f3b0:	e7e7      	b.n	800f382 <_raise_r+0x12>
 800f3b2:	2400      	movs	r4, #0
 800f3b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	4798      	blx	r3
 800f3bc:	2000      	movs	r0, #0
 800f3be:	e7e0      	b.n	800f382 <_raise_r+0x12>

0800f3c0 <raise>:
 800f3c0:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <raise+0xc>)
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f7ff bfd3 	b.w	800f370 <_raise_r>
 800f3ca:	bf00      	nop
 800f3cc:	2000002c 	.word	0x2000002c

0800f3d0 <_kill_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	; (800f3f0 <_kill_r+0x20>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	4611      	mov	r1, r2
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	f7f6 f80f 	bl	8005400 <_kill>
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	d102      	bne.n	800f3ec <_kill_r+0x1c>
 800f3e6:	682b      	ldr	r3, [r5, #0]
 800f3e8:	b103      	cbz	r3, 800f3ec <_kill_r+0x1c>
 800f3ea:	6023      	str	r3, [r4, #0]
 800f3ec:	bd38      	pop	{r3, r4, r5, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20000828 	.word	0x20000828

0800f3f4 <_getpid_r>:
 800f3f4:	f7f5 bffc 	b.w	80053f0 <_getpid>

0800f3f8 <__sread>:
 800f3f8:	b510      	push	{r4, lr}
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f400:	f000 f894 	bl	800f52c <_read_r>
 800f404:	2800      	cmp	r0, #0
 800f406:	bfab      	itete	ge
 800f408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f40a:	89a3      	ldrhlt	r3, [r4, #12]
 800f40c:	181b      	addge	r3, r3, r0
 800f40e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f412:	bfac      	ite	ge
 800f414:	6563      	strge	r3, [r4, #84]	; 0x54
 800f416:	81a3      	strhlt	r3, [r4, #12]
 800f418:	bd10      	pop	{r4, pc}

0800f41a <__swrite>:
 800f41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41e:	461f      	mov	r7, r3
 800f420:	898b      	ldrh	r3, [r1, #12]
 800f422:	05db      	lsls	r3, r3, #23
 800f424:	4605      	mov	r5, r0
 800f426:	460c      	mov	r4, r1
 800f428:	4616      	mov	r6, r2
 800f42a:	d505      	bpl.n	800f438 <__swrite+0x1e>
 800f42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f430:	2302      	movs	r3, #2
 800f432:	2200      	movs	r2, #0
 800f434:	f000 f868 	bl	800f508 <_lseek_r>
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f43e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f442:	81a3      	strh	r3, [r4, #12]
 800f444:	4632      	mov	r2, r6
 800f446:	463b      	mov	r3, r7
 800f448:	4628      	mov	r0, r5
 800f44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f44e:	f000 b817 	b.w	800f480 <_write_r>

0800f452 <__sseek>:
 800f452:	b510      	push	{r4, lr}
 800f454:	460c      	mov	r4, r1
 800f456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f45a:	f000 f855 	bl	800f508 <_lseek_r>
 800f45e:	1c43      	adds	r3, r0, #1
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	bf15      	itete	ne
 800f464:	6560      	strne	r0, [r4, #84]	; 0x54
 800f466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f46a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f46e:	81a3      	strheq	r3, [r4, #12]
 800f470:	bf18      	it	ne
 800f472:	81a3      	strhne	r3, [r4, #12]
 800f474:	bd10      	pop	{r4, pc}

0800f476 <__sclose>:
 800f476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f47a:	f000 b813 	b.w	800f4a4 <_close_r>
	...

0800f480 <_write_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d07      	ldr	r5, [pc, #28]	; (800f4a0 <_write_r+0x20>)
 800f484:	4604      	mov	r4, r0
 800f486:	4608      	mov	r0, r1
 800f488:	4611      	mov	r1, r2
 800f48a:	2200      	movs	r2, #0
 800f48c:	602a      	str	r2, [r5, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	f7f5 ffed 	bl	800546e <_write>
 800f494:	1c43      	adds	r3, r0, #1
 800f496:	d102      	bne.n	800f49e <_write_r+0x1e>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	b103      	cbz	r3, 800f49e <_write_r+0x1e>
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
 800f4a0:	20000828 	.word	0x20000828

0800f4a4 <_close_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	4d06      	ldr	r5, [pc, #24]	; (800f4c0 <_close_r+0x1c>)
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	4608      	mov	r0, r1
 800f4ae:	602b      	str	r3, [r5, #0]
 800f4b0:	f7f5 fff9 	bl	80054a6 <_close>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	d102      	bne.n	800f4be <_close_r+0x1a>
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	b103      	cbz	r3, 800f4be <_close_r+0x1a>
 800f4bc:	6023      	str	r3, [r4, #0]
 800f4be:	bd38      	pop	{r3, r4, r5, pc}
 800f4c0:	20000828 	.word	0x20000828

0800f4c4 <_fstat_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d07      	ldr	r5, [pc, #28]	; (800f4e4 <_fstat_r+0x20>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	f7f5 fff4 	bl	80054be <_fstat>
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	d102      	bne.n	800f4e0 <_fstat_r+0x1c>
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	b103      	cbz	r3, 800f4e0 <_fstat_r+0x1c>
 800f4de:	6023      	str	r3, [r4, #0]
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000828 	.word	0x20000828

0800f4e8 <_isatty_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d06      	ldr	r5, [pc, #24]	; (800f504 <_isatty_r+0x1c>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f5 fff3 	bl	80054de <_isatty>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_isatty_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_isatty_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	20000828 	.word	0x20000828

0800f508 <_lseek_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	; (800f528 <_lseek_r+0x20>)
 800f50c:	4604      	mov	r4, r0
 800f50e:	4608      	mov	r0, r1
 800f510:	4611      	mov	r1, r2
 800f512:	2200      	movs	r2, #0
 800f514:	602a      	str	r2, [r5, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	f7f5 ffec 	bl	80054f4 <_lseek>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_lseek_r+0x1e>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b103      	cbz	r3, 800f526 <_lseek_r+0x1e>
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	20000828 	.word	0x20000828

0800f52c <_read_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d07      	ldr	r5, [pc, #28]	; (800f54c <_read_r+0x20>)
 800f530:	4604      	mov	r4, r0
 800f532:	4608      	mov	r0, r1
 800f534:	4611      	mov	r1, r2
 800f536:	2200      	movs	r2, #0
 800f538:	602a      	str	r2, [r5, #0]
 800f53a:	461a      	mov	r2, r3
 800f53c:	f7f5 ff7a 	bl	8005434 <_read>
 800f540:	1c43      	adds	r3, r0, #1
 800f542:	d102      	bne.n	800f54a <_read_r+0x1e>
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	b103      	cbz	r3, 800f54a <_read_r+0x1e>
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	bd38      	pop	{r3, r4, r5, pc}
 800f54c:	20000828 	.word	0x20000828

0800f550 <cosf>:
 800f550:	ee10 3a10 	vmov	r3, s0
 800f554:	b507      	push	{r0, r1, r2, lr}
 800f556:	4a1e      	ldr	r2, [pc, #120]	; (800f5d0 <cosf+0x80>)
 800f558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f55c:	4293      	cmp	r3, r2
 800f55e:	dc06      	bgt.n	800f56e <cosf+0x1e>
 800f560:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f5d4 <cosf+0x84>
 800f564:	b003      	add	sp, #12
 800f566:	f85d eb04 	ldr.w	lr, [sp], #4
 800f56a:	f000 bacd 	b.w	800fb08 <__kernel_cosf>
 800f56e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f572:	db04      	blt.n	800f57e <cosf+0x2e>
 800f574:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f578:	b003      	add	sp, #12
 800f57a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f57e:	4668      	mov	r0, sp
 800f580:	f000 f982 	bl	800f888 <__ieee754_rem_pio2f>
 800f584:	f000 0003 	and.w	r0, r0, #3
 800f588:	2801      	cmp	r0, #1
 800f58a:	d009      	beq.n	800f5a0 <cosf+0x50>
 800f58c:	2802      	cmp	r0, #2
 800f58e:	d010      	beq.n	800f5b2 <cosf+0x62>
 800f590:	b9b0      	cbnz	r0, 800f5c0 <cosf+0x70>
 800f592:	eddd 0a01 	vldr	s1, [sp, #4]
 800f596:	ed9d 0a00 	vldr	s0, [sp]
 800f59a:	f000 fab5 	bl	800fb08 <__kernel_cosf>
 800f59e:	e7eb      	b.n	800f578 <cosf+0x28>
 800f5a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5a4:	ed9d 0a00 	vldr	s0, [sp]
 800f5a8:	f000 fd84 	bl	80100b4 <__kernel_sinf>
 800f5ac:	eeb1 0a40 	vneg.f32	s0, s0
 800f5b0:	e7e2      	b.n	800f578 <cosf+0x28>
 800f5b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5b6:	ed9d 0a00 	vldr	s0, [sp]
 800f5ba:	f000 faa5 	bl	800fb08 <__kernel_cosf>
 800f5be:	e7f5      	b.n	800f5ac <cosf+0x5c>
 800f5c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5c4:	ed9d 0a00 	vldr	s0, [sp]
 800f5c8:	2001      	movs	r0, #1
 800f5ca:	f000 fd73 	bl	80100b4 <__kernel_sinf>
 800f5ce:	e7d3      	b.n	800f578 <cosf+0x28>
 800f5d0:	3f490fd8 	.word	0x3f490fd8
 800f5d4:	00000000 	.word	0x00000000

0800f5d8 <fmaxf>:
 800f5d8:	b508      	push	{r3, lr}
 800f5da:	ed2d 8b02 	vpush	{d8}
 800f5de:	eeb0 8a40 	vmov.f32	s16, s0
 800f5e2:	eef0 8a60 	vmov.f32	s17, s1
 800f5e6:	f000 f82d 	bl	800f644 <__fpclassifyf>
 800f5ea:	b148      	cbz	r0, 800f600 <fmaxf+0x28>
 800f5ec:	eeb0 0a68 	vmov.f32	s0, s17
 800f5f0:	f000 f828 	bl	800f644 <__fpclassifyf>
 800f5f4:	b130      	cbz	r0, 800f604 <fmaxf+0x2c>
 800f5f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fe:	dc01      	bgt.n	800f604 <fmaxf+0x2c>
 800f600:	eeb0 8a68 	vmov.f32	s16, s17
 800f604:	eeb0 0a48 	vmov.f32	s0, s16
 800f608:	ecbd 8b02 	vpop	{d8}
 800f60c:	bd08      	pop	{r3, pc}

0800f60e <fminf>:
 800f60e:	b508      	push	{r3, lr}
 800f610:	ed2d 8b02 	vpush	{d8}
 800f614:	eeb0 8a40 	vmov.f32	s16, s0
 800f618:	eef0 8a60 	vmov.f32	s17, s1
 800f61c:	f000 f812 	bl	800f644 <__fpclassifyf>
 800f620:	b148      	cbz	r0, 800f636 <fminf+0x28>
 800f622:	eeb0 0a68 	vmov.f32	s0, s17
 800f626:	f000 f80d 	bl	800f644 <__fpclassifyf>
 800f62a:	b130      	cbz	r0, 800f63a <fminf+0x2c>
 800f62c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f634:	d401      	bmi.n	800f63a <fminf+0x2c>
 800f636:	eeb0 8a68 	vmov.f32	s16, s17
 800f63a:	eeb0 0a48 	vmov.f32	s0, s16
 800f63e:	ecbd 8b02 	vpop	{d8}
 800f642:	bd08      	pop	{r3, pc}

0800f644 <__fpclassifyf>:
 800f644:	ee10 3a10 	vmov	r3, s0
 800f648:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800f64c:	d00d      	beq.n	800f66a <__fpclassifyf+0x26>
 800f64e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800f652:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f656:	d30a      	bcc.n	800f66e <__fpclassifyf+0x2a>
 800f658:	4b07      	ldr	r3, [pc, #28]	; (800f678 <__fpclassifyf+0x34>)
 800f65a:	1e42      	subs	r2, r0, #1
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d908      	bls.n	800f672 <__fpclassifyf+0x2e>
 800f660:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800f664:	4258      	negs	r0, r3
 800f666:	4158      	adcs	r0, r3
 800f668:	4770      	bx	lr
 800f66a:	2002      	movs	r0, #2
 800f66c:	4770      	bx	lr
 800f66e:	2004      	movs	r0, #4
 800f670:	4770      	bx	lr
 800f672:	2003      	movs	r0, #3
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	007ffffe 	.word	0x007ffffe

0800f67c <sinf>:
 800f67c:	ee10 3a10 	vmov	r3, s0
 800f680:	b507      	push	{r0, r1, r2, lr}
 800f682:	4a1f      	ldr	r2, [pc, #124]	; (800f700 <sinf+0x84>)
 800f684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f688:	4293      	cmp	r3, r2
 800f68a:	dc07      	bgt.n	800f69c <sinf+0x20>
 800f68c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f704 <sinf+0x88>
 800f690:	2000      	movs	r0, #0
 800f692:	b003      	add	sp, #12
 800f694:	f85d eb04 	ldr.w	lr, [sp], #4
 800f698:	f000 bd0c 	b.w	80100b4 <__kernel_sinf>
 800f69c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f6a0:	db04      	blt.n	800f6ac <sinf+0x30>
 800f6a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f6a6:	b003      	add	sp, #12
 800f6a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6ac:	4668      	mov	r0, sp
 800f6ae:	f000 f8eb 	bl	800f888 <__ieee754_rem_pio2f>
 800f6b2:	f000 0003 	and.w	r0, r0, #3
 800f6b6:	2801      	cmp	r0, #1
 800f6b8:	d00a      	beq.n	800f6d0 <sinf+0x54>
 800f6ba:	2802      	cmp	r0, #2
 800f6bc:	d00f      	beq.n	800f6de <sinf+0x62>
 800f6be:	b9c0      	cbnz	r0, 800f6f2 <sinf+0x76>
 800f6c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6c4:	ed9d 0a00 	vldr	s0, [sp]
 800f6c8:	2001      	movs	r0, #1
 800f6ca:	f000 fcf3 	bl	80100b4 <__kernel_sinf>
 800f6ce:	e7ea      	b.n	800f6a6 <sinf+0x2a>
 800f6d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6d4:	ed9d 0a00 	vldr	s0, [sp]
 800f6d8:	f000 fa16 	bl	800fb08 <__kernel_cosf>
 800f6dc:	e7e3      	b.n	800f6a6 <sinf+0x2a>
 800f6de:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6e2:	ed9d 0a00 	vldr	s0, [sp]
 800f6e6:	2001      	movs	r0, #1
 800f6e8:	f000 fce4 	bl	80100b4 <__kernel_sinf>
 800f6ec:	eeb1 0a40 	vneg.f32	s0, s0
 800f6f0:	e7d9      	b.n	800f6a6 <sinf+0x2a>
 800f6f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6f6:	ed9d 0a00 	vldr	s0, [sp]
 800f6fa:	f000 fa05 	bl	800fb08 <__kernel_cosf>
 800f6fe:	e7f5      	b.n	800f6ec <sinf+0x70>
 800f700:	3f490fd8 	.word	0x3f490fd8
 800f704:	00000000 	.word	0x00000000

0800f708 <fmodf>:
 800f708:	b508      	push	{r3, lr}
 800f70a:	ed2d 8b02 	vpush	{d8}
 800f70e:	eef0 8a40 	vmov.f32	s17, s0
 800f712:	eeb0 8a60 	vmov.f32	s16, s1
 800f716:	f000 f835 	bl	800f784 <__ieee754_fmodf>
 800f71a:	eef4 8a48 	vcmp.f32	s17, s16
 800f71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f722:	d60c      	bvs.n	800f73e <fmodf+0x36>
 800f724:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f744 <fmodf+0x3c>
 800f728:	eeb4 8a68 	vcmp.f32	s16, s17
 800f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f730:	d105      	bne.n	800f73e <fmodf+0x36>
 800f732:	f7fc fff7 	bl	800c724 <__errno>
 800f736:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f73a:	2321      	movs	r3, #33	; 0x21
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	ecbd 8b02 	vpop	{d8}
 800f742:	bd08      	pop	{r3, pc}
 800f744:	00000000 	.word	0x00000000

0800f748 <sqrtf>:
 800f748:	b508      	push	{r3, lr}
 800f74a:	ed2d 8b02 	vpush	{d8}
 800f74e:	eeb0 8a40 	vmov.f32	s16, s0
 800f752:	f000 f9d5 	bl	800fb00 <__ieee754_sqrtf>
 800f756:	eeb4 8a48 	vcmp.f32	s16, s16
 800f75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75e:	d60c      	bvs.n	800f77a <sqrtf+0x32>
 800f760:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f780 <sqrtf+0x38>
 800f764:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76c:	d505      	bpl.n	800f77a <sqrtf+0x32>
 800f76e:	f7fc ffd9 	bl	800c724 <__errno>
 800f772:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f776:	2321      	movs	r3, #33	; 0x21
 800f778:	6003      	str	r3, [r0, #0]
 800f77a:	ecbd 8b02 	vpop	{d8}
 800f77e:	bd08      	pop	{r3, pc}
 800f780:	00000000 	.word	0x00000000

0800f784 <__ieee754_fmodf>:
 800f784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f786:	ee10 5a90 	vmov	r5, s1
 800f78a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800f78e:	d009      	beq.n	800f7a4 <__ieee754_fmodf+0x20>
 800f790:	ee10 2a10 	vmov	r2, s0
 800f794:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f798:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f79c:	da02      	bge.n	800f7a4 <__ieee754_fmodf+0x20>
 800f79e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f7a2:	dd04      	ble.n	800f7ae <__ieee754_fmodf+0x2a>
 800f7a4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f7a8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ae:	42a3      	cmp	r3, r4
 800f7b0:	dbfc      	blt.n	800f7ac <__ieee754_fmodf+0x28>
 800f7b2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800f7b6:	d105      	bne.n	800f7c4 <__ieee754_fmodf+0x40>
 800f7b8:	4b32      	ldr	r3, [pc, #200]	; (800f884 <__ieee754_fmodf+0x100>)
 800f7ba:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800f7be:	ed93 0a00 	vldr	s0, [r3]
 800f7c2:	e7f3      	b.n	800f7ac <__ieee754_fmodf+0x28>
 800f7c4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800f7c8:	d13f      	bne.n	800f84a <__ieee754_fmodf+0xc6>
 800f7ca:	0219      	lsls	r1, r3, #8
 800f7cc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800f7d0:	2900      	cmp	r1, #0
 800f7d2:	dc37      	bgt.n	800f844 <__ieee754_fmodf+0xc0>
 800f7d4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800f7d8:	d13d      	bne.n	800f856 <__ieee754_fmodf+0xd2>
 800f7da:	0227      	lsls	r7, r4, #8
 800f7dc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800f7e0:	2f00      	cmp	r7, #0
 800f7e2:	da35      	bge.n	800f850 <__ieee754_fmodf+0xcc>
 800f7e4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800f7e8:	bfbb      	ittet	lt
 800f7ea:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f7ee:	1a12      	sublt	r2, r2, r0
 800f7f0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800f7f4:	4093      	lsllt	r3, r2
 800f7f6:	bfa8      	it	ge
 800f7f8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800f7fc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f800:	bfb5      	itete	lt
 800f802:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f806:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800f80a:	1a52      	sublt	r2, r2, r1
 800f80c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800f810:	bfb8      	it	lt
 800f812:	4094      	lsllt	r4, r2
 800f814:	1a40      	subs	r0, r0, r1
 800f816:	1b1a      	subs	r2, r3, r4
 800f818:	bb00      	cbnz	r0, 800f85c <__ieee754_fmodf+0xd8>
 800f81a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800f81e:	bf38      	it	cc
 800f820:	4613      	movcc	r3, r2
 800f822:	2b00      	cmp	r3, #0
 800f824:	d0c8      	beq.n	800f7b8 <__ieee754_fmodf+0x34>
 800f826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f82a:	db1f      	blt.n	800f86c <__ieee754_fmodf+0xe8>
 800f82c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f830:	db1f      	blt.n	800f872 <__ieee754_fmodf+0xee>
 800f832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800f836:	317f      	adds	r1, #127	; 0x7f
 800f838:	4333      	orrs	r3, r6
 800f83a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800f83e:	ee00 3a10 	vmov	s0, r3
 800f842:	e7b3      	b.n	800f7ac <__ieee754_fmodf+0x28>
 800f844:	3801      	subs	r0, #1
 800f846:	0049      	lsls	r1, r1, #1
 800f848:	e7c2      	b.n	800f7d0 <__ieee754_fmodf+0x4c>
 800f84a:	15d8      	asrs	r0, r3, #23
 800f84c:	387f      	subs	r0, #127	; 0x7f
 800f84e:	e7c1      	b.n	800f7d4 <__ieee754_fmodf+0x50>
 800f850:	3901      	subs	r1, #1
 800f852:	007f      	lsls	r7, r7, #1
 800f854:	e7c4      	b.n	800f7e0 <__ieee754_fmodf+0x5c>
 800f856:	15e1      	asrs	r1, r4, #23
 800f858:	397f      	subs	r1, #127	; 0x7f
 800f85a:	e7c3      	b.n	800f7e4 <__ieee754_fmodf+0x60>
 800f85c:	2a00      	cmp	r2, #0
 800f85e:	da02      	bge.n	800f866 <__ieee754_fmodf+0xe2>
 800f860:	005b      	lsls	r3, r3, #1
 800f862:	3801      	subs	r0, #1
 800f864:	e7d7      	b.n	800f816 <__ieee754_fmodf+0x92>
 800f866:	d0a7      	beq.n	800f7b8 <__ieee754_fmodf+0x34>
 800f868:	0053      	lsls	r3, r2, #1
 800f86a:	e7fa      	b.n	800f862 <__ieee754_fmodf+0xde>
 800f86c:	005b      	lsls	r3, r3, #1
 800f86e:	3901      	subs	r1, #1
 800f870:	e7d9      	b.n	800f826 <__ieee754_fmodf+0xa2>
 800f872:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800f876:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800f87a:	3182      	adds	r1, #130	; 0x82
 800f87c:	410b      	asrs	r3, r1
 800f87e:	4333      	orrs	r3, r6
 800f880:	e7dd      	b.n	800f83e <__ieee754_fmodf+0xba>
 800f882:	bf00      	nop
 800f884:	080107d4 	.word	0x080107d4

0800f888 <__ieee754_rem_pio2f>:
 800f888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f88a:	ee10 6a10 	vmov	r6, s0
 800f88e:	4b8e      	ldr	r3, [pc, #568]	; (800fac8 <__ieee754_rem_pio2f+0x240>)
 800f890:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f894:	429d      	cmp	r5, r3
 800f896:	b087      	sub	sp, #28
 800f898:	eef0 7a40 	vmov.f32	s15, s0
 800f89c:	4604      	mov	r4, r0
 800f89e:	dc05      	bgt.n	800f8ac <__ieee754_rem_pio2f+0x24>
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	ed80 0a00 	vstr	s0, [r0]
 800f8a6:	6043      	str	r3, [r0, #4]
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e01a      	b.n	800f8e2 <__ieee754_rem_pio2f+0x5a>
 800f8ac:	4b87      	ldr	r3, [pc, #540]	; (800facc <__ieee754_rem_pio2f+0x244>)
 800f8ae:	429d      	cmp	r5, r3
 800f8b0:	dc46      	bgt.n	800f940 <__ieee754_rem_pio2f+0xb8>
 800f8b2:	2e00      	cmp	r6, #0
 800f8b4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800fad0 <__ieee754_rem_pio2f+0x248>
 800f8b8:	4b86      	ldr	r3, [pc, #536]	; (800fad4 <__ieee754_rem_pio2f+0x24c>)
 800f8ba:	f025 050f 	bic.w	r5, r5, #15
 800f8be:	dd1f      	ble.n	800f900 <__ieee754_rem_pio2f+0x78>
 800f8c0:	429d      	cmp	r5, r3
 800f8c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f8c6:	d00e      	beq.n	800f8e6 <__ieee754_rem_pio2f+0x5e>
 800f8c8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800fad8 <__ieee754_rem_pio2f+0x250>
 800f8cc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f8d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f8d4:	ed80 0a00 	vstr	s0, [r0]
 800f8d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8dc:	2001      	movs	r0, #1
 800f8de:	edc4 7a01 	vstr	s15, [r4, #4]
 800f8e2:	b007      	add	sp, #28
 800f8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800fadc <__ieee754_rem_pio2f+0x254>
 800f8ea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800fae0 <__ieee754_rem_pio2f+0x258>
 800f8ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f8f2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f8f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f8fa:	edc0 6a00 	vstr	s13, [r0]
 800f8fe:	e7eb      	b.n	800f8d8 <__ieee754_rem_pio2f+0x50>
 800f900:	429d      	cmp	r5, r3
 800f902:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f906:	d00e      	beq.n	800f926 <__ieee754_rem_pio2f+0x9e>
 800f908:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800fad8 <__ieee754_rem_pio2f+0x250>
 800f90c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f910:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f914:	ed80 0a00 	vstr	s0, [r0]
 800f918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f91c:	f04f 30ff 	mov.w	r0, #4294967295
 800f920:	edc4 7a01 	vstr	s15, [r4, #4]
 800f924:	e7dd      	b.n	800f8e2 <__ieee754_rem_pio2f+0x5a>
 800f926:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800fadc <__ieee754_rem_pio2f+0x254>
 800f92a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800fae0 <__ieee754_rem_pio2f+0x258>
 800f92e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f932:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f936:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f93a:	edc0 6a00 	vstr	s13, [r0]
 800f93e:	e7eb      	b.n	800f918 <__ieee754_rem_pio2f+0x90>
 800f940:	4b68      	ldr	r3, [pc, #416]	; (800fae4 <__ieee754_rem_pio2f+0x25c>)
 800f942:	429d      	cmp	r5, r3
 800f944:	dc72      	bgt.n	800fa2c <__ieee754_rem_pio2f+0x1a4>
 800f946:	f000 fbfd 	bl	8010144 <fabsf>
 800f94a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fae8 <__ieee754_rem_pio2f+0x260>
 800f94e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f952:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f95a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f95e:	ee17 0a90 	vmov	r0, s15
 800f962:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fad0 <__ieee754_rem_pio2f+0x248>
 800f966:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f96a:	281f      	cmp	r0, #31
 800f96c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800fad8 <__ieee754_rem_pio2f+0x250>
 800f970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f974:	eeb1 6a47 	vneg.f32	s12, s14
 800f978:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f97c:	ee16 2a90 	vmov	r2, s13
 800f980:	dc1c      	bgt.n	800f9bc <__ieee754_rem_pio2f+0x134>
 800f982:	495a      	ldr	r1, [pc, #360]	; (800faec <__ieee754_rem_pio2f+0x264>)
 800f984:	1e47      	subs	r7, r0, #1
 800f986:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f98a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f98e:	428b      	cmp	r3, r1
 800f990:	d014      	beq.n	800f9bc <__ieee754_rem_pio2f+0x134>
 800f992:	6022      	str	r2, [r4, #0]
 800f994:	ed94 7a00 	vldr	s14, [r4]
 800f998:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f99c:	2e00      	cmp	r6, #0
 800f99e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9a2:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9a6:	da9c      	bge.n	800f8e2 <__ieee754_rem_pio2f+0x5a>
 800f9a8:	eeb1 7a47 	vneg.f32	s14, s14
 800f9ac:	eeb1 0a40 	vneg.f32	s0, s0
 800f9b0:	ed84 7a00 	vstr	s14, [r4]
 800f9b4:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9b8:	4240      	negs	r0, r0
 800f9ba:	e792      	b.n	800f8e2 <__ieee754_rem_pio2f+0x5a>
 800f9bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f9c0:	15eb      	asrs	r3, r5, #23
 800f9c2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f9c6:	2d08      	cmp	r5, #8
 800f9c8:	dde3      	ble.n	800f992 <__ieee754_rem_pio2f+0x10a>
 800f9ca:	eddf 7a44 	vldr	s15, [pc, #272]	; 800fadc <__ieee754_rem_pio2f+0x254>
 800f9ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fae0 <__ieee754_rem_pio2f+0x258>
 800f9d2:	eef0 6a40 	vmov.f32	s13, s0
 800f9d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f9da:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f9de:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f9e2:	eef0 7a40 	vmov.f32	s15, s0
 800f9e6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f9ea:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f9ee:	ee15 2a90 	vmov	r2, s11
 800f9f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f9f6:	1a5b      	subs	r3, r3, r1
 800f9f8:	2b19      	cmp	r3, #25
 800f9fa:	dc04      	bgt.n	800fa06 <__ieee754_rem_pio2f+0x17e>
 800f9fc:	edc4 5a00 	vstr	s11, [r4]
 800fa00:	eeb0 0a66 	vmov.f32	s0, s13
 800fa04:	e7c6      	b.n	800f994 <__ieee754_rem_pio2f+0x10c>
 800fa06:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800faf0 <__ieee754_rem_pio2f+0x268>
 800fa0a:	eeb0 0a66 	vmov.f32	s0, s13
 800fa0e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fa12:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fa16:	eddf 6a37 	vldr	s13, [pc, #220]	; 800faf4 <__ieee754_rem_pio2f+0x26c>
 800fa1a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa1e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fa22:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa26:	ed84 7a00 	vstr	s14, [r4]
 800fa2a:	e7b3      	b.n	800f994 <__ieee754_rem_pio2f+0x10c>
 800fa2c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fa30:	db06      	blt.n	800fa40 <__ieee754_rem_pio2f+0x1b8>
 800fa32:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa36:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa3a:	edc0 7a00 	vstr	s15, [r0]
 800fa3e:	e733      	b.n	800f8a8 <__ieee754_rem_pio2f+0x20>
 800fa40:	15ea      	asrs	r2, r5, #23
 800fa42:	3a86      	subs	r2, #134	; 0x86
 800fa44:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fa48:	ee07 3a90 	vmov	s15, r3
 800fa4c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa50:	eddf 6a29 	vldr	s13, [pc, #164]	; 800faf8 <__ieee754_rem_pio2f+0x270>
 800fa54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa5c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fa60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa70:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fa74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa80:	edcd 7a05 	vstr	s15, [sp, #20]
 800fa84:	d11e      	bne.n	800fac4 <__ieee754_rem_pio2f+0x23c>
 800fa86:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8e:	bf14      	ite	ne
 800fa90:	2302      	movne	r3, #2
 800fa92:	2301      	moveq	r3, #1
 800fa94:	4919      	ldr	r1, [pc, #100]	; (800fafc <__ieee754_rem_pio2f+0x274>)
 800fa96:	9101      	str	r1, [sp, #4]
 800fa98:	2102      	movs	r1, #2
 800fa9a:	9100      	str	r1, [sp, #0]
 800fa9c:	a803      	add	r0, sp, #12
 800fa9e:	4621      	mov	r1, r4
 800faa0:	f000 f892 	bl	800fbc8 <__kernel_rem_pio2f>
 800faa4:	2e00      	cmp	r6, #0
 800faa6:	f6bf af1c 	bge.w	800f8e2 <__ieee754_rem_pio2f+0x5a>
 800faaa:	edd4 7a00 	vldr	s15, [r4]
 800faae:	eef1 7a67 	vneg.f32	s15, s15
 800fab2:	edc4 7a00 	vstr	s15, [r4]
 800fab6:	edd4 7a01 	vldr	s15, [r4, #4]
 800faba:	eef1 7a67 	vneg.f32	s15, s15
 800fabe:	edc4 7a01 	vstr	s15, [r4, #4]
 800fac2:	e779      	b.n	800f9b8 <__ieee754_rem_pio2f+0x130>
 800fac4:	2303      	movs	r3, #3
 800fac6:	e7e5      	b.n	800fa94 <__ieee754_rem_pio2f+0x20c>
 800fac8:	3f490fd8 	.word	0x3f490fd8
 800facc:	4016cbe3 	.word	0x4016cbe3
 800fad0:	3fc90f80 	.word	0x3fc90f80
 800fad4:	3fc90fd0 	.word	0x3fc90fd0
 800fad8:	37354443 	.word	0x37354443
 800fadc:	37354400 	.word	0x37354400
 800fae0:	2e85a308 	.word	0x2e85a308
 800fae4:	43490f80 	.word	0x43490f80
 800fae8:	3f22f984 	.word	0x3f22f984
 800faec:	080107dc 	.word	0x080107dc
 800faf0:	2e85a300 	.word	0x2e85a300
 800faf4:	248d3132 	.word	0x248d3132
 800faf8:	43800000 	.word	0x43800000
 800fafc:	0801085c 	.word	0x0801085c

0800fb00 <__ieee754_sqrtf>:
 800fb00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb04:	4770      	bx	lr
	...

0800fb08 <__kernel_cosf>:
 800fb08:	ee10 3a10 	vmov	r3, s0
 800fb0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb10:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fb14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fb18:	da05      	bge.n	800fb26 <__kernel_cosf+0x1e>
 800fb1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb1e:	ee17 2a90 	vmov	r2, s15
 800fb22:	2a00      	cmp	r2, #0
 800fb24:	d03d      	beq.n	800fba2 <__kernel_cosf+0x9a>
 800fb26:	ee60 5a00 	vmul.f32	s11, s0, s0
 800fb2a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fba8 <__kernel_cosf+0xa0>
 800fb2e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800fbac <__kernel_cosf+0xa4>
 800fb32:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800fbb0 <__kernel_cosf+0xa8>
 800fb36:	4a1f      	ldr	r2, [pc, #124]	; (800fbb4 <__kernel_cosf+0xac>)
 800fb38:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800fbb8 <__kernel_cosf+0xb0>
 800fb42:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fb46:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800fbbc <__kernel_cosf+0xb4>
 800fb4a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fb4e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800fbc0 <__kernel_cosf+0xb8>
 800fb52:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fb56:	eeb0 7a66 	vmov.f32	s14, s13
 800fb5a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fb5e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800fb62:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800fb66:	ee67 6a25 	vmul.f32	s13, s14, s11
 800fb6a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800fb6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fb72:	dc04      	bgt.n	800fb7e <__kernel_cosf+0x76>
 800fb74:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fb78:	ee36 0a47 	vsub.f32	s0, s12, s14
 800fb7c:	4770      	bx	lr
 800fb7e:	4a11      	ldr	r2, [pc, #68]	; (800fbc4 <__kernel_cosf+0xbc>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	bfda      	itte	le
 800fb84:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800fb88:	ee06 3a90 	vmovle	s13, r3
 800fb8c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800fb90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb94:	ee36 0a66 	vsub.f32	s0, s12, s13
 800fb98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fba0:	4770      	bx	lr
 800fba2:	eeb0 0a46 	vmov.f32	s0, s12
 800fba6:	4770      	bx	lr
 800fba8:	ad47d74e 	.word	0xad47d74e
 800fbac:	310f74f6 	.word	0x310f74f6
 800fbb0:	3d2aaaab 	.word	0x3d2aaaab
 800fbb4:	3e999999 	.word	0x3e999999
 800fbb8:	b493f27c 	.word	0xb493f27c
 800fbbc:	37d00d01 	.word	0x37d00d01
 800fbc0:	bab60b61 	.word	0xbab60b61
 800fbc4:	3f480000 	.word	0x3f480000

0800fbc8 <__kernel_rem_pio2f>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	ed2d 8b04 	vpush	{d8-d9}
 800fbd0:	b0d9      	sub	sp, #356	; 0x164
 800fbd2:	4688      	mov	r8, r1
 800fbd4:	9002      	str	r0, [sp, #8]
 800fbd6:	49bb      	ldr	r1, [pc, #748]	; (800fec4 <__kernel_rem_pio2f+0x2fc>)
 800fbd8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800fbda:	9301      	str	r3, [sp, #4]
 800fbdc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800fbe0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800fbe4:	1e59      	subs	r1, r3, #1
 800fbe6:	1d13      	adds	r3, r2, #4
 800fbe8:	db27      	blt.n	800fc3a <__kernel_rem_pio2f+0x72>
 800fbea:	f1b2 0b03 	subs.w	fp, r2, #3
 800fbee:	bf48      	it	mi
 800fbf0:	f102 0b04 	addmi.w	fp, r2, #4
 800fbf4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800fbf8:	1c45      	adds	r5, r0, #1
 800fbfa:	00ec      	lsls	r4, r5, #3
 800fbfc:	1a47      	subs	r7, r0, r1
 800fbfe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 800fc02:	9403      	str	r4, [sp, #12]
 800fc04:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800fc08:	eb0a 0c01 	add.w	ip, sl, r1
 800fc0c:	ae1c      	add	r6, sp, #112	; 0x70
 800fc0e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800fc12:	2400      	movs	r4, #0
 800fc14:	4564      	cmp	r4, ip
 800fc16:	dd12      	ble.n	800fc3e <__kernel_rem_pio2f+0x76>
 800fc18:	9b01      	ldr	r3, [sp, #4]
 800fc1a:	ac1c      	add	r4, sp, #112	; 0x70
 800fc1c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800fc20:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800fc24:	f04f 0c00 	mov.w	ip, #0
 800fc28:	45d4      	cmp	ip, sl
 800fc2a:	dc27      	bgt.n	800fc7c <__kernel_rem_pio2f+0xb4>
 800fc2c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800fc30:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 800fc34:	4627      	mov	r7, r4
 800fc36:	2600      	movs	r6, #0
 800fc38:	e016      	b.n	800fc68 <__kernel_rem_pio2f+0xa0>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e7dc      	b.n	800fbf8 <__kernel_rem_pio2f+0x30>
 800fc3e:	42e7      	cmn	r7, r4
 800fc40:	bf5d      	ittte	pl
 800fc42:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800fc46:	ee07 3a90 	vmovpl	s15, r3
 800fc4a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fc4e:	eef0 7a47 	vmovmi.f32	s15, s14
 800fc52:	ece6 7a01 	vstmia	r6!, {s15}
 800fc56:	3401      	adds	r4, #1
 800fc58:	e7dc      	b.n	800fc14 <__kernel_rem_pio2f+0x4c>
 800fc5a:	ecf9 6a01 	vldmia	r9!, {s13}
 800fc5e:	ed97 7a00 	vldr	s14, [r7]
 800fc62:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc66:	3601      	adds	r6, #1
 800fc68:	428e      	cmp	r6, r1
 800fc6a:	f1a7 0704 	sub.w	r7, r7, #4
 800fc6e:	ddf4      	ble.n	800fc5a <__kernel_rem_pio2f+0x92>
 800fc70:	eceb 7a01 	vstmia	fp!, {s15}
 800fc74:	f10c 0c01 	add.w	ip, ip, #1
 800fc78:	3404      	adds	r4, #4
 800fc7a:	e7d5      	b.n	800fc28 <__kernel_rem_pio2f+0x60>
 800fc7c:	ab08      	add	r3, sp, #32
 800fc7e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800fc82:	eddf 8a93 	vldr	s17, [pc, #588]	; 800fed0 <__kernel_rem_pio2f+0x308>
 800fc86:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800fecc <__kernel_rem_pio2f+0x304>
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800fc90:	4656      	mov	r6, sl
 800fc92:	00b3      	lsls	r3, r6, #2
 800fc94:	9305      	str	r3, [sp, #20]
 800fc96:	ab58      	add	r3, sp, #352	; 0x160
 800fc98:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fc9c:	ac08      	add	r4, sp, #32
 800fc9e:	ab44      	add	r3, sp, #272	; 0x110
 800fca0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800fca4:	46a4      	mov	ip, r4
 800fca6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fcaa:	4637      	mov	r7, r6
 800fcac:	2f00      	cmp	r7, #0
 800fcae:	f1a0 0004 	sub.w	r0, r0, #4
 800fcb2:	dc4f      	bgt.n	800fd54 <__kernel_rem_pio2f+0x18c>
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800fcba:	f000 fa8d 	bl	80101d8 <scalbnf>
 800fcbe:	eeb0 8a40 	vmov.f32	s16, s0
 800fcc2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fcc6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fcca:	f000 fa43 	bl	8010154 <floorf>
 800fcce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fcd2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fcd6:	2d00      	cmp	r5, #0
 800fcd8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fcdc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fce0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800fce4:	ee17 9a90 	vmov	r9, s15
 800fce8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fcec:	dd44      	ble.n	800fd78 <__kernel_rem_pio2f+0x1b0>
 800fcee:	f106 3cff 	add.w	ip, r6, #4294967295
 800fcf2:	ab08      	add	r3, sp, #32
 800fcf4:	f1c5 0e08 	rsb	lr, r5, #8
 800fcf8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fcfc:	fa47 f00e 	asr.w	r0, r7, lr
 800fd00:	4481      	add	r9, r0
 800fd02:	fa00 f00e 	lsl.w	r0, r0, lr
 800fd06:	1a3f      	subs	r7, r7, r0
 800fd08:	f1c5 0007 	rsb	r0, r5, #7
 800fd0c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800fd10:	4107      	asrs	r7, r0
 800fd12:	2f00      	cmp	r7, #0
 800fd14:	dd3f      	ble.n	800fd96 <__kernel_rem_pio2f+0x1ce>
 800fd16:	f04f 0e00 	mov.w	lr, #0
 800fd1a:	f109 0901 	add.w	r9, r9, #1
 800fd1e:	4673      	mov	r3, lr
 800fd20:	4576      	cmp	r6, lr
 800fd22:	dc6b      	bgt.n	800fdfc <__kernel_rem_pio2f+0x234>
 800fd24:	2d00      	cmp	r5, #0
 800fd26:	dd04      	ble.n	800fd32 <__kernel_rem_pio2f+0x16a>
 800fd28:	2d01      	cmp	r5, #1
 800fd2a:	d078      	beq.n	800fe1e <__kernel_rem_pio2f+0x256>
 800fd2c:	2d02      	cmp	r5, #2
 800fd2e:	f000 8081 	beq.w	800fe34 <__kernel_rem_pio2f+0x26c>
 800fd32:	2f02      	cmp	r7, #2
 800fd34:	d12f      	bne.n	800fd96 <__kernel_rem_pio2f+0x1ce>
 800fd36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fd3a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fd3e:	b353      	cbz	r3, 800fd96 <__kernel_rem_pio2f+0x1ce>
 800fd40:	4628      	mov	r0, r5
 800fd42:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800fd46:	f000 fa47 	bl	80101d8 <scalbnf>
 800fd4a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fd4e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fd52:	e020      	b.n	800fd96 <__kernel_rem_pio2f+0x1ce>
 800fd54:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fd58:	3f01      	subs	r7, #1
 800fd5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd62:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fd66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd6a:	ecac 0a01 	vstmia	ip!, {s0}
 800fd6e:	ed90 0a00 	vldr	s0, [r0]
 800fd72:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fd76:	e799      	b.n	800fcac <__kernel_rem_pio2f+0xe4>
 800fd78:	d105      	bne.n	800fd86 <__kernel_rem_pio2f+0x1be>
 800fd7a:	1e70      	subs	r0, r6, #1
 800fd7c:	ab08      	add	r3, sp, #32
 800fd7e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800fd82:	11ff      	asrs	r7, r7, #7
 800fd84:	e7c5      	b.n	800fd12 <__kernel_rem_pio2f+0x14a>
 800fd86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fd8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd92:	da31      	bge.n	800fdf8 <__kernel_rem_pio2f+0x230>
 800fd94:	2700      	movs	r7, #0
 800fd96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	f040 809b 	bne.w	800fed8 <__kernel_rem_pio2f+0x310>
 800fda2:	1e74      	subs	r4, r6, #1
 800fda4:	46a4      	mov	ip, r4
 800fda6:	2000      	movs	r0, #0
 800fda8:	45d4      	cmp	ip, sl
 800fdaa:	da4a      	bge.n	800fe42 <__kernel_rem_pio2f+0x27a>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d07a      	beq.n	800fea6 <__kernel_rem_pio2f+0x2de>
 800fdb0:	ab08      	add	r3, sp, #32
 800fdb2:	3d08      	subs	r5, #8
 800fdb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f000 8081 	beq.w	800fec0 <__kernel_rem_pio2f+0x2f8>
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fdc4:	00a5      	lsls	r5, r4, #2
 800fdc6:	f000 fa07 	bl	80101d8 <scalbnf>
 800fdca:	aa44      	add	r2, sp, #272	; 0x110
 800fdcc:	1d2b      	adds	r3, r5, #4
 800fdce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800fed0 <__kernel_rem_pio2f+0x308>
 800fdd2:	18d1      	adds	r1, r2, r3
 800fdd4:	4622      	mov	r2, r4
 800fdd6:	2a00      	cmp	r2, #0
 800fdd8:	f280 80ae 	bge.w	800ff38 <__kernel_rem_pio2f+0x370>
 800fddc:	4622      	mov	r2, r4
 800fdde:	2a00      	cmp	r2, #0
 800fde0:	f2c0 80cc 	blt.w	800ff7c <__kernel_rem_pio2f+0x3b4>
 800fde4:	a944      	add	r1, sp, #272	; 0x110
 800fde6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800fdea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800fec8 <__kernel_rem_pio2f+0x300>
 800fdee:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	1aa1      	subs	r1, r4, r2
 800fdf6:	e0b6      	b.n	800ff66 <__kernel_rem_pio2f+0x39e>
 800fdf8:	2702      	movs	r7, #2
 800fdfa:	e78c      	b.n	800fd16 <__kernel_rem_pio2f+0x14e>
 800fdfc:	6820      	ldr	r0, [r4, #0]
 800fdfe:	b94b      	cbnz	r3, 800fe14 <__kernel_rem_pio2f+0x24c>
 800fe00:	b118      	cbz	r0, 800fe0a <__kernel_rem_pio2f+0x242>
 800fe02:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800fe06:	6020      	str	r0, [r4, #0]
 800fe08:	2001      	movs	r0, #1
 800fe0a:	f10e 0e01 	add.w	lr, lr, #1
 800fe0e:	3404      	adds	r4, #4
 800fe10:	4603      	mov	r3, r0
 800fe12:	e785      	b.n	800fd20 <__kernel_rem_pio2f+0x158>
 800fe14:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800fe18:	6020      	str	r0, [r4, #0]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	e7f5      	b.n	800fe0a <__kernel_rem_pio2f+0x242>
 800fe1e:	1e74      	subs	r4, r6, #1
 800fe20:	a808      	add	r0, sp, #32
 800fe22:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fe26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800fe2a:	f10d 0c20 	add.w	ip, sp, #32
 800fe2e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800fe32:	e77e      	b.n	800fd32 <__kernel_rem_pio2f+0x16a>
 800fe34:	1e74      	subs	r4, r6, #1
 800fe36:	a808      	add	r0, sp, #32
 800fe38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fe3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fe40:	e7f3      	b.n	800fe2a <__kernel_rem_pio2f+0x262>
 800fe42:	ab08      	add	r3, sp, #32
 800fe44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800fe48:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fe4c:	4318      	orrs	r0, r3
 800fe4e:	e7ab      	b.n	800fda8 <__kernel_rem_pio2f+0x1e0>
 800fe50:	f10c 0c01 	add.w	ip, ip, #1
 800fe54:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800fe58:	2c00      	cmp	r4, #0
 800fe5a:	d0f9      	beq.n	800fe50 <__kernel_rem_pio2f+0x288>
 800fe5c:	9b05      	ldr	r3, [sp, #20]
 800fe5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fe62:	eb0d 0003 	add.w	r0, sp, r3
 800fe66:	9b01      	ldr	r3, [sp, #4]
 800fe68:	18f4      	adds	r4, r6, r3
 800fe6a:	ab1c      	add	r3, sp, #112	; 0x70
 800fe6c:	1c77      	adds	r7, r6, #1
 800fe6e:	384c      	subs	r0, #76	; 0x4c
 800fe70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe74:	4466      	add	r6, ip
 800fe76:	42be      	cmp	r6, r7
 800fe78:	f6ff af0b 	blt.w	800fc92 <__kernel_rem_pio2f+0xca>
 800fe7c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800fe80:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fe84:	ee07 3a90 	vmov	s15, r3
 800fe88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe8c:	f04f 0c00 	mov.w	ip, #0
 800fe90:	ece4 7a01 	vstmia	r4!, {s15}
 800fe94:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 800fe98:	46a1      	mov	r9, r4
 800fe9a:	458c      	cmp	ip, r1
 800fe9c:	dd07      	ble.n	800feae <__kernel_rem_pio2f+0x2e6>
 800fe9e:	ece0 7a01 	vstmia	r0!, {s15}
 800fea2:	3701      	adds	r7, #1
 800fea4:	e7e7      	b.n	800fe76 <__kernel_rem_pio2f+0x2ae>
 800fea6:	9804      	ldr	r0, [sp, #16]
 800fea8:	f04f 0c01 	mov.w	ip, #1
 800feac:	e7d2      	b.n	800fe54 <__kernel_rem_pio2f+0x28c>
 800feae:	ecfe 6a01 	vldmia	lr!, {s13}
 800feb2:	ed39 7a01 	vldmdb	r9!, {s14}
 800feb6:	f10c 0c01 	add.w	ip, ip, #1
 800feba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800febe:	e7ec      	b.n	800fe9a <__kernel_rem_pio2f+0x2d2>
 800fec0:	3c01      	subs	r4, #1
 800fec2:	e775      	b.n	800fdb0 <__kernel_rem_pio2f+0x1e8>
 800fec4:	08010ba0 	.word	0x08010ba0
 800fec8:	08010b74 	.word	0x08010b74
 800fecc:	43800000 	.word	0x43800000
 800fed0:	3b800000 	.word	0x3b800000
 800fed4:	00000000 	.word	0x00000000
 800fed8:	9b03      	ldr	r3, [sp, #12]
 800feda:	eeb0 0a48 	vmov.f32	s0, s16
 800fede:	1a98      	subs	r0, r3, r2
 800fee0:	f000 f97a 	bl	80101d8 <scalbnf>
 800fee4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800fecc <__kernel_rem_pio2f+0x304>
 800fee8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800feec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef0:	db19      	blt.n	800ff26 <__kernel_rem_pio2f+0x35e>
 800fef2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800fed0 <__kernel_rem_pio2f+0x308>
 800fef6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fefa:	aa08      	add	r2, sp, #32
 800fefc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff00:	1c74      	adds	r4, r6, #1
 800ff02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff06:	3508      	adds	r5, #8
 800ff08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ff0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff14:	ee10 3a10 	vmov	r3, s0
 800ff18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ff1c:	ee17 3a90 	vmov	r3, s15
 800ff20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff24:	e74b      	b.n	800fdbe <__kernel_rem_pio2f+0x1f6>
 800ff26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff2a:	aa08      	add	r2, sp, #32
 800ff2c:	ee10 3a10 	vmov	r3, s0
 800ff30:	4634      	mov	r4, r6
 800ff32:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ff36:	e742      	b.n	800fdbe <__kernel_rem_pio2f+0x1f6>
 800ff38:	a808      	add	r0, sp, #32
 800ff3a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ff3e:	9001      	str	r0, [sp, #4]
 800ff40:	ee07 0a90 	vmov	s15, r0
 800ff44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff48:	3a01      	subs	r2, #1
 800ff4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ff4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ff52:	ed61 7a01 	vstmdb	r1!, {s15}
 800ff56:	e73e      	b.n	800fdd6 <__kernel_rem_pio2f+0x20e>
 800ff58:	ecfc 6a01 	vldmia	ip!, {s13}
 800ff5c:	ecb6 7a01 	vldmia	r6!, {s14}
 800ff60:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff64:	3001      	adds	r0, #1
 800ff66:	4550      	cmp	r0, sl
 800ff68:	dc01      	bgt.n	800ff6e <__kernel_rem_pio2f+0x3a6>
 800ff6a:	4288      	cmp	r0, r1
 800ff6c:	ddf4      	ble.n	800ff58 <__kernel_rem_pio2f+0x390>
 800ff6e:	a858      	add	r0, sp, #352	; 0x160
 800ff70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff74:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ff78:	3a01      	subs	r2, #1
 800ff7a:	e730      	b.n	800fdde <__kernel_rem_pio2f+0x216>
 800ff7c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800ff7e:	2a02      	cmp	r2, #2
 800ff80:	dc09      	bgt.n	800ff96 <__kernel_rem_pio2f+0x3ce>
 800ff82:	2a00      	cmp	r2, #0
 800ff84:	dc2a      	bgt.n	800ffdc <__kernel_rem_pio2f+0x414>
 800ff86:	d043      	beq.n	8010010 <__kernel_rem_pio2f+0x448>
 800ff88:	f009 0007 	and.w	r0, r9, #7
 800ff8c:	b059      	add	sp, #356	; 0x164
 800ff8e:	ecbd 8b04 	vpop	{d8-d9}
 800ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff96:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ff98:	2b03      	cmp	r3, #3
 800ff9a:	d1f5      	bne.n	800ff88 <__kernel_rem_pio2f+0x3c0>
 800ff9c:	ab30      	add	r3, sp, #192	; 0xc0
 800ff9e:	442b      	add	r3, r5
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f1a1 0104 	sub.w	r1, r1, #4
 800ffac:	dc51      	bgt.n	8010052 <__kernel_rem_pio2f+0x48a>
 800ffae:	4621      	mov	r1, r4
 800ffb0:	2901      	cmp	r1, #1
 800ffb2:	f1a2 0204 	sub.w	r2, r2, #4
 800ffb6:	dc5c      	bgt.n	8010072 <__kernel_rem_pio2f+0x4aa>
 800ffb8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 800ffbc:	3304      	adds	r3, #4
 800ffbe:	2c01      	cmp	r4, #1
 800ffc0:	dc67      	bgt.n	8010092 <__kernel_rem_pio2f+0x4ca>
 800ffc2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ffc6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ffca:	2f00      	cmp	r7, #0
 800ffcc:	d167      	bne.n	801009e <__kernel_rem_pio2f+0x4d6>
 800ffce:	edc8 6a00 	vstr	s13, [r8]
 800ffd2:	ed88 7a01 	vstr	s14, [r8, #4]
 800ffd6:	edc8 7a02 	vstr	s15, [r8, #8]
 800ffda:	e7d5      	b.n	800ff88 <__kernel_rem_pio2f+0x3c0>
 800ffdc:	aa30      	add	r2, sp, #192	; 0xc0
 800ffde:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 800ffe2:	4413      	add	r3, r2
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	2a00      	cmp	r2, #0
 800ffe8:	da24      	bge.n	8010034 <__kernel_rem_pio2f+0x46c>
 800ffea:	b34f      	cbz	r7, 8010040 <__kernel_rem_pio2f+0x478>
 800ffec:	eef1 7a47 	vneg.f32	s15, s14
 800fff0:	edc8 7a00 	vstr	s15, [r8]
 800fff4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800fff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fffc:	aa31      	add	r2, sp, #196	; 0xc4
 800fffe:	2301      	movs	r3, #1
 8010000:	429c      	cmp	r4, r3
 8010002:	da20      	bge.n	8010046 <__kernel_rem_pio2f+0x47e>
 8010004:	b10f      	cbz	r7, 801000a <__kernel_rem_pio2f+0x442>
 8010006:	eef1 7a67 	vneg.f32	s15, s15
 801000a:	edc8 7a01 	vstr	s15, [r8, #4]
 801000e:	e7bb      	b.n	800ff88 <__kernel_rem_pio2f+0x3c0>
 8010010:	aa30      	add	r2, sp, #192	; 0xc0
 8010012:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800fed4 <__kernel_rem_pio2f+0x30c>
 8010016:	4413      	add	r3, r2
 8010018:	2c00      	cmp	r4, #0
 801001a:	da05      	bge.n	8010028 <__kernel_rem_pio2f+0x460>
 801001c:	b10f      	cbz	r7, 8010022 <__kernel_rem_pio2f+0x45a>
 801001e:	eef1 7a67 	vneg.f32	s15, s15
 8010022:	edc8 7a00 	vstr	s15, [r8]
 8010026:	e7af      	b.n	800ff88 <__kernel_rem_pio2f+0x3c0>
 8010028:	ed33 7a01 	vldmdb	r3!, {s14}
 801002c:	3c01      	subs	r4, #1
 801002e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010032:	e7f1      	b.n	8010018 <__kernel_rem_pio2f+0x450>
 8010034:	ed73 7a01 	vldmdb	r3!, {s15}
 8010038:	3a01      	subs	r2, #1
 801003a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801003e:	e7d2      	b.n	800ffe6 <__kernel_rem_pio2f+0x41e>
 8010040:	eef0 7a47 	vmov.f32	s15, s14
 8010044:	e7d4      	b.n	800fff0 <__kernel_rem_pio2f+0x428>
 8010046:	ecb2 7a01 	vldmia	r2!, {s14}
 801004a:	3301      	adds	r3, #1
 801004c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010050:	e7d6      	b.n	8010000 <__kernel_rem_pio2f+0x438>
 8010052:	edd1 7a00 	vldr	s15, [r1]
 8010056:	edd1 6a01 	vldr	s13, [r1, #4]
 801005a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801005e:	3801      	subs	r0, #1
 8010060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010064:	ed81 7a00 	vstr	s14, [r1]
 8010068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801006c:	edc1 7a01 	vstr	s15, [r1, #4]
 8010070:	e799      	b.n	800ffa6 <__kernel_rem_pio2f+0x3de>
 8010072:	edd2 7a00 	vldr	s15, [r2]
 8010076:	edd2 6a01 	vldr	s13, [r2, #4]
 801007a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801007e:	3901      	subs	r1, #1
 8010080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010084:	ed82 7a00 	vstr	s14, [r2]
 8010088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801008c:	edc2 7a01 	vstr	s15, [r2, #4]
 8010090:	e78e      	b.n	800ffb0 <__kernel_rem_pio2f+0x3e8>
 8010092:	ed33 7a01 	vldmdb	r3!, {s14}
 8010096:	3c01      	subs	r4, #1
 8010098:	ee77 7a87 	vadd.f32	s15, s15, s14
 801009c:	e78f      	b.n	800ffbe <__kernel_rem_pio2f+0x3f6>
 801009e:	eef1 6a66 	vneg.f32	s13, s13
 80100a2:	eeb1 7a47 	vneg.f32	s14, s14
 80100a6:	edc8 6a00 	vstr	s13, [r8]
 80100aa:	ed88 7a01 	vstr	s14, [r8, #4]
 80100ae:	eef1 7a67 	vneg.f32	s15, s15
 80100b2:	e790      	b.n	800ffd6 <__kernel_rem_pio2f+0x40e>

080100b4 <__kernel_sinf>:
 80100b4:	ee10 3a10 	vmov	r3, s0
 80100b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80100bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80100c0:	da04      	bge.n	80100cc <__kernel_sinf+0x18>
 80100c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80100c6:	ee17 3a90 	vmov	r3, s15
 80100ca:	b35b      	cbz	r3, 8010124 <__kernel_sinf+0x70>
 80100cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80100d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010128 <__kernel_sinf+0x74>
 80100d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801012c <__kernel_sinf+0x78>
 80100d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80100dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010130 <__kernel_sinf+0x7c>
 80100e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010134 <__kernel_sinf+0x80>
 80100e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80100ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010138 <__kernel_sinf+0x84>
 80100f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80100f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100f8:	b930      	cbnz	r0, 8010108 <__kernel_sinf+0x54>
 80100fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801013c <__kernel_sinf+0x88>
 80100fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010102:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010106:	4770      	bx	lr
 8010108:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801010c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010110:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010114:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010118:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010140 <__kernel_sinf+0x8c>
 801011c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010120:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	2f2ec9d3 	.word	0x2f2ec9d3
 801012c:	b2d72f34 	.word	0xb2d72f34
 8010130:	3638ef1b 	.word	0x3638ef1b
 8010134:	b9500d01 	.word	0xb9500d01
 8010138:	3c088889 	.word	0x3c088889
 801013c:	be2aaaab 	.word	0xbe2aaaab
 8010140:	3e2aaaab 	.word	0x3e2aaaab

08010144 <fabsf>:
 8010144:	ee10 3a10 	vmov	r3, s0
 8010148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801014c:	ee00 3a10 	vmov	s0, r3
 8010150:	4770      	bx	lr
	...

08010154 <floorf>:
 8010154:	ee10 3a10 	vmov	r3, s0
 8010158:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801015c:	3a7f      	subs	r2, #127	; 0x7f
 801015e:	2a16      	cmp	r2, #22
 8010160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010164:	dc2a      	bgt.n	80101bc <floorf+0x68>
 8010166:	2a00      	cmp	r2, #0
 8010168:	da11      	bge.n	801018e <floorf+0x3a>
 801016a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80101cc <floorf+0x78>
 801016e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010172:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017a:	dd05      	ble.n	8010188 <floorf+0x34>
 801017c:	2b00      	cmp	r3, #0
 801017e:	da23      	bge.n	80101c8 <floorf+0x74>
 8010180:	4a13      	ldr	r2, [pc, #76]	; (80101d0 <floorf+0x7c>)
 8010182:	2900      	cmp	r1, #0
 8010184:	bf18      	it	ne
 8010186:	4613      	movne	r3, r2
 8010188:	ee00 3a10 	vmov	s0, r3
 801018c:	4770      	bx	lr
 801018e:	4911      	ldr	r1, [pc, #68]	; (80101d4 <floorf+0x80>)
 8010190:	4111      	asrs	r1, r2
 8010192:	420b      	tst	r3, r1
 8010194:	d0fa      	beq.n	801018c <floorf+0x38>
 8010196:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80101cc <floorf+0x78>
 801019a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801019e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	ddef      	ble.n	8010188 <floorf+0x34>
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	bfbe      	ittt	lt
 80101ac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80101b0:	fa40 f202 	asrlt.w	r2, r0, r2
 80101b4:	189b      	addlt	r3, r3, r2
 80101b6:	ea23 0301 	bic.w	r3, r3, r1
 80101ba:	e7e5      	b.n	8010188 <floorf+0x34>
 80101bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80101c0:	d3e4      	bcc.n	801018c <floorf+0x38>
 80101c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80101c6:	4770      	bx	lr
 80101c8:	2300      	movs	r3, #0
 80101ca:	e7dd      	b.n	8010188 <floorf+0x34>
 80101cc:	7149f2ca 	.word	0x7149f2ca
 80101d0:	bf800000 	.word	0xbf800000
 80101d4:	007fffff 	.word	0x007fffff

080101d8 <scalbnf>:
 80101d8:	ee10 3a10 	vmov	r3, s0
 80101dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80101e0:	d025      	beq.n	801022e <scalbnf+0x56>
 80101e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80101e6:	d302      	bcc.n	80101ee <scalbnf+0x16>
 80101e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80101ec:	4770      	bx	lr
 80101ee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80101f2:	d122      	bne.n	801023a <scalbnf+0x62>
 80101f4:	4b2a      	ldr	r3, [pc, #168]	; (80102a0 <scalbnf+0xc8>)
 80101f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80102a4 <scalbnf+0xcc>
 80101fa:	4298      	cmp	r0, r3
 80101fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010200:	db16      	blt.n	8010230 <scalbnf+0x58>
 8010202:	ee10 3a10 	vmov	r3, s0
 8010206:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801020a:	3a19      	subs	r2, #25
 801020c:	4402      	add	r2, r0
 801020e:	2afe      	cmp	r2, #254	; 0xfe
 8010210:	dd15      	ble.n	801023e <scalbnf+0x66>
 8010212:	ee10 3a10 	vmov	r3, s0
 8010216:	eddf 7a24 	vldr	s15, [pc, #144]	; 80102a8 <scalbnf+0xd0>
 801021a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80102ac <scalbnf+0xd4>
 801021e:	2b00      	cmp	r3, #0
 8010220:	eeb0 7a67 	vmov.f32	s14, s15
 8010224:	bfb8      	it	lt
 8010226:	eef0 7a66 	vmovlt.f32	s15, s13
 801022a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801022e:	4770      	bx	lr
 8010230:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80102b0 <scalbnf+0xd8>
 8010234:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010238:	4770      	bx	lr
 801023a:	0dd2      	lsrs	r2, r2, #23
 801023c:	e7e6      	b.n	801020c <scalbnf+0x34>
 801023e:	2a00      	cmp	r2, #0
 8010240:	dd06      	ble.n	8010250 <scalbnf+0x78>
 8010242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010246:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801024a:	ee00 3a10 	vmov	s0, r3
 801024e:	4770      	bx	lr
 8010250:	f112 0f16 	cmn.w	r2, #22
 8010254:	da1a      	bge.n	801028c <scalbnf+0xb4>
 8010256:	f24c 3350 	movw	r3, #50000	; 0xc350
 801025a:	4298      	cmp	r0, r3
 801025c:	ee10 3a10 	vmov	r3, s0
 8010260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010264:	dd0a      	ble.n	801027c <scalbnf+0xa4>
 8010266:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80102a8 <scalbnf+0xd0>
 801026a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80102ac <scalbnf+0xd4>
 801026e:	eef0 7a40 	vmov.f32	s15, s0
 8010272:	2b00      	cmp	r3, #0
 8010274:	bf18      	it	ne
 8010276:	eeb0 0a47 	vmovne.f32	s0, s14
 801027a:	e7db      	b.n	8010234 <scalbnf+0x5c>
 801027c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80102b0 <scalbnf+0xd8>
 8010280:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80102b4 <scalbnf+0xdc>
 8010284:	eef0 7a40 	vmov.f32	s15, s0
 8010288:	2b00      	cmp	r3, #0
 801028a:	e7f3      	b.n	8010274 <scalbnf+0x9c>
 801028c:	3219      	adds	r2, #25
 801028e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010292:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010296:	eddf 7a08 	vldr	s15, [pc, #32]	; 80102b8 <scalbnf+0xe0>
 801029a:	ee07 3a10 	vmov	s14, r3
 801029e:	e7c4      	b.n	801022a <scalbnf+0x52>
 80102a0:	ffff3cb0 	.word	0xffff3cb0
 80102a4:	4c000000 	.word	0x4c000000
 80102a8:	7149f2ca 	.word	0x7149f2ca
 80102ac:	f149f2ca 	.word	0xf149f2ca
 80102b0:	0da24260 	.word	0x0da24260
 80102b4:	8da24260 	.word	0x8da24260
 80102b8:	33000000 	.word	0x33000000

080102bc <_init>:
 80102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102be:	bf00      	nop
 80102c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102c2:	bc08      	pop	{r3}
 80102c4:	469e      	mov	lr, r3
 80102c6:	4770      	bx	lr

080102c8 <_fini>:
 80102c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ca:	bf00      	nop
 80102cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ce:	bc08      	pop	{r3}
 80102d0:	469e      	mov	lr, r3
 80102d2:	4770      	bx	lr
